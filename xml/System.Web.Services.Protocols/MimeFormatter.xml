<Type Name="MimeFormatter" FullName="System.Web.Services.Protocols.MimeFormatter">
  <Metadata><Meta Name="ms.openlocfilehash" Value="21c13f63563ac6f45b9e5d9c268839da1c57b946" /><Meta Name="ms.sourcegitcommit" Value="f1d16425528e237257ca3b58eb49217a514849ea" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="es-ES" /><Meta Name="ms.lasthandoff" Value="04/24/2019" /><Meta Name="ms.locfileid" Value="64023651" /></Metadata><TypeSignature Language="C#" Value="public abstract class MimeFormatter" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit MimeFormatter extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Web.Services.Protocols.MimeFormatter" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class MimeFormatter" />
  <TypeSignature Language="C++ CLI" Value="public ref class MimeFormatter abstract" />
  <TypeSignature Language="F#" Value="type MimeFormatter = class" />
  <AssemblyInfo>
    <AssemblyName>System.Web.Services</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Proporciona una clase base abstracta para todos los sistemas de lectura y escritura destinados a los servicios y clientes Web implementados mediante HTTP pero sin SOAP.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Los lectores y escritores de servicios web serializar y deserializan, respectivamente, entre los objetos de parámetro o valor devuelto de los métodos Web y las secuencias de solicitud o respuesta HTTP. La <xref:System.Web.Services.Protocols.MimeFormatter> clase establece una interfaz y funcionalidad comunes para las clases de lector y escritor, en el cliente y el lado del servicio.  
  
 La <xref:System.Web.Services.Protocols.MimeFormatter> clase es compatible con las implementaciones de .NET Framework de servicios Web a través de las operaciones HTTP-GET y HTTP-POST. En las operaciones GET de HTTP, los parámetros de solicitud se codifican del localizador de recursos uniforme (URL) en la solicitud HTTP. En las operaciones HTTP-POST, los parámetros de solicitud se codifican en el cuerpo de solicitud HTTP, al igual que con un formulario HTML. Con ambas implementaciones, el valor devuelto aparece en el cuerpo de respuesta HTTP como un documento XML no SOAP.  
  
 Normalmente, un desarrollador no necesita utilizar directamente <xref:System.Web.Services.Protocols.MimeFormatter> o sus clases descendientes. En su lugar, cuando la herramienta Wsdl.exe genera código proxy del cliente según las implementaciones HTTP-GET o HTTP-POST, aplica el <xref:System.Web.Services.Protocols.HttpMethodAttribute> a cada método Web y establece el atributo <xref:System.Web.Services.Protocols.HttpMethodAttribute.ParameterFormatter%2A> y <xref:System.Web.Services.Protocols.HttpMethodAttribute.ReturnFormatter%2A> propiedades al tipo adecuado deriva el <xref:System.Web.Services.Protocols.MimeFormatter> clase. En el servidor, se usan los tipos derivados apropiados según la configuración de un archivo de configuración de ASP.NET (Web.config). En el cliente se determinan los tipos derivados apropiados desde WSDL.  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Web.Services.Protocols.HttpMethodAttribute" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected MimeFormatter ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Services.Protocols.MimeFormatter.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; MimeFormatter();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Services</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Web.Services.Protocols.MimeFormatter" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateInstance">
      <MemberSignature Language="C#" Value="public static System.Web.Services.Protocols.MimeFormatter CreateInstance (Type type, object initializer);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Web.Services.Protocols.MimeFormatter CreateInstance(class System.Type type, object initializer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Services.Protocols.MimeFormatter.CreateInstance(System.Type,System.Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Web::Services::Protocols::MimeFormatter ^ CreateInstance(Type ^ type, System::Object ^ initializer);" />
      <MemberSignature Language="F#" Value="static member CreateInstance : Type * obj -&gt; System.Web.Services.Protocols.MimeFormatter" Usage="System.Web.Services.Protocols.MimeFormatter.CreateInstance (type, initializer)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Services</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.Services.Protocols.MimeFormatter</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="initializer" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="type">Tipo, derivado de <see cref="T:System.Web.Services.Protocols.MimeFormatter" />, del que se va a crear una instancia.</param>
        <param name="initializer">Objeto utilizado para inicializar la instancia obtenida previamente a través de la implementación de la clase derivada del método <see cref="M:System.Web.Services.Protocols.MimeFormatter.GetInitializer(System.Web.Services.Protocols.LogicalMethodInfo)" />.</param>
        <summary>Crea e inicializa una instancia de una clase concreta derivada de <see cref="T:System.Web.Services.Protocols.MimeFormatter" />.</summary>
        <returns>Objeto <see cref="T:System.Web.Services.Protocols.MimeFormatter" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Web.Services.Protocols.MimeFormatter.CreateInstance%2A> método crea una instancia de la clase derivada e invoca la implementación de la clase derivada de la abstracta <xref:System.Web.Services.Protocols.MimeFormatter.Initialize%2A> método. El <xref:System.Web.Services.Protocols.MimeFormatter.CreateInstance%2A> método se invoca en el momento en que se procesa una solicitud o respuesta.  
  
 Un inicializador es un objeto pasado como parámetro a la <xref:System.Web.Services.Protocols.MimeFormatter.Initialize%2A> método. El inicializador se pasa como parámetro a la <xref:System.Web.Services.Protocols.MimeFormatter.CreateInstance%2A> método se obtiene desde otra instancia de la clase derivada, invocando el <xref:System.Web.Services.Protocols.MimeFormatter.GetInitializer%2A> método durante la inicialización del cliente o servicio.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetInitializer">
      <AssemblyInfo>
        <AssemblyName>System.Web.Services</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Cuando se reemplaza en una clase derivada, devuelve un inicializador para el método especificado.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetInitializer">
      <MemberSignature Language="C#" Value="public abstract object GetInitializer (System.Web.Services.Protocols.LogicalMethodInfo methodInfo);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object GetInitializer(class System.Web.Services.Protocols.LogicalMethodInfo methodInfo) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Services.Protocols.MimeFormatter.GetInitializer(System.Web.Services.Protocols.LogicalMethodInfo)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function GetInitializer (methodInfo As LogicalMethodInfo) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract System::Object ^ GetInitializer(System::Web::Services::Protocols::LogicalMethodInfo ^ methodInfo);" />
      <MemberSignature Language="F#" Value="abstract member GetInitializer : System.Web.Services.Protocols.LogicalMethodInfo -&gt; obj" Usage="mimeFormatter.GetInitializer methodInfo" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Services</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="methodInfo" Type="System.Web.Services.Protocols.LogicalMethodInfo" />
      </Parameters>
      <Docs>
        <param name="methodInfo"><see cref="T:System.Web.Services.Protocols.LogicalMethodInfo" /> que especifica el método web para el que se obtiene el inicializador.</param>
        <summary>Cuando se reemplaza en una clase derivada, devuelve un inicializador para el método especificado.</summary>
        <returns><see cref="T:System.Object" /> que contiene el inicializador del método especificado.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Un inicializador es un objeto pasado como parámetro a la <xref:System.Web.Services.Protocols.MimeFormatter.Initialize%2A> método.  
  
 Implementación de una clase derivada de la <xref:System.Web.Services.Protocols.MimeFormatter.GetInitializer%2A> se invoca el método de instancia durante la inicialización del cliente o servicio. Más adelante, al tiempo que se procesa una solicitud o respuesta, el objeto inicializador se pasa a estático <xref:System.Web.Services.Protocols.MimeFormatter.CreateInstance%2A> método, que crea una instancia de otro objeto de la clase derivada y, a continuación, en el <xref:System.Web.Services.Protocols.MimeFormatter.Initialize%2A> método para inicializarlo. El otro objeto realiza la lectura o escritura real.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetInitializer">
      <MemberSignature Language="C#" Value="public static object GetInitializer (Type type, System.Web.Services.Protocols.LogicalMethodInfo methodInfo);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig object GetInitializer(class System.Type type, class System.Web.Services.Protocols.LogicalMethodInfo methodInfo) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Services.Protocols.MimeFormatter.GetInitializer(System.Type,System.Web.Services.Protocols.LogicalMethodInfo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ GetInitializer(Type ^ type, System::Web::Services::Protocols::LogicalMethodInfo ^ methodInfo);" />
      <MemberSignature Language="F#" Value="static member GetInitializer : Type * System.Web.Services.Protocols.LogicalMethodInfo -&gt; obj" Usage="System.Web.Services.Protocols.MimeFormatter.GetInitializer (type, methodInfo)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Services</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="methodInfo" Type="System.Web.Services.Protocols.LogicalMethodInfo" />
      </Parameters>
      <Docs>
        <param name="type">Tipo, derivado de <see cref="T:System.Web.Services.Protocols.MimeFormatter" />, para el que se obtiene un inicializador.</param>
        <param name="methodInfo"><see cref="T:System.Web.Services.Protocols.LogicalMethodInfo" /> que especifica el método web para el que se obtiene el inicializador.</param>
        <summary>Devuelve un inicializador del método especificado.</summary>
        <returns>Objeto <see cref="T:System.Object" /> que contiene el inicializador para el método especificado.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Un inicializador es un objeto pasado como parámetro a la <xref:System.Web.Services.Protocols.MimeFormatter.Initialize%2A> método.  
  
 Estático <xref:System.Web.Services.Protocols.MimeFormatter.GetInitializer%2A> método invoca la clase derivada <xref:System.Web.Services.Protocols.MimeFormatter.GetInitializer%2A> método, crear implícitamente una instancia de la clase derivada. En el momento en que se procesa una solicitud o respuesta, el objeto inicializador se pasa a la <xref:System.Web.Services.Protocols.MimeFormatter.Initialize%2A> método de otra instancia de la clase derivada. El último objeto realiza la lectura o escritura real.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetInitializers">
      <AssemblyInfo>
        <AssemblyName>System.Web.Services</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Cuando se reemplaza en una clase derivada, devuelve una matriz de objetos de inicializador que corresponde a una matriz de entrada de definiciones de método.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetInitializers">
      <MemberSignature Language="C#" Value="public virtual object[] GetInitializers (System.Web.Services.Protocols.LogicalMethodInfo[] methodInfos);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object[] GetInitializers(class System.Web.Services.Protocols.LogicalMethodInfo[] methodInfos) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Services.Protocols.MimeFormatter.GetInitializers(System.Web.Services.Protocols.LogicalMethodInfo[])" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetInitializers (methodInfos As LogicalMethodInfo()) As Object()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual cli::array &lt;System::Object ^&gt; ^ GetInitializers(cli::array &lt;System::Web::Services::Protocols::LogicalMethodInfo ^&gt; ^ methodInfos);" />
      <MemberSignature Language="F#" Value="abstract member GetInitializers : System.Web.Services.Protocols.LogicalMethodInfo[] -&gt; obj[]&#xA;override this.GetInitializers : System.Web.Services.Protocols.LogicalMethodInfo[] -&gt; obj[]" Usage="mimeFormatter.GetInitializers methodInfos" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Services</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="methodInfos" Type="System.Web.Services.Protocols.LogicalMethodInfo[]" />
      </Parameters>
      <Docs>
        <param name="methodInfos">Matriz de métodos Web en la que se obtiene, para cada método, el objeto del índice correspondiente en la matriz de inicializador devuelta.</param>
        <summary>Cuando se reemplaza en una clase derivada, devuelve una matriz de objetos de inicializador que corresponde a una matriz de entrada de definiciones de método.</summary>
        <returns>Matriz de objetos de inicializador correspondiente a la matriz de entrada de definiciones de método.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Un inicializador es un objeto pasado como parámetro a la <xref:System.Web.Services.Protocols.MimeFormatter.Initialize%2A> método.  
  
 El <xref:System.Web.Services.Protocols.MimeFormatter.GetInitializers%2A> invoca el método de instancia el <xref:System.Web.Services.Protocols.MimeFormatter.GetInitializer%2A> método de instancia para cada método Web de entrada. Esto significa que una instancia de una clase derivada de <xref:System.Web.Services.Protocols.MimeFormatter> ya se ha creado. En el momento en que se procesa una solicitud o respuesta, el inicializador se pasa a la <xref:System.Web.Services.Protocols.MimeFormatter.Initialize%2A> método de otra instancia de la clase derivada. El último objeto realiza la lectura o escritura real.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetInitializers">
      <MemberSignature Language="C#" Value="public static object[] GetInitializers (Type type, System.Web.Services.Protocols.LogicalMethodInfo[] methodInfos);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig object[] GetInitializers(class System.Type type, class System.Web.Services.Protocols.LogicalMethodInfo[] methodInfos) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Services.Protocols.MimeFormatter.GetInitializers(System.Type,System.Web.Services.Protocols.LogicalMethodInfo[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static cli::array &lt;System::Object ^&gt; ^ GetInitializers(Type ^ type, cli::array &lt;System::Web::Services::Protocols::LogicalMethodInfo ^&gt; ^ methodInfos);" />
      <MemberSignature Language="F#" Value="static member GetInitializers : Type * System.Web.Services.Protocols.LogicalMethodInfo[] -&gt; obj[]" Usage="System.Web.Services.Protocols.MimeFormatter.GetInitializers (type, methodInfos)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Services</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="methodInfos" Type="System.Web.Services.Protocols.LogicalMethodInfo[]" />
      </Parameters>
      <Docs>
        <param name="type">Tipo, derivado de <see cref="T:System.Web.Services.Protocols.MimeFormatter" />, para el que se obtienen inicializadores.</param>
        <param name="methodInfos">Matriz de tipo <see cref="T:System.Web.Services.Protocols.LogicalMethodInfo" /> que especifica los métodos Web para los que se obtienen los inicializadores.</param>
        <summary>Devuelve una matriz de objetos de inicializador que corresponde a una matriz de entrada de definiciones de método para una clase especificada derivada de <see cref="T:System.Web.Services.Protocols.MimeFormatter" />.</summary>
        <returns>Matriz de objetos de inicializador que corresponde a una matriz de entrada de definiciones de método para una clase especificada derivada de <see cref="T:System.Web.Services.Protocols.MimeFormatter" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Un inicializador es un objeto pasado como parámetro a la <xref:System.Web.Services.Protocols.MimeFormatter.Initialize%2A> método.  
  
 Estático <xref:System.Web.Services.Protocols.MimeFormatter.GetInitializers%2A> método hace que la invocación de la <xref:System.Web.Services.Protocols.MimeFormatter.GetInitializer%2A> método perteneciente a la clase derivada especificada por el `type` parámetro.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Initialize">
      <MemberSignature Language="C#" Value="public abstract void Initialize (object initializer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Initialize(object initializer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Services.Protocols.MimeFormatter.Initialize(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Sub Initialize (initializer As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract void Initialize(System::Object ^ initializer);" />
      <MemberSignature Language="F#" Value="abstract member Initialize : obj -&gt; unit" Usage="mimeFormatter.Initialize initializer" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Services</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="initializer" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="initializer">Objeto de un tipo adecuado a la clase determinada que está implementando el método.</param>
        <summary>Cuando se reemplaza en una clase derivada, inicializa una instancia.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Web.Services.Protocols.MimeFormatter.Initialize%2A> método se invoca en el momento en que se procesa una solicitud o respuesta; sin embargo, se obtiene el inicializador mediante una llamada a la <xref:System.Web.Services.Protocols.MimeFormatter.GetInitializer%2A> método en otra instancia durante la inicialización del cliente o servicio.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>