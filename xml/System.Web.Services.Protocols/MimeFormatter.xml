<Type Name="MimeFormatter" FullName="System.Web.Services.Protocols.MimeFormatter">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="4273f59c3e828464013176223885c57e91dee930" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="es-ES" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36595056" />
  </Metadata>
  <TypeSignature Language="C#" Value="public abstract class MimeFormatter" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit MimeFormatter extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Web.Services.Protocols.MimeFormatter" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class MimeFormatter" />
  <TypeSignature Language="C++ CLI" Value="public ref class MimeFormatter abstract" />
  <TypeSignature Language="F#" Value="type MimeFormatter = class" />
  <AssemblyInfo>
    <AssemblyName>System.Web.Services</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Provides an abstract base class for all readers and writers for Web services and clients implemented using HTTP but without SOAP.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Los lectores y escritores de servicios web serializan y deserializan, respectivamente, entre los objetos de valor devuelto o parámetro de los métodos Web y las secuencias de solicitud o respuesta HTTP. La <xref:System.Web.Services.Protocols.MimeFormatter> clase establece una interfaz y la funcionalidad para las clases de lector y escritor, comunes en el cliente y el lado del servicio.  
  
 La <xref:System.Web.Services.Protocols.MimeFormatter> clase es compatible con las implementaciones de .NET Framework de los servicios Web a través de las operaciones HTTP-GET y HTTP-POST. En las operaciones GET de HTTP de los parámetros de solicitud se codifican del localizador de recursos uniforme (URL) en la solicitud HTTP. En las operaciones HTTP-POST, los parámetros de solicitud se codifican en el cuerpo de solicitud HTTP, como ocurre con un formulario HTML. Con ambas implementaciones, el valor devuelto aparece en el cuerpo de respuesta HTTP como un documento XML que no sea SOAP.  
  
 Un desarrollador no necesita normalmente utilizar directamente <xref:System.Web.Services.Protocols.MimeFormatter> o sus clases descendientes. En su lugar, cuando la herramienta Wsdl.exe genera código de proxy del cliente según las implementaciones HTTP-GET o HTTP-POST, aplica el <xref:System.Web.Services.Protocols.HttpMethodAttribute> a cada método Web y establece el atributo <xref:System.Web.Services.Protocols.HttpMethodAttribute.ParameterFormatter%2A> y <xref:System.Web.Services.Protocols.HttpMethodAttribute.ReturnFormatter%2A> propiedades al tipo adecuado deriva de la <xref:System.Web.Services.Protocols.MimeFormatter> clase. En el servidor, se utilizan los tipos derivados adecuados según la configuración en un archivo de configuración de ASP.NET (Web.config). En el cliente se determinan los tipos derivados adecuados de WSDL.  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Web.Services.Protocols.HttpMethodAttribute" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected MimeFormatter ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Services.Protocols.MimeFormatter.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; MimeFormatter();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Services</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Initializes a new instance of the <see cref="T:System.Web.Services.Protocols.MimeFormatter" /> class.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateInstance">
      <MemberSignature Language="C#" Value="public static System.Web.Services.Protocols.MimeFormatter CreateInstance (Type type, object initializer);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Web.Services.Protocols.MimeFormatter CreateInstance(class System.Type type, object initializer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Services.Protocols.MimeFormatter.CreateInstance(System.Type,System.Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Web::Services::Protocols::MimeFormatter ^ CreateInstance(Type ^ type, System::Object ^ initializer);" />
      <MemberSignature Language="F#" Value="static member CreateInstance : Type * obj -&gt; System.Web.Services.Protocols.MimeFormatter" Usage="System.Web.Services.Protocols.MimeFormatter.CreateInstance (type, initializer)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Services</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.Services.Protocols.MimeFormatter</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="initializer" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="type">The Type, derived from <see cref="T:System.Web.Services.Protocols.MimeFormatter" />, of which to create an instance.</param>
        <param name="initializer">An object used to initialize the instance obtained earlier through the derived class's implementation of the <see cref="M:System.Web.Services.Protocols.MimeFormatter.GetInitializer(System.Web.Services.Protocols.LogicalMethodInfo)" /> method.</param>
        <summary>Creates and initializes an instance of a concrete class derived from <see cref="T:System.Web.Services.Protocols.MimeFormatter" />.</summary>
        <returns>A <see cref="T:System.Web.Services.Protocols.MimeFormatter" /> object.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Web.Services.Protocols.MimeFormatter.CreateInstance%2A> método crea una instancia de la clase derivada e invoca la implementación de la clase derivada de la abstracta <xref:System.Web.Services.Protocols.MimeFormatter.Initialize%2A> método. El <xref:System.Web.Services.Protocols.MimeFormatter.CreateInstance%2A> método se invoca en el momento en que se procesa una solicitud o respuesta.  
  
 Un inicializador es un objeto que se pasa como un parámetro a la <xref:System.Web.Services.Protocols.MimeFormatter.Initialize%2A> método. El inicializador pasado como parámetro a la <xref:System.Web.Services.Protocols.MimeFormatter.CreateInstance%2A> método se obtiene desde otra instancia de la clase derivada, invocando el <xref:System.Web.Services.Protocols.MimeFormatter.GetInitializer%2A> método durante la inicialización del cliente o servicio.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetInitializer">
      <AssemblyInfo>
        <AssemblyName>System.Web.Services</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>When overridden in a derived class, returns an initializer for the specified method.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetInitializer">
      <MemberSignature Language="C#" Value="public abstract object GetInitializer (System.Web.Services.Protocols.LogicalMethodInfo methodInfo);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object GetInitializer(class System.Web.Services.Protocols.LogicalMethodInfo methodInfo) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Services.Protocols.MimeFormatter.GetInitializer(System.Web.Services.Protocols.LogicalMethodInfo)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function GetInitializer (methodInfo As LogicalMethodInfo) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract System::Object ^ GetInitializer(System::Web::Services::Protocols::LogicalMethodInfo ^ methodInfo);" />
      <MemberSignature Language="F#" Value="abstract member GetInitializer : System.Web.Services.Protocols.LogicalMethodInfo -&gt; obj" Usage="mimeFormatter.GetInitializer methodInfo" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Services</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="methodInfo" Type="System.Web.Services.Protocols.LogicalMethodInfo" />
      </Parameters>
      <Docs>
        <param name="methodInfo">A <see cref="T:System.Web.Services.Protocols.LogicalMethodInfo" /> that specifies the Web method for which the initializer is obtained.</param>
        <summary>When overridden in a derived class, returns an initializer for the specified method.</summary>
        <returns>An <see cref="T:System.Object" /> that contains the initializer for the specified method.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Un inicializador es un objeto que se pasa como un parámetro a la <xref:System.Web.Services.Protocols.MimeFormatter.Initialize%2A> método.  
  
 Implementación de una clase derivada de la <xref:System.Web.Services.Protocols.MimeFormatter.GetInitializer%2A> método de instancia se invoca durante la inicialización del cliente o servicio. Más adelante, en el momento en que se procesa una solicitud o respuesta, se pasa el objeto de inicializador para el método estático <xref:System.Web.Services.Protocols.MimeFormatter.CreateInstance%2A> método, que crea una instancia de otro objeto de la clase derivada y, a continuación, en la <xref:System.Web.Services.Protocols.MimeFormatter.Initialize%2A> método para inicializarlo. El otro objeto realiza la lectura o escritura real.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetInitializer">
      <MemberSignature Language="C#" Value="public static object GetInitializer (Type type, System.Web.Services.Protocols.LogicalMethodInfo methodInfo);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig object GetInitializer(class System.Type type, class System.Web.Services.Protocols.LogicalMethodInfo methodInfo) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Services.Protocols.MimeFormatter.GetInitializer(System.Type,System.Web.Services.Protocols.LogicalMethodInfo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ GetInitializer(Type ^ type, System::Web::Services::Protocols::LogicalMethodInfo ^ methodInfo);" />
      <MemberSignature Language="F#" Value="static member GetInitializer : Type * System.Web.Services.Protocols.LogicalMethodInfo -&gt; obj" Usage="System.Web.Services.Protocols.MimeFormatter.GetInitializer (type, methodInfo)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Services</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="methodInfo" Type="System.Web.Services.Protocols.LogicalMethodInfo" />
      </Parameters>
      <Docs>
        <param name="type">The Type, derived from <see cref="T:System.Web.Services.Protocols.MimeFormatter" />,- for which an initializer is obtained.</param>
        <param name="methodInfo">A <see cref="T:System.Web.Services.Protocols.LogicalMethodInfo" /> that specifies the Web method for which the initializer is obtained.</param>
        <summary>Returns an initializer for the specified method.</summary>
        <returns>A <see cref="T:System.Object" /> object that contains the initializer for the specified method.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Un inicializador es un objeto que se pasa como un parámetro a la <xref:System.Web.Services.Protocols.MimeFormatter.Initialize%2A> método.  
  
 El método estático <xref:System.Web.Services.Protocols.MimeFormatter.GetInitializer%2A> método invoca la clase derivada <xref:System.Web.Services.Protocols.MimeFormatter.GetInitializer%2A> método, crear implícitamente una instancia de la clase derivada. En el momento en que se procesa una solicitud o respuesta, el objeto inicializador se pasa a la <xref:System.Web.Services.Protocols.MimeFormatter.Initialize%2A> método de otra instancia de la clase derivada. El último objeto realiza la lectura o escritura real.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetInitializers">
      <AssemblyInfo>
        <AssemblyName>System.Web.Services</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>When overridden in a derived class, returns an array of initializer objects corresponding to an input array of method definitions.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetInitializers">
      <MemberSignature Language="C#" Value="public virtual object[] GetInitializers (System.Web.Services.Protocols.LogicalMethodInfo[] methodInfos);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object[] GetInitializers(class System.Web.Services.Protocols.LogicalMethodInfo[] methodInfos) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Services.Protocols.MimeFormatter.GetInitializers(System.Web.Services.Protocols.LogicalMethodInfo[])" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetInitializers (methodInfos As LogicalMethodInfo()) As Object()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual cli::array &lt;System::Object ^&gt; ^ GetInitializers(cli::array &lt;System::Web::Services::Protocols::LogicalMethodInfo ^&gt; ^ methodInfos);" />
      <MemberSignature Language="F#" Value="abstract member GetInitializers : System.Web.Services.Protocols.LogicalMethodInfo[] -&gt; obj[]&#xA;override this.GetInitializers : System.Web.Services.Protocols.LogicalMethodInfo[] -&gt; obj[]" Usage="mimeFormatter.GetInitializers methodInfos" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Services</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="methodInfos" Type="System.Web.Services.Protocols.LogicalMethodInfo[]" />
      </Parameters>
      <Docs>
        <param name="methodInfos">An array of Web methods where, for each method, the object of the corresponding index in the returned initializer array is obtained.</param>
        <summary>When overridden in a derived class, returns an array of initializer objects corresponding to an input array of method definitions.</summary>
        <returns>An array of initializer objects corresponding to the input array of method definitions.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Un inicializador es un objeto que se pasa como un parámetro a la <xref:System.Web.Services.Protocols.MimeFormatter.Initialize%2A> método.  
  
 El <xref:System.Web.Services.Protocols.MimeFormatter.GetInitializers%2A> método de instancia, se invoca el <xref:System.Web.Services.Protocols.MimeFormatter.GetInitializer%2A> método de instancia para cada método Web de entrada. Esto significa que una instancia de una clase derivada de <xref:System.Web.Services.Protocols.MimeFormatter> ya se ha creado. En el momento en que se procesa una solicitud o respuesta, el inicializador se pasa a la <xref:System.Web.Services.Protocols.MimeFormatter.Initialize%2A> método de otra instancia de la clase derivada. El último objeto realiza la lectura o escritura real.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetInitializers">
      <MemberSignature Language="C#" Value="public static object[] GetInitializers (Type type, System.Web.Services.Protocols.LogicalMethodInfo[] methodInfos);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig object[] GetInitializers(class System.Type type, class System.Web.Services.Protocols.LogicalMethodInfo[] methodInfos) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Services.Protocols.MimeFormatter.GetInitializers(System.Type,System.Web.Services.Protocols.LogicalMethodInfo[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static cli::array &lt;System::Object ^&gt; ^ GetInitializers(Type ^ type, cli::array &lt;System::Web::Services::Protocols::LogicalMethodInfo ^&gt; ^ methodInfos);" />
      <MemberSignature Language="F#" Value="static member GetInitializers : Type * System.Web.Services.Protocols.LogicalMethodInfo[] -&gt; obj[]" Usage="System.Web.Services.Protocols.MimeFormatter.GetInitializers (type, methodInfos)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Services</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="methodInfos" Type="System.Web.Services.Protocols.LogicalMethodInfo[]" />
      </Parameters>
      <Docs>
        <param name="type">The Type, derived from <see cref="T:System.Web.Services.Protocols.MimeFormatter" />, for which initializers are obtained.</param>
        <param name="methodInfos">An array of type <see cref="T:System.Web.Services.Protocols.LogicalMethodInfo" /> that specifies the Web methods for which the initializers are obtained.</param>
        <summary>Returns an array of initializer objects corresponding to an input array of method definitions for a specified class derived from <see cref="T:System.Web.Services.Protocols.MimeFormatter" />.</summary>
        <returns>An array of initializer objects corresponding to the input array of method definitions for a specified class derived from <see cref="T:System.Web.Services.Protocols.MimeFormatter" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Un inicializador es un objeto que se pasa como un parámetro a la <xref:System.Web.Services.Protocols.MimeFormatter.Initialize%2A> método.  
  
 El método estático <xref:System.Web.Services.Protocols.MimeFormatter.GetInitializers%2A> método hace que la invocación de la <xref:System.Web.Services.Protocols.MimeFormatter.GetInitializer%2A> método perteneciente a la clase derivada especificada por el `type` parámetro.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Initialize">
      <MemberSignature Language="C#" Value="public abstract void Initialize (object initializer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Initialize(object initializer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Services.Protocols.MimeFormatter.Initialize(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Sub Initialize (initializer As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract void Initialize(System::Object ^ initializer);" />
      <MemberSignature Language="F#" Value="abstract member Initialize : obj -&gt; unit" Usage="mimeFormatter.Initialize initializer" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Services</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="initializer" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="initializer">An object of a type appropriate to the particular class that is implementing the method.</param>
        <summary>When overridden in a derived class, initializes an instance.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Web.Services.Protocols.MimeFormatter.Initialize%2A> método se invoca en el momento en que se procesa una solicitud o respuesta; sin embargo, se obtiene el inicializador llamando el <xref:System.Web.Services.Protocols.MimeFormatter.GetInitializer%2A> método en otra instancia durante la inicialización del cliente o servicio.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>