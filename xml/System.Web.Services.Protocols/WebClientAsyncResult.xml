<Type Name="WebClientAsyncResult" FullName="System.Web.Services.Protocols.WebClientAsyncResult">
  <TypeSignature Language="C#" Value="public class WebClientAsyncResult : IAsyncResult" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit WebClientAsyncResult extends System.Object implements class System.IAsyncResult" />
  <TypeSignature Language="DocId" Value="T:System.Web.Services.Protocols.WebClientAsyncResult" />
  <TypeSignature Language="VB.NET" Value="Public Class WebClientAsyncResult&#xA;Implements IAsyncResult" />
  <TypeSignature Language="C++ CLI" Value="public ref class WebClientAsyncResult : IAsyncResult" />
  <AssemblyInfo>
    <AssemblyName>System.Web.Services</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IAsyncResult</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary><span data-ttu-id="d98a1-101">Proporciona una implementación de <see cref="T:System.IAsyncResult" /> para que los servidores proxy de servicios Web XML la utilicen para implementar el patrón estándar de métodos asincrónicos.</span><span class="sxs-lookup"><span data-stu-id="d98a1-101">Provides an implementation of <see cref="T:System.IAsyncResult" /> for use by XML Web service proxies to implement the standard asynchronous method pattern.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d98a1-102">Cuando se llama a la `BeginMyMethodName` método, donde `MyMethodName` es la versión sincrónica del método, en una clase de proxy de servicio Web XML, una instancia de la <xref:System.Web.Services.Protocols.WebClientAsyncResult> se devuelve.</span><span class="sxs-lookup"><span data-stu-id="d98a1-102">When you call the `BeginMyMethodName` method, where `MyMethodName` is the synchronous version of the method, on an XML Web service proxy class, an instance of the <xref:System.Web.Services.Protocols.WebClientAsyncResult> is returned.</span></span> <span data-ttu-id="d98a1-103">Según el modelo de diseño asincrónico estándar, esa instancia de <xref:System.Web.Services.Protocols.WebClientAsyncResult> más adelante se debe pasar a `EndMyMethodName` para completar la llamada de método asincrónico.</span><span class="sxs-lookup"><span data-stu-id="d98a1-103">Following the standard asynchronous design pattern, that instance of <xref:System.Web.Services.Protocols.WebClientAsyncResult> must later be passed to `EndMyMethodName` to complete the asynchronous method call.</span></span>  
  
 <span data-ttu-id="d98a1-104">Para obtener más información sobre cómo llamar a servicios Web XML de forma asincrónica, vea [ &#91; \<topic://cpconInvokingWebServicesAsynchronously >&#93;](http://msdn.microsoft.com/library/f9e26a43-063a-440a-8c73-a02f2ccf3ea0).</span><span class="sxs-lookup"><span data-stu-id="d98a1-104">For details on calling XML Web services asynchronously, see [&#91;\<topic://cpconInvokingWebServicesAsynchronously>&#93;](http://msdn.microsoft.com/library/f9e26a43-063a-440a-8c73-a02f2ccf3ea0).</span></span>  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.IAsyncResult" />
  </Docs>
  <Members>
    <Member MemberName="Abort">
      <MemberSignature Language="C#" Value="public void Abort ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Abort() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Services.Protocols.WebClientAsyncResult.Abort" />
      <MemberSignature Language="VB.NET" Value="Public Sub Abort ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Abort();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Services</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="d98a1-105">Cancela una solicitud asincrónica del servicio Web XML.</span><span class="sxs-lookup"><span data-stu-id="d98a1-105">Cancels an asynchronous XML Web service request.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="d98a1-106">La solicitud de servicio Web XML se cancela si el transporte subyacente admite el <xref:System.Net.WebRequest.Abort%2A?displayProperty=nameWithType> método.</span><span class="sxs-lookup"><span data-stu-id="d98a1-106">The XML Web service request is canceled if the underlying transport supports the <xref:System.Net.WebRequest.Abort%2A?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="d98a1-107">Si el correspondiente `End` se llama al método después la <xref:System.Web.Services.Protocols.WebClientAsyncResult.Abort%2A> método, un <xref:System.Net.WebException> se produce, establecer el <xref:System.Net.WebException.Status%2A> propiedad a <xref:System.Net.WebExceptionStatus.RequestCanceled>.</span><span class="sxs-lookup"><span data-stu-id="d98a1-107">If the corresponding `End` method is subsequently called after the <xref:System.Web.Services.Protocols.WebClientAsyncResult.Abort%2A> method, a <xref:System.Net.WebException> is thrown, setting the <xref:System.Net.WebException.Status%2A> property to <xref:System.Net.WebExceptionStatus.RequestCanceled>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AsyncState">
      <MemberSignature Language="C#" Value="public object AsyncState { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object AsyncState" />
      <MemberSignature Language="DocId" Value="P:System.Web.Services.Protocols.WebClientAsyncResult.AsyncState" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property AsyncState As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ AsyncState { System::Object ^ get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.IAsyncResult.AsyncState</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web.Services</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="d98a1-108">Obtiene el objeto que se proporcionó en el último parámetro a la llamada asincrónica al método <see langword="Begin" />.</span><span class="sxs-lookup"><span data-stu-id="d98a1-108">Gets the object provided in the last parameter to the <see langword="Begin" /> method asynchronous call.</span></span></summary>
        <value><span data-ttu-id="d98a1-109"><see cref="T:System.Object" /> que se proporcionó en el último parámetro a la llamada al método <see langword="Begin" />.</span><span class="sxs-lookup"><span data-stu-id="d98a1-109">The <see cref="T:System.Object" /> provided in the last parameter to the <see langword="Begin" /> method call.</span></span></value>
        <remarks>To be added.</remarks>
        <altmember cref="P:System.IAsyncResult.AsyncState" />
      </Docs>
    </Member>
    <Member MemberName="AsyncWaitHandle">
      <MemberSignature Language="C#" Value="public System.Threading.WaitHandle AsyncWaitHandle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Threading.WaitHandle AsyncWaitHandle" />
      <MemberSignature Language="DocId" Value="P:System.Web.Services.Protocols.WebClientAsyncResult.AsyncWaitHandle" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property AsyncWaitHandle As WaitHandle" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Threading::WaitHandle ^ AsyncWaitHandle { System::Threading::WaitHandle ^ get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.IAsyncResult.AsyncWaitHandle</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web.Services</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.WaitHandle</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="d98a1-110">Obtiene <see cref="T:System.Threading.WaitHandle" /> que se utiliza para esperar a que finalice una operación asincrónica.</span><span class="sxs-lookup"><span data-stu-id="d98a1-110">Gets a <see cref="T:System.Threading.WaitHandle" /> that is used to wait for an asynchronous operation to complete.</span></span></summary>
        <value><span data-ttu-id="d98a1-111"><see cref="T:System.Threading.WaitHandle" /> que se utiliza para esperar a que finalice una operación asincrónica.</span><span class="sxs-lookup"><span data-stu-id="d98a1-111">A <see cref="T:System.Threading.WaitHandle" /> that is used to wait for an asynchronous operation to complete.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d98a1-112">El <xref:System.Threading.WaitHandle> puede usarse para realizar un <xref:System.Threading.WaitHandle.WaitOne%2A>, <xref:System.Threading.WaitHandle.WaitAny%2A>, o <xref:System.Threading.WaitHandle.WaitAll%2A> debe esperar para que se complete la llamada asincrónica.</span><span class="sxs-lookup"><span data-stu-id="d98a1-112">The <xref:System.Threading.WaitHandle> can be used to perform a <xref:System.Threading.WaitHandle.WaitOne%2A>, <xref:System.Threading.WaitHandle.WaitAny%2A>, or <xref:System.Threading.WaitHandle.WaitAll%2A> to wait for the asynchronous call to complete.</span></span>  
  
 <span data-ttu-id="d98a1-113">Para obtener más información, vea <xref:System.IAsyncResult.AsyncWaitHandle%2A>.</span><span class="sxs-lookup"><span data-stu-id="d98a1-113">For more details, see <xref:System.IAsyncResult.AsyncWaitHandle%2A>.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.IAsyncResult.AsyncWaitHandle" />
      </Docs>
    </Member>
    <Member MemberName="CompletedSynchronously">
      <MemberSignature Language="C#" Value="public bool CompletedSynchronously { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CompletedSynchronously" />
      <MemberSignature Language="DocId" Value="P:System.Web.Services.Protocols.WebClientAsyncResult.CompletedSynchronously" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CompletedSynchronously As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool CompletedSynchronously { bool get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.IAsyncResult.CompletedSynchronously</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web.Services</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="d98a1-114">Obtiene un valor que indica si la llamada a Begin se completó de forma sincrónica.</span><span class="sxs-lookup"><span data-stu-id="d98a1-114">Gets a value indicating whether the Begin call completed synchronously.</span></span></summary>
        <value>
          <span data-ttu-id="d98a1-115">Es <see langword="true" /> si la llamada a Begin se completó de forma sincrónica; en caso contrario, es <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="d98a1-115"><see langword="true" /> if the Begin call completed synchronously; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d98a1-116">Si <xref:System.Web.Services.Protocols.WebClientAsyncResult.CompletedSynchronously%2A> está establecido en `true` dentro de la <xref:System.AsyncCallback> delegado, es probable que el subproceso que llamó <xref:System.Web.Services.Protocols.SoapHttpClientProtocol.BeginInvoke%2A> es el subproceso actual.</span><span class="sxs-lookup"><span data-stu-id="d98a1-116">If <xref:System.Web.Services.Protocols.WebClientAsyncResult.CompletedSynchronously%2A> is set to `true` within the <xref:System.AsyncCallback> delegate, it is probable that the thread that called <xref:System.Web.Services.Protocols.SoapHttpClientProtocol.BeginInvoke%2A> is the current thread.</span></span> <span data-ttu-id="d98a1-117">En este caso, debe tener cuidado acerca de cómo realizar otra Begin asincrónico llame desde el método de devolución de llamada, ya que puede causar la pila para que crezca sin enlazar si la llamada continúa completándose de forma sincrónica.</span><span class="sxs-lookup"><span data-stu-id="d98a1-117">In this case, you should be careful about making another asynchronous Begin call from the callback method, since it can cause the stack to grow without bound if the calls continue to complete synchronously.</span></span> <span data-ttu-id="d98a1-118">En su lugar, la llamada debe realizarse en el sitio de llamada original, fuera del método de devolución de llamada.</span><span class="sxs-lookup"><span data-stu-id="d98a1-118">Instead, the call should be completed at the original call site, outside the callback method.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsCompleted">
      <MemberSignature Language="C#" Value="public bool IsCompleted { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsCompleted" />
      <MemberSignature Language="DocId" Value="P:System.Web.Services.Protocols.WebClientAsyncResult.IsCompleted" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsCompleted As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsCompleted { bool get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.IAsyncResult.IsCompleted</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web.Services</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="d98a1-119">Obtiene un valor que indica si la solicitud asincrónica del servicio Web XML se ha completado.</span><span class="sxs-lookup"><span data-stu-id="d98a1-119">Gets a value indicating whether the asynchronous XML Web service request has completed.</span></span></summary>
        <value>
          <span data-ttu-id="d98a1-120">Es <see langword="true" /> si la solicitud asincrónica del servicio Web XML se ha completado; en caso contrario, es <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="d98a1-120"><see langword="true" /> if the asynchronous XML Web service request has completed; otherwise, <see langword="false" />.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>