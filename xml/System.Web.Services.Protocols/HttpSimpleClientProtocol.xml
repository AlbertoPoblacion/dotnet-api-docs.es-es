<Type Name="HttpSimpleClientProtocol" FullName="System.Web.Services.Protocols.HttpSimpleClientProtocol">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="24110eb1ffa47f6267659a07e83cab2de1a0dfeb" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="es-ES" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30550249" />
  </Metadata>
  <TypeSignature Language="C#" Value="public abstract class HttpSimpleClientProtocol : System.Web.Services.Protocols.HttpWebClientProtocol" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit HttpSimpleClientProtocol extends System.Web.Services.Protocols.HttpWebClientProtocol" />
  <TypeSignature Language="DocId" Value="T:System.Web.Services.Protocols.HttpSimpleClientProtocol" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class HttpSimpleClientProtocol&#xA;Inherits HttpWebClientProtocol" />
  <TypeSignature Language="C++ CLI" Value="public ref class HttpSimpleClientProtocol abstract : System::Web::Services::Protocols::HttpWebClientProtocol" />
  <AssemblyInfo>
    <AssemblyName>System.Web.Services</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Web.Services.Protocols.HttpWebClientProtocol</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Representa la clase base para la establecer comunicación con un servicio Web XML mediante los sencillos enlaces de protocolo HTTP-GET y HTTP-POST.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Esta clase especifica la mayor parte de la implementación para comunicarse con un servicio Web XML a través de HTTP utilizando codificadores que codifican los parámetros y valores devueltos en formatos MIME comunes. Estos codificadores se derivan de la <xref:System.Web.Services.Protocols.MimeFormatter> clase. De forma predeterminada, una clase de proxy que se derive de <xref:System.Web.Services.Protocols.HttpSimpleClientProtocol> codifica los parámetros utilizando el tipo MIME application/x--www-form-urlencoded y la respuesta en XML sin formato. Formateadores de mime personalizado pueden especificarse mediante la <xref:System.Web.Services.Protocols.HttpMethodAttribute> de atributo, sin embargo, no hay ninguna compatibilidad para su integración en una generación de proxy y la descripción de servicio.  
  
 `Notes to Inheritors:` Al invalidar esta clase, se pueden introducir métodos en la clase derivada que son específicas de un tipo concreto de un servicio Web XML. Los métodos simplemente capturan los parámetros y llamar a la clase base para realizar el trabajo de la comunicación con el sitio. Si los métodos introducidos son asincrónicos, llame a la <xref:System.Web.Services.Protocols.HttpSimpleClientProtocol.BeginInvoke%2A> y <xref:System.Web.Services.Protocols.HttpSimpleClientProtocol.EndInvoke%2A> métodos. Si los métodos introducidos son sincrónicos, llame a la <xref:System.Web.Services.Protocols.HttpSimpleClientProtocol.Invoke%2A> método. El constructor reemplazado normalmente establece el <xref:System.Web.Services.Protocols.WebClientProtocol.Url%2A> propiedad al URI del método de servicio Web XML.  
  
 La herramienta de lenguaje de descripción de servicios Web (Wsdl.exe) genera clases derivadas de <xref:System.Web.Services.Protocols.HttpSimpleClientProtocol> para obtener una descripción de servicio determinado.  
  
   
  
## Examples  
 El siguiente ejemplo de código es una clase de proxy generada por Wsdl.exe para el `Math` servicio Web XML siguiente. La clase de proxy se deriva de <xref:System.Web.Services.Protocols.HttpGetClientProtocol>, que deriva de la clase abstracta <xref:System.Web.Services.Protocols.HttpSimpleClientProtocol> clase.  
  
 [!code-cpp[Classic HttpGetClientProtocol Example#1](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic HttpGetClientProtocol Example/CPP/source.cpp#1)]
 [!code-csharp[Classic HttpGetClientProtocol Example#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic HttpGetClientProtocol Example/CS/source.cs#1)]
 [!code-vb[Classic HttpGetClientProtocol Example#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic HttpGetClientProtocol Example/VB/source.vb#1)]  
  
 El ejemplo de código siguiente es el `Math` servicio Web XML, desde el que se creó la clase de proxy anterior.  
  
 [!code-cpp[Classic HttpSimpleClientProtocol Example#1](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic HttpSimpleClientProtocol Example/CPP/source.cpp#1)]
 [!code-csharp[Classic HttpSimpleClientProtocol Example#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic HttpSimpleClientProtocol Example/CS/source.cs#1)]
 [!code-vb[Classic HttpSimpleClientProtocol Example#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic HttpSimpleClientProtocol Example/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <threadsafe>Este tipo es seguro para la ejecución de subprocesos.</threadsafe>
    <altmember cref="T:System.Web.Services.Protocols.SoapHttpClientProtocol" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected HttpSimpleClientProtocol ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Services.Protocols.HttpSimpleClientProtocol.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; HttpSimpleClientProtocol();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Services</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Web.Services.Protocols.HttpSimpleClientProtocol" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="BeginInvoke">
      <MemberSignature Language="C#" Value="protected IAsyncResult BeginInvoke (string methodName, string requestUrl, object[] parameters, AsyncCallback callback, object asyncState);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance class System.IAsyncResult BeginInvoke(string methodName, string requestUrl, object[] parameters, class System.AsyncCallback callback, object asyncState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Services.Protocols.HttpSimpleClientProtocol.BeginInvoke(System.String,System.String,System.Object[],System.AsyncCallback,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Protected Function BeginInvoke (methodName As String, requestUrl As String, parameters As Object(), callback As AsyncCallback, asyncState As Object) As IAsyncResult" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; IAsyncResult ^ BeginInvoke(System::String ^ methodName, System::String ^ requestUrl, cli::array &lt;System::Object ^&gt; ^ parameters, AsyncCallback ^ callback, System::Object ^ asyncState);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Services</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="methodName" Type="System.String" />
        <Parameter Name="requestUrl" Type="System.String" />
        <Parameter Name="parameters" Type="System.Object[]" />
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="asyncState" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="methodName">Nombre del método de servicios Web XML.</param>
        <param name="requestUrl">Dirección URL que se utilizará al crear <see cref="T:System.Net.WebRequest" />.</param>
        <param name="parameters">Matriz de objetos que contiene los parámetros que se pasan al método de servicios Web XML. El orden de los valores de la matriz se corresponde con el orden de los parámetros del método de llamada de la clase derivada.</param>
        <param name="callback">Delegado al que se va a llamar cuando finalice la llamada de método asincrónico. Si <c>callback</c> es <see langword="null" />, no se llama al delegado.</param>
        <param name="asyncState">Información adicional proporcionada por el cliente.</param>
        <summary>Inicia una invocación asincrónica de un método de un servicio Web XML.</summary>
        <returns>
          <see cref="T:System.IAsyncResult" /> que puede pasarse al método <see cref="M:System.Web.Services.Protocols.HttpSimpleClientProtocol.EndInvoke(System.IAsyncResult)" /> con el fin de obtener los valores devueltos del método de servicios Web XML.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El `methodName` parámetro se usa para buscar los tipos de los parámetros y devolver valores del método que invoca el <xref:System.Web.Services.Protocols.HttpSimpleClientProtocol.BeginInvoke%2A> método. También sirve para encontrar los atributos personalizados que se han agregado al método. <xref:System.Web.Services.Protocols.SoapDocumentMethodAttribute>, <xref:System.Web.Services.Protocols.SoapRpcMethodAttribute>, y <xref:System.Xml.Serialization.XmlElementAttribute> proporcionan información adicional sobre el método derivado necesario para el protocolo HTTP.  
  
 `asyncState` se pasa a `callback` y se incluye en el <xref:System.IAsyncResult> que se devuelve desde el <xref:System.Web.Services.Protocols.HttpSimpleClientProtocol.BeginInvoke%2A> método. Es útil para pasar información desde el contexto de la llamada asincrónica para el control del resultado asincrónico en `callback`.  
  
   
  
## Examples  
 El siguiente ejemplo de código es un formulario Web Forms de ASP.NET, que llama a un servicio Web XML denominado `Math`. En el `EnterBtn_Click` función, el formulario Web Forms inicia y finaliza una llamada asincrónica de la `Add` método de servicio Web XML.  
  
 [!code-aspx-csharp[Classic HttpSimpleClientProtocol.EndInvoke Example#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic HttpSimpleClientProtocol.EndInvoke Example/CS/sourcecs.aspx#1)]
 [!code-aspx-vb[Classic HttpSimpleClientProtocol.EndInvoke Example#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic HttpSimpleClientProtocol.EndInvoke Example/VB/sourcevb.aspx#1)]  
  
 El siguiente ejemplo de código es una clase de proxy generada por la herramienta Lenguaje de descripción de servicios Web (Wsdl.exe) para el `Math` servicio Web XML siguiente. En el `BeginAdd` método de la clase de proxy, el <xref:System.Web.Services.Protocols.SoapHttpClientProtocol.BeginInvoke%2A> método inicia una llamada asincrónica de la `Add` método de servicio Web XML.  
  
 [!code-cpp[Classic HttpSimpleClientProtocol.EndInvoke Example#2](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic HttpSimpleClientProtocol.EndInvoke Example/CPP/source.cpp#2)]
 [!code-csharp[Classic HttpSimpleClientProtocol.EndInvoke Example#2](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic HttpSimpleClientProtocol.EndInvoke Example/CS/source.cs#2)]
 [!code-vb[Classic HttpSimpleClientProtocol.EndInvoke Example#2](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic HttpSimpleClientProtocol.EndInvoke Example/VB/source.vb#2)]  
  
 El ejemplo de código siguiente es el `Math` servicio Web XML, desde el que se creó la clase de proxy anterior.  
  
  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Exception">La solicitud llegó al servidor, pero no se procesó correctamente.</exception>
        <altmember cref="T:System.IAsyncResult" />
      </Docs>
    </Member>
    <Member MemberName="EndInvoke">
      <MemberSignature Language="C#" Value="protected object EndInvoke (IAsyncResult asyncResult);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance object EndInvoke(class System.IAsyncResult asyncResult) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Services.Protocols.HttpSimpleClientProtocol.EndInvoke(System.IAsyncResult)" />
      <MemberSignature Language="VB.NET" Value="Protected Function EndInvoke (asyncResult As IAsyncResult) As Object" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; System::Object ^ EndInvoke(IAsyncResult ^ asyncResult);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Services</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="asyncResult" Type="System.IAsyncResult" />
      </Parameters>
      <Docs>
        <param name="asyncResult">Objeto <see cref="T:System.IAsyncResult" /> devuelto a partir del método <see cref="M:System.Web.Services.Protocols.HttpSimpleClientProtocol.BeginInvoke(System.String,System.String,System.Object[],System.AsyncCallback,System.Object)" />.</param>
        <summary>Finaliza la invocación asincrónica de un método de servicios Web XML utilizando HTTP.</summary>
        <returns>Matriz de objetos que contiene el valor devuelto, así como cualquier parámetro <paramref name="out" /> o por referencia para el método de servicios Web XML.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 El siguiente ejemplo de código es un formulario Web Forms de ASP.NET, que llama a un servicio Web XML denominado `Math`. En el `EnterBtn_Click` función, el formulario Web Forms inicia y finaliza una llamada asincrónica de la `Add` método de servicio Web XML.  
  
 [!code-aspx-csharp[Classic HttpSimpleClientProtocol.EndInvoke Example#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic HttpSimpleClientProtocol.EndInvoke Example/CS/sourcecs.aspx#1)]
 [!code-aspx-vb[Classic HttpSimpleClientProtocol.EndInvoke Example#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic HttpSimpleClientProtocol.EndInvoke Example/VB/sourcevb.aspx#1)]  
  
 El siguiente ejemplo de código es una clase de proxy generada por la herramienta Lenguaje de descripción de servicios Web (Wsdl.exe) para el `Math` servicio Web XML siguiente. En el `EndAdd` método de la clase de proxy, el <xref:System.Web.Services.Protocols.SoapHttpClientProtocol.EndInvoke%2A> método inicia una llamada asincrónica de la `Add` método de servicio Web XML.  
  
 [!code-cpp[Classic HttpSimpleClientProtocol.EndInvoke Example#2](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic HttpSimpleClientProtocol.EndInvoke Example/CPP/source.cpp#2)]
 [!code-csharp[Classic HttpSimpleClientProtocol.EndInvoke Example#2](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic HttpSimpleClientProtocol.EndInvoke Example/CS/source.cs#2)]
 [!code-vb[Classic HttpSimpleClientProtocol.EndInvoke Example#2](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic HttpSimpleClientProtocol.EndInvoke Example/VB/source.vb#2)]  
  
 El ejemplo de código siguiente es el `Math` servicio Web XML, desde el que se creó la clase proxy anterior.  
  
  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="asyncResult" /> no es un valor devuelto a partir del método <see cref="M:System.Web.Services.Protocols.HttpSimpleClientProtocol.BeginInvoke(System.String,System.String,System.Object[],System.AsyncCallback,System.Object)" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="protected object Invoke (string methodName, string requestUrl, object[] parameters);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance object Invoke(string methodName, string requestUrl, object[] parameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Services.Protocols.HttpSimpleClientProtocol.Invoke(System.String,System.String,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Protected Function Invoke (methodName As String, requestUrl As String, parameters As Object()) As Object" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; System::Object ^ Invoke(System::String ^ methodName, System::String ^ requestUrl, cli::array &lt;System::Object ^&gt; ^ parameters);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Services</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="methodName" Type="System.String" />
        <Parameter Name="requestUrl" Type="System.String" />
        <Parameter Name="parameters" Type="System.Object[]" />
      </Parameters>
      <Docs>
        <param name="methodName">Nombre del método de servicios Web XML de la clase derivada que llama al método <see cref="M:System.Web.Services.Protocols.HttpSimpleClientProtocol.Invoke(System.String,System.String,System.Object[])" />.</param>
        <param name="requestUrl">Dirección URL del método de servicios Web XML que solicita el cliente.</param>
        <param name="parameters">Matriz de objetos que contiene los parámetros que se pasan al servicio Web XML remoto. El orden de los valores de la matriz se corresponde con el orden de los parámetros del método de llamada de la clase derivada.</param>
        <summary>Llama al método de servicio Web XML utilizando HTTP.</summary>
        <returns>Matriz de objetos que contiene el valor devuelto, así como cualquiera de los parámetros <paramref name="out" /> o por referencia del método de la clase derivada.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El `methodName` parámetro se usa para buscar los tipos de los parámetros y devolver valores del método que invoca el <xref:System.Web.Services.Protocols.HttpSimpleClientProtocol.Invoke%2A> método. También sirve para encontrar los atributos personalizados que se han agregado al método. <xref:System.Web.Services.Protocols.HttpMethodAttribute> y <xref:System.Xml.Serialization.XmlElementAttribute> proporcionan información adicional sobre el método derivado necesario para el protocolo SOAP.  
  
   
  
## Examples  
 El siguiente ejemplo de código es un formulario Web Forms de ASP.NET, que llama a un servicio Web XML denominado `Math`. En el `EnterBtn_Click` función, el formulario Web Forms invoca de forma sincrónica el `Add` método de servicio Web XML.  
  
 [!code-csharp[HttpSimpleClientProtocol.Invoke Example#2](~/samples/snippets/csharp/VS_Snippets_Remoting/HttpSimpleClientProtocol.Invoke Example/CS/sourcecs.aspx#2)]
 [!code-vb[HttpSimpleClientProtocol.Invoke Example#2](~/samples/snippets/visualbasic/VS_Snippets_Remoting/HttpSimpleClientProtocol.Invoke Example/VB/sourcevb.aspx#2)]  
  
 El siguiente ejemplo de código es una clase de proxy generada por la herramienta Lenguaje de descripción de servicios Web (Wsdl.exe) para el `Math` servicio Web XML siguiente. En el `Add` método de la clase de proxy, el <xref:System.Web.Services.Protocols.HttpSimpleClientProtocol.Invoke%2A> método invoca de forma sincrónica el `Add` método de servicio Web.  
  
 [!code-cpp[HttpSimpleClientProtocol.Invoke Example#1](~/samples/snippets/cpp/VS_Snippets_Remoting/HttpSimpleClientProtocol.Invoke Example/CPP/source.cpp#1)]
 [!code-csharp[HttpSimpleClientProtocol.Invoke Example#1](~/samples/snippets/csharp/VS_Snippets_Remoting/HttpSimpleClientProtocol.Invoke Example/CS/source.cs#1)]
 [!code-vb[HttpSimpleClientProtocol.Invoke Example#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/HttpSimpleClientProtocol.Invoke Example/VB/source.vb#1)]  
  
 El ejemplo de código siguiente es el `Math` servicio Web XML, desde el que se creó la clase proxy anterior.  
  
  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Exception">La solicitud llegó al servidor, pero no se procesó correctamente.</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="InvokeAsync">
      <AssemblyInfo>
        <AssemblyName>System.Web.Services</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Invoca al método especificado de forma asincrónica.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="InvokeAsync">
      <MemberSignature Language="C#" Value="protected void InvokeAsync (string methodName, string requestUrl, object[] parameters, System.Threading.SendOrPostCallback callback);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void InvokeAsync(string methodName, string requestUrl, object[] parameters, class System.Threading.SendOrPostCallback callback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Services.Protocols.HttpSimpleClientProtocol.InvokeAsync(System.String,System.String,System.Object[],System.Threading.SendOrPostCallback)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub InvokeAsync (methodName As String, requestUrl As String, parameters As Object(), callback As SendOrPostCallback)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void InvokeAsync(System::String ^ methodName, System::String ^ requestUrl, cli::array &lt;System::Object ^&gt; ^ parameters, System::Threading::SendOrPostCallback ^ callback);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Services</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="methodName" Type="System.String" />
        <Parameter Name="requestUrl" Type="System.String" />
        <Parameter Name="parameters" Type="System.Object[]" />
        <Parameter Name="callback" Type="System.Threading.SendOrPostCallback" />
      </Parameters>
      <Docs>
        <param name="methodName">Nombre del método que se va a invocar.</param>
        <param name="requestUrl">Dirección URL solicitada del servicio Web invocado.</param>
        <param name="parameters">Parámetros que se van a pasar al método.</param>
        <param name="callback">Delegado al que se llama cuando termina la invocación del método.</param>
        <summary>Invoca al método especificado de forma asincrónica.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InvokeAsync">
      <MemberSignature Language="C#" Value="protected void InvokeAsync (string methodName, string requestUrl, object[] parameters, System.Threading.SendOrPostCallback callback, object userState);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void InvokeAsync(string methodName, string requestUrl, object[] parameters, class System.Threading.SendOrPostCallback callback, object userState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Services.Protocols.HttpSimpleClientProtocol.InvokeAsync(System.String,System.String,System.Object[],System.Threading.SendOrPostCallback,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub InvokeAsync (methodName As String, requestUrl As String, parameters As Object(), callback As SendOrPostCallback, userState As Object)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void InvokeAsync(System::String ^ methodName, System::String ^ requestUrl, cli::array &lt;System::Object ^&gt; ^ parameters, System::Threading::SendOrPostCallback ^ callback, System::Object ^ userState);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Services</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="methodName" Type="System.String" />
        <Parameter Name="requestUrl" Type="System.String" />
        <Parameter Name="parameters" Type="System.Object[]" />
        <Parameter Name="callback" Type="System.Threading.SendOrPostCallback" />
        <Parameter Name="userState" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="methodName">Nombre del método que se va a invocar.</param>
        <param name="requestUrl">Dirección URL solicitada del servicio Web invocado.</param>
        <param name="parameters">Parámetros que se van a pasar al método.</param>
        <param name="callback">Delegado al que se llama cuando termina la invocación del método.</param>
        <param name="userState">Objeto que contiene información de estado asociada que se pasa al delegado <c>callback</c> cuando el método ha finalizado.</param>
        <summary>Invoca de forma asincrónica al método especificado mientras mantiene un estado asociado.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>