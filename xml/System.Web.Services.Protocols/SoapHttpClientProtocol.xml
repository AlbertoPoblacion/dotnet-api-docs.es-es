<Type Name="SoapHttpClientProtocol" FullName="System.Web.Services.Protocols.SoapHttpClientProtocol">
  <Metadata><Meta Name="ms.openlocfilehash" Value="51d3eeb75ea696fba9ee995bb4743ddfde94cd6f" /><Meta Name="ms.sourcegitcommit" Value="adc8598fd19d91438cacaa8fa7ce613e28c8218e" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="es-ES" /><Meta Name="ms.lasthandoff" Value="12/11/2018" /><Meta Name="ms.locfileid" Value="53223558" /></Metadata><TypeSignature Language="C#" Value="public class SoapHttpClientProtocol : System.Web.Services.Protocols.HttpWebClientProtocol" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit SoapHttpClientProtocol extends System.Web.Services.Protocols.HttpWebClientProtocol" />
  <TypeSignature Language="DocId" Value="T:System.Web.Services.Protocols.SoapHttpClientProtocol" />
  <TypeSignature Language="VB.NET" Value="Public Class SoapHttpClientProtocol&#xA;Inherits HttpWebClientProtocol" />
  <TypeSignature Language="C++ CLI" Value="public ref class SoapHttpClientProtocol : System::Web::Services::Protocols::HttpWebClientProtocol" />
  <TypeSignature Language="F#" Value="type SoapHttpClientProtocol = class&#xA;    inherit HttpWebClientProtocol" />
  <AssemblyInfo>
    <AssemblyName>System.Web.Services</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Web.Services.Protocols.HttpWebClientProtocol</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Especifica la clase cliente de la que se derivan los proxies cuando se utiliza el protocolo SOAP.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si está creando un cliente de servicios Web XML, a continuación, una clase de proxy que deriva directa o indirectamente <xref:System.Web.Services.Protocols.WebClientProtocol> debe crearse para el servicio Web XML. Cuando el cliente del servicio Web XML llama utilizando SOAP, debe derivar la clase de proxy de <xref:System.Web.Services.Protocols.SoapHttpClientProtocol>, que se deriva de <xref:System.Web.Services.Protocols.HttpWebClientProtocol>. <xref:System.Web.Services.Protocols.HttpWebClientProtocol>, a su vez, deriva <xref:System.Web.Services.Protocols.WebClientProtocol>.  
  
 Para comunicarse con un servicio Web XML, cree una clase de proxy que deriva directa o indirectamente <xref:System.Web.Services.Protocols.WebClientProtocol> para el servicio Web XML que desea llamar. En lugar de crear manualmente la clase de proxy, utilice la herramienta Web Services Description Language (Wsdl.exe) para crear una clase de proxy para la descripción del servicio de un servicio Web XML determinado. Cuando se genera una clase de proxy para el protocolo SOAP, se realizan las llamadas sincrónicas a métodos de servicio Web XML a través de la <xref:System.Web.Services.Protocols.HttpSimpleClientProtocol.Invoke%2A> método, mientras que las llamadas asincrónicas se realizan utilizando el <xref:System.Web.Services.Protocols.HttpSimpleClientProtocol.BeginInvoke%2A> método y el <xref:System.Web.Services.Protocols.HttpSimpleClientProtocol.EndInvoke%2A> método.  
  
   
  
## Examples  
 El siguiente ejemplo de código es una clase de proxy generada por Wsdl.exe para la `Math` servicio Web XML. La clase de proxy se deriva de <xref:System.Web.Services.Protocols.SoapHttpClientProtocol>, que se deriva de la clase abstracta <xref:System.Web.Services.Protocols.WebClientProtocol> clase.  
  
 [!code-cpp[Classic SoapHttpClientProtocol Example#1](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic SoapHttpClientProtocol Example/CPP/source.cpp#1)]
 [!code-csharp[Classic SoapHttpClientProtocol Example#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic SoapHttpClientProtocol Example/CS/source.cs#1)]
 [!code-vb[Classic SoapHttpClientProtocol Example#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic SoapHttpClientProtocol Example/VB/source.vb#1)]  
  
 El ejemplo de código siguiente es el `Math` servicio Web XML, desde el que se generó la clase de proxy anterior.  
  
> [!IMPORTANT]
>  Este ejemplo tiene un cuadro de texto que acepta datos proporcionados por el usuario, lo que puede suponer una amenaza para la seguridad. De forma predeterminada, ASP.NET Web Pages valida que los datos proporcionados por el usuario no incluyen elementos HTML ni de script. Para más información, consulte [Información general sobre los ataques mediante scripts](https://msdn.microsoft.com/library/772c7312-211a-4eb3-8d6e-eec0aa1dcc07).  
  
  
  
 ]]></format>
    </remarks>
    <threadsafe>Este tipo es seguro para la ejecución de subprocesos.</threadsafe>
    <block subset="none" type="overrides"><para>Al invalidar esta clase, se pueden introducir métodos en la clase derivada que son específicos de un tipo determinado de servicio Web XML. Los métodos de capturan de los parámetros y llamar a la clase base para hacer el trabajo de la comunicación con el servicio Web XML. Si los métodos introducidos son asincrónicos, llame a la <see cref="M:System.Web.Services.Protocols.SoapHttpClientProtocol.BeginInvoke(System.String,System.Object[],System.AsyncCallback,System.Object)" /> método y el <see cref="M:System.Web.Services.Protocols.SoapHttpClientProtocol.EndInvoke(System.IAsyncResult)" /> método. Si los métodos introducidos son sincrónicos, llame a la <see cref="M:System.Web.Services.Protocols.SoapHttpClientProtocol.Invoke(System.String,System.Object[])" /> método. El constructor reemplazado normalmente establece el <see cref="P:System.Web.Services.Protocols.WebClientProtocol.Url" /> propiedad a la dirección URL del método de servicio Web XML.</para></block>
    <altmember cref="T:System.Web.Services.Protocols.HttpSimpleClientProtocol" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SoapHttpClientProtocol ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Services.Protocols.SoapHttpClientProtocol.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; SoapHttpClientProtocol();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Services</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Web.Services.Protocols.SoapHttpClientProtocol" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="BeginInvoke">
      <MemberSignature Language="C#" Value="protected IAsyncResult BeginInvoke (string methodName, object[] parameters, AsyncCallback callback, object asyncState);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance class System.IAsyncResult BeginInvoke(string methodName, object[] parameters, class System.AsyncCallback callback, object asyncState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Services.Protocols.SoapHttpClientProtocol.BeginInvoke(System.String,System.Object[],System.AsyncCallback,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Protected Function BeginInvoke (methodName As String, parameters As Object(), callback As AsyncCallback, asyncState As Object) As IAsyncResult" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; IAsyncResult ^ BeginInvoke(System::String ^ methodName, cli::array &lt;System::Object ^&gt; ^ parameters, AsyncCallback ^ callback, System::Object ^ asyncState);" />
      <MemberSignature Language="F#" Value="member this.BeginInvoke : string * obj[] * AsyncCallback * obj -&gt; IAsyncResult" Usage="soapHttpClientProtocol.BeginInvoke (methodName, parameters, callback, asyncState)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Services</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="methodName" Type="System.String" />
        <Parameter Name="parameters" Type="System.Object[]" />
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="asyncState" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="methodName">Nombre del método de servicios Web XML de la clase derivada que llama al método <see cref="M:System.Web.Services.Protocols.SoapHttpClientProtocol.BeginInvoke(System.String,System.Object[],System.AsyncCallback,System.Object)" />.</param>
        <param name="parameters">Matriz de objetos que contiene los parámetros que se pasan al servicio Web XML. El orden de los valores de la matriz se corresponde con el orden de los parámetros del método de llamada de la clase derivada.</param>
        <param name="callback">Delegado al que se va a llamar cuando finalice la invocación asincrónica. Si <paramref name="callback" /> es <see langword="null" />, no se llama al delegado.</param>
        <param name="asyncState">Información adicional proporcionada por el llamador.</param>
        <summary>Inicia una invocación asincrónica de un método de servicios web XML utilizando SOAP.</summary>
        <returns>Interfaz <see cref="T:System.IAsyncResult" /> que se pasa al método <see cref="M:System.Web.Services.Protocols.SoapHttpClientProtocol.EndInvoke(System.IAsyncResult)" /> para obtener los valores devueltos en la llamada al método remoto.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Normalmente, no se llama el <xref:System.Web.Services.Protocols.SoapHttpClientProtocol.BeginInvoke%2A> método directamente, a menos que se haya creado su propia clase de proxy para un servicio Web XML.  
  
 Una clase proxy generada por la herramienta Web Services Description Language (Wsdl.exe) de una descripción del servicio expone los métodos de servicio Web XML como nombres de la clase de proxy para llamar a los métodos de servicio Web XML de forma sincrónica. Para llamar a los métodos de servicio Web XML de forma asincrónica, se agregan dos métodos adicionales a la clase de proxy para cada método de servicio Web XML, uno con el `Begin` prefijo agregado al nombre del método de servicio Web XML y otro con el `End` prefijo agregado.  
  
 La clase proxy llama el <xref:System.Web.Services.Protocols.SoapHttpClientProtocol.BeginInvoke%2A> método para iniciar una llamada de invocación asincrónica al método de servicio Web XML. Por ejemplo, si un servicio Web XML expone un método de servicios Web XML denominado `Add`, la clase de proxy contiene un método denominado `BeginAdd`, método de servicio para iniciar una llamada a la Web de XML. Dentro del código para el `BeginAdd`, se realiza una llamada a la <xref:System.Web.Services.Protocols.SoapHttpClientProtocol.BeginInvoke%2A> método y los resultados se colocan en el tipo de valor devuelto esperado para `Add`.  
  
 El `methodName` se usa para buscar los atributos personalizados que pueden haber agregado al método, como <xref:System.Web.Services.Protocols.SoapDocumentMethodAttribute>. <xref:System.Web.Services.Protocols.SoapDocumentMethodAttribute> Proporciona información adicional sobre el método derivado que se requiere para el protocolo SOAP.  
  
 `asyncState` se pasa a `callback` y se incluye en el <xref:System.IAsyncResult> que se devuelve desde el <xref:System.Web.Services.Protocols.SoapHttpClientProtocol.BeginInvoke%2A> método. El `asyncState` parámetro puede usarse para pasar información sobre el contexto de la llamada asincrónica, especificada en el `callback` parámetro, al delegado que controla el resultado.  
  
   
  
## Examples  
 El siguiente ejemplo de código es una clase de proxy generada por la herramienta Web Services Description Language (Wsdl.exe) para el `Math` servicio Web XML. Dentro de la `BeginAdd` método de la clase de proxy, el <xref:System.Web.Services.Protocols.SoapHttpClientProtocol.BeginInvoke%2A> método inicia una invocación asincrónica a la `Add` método de servicio Web XML.  
  
 [!code-cpp[Classic SoapHttpClientProtocol.BeginInvoke Example#1](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic SoapHttpClientProtocol.BeginInvoke Example/CPP/source.cpp#1)]
 [!code-csharp[Classic SoapHttpClientProtocol.BeginInvoke Example#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic SoapHttpClientProtocol.BeginInvoke Example/CS/source.cs#1)]
 [!code-vb[Classic SoapHttpClientProtocol.BeginInvoke Example#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic SoapHttpClientProtocol.BeginInvoke Example/VB/source.vb#1)]  
  
 El ejemplo de código siguiente es el `Math` servicio Web XML, desde el que se creó la clase de proxy anterior.  
  
  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Web.Services.Protocols.SoapException">La solicitud llegó al servidor, pero no se procesó correctamente.</exception>
        <exception cref="T:System.InvalidOperationException">La solicitud no fue válida para el estado actual del objeto.</exception>
        <exception cref="T:System.Net.WebException">Error al obtener acceso a la red.</exception>
        <altmember cref="T:System.IAsyncResult" />
        <altmember cref="T:System.AsyncCallback" />
        <altmember cref="M:System.Web.Services.Protocols.SoapHttpClientProtocol.EndInvoke(System.IAsyncResult)" />
        <altmember cref="T:System.Web.Services.Protocols.SoapDocumentMethodAttribute" />
        <altmember cref="T:System.Web.Services.Protocols.WebClientProtocol" />
      </Docs>
    </Member>
    <Member MemberName="Discover">
      <MemberSignature Language="C#" Value="public void Discover ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Discover() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Services.Protocols.SoapHttpClientProtocol.Discover" />
      <MemberSignature Language="VB.NET" Value="Public Sub Discover ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Discover();" />
      <MemberSignature Language="F#" Value="member this.Discover : unit -&gt; unit" Usage="soapHttpClientProtocol.Discover " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Services</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Enlaza dinámicamente con el servicio Web XML descrito en el documento de descubrimiento en <see cref="P:System.Web.Services.Protocols.WebClientProtocol.Url" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Un cliente de servicios Web XML puede enlazar dinámicamente a un servicio Web XML distinto del que se hace referencia en la clase de proxy mediante la <xref:System.Web.Services.Protocols.SoapHttpClientProtocol.Discover%2A> método. Normalmente, el <xref:System.Web.Services.Protocols.WebClientProtocol.Url%2A> propiedad hace referencia a la dirección base del servicio Web XML. Sin embargo, antes de invocar el <xref:System.Web.Services.Protocols.SoapHttpClientProtocol.Discover%2A> método, Establece el <xref:System.Web.Services.Protocols.WebClientProtocol.Url%2A> propiedad a una dirección URL de un documento de descubrimiento. El <xref:System.Web.Services.Protocols.SoapHttpClientProtocol.Discover%2A> método intenta encontrar una coincidencia en el documento de descubrimiento con el enlace definido en la clase de proxy y, a continuación, lo enlaza dinámicamente. Si se realiza correctamente, las llamadas de método subsiguientes se dirigen al servicio Web XML se describe en el documento de descubrimiento.  
  
 Si la clase de proxy se genera utilizando la herramienta Web Services Description Language (Wsdl.exe), la clase de proxy define el enlace implementado por los métodos de servicio Web XML que se invoca utilizando el <xref:System.Web.Services.WebServiceBindingAttribute>. Cuando un servicio Web XML implementa varios enlaces, Wsdl.exe crea una clase de proxy para cada enlace. Aplicado a cada clase de proxy es un <xref:System.Web.Services.WebServiceBindingAttribute> que define el nombre del enlace y su espacio de nombres. El documento de descubrimiento que se configuró el <xref:System.Web.Services.Protocols.WebClientProtocol.Url%2A> propiedad debe contener una referencia a un servicio Web XML que implementa el mismo nombre de enlace y espacio de nombres o se produce una excepción.  
  
   
  
## Examples  
 El siguiente ejemplo de código es una clase de proxy generada por la utilidad Wsdl.exe para la `Math` servicio Web XML. Un <xref:System.Web.Services.WebServiceBindingAttribute> se aplica a la `Math` clase de proxy estableciendo el nombre del enlace `MathSoap` y su espacio de nombres para `http://tempuri.org/`.  
  
 [!code-cpp[SoapHttpClientProtocol.Discover Example#1](~/samples/snippets/cpp/VS_Snippets_Remoting/SoapHttpClientProtocol.Discover Example/CPP/source.cpp#1)]
 [!code-csharp[SoapHttpClientProtocol.Discover Example#1](~/samples/snippets/csharp/VS_Snippets_Remoting/SoapHttpClientProtocol.Discover Example/CS/source.cs#1)]
 [!code-vb[SoapHttpClientProtocol.Discover Example#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/SoapHttpClientProtocol.Discover Example/VB/source.vb#1)]  
  
 El ejemplo de código siguiente es un cliente de servicio Web utilizando la clase de proxy anterior. Dentro de la `EnterBtn_Click` eventos del formulario Web, el cliente de servicio Web XML llama a la <xref:System.Web.Services.Protocols.SoapHttpClientProtocol.Discover%2A> método intenta enlazar dinámicamente a la dirección URL proporcionada por el usuario.  
  
> [!IMPORTANT]
>  Este ejemplo tiene un cuadro de texto que acepta datos proporcionados por el usuario, lo que puede suponer una amenaza para la seguridad. De forma predeterminada, ASP.NET Web Pages valida que los datos proporcionados por el usuario no incluyen elementos HTML ni de script. Para más información, consulte [Información general sobre los ataques mediante scripts](https://msdn.microsoft.com/library/772c7312-211a-4eb3-8d6e-eec0aa1dcc07).  
  
 [!code-csharp[SoapHttpClientProtocol.Discover Example#2](~/samples/snippets/csharp/VS_Snippets_Remoting/SoapHttpClientProtocol.Discover Example/CS/sourcecs.aspx#2)]
 [!code-vb[SoapHttpClientProtocol.Discover Example#2](~/samples/snippets/visualbasic/VS_Snippets_Remoting/SoapHttpClientProtocol.Discover Example/VB/sourcevb.aspx#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Exception">El enlace definido en la clase de proxy no se puede encontrar en el documento de descubrimiento en <see cref="P:System.Web.Services.Protocols.WebClientProtocol.Url" />.

O bien 
La clase de proxy no tiene un enlace definido.</exception>
        <altmember cref="T:System.Web.Services.WebServiceBindingAttribute" />
        <related type="Article" href="https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/fxx6cfx2(v=vs.100)">Descubrimiento de servicios Web XML</related>
      </Docs>
    </Member>
    <Member MemberName="EndInvoke">
      <MemberSignature Language="C#" Value="protected object[] EndInvoke (IAsyncResult asyncResult);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance object[] EndInvoke(class System.IAsyncResult asyncResult) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Services.Protocols.SoapHttpClientProtocol.EndInvoke(System.IAsyncResult)" />
      <MemberSignature Language="VB.NET" Value="Protected Function EndInvoke (asyncResult As IAsyncResult) As Object()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; cli::array &lt;System::Object ^&gt; ^ EndInvoke(IAsyncResult ^ asyncResult);" />
      <MemberSignature Language="F#" Value="member this.EndInvoke : IAsyncResult -&gt; obj[]" Usage="soapHttpClientProtocol.EndInvoke asyncResult" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Services</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="asyncResult" Type="System.IAsyncResult" />
      </Parameters>
      <Docs>
        <param name="asyncResult">Objeto <see cref="T:System.IAsyncResult" /> devuelto a partir del método <see cref="M:System.Web.Services.Protocols.SoapHttpClientProtocol.BeginInvoke(System.String,System.Object[],System.AsyncCallback,System.Object)" />.</param>
        <summary>Finaliza una invocación asincrónica de un método de servicios Web XML utilizando SOAP.</summary>
        <returns>Matriz de objetos que contiene el valor devuelto, así como cualquiera de los parámetros <see langword="out" /> o por referencia del método de la clase derivada.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Normalmente, no se llama el <xref:System.Web.Services.Protocols.SoapHttpClientProtocol.EndInvoke%2A> método directamente, a menos que se haya creado su propia clase de proxy para un servicio Web XML.  
  
 Una clase de proxy generada por la herramienta Web Services Description Language (Wsdl.exe) para un servicio Web XML expone los métodos de servicio Web XML como nombres de la clase de proxy para llamar a los métodos de servicio Web XML de forma sincrónica. Para llamar a los métodos de servicio Web XML de forma asincrónica, se agregan dos métodos adicionales a la clase de proxy para cada método de servicio Web XML, uno con el `Begin` prefijo agregado al nombre del método de servicio Web XML y otro con el `End` prefijo agregado.  
  
 La clase proxy llama el <xref:System.Web.Services.Protocols.SoapHttpClientProtocol.EndInvoke%2A> método para completar una llamada de invocación asincrónica al método de servicio Web XML. Por ejemplo, si un servicio Web XML expone un método de servicios Web XML denominado `Add`, la clase de proxy contiene un método denominado `EndAdd`, método de servicio para completar una invocación asincrónica de una Web de XML. Dentro del código para el `EndAdd` se realiza una llamada a la <xref:System.Web.Services.Protocols.SoapHttpClientProtocol.EndInvoke%2A> método y, a continuación, los resultados se colocan en el tipo de valor devuelto esperado para `Add`.  
  
   
  
## Examples  
 El siguiente ejemplo de código es una clase de proxy generada por Wsdl.exe para la `Math` servicio Web XML. Dentro de la `EndAdd` método de la clase de proxy, el <xref:System.Web.Services.Protocols.SoapHttpClientProtocol.EndInvoke%2A> método completa la llamada asincrónica a la `Add` método de servicio Web XML.  
  
 [!code-cpp[Classic SoapHttpClientProtocol.EndInvoke Example#1](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic SoapHttpClientProtocol.EndInvoke Example/CPP/source.cpp#1)]
 [!code-csharp[Classic SoapHttpClientProtocol.EndInvoke Example#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic SoapHttpClientProtocol.EndInvoke Example/CS/source.cs#1)]
 [!code-vb[Classic SoapHttpClientProtocol.EndInvoke Example#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic SoapHttpClientProtocol.EndInvoke Example/VB/source.vb#1)]  
  
 El ejemplo de código siguiente es el `Math` servicio Web XML, desde el que se creó la clase de proxy anterior.  
  
  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="asyncResult" /> no es un valor devuelto a partir del método <see cref="M:System.Web.Services.Protocols.SoapHttpClientProtocol.BeginInvoke(System.String,System.Object[],System.AsyncCallback,System.Object)" />.</exception>
        <exception cref="T:System.Web.Services.Protocols.SoapException">La solicitud llegó al servidor, pero no se procesó correctamente.</exception>
        <exception cref="T:System.InvalidOperationException">La solicitud no fue válida para el estado actual del objeto.</exception>
        <exception cref="T:System.Net.WebException">Error al obtener acceso a la red.</exception>
        <altmember cref="T:System.IAsyncResult" />
        <altmember cref="M:System.Web.Services.Protocols.SoapHttpClientProtocol.BeginInvoke(System.String,System.Object[],System.AsyncCallback,System.Object)" />
        <altmember cref="T:System.Web.Services.Protocols.WebClientProtocol" />
      </Docs>
    </Member>
    <Member MemberName="GetReaderForMessage">
      <MemberSignature Language="C#" Value="protected virtual System.Xml.XmlReader GetReaderForMessage (System.Web.Services.Protocols.SoapClientMessage message, int bufferSize);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Xml.XmlReader GetReaderForMessage(class System.Web.Services.Protocols.SoapClientMessage message, int32 bufferSize) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Services.Protocols.SoapHttpClientProtocol.GetReaderForMessage(System.Web.Services.Protocols.SoapClientMessage,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function GetReaderForMessage (message As SoapClientMessage, bufferSize As Integer) As XmlReader" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::Xml::XmlReader ^ GetReaderForMessage(System::Web::Services::Protocols::SoapClientMessage ^ message, int bufferSize);" />
      <MemberSignature Language="F#" Value="abstract member GetReaderForMessage : System.Web.Services.Protocols.SoapClientMessage * int -&gt; System.Xml.XmlReader&#xA;override this.GetReaderForMessage : System.Web.Services.Protocols.SoapClientMessage * int -&gt; System.Xml.XmlReader" Usage="soapHttpClientProtocol.GetReaderForMessage (message, bufferSize)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Services</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlReader</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="message" Type="System.Web.Services.Protocols.SoapClientMessage" />
        <Parameter Name="bufferSize" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="message">Objeto <see cref="T:System.Web.Services.Protocols.SoapClientMessage" /> que proporciona la propiedad <see cref="P:System.Web.Services.Protocols.SoapMessage.Stream" /> para inicializar el objeto <see cref="T:System.Xml.XmlReader" />.</param>
        <param name="bufferSize">Tamaño de búfer inicial del objeto <see cref="T:System.IO.StreamReader" /> utilizado por <see cref="T:System.Xml.XmlReader" />.</param>
        <summary>Devuelve un objeto <see cref="T:System.Xml.XmlReader" /> inicializado con la propiedad <see cref="P:System.Web.Services.Protocols.SoapMessage.Stream" /> del parámetro <see cref="T:System.Web.Services.Protocols.SoapClientMessage" />.</summary>
        <returns><see cref="T:System.Xml.XmlReader" /> inicializado con la propiedad <see cref="P:System.Web.Services.Protocols.SoapMessage.Stream" /> del parámetro <paramref name="message" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetWebRequest">
      <MemberSignature Language="C#" Value="protected override System.Net.WebRequest GetWebRequest (Uri uri);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Net.WebRequest GetWebRequest(class System.Uri uri) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Services.Protocols.SoapHttpClientProtocol.GetWebRequest(System.Uri)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override System::Net::WebRequest ^ GetWebRequest(Uri ^ uri);" />
      <MemberSignature Language="F#" Value="override this.GetWebRequest : Uri -&gt; System.Net.WebRequest" Usage="soapHttpClientProtocol.GetWebRequest uri" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Services</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.WebRequest</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="uri" Type="System.Uri" />
      </Parameters>
      <Docs>
        <param name="uri"><see cref="T:System.Uri" /> que se utiliza al crear <see cref="T:System.Net.WebRequest" />.</param>
        <summary>Crea un <see cref="T:System.Net.WebRequest" /> para el <paramref name="uri" /> especificado.</summary>
        <returns><see cref="T:System.Net.WebRequest" /> del URI especificado.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este método se puede invalidar para personalizar el <xref:System.Net.WebRequest> antes de la Web de XML se realiza la solicitud de servicio. Por ejemplo, podría agregar un encabezado personalizado a la solicitud.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">El parámetro <paramref name="uri" /> es <see langword="null" />.</exception>
        <altmember cref="T:System.Net.WebRequest" />
        <altmember cref="T:System.Web.Services.Protocols.WebClientProtocol" />
        <altmember cref="M:System.Web.Services.Protocols.WebClientProtocol.GetWebResponse(System.Net.WebRequest)" />
        <altmember cref="T:System.Net.HttpWebRequest" />
        <altmember cref="T:System.Uri" />
      </Docs>
    </Member>
    <Member MemberName="GetWriterForMessage">
      <MemberSignature Language="C#" Value="protected virtual System.Xml.XmlWriter GetWriterForMessage (System.Web.Services.Protocols.SoapClientMessage message, int bufferSize);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Xml.XmlWriter GetWriterForMessage(class System.Web.Services.Protocols.SoapClientMessage message, int32 bufferSize) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Services.Protocols.SoapHttpClientProtocol.GetWriterForMessage(System.Web.Services.Protocols.SoapClientMessage,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function GetWriterForMessage (message As SoapClientMessage, bufferSize As Integer) As XmlWriter" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::Xml::XmlWriter ^ GetWriterForMessage(System::Web::Services::Protocols::SoapClientMessage ^ message, int bufferSize);" />
      <MemberSignature Language="F#" Value="abstract member GetWriterForMessage : System.Web.Services.Protocols.SoapClientMessage * int -&gt; System.Xml.XmlWriter&#xA;override this.GetWriterForMessage : System.Web.Services.Protocols.SoapClientMessage * int -&gt; System.Xml.XmlWriter" Usage="soapHttpClientProtocol.GetWriterForMessage (message, bufferSize)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Services</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlWriter</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="message" Type="System.Web.Services.Protocols.SoapClientMessage" />
        <Parameter Name="bufferSize" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="message">Objeto <see cref="T:System.Web.Services.Protocols.SoapClientMessage" /> que proporciona la propiedad <see cref="P:System.Web.Services.Protocols.SoapMessage.Stream" /> para inicializar el objeto <see cref="T:System.Xml.XmlWriter" />.</param>
        <param name="bufferSize">Tamaño de búfer inicial del objeto <see cref="T:System.IO.StreamWriter" /> utilizado por <see cref="T:System.Xml.XmlWriter" />.</param>
        <summary>Devuelve un objeto <see cref="T:System.Xml.XmlWriter" /> inicializado con la propiedad <see cref="P:System.Web.Services.Protocols.SoapMessage.Stream" /> del parámetro <see cref="T:System.Web.Services.Protocols.SoapClientMessage" />.</summary>
        <returns><see cref="T:System.Xml.XmlWriter" /> inicializado con la propiedad <see cref="P:System.Web.Services.Protocols.SoapMessage.Stream" /> del parámetro <paramref name="message" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="protected object[] Invoke (string methodName, object[] parameters);" FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.8" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance object[] Invoke(string methodName, object[] parameters) cil managed" FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.8" />
      <MemberSignature Language="VB.NET" Value="Protected Function Invoke (methodName As String, parameters As Object()) As Object()" FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.8" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; cli::array &lt;System::Object ^&gt; ^ Invoke(System::String ^ methodName, cli::array &lt;System::Object ^&gt; ^ parameters);" FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.8" />
      <MemberSignature Language="C#" Value="protected object[] Invoke (string method_name, object[] parameters);" FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance object[] Invoke(string method_name, object[] parameters) cil managed" FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="DocId" Value="M:System.Web.Services.Protocols.SoapHttpClientProtocol.Invoke(System.String,System.Object[])" FrameworkAlternate="xamarinandroid-7.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinios-10.8;xamarinmac-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.8" />
      <MemberSignature Language="VB.NET" Value="Protected Function Invoke (method_name As String, parameters As Object()) As Object()" FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; cli::array &lt;System::Object ^&gt; ^ Invoke(System::String ^ method_name, cli::array &lt;System::Object ^&gt; ^ parameters);" FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="F#" Value="member this.Invoke : string * obj[] -&gt; obj[]" Usage="soapHttpClientProtocol.Invoke (method_name, parameters)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Services</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="methodName" Type="System.String" Index="0" FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.8" />
        <Parameter Name="method_name" Type="System.String" Index="0" FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="parameters" Type="System.Object[]" Index="1" />
      </Parameters>
      <Docs>
        <param name="methodName">Nombre del método de servicios Web XML.</param>
        <param name="method_name">Nombre del método de servicios Web XML.</param>
        <param name="parameters">Matriz de objetos que contiene los parámetros que se pasan al servicio Web XML. El orden de los valores de la matriz se corresponde con el orden de los parámetros del método de llamada de la clase derivada.</param>
        <summary>Llama a un método de servicios web XML de forma asincrónica utilizando SOAP.</summary>
        <returns>Matriz de objetos que contiene el valor devuelto, así como cualquiera de los parámetros <see langword="reference" /> o <see langword="out" /> del método de la clase derivada.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Normalmente, no se llama el <xref:System.Web.Services.Protocols.SoapHttpClientProtocol.Invoke%2A> método directamente, a menos que se va a crear su propia clase de proxy para un servicio Web XML.  
  
 Una clase de proxy generada por la herramienta Web Services Description Language (Wsdl.exe) para un servicio Web XML expone los métodos de servicio Web XML como nombres de la clase de proxy. La clase proxy llama el <xref:System.Web.Services.Protocols.SoapHttpClientProtocol.Invoke%2A> método para invocar una llamada al método de servicios Web XML. Por ejemplo, si un servicio Web XML expone un método de servicios Web XML denominado `Add`, la clase de proxy también contiene un método denominado `Add`. Dentro del código para el `Add` método en la clase de proxy, se realiza una llamada sincrónica al método de servicios Web XML a través de la <xref:System.Web.Services.Protocols.SoapHttpClientProtocol.Invoke%2A> método y, a continuación, los resultados se colocan en el tipo de valor devuelto esperado para `Add`.  
  
 El `methodName` parámetro se usa para buscar los atributos personalizados que pueden haber agregado al método, como <xref:System.Web.Services.Protocols.SoapDocumentMethodAttribute>. <xref:System.Web.Services.Protocols.SoapDocumentMethodAttribute> Proporciona información adicional sobre el método derivado que es necesario para el protocolo SOAP.  
  
   
  
## Examples  
 El siguiente ejemplo de código es una clase de proxy generada por Wsdl.exe para la `Math` servicio Web XML. Dentro de la `Add` método de la clase de proxy, el <xref:System.Web.Services.Protocols.SoapHttpClientProtocol.Invoke%2A> es llamar al método el `Add` método de servicio Web XML.  
  
 [!code-cpp[Classic SoapHttpClientProtocol.Invoke Example#1](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic SoapHttpClientProtocol.Invoke Example/CPP/source.cpp#1)]
 [!code-csharp[Classic SoapHttpClientProtocol.Invoke Example#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic SoapHttpClientProtocol.Invoke Example/CS/source.cs#1)]
 [!code-vb[Classic SoapHttpClientProtocol.Invoke Example#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic SoapHttpClientProtocol.Invoke Example/VB/source.vb#1)]  
  
 El ejemplo de código siguiente es el `Math` servicio Web XML, desde el que se creó la clase de proxy anterior.  
  
  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Web.Services.Protocols.SoapException">La solicitud llegó al servidor, pero no se procesó correctamente.</exception>
        <exception cref="T:System.InvalidOperationException">La solicitud no fue válida para el estado actual del objeto.</exception>
        <exception cref="T:System.Net.WebException">Error al obtener acceso a la red.</exception>
        <altmember cref="T:System.Web.Services.Protocols.SoapDocumentMethodAttribute" />
        <altmember cref="T:System.Web.Services.Protocols.WebClientProtocol" />
      </Docs>
    </Member>
    <MemberGroup MemberName="InvokeAsync">
      <AssemblyInfo>
        <AssemblyName>System.Web.Services</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Invoca al método especificado de forma asincrónica.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="InvokeAsync">
      <MemberSignature Language="C#" Value="protected void InvokeAsync (string methodName, object[] parameters, System.Threading.SendOrPostCallback callback);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void InvokeAsync(string methodName, object[] parameters, class System.Threading.SendOrPostCallback callback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Services.Protocols.SoapHttpClientProtocol.InvokeAsync(System.String,System.Object[],System.Threading.SendOrPostCallback)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub InvokeAsync (methodName As String, parameters As Object(), callback As SendOrPostCallback)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void InvokeAsync(System::String ^ methodName, cli::array &lt;System::Object ^&gt; ^ parameters, System::Threading::SendOrPostCallback ^ callback);" />
      <MemberSignature Language="F#" Value="member this.InvokeAsync : string * obj[] * System.Threading.SendOrPostCallback -&gt; unit" Usage="soapHttpClientProtocol.InvokeAsync (methodName, parameters, callback)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Services</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="methodName" Type="System.String" />
        <Parameter Name="parameters" Type="System.Object[]" />
        <Parameter Name="callback" Type="System.Threading.SendOrPostCallback" />
      </Parameters>
      <Docs>
        <param name="methodName">Nombre del método que se va a invocar.</param>
        <param name="parameters">Parámetros que se van a pasar al método.</param>
        <param name="callback">Delegado al que se llama cuando termina la invocación del método.</param>
        <summary>Invoca al método especificado de forma asincrónica.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InvokeAsync">
      <MemberSignature Language="C#" Value="protected void InvokeAsync (string methodName, object[] parameters, System.Threading.SendOrPostCallback callback, object userState);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void InvokeAsync(string methodName, object[] parameters, class System.Threading.SendOrPostCallback callback, object userState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Services.Protocols.SoapHttpClientProtocol.InvokeAsync(System.String,System.Object[],System.Threading.SendOrPostCallback,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub InvokeAsync (methodName As String, parameters As Object(), callback As SendOrPostCallback, userState As Object)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void InvokeAsync(System::String ^ methodName, cli::array &lt;System::Object ^&gt; ^ parameters, System::Threading::SendOrPostCallback ^ callback, System::Object ^ userState);" />
      <MemberSignature Language="F#" Value="member this.InvokeAsync : string * obj[] * System.Threading.SendOrPostCallback * obj -&gt; unit" Usage="soapHttpClientProtocol.InvokeAsync (methodName, parameters, callback, userState)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Services</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="methodName" Type="System.String" />
        <Parameter Name="parameters" Type="System.Object[]" />
        <Parameter Name="callback" Type="System.Threading.SendOrPostCallback" />
        <Parameter Name="userState" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="methodName">Nombre del método que se va a invocar.</param>
        <param name="parameters">Parámetros que se van a pasar al método.</param>
        <param name="callback">Delegado al que se llama cuando termina la invocación del método.</param>
        <param name="userState">Objeto utilizado para pasar información de estado en el delegado <paramref name="callback" />.</param>
        <summary>Invoca al método especificado de forma asincrónica.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SoapVersion">
      <MemberSignature Language="C#" Value="public System.Web.Services.Protocols.SoapProtocolVersion SoapVersion { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Web.Services.Protocols.SoapProtocolVersion SoapVersion" />
      <MemberSignature Language="DocId" Value="P:System.Web.Services.Protocols.SoapHttpClientProtocol.SoapVersion" />
      <MemberSignature Language="VB.NET" Value="Public Property SoapVersion As SoapProtocolVersion" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::Services::Protocols::SoapProtocolVersion SoapVersion { System::Web::Services::Protocols::SoapProtocolVersion get(); void set(System::Web::Services::Protocols::SoapProtocolVersion value); };" />
      <MemberSignature Language="F#" Value="member this.SoapVersion : System.Web.Services.Protocols.SoapProtocolVersion with get, set" Usage="System.Web.Services.Protocols.SoapHttpClientProtocol.SoapVersion" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Services</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.Services.Protocols.SoapProtocolVersion</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene o establece la versión del protocolo SOAP utilizada para realizar la solicitud SOAP al servicio Web XML.</summary>
        <value>Uno de los valores de <see cref="T:System.Web.Services.Protocols.SoapProtocolVersion" />. De manera predeterminada, es <see cref="F:System.Web.Services.Protocols.SoapProtocolVersion.Soap11" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Web.Services.Protocols.SoapHttpClientProtocol.SoapVersion%2A> propiedad se establece en la clase de proxy generada por la herramienta Web Services Description Language (Wsdl.exe) a <xref:System.Web.Services.Protocols.SoapProtocolVersion.Soap11> de forma predeterminada cuando un documento WSDL para un servicio Web XML es compatible con la versión 1.1 de SOAP. Sin embargo, cuando un servicio Web XML sólo admite SOAP 1.2, Wsdl.exe establece el <xref:System.Web.Services.Protocols.SoapHttpClientProtocol.SoapVersion%2A> propiedad <xref:System.Web.Services.Protocols.SoapProtocolVersion.Soap12>. Para elegir la versión del protocolo SOAP al generar la clase de proxy con Wsdl.exe, utilice el `/protocol` cambie con el `SOAP` o `SOAP12` configuración para establecer el <xref:System.Web.Services.Protocols.SoapHttpClientProtocol.SoapVersion%2A> propiedad <xref:System.Web.Services.Protocols.SoapProtocolVersion.Soap11> y <xref:System.Web.Services.Protocols.SoapProtocolVersion.Soap12>, respectivamente .  
  
   
  
## Examples  
 El ejemplo de código siguiente establece la versión del protocolo utilizado para comunicarse con un servicio Web XML para SOAP 1.2.  
  
 [!code-aspx-csharp[SoapHttpClientProtocol.SoapVersion#1](~/samples/snippets/csharp/VS_Snippets_Remoting/SoapHttpClientProtocol.SoapVersion/CS/serverusageclientcs.aspx#1)]
 [!code-aspx-vb[SoapHttpClientProtocol.SoapVersion#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/SoapHttpClientProtocol.SoapVersion/VB/serverusageclientvb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.Services.Protocols.SoapProtocolVersion" />
        <altmember cref="P:System.Web.HttpContext.Items" />
      </Docs>
    </Member>
  </Members>
</Type>