<Type Name="IDebugVsaScriptCodeItem" FullName="Microsoft.JScript.IDebugVsaScriptCodeItem">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="cce45358f7fea281ef60cb94ac2eab8bdbafa99c" />
    <Meta Name="ms.sourcegitcommit" Value="0ec122ee5f3681159b8460ab15b409fd6e3d3ae0" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="es-ES" />
    <Meta Name="ms.lasthandoff" Value="10/04/2018" />
    <Meta Name="ms.locfileid" Value="48668081" />
  </Metadata>
  <TypeSignature Language="C#" Value="public interface IDebugVsaScriptCodeItem" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IDebugVsaScriptCodeItem" />
  <TypeSignature Language="DocId" Value="T:Microsoft.JScript.IDebugVsaScriptCodeItem" />
  <TypeSignature Language="VB.NET" Value="Public Interface IDebugVsaScriptCodeItem" />
  <TypeSignature Language="C++ CLI" Value="public interface class IDebugVsaScriptCodeItem" />
  <TypeSignature Language="F#" Value="type IDebugVsaScriptCodeItem = interface" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.JScript</AssemblyName>
    <AssemblyVersion>7.0.5000.0</AssemblyVersion>
    <AssemblyVersion>8.0.0.0</AssemblyVersion>
    <AssemblyVersion>10.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.Guid("6DFE759A-CB8B-4ca0-A973-1D04E0BF0B53")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Define los métodos que evalúan expresiones y analizan cadenas. Esta interfaz la suele implementar un objeto que representa un bloque de código y las llamadas a esta interfaz provienen normalmente de un depurador. Esta interfaz proporciona la funcionalidad adicional que un host de IActiveScript necesita.</summary>
    <remarks>To be added.</remarks>
    <forInternalUseOnly />
  </Docs>
  <Members>
    <Member MemberName="Evaluate">
      <MemberSignature Language="C#" Value="public object Evaluate ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object Evaluate() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.JScript.IDebugVsaScriptCodeItem.Evaluate" />
      <MemberSignature Language="VB.NET" Value="Public Function Evaluate () As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ Evaluate();" />
      <MemberSignature Language="F#" Value="abstract member Evaluate : unit -&gt; obj" Usage="iDebugVsaScriptCodeItem.Evaluate " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.JScript</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Cuando se implementa en una clase, evalúa el bloque, la expresión o la instrucción representada por el elemento de código y devuelve el valor. Las llamadas a este método suelen provenir de un depurador que necesita evaluar una expresión (por ejemplo, en una ventana Inspección). En las expresiones, el valor es el resultado de la expresión. En los bloques e instrucciones, la expresión resultante es la última expresión calculada por el bloque o instrucción.</summary>
        <returns>Devuelve un valor que representa la evaluación de la instrucción, expresión o bloque.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Tenga en cuenta que el <xref:Microsoft.JScript.IDebugVsaScriptCodeItem.Evaluate%2A> es funcionalmente idéntico al método el <xref:Microsoft.JScript.IVsaScriptCodeItem.Execute%2A> método. Difieren solo los atributos de serialización. Esta versión de la interfaz permite que un depurador no administrado obtener el valor devuelto como un `IUnknown` puntero en lugar de un `VARIANT`.  
  
 ]]></format>
        </remarks>
        <forInternalUseOnly />
      </Docs>
    </Member>
    <Member MemberName="ParseNamedBreakPoint">
      <MemberSignature Language="C#" Value="public bool ParseNamedBreakPoint (string input, out string functionName, out int nargs, out string arguments, out string returnType, out ulong offset);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool ParseNamedBreakPoint(string input, [out] string&amp; functionName, [out] int32&amp; nargs, [out] string&amp; arguments, [out] string&amp; returnType, [out] unsigned int64&amp; offset) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.JScript.IDebugVsaScriptCodeItem.ParseNamedBreakPoint(System.String,System.String@,System.Int32@,System.String@,System.String@,System.UInt64@)" />
      <MemberSignature Language="VB.NET" Value="Public Function ParseNamedBreakPoint (input As String, ByRef functionName As String, ByRef nargs As Integer, ByRef arguments As String, ByRef returnType As String, ByRef offset As ULong) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool ParseNamedBreakPoint(System::String ^ input, [Runtime::InteropServices::Out] System::String ^ % functionName, [Runtime::InteropServices::Out] int % nargs, [Runtime::InteropServices::Out] System::String ^ % arguments, [Runtime::InteropServices::Out] System::String ^ % returnType, [Runtime::InteropServices::Out] System::UInt64 % offset);" />
      <MemberSignature Language="F#" Value="abstract member ParseNamedBreakPoint : string *  *  *  *  *  -&gt; bool" Usage="iDebugVsaScriptCodeItem.ParseNamedBreakPoint (input, functionName, nargs, arguments, returnType, offset)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.JScript</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.String" />
        <Parameter Name="functionName" Type="System.String" RefType="out" />
        <Parameter Name="nargs" Type="System.Int32" RefType="out" />
        <Parameter Name="arguments" Type="System.String" RefType="out" />
        <Parameter Name="returnType" Type="System.String" RefType="out" />
        <Parameter Name="offset" Type="System.UInt64" RefType="out" />
      </Parameters>
      <Docs>
        <param name="input">Cadena de punto de interrupción con nombre y con el formato correcto que proporciona una función, una lista de argumentos opcionales y el desplazamiento IL opcional.</param>
        <param name="functionName">Parámetro Out que devuelve el nombre de la función analizada fuera de la cadena de entrada, o bien la cadena vacía si la cadena de entrada no tiene el formato correcto.</param>
        <param name="nargs">Parámetro Out que devuelve el número de argumentos en la lista de argumentos opcionales. Devuelve cero si no hay ninguna lista de argumentos o si la cadena no tiene el formato correcto.</param>
        <param name="arguments">Parámetro Out que devuelve una lista separada por espacios de los nombres de los tipos de todos los argumentos de la lista de argumentos, o bien una cadena vacía si falta la lista de argumentos o la cadena de entrada no tiene el formato correcto.</param>
        <param name="returnType">Parámetro Out que devuelve una cadena que contiene el tipo de valor devuelto de la función citada en la entrada, o bien la cadena vacía si faltaba el tipo de valor devuelto o la cadena de entrada no tenía el formato correcto.</param>
        <param name="offset">Entero largo sin signo que da el desplazamiento IL a partir de la cadena de entrada, o bien cero si no hubo ningún desplazamiento o la cadena no tenía el formato correcto.</param>
        <summary>Cuando se implementa en una clase, analiza las cadenas y devuelve la información analizada. Las llamadas a este método suelen provenir de un depurador que necesita analizar la información de un punto de interrupción que se representa como una <see langword="string" />. Puede que el depurador tenga un punto de interrupción escrito por el usuario con el formato *functionname-arguments-ILoffset*. Una cadena de punto de interrupción con nombre puede tener un formato complejo, por ejemplo, <c>F.B(C.D[], int, arg : double ) : C.Abc + 123.</c> La lista de parámetros es opcional, al igual que el desplazamiento IL.</summary>
        <returns>Devuelve <see langword="true" /> si se analiza el punto de interrupción con nombre correctamente; en caso contrario, devuelve <see langword="false" />.</returns>
        <remarks>To be added.</remarks>
        <forInternalUseOnly />
      </Docs>
    </Member>
  </Members>
</Type>