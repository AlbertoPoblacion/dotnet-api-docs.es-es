<Type Name="XmlResolver" FullName="System.Xml.XmlResolver">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="816ca2b3ec28c47ec29cc8bb108efbfcba7ac66a" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="es-ES" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36433879" />
  </Metadata>
  <TypeSignature Language="C#" Value="public abstract class XmlResolver" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit XmlResolver extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Xml.XmlResolver" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class XmlResolver" />
  <TypeSignature Language="C++ CLI" Value="public ref class XmlResolver abstract" />
  <TypeSignature Language="F#" Value="type XmlResolver = class" />
  <AssemblyInfo>
    <AssemblyName>System.Xml</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Resuelve los recursos XML externos designados por un identificador uniforme de recursos (URI).</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Xml.XmlResolver> tipo se utiliza para resolver recursos XML externos, como entidades, definiciones de tipo de documento (DTD) o esquemas. También se utiliza para procesar inclusión e importación de elementos que se encuentran en las hojas de estilos Extensible Stylesheet Language (XSL) o esquemas (XSD).  
  
 <xref:System.Xml.XmlResolver> controla todos los aspectos de la negociación de la conexión a los recursos, incluidos el control de credenciales de seguridad, abrir la conexión al origen de datos y devolver el recurso en el formulario de una secuencia u otro tipo de objeto. El objeto que llama <xref:System.Xml.XmlResolver> tiene la tarea de interpretar la secuencia.  
  
 El <xref:System.Xml> espacio de nombres incluye dos implementaciones concretas de la <xref:System.Xml.XmlResolver> clase:  
  
-   <xref:System.Xml.XmlUrlResolver> es la resolución predeterminada para todas las clases en el <xref:System.Xml> espacio de nombres. Es compatible con los protocolos `file://` y `http://` y las solicitudes de la clase <xref:System.Net.WebRequest?displayProperty=nameWithType>. Para obtener ejemplos de cómo extender la clase para mejorar el rendimiento, consulte la <xref:System.Xml.XmlUrlResolver> página de referencia.  
  
-   <xref:System.Xml.XmlSecureResolver> ayuda a proteger otra <xref:System.Xml.XmlResolver> objeto ajustando el objeto y restringiendo los recursos que se pueden tener acceso. Por ejemplo, el <xref:System.Xml.XmlSecureResolver> puede prohibir el acceso a determinados sitios de Internet o a las zonas.  
  
 Puede crear y especificar a su propio solucionador. Si no se especifica una resolución, el lector utiliza el valor predeterminado es <xref:System.Xml.XmlUrlResolver> sin credenciales de usuario.  
  
 Para especificar el <xref:System.Xml.XmlResolver> que se va a utilizar, establezca la propiedad <xref:System.Xml.XmlReaderSettings.XmlResolver%2A?displayProperty=nameWithType> y pase el objeto <xref:System.Xml.XmlReaderSettings> al método <xref:System.Xml.XmlReader.Create%2A>.  
  
 Si el recurso se almacena en un sistema que requiere autenticación, utilice la <xref:System.Xml.XmlResolver.Credentials%2A?displayProperty=nameWithType> propiedad para especificar las credenciales necesarias.  
  
## <a name="supplying-authentication-credentials"></a>Proporcionar las credenciales de autenticación  
 El archivo que contiene los datos XML para leer puede tener una directiva de acceso restringido. Si se necesita autenticación para obtener acceso a un recurso de red, utilice la propiedad <xref:System.Xml.XmlResolver.Credentials%2A> para especificar las credenciales necesarias. Si el <xref:System.Xml.XmlResolver.Credentials%2A> propiedad no está establecida, las credenciales se establecen en `null`.  
  
 Por ejemplo, suponga que se necesitan credenciales cuando se soliciten datos desde la web para la autenticación. A menos que el directorio virtual web permite el acceso anónimo, debe establecer el <xref:System.Xml.XmlResolver.Credentials%2A> propiedad para proporcionar credenciales. En el ejemplo siguiente se crea un <xref:System.Xml.XmlReader> objeto que usa un <xref:System.Xml.XmlUrlResolver> con credenciales predeterminadas para tener acceso a la http://localhost/bookstore/inventory.xml sitio.  
  
 [!code-cpp[XmlReaderSettings.cctor#2](~/samples/snippets/cpp/VS_Snippets_Data/XmlReaderSettings.cctor/CPP/XmlReaderSettings.cctor.cpp#2)]
 [!code-csharp[XmlReaderSettings.cctor#2](~/samples/snippets/csharp/VS_Snippets_Data/XmlReaderSettings.cctor/CS/factory_rdr_cctor2.cs#2)]
 [!code-vb[XmlReaderSettings.cctor#2](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlReaderSettings.cctor/VB/factory_rdr_cctor2.vb#2)]  
  
 Puede proporcionar credenciales distintas para diferentes identificadores URI y agregarlas a una memoria caché. Estas credenciales se utilizan para comprobar la autenticación de los diferentes identificadores URI del origen inicial del XML. En el ejemplo siguiente se muestra cómo agregar credenciales a una memoria caché.  
  
 [!code-csharp[XslCompiledTransform.Load#11](~/samples/snippets/csharp/VS_Snippets_Data/XslCompiledTransform.Load/CS/Xslt_Load_v2.cs#11)]
 [!code-vb[XslCompiledTransform.Load#11](~/samples/snippets/visualbasic/VS_Snippets_Data/XslCompiledTransform.Load/VB/Xslt_Load_v2.vb#11)]  
  
## <a name="security-considerations"></a>Consideraciones de seguridad  
 Tenga en cuenta los siguientes elementos cuando se trabaja con la <xref:System.Xml.XmlResolver> clase.  
  
-   Los objetos <xref:System.Xml.XmlResolver> pueden contener información confidencial como, por ejemplo, credenciales de usuario. Debe tener cuidado al almacenar en caché <xref:System.Xml.XmlResolver> objetos y no debe pasar el <xref:System.Xml.XmlResolver> objeto a un componente no es de confianza.  
  
-   Si está diseñando una propiedad de clase que utilice la clase <xref:System.Xml.XmlResolver>, dicha propiedad se debería definir como de solo escritura. La propiedad se puede utilizar para especificar el <xref:System.Xml.XmlResolver> que se debe utilizar, pero no se puede utilizar para devolver un objeto <xref:System.Xml.XmlResolver>.  
  
-   Si la aplicación acepta <xref:System.Xml.XmlResolver> objetos desde código no confiable, no se puede suponer que el URI pasado en el <xref:System.Xml.XmlResolver.GetEntity%2A> método será el mismo que el devuelto por la <xref:System.Xml.XmlResolver.ResolveUri%2A> método. Las clases derivadas de la clase <xref:System.Xml.XmlResolver> pueden invalidar el método <xref:System.Xml.XmlResolver.GetEntity%2A> y devolver datos diferentes a lo que contenía el identificador URI original.  
  
-   La aplicación puede mitigar memoria de denegación de servicio para el <xref:System.Xml.XmlResolver.GetEntity%2A> método implementando un <xref:System.Runtime.InteropServices.ComTypes.IStream> que limita el número de bytes leídos. Esto ayuda a protegerse contra situaciones donde el código malintencionado intenta pasar una secuencia infinita de bytes que el <xref:System.Xml.XmlResolver.GetEntity%2A> método.  
  
   
  
## Examples  
 En el ejemplo siguiente se crea un <xref:System.Xml.XmlUrlResolver> con las credenciales predeterminadas. Un <xref:System.Xml.XmlReader> se utiliza para leer y mostrar el flujo de datos resultante.  
  
 [!code-csharp[XmlResolver_ex#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlResolver_ex/CS/XmlResolver_ex.cs#1)]
 [!code-vb[XmlResolver_ex#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlResolver_ex/VB/XmlResolver_ex.vb#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected XmlResolver ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlResolver.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; XmlResolver();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Xml.XmlResolver" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este constructor llama a constructores de clases derivadas para inicializar el estado en este tipo.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Credentials">
      <MemberSignature Language="C#" Value="public virtual System.Net.ICredentials Credentials { set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Net.ICredentials Credentials" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlResolver.Credentials" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property Credentials As ICredentials" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Net::ICredentials ^ Credentials {  void set(System::Net::ICredentials ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Credentials : System.Net.ICredentials" Usage="System.Xml.XmlResolver.Credentials" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.ICredentials</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Cuando se invalida en una clase derivada, establece las credenciales usadas para autenticar las solicitudes web.</summary>
        <value>Credenciales que se usan para autenticar las solicitudes web. Si no se establece esta propiedad, el valor predeterminado es <see langword="null" />; es decir, el objeto <see langword="XmlResolver" /> no tiene credenciales de usuario.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si el directorio virtual no requiere autenticación, esta propiedad no tiene que establecerse. En caso contrario, se deben suministrar las credenciales del usuario.  
  
 El siguiente código de C# establece las credenciales en la <xref:System.Xml.XmlResolver> objeto.  
  
```csharp  
NetworkCredential nc = new NetworkCredential(UserName, SecurelyStoredPassword, Domain);  
XmlUrlResolver resolver = new XmlUrlResolver();  
resolver.Credentials = nc;  
```  
  
 Puede asociar credenciales distintas a diferentes identificadores URI y agregarlas a una memoria caché. A continuación, puede usar las credenciales para comprobar la autenticación de diferentes identificadores URI del origen original del XML.  
  
```csharp  
NetworkCredential myCred = new NetworkCredential(UserName, SecurelyStoredPassword, Domain);   
CredentialCache myCache = new CredentialCache();   
myCache.Add(new Uri("http://www.contoso.com/"), "Basic", myCred);   
myCache.Add(new Uri("http://app.contoso.com/"), "Basic", myCred);  
XmlUrlResolver resolver = new XmlUrlResolver();  
resolver.Credentials = myCache;  
```  
  
   
  
## Examples  
 Consulte <xref:System.Xml.XmlUrlResolver.Credentials%2A?displayProperty=nameWithType> para obtener un ejemplo que utiliza esta propiedad.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Net.CredentialCache" />
        <altmember cref="T:System.Net.NetworkCredential" />
      </Docs>
    </Member>
    <Member MemberName="GetEntity">
      <MemberSignature Language="C#" Value="public abstract object GetEntity (Uri absoluteUri, string role, Type ofObjectToReturn);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object GetEntity(class System.Uri absoluteUri, string role, class System.Type ofObjectToReturn) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlResolver.GetEntity(System.Uri,System.String,System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function GetEntity (absoluteUri As Uri, role As String, ofObjectToReturn As Type) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract System::Object ^ GetEntity(Uri ^ absoluteUri, System::String ^ role, Type ^ ofObjectToReturn);" />
      <MemberSignature Language="F#" Value="abstract member GetEntity : Uri * string * Type -&gt; obj" Usage="xmlResolver.GetEntity (absoluteUri, role, ofObjectToReturn)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="absoluteUri" Type="System.Uri" />
        <Parameter Name="role" Type="System.String" />
        <Parameter Name="ofObjectToReturn" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="absoluteUri">URI devuelto desde <see cref="M:System.Xml.XmlResolver.ResolveUri(System.Uri,System.String)" />.</param>
        <param name="role">No se usa actualmente.</param>
        <param name="ofObjectToReturn">Tipo de objeto que se va a devolver. La versión actual solo devuelve objetos System.IO.Stream.</param>
        <summary>Cuando se invalida en una clase derivada, asigna un identificador URI a un objeto que contiene el recurso real.</summary>
        <returns>Objeto de flujo o <see langword="null" /> si se especifica un tipo que no sea un flujo.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este método se utiliza cuando el llamador desea asignar un URI determinado en el objeto que contiene el recurso real que representa el identificador URI. El tipo de objeto devuelto es negociable; Sin embargo, siempre debe admitir la implementación <xref:System.IO.Stream?displayProperty=nameWithType>.  
  
 Para obtener la versión asincrónica de este método, consulte <xref:System.Xml.XmlResolver.GetEntityAsync%2A>.  
  
> [!IMPORTANT]
>  La aplicación puede mitigar memoria de denegación de servicio para el <xref:System.Xml.XmlResolver.GetEntity%2A> método implementando un <xref:System.Runtime.InteropServices.ComTypes.IStream> que limita el número de bytes leídos. Esto ayuda a protegerse contra situaciones donde el código malintencionado intenta pasar una secuencia infinita de bytes que el <xref:System.Xml.XmlResolver.GetEntity%2A> método.  
  
   
  
## Examples  
 Consulte <xref:System.Xml.XmlUrlResolver.GetEntity%2A?displayProperty=nameWithType> para obtener un ejemplo con este método.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Xml.XmlException">
          <paramref name="ofObjectToReturn" /> no es un tipo de <see langword="Stream" />.</exception>
        <exception cref="T:System.UriFormatException">El identificador URI especificado no es un identificador URI absoluto.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="absoluteUri" /> es <see langword="null" />.</exception>
        <exception cref="T:System.Exception">Se ha producido un error en tiempo de ejecución (por ejemplo, una interrupción en la conexión con el servidor).</exception>
      </Docs>
    </Member>
    <Member MemberName="GetEntityAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;object&gt; GetEntityAsync (Uri absoluteUri, string role, Type ofObjectToReturn);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;object&gt; GetEntityAsync(class System.Uri absoluteUri, string role, class System.Type ofObjectToReturn) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlResolver.GetEntityAsync(System.Uri,System.String,System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetEntityAsync (absoluteUri As Uri, role As String, ofObjectToReturn As Type) As Task(Of Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Threading::Tasks::Task&lt;System::Object ^&gt; ^ GetEntityAsync(Uri ^ absoluteUri, System::String ^ role, Type ^ ofObjectToReturn);" />
      <MemberSignature Language="F#" Value="abstract member GetEntityAsync : Uri * string * Type -&gt; System.Threading.Tasks.Task&lt;obj&gt;&#xA;override this.GetEntityAsync : Uri * string * Type -&gt; System.Threading.Tasks.Task&lt;obj&gt;" Usage="xmlResolver.GetEntityAsync (absoluteUri, role, ofObjectToReturn)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Object&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="absoluteUri" Type="System.Uri" />
        <Parameter Name="role" Type="System.String" />
        <Parameter Name="ofObjectToReturn" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="absoluteUri">URI devuelto desde <see cref="M:System.Xml.XmlResolver.ResolveUri(System.Uri,System.String)" />.</param>
        <param name="role">No se usa actualmente.</param>
        <param name="ofObjectToReturn">Tipo de objeto que se va a devolver. La versión actual solo devuelve objetos <see cref="T:System.IO.Stream" />.</param>
        <summary>Asigna asincrónicamente un identificador URI a un objeto que contiene el recurso real.</summary>
        <returns>Objeto de flujo o <see langword="null" /> si se especifica un tipo que no sea un flujo.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Esta es la versión asincrónica de <xref:System.Xml.XmlResolver.GetEntity%2A>, con la misma funcionalidad. Para usar este método, debe establecer el <xref:System.Xml.XmlReaderSettings.Async%2A> indicador en `true`.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ResolveUri">
      <MemberSignature Language="C#" Value="public virtual Uri ResolveUri (Uri baseUri, string relativeUri);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Uri ResolveUri(class System.Uri baseUri, string relativeUri) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlResolver.ResolveUri(System.Uri,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ResolveUri (baseUri As Uri, relativeUri As String) As Uri" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual Uri ^ ResolveUri(Uri ^ baseUri, System::String ^ relativeUri);" />
      <MemberSignature Language="F#" Value="abstract member ResolveUri : Uri * string -&gt; Uri&#xA;override this.ResolveUri : Uri * string -&gt; Uri" Usage="xmlResolver.ResolveUri (baseUri, relativeUri)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Uri</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="baseUri" Type="System.Uri" />
        <Parameter Name="relativeUri" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="baseUri">Identificador URI base que se usa para resolver el identificador URI relativo.</param>
        <param name="relativeUri">Identificador URI que se va a resolver. El identificador URI puede ser absoluto o relativo. Si es absoluto, este valor reemplaza de manera efectiva el valor de <c>baseUri</c>. Si es relativo, se combina con <c>baseUri</c> para formar un identificador URI absoluto.</param>
        <summary>Cuando se invalida en una clase derivada, resuelve el identificador URI absoluto a partir de los identificadores URI base y relativo.</summary>
        <returns>URI absoluto o <see langword="null" /> si el URI relativo no se puede resolver.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El URI absoluto puede utilizarse como el identificador URI base para las solicitudes subsiguientes de entidades que están relacionadas con este identificador URI.  
  
   
  
## Examples  
 Consulte <xref:System.Xml.XmlUrlResolver.GetEntity%2A?displayProperty=nameWithType> para obtener un ejemplo que utiliza este método.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="relativeUri" /> es <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="SupportsType">
      <MemberSignature Language="C#" Value="public virtual bool SupportsType (Uri absoluteUri, Type type);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool SupportsType(class System.Uri absoluteUri, class System.Type type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlResolver.SupportsType(System.Uri,System.Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool SupportsType(Uri ^ absoluteUri, Type ^ type);" />
      <MemberSignature Language="F#" Value="abstract member SupportsType : Uri * Type -&gt; bool&#xA;override this.SupportsType : Uri * Type -&gt; bool" Usage="xmlResolver.SupportsType (absoluteUri, type)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="absoluteUri" Type="System.Uri" />
        <Parameter Name="type" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="absoluteUri">Identificador URI.</param>
        <param name="type">Tipo que se devuelve.</param>
        <summary>Permite al objeto Resolver devolver otros tipos además de <see cref="T:System.IO.Stream" />.</summary>
        <returns>
          <see langword="true" /> si se admite el elemento <paramref name="type" />; en caso contrario, <see langword="false" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>