<Type Name="XmlUrlResolver" FullName="System.Xml.XmlUrlResolver">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="9895ac0a36794db0293b07dd03378b63f669eb4b" />
    <Meta Name="ms.sourcegitcommit" Value="16d2d159872fd213cae4b8f371d7ae9c8b027c89" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="es-ES" />
    <Meta Name="ms.lasthandoff" Value="11/17/2018" />
    <Meta Name="ms.locfileid" Value="51870617" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class XmlUrlResolver : System.Xml.XmlResolver" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit XmlUrlResolver extends System.Xml.XmlResolver" />
  <TypeSignature Language="DocId" Value="T:System.Xml.XmlUrlResolver" />
  <TypeSignature Language="VB.NET" Value="Public Class XmlUrlResolver&#xA;Inherits XmlResolver" />
  <TypeSignature Language="C++ CLI" Value="public ref class XmlUrlResolver : System::Xml::XmlResolver" />
  <TypeSignature Language="F#" Value="type XmlUrlResolver = class&#xA;    inherit XmlResolver" />
  <AssemblyInfo>
    <AssemblyName>System.Xml</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Xml.XmlResolver</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Resuelve los recursos XML externos designados por un identificador uniforme de recursos (URI).</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Xml.XmlUrlResolver> se utiliza para resolver recursos XML externos como entidades, definiciones de tipo de documento (DTD) o esquemas. También se usa para procesos de inclusión e importación de elementos que se encuentran las hojas de estilos Extensible StyleSheet Language (XSL) o esquemas (XSD).  
  
 <xref:System.Xml.XmlUrlResolver> es la resolución predeterminada para todas las clases en el <xref:System.Xml> espacio de nombres. Es compatible con los protocolos `file://` y `http://` y las solicitudes de la clase <xref:System.Net.WebRequest>.  
  
> [!IMPORTANT]
>  Los objetos <xref:System.Xml.XmlUrlResolver> pueden contener información confidencial como, por ejemplo, credenciales de usuario. Debe tener cuidado al almacenar en memoria caché <xref:System.Xml.XmlUrlResolver> objetos y no debe pasar <xref:System.Xml.XmlUrlResolver> objetos a un componente de confianza.  
  
## <a name="resolving-dtds"></a>Resolución de DTD  
 Si un lector de XML (<xref:System.Xml.XmlReader>) está leyendo un archivo XML que contiene una DTD externa, llama a la <xref:System.Xml.XmlUrlResolver.GetEntityAsync%2A?displayProperty=nameWithType> método para obtener una representación de secuencia de la DTD. Si el URI de la DTD es un URI relativo, el lector XML se llama a la <xref:System.Xml.XmlUrlResolver.ResolveUri%2A?displayProperty=nameWithType> método y devuelve un URI absoluto para el determinado `relativeUri` y `baseURi` parámetros. Si el <xref:System.Xml.XmlUrlResolver> no sabe cómo resolver el identificador URI, devuelve `null`.  
  
 El método <xref:System.Xml.XmlUrlResolver.GetEntity%2A?displayProperty=nameWithType> utiliza la información contenida en la propiedad <xref:System.Xml.XmlUrlResolver.Credentials%2A> según sea necesario para obtener acceso al recurso. No existe ningún descriptor de acceso `get` para esta propiedad por motivos de seguridad. Al sobrescribir <xref:System.Xml.XmlResolver>, **GetEntity** es el método que utiliza la información de credenciales en el **credenciales** propiedad.  
  
 La resolución de todos los demás recursos XML es muy similar a la resolución de DTD. <xref:System.Xml.XmlResolver> negocia la conexión con el recurso externo y devuelve un <xref:System.IO.Stream> representación del contenido. El objeto que realiza la llamada a <xref:System.Xml.XmlResolver> interpreta la secuencia.  
  
## <a name="extending-the-xmlurlresolver-class"></a>Extender la clase XmlUrlResolver  
 El objetivo predeterminado de la clase <xref:System.Xml.XmlUrlResolver> es resolver un recurso de datos XML proveniente de su origen, no de la caché. En algunos casos, puede mejorarse el rendimiento de la aplicación si se resuelven datos que provienen de la caché, eliminando así la necesidad de realizar una transferencia con el servidor que contiene dichos datos. El aumento de rendimiento debe ponderarse con la necesidad de contar con datos actualizados.  
  
 En el ejemplo siguiente se amplía <xref:System.Xml.XmlUrlResolver> y crea una nueva clase, `XmlCachingResolver`, para recuperar los recursos de la memoria caché. Esto se lleva a cabo reemplazando la propiedad <xref:System.Xml.XmlUrlResolver.Credentials%2A?displayProperty=nameWithType> y el método <xref:System.Xml.XmlUrlResolver.GetEntity%2A?displayProperty=nameWithType>.  
  
 [!code-csharp[XmlCachingResolver_ex#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlCachingResolver_ex/CS/XmlCachingResolver_ex.cs#1)]
 [!code-vb[XmlCachingResolver_ex#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlCachingResolver_ex/VB/XmlCachingResolver_ex.vb#1)]  
  
 El mecanismo de lectura desde caché de la clase `XmlCachingResolver` se implementa en el método `GetEntity`. Esto se lleva a cabo creando objetos <xref:System.Net.WebRequest> y <xref:System.Net.Cache.HttpRequestCachePolicy> nuevos. El objeto <xref:System.Net.Cache.HttpRequestCachePolicy> se crea utilizando el miembro <xref:System.Net.Cache.HttpRequestCacheLevel.Default> de la enumeración <xref:System.Net.Cache.HttpRequestCacheLevel>.  
  
 La propiedad <xref:System.Net.WebRequest.CachePolicy%2A> del objeto <xref:System.Net.WebRequest> se configura con el objeto <xref:System.Net.Cache.HttpRequestCachePolicy>.  
  
 Se crea una instancia de la clase `XmlCachingResolver` con el parámetro `Boolean` `enableHttpCaching`. Cuando este valor se establece en `true`, la instancia se resuelve como un recurso desde la memoria caché predeterminada si es posible. Cuando `enableHttpCaching` está establecido en `false`, usa el comportamiento predeterminado de la instancia y resuelve los recursos desde su origen.  
  
> [!NOTE]
>  En este ejemplo aprovecha la extensibilidad de las clases XML en .NET Framework. Es posible extender y personalizar otras clases con el fin de que se ajusten a los requisitos de una aplicación en particular.  
  
   
  
## Examples  
 En el ejemplo siguiente se crea un <xref:System.Xml.XmlReader> que usa un <xref:System.Xml.XmlUrlResolver> con credenciales predeterminadas.  
  
 [!code-csharp[XmlResolver_Samples#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlResolver_Samples/CS/XmlResolver_Samples.cs#1)]
 [!code-vb[XmlResolver_Samples#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlResolver_Samples/VB/XmlResolver_Samples.vb#1)]  
  
 ]]></format>
    </remarks>
    <related type="Article" href="https://msdn.microsoft.com/library/e695047f-3c0f-4045-8708-5baea91cc380">Documentos y datos XML</related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XmlUrlResolver ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlUrlResolver.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XmlUrlResolver();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Xml.XmlUrlResolver" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CachePolicy">
      <MemberSignature Language="C#" Value="public System.Net.Cache.RequestCachePolicy CachePolicy { set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Net.Cache.RequestCachePolicy CachePolicy" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlUrlResolver.CachePolicy" />
      <MemberSignature Language="VB.NET" Value="Public Property CachePolicy As RequestCachePolicy" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Net::Cache::RequestCachePolicy ^ CachePolicy {  void set(System::Net::Cache::RequestCachePolicy ^ value); };" />
      <MemberSignature Language="F#" Value="member this.CachePolicy : System.Net.Cache.RequestCachePolicy" Usage="System.Xml.XmlUrlResolver.CachePolicy" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Net.Cache.RequestCachePolicy</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene o establece la directiva de caché para el objeto <see cref="T:System.Net.WebRequest" /> subyacente.</summary>
        <value>Directiva de caché para la solicitud web subyacente.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Credentials">
      <MemberSignature Language="C#" Value="public override System.Net.ICredentials Credentials { set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Net.ICredentials Credentials" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlUrlResolver.Credentials" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Property Credentials As ICredentials" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Net::ICredentials ^ Credentials {  void set(System::Net::ICredentials ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Credentials : System.Net.ICredentials" Usage="System.Xml.XmlUrlResolver.Credentials" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Net.ICredentials</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Establece las credenciales usadas para autenticar las solicitudes web.</summary>
        <value>Credenciales que se usan para autenticar las solicitudes web. Si no se establece esta propiedad, el valor predeterminado es <see langword="null" />; es decir, el objeto <see langword="XmlUrlResolver" /> no tiene credenciales de usuario.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si el directorio virtual no requiere autenticación, no es necesario establecer esta propiedad. En caso contrario, se deben proporcionar las credenciales del usuario.  
  
 Puede asociar otras credenciales diferentes identificadores URI y agregarlas a una memoria caché. A continuación, puede usar las credenciales para comprobar la autenticación para diferentes identificadores URI, independientemente del origen de XML.  
  
 El código de C# siguiente muestra cómo establecer el <xref:System.Xml.XmlUrlResolver.Credentials%2A> propiedad a una caché de credenciales.  
  
```csharp  
NetworkCredential myCred = new NetworkCredential(UserName,SecurelyStoredPassword,Domain);   
CredentialCache myCache = new CredentialCache();   
myCache.Add(new Uri("http://www.contoso.com/"), "Basic", myCred);   
myCache.Add(new Uri("http://app.contoso.com/"), "Basic", myCred);  
XmlUrlResolver resolver = new XmlUrlResolver();  
resolver.Credentials = myCache;  
```  
  
   
  
## Examples  
 En el ejemplo siguiente se crea un <xref:System.Xml.XmlUrlResolver> objeto con las credenciales. El <xref:System.Xml.XmlReader> usa las credenciales en el <xref:System.Xml.XmlUrlResolver> objeto para tener acceso a un recurso de red.  
  
 [!code-csharp[XmlResolver_Samples#2](~/samples/snippets/csharp/VS_Snippets_Data/XmlResolver_Samples/CS/XmlResolver_Samples.cs#2)]
 [!code-vb[XmlResolver_Samples#2](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlResolver_Samples/VB/XmlResolver_Samples.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Net.CredentialCache" />
        <altmember cref="T:System.Net.NetworkCredential" />
      </Docs>
    </Member>
    <Member MemberName="GetEntity">
      <MemberSignature Language="C#" Value="public override object GetEntity (Uri absoluteUri, string role, Type ofObjectToReturn);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance object GetEntity(class System.Uri absoluteUri, string role, class System.Type ofObjectToReturn) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlUrlResolver.GetEntity(System.Uri,System.String,System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetEntity (absoluteUri As Uri, role As String, ofObjectToReturn As Type) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Object ^ GetEntity(Uri ^ absoluteUri, System::String ^ role, Type ^ ofObjectToReturn);" />
      <MemberSignature Language="F#" Value="override this.GetEntity : Uri * string * Type -&gt; obj" Usage="xmlUrlResolver.GetEntity (absoluteUri, role, ofObjectToReturn)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="absoluteUri" Type="System.Uri" />
        <Parameter Name="role" Type="System.String" />
        <Parameter Name="ofObjectToReturn" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="absoluteUri">URI devuelto desde <see cref="M:System.Xml.XmlResolver.ResolveUri(System.Uri,System.String)" />.</param>
        <param name="role">No se usa actualmente.</param>
        <param name="ofObjectToReturn">Tipo de objeto que se va a devolver. La implementación actual solo devuelve objetos <see cref="T:System.IO.Stream" />.</param>
        <summary>Asigna un identificador URI a un objeto que contiene el recurso real.</summary>
        <returns>Objeto de flujo o <see langword="null" /> si se especifica un tipo que no sea un flujo.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este método se utiliza cuando el llamador desea asignar un URI determinado a un objeto que contiene el recurso que representa el identificador URI.  
  
 Para obtener la versión asincrónica de este método, consulte <xref:System.Xml.XmlUrlResolver.GetEntityAsync%2A>.  
  
> [!IMPORTANT]
>  La aplicación puede mitigar de denegación de servicio para el <xref:System.Xml.XmlUrlResolver.GetEntity%2A> método mediante la implementación de IStream <xref:System.Runtime.InteropServices.ComTypes.IStream> para limitar el número de bytes leídos. Esto ayuda a protegerse contra situaciones donde el código malintencionado intenta pasar una secuencia infinita de bytes que el <xref:System.Xml.XmlUrlResolver.GetEntity%2A> método.  
  
   
  
## Examples  
 En el ejemplo siguiente se muestra el `GetEntity` y <xref:System.Xml.XmlResolver.ResolveUri%2A> métodos.  
  
 [!code-cpp[Classic WebData XmlUrlResolver.ResolveUri Example#1](~/samples/snippets/cpp/VS_Snippets_Data/Classic WebData XmlUrlResolver.ResolveUri Example/CPP/source.cpp#1)]
 [!code-csharp[Classic WebData XmlUrlResolver.ResolveUri Example#1](~/samples/snippets/csharp/VS_Snippets_Data/Classic WebData XmlUrlResolver.ResolveUri Example/CS/source.cs#1)]
 [!code-vb[Classic WebData XmlUrlResolver.ResolveUri Example#1](~/samples/snippets/visualbasic/VS_Snippets_Data/Classic WebData XmlUrlResolver.ResolveUri Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Xml.XmlException">
          <paramref name="ofObjectToReturn" /> no es un tipo <see langword="null" /> ni <see langword="Stream" />.</exception>
        <exception cref="T:System.UriFormatException">El identificador URI especificado no es un identificador URI absoluto.</exception>
        <exception cref="T:System.ArgumentNullException">El valor de <paramref name="absoluteUri" /> es <see langword="null" />.</exception>
        <exception cref="T:System.Exception">Se ha producido un error en tiempo de ejecución (por ejemplo, una interrupción en la conexión con el servidor).</exception>
        <altmember cref="T:System.Uri" />
      </Docs>
    </Member>
    <Member MemberName="GetEntityAsync">
      <MemberSignature Language="C#" Value="public override System.Threading.Tasks.Task&lt;object&gt; GetEntityAsync (Uri absoluteUri, string role, Type ofObjectToReturn);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Threading.Tasks.Task`1&lt;object&gt; GetEntityAsync(class System.Uri absoluteUri, string role, class System.Type ofObjectToReturn) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlUrlResolver.GetEntityAsync(System.Uri,System.String,System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetEntityAsync (absoluteUri As Uri, role As String, ofObjectToReturn As Type) As Task(Of Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Threading::Tasks::Task&lt;System::Object ^&gt; ^ GetEntityAsync(Uri ^ absoluteUri, System::String ^ role, Type ^ ofObjectToReturn);" />
      <MemberSignature Language="F#" Value="override this.GetEntityAsync : Uri * string * Type -&gt; System.Threading.Tasks.Task&lt;obj&gt;" Usage="xmlUrlResolver.GetEntityAsync (absoluteUri, role, ofObjectToReturn)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.Diagnostics.DebuggerStepThrough</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Object&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="absoluteUri" Type="System.Uri" />
        <Parameter Name="role" Type="System.String" />
        <Parameter Name="ofObjectToReturn" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="absoluteUri">URI devuelto desde <see cref="M:System.Xml.XmlResolver.ResolveUri(System.Uri,System.String)" />.</param>
        <param name="role">No se usa actualmente.</param>
        <param name="ofObjectToReturn">Tipo de objeto que se va a devolver. La implementación actual solo devuelve objetos <see cref="T:System.IO.Stream" />.</param>
        <summary>Asigna asincrónicamente un identificador URI a un objeto que contiene el recurso real.</summary>
        <returns>Objeto de flujo o <see langword="null" /> si se especifica un tipo que no sea un flujo.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Proxy">
      <MemberSignature Language="C#" Value="public System.Net.IWebProxy Proxy { set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Net.IWebProxy Proxy" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlUrlResolver.Proxy" />
      <MemberSignature Language="VB.NET" Value="Public Property Proxy As IWebProxy" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Net::IWebProxy ^ Proxy {  void set(System::Net::IWebProxy ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Proxy : System.Net.IWebProxy" Usage="System.Xml.XmlUrlResolver.Proxy" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Net.IWebProxy</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene o establece el proxy de red para el objeto <see cref="T:System.Net.WebRequest" /> subyacente.</summary>
        <value>
          <see cref="T:System.Net.IWebProxy" /> que se va a utilizar para tener acceso al recurso de Internet.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ResolveUri">
      <MemberSignature Language="C#" Value="public override Uri ResolveUri (Uri baseUri, string relativeUri);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Uri ResolveUri(class System.Uri baseUri, string relativeUri) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlUrlResolver.ResolveUri(System.Uri,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ResolveUri (baseUri As Uri, relativeUri As String) As Uri" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override Uri ^ ResolveUri(Uri ^ baseUri, System::String ^ relativeUri);" />
      <MemberSignature Language="F#" Value="override this.ResolveUri : Uri * string -&gt; Uri" Usage="xmlUrlResolver.ResolveUri (baseUri, relativeUri)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Uri</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="baseUri" Type="System.Uri" />
        <Parameter Name="relativeUri" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="baseUri">Identificador URI base que se usa para resolver el identificador URI relativo.</param>
        <param name="relativeUri">Identificador URI que se va a resolver. El identificador URI puede ser absoluto o relativo. Si es absoluto, este valor reemplaza de manera efectiva el valor de <c>baseUri</c>. Si es relativo, se combina con <c>baseUri</c> para formar un identificador URI absoluto.</param>
        <summary>Resuelve el URI absoluto a partir de los URI base y relativo.</summary>
        <returns>URI absoluto o <see langword="null" /> si el URI relativo no se puede resolver.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El URI absoluto puede usarse como el URI base para todas las solicitudes posteriores para las entidades que están en relación con este identificador URI.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="baseUri" /> es <see langword="null" /> o bien <paramref name="relativeUri" /> es <see langword="null" />.</exception>
        <block subset="none" type="overrides">
          <para>Este método tiene una petición de herencia. Plena confianza es necesaria para reemplazar el <see cref="M:System.Xml.XmlUrlResolver.ResolveUri(System.Uri,System.String)" /> método.</para>
        </block>
      </Docs>
    </Member>
  </Members>
</Type>