<Type Name="XslTransform" FullName="System.Xml.Xsl.XslTransform">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="9fffe3df74f84922396e53ccd8afb19f9699356f" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="es-ES" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30721429" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class XslTransform" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit XslTransform extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Xml.Xsl.XslTransform" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class XslTransform" />
  <TypeSignature Language="C++ CLI" Value="public ref class XslTransform sealed" />
  <AssemblyInfo>
    <AssemblyName>System.Xml</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Obsolete("This class has been deprecated. Please use System.Xml.Xsl.XslCompiledTransform instead. http://go.microsoft.com/fwlink/?linkid=14202")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Transforma datos XML utilizando una hoja de estilo XLST (Extensible Stylesheet Language for Transformations, Lenguaje de hoja de estilos extensible para transformaciones).</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  La <xref:System.Xml.Xsl.XslTransform> clase está obsoleta en la versión 2.0 de Microsoft .NET Framework. La <xref:System.Xml.Xsl.XslCompiledTransform> clase es el nuevo procesador XSLT. Para obtener más información, consulte [mediante la clase XslCompiledTransform](~/docs/standard/data/xml/using-the-xslcompiledtransform-class.md) y [Migrating From the XslTransform Class](~/docs/standard/data/xml/migrating-from-the-xsltransform-class.md).  
  
 <xref:System.Xml.Xsl.XslTransform> admite la sintaxis de XSLT 1.0. La hoja de estilos XSLT debe utilizar el espacio de nombres `http://www.w3.org/1999/XSL/Transform`.  
  
 También se pueden agregar argumentos adicionales a la hoja de estilos mediante la <xref:System.Xml.Xsl.XsltArgumentList> clase. Esta clase contiene parámetros de entrada para los objetos de extensión y hoja de estilo que se pueden llamar desde la hoja de estilos.  
  
 Para transformar los datos XML:  
  
1.  Crear un <xref:System.Xml.Xsl.XslTransform> objeto.  
  
2.  Use la <xref:System.Xml.Xsl.XslTransform.Load%2A> método para cargar la hoja de estilos para la transformación. Este método tiene varias sobrecargas y puede cargar una hoja de estilos mediante una <xref:System.Xml.XmlReader>, <xref:System.Xml.XPath.XPathNavigator>, <xref:System.Xml.XPath.IXPathNavigable>, o una dirección URL con la ubicación del archivo.  
  
3.  Use la <xref:System.Xml.Xsl.XslTransform.Transform%2A> método para transformar los datos XML. Este método tiene varias sobrecargas y puede administrar los tipos diferentes de entrada y salida. También puede especificar un <xref:System.Xml.Xsl.XsltArgumentList> que contiene argumentos adicionales que se usará como entrada durante la transformación.  
  
 **Consideraciones de seguridad**  
  
 Si crea una aplicación que utiliza la clase <xref:System.Xml.Xsl.XslTransform>, debería conocer los siguientes puntos y sus implicaciones:  
  
-   Los objetos de extensión están habilitados de manera predeterminada. Si se pasa un objeto <xref:System.Xml.Xsl.XsltArgumentList> que contiene objetos de extensión al método <xref:System.Xml.Xsl.XslTransform.Transform%2A>, estos objetos se utilizan.  
  
-   Las hojas de estilos XLST pueden incluir referencias a otros archivos y bloques de scripts incrustados. Un usuario malintencionado puede aprovecharse de esta característica para proporcionarle datos u hojas de estilos que, cuando se ejecuta hará que el sistema los procese hasta que el equipo se quede sin recursos.  
  
-   Las aplicaciones XSLT que se ejecutan en un entorno de confianza mixto pueden sufrir suplantaciones de hoja de estilos. Por ejemplo, un usuario malintencionado podría cargar un objeto con una hoja de estilos perjudicial y pasárselo a otro usuario que, a continuación, llama al método <xref:System.Xml.Xsl.XslTransform.Transform%2A> y ejecuta la transformación.  
  
 Estos problemas de seguridad se pueden mitigar si no se aceptan <xref:System.Xml.Xsl.XslTransform> objetos, hojas de estilos XSLT o datos de origen XML de fuentes no confiables.  
  
 **Compatibilidad con scripting**  
  
 Esta clase admite scripts incrustados mediante la `msxsl:script` elemento.  
  
 En la versión 1.1 de .NET Framework, la evidencia de la hoja de estilos determina qué permisos se otorgan a los scripts incrustados.  
  
-   Si la hoja de estilos se cargó desde un identificador uniforme de recursos (URI), el URI se usa para crear la evidencia. Este tipo de evidencia incluye el URI junto con su sitio y zona.  
  
-   Si la hoja de estilos se cargó utilizando otro origen, la evidencia se puede proporcionar pasando un <xref:System.Security.Policy.Evidence?displayProperty=nameWithType> el objeto a la <xref:System.Xml.Xsl.XslTransform.Load%2A> método. En caso contrario, el ensamblado de secuencia de comandos tiene plena confianza.  
  
 Los llamadores de confianza parcial: `UnmanagedCode` permiso es necesario para compilar el script incrustado. `ControlEvidence` se requiere el permiso para proporcionar <xref:System.Security.Policy.Evidence> a la <xref:System.Xml.Xsl.XslTransform.Load%2A> método. Un <xref:System.Security.SecurityException> se produce si el llamador no tiene los permisos necesarios. Para obtener más información, vea <xref:System.Security.Permissions.SecurityPermission?displayProperty=nameWithType> y <xref:System.Security.Permissions.SecurityPermissionFlag?displayProperty=nameWithType>.  
  
 El `msxsl:script` elemento tiene los siguientes requisitos:  
  
-   El `msxsl:script` elemento pertenece a la `urn:schemas-microsoft-com:xslt` espacio de nombres. La hoja de estilos debe incluir la declaración de espacio de nombres `xmlns:msxsl=urn:schemas-microsoft-com:xslt`.  
  
-   El `msxsl:script` elemento puede incluir un `language` atributo que especifica el lenguaje de scripting para usar. El valor de la `language` atributo debe ser uno de los siguientes valores: C#, CSharp, VB, VisualBasic, JScript o JavaScript. Dado que el nombre del lenguaje no distingue mayúsculas de minúsculas, JavaScript y javascript son ambas válidas. Si un `language` atributo no se especifica, el valor predeterminado es JScript.  
  
-   El `msxsl:script` elemento debe incluir un `implements-prefix` atributo que contiene el prefijo que representa el espacio de nombres asociado al bloque de script. Este espacio de nombres debe estar definido dentro de la hoja de estilos. Una hoja de estilos puede incluir varios bloques de script que se agrupan por espacio de nombres. No se puede tener bloques de script con varios idiomas en el mismo espacio de nombres. Los bloques de script pueden llamar a una función definida en otro bloque de script, siempre que los bloques de script residan en el mismo espacio de nombres. El contenido de un bloque de script se analiza según las reglas y la sintaxis del lenguaje de scripting (proporcionado por el `language` atributo). Por ejemplo, si tuviera un bloque de scripts de C#, comentarios deberían ir precedidos por la `//` caracteres. Los comentarios deben estar contenido XML válido.  
  
 `Note` Se recomienda incluir los bloques de script en una sección CDATA.  
  
```  
<msxsl:script implements-prefix='xy' language='C#'>  
  <![CDATA[  
  // Add code here.  
  ]]]><![CDATA[]>  
</msxsl:script>  
```  
  
 Las funciones se pueden declarar dentro del elemento `msxsl:script`. La tabla siguiente muestra los espacios de nombres que se admiten de forma predeterminada.  
  
|Espacios de nombres admitidos|Descripción|  
|--------------------------|-----------------|  
|`System`|Clases del sistema.|  
|`System.Collection`|Clases de colección|  
|`System.Text`|Clases de control de texto.|  
|`System.Xml`|Clases XML básicas|  
|`System.Xml.Xsl`|Clases XSLT|  
|`System.Xml.XPath`|Clases XML Path Language (XPath).|  
  
 Los argumentos suministrados y los valores devueltos definidos en las funciones del script deben ser uno de los tipos de World Wide Web Consortium (W3C) que se enumeran a continuación. La tabla siguiente detalla la asignación entre los tipos de W3C XPath o XSLT y las clases de .NET Framework correspondientes.  
  
|Tipo W3C|Clase equivalente de .NET|  
|--------------|---------------------------|  
|Cadena (XPath)|`System.String`|  
|Valor booleano (XPath)|`System.Boolean`|  
|Número (XPath)|`System.Double`|  
|Fragmento del árbol de resultados (XSLT)|`System.Xml.XPath.XPathNavigator`|  
|Conjunto de nodos (XPath)|`System.Xml.XPath.XPathNodeIterator`|  
  
 Si la función de script utiliza uno de los siguientes tipos numéricos: Int16, UInt16, Int32, UInt32, Int64, UInt64, Single o Decimal, estos tipos se convierten en Double, que se asigna al número de tipo W3C XPath.  
  
 Se produce una excepción cuando se llama a una función que no se puede convertir el resultado de argumento para uno de los tipos necesarios.  
  
> [!NOTE]
>  `msxsl:script` y `msxsl:node-list` son las únicas funciones desde el `urn:schemas-microsoft-com:xslt` espacio de nombres que son compatibles con el <xref:System.Xml.Xsl.XslTransform> clase.  
  
 <xref:System.Xml.Xsl.XslTransform> tiene la capacidad de utilizar código de common language runtime (CLR) como mecanismo de extensión. Esto se consigue pasando una instancia de una clase para la <xref:System.Xml.Xsl.XslTransform> clase y llamar a sus métodos públicos desde una hoja de estilos XSLT. Métodos que se definen con el `params` palabra clave, lo que permite un número indeterminado de parámetros que se pasan, no funcionan correctamente en este escenario. Vea [params](~/docs/csharp/language-reference/keywords/params.md) para obtener más detalles.  
  
 Para obtener más información, consulte [transformaciones XSLT con la clase XslTransform](~/docs/standard/data/xml/xslt-transformations-with-the-xsltransform-class.md).  
  
   
  
## Examples  
 En el ejemplo siguiente se transforma el documento XML especificado y envía el resultado a la consola.  
  
 [!code-csharp[Classic WebData XslTransform Example#1](~/samples/snippets/csharp/VS_Snippets_Data/Classic WebData XslTransform Example/CS/source.cs#1)]
 [!code-vb[Classic WebData XslTransform Example#1](~/samples/snippets/visualbasic/VS_Snippets_Data/Classic WebData XslTransform Example/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <threadsafe>
      <see cref="T:System.Xml.Xsl.XslTransform" /> los objetos son subprocesos solo para las operaciones de transformación. No se garantizan que otras operaciones de subprocesos. Debe asegurarse de que no se llama a ningún otro método en el objeto durante las operaciones de carga.</threadsafe>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XslTransform ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Xsl.XslTransform.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XslTransform();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Xml.Xsl.XslTransform" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Load">
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Carga la hoja de estilos XSLT, incluidas las hojas de estilos a las que se hace referencia en los elementos <see langword="xsl:include" /> e <see langword="xsl:import" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  La <xref:System.Xml.Xsl.XslTransform> clase está obsoleta en la versión 2.0 de .NET Framework. La <xref:System.Xml.Xsl.XslCompiledTransform> clase es el nuevo procesador XSLT. Para obtener más información, consulte [mediante la clase XslCompiledTransform](~/docs/standard/data/xml/using-the-xslcompiledtransform-class.md) y [Migrating From the XslTransform Class](~/docs/standard/data/xml/migrating-from-the-xsltransform-class.md).  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="Load">
      <MemberSignature Language="C#" Value="public void Load (string url);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Load(string url) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Xsl.XslTransform.Load(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Load (url As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Load(System::String ^ url);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="url" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="url">La dirección URL que especifica la hoja de estilos XSLT a cargar.</param>
        <summary>Carga la hoja de estilos XSLT especificada por una dirección URL.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  La <xref:System.Xml.Xsl.XslTransform> clase está obsoleta en la versión 2.0 de .NET Framework. La <xref:System.Xml.Xsl.XslCompiledTransform> clase es el nuevo procesador XSLT. Para obtener más información, consulte [mediante la clase XslCompiledTransform](~/docs/standard/data/xml/using-the-xslcompiledtransform-class.md) y [Migrating From the XslTransform Class](~/docs/standard/data/xml/migrating-from-the-xsltransform-class.md).  
  
 <xref:System.Xml.Xsl.XslTransform> admite la sintaxis de XSLT 1.0. La hoja de estilos XSLT debe incluir la declaración de espacio de nombres `xmlns:xsl="http://www.w3.org/1999/XSL/Transform"`.  
  
 Este método carga la hoja de estilos XSLT, incluidas las hojas de estilos que se hace referencia en `xsl:include` y `xsl:import` elementos. Recursos externos se resuelven utilizando un <xref:System.Xml.XmlUrlResolver> sin credenciales de usuario. Si las hojas de estilo se encuentra en un recurso de red que requiere autenticación, utilice la sobrecarga que toma un <xref:System.Xml.XmlResolver> como uno de sus argumentos y especifique un <xref:System.Xml.XmlResolver> con las credenciales necesarias.  
  
 Si la hoja de estilos contiene scripts incrustados, la secuencia de comandos se compila en un ensamblado. El URI de la hoja de estilos se utiliza para crear la evidencia, que se aplica al ensamblado. Para problemas con el <xref:System.Xml.Xsl.XslTransform.Load%2A> método y hojas de estilo con scripts incrustados, vea el artículo Q316755 de Microsoft Knowledge Base en http://support.microsoft.com.  
  
> [!NOTE]
>  Si el llamador no tiene `UnmanagedCode` permiso, el script incrustado no se compila y un <xref:System.Security.SecurityException> se produce. Para obtener más información, vea <xref:System.Security.Permissions.SecurityPermission> y <xref:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode?displayProperty=nameWithType>.  
  
   
  
## Examples  
 En el siguiente ejemplo se transforma un documento XML en un documento HTML. Muestra el ISBN, el título y el precio de cada libro en una tabla.  
  
 [!code-cpp[Classic WebData XslTransform.Transform7 Example#1](~/samples/snippets/cpp/VS_Snippets_Data/Classic WebData XslTransform.Transform7 Example/CPP/source.cpp#1)]
 [!code-csharp[Classic WebData XslTransform.Transform7 Example#1](~/samples/snippets/csharp/VS_Snippets_Data/Classic WebData XslTransform.Transform7 Example/CS/source.cs#1)]
 [!code-vb[Classic WebData XslTransform.Transform7 Example#1](~/samples/snippets/visualbasic/VS_Snippets_Data/Classic WebData XslTransform.Transform7 Example/VB/source.vb#1)]  
  
 En el ejemplo se utilizan los dos archivos de entrada siguientes.  
  
 `books.xml`  
  
 [!code-xml[Classic WebData XslTransform.Transform7 Example#2](~/samples/snippets/xml/VS_Snippets_Data/Classic WebData XslTransform.Transform7 Example/XML/books.xml#2)]  
  
 `output.xsl`  
  
 [!code-xml[Classic WebData XslTransform.Transform7 Example#3](~/samples/snippets/xml/VS_Snippets_Data/Classic WebData XslTransform.Transform7 Example/XML/output.xsl#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Xml.Xsl.XsltCompileException">El recurso cargado no es una hoja de estilos válida.</exception>
        <exception cref="T:System.Security.SecurityException">La hoja de estilos contiene un script incrustado y el llamador no dispone de un permiso <see langword="UnmanagedCode" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="Load">
      <MemberSignature Language="C#" Value="public void Load (System.Xml.XmlReader stylesheet);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Load(class System.Xml.XmlReader stylesheet) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Xsl.XslTransform.Load(System.Xml.XmlReader)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Load (stylesheet As XmlReader)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Load(System::Xml::XmlReader ^ stylesheet);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stylesheet" Type="System.Xml.XmlReader" />
      </Parameters>
      <Docs>
        <param name="stylesheet">Objeto <see cref="T:System.Xml.XmlReader" /> que contiene la hoja de estilos XSLT.</param>
        <summary>Carga la hoja de estilos XSLT incluida en el objeto <see cref="T:System.Xml.XmlReader" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  La <xref:System.Xml.Xsl.XslTransform> clase está obsoleta en la versión 2.0 de .NET Framework. La <xref:System.Xml.Xsl.XslCompiledTransform> clase es el nuevo procesador XSLT. Para obtener más información, consulte [mediante la clase XslCompiledTransform](~/docs/standard/data/xml/using-the-xslcompiledtransform-class.md) y [Migrating From the XslTransform Class](~/docs/standard/data/xml/migrating-from-the-xsltransform-class.md).  
  
 <xref:System.Xml.Xsl.XslTransform> admite la sintaxis de XSLT 1.0. La hoja de estilos XSLT debe incluir la declaración de espacio de nombres `xmlns:xsl= http://www.w3.org/1999/XSL/Transform`.  
  
 Este método carga la hoja de estilos XSLT, incluidas las hojas de estilos que se hace referencia en `xsl:include` y `xsl:import` elementos. Recursos externos se resuelven utilizando un <xref:System.Xml.XmlUrlResolver> sin credenciales de usuario. Si las hojas de estilo se encuentra en un recurso de red que requiere autenticación, utilice la sobrecarga que toma un <xref:System.Xml.XmlResolver> como uno de sus argumentos y especifique un <xref:System.Xml.XmlResolver> con las credenciales necesarias.  
  
 La hoja de estilos se carga desde el nodo actual de la <xref:System.Xml.XmlReader> a través de todos sus nodos secundarios. Esto le permite utilizar una parte de un documento como la hoja de estilos. Después de la <xref:System.Xml.Xsl.XslTransform.Load%2A> devuelve del método, el <xref:System.Xml.XmlReader> se coloca en el siguiente nodo después del final de la hoja de estilos. Si se llega al final del documento, <xref:System.Xml.XmlReader> se sitúa al final del archivo.  
  
 Si la hoja de estilos contiene entidades, debe especificar un <xref:System.Xml.XmlReader> que pueda resolver entidades (<xref:System.Xml.XmlReader.CanResolveEntity%2A?displayProperty=nameWithType> devuelve `true`). En este caso, un <xref:System.Xml.XmlValidatingReader> puede utilizarse.  
  
 Si la hoja de estilos contiene scripts incrustados, la secuencia de comandos se compila en un ensamblado. El ensamblado tiene plena confianza. La práctica recomendada consiste en proporcionar evidencia mediante el <xref:System.Xml.Xsl.XslTransform.Load%28System.Xml.XmlReader%2CSystem.Xml.XmlResolver%2CSystem.Security.Policy.Evidence%29> método. Para problemas con el <xref:System.Xml.Xsl.XslTransform.Load%2A> método y hojas de estilo con scripts incrustados, vea el artículo Q316755 de Microsoft Knowledge Base en http://support.microsoft.com.  
  
> [!NOTE]
>  Si el llamador no tiene `UnmanagedCode` permiso, el script incrustado no se compila y un <xref:System.Security.SecurityException> se produce. Para obtener más información, vea <xref:System.Security.Permissions.SecurityPermission> y <xref:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode?displayProperty=nameWithType>.  
  
   
  
## Examples  
 El siguiente ejemplo transforma un archivo XML ordenando todos los libros por título.  
  
 [!code-cpp[XslTransform.Load3#1](~/samples/snippets/cpp/VS_Snippets_Data/XslTransform.Load3/CPP/trans3.cpp#1)]
 [!code-csharp[XslTransform.Load3#1](~/samples/snippets/csharp/VS_Snippets_Data/XslTransform.Load3/CS/trans3.cs#1)]
 [!code-vb[XslTransform.Load3#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XslTransform.Load3/VB/trans3.vb#1)]  
  
 El ejemplo utiliza los siguientes archivos de datos como entrada.  
  
 `books.xml`  
  
 [!code-xml[XslTransform.Load3#2](~/samples/snippets/xml/VS_Snippets_Data/XslTransform.Load3/XML/books.xml#2)]  
  
 `titles.xsl`  
  
 [!code-xml[XslTransform.Load3#3](~/samples/snippets/xml/VS_Snippets_Data/XslTransform.Load3/XML/titles.xsl#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Xml.Xsl.XsltCompileException">El nodo actual no cumple los requisitos de una hoja de estilos válida.</exception>
        <exception cref="T:System.Security.SecurityException">La hoja de estilos contiene scripts incrustados y el llamador no dispone de un permiso <see langword="UnmanagedCode" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="Load">
      <MemberSignature Language="C#" Value="public void Load (System.Xml.XPath.IXPathNavigable stylesheet);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Load(class System.Xml.XPath.IXPathNavigable stylesheet) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Xsl.XslTransform.Load(System.Xml.XPath.IXPathNavigable)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Load (stylesheet As IXPathNavigable)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Load(System::Xml::XPath::IXPathNavigable ^ stylesheet);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stylesheet" Type="System.Xml.XPath.IXPathNavigable" />
      </Parameters>
      <Docs>
        <param name="stylesheet">Objeto que implementa la interfaz <see cref="T:System.Xml.XPath.IXPathNavigable" />. En .NET Framework, puede ser un objeto <see cref="T:System.Xml.XmlNode" /> (normalmente, un objeto <see cref="T:System.Xml.XmlDocument" />) o un objeto <see cref="T:System.Xml.XPath.XPathDocument" /> que contiene la hoja de estilos XSLT.</param>
        <summary>Carga la hoja de estilos XSLT incluida en el objeto <see cref="T:System.Xml.XPath.IXPathNavigable" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  La <xref:System.Xml.Xsl.XslTransform> clase está obsoleta en la versión 2.0 de .NET Framework. La <xref:System.Xml.Xsl.XslCompiledTransform> clase es el nuevo procesador XSLT. Para obtener más información, consulte [mediante la clase XslCompiledTransform](~/docs/standard/data/xml/using-the-xslcompiledtransform-class.md) y [Migrating From the XslTransform Class](~/docs/standard/data/xml/migrating-from-the-xsltransform-class.md).  
  
 <xref:System.Xml.Xsl.XslTransform> admite la sintaxis de XSLT 1.0. La hoja de estilos XSLT debe incluir la declaración de espacio de nombres `xmlns:xsl= http://www.w3.org/1999/XSL/Transform`.  
  
 Este método carga la hoja de estilos XSLT, incluidas las hojas de estilos que se hace referencia en `xsl:include` y `xsl:import` elementos. Recursos externos se resuelven utilizando un <xref:System.Xml.XmlUrlResolver> sin credenciales de usuario. Si las hojas de estilo se encuentra en un recurso de red que requiere autenticación, utilice la sobrecarga que toma un <xref:System.Xml.XmlResolver> como uno de sus argumentos y especifique un <xref:System.Xml.XmlResolver> con las credenciales necesarias.  
  
 Si la hoja de estilos contiene scripts incrustados, la secuencia de comandos se compila en un ensamblado. El ensamblado tiene plena confianza. La práctica recomendada consiste en proporcionar evidencia mediante el <xref:System.Xml.Xsl.XslTransform.Load%28System.Xml.XPath.IXPathNavigable%2CSystem.Xml.XmlResolver%2CSystem.Security.Policy.Evidence%29> método. Para problemas con el <xref:System.Xml.Xsl.XslTransform.Load%2A> método y hojas de estilo con scripts incrustados, vea el artículo Q316755 de Microsoft Knowledge Base en http://support.microsoft.com.  
  
> [!NOTE]
>  Si el llamador no tiene `UnmanagedCode` permiso, el script incrustado no se compila y un <xref:System.Security.SecurityException> se produce. Para obtener más información, vea <xref:System.Security.Permissions.SecurityPermission> y <xref:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode?displayProperty=nameWithType>.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Xml.Xsl.XsltCompileException">El recurso cargado no es una hoja de estilos válida.</exception>
        <exception cref="T:System.Security.SecurityException">La hoja de estilos contiene scripts incrustados y el llamador no dispone de un permiso <see langword="UnmanagedCode" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="Load">
      <MemberSignature Language="C#" Value="public void Load (System.Xml.XPath.XPathNavigator stylesheet);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Load(class System.Xml.XPath.XPathNavigator stylesheet) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Xsl.XslTransform.Load(System.Xml.XPath.XPathNavigator)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Load (stylesheet As XPathNavigator)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Load(System::Xml::XPath::XPathNavigator ^ stylesheet);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stylesheet" Type="System.Xml.XPath.XPathNavigator" />
      </Parameters>
      <Docs>
        <param name="stylesheet">Objeto <see cref="T:System.Xml.XPath.XPathNavigator" /> que contiene la hoja de estilos XSLT.</param>
        <summary>Carga la hoja de estilos XSLT incluida en el objeto <see cref="T:System.Xml.XPath.XPathNavigator" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  La <xref:System.Xml.Xsl.XslTransform> clase está obsoleta en la versión 2.0 de .NET Framework. La <xref:System.Xml.Xsl.XslCompiledTransform> clase es el nuevo procesador XSLT. Para obtener más información, consulte [mediante la clase XslCompiledTransform](~/docs/standard/data/xml/using-the-xslcompiledtransform-class.md) y [Migrating From the XslTransform Class](~/docs/standard/data/xml/migrating-from-the-xsltransform-class.md).  
  
 <xref:System.Xml.Xsl.XslTransform> admite la sintaxis de XSLT 1.0. La hoja de estilos XSLT debe incluir la declaración de espacio de nombres `xmlns:xsl= http://www.w3.org/1999/XSL/Transform`.  
  
 Este método carga la hoja de estilos XSLT, incluidas las hojas de estilos que se hace referencia en `xsl:include` y `xsl:import` elementos. Recursos externos se resuelven utilizando un <xref:System.Xml.XmlUrlResolver> sin credenciales de usuario. Si las hojas de estilo se encuentra en un recurso de red que requiere autenticación, utilice la sobrecarga que toma un <xref:System.Xml.XmlResolver> como uno de sus argumentos y especifique un <xref:System.Xml.XmlResolver> con las credenciales necesarias.  
  
 La hoja de estilos se carga desde la posición actual de la <xref:System.Xml.XPath.XPathNavigator>. Para usar solo una parte del documento cargado como la hoja de estilos, navegue hasta el nodo correspondiente al principio de la hoja de estilos. Después de la <xref:System.Xml.Xsl.XslTransform.Load%2A> devuelve del método, el <xref:System.Xml.XPath.XPathNavigator> está situado al principio de la hoja de estilos (en el `xsl:style sheet` nodo).  
  
 Si la hoja de estilos contiene scripts incrustados, la secuencia de comandos se compila en un ensamblado. El ensamblado tiene plena confianza. La práctica recomendada consiste en proporcionar evidencia mediante el <xref:System.Xml.Xsl.XslTransform.Load%28System.Xml.XPath.XPathNavigator%2CSystem.Xml.XmlResolver%2CSystem.Security.Policy.Evidence%29> método. Para problemas con el <xref:System.Xml.Xsl.XslTransform.Load%2A> método y hojas de estilo con scripts incrustados, vea el artículo Q316755 de Microsoft Knowledge Base en http://support.microsoft.com.  
  
> [!NOTE]
>  Si el llamador no tiene `UnmanagedCode` permiso, el script incrustado no se compila y un <xref:System.Security.SecurityException> se produce. Para obtener más información, vea <xref:System.Security.Permissions.SecurityPermission> y <xref:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode?displayProperty=nameWithType>.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Xml.Xsl.XsltCompileException">El nodo actual no cumple los requisitos de una hoja de estilos válida.</exception>
        <exception cref="T:System.Security.SecurityException">La hoja de estilos contiene scripts incrustados y el llamador no dispone de un permiso <see langword="UnmanagedCode" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="Load">
      <MemberSignature Language="C#" Value="public void Load (string url, System.Xml.XmlResolver resolver);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Load(string url, class System.Xml.XmlResolver resolver) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Xsl.XslTransform.Load(System.String,System.Xml.XmlResolver)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Load (url As String, resolver As XmlResolver)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Load(System::String ^ url, System::Xml::XmlResolver ^ resolver);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="url" Type="System.String" />
        <Parameter Name="resolver" Type="System.Xml.XmlResolver" />
      </Parameters>
      <Docs>
        <param name="url">La dirección URL que especifica la hoja de estilos XSLT a cargar.</param>
        <param name="resolver">
          <see cref="T:System.Xml.XmlResolver" /> que se usa para cargar la hoja de estilos y cualquier hoja u hojas de estilos a las que se haga referencia en los elementos <c>xsl:import</c> y <c>xsl:include</c>.  
  
 Si es <see langword="null" />, se utiliza un <see cref="T:System.Xml.XmlUrlResolver" /> predeterminado sin credenciales del usuario para abrir la hoja de estilos. El objeto <see cref="T:System.Xml.XmlUrlResolver" /> predeterminado no se usa para resolver los recursos externos de la hoja de estilos, por lo que los elementos <c>xsl:import</c> y <c>xsl:include</c> quedan sin resolver.  
  
 <see cref="T:System.Xml.XmlResolver" /> no se almacena en caché una vez finalizado el método <see cref="M:System.Xml.Xsl.XslTransform.Load(System.String,System.Xml.XmlResolver)" />.</param>
        <summary>Carga la hoja de estilos XSLT especificada por una dirección URL.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  La <xref:System.Xml.Xsl.XslTransform> clase está obsoleta en la versión 2.0 de .NET Framework. La <xref:System.Xml.Xsl.XslCompiledTransform> clase es el nuevo procesador XSLT. Para obtener más información, consulte [mediante la clase XslCompiledTransform](~/docs/standard/data/xml/using-the-xslcompiledtransform-class.md) y [Migrating From the XslTransform Class](~/docs/standard/data/xml/migrating-from-the-xsltransform-class.md).  
  
 <xref:System.Xml.Xsl.XslTransform> admite la sintaxis de XSLT 1.0. La hoja de estilos XSLT debe incluir la declaración de espacio de nombres `xmlns:xsl= http://www.w3.org/1999/XSL/Transform`.  
  
 Si la hoja de estilos contiene scripts incrustados, la secuencia de comandos se compila en un ensamblado. El URI de la hoja de estilos se utiliza para crear la evidencia, que se aplica al ensamblado. Para problemas con el <xref:System.Xml.Xsl.XslTransform.Load%2A> método y hojas de estilo con scripts incrustados, vea el artículo Q316755 de Microsoft Knowledge Base en http://support.microsoft.com.  
  
> [!NOTE]
>  Si el llamador no tiene `UnmanagedCode` permiso, el script incrustado no se compila y un <xref:System.Security.SecurityException> se produce. Para obtener más información, vea <xref:System.Security.Permissions.SecurityPermission> y <xref:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode?displayProperty=nameWithType>.  
  
   
  
## Examples  
 En el siguiente ejemplo se transforma un documento XML en un documento HTML. El ejemplo carga una hoja de estilos XSLT que contiene un `xsl:include` elemento hace referencia a otra hoja de estilos. Un <xref:System.Xml.XmlUrlResolver> se pasa a la <xref:System.Xml.Xsl.XslTransform.Load%2A> método que define las credenciales necesarias para tener acceso al recurso de red para la hoja de estilos incluidas.  
  
 [!code-csharp[XslTransform.Load2#1](~/samples/snippets/csharp/VS_Snippets_Data/XslTransform.Load2/CS/trans2.cs#1)]
 [!code-vb[XslTransform.Load2#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XslTransform.Load2/VB/trans2.vb#1)]  
  
 El ejemplo utiliza los siguientes archivos de datos como entrada.  
  
 `books.xml`  
  
 [!code-xml[XslTransform.Load2#2](~/samples/snippets/xml/VS_Snippets_Data/XslTransform.Load2/XML/books.xml#2)]  
  
 `sort.xsl`  
  
 [!code-xml[XslTransform.Load2#3](~/samples/snippets/xml/VS_Snippets_Data/XslTransform.Load2/XML/sort.xsl#3)]  
  
 `includefile.xsl`  
  
 [!code-xml[XslTransform.Load2#4](~/samples/snippets/xml/VS_Snippets_Data/XslTransform.Load2/XML/includefile.xsl#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Xml.Xsl.XsltCompileException">El recurso cargado no es una hoja de estilos válida.</exception>
        <exception cref="T:System.Security.SecurityException">La hoja de estilos contiene un script incrustado y el llamador no dispone de un permiso <see langword="UnmanagedCode" />.</exception>
        <altmember cref="P:System.Xml.XmlResolver.Credentials" />
        <altmember cref="T:System.Net.CredentialCache" />
        <altmember cref="T:System.Net.NetworkCredential" />
        <altmember cref="T:System.Xml.XmlSecureResolver" />
      </Docs>
    </Member>
    <Member MemberName="Load">
      <MemberSignature Language="C#" Value="public void Load (System.Xml.XmlReader stylesheet, System.Xml.XmlResolver resolver);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Load(class System.Xml.XmlReader stylesheet, class System.Xml.XmlResolver resolver) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Xsl.XslTransform.Load(System.Xml.XmlReader,System.Xml.XmlResolver)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Load (stylesheet As XmlReader, resolver As XmlResolver)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Load(System::Xml::XmlReader ^ stylesheet, System::Xml::XmlResolver ^ resolver);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stylesheet" Type="System.Xml.XmlReader" />
        <Parameter Name="resolver" Type="System.Xml.XmlResolver" />
      </Parameters>
      <Docs>
        <param name="stylesheet">Objeto <see cref="T:System.Xml.XmlReader" /> que contiene la hoja de estilos XSLT.</param>
        <param name="resolver">
          <see cref="T:System.Xml.XmlResolver" /> se usa para cargar la hoja de estilos y cualquier hoja u hojas de estilos a las que se haga referencia en los elementos <c>xsl:import</c> y <c>xsl:include</c>. Si es <see langword="null" />, los recursos externos no se resuelven.  
  
 <see cref="T:System.Xml.XmlResolver" /> no se almacena en caché una vez finalizado el método <see cref="M:System.Xml.Xsl.XslTransform.Load(System.Xml.XmlReader,System.Xml.XmlResolver)" />.</param>
        <summary>Carga la hoja de estilos XSLT incluida en el objeto <see cref="T:System.Xml.XmlReader" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  La <xref:System.Xml.Xsl.XslTransform> clase está obsoleta en la versión 2.0 de .NET Framework. La <xref:System.Xml.Xsl.XslCompiledTransform> clase es el nuevo procesador XSLT. Para obtener más información, consulte [mediante la clase XslCompiledTransform](~/docs/standard/data/xml/using-the-xslcompiledtransform-class.md) y [Migrating From the XslTransform Class](~/docs/standard/data/xml/migrating-from-the-xsltransform-class.md).  
  
 <xref:System.Xml.Xsl.XslTransform> admite la sintaxis de XSLT 1.0. La hoja de estilos XSLT debe incluir la declaración de espacio de nombres `xmlns:xsl= http://www.w3.org/1999/XSL/Transform`.  
  
 Este método carga la hoja de estilos XSLT, incluidas las hojas de estilos que se hace referencia en `xsl:include` y `xsl:import` elementos. La hoja de estilos se carga desde el nodo actual de la <xref:System.Xml.XmlReader> a través de todos sus nodos secundarios. Esto le permite utilizar una parte de un documento como la hoja de estilos.  
  
 Después de la <xref:System.Xml.Xsl.XslTransform.Load%2A> devuelve del método, el <xref:System.Xml.XmlReader> se coloca en el siguiente nodo después del final de la hoja de estilos. Si se llega al final del documento, <xref:System.Xml.XmlReader> se sitúa al final del archivo.  
  
 Si la hoja de estilos contiene entidades, debe especificar un <xref:System.Xml.XmlReader> que pueda resolver entidades (<xref:System.Xml.XmlReader.CanResolveEntity%2A?displayProperty=nameWithType> devuelve `true`). En este caso, un <xref:System.Xml.XmlValidatingReader> puede utilizarse.  
  
 Si la hoja de estilos contiene scripts incrustados, la secuencia de comandos se compila en un ensamblado. El ensamblado tiene plena confianza. La práctica recomendada consiste en proporcionar evidencia mediante el <xref:System.Xml.Xsl.XslTransform.Load%28System.Xml.XmlReader%2CSystem.Xml.XmlResolver%2CSystem.Security.Policy.Evidence%29> método. Para problemas con el <xref:System.Xml.Xsl.XslTransform.Load%2A> método y hojas de estilo con scripts incrustados vea el artículo Q316755 de Microsoft Knowledge Base en http://support.microsoft.com.  
  
> [!NOTE]
>  Si el llamador no tiene `UnmanagedCode` permiso, el script incrustado no se compila y un <xref:System.Security.SecurityException> se produce. Para obtener más información, vea <xref:System.Security.Permissions.SecurityPermission> y <xref:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode?displayProperty=nameWithType>.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Xml.Xsl.XsltCompileException">El nodo actual no cumple los requisitos de una hoja de estilos válida.</exception>
        <exception cref="T:System.Security.SecurityException">La hoja de estilos contiene scripts incrustados y el llamador no dispone de un permiso <see langword="UnmanagedCode" />.</exception>
        <altmember cref="P:System.Xml.XmlResolver.Credentials" />
        <altmember cref="T:System.Net.CredentialCache" />
        <altmember cref="T:System.Net.NetworkCredential" />
      </Docs>
    </Member>
    <Member MemberName="Load">
      <MemberSignature Language="C#" Value="public void Load (System.Xml.XPath.IXPathNavigable stylesheet, System.Xml.XmlResolver resolver);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Load(class System.Xml.XPath.IXPathNavigable stylesheet, class System.Xml.XmlResolver resolver) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Xsl.XslTransform.Load(System.Xml.XPath.IXPathNavigable,System.Xml.XmlResolver)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Load (stylesheet As IXPathNavigable, resolver As XmlResolver)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Load(System::Xml::XPath::IXPathNavigable ^ stylesheet, System::Xml::XmlResolver ^ resolver);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stylesheet" Type="System.Xml.XPath.IXPathNavigable" />
        <Parameter Name="resolver" Type="System.Xml.XmlResolver" />
      </Parameters>
      <Docs>
        <param name="stylesheet">Objeto que implementa la interfaz <see cref="T:System.Xml.XPath.IXPathNavigable" />. En .NET Framework, puede ser un objeto <see cref="T:System.Xml.XmlNode" /> (normalmente, un objeto <see cref="T:System.Xml.XmlDocument" />) o un objeto <see cref="T:System.Xml.XPath.XPathDocument" /> que contiene la hoja de estilos XSLT.</param>
        <param name="resolver">
          <see cref="T:System.Xml.XmlResolver" /> se usa para cargar la hoja de estilos y cualquier hoja u hojas de estilos a las que se haga referencia en los elementos <c>xsl:import</c> y <c>xsl:include</c>. Si es <see langword="null" />, los recursos externos no se resuelven.  
  
 <see cref="T:System.Xml.XmlResolver" /> no se almacena en caché una vez finalizado el método <see cref="Overload:System.Xml.Xsl.XslTransform.Load" />.</param>
        <summary>Carga la hoja de estilos XSLT incluida en el objeto <see cref="T:System.Xml.XPath.IXPathNavigable" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  La <xref:System.Xml.Xsl.XslTransform> clase está obsoleta en la versión 2.0 de .NET Framework. La <xref:System.Xml.Xsl.XslCompiledTransform> clase es el nuevo procesador XSLT. Para obtener más información, consulte [mediante la clase XslCompiledTransform](~/docs/standard/data/xml/using-the-xslcompiledtransform-class.md) y [Migrating From the XslTransform Class](~/docs/standard/data/xml/migrating-from-the-xsltransform-class.md).  
  
 <xref:System.Xml.Xsl.XslTransform> admite la sintaxis de XSLT 1.0. La hoja de estilos XSLT debe incluir la declaración de espacio de nombres `xmlns:xsl= http://www.w3.org/1999/XSL/Transform`.  
  
 Si la hoja de estilos contiene scripts incrustados, la secuencia de comandos se compila en un ensamblado. El ensamblado tiene plena confianza. La práctica recomendada consiste en proporcionar evidencia mediante el <xref:System.Xml.Xsl.XslTransform.Load%28System.Xml.XPath.IXPathNavigable%2CSystem.Xml.XmlResolver%2CSystem.Security.Policy.Evidence%29> método. Para problemas con el <xref:System.Xml.Xsl.XslTransform.Load%2A> método y hojas de estilo con scripts incrustados, vea el artículo Q316755 de Microsoft Knowledge Base en http://support.microsoft.com.  
  
> [!NOTE]
>  Si el llamador no tiene `UnmanagedCode` permiso, el script incrustado no se compila y un <xref:System.Security.SecurityException> se produce. Para obtener más información, vea <xref:System.Security.Permissions.SecurityPermission> y <xref:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode?displayProperty=nameWithType>.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Xml.Xsl.XsltCompileException">El recurso cargado no es una hoja de estilos válida.</exception>
        <exception cref="T:System.Security.SecurityException">La hoja de estilos contiene scripts incrustados y el llamador no dispone de un permiso <see langword="UnmanagedCode" />.</exception>
        <altmember cref="P:System.Xml.XmlResolver.Credentials" />
        <altmember cref="T:System.Net.CredentialCache" />
        <altmember cref="T:System.Net.NetworkCredential" />
      </Docs>
    </Member>
    <Member MemberName="Load">
      <MemberSignature Language="C#" Value="public void Load (System.Xml.XPath.XPathNavigator stylesheet, System.Xml.XmlResolver resolver);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Load(class System.Xml.XPath.XPathNavigator stylesheet, class System.Xml.XmlResolver resolver) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Xsl.XslTransform.Load(System.Xml.XPath.XPathNavigator,System.Xml.XmlResolver)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Load (stylesheet As XPathNavigator, resolver As XmlResolver)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Load(System::Xml::XPath::XPathNavigator ^ stylesheet, System::Xml::XmlResolver ^ resolver);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stylesheet" Type="System.Xml.XPath.XPathNavigator" />
        <Parameter Name="resolver" Type="System.Xml.XmlResolver" />
      </Parameters>
      <Docs>
        <param name="stylesheet">Objeto <see cref="T:System.Xml.XPath.XPathNavigator" /> que contiene la hoja de estilos XSLT.</param>
        <param name="resolver">
          <see cref="T:System.Xml.XmlResolver" /> se usa para cargar la hoja de estilos y cualquier hoja u hojas de estilos a las que se haga referencia en los elementos <c>xsl:import</c> y <c>xsl:include</c>. Si es <see langword="null" />, los recursos externos no se resuelven.  
  
 <see cref="T:System.Xml.XmlResolver" /> no se almacena en caché una vez finalizado el método <see cref="Overload:System.Xml.Xsl.XslTransform.Load" />.</param>
        <summary>Carga la hoja de estilos XSLT incluida en el objeto <see cref="T:System.Xml.XPath.XPathNavigator" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  La <xref:System.Xml.Xsl.XslTransform> clase está obsoleta en la versión 2.0 de .NET Framework. La <xref:System.Xml.Xsl.XslCompiledTransform> clase es el nuevo procesador XSLT. Para obtener más información, consulte [mediante la clase XslCompiledTransform](~/docs/standard/data/xml/using-the-xslcompiledtransform-class.md) y [Migrating From the XslTransform Class](~/docs/standard/data/xml/migrating-from-the-xsltransform-class.md).  
  
 <xref:System.Xml.Xsl.XslTransform> admite la sintaxis de XSLT 1.0. La hoja de estilos XSLT debe incluir la declaración de espacio de nombres `xmlns:xsl= http://www.w3.org/1999/XSL/Transform`.  
  
 La hoja de estilos se carga desde la posición actual de la <xref:System.Xml.XPath.XPathNavigator>. Para usar una parte del documento cargado como la hoja de estilos, navegue hasta el nodo correspondiente al principio de la hoja de estilos. Después de la <xref:System.Xml.Xsl.XslTransform.Load%2A> devuelve del método, el <xref:System.Xml.XPath.XPathNavigator> está situado al principio de la hoja de estilos (en el `xsl:style sheet` nodo).  
  
 Si la hoja de estilos contiene scripts incrustados, la secuencia de comandos se compila en un ensamblado. El ensamblado tiene plena confianza. La práctica recomendada consiste en proporcionar evidencia mediante el <xref:System.Xml.Xsl.XslTransform.Load%28System.Xml.XPath.XPathNavigator%2CSystem.Xml.XmlResolver%2CSystem.Security.Policy.Evidence%29>. Para problemas con el <xref:System.Xml.Xsl.XslTransform.Load%2A> método y hojas de estilo con scripts incrustados, vea el artículo Q316755 de Microsoft Knowledge Base en http://support.microsoft.com.  
  
> [!NOTE]
>  Si el llamador no tiene `UnmanagedCode` permiso, el script incrustado no se compila y un <xref:System.Security.SecurityException> se produce. Para obtener más información, vea <xref:System.Security.Permissions.SecurityPermission> y <xref:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode?displayProperty=nameWithType>.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Xml.Xsl.XsltCompileException">El nodo actual no cumple los requisitos de una hoja de estilos válida.</exception>
        <exception cref="T:System.Security.SecurityException">La hoja de estilos contiene scripts incrustados y el llamador no dispone de un permiso <see langword="UnmanagedCode" />.</exception>
        <altmember cref="P:System.Xml.XmlResolver.Credentials" />
        <altmember cref="T:System.Net.CredentialCache" />
        <altmember cref="T:System.Net.NetworkCredential" />
      </Docs>
    </Member>
    <Member MemberName="Load">
      <MemberSignature Language="C#" Value="public void Load (System.Xml.XmlReader stylesheet, System.Xml.XmlResolver resolver, System.Security.Policy.Evidence evidence);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Load(class System.Xml.XmlReader stylesheet, class System.Xml.XmlResolver resolver, class System.Security.Policy.Evidence evidence) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Xsl.XslTransform.Load(System.Xml.XmlReader,System.Xml.XmlResolver,System.Security.Policy.Evidence)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Load(System::Xml::XmlReader ^ stylesheet, System::Xml::XmlResolver ^ resolver, System::Security::Policy::Evidence ^ evidence);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stylesheet" Type="System.Xml.XmlReader" />
        <Parameter Name="resolver" Type="System.Xml.XmlResolver" />
        <Parameter Name="evidence" Type="System.Security.Policy.Evidence" />
      </Parameters>
      <Docs>
        <param name="stylesheet">Objeto <see cref="T:System.Xml.XmlReader" /> que contiene la hoja de estilos que se va a cargar.</param>
        <param name="resolver">
          <see cref="T:System.Xml.XmlResolver" /> se usa para cargar la hoja de estilos y cualquier hoja u hojas de estilos a las que se haga referencia en los elementos <c>xsl:import</c> y <c>xsl:include</c>. Si es <see langword="null" />, los recursos externos no se resuelven.  
  
 <see cref="T:System.Xml.XmlResolver" /> no se almacena en caché una vez finalizado el método <see cref="Overload:System.Xml.Xsl.XslTransform.Load" />.</param>
        <param name="evidence">
          <see cref="T:System.Security.Policy.Evidence" /> que se establece en el ensamblado generado para el bloque de script en la hoja de estilos XLST.  
  
 Si es <see langword="null" />, no se procesan los bloques de script, no se admite la función <c>document()</c> de XSLT y no se permiten los objetos de extensión privilegiada.  
  
 El llamador debe disponer de un permiso <see langword="ControlEvidence" /> para suministrar la evidencia al ensamblado de script. Los llamadores de confianza parcial pueden establecer este parámetro en <see langword="null" />.</param>
        <summary>Carga la hoja de estilos XSLT incluida en el objeto <see cref="T:System.Xml.XmlReader" />. Este método permite limitar los permisos de la hoja de estilos por medio de la especificación de la evidencia.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  La <xref:System.Xml.Xsl.XslTransform> clase está obsoleta en la versión 2.0 de .NET Framework. La <xref:System.Xml.Xsl.XslCompiledTransform> clase es el nuevo procesador XSLT. Para obtener más información, consulte [mediante la clase XslCompiledTransform](~/docs/standard/data/xml/using-the-xslcompiledtransform-class.md) y [Migrating From the XslTransform Class](~/docs/standard/data/xml/migrating-from-the-xsltransform-class.md).  
  
 <xref:System.Xml.Xsl.XslTransform> admite la sintaxis de XSLT 1.0. La hoja de estilos XSLT debe incluir la declaración de espacio de nombres `xmlns:xsl= http://www.w3.org/1999/XSL/Transform`.  
  
 Este método carga la hoja de estilos XSLT, incluidas las hojas de estilos que se hace referencia en `xsl:include` y `xsl:import` elementos. La hoja de estilos se carga desde el nodo actual de la <xref:System.Xml.XmlReader> a través de todos sus nodos secundarios. Esto le permite utilizar una parte de un documento como la hoja de estilos.  
  
 Después de la <xref:System.Xml.Xsl.XslTransform.Load%2A> devuelve del método, el <xref:System.Xml.XmlReader> se coloca en el siguiente nodo después del final de la hoja de estilos. Si se llega al final del documento, <xref:System.Xml.XmlReader> se sitúa al final del archivo.  
  
 Si la hoja de estilos contiene entidades, debe especificar un <xref:System.Xml.XmlReader> que pueda resolver entidades (<xref:System.Xml.XmlReader.CanResolveEntity%2A?displayProperty=nameWithType> devuelve `true`). En este caso, un <xref:System.Xml.XmlValidatingReader> puede utilizarse.  
  
 Para problemas con el <xref:System.Xml.Xsl.XslTransform.Load%2A> método y hojas de estilo con scripts incrustados, vea el artículo Q316755 de Microsoft Knowledge Base en http://support.microsoft.com.  
  
 Hay diferentes formas de proporcionar evidencia. En la tabla siguiente describe qué tipo de evidencia que debe proporcionarse para escenarios comunes de usuario.  
  
    
  
## Examples  
 En el ejemplo siguiente se realiza una transformación XSLT donde `xsltReader` es un <xref:System.Xml.XmlReader> que contiene una hoja de estilos y `secureURL` es una dirección URL de confianza que puede utilizarse para crear <xref:System.Security.Policy.Evidence>. El <xref:System.Xml.XmlSecureResolver.CreateEvidenceForUrl%2A?displayProperty=nameWithType> método se usa para crear <xref:System.Security.Policy.Evidence> que se aplica a la hoja de estilos.  
  
 [!code-cpp[XslTransform.Load4#1](~/samples/snippets/cpp/VS_Snippets_Data/XslTransform.Load4/CPP/trans_ev.cpp#1)]
 [!code-csharp[XslTransform.Load4#1](~/samples/snippets/csharp/VS_Snippets_Data/XslTransform.Load4/CS/trans_ev.cs#1)]
 [!code-vb[XslTransform.Load4#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XslTransform.Load4/VB/trans_ev.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Xml.Xsl.XsltCompileException">El nodo actual no cumple los requisitos de una hoja de estilos válida.</exception>
        <exception cref="T:System.Security.SecurityException">La hoja de estilos a la que se hace referencia requiere una funcionalidad no permitida por la evidencia proporcionada.  
  
 El llamador intenta proporcionar la evidencia, pero no dispone de un permiso <see langword="ControlEvidence" />.</exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">para proporcionar la evidencia. Enumeración asociada: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence" /></permission>
        <altmember cref="P:System.Xml.XmlResolver.Credentials" />
        <altmember cref="T:System.Net.NetworkCredential" />
        <altmember cref="T:System.Net.CredentialCache" />
        <altmember cref="T:System.Security.SecurityZone" />
        <altmember cref="T:System.Xml.XmlSecureResolver" />
        <altmember cref="M:System.Xml.XmlSecureResolver.CreateEvidenceForUrl(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="Load">
      <MemberSignature Language="C#" Value="public void Load (System.Xml.XPath.IXPathNavigable stylesheet, System.Xml.XmlResolver resolver, System.Security.Policy.Evidence evidence);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Load(class System.Xml.XPath.IXPathNavigable stylesheet, class System.Xml.XmlResolver resolver, class System.Security.Policy.Evidence evidence) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Xsl.XslTransform.Load(System.Xml.XPath.IXPathNavigable,System.Xml.XmlResolver,System.Security.Policy.Evidence)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Load(System::Xml::XPath::IXPathNavigable ^ stylesheet, System::Xml::XmlResolver ^ resolver, System::Security::Policy::Evidence ^ evidence);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stylesheet" Type="System.Xml.XPath.IXPathNavigable" />
        <Parameter Name="resolver" Type="System.Xml.XmlResolver" />
        <Parameter Name="evidence" Type="System.Security.Policy.Evidence" />
      </Parameters>
      <Docs>
        <param name="stylesheet">Objeto que implementa la interfaz <see cref="T:System.Xml.XPath.IXPathNavigable" />. En .NET Framework, puede ser un objeto <see cref="T:System.Xml.XmlNode" /> (normalmente, un objeto <see cref="T:System.Xml.XmlDocument" />) o un objeto <see cref="T:System.Xml.XPath.XPathDocument" /> que contiene la hoja de estilos XSLT.</param>
        <param name="resolver">
          <see cref="T:System.Xml.XmlResolver" /> se usa para cargar la hoja de estilos y cualquier hoja u hojas de estilos a las que se haga referencia en los elementos <c>xsl:import</c> y <c>xsl:include</c>. Si es <see langword="null" />, los recursos externos no se resuelven.  
  
 <see cref="T:System.Xml.XmlResolver" /> no se almacena en caché una vez finalizado el método <see cref="Overload:System.Xml.Xsl.XslTransform.Load" />.</param>
        <param name="evidence">
          <see cref="T:System.Security.Policy.Evidence" /> que se establece en el ensamblado generado para el bloque de script en la hoja de estilos XLST.  
  
 Si es <see langword="null" />, no se procesan los bloques de script, no se admite la función <c>document()</c> de XSLT y no se permiten los objetos de extensión privilegiada.  
  
 El llamador debe disponer de un permiso <see langword="ControlEvidence" /> para suministrar la evidencia al ensamblado de script. Los llamadores de confianza parcial pueden establecer este parámetro en <see langword="null" />.</param>
        <summary>Carga la hoja de estilos XSLT incluida en el objeto <see cref="T:System.Xml.XPath.IXPathNavigable" />. Este método permite limitar los permisos de la hoja de estilos por medio de la especificación de la evidencia.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  La <xref:System.Xml.Xsl.XslTransform> clase está obsoleta en la versión 2.0 de .NET Framework. La <xref:System.Xml.Xsl.XslCompiledTransform> clase es el nuevo procesador XSLT. Para obtener más información, consulte [mediante la clase XslCompiledTransform](~/docs/standard/data/xml/using-the-xslcompiledtransform-class.md) y [Migrating From the XslTransform Class](~/docs/standard/data/xml/migrating-from-the-xsltransform-class.md).  
  
 <xref:System.Xml.Xsl.XslTransform> admite la sintaxis de XSLT 1.0. La hoja de estilos XSLT debe incluir la declaración de espacio de nombres `xmlns:xsl= http://www.w3.org/1999/XSL/Transform`.  
  
 Para problemas con el <xref:System.Xml.Xsl.XslTransform.Load%2A> método y hojas de estilo con scripts incrustados, vea el artículo Q316755 de Microsoft Knowledge Base en http://support.microsoft.com.  
  
 Hay diferentes formas de proporcionar evidencia. En la tabla siguiente describe qué tipo de evidencia que debe proporcionarse para escenarios comunes de usuario.  
  
  ]]></format>
        </remarks>
        <exception cref="T:System.Xml.Xsl.XsltCompileException">El recurso cargado no es una hoja de estilos válida.</exception>
        <exception cref="T:System.Security.SecurityException">La hoja de estilos a la que se hace referencia requiere una funcionalidad no permitida por la evidencia proporcionada.  
  
 El llamador intenta proporcionar la evidencia, pero no dispone de un permiso <see langword="ControlEvidence" />.</exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">para proporcionar la evidencia. Enumeración asociada: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence" /></permission>
        <altmember cref="P:System.Xml.XmlResolver.Credentials" />
        <altmember cref="T:System.Net.NetworkCredential" />
        <altmember cref="T:System.Net.CredentialCache" />
        <altmember cref="T:System.Security.SecurityZone" />
        <altmember cref="T:System.Xml.XmlSecureResolver" />
        <altmember cref="M:System.Xml.XmlSecureResolver.CreateEvidenceForUrl(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="Load">
      <MemberSignature Language="C#" Value="public void Load (System.Xml.XPath.XPathNavigator stylesheet, System.Xml.XmlResolver resolver, System.Security.Policy.Evidence evidence);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Load(class System.Xml.XPath.XPathNavigator stylesheet, class System.Xml.XmlResolver resolver, class System.Security.Policy.Evidence evidence) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Xsl.XslTransform.Load(System.Xml.XPath.XPathNavigator,System.Xml.XmlResolver,System.Security.Policy.Evidence)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Load(System::Xml::XPath::XPathNavigator ^ stylesheet, System::Xml::XmlResolver ^ resolver, System::Security::Policy::Evidence ^ evidence);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stylesheet" Type="System.Xml.XPath.XPathNavigator" />
        <Parameter Name="resolver" Type="System.Xml.XmlResolver" />
        <Parameter Name="evidence" Type="System.Security.Policy.Evidence" />
      </Parameters>
      <Docs>
        <param name="stylesheet">Objeto <see cref="T:System.Xml.XPath.XPathNavigator" /> que contiene la hoja de estilos que se va a cargar.</param>
        <param name="resolver">
          <see cref="T:System.Xml.XmlResolver" /> se usa para cargar la hoja de estilos y cualquier hoja u hojas de estilos a las que se haga referencia en los elementos <c>xsl:import</c> y <c>xsl:include</c>. Si es <see langword="null" />, los recursos externos no se resuelven.  
  
 <see cref="T:System.Xml.XmlResolver" /> no se almacena en caché una vez finalizado el método <see cref="Overload:System.Xml.Xsl.XslTransform.Load" />.</param>
        <param name="evidence">
          <see cref="T:System.Security.Policy.Evidence" /> que se establece en el ensamblado generado para el bloque de script en la hoja de estilos XLST.  
  
 Si es <see langword="null" />, no se procesan los bloques de script, no se admite la función <c>document()</c> de XSLT y no se permiten los objetos de extensión privilegiada.  
  
 El llamador debe disponer de un permiso <see langword="ControlEvidence" /> para suministrar la evidencia al ensamblado de script. Los llamadores de confianza parcial pueden establecer este parámetro en <see langword="null" />.</param>
        <summary>Carga la hoja de estilos XSLT incluida en el objeto <see cref="T:System.Xml.XPath.XPathNavigator" />. Este método permite limitar los permisos de la hoja de estilos por medio de la especificación de la evidencia.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  La <xref:System.Xml.Xsl.XslTransform> clase está obsoleta en la versión 2.0 de .NET Framework. La <xref:System.Xml.Xsl.XslCompiledTransform> clase es el nuevo procesador XSLT. Para obtener más información, consulte [mediante la clase XslCompiledTransform](~/docs/standard/data/xml/using-the-xslcompiledtransform-class.md) y [Migrating From the XslTransform Class](~/docs/standard/data/xml/migrating-from-the-xsltransform-class.md).  
  
 <xref:System.Xml.Xsl.XslTransform> admite la sintaxis de XSLT 1.0. La hoja de estilos XSLT debe incluir la declaración de espacio de nombres `xmlns:xsl= http://www.w3.org/1999/XSL/Transform`.  
  
 La hoja de estilos se carga desde la posición actual de la <xref:System.Xml.XPath.XPathNavigator>. Para usar una parte del documento cargado como la hoja de estilos, navegue hasta el nodo correspondiente al principio de la hoja de estilos. Después de la <xref:System.Xml.Xsl.XslTransform.Load%2A> devuelve del método, el <xref:System.Xml.XPath.XPathNavigator> está situado al principio de la hoja de estilos (en el `xsl:style sheet` nodo).  
  
 Para problemas con el <xref:System.Xml.Xsl.XslTransform.Load%2A> método y hojas de estilo con scripts incrustados, vea el artículo Q316755 de Microsoft Knowledge Base en http://support.microsoft.com.  
  
 Hay diferentes formas de proporcionar evidencia. En la tabla siguiente describe qué tipo de evidencia que debe proporcionarse para escenarios comunes de usuario.  
  
    
  
## Examples  
 En el ejemplo siguiente se realiza una transformación XSLT utilizando una hoja de estilos de un origen externo. Dado que la hoja de estilos provenga de un origen de confianza, el `resolver` y `evidence` parámetros están establecidos en `null`.  
  
 [!code-csharp[XslTransform.Load5#1](~/samples/snippets/csharp/VS_Snippets_Data/XslTransform.Load5/CS/trans_noev.cs#1)]
 [!code-vb[XslTransform.Load5#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XslTransform.Load5/VB/trans_noev.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Xml.Xsl.XsltCompileException">El nodo actual no cumple los requisitos de una hoja de estilos válida.</exception>
        <exception cref="T:System.Security.SecurityException">La hoja de estilos a la que se hace referencia requiere una funcionalidad no permitida por la evidencia proporcionada.  
  
 El llamador intenta proporcionar la evidencia, pero no dispone de un permiso <see langword="ControlEvidence" />.</exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">para proporcionar la evidencia. Enumeración asociada: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence" /></permission>
        <altmember cref="P:System.Xml.XmlResolver.Credentials" />
        <altmember cref="T:System.Net.NetworkCredential" />
        <altmember cref="T:System.Net.CredentialCache" />
        <altmember cref="T:System.Security.SecurityZone" />
        <altmember cref="T:System.Xml.XmlSecureResolver" />
        <altmember cref="M:System.Xml.XmlSecureResolver.CreateEvidenceForUrl(System.String)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Transform">
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Transforma los datos XML mediante la hoja de estilos XSLT cargada.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  La <xref:System.Xml.Xsl.XslTransform> clase está obsoleta en la versión 2.0 de .NET Framework. La <xref:System.Xml.Xsl.XslCompiledTransform> clase es el nuevo procesador XSLT. Para obtener más información, consulte [mediante la clase XslCompiledTransform](~/docs/standard/data/xml/using-the-xslcompiledtransform-class.md) y [Migrating From the XslTransform Class](~/docs/standard/data/xml/migrating-from-the-xsltransform-class.md).  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="Transform">
      <MemberSignature Language="C#" Value="public void Transform (string inputfile, string outputfile);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Transform(string inputfile, string outputfile) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Xsl.XslTransform.Transform(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Transform (inputfile As String, outputfile As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Transform(System::String ^ inputfile, System::String ^ outputfile);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="inputfile" Type="System.String" />
        <Parameter Name="outputfile" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="inputfile">Dirección URL del documento origen que se va a transformar.</param>
        <param name="outputfile">Dirección URL del archivo de salida.</param>
        <summary>Transforma los datos XML del archivo de entrada y envía el resultado a un archivo de salida.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  La <xref:System.Xml.Xsl.XslTransform> clase está obsoleta en la versión 2.0 de .NET Framework. La <xref:System.Xml.Xsl.XslCompiledTransform> clase es el nuevo procesador XSLT. Para obtener más información, consulte [mediante la clase XslCompiledTransform](~/docs/standard/data/xml/using-the-xslcompiledtransform-class.md) y [Migrating From the XslTransform Class](~/docs/standard/data/xml/migrating-from-the-xsltransform-class.md).  
  
 <xref:System.Xml.Xsl.XslTransform> admite la sintaxis de XSLT 1.0. La hoja de estilos XSLT debe incluir la declaración de espacio de nombres `xmlns:xsl= http://www.w3.org/1999/XSL/Transform`.  
  
> [!NOTE]
>  Este método está obsoleto en la versión 1.1 de .NET Framework. La configuración de la <xref:System.Xml.Xsl.XslTransform.XmlResolver%2A> propiedad determina cómo el XSLT `document()` función se ha resuelto. La práctica recomendada es utilizar la <xref:System.Xml.Xsl.XslTransform.Transform%2A> método que toma un <xref:System.Xml.XmlResolver> objeto como uno de sus argumentos.  
  
   
  
## Examples  
 El siguiente ejemplo se transforma el `books.xml` archivo utilizando el `output.xsl` hoja de estilos y pone los resultados en el `books.html` archivo.  
  
 [!code-cpp[XslTransform.Transform3#1](~/samples/snippets/cpp/VS_Snippets_Data/xsltransform.transform3/CPP/trans_snip2.cpp#1)]
 [!code-csharp[XslTransform.Transform3#1](~/samples/snippets/csharp/VS_Snippets_Data/xsltransform.transform3/CS/trans_snip2.cs#1)]
 [!code-vb[XslTransform.Transform3#1](~/samples/snippets/visualbasic/VS_Snippets_Data/xsltransform.transform3/VB/trans_snip2.vb#1)]  
  
 El ejemplo usa los dos archivos de entrada siguientes:  
  
 `books.xml`  
  
 [!code-xml[Classic WebData XslTransform.Transform7 Example#2](~/samples/snippets/xml/VS_Snippets_Data/Classic WebData XslTransform.Transform7 Example/XML/books.xml#2)]  
  
 `output.xsl`  
  
 [!code-xml[Classic WebData XslTransform.Transform7 Example#3](~/samples/snippets/xml/VS_Snippets_Data/Classic WebData XslTransform.Transform7 Example/XML/output.xsl#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Transform">
      <MemberSignature Language="C#" Value="public System.Xml.XmlReader Transform (System.Xml.XPath.IXPathNavigable input, System.Xml.Xsl.XsltArgumentList args);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Xml.XmlReader Transform(class System.Xml.XPath.IXPathNavigable input, class System.Xml.Xsl.XsltArgumentList args) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Xsl.XslTransform.Transform(System.Xml.XPath.IXPathNavigable,System.Xml.Xsl.XsltArgumentList)" />
      <MemberSignature Language="VB.NET" Value="Public Function Transform (input As IXPathNavigable, args As XsltArgumentList) As XmlReader" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Xml::XmlReader ^ Transform(System::Xml::XPath::IXPathNavigable ^ input, System::Xml::Xsl::XsltArgumentList ^ args);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlReader</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.Xml.XPath.IXPathNavigable" />
        <Parameter Name="args" Type="System.Xml.Xsl.XsltArgumentList" />
      </Parameters>
      <Docs>
        <param name="input">Objeto que implementa la interfaz <see cref="T:System.Xml.XPath.IXPathNavigable" />. En .NET Framework, puede ser un objeto <see cref="T:System.Xml.XmlNode" /> (normalmente, <see cref="T:System.Xml.XmlDocument" />) o un objeto <see cref="T:System.Xml.XPath.XPathDocument" /> que contiene los datos que se van a transformar.</param>
        <param name="args">Objeto <see cref="T:System.Xml.Xsl.XsltArgumentList" /> que contiene los argumentos calificados con el nombre de espacio de nombres utilizados como entrada para la transformación.</param>
        <summary>Transforma los datos XML de <see cref="T:System.Xml.XPath.IXPathNavigable" /> utilizando el <paramref name="args" /> especificado y envía el resultado a un <see cref="T:System.Xml.XmlReader" />.</summary>
        <returns>Objeto <see cref="T:System.Xml.XmlReader" /> que contiene los resultados de la transformación.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  La <xref:System.Xml.Xsl.XslTransform> clase está obsoleta en la versión 2.0 de .NET Framework. La <xref:System.Xml.Xsl.XslCompiledTransform> clase es el nuevo procesador XSLT. Para obtener más información, consulte [mediante la clase XslCompiledTransform](~/docs/standard/data/xml/using-the-xslcompiledtransform-class.md) y [Migrating From the XslTransform Class](~/docs/standard/data/xml/migrating-from-the-xsltransform-class.md).  
  
 <xref:System.Xml.Xsl.XslTransform> admite la sintaxis de XSLT 1.0. La hoja de estilos XSLT debe incluir la declaración de espacio de nombres `xmlns:xsl= http://www.w3.org/1999/XSL/Transform`.  
  
> [!NOTE]
>  Este método ahora está obsoleto. La configuración de la <xref:System.Xml.Xsl.XslTransform.XmlResolver%2A> propiedad determina cómo el XSLT `document()` función se ha resuelto. La práctica recomendada es utilizar la <xref:System.Xml.Xsl.XslTransform.Transform%2A> método que toma un <xref:System.Xml.XmlResolver> objeto como uno de sus argumentos.  
  
 El `args` se hacen coincidir con el `xsl:param` elementos definidos en la hoja de estilos. El `xsl:output` elemento no se admite cuando la salida se envía a un <xref:System.Xml.XmlReader> (el `xsl:output` elemento se omite). Vea [resultados de XslTransform](~/docs/standard/data/xml/outputs-from-an-xsltransform.md) para obtener más información.  
  
 Este método le permite realizar una transformación asincrónica del documento de origen.  
  
 Las transformaciones se aplican al documento en su totalidad. En otras palabras, si se pasa un nodo distinto del nodo raíz del documento, esto no evita que el proceso de transformación pueda obtener acceso a todos los nodos del documento cargado. Para transformar un fragmento de nodo, debe crear un <xref:System.Xml.XmlDocument> que contiene solo el nodo del fragmento y pasar ese <xref:System.Xml.XmlDocument> a la <xref:System.Xml.Xsl.XslTransform.Transform%2A> método.  
  
 En el ejemplo siguiente se realiza una transformación en un fragmento de nodo.  
  
```  
XslTransform xslt = new XslTransform();       
xslt.Load("print_root.xsl");  
XmlDocument doc = new XmlDocument();  
doc.Load("library.xml");  
// Create a new document containing just the node fragment.  
XmlNode testNode = doc.DocumentElement.FirstChild;   
XmlDocument tmpDoc = new XmlDocument();   
tmpDoc.LoadXml(testNode.OuterXml);  
// Pass the document containing the node fragment   
// to the Transform method.  
Console.WriteLine("Passing " + tmpDoc.OuterXml + " to print_root.xsl");  
xslt.Transform(tmpDoc, null, Console.Out);  
```  
  
 El ejemplo se utiliza la `library.xml` y `print_root.xsl` archivos como entrada y genera el siguiente en la consola.  
  
```  
Passing <book genre="novel" ISBN="1-861001-57-5"><title>Pride And Prejudice</title></book> to print_root.xsl   
Root node is book.  
```  
  
 `library.xml`  
  
```  
<library>  
  <book genre='novel' ISBN='1-861001-57-5'>  
     <title>Pride And Prejudice</title>  
  </book>  
  <book genre='novel' ISBN='1-81920-21-2'>  
     <title>Hook</title>  
  </book>  
</library>  
```  
  
 `print_root.xsl`  
  
```  
<style sheet version="1.0" xmlns="http://www.w3.org/1999/XSL/Transform" >  
  <output method="text" />   
  <template match="/">  
     Root node is  <value-of select="local-name(//*[position() = 1])" />   
  </template>  
</style sheet>  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Transform">
      <MemberSignature Language="C#" Value="public System.Xml.XmlReader Transform (System.Xml.XPath.XPathNavigator input, System.Xml.Xsl.XsltArgumentList args);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Xml.XmlReader Transform(class System.Xml.XPath.XPathNavigator input, class System.Xml.Xsl.XsltArgumentList args) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Xsl.XslTransform.Transform(System.Xml.XPath.XPathNavigator,System.Xml.Xsl.XsltArgumentList)" />
      <MemberSignature Language="VB.NET" Value="Public Function Transform (input As XPathNavigator, args As XsltArgumentList) As XmlReader" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Xml::XmlReader ^ Transform(System::Xml::XPath::XPathNavigator ^ input, System::Xml::Xsl::XsltArgumentList ^ args);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlReader</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.Xml.XPath.XPathNavigator" />
        <Parameter Name="args" Type="System.Xml.Xsl.XsltArgumentList" />
      </Parameters>
      <Docs>
        <param name="input">
          <see cref="T:System.Xml.XPath.XPathNavigator" /> que contiene los datos que se van a transformar.</param>
        <param name="args">Objeto <see cref="T:System.Xml.Xsl.XsltArgumentList" /> que contiene los argumentos calificados con el nombre de espacio de nombres utilizados como entrada para la transformación.</param>
        <summary>Transforma los datos XML de <see cref="T:System.Xml.XPath.XPathNavigator" /> utilizando el <paramref name="args" /> especificado y envía el resultado a un <see cref="T:System.Xml.XmlReader" />.</summary>
        <returns>Objeto <see cref="T:System.Xml.XmlReader" /> que contiene los resultados de la transformación.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  La <xref:System.Xml.Xsl.XslTransform> clase está obsoleta en la versión 2.0 de .NET Framework. La <xref:System.Xml.Xsl.XslCompiledTransform> clase es el nuevo procesador XSLT. Para obtener más información, consulte [mediante la clase XslCompiledTransform](~/docs/standard/data/xml/using-the-xslcompiledtransform-class.md) y [Migrating From the XslTransform Class](~/docs/standard/data/xml/migrating-from-the-xsltransform-class.md).  
  
 <xref:System.Xml.Xsl.XslTransform> admite la sintaxis de XSLT 1.0. La hoja de estilos XSLT debe incluir la declaración de espacio de nombres `xmlns:xsl= http://www.w3.org/1999/XSL/Transform`.  
  
 El `args` se hacen coincidir con el `xsl:param` elementos definidos en la hoja de estilos. Las selecciones de transformación que se aplican al documento como un todo. En otras palabras, si el nodo actual se establece en un árbol de nodos que no sea el nodo raíz del documento, esto no impide el proceso de transformación de obtener acceso a todos los nodos del documento cargado. Después de haber realizado la transformación, el <xref:System.Xml.XPath.XPathNavigator> permanece en su estado original. Esto significa que el nodo, que era el actual antes del proceso de transformación, sigue siendo el actual después de la <xref:System.Xml.Xsl.XslTransform.Transform%2A> ha llamado al método.  
  
 Dado que <xref:System.Xml.XmlReader> proporciona la salida de solo lectura, el `xsl:output` se omite el elemento. Vea [resultados de XslTransform](~/docs/standard/data/xml/outputs-from-an-xsltransform.md) para obtener más información.  
  
 Este método le permite realizar una transformación asincrónica del documento de origen.  
  
> [!NOTE]
>  Este método está obsoleto. La configuración de la <xref:System.Xml.Xsl.XslTransform.XmlResolver%2A> propiedad determina cómo se resuelve la función document() XSLT. La práctica recomendada es utilizar la <xref:System.Xml.Xsl.XslTransform.Transform%2A> método que toma un <xref:System.Xml.XmlResolver> objeto como uno de sus argumentos.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Se produjo un error al procesar la transformación XSLT.  
  
 Nota: éste es un cambio de comportamiento respecto a las versiones anteriores. Se inicia una <see cref="T:System.Xml.Xsl.XsltException" /> si usa Microsoft .NET Framework versión 1.1 o anterior.</exception>
      </Docs>
    </Member>
    <Member MemberName="Transform">
      <MemberSignature Language="C#" Value="public void Transform (string inputfile, string outputfile, System.Xml.XmlResolver resolver);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Transform(string inputfile, string outputfile, class System.Xml.XmlResolver resolver) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Xsl.XslTransform.Transform(System.String,System.String,System.Xml.XmlResolver)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Transform (inputfile As String, outputfile As String, resolver As XmlResolver)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Transform(System::String ^ inputfile, System::String ^ outputfile, System::Xml::XmlResolver ^ resolver);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="inputfile" Type="System.String" />
        <Parameter Name="outputfile" Type="System.String" />
        <Parameter Name="resolver" Type="System.Xml.XmlResolver" />
      </Parameters>
      <Docs>
        <param name="inputfile">Dirección URL del documento origen que se va a transformar.</param>
        <param name="outputfile">Dirección URL del archivo de salida.</param>
        <param name="resolver">
          <see cref="T:System.Xml.XmlResolver" /> que se usa para resolver la función <c>document()</c> de XSLT. Si es <see langword="null" />, la función <c>document()</c> no se resuelve.  
  
 <see cref="T:System.Xml.XmlResolver" /> no se almacena en caché una vez finalizado el método <see cref="Overload:System.Xml.Xsl.XslTransform.Transform" />.</param>
        <summary>Transforma los datos XML del archivo de entrada y envía el resultado a un archivo de salida.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  La <xref:System.Xml.Xsl.XslTransform> clase está obsoleta en la versión 2.0 de .NET Framework. La <xref:System.Xml.Xsl.XslCompiledTransform> clase es el nuevo procesador XSLT. Para obtener más información, consulte [mediante la clase XslCompiledTransform](~/docs/standard/data/xml/using-the-xslcompiledtransform-class.md) y [Migrating From the XslTransform Class](~/docs/standard/data/xml/migrating-from-the-xsltransform-class.md).  
  
 <xref:System.Xml.Xsl.XslTransform> admite la sintaxis de XSLT 1.0. La hoja de estilos XSLT debe incluir la declaración de espacio de nombres `xmlns:xsl= http://www.w3.org/1999/XSL/Transform`.  
  
   
  
## Examples  
 En el ejemplo siguiente se realiza una transformación XSLT y muestra los resultados en un archivo. Un <xref:System.Xml.XmlUrlResolver> no tiene valor predeterminado se utiliza credenciales resolver recursos externos. Para obtener información más detallada, vea <xref:System.Net.CredentialCache.DefaultCredentials%2A>.  
  
 [!code-cpp[XslTransform.Transform7#1](~/samples/snippets/cpp/VS_Snippets_Data/XslTRansform.Transform7/CPP/trans_snip4.cpp#1)]
 [!code-csharp[XslTransform.Transform7#1](~/samples/snippets/csharp/VS_Snippets_Data/XslTRansform.Transform7/CS/trans_snip4.cs#1)]
 [!code-vb[XslTransform.Transform7#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XslTRansform.Transform7/VB/trans_snip4.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Net.NetworkCredential" />
        <altmember cref="T:System.Net.CredentialCache" />
        <altmember cref="T:System.Xml.XmlSecureResolver" />
      </Docs>
    </Member>
    <Member MemberName="Transform">
      <MemberSignature Language="C#" Value="public void Transform (System.Xml.XPath.IXPathNavigable input, System.Xml.Xsl.XsltArgumentList args, System.IO.Stream output);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Transform(class System.Xml.XPath.IXPathNavigable input, class System.Xml.Xsl.XsltArgumentList args, class System.IO.Stream output) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Xsl.XslTransform.Transform(System.Xml.XPath.IXPathNavigable,System.Xml.Xsl.XsltArgumentList,System.IO.Stream)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Transform (input As IXPathNavigable, args As XsltArgumentList, output As Stream)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Transform(System::Xml::XPath::IXPathNavigable ^ input, System::Xml::Xsl::XsltArgumentList ^ args, System::IO::Stream ^ output);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.Xml.XPath.IXPathNavigable" />
        <Parameter Name="args" Type="System.Xml.Xsl.XsltArgumentList" />
        <Parameter Name="output" Type="System.IO.Stream" />
      </Parameters>
      <Docs>
        <param name="input">Objeto que implementa la interfaz <see cref="T:System.Xml.XPath.IXPathNavigable" />. En .NET Framework, puede ser un objeto <see cref="T:System.Xml.XmlNode" /> (normalmente, <see cref="T:System.Xml.XmlDocument" />) o un objeto <see cref="T:System.Xml.XPath.XPathDocument" /> que contiene los datos que se van a transformar.</param>
        <param name="args">Objeto <see cref="T:System.Xml.Xsl.XsltArgumentList" /> que contiene los argumentos calificados con el nombre de espacio de nombres utilizados como entrada para la transformación.</param>
        <param name="output">Flujo al que se desea enviar la salida.</param>
        <summary>Transforma los datos XML de <see cref="T:System.Xml.XPath.IXPathNavigable" /> utilizando el <paramref name="args" /> especificado y envía el resultado a un <see cref="T:System.IO.Stream" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  La <xref:System.Xml.Xsl.XslTransform> clase está obsoleta en la versión 2.0 de .NET Framework. La <xref:System.Xml.Xsl.XslCompiledTransform> clase es el nuevo procesador XSLT. Para obtener más información, consulte [mediante la clase XslCompiledTransform](~/docs/standard/data/xml/using-the-xslcompiledtransform-class.md) y [Migrating From the XslTransform Class](~/docs/standard/data/xml/migrating-from-the-xsltransform-class.md).  
  
 <xref:System.Xml.Xsl.XslTransform> admite la sintaxis de XSLT 1.0. La hoja de estilos XSLT debe incluir la declaración de espacio de nombres `xmlns:xsl= http://www.w3.org/1999/XSL/Transform`.  
  
> [!NOTE]
>  Este método ahora está obsoleto. La configuración de la <xref:System.Xml.Xsl.XslTransform.XmlResolver%2A> propiedad determina cómo el XSLT `document()` función se ha resuelto. La práctica recomendada es utilizar la <xref:System.Xml.Xsl.XslTransform.Transform%2A> método que toma un <xref:System.Xml.XmlResolver> objeto como uno de sus argumentos.  
  
 El `args` se hacen coincidir con el `xsl:param` elementos definidos en la hoja de estilos.  
  
 Las transformaciones se aplican al documento en su totalidad. En otras palabras, si se pasa un nodo distinto del nodo raíz del documento, esto no evita que el proceso de transformación pueda obtener acceso a todos los nodos del documento cargado. Para transformar un fragmento de nodo, debe crear un <xref:System.Xml.XmlDocument> que contiene solo el nodo del fragmento y pasar ese <xref:System.Xml.XmlDocument> a la <xref:System.Xml.Xsl.XslTransform.Transform%2A> método.  
  
 En el ejemplo siguiente se realiza una transformación en un fragmento de nodo.  
  
```  
XslTransform xslt = new XslTransform();       
xslt.Load("print_root.xsl");  
XmlDocument doc = new XmlDocument();  
doc.Load("library.xml");  
// Create a new document containing just the node fragment.  
XmlNode testNode = doc.DocumentElement.FirstChild;   
XmlDocument tmpDoc = new XmlDocument();   
tmpDoc.LoadXml(testNode.OuterXml);  
// Pass the document containing the node fragment   
// to the Transform method.  
Console.WriteLine("Passing " + tmpDoc.OuterXml + " to print_root.xsl");  
xslt.Transform(tmpDoc, null, Console.Out);  
```  
  
 El ejemplo se utiliza la `library.xml` y `print_root.xsl` archivos como entrada y genera el siguiente en la consola.  
  
```  
Passing <book genre="novel" ISBN="1-861001-57-5"><title>Pride And Prejudice</title></book> to print_root.xsl   
Root node is book.  
```  
  
 `library.xml`  
  
```  
<library>  
  <book genre='novel' ISBN='1-861001-57-5'>  
     <title>Pride And Prejudice</title>  
  </book>  
  <book genre='novel' ISBN='1-81920-21-2'>  
     <title>Hook</title>  
  </book>  
</library>  
```  
  
 `print_root.xsl`  
  
```  
<style sheet version="1.0" xmlns="http://www.w3.org/1999/XSL/Transform" >  
  <output method="text" />   
  <template match="/">  
     Root node is  <value-of select="local-name(//*[position() = 1])" />   
  </template>  
</style sheet>  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Se produjo un error al procesar la transformación XSLT.  
  
 Nota: éste es un cambio de comportamiento respecto a las versiones anteriores. Se inicia una <see cref="T:System.Xml.Xsl.XsltException" /> si usa Microsoft .NET Framework versión 1.1 o anterior.</exception>
      </Docs>
    </Member>
    <Member MemberName="Transform">
      <MemberSignature Language="C#" Value="public void Transform (System.Xml.XPath.IXPathNavigable input, System.Xml.Xsl.XsltArgumentList args, System.IO.TextWriter output);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Transform(class System.Xml.XPath.IXPathNavigable input, class System.Xml.Xsl.XsltArgumentList args, class System.IO.TextWriter output) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Xsl.XslTransform.Transform(System.Xml.XPath.IXPathNavigable,System.Xml.Xsl.XsltArgumentList,System.IO.TextWriter)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Transform (input As IXPathNavigable, args As XsltArgumentList, output As TextWriter)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Transform(System::Xml::XPath::IXPathNavigable ^ input, System::Xml::Xsl::XsltArgumentList ^ args, System::IO::TextWriter ^ output);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.Xml.XPath.IXPathNavigable" />
        <Parameter Name="args" Type="System.Xml.Xsl.XsltArgumentList" />
        <Parameter Name="output" Type="System.IO.TextWriter" />
      </Parameters>
      <Docs>
        <param name="input">Objeto que implementa la interfaz <see cref="T:System.Xml.XPath.IXPathNavigable" />. En .NET Framework, puede ser un objeto <see cref="T:System.Xml.XmlNode" /> (normalmente, <see cref="T:System.Xml.XmlDocument" />) o un objeto <see cref="T:System.Xml.XPath.XPathDocument" /> que contiene los datos que se van a transformar.</param>
        <param name="args">Objeto <see cref="T:System.Xml.Xsl.XsltArgumentList" /> que contiene los argumentos calificados con el nombre de espacio de nombres utilizados como entrada para la transformación.</param>
        <param name="output">Objeto <see cref="T:System.IO.TextWriter" /> al que se desea enviar el resultado.</param>
        <summary>Transforma los datos XML de <see cref="T:System.Xml.XPath.IXPathNavigable" /> utilizando el <paramref name="args" /> especificado y envía el resultado a un <see cref="T:System.IO.TextWriter" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  La <xref:System.Xml.Xsl.XslTransform> clase está obsoleta en la versión 2.0 de .NET Framework. La <xref:System.Xml.Xsl.XslCompiledTransform> clase es el nuevo procesador XSLT. Para obtener más información, consulte [mediante la clase XslCompiledTransform](~/docs/standard/data/xml/using-the-xslcompiledtransform-class.md) y [Migrating From the XslTransform Class](~/docs/standard/data/xml/migrating-from-the-xsltransform-class.md).  
  
 <xref:System.Xml.Xsl.XslTransform> admite la sintaxis de XSLT 1.0. La hoja de estilos XSLT debe incluir la declaración de espacio de nombres `xmlns:xsl= http://www.w3.org/1999/XSL/Transform`.  
  
> [!NOTE]
>  Este método ahora está obsoleto. La configuración de la <xref:System.Xml.Xsl.XslTransform.XmlResolver%2A> propiedad determina cómo el XSLT `document()` función se ha resuelto. La práctica recomendada es utilizar la <xref:System.Xml.Xsl.XslTransform.Transform%2A> método que toma un <xref:System.Xml.XmlResolver> objeto como uno de sus argumentos.  
  
 El `args` se hacen coincidir con el `xsl:param` elementos definidos en la hoja de estilos.  
  
 El atributo de codificación de un `xsl:output` elemento no se admite cuando la salida se envía a un <xref:System.IO.TextWriter>. Vea [resultados de XslTransform](~/docs/standard/data/xml/outputs-from-an-xsltransform.md) para obtener información específica en la que `xsl:output` atributos son compatibles.  
  
 Las transformaciones se aplican al documento en su totalidad. En otras palabras, si se pasa un nodo distinto del nodo raíz del documento, esto no evita que el proceso de transformación pueda obtener acceso a todos los nodos del documento cargado. Para transformar un fragmento de nodo, debe crear un <xref:System.Xml.XmlDocument> que contiene solo el nodo del fragmento y pasar ese <xref:System.Xml.XmlDocument> a la <xref:System.Xml.Xsl.XslTransform.Transform%2A> método.  
  
 En el ejemplo siguiente se realiza una transformación en un fragmento de nodo.  
  
```  
XslTransform xslt = new XslTransform();       
xslt.Load("print_root.xsl");  
XmlDocument doc = new XmlDocument();  
doc.Load("library.xml");  
// Create a new document containing just the node fragment.  
XmlNode testNode = doc.DocumentElement.FirstChild;   
XmlDocument tmpDoc = new XmlDocument();   
tmpDoc.LoadXml(testNode.OuterXml);  
// Pass the document containing the node fragment   
// to the Transform method.  
Console.WriteLine("Passing " + tmpDoc.OuterXml + " to print_root.xsl");  
xslt.Transform(tmpDoc, null, Console.Out);  
```  
  
 El ejemplo se utiliza la `library.xml` y `print_root.xsl` archivos como entrada y genera el siguiente en la consola.  
  
```  
Passing <book genre="novel" ISBN="1-861001-57-5"><title>Pride And Prejudice</title></book> to print_root.xsl   
Root node is book.  
```  
  
 `library.xml`  
  
```  
<library>  
  <book genre='novel' ISBN='1-861001-57-5'>  
     <title>Pride And Prejudice</title>  
  </book>  
  <book genre='novel' ISBN='1-81920-21-2'>  
     <title>Hook</title>  
  </book>  
</library>  
```  
  
 `print_root.xsl`  
  
```  
<style sheet version="1.0" xmlns="http://www.w3.org/1999/XSL/Transform" >  
  <output method="text" />   
  <template match="/">  
     Root node is  <value-of select="local-name(//*[position() = 1])" />   
  </template>  
</style sheet>  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Se produjo un error al procesar la transformación XSLT.  
  
 Nota: éste es un cambio de comportamiento respecto a las versiones anteriores. Se inicia una <see cref="T:System.Xml.Xsl.XsltException" /> si usa Microsoft .NET Framework versión 1.1 o anterior.</exception>
      </Docs>
    </Member>
    <Member MemberName="Transform">
      <MemberSignature Language="C#" Value="public System.Xml.XmlReader Transform (System.Xml.XPath.IXPathNavigable input, System.Xml.Xsl.XsltArgumentList args, System.Xml.XmlResolver resolver);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Xml.XmlReader Transform(class System.Xml.XPath.IXPathNavigable input, class System.Xml.Xsl.XsltArgumentList args, class System.Xml.XmlResolver resolver) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Xsl.XslTransform.Transform(System.Xml.XPath.IXPathNavigable,System.Xml.Xsl.XsltArgumentList,System.Xml.XmlResolver)" />
      <MemberSignature Language="VB.NET" Value="Public Function Transform (input As IXPathNavigable, args As XsltArgumentList, resolver As XmlResolver) As XmlReader" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Xml::XmlReader ^ Transform(System::Xml::XPath::IXPathNavigable ^ input, System::Xml::Xsl::XsltArgumentList ^ args, System::Xml::XmlResolver ^ resolver);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlReader</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.Xml.XPath.IXPathNavigable" />
        <Parameter Name="args" Type="System.Xml.Xsl.XsltArgumentList" />
        <Parameter Name="resolver" Type="System.Xml.XmlResolver" />
      </Parameters>
      <Docs>
        <param name="input">Objeto que implementa la interfaz <see cref="T:System.Xml.XPath.IXPathNavigable" />. En .NET Framework, puede ser un objeto <see cref="T:System.Xml.XmlNode" /> (normalmente, <see cref="T:System.Xml.XmlDocument" />) o un objeto <see cref="T:System.Xml.XPath.XPathDocument" /> que contiene los datos que se van a transformar.</param>
        <param name="args">Objeto <see cref="T:System.Xml.Xsl.XsltArgumentList" /> que contiene los argumentos calificados con el nombre de espacio de nombres utilizados como entrada para la transformación.</param>
        <param name="resolver">
          <see cref="T:System.Xml.XmlResolver" /> que se usa para resolver la función <c>document()</c> de XSLT. Si es <see langword="null" />, la función <c>document()</c> no se resuelve.  
  
 <see cref="T:System.Xml.XmlResolver" /> no se almacena en caché una vez finalizado el método <see cref="M:System.Xml.Xsl.XslTransform.Transform(System.Xml.XPath.IXPathNavigable,System.Xml.Xsl.XsltArgumentList,System.Xml.XmlResolver)" />.</param>
        <summary>Transforma los datos XML de <see cref="T:System.Xml.XPath.IXPathNavigable" /> utilizando el <paramref name="args" /> especificado y envía el resultado a un <see cref="T:System.Xml.XmlReader" />.</summary>
        <returns>Objeto <see cref="T:System.Xml.XmlReader" /> que contiene los resultados de la transformación.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  La <xref:System.Xml.Xsl.XslTransform> clase está obsoleta en la versión 2.0 de .NET Framework. La <xref:System.Xml.Xsl.XslCompiledTransform> clase es el nuevo procesador XSLT. Para obtener más información, consulte [mediante la clase XslCompiledTransform](~/docs/standard/data/xml/using-the-xslcompiledtransform-class.md) y [Migrating From the XslTransform Class](~/docs/standard/data/xml/migrating-from-the-xsltransform-class.md).  
  
 <xref:System.Xml.Xsl.XslTransform> admite la sintaxis de XSLT 1.0. La hoja de estilos XSLT debe incluir la declaración de espacio de nombres `xmlns:xsl= http://www.w3.org/1999/XSL/Transform`.  
  
 El `args` se hacen coincidir con el `xsl:param` elementos definidos en la hoja de estilos. El `xsl:output` elemento no se admite cuando la salida se envía a un <xref:System.Xml.XmlReader> (el `xsl:output` elemento se omite). Vea [resultados de XslTransform](~/docs/standard/data/xml/outputs-from-an-xsltransform.md) para obtener más información.  
  
 Este método le permite realizar una transformación asincrónica del documento de origen.  
  
 Las transformaciones se aplican al documento en su totalidad. En otras palabras, si se pasa un nodo distinto del nodo raíz del documento, esto no evita que el proceso de transformación pueda obtener acceso a todos los nodos del documento cargado. Para transformar un fragmento de nodo, debe crear un <xref:System.Xml.XmlDocument> que contiene solo el nodo del fragmento y pasar ese <xref:System.Xml.XmlDocument> a la <xref:System.Xml.Xsl.XslTransform.Transform%2A> método.  
  
 En el ejemplo siguiente se realiza una transformación en un fragmento de nodo.  
  
```  
XslTransform xslt = new XslTransform();       
xslt.Load("print_root.xsl");  
XmlDocument doc = new XmlDocument();  
doc.Load("library.xml");  
// Create a new document containing just the node fragment.  
XmlNode testNode = doc.DocumentElement.FirstChild;   
XmlDocument tmpDoc = new XmlDocument();   
tmpDoc.LoadXml(testNode.OuterXml);  
// Pass the document containing the node fragment   
// to the Transform method.  
Console.WriteLine("Passing " + tmpDoc.OuterXml + " to print_root.xsl");  
xslt.Transform(tmpDoc, null, Console.Out, null);  
```  
  
 El ejemplo se utiliza la `library.xml` y `print_root.xsl` archivos como entrada y genera el siguiente en la consola.  
  
```  
Passing <book genre="novel" ISBN="1-861001-57-5"><title>Pride And Prejudice</title></book> to print_root.xsl   
Root node is book.  
```  
  
 `library.xml`  
  
```  
<library>  
  <book genre='novel' ISBN='1-861001-57-5'>  
     <title>Pride And Prejudice</title>  
  </book>  
  <book genre='novel' ISBN='1-81920-21-2'>  
     <title>Hook</title>  
  </book>  
</library>  
```  
  
 `print_root.xsl`  
  
```  
<style sheet version="1.0" xmlns="http://www.w3.org/1999/XSL/Transform" >  
  <output method="text" />   
  <template match="/">  
     Root node is  <value-of select="local-name(//*[position() = 1])" />   
  </template>  
</style sheet>  
```  
  
   
  
## Examples  
 En el ejemplo siguiente se transforma un documento XML y pone los resultados en un `XmlReader`. Un <xref:System.Xml.XmlUrlResolver> con las credenciales necesarias se utiliza para procesar cualquier XSLT `document()` funciones.  
  
 [!code-cpp[XslTransform.Transform4#1](~/samples/snippets/cpp/VS_Snippets_Data/XslTransform.Transform4/CPP/trans_snip3.cpp#1)]
 [!code-csharp[XslTransform.Transform4#1](~/samples/snippets/csharp/VS_Snippets_Data/XslTransform.Transform4/CS/trans_snip3.cs#1)]
 [!code-vb[XslTransform.Transform4#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XslTransform.Transform4/VB/trans_snip3.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.XmlSecureResolver" />
      </Docs>
    </Member>
    <Member MemberName="Transform">
      <MemberSignature Language="C#" Value="public void Transform (System.Xml.XPath.IXPathNavigable input, System.Xml.Xsl.XsltArgumentList args, System.Xml.XmlWriter output);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Transform(class System.Xml.XPath.IXPathNavigable input, class System.Xml.Xsl.XsltArgumentList args, class System.Xml.XmlWriter output) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Xsl.XslTransform.Transform(System.Xml.XPath.IXPathNavigable,System.Xml.Xsl.XsltArgumentList,System.Xml.XmlWriter)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Transform (input As IXPathNavigable, args As XsltArgumentList, output As XmlWriter)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Transform(System::Xml::XPath::IXPathNavigable ^ input, System::Xml::Xsl::XsltArgumentList ^ args, System::Xml::XmlWriter ^ output);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.Xml.XPath.IXPathNavigable" />
        <Parameter Name="args" Type="System.Xml.Xsl.XsltArgumentList" />
        <Parameter Name="output" Type="System.Xml.XmlWriter" />
      </Parameters>
      <Docs>
        <param name="input">Objeto que implementa la interfaz <see cref="T:System.Xml.XPath.IXPathNavigable" />. En .NET Framework, puede ser un objeto <see cref="T:System.Xml.XmlNode" /> (normalmente, <see cref="T:System.Xml.XmlDocument" />) o un objeto <see cref="T:System.Xml.XPath.XPathDocument" /> que contiene los datos que se van a transformar.</param>
        <param name="args">Objeto <see cref="T:System.Xml.Xsl.XsltArgumentList" /> que contiene los argumentos calificados con el nombre de espacio de nombres utilizados como entrada para la transformación.</param>
        <param name="output">Objeto <see cref="T:System.Xml.XmlWriter" /> al que se desea enviar el resultado.</param>
        <summary>Transforma los datos XML de <see cref="T:System.Xml.XPath.IXPathNavigable" /> utilizando el <paramref name="args" /> especificado y envía el resultado a un <see cref="T:System.Xml.XmlWriter" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  La <xref:System.Xml.Xsl.XslTransform> clase está obsoleta en la versión 2.0 de .NET Framework. La <xref:System.Xml.Xsl.XslCompiledTransform> clase es el nuevo procesador XSLT. Para obtener más información, consulte [mediante la clase XslCompiledTransform](~/docs/standard/data/xml/using-the-xslcompiledtransform-class.md) y [Migrating From the XslTransform Class](~/docs/standard/data/xml/migrating-from-the-xsltransform-class.md).  
  
 <xref:System.Xml.Xsl.XslTransform> admite la sintaxis de XSLT 1.0. La hoja de estilos XSLT debe incluir la declaración de espacio de nombres `xmlns:xsl= http://www.w3.org/1999/XSL/Transform`.  
  
> [!NOTE]
>  Este método ahora está obsoleto. La configuración de la <xref:System.Xml.Xsl.XslTransform.XmlResolver%2A> propiedad determina cómo el XSLT `document()` función se ha resuelto. La práctica recomendada es utilizar la <xref:System.Xml.Xsl.XslTransform.Transform%2A> método que toma un <xref:System.Xml.XmlResolver> objeto como uno de sus argumentos.  
  
 El `args` se hacen coincidir con el `xsl:param` elementos definidos en la hoja de estilos. El `xsl:output` elemento no se admite cuando la salida se envía a un <xref:System.Xml.XmlWriter> (`xsl:output` se pasa por alto). Vea [resultados de XslTransform](~/docs/standard/data/xml/outputs-from-an-xsltransform.md) para obtener más información.  
  
 Las transformaciones se aplican al documento en su totalidad. En otras palabras, si se pasa un nodo distinto del nodo raíz del documento, esto no evita que el proceso de transformación pueda obtener acceso a todos los nodos del documento cargado. Para transformar un fragmento de nodo, debe crear un <xref:System.Xml.XmlDocument> que contiene solo el nodo del fragmento y pasar ese <xref:System.Xml.XmlDocument> a la <xref:System.Xml.Xsl.XslTransform.Transform%2A> método.  
  
 En el ejemplo siguiente se realiza una transformación en un fragmento de nodo.  
  
```  
XslTransform xslt = new XslTransform();       
xslt.Load("print_root.xsl");  
XmlDocument doc = new XmlDocument();  
doc.Load("library.xml");  
// Create a new document containing just the node fragment.  
XmlNode testNode = doc.DocumentElement.FirstChild;   
XmlDocument tmpDoc = new XmlDocument();   
tmpDoc.LoadXml(testNode.OuterXml);  
// Pass the document containing the node fragment   
// to the Transform method.  
Console.WriteLine("Passing " + tmpDoc.OuterXml + " to print_root.xsl");  
xslt.Transform(tmpDoc, null, Console.Out);  
```  
  
 El ejemplo se utiliza la `library.xml` y `print_root.xsl` archivos como entrada y genera el siguiente en la consola.  
  
```  
Passing <book genre="novel" ISBN="1-861001-57-5"><title>Pride And Prejudice</title></book> to print_root.xsl   
Root node is book.  
```  
  
 `library.xml`  
  
```  
<library>  
  <book genre='novel' ISBN='1-861001-57-5'>  
     <title>Pride And Prejudice</title>  
  </book>  
  <book genre='novel' ISBN='1-81920-21-2'>  
     <title>Hook</title>  
  </book>  
</library>  
```  
  
 `print_root.xsl`  
  
```  
<style sheet version="1.0" xmlns="http://www.w3.org/1999/XSL/Transform" >  
  <output method="text" />  
  <template match="/">  
  Root node is  <value-of select="local-name(//*[position() = 1])" />   
  </template>  
</style sheet>  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Se produjo un error al procesar la transformación XSLT.  
  
 Nota: éste es un cambio de comportamiento respecto a las versiones anteriores. Se inicia una <see cref="T:System.Xml.Xsl.XsltException" /> si usa Microsoft .NET Framework versión 1.1 o anterior.</exception>
      </Docs>
    </Member>
    <Member MemberName="Transform">
      <MemberSignature Language="C#" Value="public void Transform (System.Xml.XPath.XPathNavigator input, System.Xml.Xsl.XsltArgumentList args, System.IO.Stream output);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Transform(class System.Xml.XPath.XPathNavigator input, class System.Xml.Xsl.XsltArgumentList args, class System.IO.Stream output) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Xsl.XslTransform.Transform(System.Xml.XPath.XPathNavigator,System.Xml.Xsl.XsltArgumentList,System.IO.Stream)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Transform (input As XPathNavigator, args As XsltArgumentList, output As Stream)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Transform(System::Xml::XPath::XPathNavigator ^ input, System::Xml::Xsl::XsltArgumentList ^ args, System::IO::Stream ^ output);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.Xml.XPath.XPathNavigator" />
        <Parameter Name="args" Type="System.Xml.Xsl.XsltArgumentList" />
        <Parameter Name="output" Type="System.IO.Stream" />
      </Parameters>
      <Docs>
        <param name="input">
          <see cref="T:System.Xml.XPath.XPathNavigator" /> que contiene los datos que se van a transformar.</param>
        <param name="args">Objeto <see cref="T:System.Xml.Xsl.XsltArgumentList" /> que contiene los argumentos calificados con el nombre de espacio de nombres utilizados como entrada para la transformación.</param>
        <param name="output">Flujo al que se desea enviar la salida.</param>
        <summary>Transforma los datos XML de <see cref="T:System.Xml.XPath.XPathNavigator" /> utilizando el <paramref name="args" /> especificado y envía el resultado a un <see cref="T:System.IO.Stream" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  La <xref:System.Xml.Xsl.XslTransform> clase está obsoleta en la versión 2.0 de .NET Framework. La <xref:System.Xml.Xsl.XslCompiledTransform> clase es el nuevo procesador XSLT. Para obtener más información, consulte [mediante la clase XslCompiledTransform](~/docs/standard/data/xml/using-the-xslcompiledtransform-class.md) y [Migrating From the XslTransform Class](~/docs/standard/data/xml/migrating-from-the-xsltransform-class.md).  
  
 <xref:System.Xml.Xsl.XslTransform> admite la sintaxis de XSLT 1.0. La hoja de estilos XSLT debe incluir la declaración de espacio de nombres `xmlns:xsl= http://www.w3.org/1999/XSL/Transform`.  
  
 El `args` se hacen coincidir con el `xsl:param` elementos definidos en la hoja de estilos. Las selecciones de transformación que se aplican al documento como un todo. En otras palabras, si el nodo actual se establece en un árbol de nodos que no sea el nodo raíz del documento, esto no impide el proceso de transformación de obtener acceso a todos los nodos del documento cargado. Después de haber realizado la transformación, el <xref:System.Xml.XPath.XPathNavigator> permanece en su estado original. Esto significa que el nodo, que era el actual antes del proceso de transformación, sigue siendo el actual después de la <xref:System.Xml.Xsl.XslTransform.Transform%2A> ha llamado al método.  
  
 Vea [resultados de XslTransform](~/docs/standard/data/xml/outputs-from-an-xsltransform.md) para obtener información específica en la que `xsl:output` atributos son compatibles.  
  
> [!NOTE]
>  Este método ahora está obsoleto. La configuración de la <xref:System.Xml.Xsl.XslTransform.XmlResolver%2A> propiedad determina cómo el XSLT `document()` función se ha resuelto. La práctica recomendada es utilizar la <xref:System.Xml.Xsl.XslTransform.Transform%2A> método que toma un <xref:System.Xml.XmlResolver> objeto como uno de sus argumentos.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Se produjo un error al procesar la transformación XSLT.  
  
 Nota: éste es un cambio de comportamiento respecto a las versiones anteriores. Se inicia una <see cref="T:System.Xml.Xsl.XsltException" /> si usa Microsoft .NET Framework versión 1.1 o anterior.</exception>
        <altmember cref="T:System.Xml.Xsl.XsltArgumentList" />
      </Docs>
    </Member>
    <Member MemberName="Transform">
      <MemberSignature Language="C#" Value="public void Transform (System.Xml.XPath.XPathNavigator input, System.Xml.Xsl.XsltArgumentList args, System.IO.TextWriter output);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Transform(class System.Xml.XPath.XPathNavigator input, class System.Xml.Xsl.XsltArgumentList args, class System.IO.TextWriter output) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Xsl.XslTransform.Transform(System.Xml.XPath.XPathNavigator,System.Xml.Xsl.XsltArgumentList,System.IO.TextWriter)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Transform (input As XPathNavigator, args As XsltArgumentList, output As TextWriter)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Transform(System::Xml::XPath::XPathNavigator ^ input, System::Xml::Xsl::XsltArgumentList ^ args, System::IO::TextWriter ^ output);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.Xml.XPath.XPathNavigator" />
        <Parameter Name="args" Type="System.Xml.Xsl.XsltArgumentList" />
        <Parameter Name="output" Type="System.IO.TextWriter" />
      </Parameters>
      <Docs>
        <param name="input">
          <see cref="T:System.Xml.XPath.XPathNavigator" /> que contiene los datos que se van a transformar.</param>
        <param name="args">Objeto <see cref="T:System.Xml.Xsl.XsltArgumentList" /> que contiene los argumentos calificados con el nombre de espacio de nombres utilizados como entrada para la transformación.</param>
        <param name="output">Objeto <see cref="T:System.IO.TextWriter" /> al que se desea enviar el resultado.</param>
        <summary>Transforma los datos XML de <see cref="T:System.Xml.XPath.XPathNavigator" /> utilizando el <paramref name="args" /> especificado y envía el resultado a un <see cref="T:System.IO.TextWriter" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  La <xref:System.Xml.Xsl.XslTransform> clase está obsoleta en la versión 2.0 de .NET Framework. La <xref:System.Xml.Xsl.XslCompiledTransform> clase es el nuevo procesador XSLT. Para obtener más información, consulte [mediante la clase XslCompiledTransform](~/docs/standard/data/xml/using-the-xslcompiledtransform-class.md) y [Migrating From the XslTransform Class](~/docs/standard/data/xml/migrating-from-the-xsltransform-class.md).  
  
 <xref:System.Xml.Xsl.XslTransform> admite la sintaxis de XSLT 1.0. La hoja de estilos XSLT debe incluir la declaración de espacio de nombres `xmlns:xsl= http://www.w3.org/1999/XSL/Transform`.  
  
 El `args` se hacen coincidir con el `xsl:param` elementos definidos en la hoja de estilos. Las selecciones de transformación que se aplican al documento como un todo. En otras palabras, si el nodo actual se establece en un árbol de nodos que no sea el nodo raíz del documento, esto no impide el proceso de transformación de obtener acceso a todos los nodos del documento cargado. Después de realiza la transformación, el <xref:System.Xml.XPath.XPathNavigator> permanece en su estado original. Esto significa que el nodo, que era el actual antes del proceso de transformación, sigue siendo el actual después de la <xref:System.Xml.Xsl.XslTransform.Transform%2A> ha llamado al método.  
  
 El atributo de codificación de un `xsl:output` elemento no se admite cuando la salida se envía a un <xref:System.IO.TextWriter>. Vea [resultados de XslTransform](~/docs/standard/data/xml/outputs-from-an-xsltransform.md) para obtener información específica en la que `xsl:output` atributos son compatibles.  
  
> [!NOTE]
>  Este método ahora está obsoleto. La configuración de la <xref:System.Xml.Xsl.XslTransform.XmlResolver%2A> propiedad determina cómo el XSLT `document()` función se ha resuelto. La práctica recomendada es utilizar la <xref:System.Xml.Xsl.XslTransform.Transform%2A> método que toma un <xref:System.Xml.XmlResolver> objeto como uno de sus argumentos.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Se produjo un error al procesar la transformación XSLT.  
  
 Nota: éste es un cambio de comportamiento respecto a las versiones anteriores. Se inicia una <see cref="T:System.Xml.Xsl.XsltException" /> si usa Microsoft .NET Framework versión 1.1 o anterior.</exception>
        <altmember cref="T:System.Xml.Xsl.XsltArgumentList" />
      </Docs>
    </Member>
    <Member MemberName="Transform">
      <MemberSignature Language="C#" Value="public System.Xml.XmlReader Transform (System.Xml.XPath.XPathNavigator input, System.Xml.Xsl.XsltArgumentList args, System.Xml.XmlResolver resolver);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Xml.XmlReader Transform(class System.Xml.XPath.XPathNavigator input, class System.Xml.Xsl.XsltArgumentList args, class System.Xml.XmlResolver resolver) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Xsl.XslTransform.Transform(System.Xml.XPath.XPathNavigator,System.Xml.Xsl.XsltArgumentList,System.Xml.XmlResolver)" />
      <MemberSignature Language="VB.NET" Value="Public Function Transform (input As XPathNavigator, args As XsltArgumentList, resolver As XmlResolver) As XmlReader" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Xml::XmlReader ^ Transform(System::Xml::XPath::XPathNavigator ^ input, System::Xml::Xsl::XsltArgumentList ^ args, System::Xml::XmlResolver ^ resolver);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlReader</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.Xml.XPath.XPathNavigator" />
        <Parameter Name="args" Type="System.Xml.Xsl.XsltArgumentList" />
        <Parameter Name="resolver" Type="System.Xml.XmlResolver" />
      </Parameters>
      <Docs>
        <param name="input">
          <see cref="T:System.Xml.XPath.XPathNavigator" /> que contiene los datos que se van a transformar.</param>
        <param name="args">Objeto <see cref="T:System.Xml.Xsl.XsltArgumentList" /> que contiene los argumentos calificados con el nombre de espacio de nombres utilizados como entrada para la transformación.</param>
        <param name="resolver">
          <see cref="T:System.Xml.XmlResolver" /> que se usa para resolver la función <c>document()</c> de XSLT. Si es <see langword="null" />, la función <c>document()</c> no se resuelve.  
  
 <see cref="T:System.Xml.XmlResolver" /> no se almacena en caché una vez finalizado el método <see cref="M:System.Xml.Xsl.XslTransform.Transform(System.Xml.XPath.XPathNavigator,System.Xml.Xsl.XsltArgumentList,System.Xml.XmlResolver)" />.</param>
        <summary>Transforma los datos XML de <see cref="T:System.Xml.XPath.XPathNavigator" /> utilizando el <paramref name="args" /> especificado y envía el resultado a un <see cref="T:System.Xml.XmlReader" />.</summary>
        <returns>Objeto <see cref="T:System.Xml.XmlReader" /> que contiene los resultados de la transformación.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  La <xref:System.Xml.Xsl.XslTransform> clase está obsoleta en la versión 2.0 de .NET Framework. La <xref:System.Xml.Xsl.XslCompiledTransform> clase es el nuevo procesador XSLT. Para obtener más información, consulte [mediante la clase XslCompiledTransform](~/docs/standard/data/xml/using-the-xslcompiledtransform-class.md) y [Migrating From the XslTransform Class](~/docs/standard/data/xml/migrating-from-the-xsltransform-class.md).  
  
 <xref:System.Xml.Xsl.XslTransform> admite la sintaxis de XSLT 1.0. La hoja de estilos XSLT debe incluir la declaración de espacio de nombres `xmlns:xsl= http://www.w3.org/1999/XSL/Transform`.  
  
 El `args` se hacen coincidir con el `xsl:param` elementos definidos en la hoja de estilos. Las selecciones de transformación que se aplican al documento como un todo. En otras palabras, si el nodo actual se establece en un árbol de nodos que no sea el nodo raíz del documento, esto no impide el proceso de transformación de obtener acceso a todos los nodos del documento cargado. Después de haber realizado la transformación, el <xref:System.Xml.XPath.XPathNavigator> permanece en su estado original. Esto significa que el nodo, que era el actual antes del proceso de transformación, sigue siendo el actual después de la <xref:System.Xml.Xsl.XslTransform.Transform%2A> ha llamado al método.  
  
 Dado que <xref:System.Xml.XmlReader> proporciona la salida de solo lectura, el `xsl:output` se omite el elemento. Vea [resultados de XslTransform](~/docs/standard/data/xml/outputs-from-an-xsltransform.md) para obtener más información.  
  
 Este método le permite realizar una transformación asincrónica del documento de origen.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Se produjo un error al procesar la transformación XSLT.  
  
 Nota: éste es un cambio de comportamiento respecto a las versiones anteriores. Se inicia una <see cref="T:System.Xml.Xsl.XsltException" /> si usa Microsoft .NET Framework versión 1.1 o anterior.</exception>
        <altmember cref="T:System.Xml.XmlSecureResolver" />
      </Docs>
    </Member>
    <Member MemberName="Transform">
      <MemberSignature Language="C#" Value="public void Transform (System.Xml.XPath.XPathNavigator input, System.Xml.Xsl.XsltArgumentList args, System.Xml.XmlWriter output);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Transform(class System.Xml.XPath.XPathNavigator input, class System.Xml.Xsl.XsltArgumentList args, class System.Xml.XmlWriter output) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Xsl.XslTransform.Transform(System.Xml.XPath.XPathNavigator,System.Xml.Xsl.XsltArgumentList,System.Xml.XmlWriter)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Transform (input As XPathNavigator, args As XsltArgumentList, output As XmlWriter)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Transform(System::Xml::XPath::XPathNavigator ^ input, System::Xml::Xsl::XsltArgumentList ^ args, System::Xml::XmlWriter ^ output);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.Xml.XPath.XPathNavigator" />
        <Parameter Name="args" Type="System.Xml.Xsl.XsltArgumentList" />
        <Parameter Name="output" Type="System.Xml.XmlWriter" />
      </Parameters>
      <Docs>
        <param name="input">
          <see cref="T:System.Xml.XPath.XPathNavigator" /> que contiene los datos que se van a transformar.</param>
        <param name="args">Objeto <see cref="T:System.Xml.Xsl.XsltArgumentList" /> que contiene los argumentos calificados con el nombre de espacio de nombres utilizados como entrada para la transformación.</param>
        <param name="output">Objeto <see cref="T:System.Xml.XmlWriter" /> al que se desea enviar el resultado.</param>
        <summary>Transforma los datos XML de <see cref="T:System.Xml.XPath.XPathNavigator" /> utilizando los argumentos especificados y envía el resultado a un <see cref="T:System.Xml.XmlWriter" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  La <xref:System.Xml.Xsl.XslTransform> clase está obsoleta en la versión 2.0 de .NET Framework. La <xref:System.Xml.Xsl.XslCompiledTransform> clase es el nuevo procesador XSLT. Para obtener más información, consulte [mediante la clase XslCompiledTransform](~/docs/standard/data/xml/using-the-xslcompiledtransform-class.md) y [Migrating From the XslTransform Class](~/docs/standard/data/xml/migrating-from-the-xsltransform-class.md).  
  
 <xref:System.Xml.Xsl.XslTransform> admite la sintaxis de XSLT 1.0. La hoja de estilos XSLT debe incluir la declaración de espacio de nombres `xmlns:xsl= http://www.w3.org/1999/XSL/Transform`.  
  
 El `args` se hacen coincidir con el `xsl:param` elementos definidos en la hoja de estilos. Las selecciones de transformación que se aplican al documento como un todo. En otras palabras, si el nodo actual se establece en un árbol de nodos que no sea el nodo raíz del documento, esto no impide el proceso de transformación de obtener acceso a todos los nodos del documento cargado. Después de realiza la transformación, el <xref:System.Xml.XPath.XPathNavigator> permanece en su estado original. Esto significa que el nodo, que era el actual antes del proceso de transformación, sigue siendo el actual después de la <xref:System.Xml.Xsl.XslTransform.Transform%2A> ha llamado al método.  
  
 El `xsl:output` elemento no se admite cuando la salida se envía a un <xref:System.Xml.XmlWriter> (`xsl:output` se pasa por alto). Vea [resultados de XslTransform](~/docs/standard/data/xml/outputs-from-an-xsltransform.md) para obtener más información.  
  
> [!NOTE]
>  Este método ahora está obsoleto. La configuración de la <xref:System.Xml.Xsl.XslTransform.XmlResolver%2A> propiedad determina cómo el XSLT `document()` función se ha resuelto. La práctica recomendada es utilizar la <xref:System.Xml.Xsl.XslTransform.Transform%2A> método que toma un <xref:System.Xml.XmlResolver> objeto como uno de sus argumentos.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Se produjo un error al procesar la transformación XSLT.  
  
 Nota: éste es un cambio de comportamiento respecto a las versiones anteriores. Se inicia una <see cref="T:System.Xml.Xsl.XsltException" /> si usa Microsoft .NET Framework versión 1.1 o anterior.</exception>
        <altmember cref="T:System.Xml.Xsl.XsltArgumentList" />
      </Docs>
    </Member>
    <Member MemberName="Transform">
      <MemberSignature Language="C#" Value="public void Transform (System.Xml.XPath.IXPathNavigable input, System.Xml.Xsl.XsltArgumentList args, System.IO.Stream output, System.Xml.XmlResolver resolver);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Transform(class System.Xml.XPath.IXPathNavigable input, class System.Xml.Xsl.XsltArgumentList args, class System.IO.Stream output, class System.Xml.XmlResolver resolver) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Xsl.XslTransform.Transform(System.Xml.XPath.IXPathNavigable,System.Xml.Xsl.XsltArgumentList,System.IO.Stream,System.Xml.XmlResolver)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Transform (input As IXPathNavigable, args As XsltArgumentList, output As Stream, resolver As XmlResolver)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Transform(System::Xml::XPath::IXPathNavigable ^ input, System::Xml::Xsl::XsltArgumentList ^ args, System::IO::Stream ^ output, System::Xml::XmlResolver ^ resolver);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.Xml.XPath.IXPathNavigable" />
        <Parameter Name="args" Type="System.Xml.Xsl.XsltArgumentList" />
        <Parameter Name="output" Type="System.IO.Stream" />
        <Parameter Name="resolver" Type="System.Xml.XmlResolver" />
      </Parameters>
      <Docs>
        <param name="input">Objeto que implementa la interfaz <see cref="T:System.Xml.XPath.IXPathNavigable" />. En .NET Framework, puede ser un objeto <see cref="T:System.Xml.XmlNode" /> (normalmente, <see cref="T:System.Xml.XmlDocument" />) o un objeto <see cref="T:System.Xml.XPath.XPathDocument" /> que contiene los datos que se van a transformar.</param>
        <param name="args">Objeto <see cref="T:System.Xml.Xsl.XsltArgumentList" /> que contiene los argumentos calificados con el nombre de espacio de nombres utilizados como entrada para la transformación.</param>
        <param name="output">Flujo al que se desea enviar la salida.</param>
        <param name="resolver">
          <see cref="T:System.Xml.XmlResolver" /> que se usa para resolver la función <c>document()</c> de XSLT. Si es <see langword="null" />, la función <c>document()</c> no se resuelve.  
  
 <see cref="T:System.Xml.XmlResolver" /> no se almacena en caché una vez finalizado el método <see cref="Overload:System.Xml.Xsl.XslTransform.Transform" />.</param>
        <summary>Transforma los datos XML de <see cref="T:System.Xml.XPath.IXPathNavigable" /> utilizando el <paramref name="args" /> especificado y envía el resultado a un <see cref="T:System.IO.Stream" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  La <xref:System.Xml.Xsl.XslTransform> clase está obsoleta en la versión 2.0 de .NET Framework. La <xref:System.Xml.Xsl.XslCompiledTransform> clase es el nuevo procesador XSLT. Para obtener más información, consulte [mediante la clase XslCompiledTransform](~/docs/standard/data/xml/using-the-xslcompiledtransform-class.md) y [Migrating From the XslTransform Class](~/docs/standard/data/xml/migrating-from-the-xsltransform-class.md).  
  
 <xref:System.Xml.Xsl.XslTransform> admite la sintaxis de XSLT 1.0. La hoja de estilos XSLT debe incluir la declaración de espacio de nombres `xmlns:xsl= http://www.w3.org/1999/XSL/Transform`.  
  
 El `args` se hacen coincidir con el `xsl:param` elementos definidos en la hoja de estilos.  
  
 Las transformaciones se aplican al documento en su totalidad. En otras palabras, si se pasa un nodo distinto del nodo raíz del documento, esto no evita que el proceso de transformación pueda obtener acceso a todos los nodos del documento cargado. Para transformar un fragmento de nodo, debe crear un <xref:System.Xml.XmlDocument> que contiene solo el nodo del fragmento y pasar ese <xref:System.Xml.XmlDocument> a la <xref:System.Xml.Xsl.XslTransform.Transform%2A> método.  
  
 En el ejemplo siguiente se realiza una transformación en un fragmento de nodo.  
  
```  
XslTransform xslt = new XslTransform();       
xslt.Load("print_root.xsl");  
XmlDocument doc = new XmlDocument();  
doc.Load("library.xml");  
// Create a new document containing just the node fragment.  
XmlNode testNode = doc.DocumentElement.FirstChild;   
XmlDocument tmpDoc = new XmlDocument();   
tmpDoc.LoadXml(testNode.OuterXml);  
// Pass the document containing the node fragment   
// to the Transform method.  
Console.WriteLine("Passing " + tmpDoc.OuterXml + " to print_root.xsl");  
xslt.Transform(tmpDoc, null, Console.Out, null);  
```  
  
 El ejemplo se utiliza la `library.xml` y `print_root.xsl` archivos como entrada y genera el siguiente en la consola.  
  
```  
Passing <book genre="novel" ISBN="1-861001-57-5"><title>Pride And Prejudice</title></book> to print_root.xsl   
Root node is book.  
```  
  
 `library.xml`  
  
```  
<library>  
  <book genre='novel' ISBN='1-861001-57-5'>  
     <title>Pride And Prejudice</title>  
  </book>  
  <book genre='novel' ISBN='1-81920-21-2'>  
     <title>Hook</title>  
  </book>  
</library>  
```  
  
 `print_root.xsl`  
  
```  
<style sheet version="1.0" xmlns="http://www.w3.org/1999/XSL/Transform" >  
  <output method="text" />   
  <template match="/">  
     Root node is  <value-of select="local-name(//*[position() = 1])" />   
  </template>  
</style sheet>  
```  
  
   
  
## Examples  
 En el ejemplo siguiente se realiza una transformación dentro de una página ASP.NET.  
  
 [!code-aspx-csharp[XslTransform.Transform5#1](~/samples/snippets/csharp/VS_Snippets_Data/XslTransform.Transform5/CS/transcs.aspx#1)]
 [!code-aspx-vb[XslTransform.Transform5#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XslTransform.Transform5/VB/transvb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Se produjo un error al procesar la transformación XSLT.  
  
 Nota: éste es un cambio de comportamiento respecto a las versiones anteriores. Se inicia una <see cref="T:System.Xml.Xsl.XsltException" /> si usa Microsoft .NET Framework versión 1.1 o anterior.</exception>
        <altmember cref="T:System.Xml.XmlSecureResolver" />
        <altmember cref="P:System.Xml.XmlResolver.Credentials" />
      </Docs>
    </Member>
    <Member MemberName="Transform">
      <MemberSignature Language="C#" Value="public void Transform (System.Xml.XPath.IXPathNavigable input, System.Xml.Xsl.XsltArgumentList args, System.IO.TextWriter output, System.Xml.XmlResolver resolver);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Transform(class System.Xml.XPath.IXPathNavigable input, class System.Xml.Xsl.XsltArgumentList args, class System.IO.TextWriter output, class System.Xml.XmlResolver resolver) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Xsl.XslTransform.Transform(System.Xml.XPath.IXPathNavigable,System.Xml.Xsl.XsltArgumentList,System.IO.TextWriter,System.Xml.XmlResolver)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Transform (input As IXPathNavigable, args As XsltArgumentList, output As TextWriter, resolver As XmlResolver)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Transform(System::Xml::XPath::IXPathNavigable ^ input, System::Xml::Xsl::XsltArgumentList ^ args, System::IO::TextWriter ^ output, System::Xml::XmlResolver ^ resolver);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.Xml.XPath.IXPathNavigable" />
        <Parameter Name="args" Type="System.Xml.Xsl.XsltArgumentList" />
        <Parameter Name="output" Type="System.IO.TextWriter" />
        <Parameter Name="resolver" Type="System.Xml.XmlResolver" />
      </Parameters>
      <Docs>
        <param name="input">Objeto que implementa la interfaz <see cref="T:System.Xml.XPath.IXPathNavigable" />. En .NET Framework, puede ser un objeto <see cref="T:System.Xml.XmlNode" /> (normalmente, <see cref="T:System.Xml.XmlDocument" />) o un objeto <see cref="T:System.Xml.XPath.XPathDocument" /> que contiene los datos que se van a transformar.</param>
        <param name="args">Objeto <see cref="T:System.Xml.Xsl.XsltArgumentList" /> que contiene los argumentos calificados con el nombre de espacio de nombres utilizados como entrada para la transformación.</param>
        <param name="output">Objeto <see cref="T:System.IO.TextWriter" /> al que se desea enviar el resultado.</param>
        <param name="resolver">
          <see cref="T:System.Xml.XmlResolver" /> que se usa para resolver la función <c>document()</c> de XSLT. Si es <see langword="null" />, la función <c>document()</c> no se resuelve.  
  
 <see cref="T:System.Xml.XmlResolver" /> no se almacena en caché una vez finalizado el método <see cref="M:System.Xml.Xsl.XslTransform.Transform(System.Xml.XPath.IXPathNavigable,System.Xml.Xsl.XsltArgumentList,System.IO.TextWriter,System.Xml.XmlResolver)" />.</param>
        <summary>Transforma los datos XML de <see cref="T:System.Xml.XPath.IXPathNavigable" /> utilizando el <paramref name="args" /> especificado y envía el resultado a un <see cref="T:System.IO.TextWriter" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  La <xref:System.Xml.Xsl.XslTransform> clase está obsoleta en la versión 2.0 de .NET Framework. La <xref:System.Xml.Xsl.XslCompiledTransform> clase es el nuevo procesador XSLT. Para obtener más información, consulte [mediante la clase XslCompiledTransform](~/docs/standard/data/xml/using-the-xslcompiledtransform-class.md) y [Migrating From the XslTransform Class](~/docs/standard/data/xml/migrating-from-the-xsltransform-class.md).  
  
 <xref:System.Xml.Xsl.XslTransform> admite la sintaxis de XSLT 1.0. La hoja de estilos XSLT debe incluir la declaración de espacio de nombres `xmlns:xsl= http://www.w3.org/1999/XSL/Transform`.  
  
 El `args` se hacen coincidir con el `xsl:param` elementos definidos en la hoja de estilos.  
  
 El atributo de codificación de un `xsl:output` elemento no se admite cuando la salida se envía a un <xref:System.IO.TextWriter>. Vea [resultados de XslTransform](~/docs/standard/data/xml/outputs-from-an-xsltransform.md) para obtener información específica en la que `xsl:output` atributos son compatibles.  
  
 Las transformaciones se aplican al documento en su totalidad. En otras palabras, si se pasa un nodo distinto del nodo raíz del documento, esto no evita que el proceso de transformación pueda obtener acceso a todos los nodos del documento cargado. Para transformar un fragmento de nodo, debe crear un <xref:System.Xml.XmlDocument> que contiene solo el nodo del fragmento y pasar ese <xref:System.Xml.XmlDocument> a la <xref:System.Xml.Xsl.XslTransform.Transform%2A> método.  
  
 En el ejemplo siguiente se realiza una transformación en un fragmento de nodo.  
  
```  
XslTransform xslt = new XslTransform();       
xslt.Load("print_root.xsl");  
XmlDocument doc = new XmlDocument();  
doc.Load("library.xml");  
// Create a new document containing just the node fragment.  
XmlNode testNode = doc.DocumentElement.FirstChild;   
XmlDocument tmpDoc = new XmlDocument();   
tmpDoc.LoadXml(testNode.OuterXml);  
// Pass the document containing the node fragment   
// to the Transform method.  
Console.WriteLine("Passing " + tmpDoc.OuterXml + " to print_root.xsl");  
xslt.Transform(tmpDoc, null, Console.Out, null);  
```  
  
 El ejemplo se utiliza la `library.xml` y `print_root.xsl` archivos como entrada y genera el siguiente en la consola.  
  
```  
Passing <book genre="novel" ISBN="1-861001-57-5"><title>Pride And Prejudice</title></book> to print_root.xsl   
Root node is book.  
```  
  
 `library.xml`  
  
```  
<library>  
  <book genre='novel' ISBN='1-861001-57-5'>  
     <title>Pride And Prejudice</title>  
  </book>  
  <book genre='novel' ISBN='1-81920-21-2'>  
     <title>Hook</title>  
  </book>  
</library>  
```  
  
 `print_root.xsl`  
  
```  
<style sheet version="1.0" xmlns="http://www.w3.org/1999/XSL/Transform" >  
  <output method="text" />   
  <template match="/">  
     Root node is  <value-of select="local-name(//*[position() = 1])" />   
  </template>  
</style sheet>  
```  
  
   
  
## Examples  
 El siguiente ejemplo transforma un archivo XML y genera una cadena HTML. El <xref:System.IO.StringReader> y <xref:System.IO.StringWriter> clases se utilizan para leer y escribir las cadenas.  
  
 [!code-csharp[XslTransform.Transform6#1](~/samples/snippets/csharp/VS_Snippets_Data/XslTransform.Transform6/CS/transstring.cs#1)]
 [!code-vb[XslTransform.Transform6#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XslTransform.Transform6/VB/transstring.vb#1)]  
  
 En el ejemplo se utiliza como entrada el archivo `books.xml`.  
  
 [!code-xml[XslTransform.Transform6#2](~/samples/snippets/xml/VS_Snippets_Data/XslTransform.Transform6/XML/books.xml#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Se produjo un error al procesar la transformación XSLT.  
  
 Nota: éste es un cambio de comportamiento respecto a las versiones anteriores. Se inicia una <see cref="T:System.Xml.Xsl.XsltException" /> si usa Microsoft .NET Framework versión 1.1 o anterior.</exception>
        <altmember cref="T:System.Xml.XmlSecureResolver" />
        <altmember cref="P:System.Xml.XmlResolver.Credentials" />
      </Docs>
    </Member>
    <Member MemberName="Transform">
      <MemberSignature Language="C#" Value="public void Transform (System.Xml.XPath.IXPathNavigable input, System.Xml.Xsl.XsltArgumentList args, System.Xml.XmlWriter output, System.Xml.XmlResolver resolver);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Transform(class System.Xml.XPath.IXPathNavigable input, class System.Xml.Xsl.XsltArgumentList args, class System.Xml.XmlWriter output, class System.Xml.XmlResolver resolver) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Xsl.XslTransform.Transform(System.Xml.XPath.IXPathNavigable,System.Xml.Xsl.XsltArgumentList,System.Xml.XmlWriter,System.Xml.XmlResolver)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Transform (input As IXPathNavigable, args As XsltArgumentList, output As XmlWriter, resolver As XmlResolver)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Transform(System::Xml::XPath::IXPathNavigable ^ input, System::Xml::Xsl::XsltArgumentList ^ args, System::Xml::XmlWriter ^ output, System::Xml::XmlResolver ^ resolver);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.Xml.XPath.IXPathNavigable" />
        <Parameter Name="args" Type="System.Xml.Xsl.XsltArgumentList" />
        <Parameter Name="output" Type="System.Xml.XmlWriter" />
        <Parameter Name="resolver" Type="System.Xml.XmlResolver" />
      </Parameters>
      <Docs>
        <param name="input">Objeto que implementa la interfaz <see cref="T:System.Xml.XPath.IXPathNavigable" />. En .NET Framework, puede ser un objeto <see cref="T:System.Xml.XmlNode" /> (normalmente, <see cref="T:System.Xml.XmlDocument" />) o un objeto <see cref="T:System.Xml.XPath.XPathDocument" /> que contiene los datos que se van a transformar.</param>
        <param name="args">Objeto <see cref="T:System.Xml.Xsl.XsltArgumentList" /> que contiene los argumentos calificados con el nombre de espacio de nombres utilizados como entrada para la transformación.</param>
        <param name="output">Objeto <see cref="T:System.Xml.XmlWriter" /> al que se desea enviar el resultado.</param>
        <param name="resolver">
          <see cref="T:System.Xml.XmlResolver" /> que se usa para resolver la función <c>document()</c> de XSLT. Si es <see langword="null" />, la función <c>document()</c> no se resuelve.  
  
 <see cref="T:System.Xml.XmlResolver" /> no se almacena en caché una vez finalizado el método <see cref="M:System.Xml.Xsl.XslTransform.Transform(System.Xml.XPath.IXPathNavigable,System.Xml.Xsl.XsltArgumentList,System.Xml.XmlWriter,System.Xml.XmlResolver)" />.</param>
        <summary>Transforma los datos XML de <see cref="T:System.Xml.XPath.IXPathNavigable" /> utilizando el <paramref name="args" /> especificado y envía el resultado a un <see cref="T:System.Xml.XmlWriter" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  La <xref:System.Xml.Xsl.XslTransform> clase está obsoleta en la versión 2.0 de .NET Framework. La <xref:System.Xml.Xsl.XslCompiledTransform> clase es el nuevo procesador XSLT. Para obtener más información, consulte [mediante la clase XslCompiledTransform](~/docs/standard/data/xml/using-the-xslcompiledtransform-class.md) y [Migrating From the XslTransform Class](~/docs/standard/data/xml/migrating-from-the-xsltransform-class.md).  
  
 <xref:System.Xml.Xsl.XslTransform> admite la sintaxis de XSLT 1.0. La hoja de estilos XSLT debe incluir la declaración de espacio de nombres `xmlns:xsl= http://www.w3.org/1999/XSL/Transform`.  
  
 El `args` se hacen coincidir con el `xsl:param` elementos definidos en la hoja de estilos. El `xsl:output` elemento no se admite cuando la salida se envía a un <xref:System.Xml.XmlWriter> (`xsl:output` se pasa por alto). Vea [resultados de XslTransform](~/docs/standard/data/xml/outputs-from-an-xsltransform.md) para obtener más información.  
  
 Las transformaciones se aplican al documento en su totalidad. En otras palabras, si se pasa un nodo distinto del nodo raíz del documento, esto no evita que el proceso de transformación pueda obtener acceso a todos los nodos del documento cargado. Para transformar un fragmento de nodo, debe crear un <xref:System.Xml.XmlDocument> que contiene solo el nodo del fragmento y pasar ese <xref:System.Xml.XmlDocument> a la <xref:System.Xml.Xsl.XslTransform.Transform%2A> método.  
  
 En el ejemplo siguiente se realiza una transformación en un fragmento de nodo.  
  
```  
XslTransform xslt = new XslTransform();       
xslt.Load("print_root.xsl");  
XmlDocument doc = new XmlDocument();  
doc.Load("library.xml");  
// Create a new document containing just the node fragment.  
XmlNode testNode = doc.DocumentElement.FirstChild;   
XmlDocument tmpDoc = new XmlDocument();   
tmpDoc.LoadXml(testNode.OuterXml);  
// Pass the document containing the node fragment   
// to the Transform method.  
Console.WriteLine("Passing " + tmpDoc.OuterXml + " to print_root.xsl");  
xslt.Transform(tmpDoc, null, Console.Out, null);  
```  
  
 El ejemplo se utiliza la `library.xml` y `print_root.xsl` archivos como entrada y genera el siguiente en la consola.  
  
```  
Passing <book genre="novel" ISBN="1-861001-57-5"><title>Pride And Prejudice</title></book> to print_root.xsl   
Root node is book.  
```  
  
 `library.xml`  
  
```  
<library>  
  <book genre='novel' ISBN='1-861001-57-5'>  
     <title>Pride And Prejudice</title>  
  </book>  
  <book genre='novel' ISBN='1-81920-21-2'>  
     <title>Hook</title>  
  </book>  
</library>  
```  
  
 `print_root.xsl`  
  
```  
<style sheet version="1.0" xmlns="http://www.w3.org/1999/XSL/Transform" >  
  <output method="text" />  
  <template match="/">  
  Root node is  <value-of select="local-name(//*[position() = 1])" />   
  </template>  
</style sheet>  
```  
  
   
  
## Examples  
 En el siguiente ejemplo se transforma un documento XML en un documento HTML. Muestra el ISBN, el título y el precio de cada libro en una tabla.  
  
 [!code-cpp[Classic WebData XslTransform.Transform7 Example#1](~/samples/snippets/cpp/VS_Snippets_Data/Classic WebData XslTransform.Transform7 Example/CPP/source.cpp#1)]
 [!code-csharp[Classic WebData XslTransform.Transform7 Example#1](~/samples/snippets/csharp/VS_Snippets_Data/Classic WebData XslTransform.Transform7 Example/CS/source.cs#1)]
 [!code-vb[Classic WebData XslTransform.Transform7 Example#1](~/samples/snippets/visualbasic/VS_Snippets_Data/Classic WebData XslTransform.Transform7 Example/VB/source.vb#1)]  
  
 En el ejemplo se utilizan los dos archivos de entrada siguientes.  
  
 `books.xml`  
  
 [!code-xml[Classic WebData XslTransform.Transform7 Example#2](~/samples/snippets/xml/VS_Snippets_Data/Classic WebData XslTransform.Transform7 Example/XML/books.xml#2)]  
  
 `output.xsl`  
  
 [!code-xml[Classic WebData XslTransform.Transform7 Example#3](~/samples/snippets/xml/VS_Snippets_Data/Classic WebData XslTransform.Transform7 Example/XML/output.xsl#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Se produjo un error al procesar la transformación XSLT.  
  
 Nota: éste es un cambio de comportamiento respecto a las versiones anteriores. Se inicia una <see cref="T:System.Xml.Xsl.XsltException" /> si usa Microsoft .NET Framework versión 1.1 o anterior.</exception>
        <altmember cref="T:System.Xml.XmlSecureResolver" />
        <altmember cref="P:System.Xml.XmlResolver.Credentials" />
      </Docs>
    </Member>
    <Member MemberName="Transform">
      <MemberSignature Language="C#" Value="public void Transform (System.Xml.XPath.XPathNavigator input, System.Xml.Xsl.XsltArgumentList args, System.IO.Stream output, System.Xml.XmlResolver resolver);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Transform(class System.Xml.XPath.XPathNavigator input, class System.Xml.Xsl.XsltArgumentList args, class System.IO.Stream output, class System.Xml.XmlResolver resolver) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Xsl.XslTransform.Transform(System.Xml.XPath.XPathNavigator,System.Xml.Xsl.XsltArgumentList,System.IO.Stream,System.Xml.XmlResolver)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Transform (input As XPathNavigator, args As XsltArgumentList, output As Stream, resolver As XmlResolver)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Transform(System::Xml::XPath::XPathNavigator ^ input, System::Xml::Xsl::XsltArgumentList ^ args, System::IO::Stream ^ output, System::Xml::XmlResolver ^ resolver);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.Xml.XPath.XPathNavigator" />
        <Parameter Name="args" Type="System.Xml.Xsl.XsltArgumentList" />
        <Parameter Name="output" Type="System.IO.Stream" />
        <Parameter Name="resolver" Type="System.Xml.XmlResolver" />
      </Parameters>
      <Docs>
        <param name="input">
          <see cref="T:System.Xml.XPath.XPathNavigator" /> que contiene los datos que se van a transformar.</param>
        <param name="args">Objeto <see cref="T:System.Xml.Xsl.XsltArgumentList" /> que contiene los argumentos calificados con el nombre de espacio de nombres utilizados como entrada para la transformación.</param>
        <param name="output">Flujo al que se desea enviar la salida.</param>
        <param name="resolver">
          <see cref="T:System.Xml.XmlResolver" /> que se usa para resolver la función <c>document()</c> de XSLT. Si es <see langword="null" />, la función <c>document()</c> no se resuelve.  
  
 <see cref="T:System.Xml.XmlResolver" /> no se almacena en caché una vez finalizado el método <see cref="M:System.Xml.Xsl.XslTransform.Transform(System.Xml.XPath.XPathNavigator,System.Xml.Xsl.XsltArgumentList,System.IO.Stream,System.Xml.XmlResolver)" />.</param>
        <summary>Transforma los datos XML de <see cref="T:System.Xml.XPath.XPathNavigator" /> utilizando el <paramref name="args" /> especificado y envía el resultado a un <see cref="T:System.IO.Stream" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  La <xref:System.Xml.Xsl.XslTransform> clase está obsoleta en la versión 2.0 de .NET Framework. La <xref:System.Xml.Xsl.XslCompiledTransform> clase es el nuevo procesador XSLT. Para obtener más información, consulte [mediante la clase XslCompiledTransform](~/docs/standard/data/xml/using-the-xslcompiledtransform-class.md) y [Migrating From the XslTransform Class](~/docs/standard/data/xml/migrating-from-the-xsltransform-class.md).  
  
 <xref:System.Xml.Xsl.XslTransform> admite la sintaxis de XSLT 1.0. La hoja de estilos XSLT debe incluir la declaración de espacio de nombres `xmlns:xsl= http://www.w3.org/1999/XSL/Transform`.  
  
 El `args` se hacen coincidir con el `xsl:param` elementos definidos en la hoja de estilos. Las selecciones de transformación que se aplican al documento como un todo. En otras palabras, si el nodo actual se establece en un árbol de nodos que no sea el nodo raíz del documento, esto no impide el proceso de transformación de obtener acceso a todos los nodos del documento cargado. Después de haber realizado la transformación, el <xref:System.Xml.XPath.XPathNavigator> permanece en su estado original. Esto significa que el nodo, que era el actual antes del proceso de transformación, sigue siendo el actual después de la <xref:System.Xml.Xsl.XslTransform.Transform%2A> ha llamado al método.  
  
 Vea [resultados de XslTransform](~/docs/standard/data/xml/outputs-from-an-xsltransform.md) para obtener información específica en la que `xsl:output` atributos son compatibles.  
  
   
  
## Examples  
 En el ejemplo siguiente se carga una tabla de clientes en un <xref:System.Xml.XmlDataDocument> y realiza una transformación XSLT para extraer los datos del cliente en una tabla HTML. El ejemplo utiliza la base de datos Northwind de Microsoft SQL Server 2000.  
  
 [!code-csharp[XmlDataDocument.CreateNavigator#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlDataDocument.CreateNavigator/CS/dataset_trans.cs#1)]
 [!code-vb[XmlDataDocument.CreateNavigator#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlDataDocument.CreateNavigator/VB/dataset_trans.vb#1)]  
  
 En el ejemplo se utiliza como entrada el archivo `customers.xsl`.  
  
 [!code-xml[XmlDataDocument.CreateNavigator#2](~/samples/snippets/xml/VS_Snippets_Data/XmlDataDocument.CreateNavigator/XML/customers.xsl#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Se produjo un error al procesar la transformación XSLT.  
  
 Nota: éste es un cambio de comportamiento respecto a las versiones anteriores. Se inicia una <see cref="T:System.Xml.Xsl.XsltException" /> si usa Microsoft .NET Framework versión 1.1 o anterior.</exception>
        <altmember cref="T:System.Xml.Xsl.XsltArgumentList" />
        <altmember cref="T:System.Xml.XmlSecureResolver" />
        <altmember cref="P:System.Xml.XmlResolver.Credentials" />
      </Docs>
    </Member>
    <Member MemberName="Transform">
      <MemberSignature Language="C#" Value="public void Transform (System.Xml.XPath.XPathNavigator input, System.Xml.Xsl.XsltArgumentList args, System.IO.TextWriter output, System.Xml.XmlResolver resolver);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Transform(class System.Xml.XPath.XPathNavigator input, class System.Xml.Xsl.XsltArgumentList args, class System.IO.TextWriter output, class System.Xml.XmlResolver resolver) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Xsl.XslTransform.Transform(System.Xml.XPath.XPathNavigator,System.Xml.Xsl.XsltArgumentList,System.IO.TextWriter,System.Xml.XmlResolver)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Transform (input As XPathNavigator, args As XsltArgumentList, output As TextWriter, resolver As XmlResolver)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Transform(System::Xml::XPath::XPathNavigator ^ input, System::Xml::Xsl::XsltArgumentList ^ args, System::IO::TextWriter ^ output, System::Xml::XmlResolver ^ resolver);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.Xml.XPath.XPathNavigator" />
        <Parameter Name="args" Type="System.Xml.Xsl.XsltArgumentList" />
        <Parameter Name="output" Type="System.IO.TextWriter" />
        <Parameter Name="resolver" Type="System.Xml.XmlResolver" />
      </Parameters>
      <Docs>
        <param name="input">
          <see cref="T:System.Xml.XPath.XPathNavigator" /> que contiene los datos que se van a transformar.</param>
        <param name="args">Objeto <see cref="T:System.Xml.Xsl.XsltArgumentList" /> que contiene los argumentos calificados con el nombre de espacio de nombres utilizados como entrada para la transformación.</param>
        <param name="output">Objeto <see cref="T:System.IO.TextWriter" /> al que se desea enviar el resultado.</param>
        <param name="resolver">
          <see cref="T:System.Xml.XmlResolver" /> que se usa para resolver la función <c>document()</c> de XSLT. Si es <see langword="null" />, la función <c>document()</c> no se resuelve.  
  
 <see cref="T:System.Xml.XmlResolver" /> no se almacena en caché una vez finalizado el método <see cref="M:System.Xml.Xsl.XslTransform.Transform(System.Xml.XPath.XPathNavigator,System.Xml.Xsl.XsltArgumentList,System.IO.TextWriter,System.Xml.XmlResolver)" />.</param>
        <summary>Transforma los datos XML de <see cref="T:System.Xml.XPath.XPathNavigator" /> utilizando el <paramref name="args" /> especificado y envía el resultado a un <see cref="T:System.IO.TextWriter" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  La <xref:System.Xml.Xsl.XslTransform> clase está obsoleta en la versión 2.0 de .NET Framework. La <xref:System.Xml.Xsl.XslCompiledTransform> clase es el nuevo procesador XSLT. Para obtener más información, consulte [mediante la clase XslCompiledTransform](~/docs/standard/data/xml/using-the-xslcompiledtransform-class.md) y [Migrating From the XslTransform Class](~/docs/standard/data/xml/migrating-from-the-xsltransform-class.md).  
  
 <xref:System.Xml.Xsl.XslTransform> admite la sintaxis de XSLT 1.0. La hoja de estilos XSLT debe incluir la declaración de espacio de nombres `xmlns:xsl= http://www.w3.org/1999/XSL/Transform`.  
  
 El `args` se hacen coincidir con el `xsl:param` elementos definidos en la hoja de estilos. Las selecciones de transformación que se aplican al documento como un todo. En otras palabras, si el nodo actual se establece en un árbol de nodos que no sea el nodo raíz del documento, esto no impide el proceso de transformación de obtener acceso a todos los nodos del documento cargado. Después de realiza la transformación, el <xref:System.Xml.XPath.XPathNavigator> permanece en su estado original. Esto significa que el nodo, que era el actual antes del proceso de transformación, sigue siendo el actual después de la <xref:System.Xml.Xsl.XslTransform.Transform%2A> ha llamado al método.  
  
 El atributo de codificación de un `xsl:output` elemento no se admite cuando la salida se envía a un <xref:System.IO.TextWriter>. Vea [resultados de XslTransform](~/docs/standard/data/xml/outputs-from-an-xsltransform.md) para obtener información específica en la que `xsl:output` atributos son compatibles.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Se produjo un error al procesar la transformación XSLT.  
  
 Nota: éste es un cambio de comportamiento respecto a las versiones anteriores. Se inicia una <see cref="T:System.Xml.Xsl.XsltException" /> si usa Microsoft .NET Framework versión 1.1 o anterior.</exception>
        <altmember cref="T:System.Xml.Xsl.XsltArgumentList" />
        <altmember cref="T:System.Xml.XmlSecureResolver" />
        <altmember cref="P:System.Xml.XmlResolver.Credentials" />
      </Docs>
    </Member>
    <Member MemberName="Transform">
      <MemberSignature Language="C#" Value="public void Transform (System.Xml.XPath.XPathNavigator input, System.Xml.Xsl.XsltArgumentList args, System.Xml.XmlWriter output, System.Xml.XmlResolver resolver);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Transform(class System.Xml.XPath.XPathNavigator input, class System.Xml.Xsl.XsltArgumentList args, class System.Xml.XmlWriter output, class System.Xml.XmlResolver resolver) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Xsl.XslTransform.Transform(System.Xml.XPath.XPathNavigator,System.Xml.Xsl.XsltArgumentList,System.Xml.XmlWriter,System.Xml.XmlResolver)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Transform (input As XPathNavigator, args As XsltArgumentList, output As XmlWriter, resolver As XmlResolver)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Transform(System::Xml::XPath::XPathNavigator ^ input, System::Xml::Xsl::XsltArgumentList ^ args, System::Xml::XmlWriter ^ output, System::Xml::XmlResolver ^ resolver);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.Xml.XPath.XPathNavigator" />
        <Parameter Name="args" Type="System.Xml.Xsl.XsltArgumentList" />
        <Parameter Name="output" Type="System.Xml.XmlWriter" />
        <Parameter Name="resolver" Type="System.Xml.XmlResolver" />
      </Parameters>
      <Docs>
        <param name="input">
          <see cref="T:System.Xml.XPath.XPathNavigator" /> que contiene los datos que se van a transformar.</param>
        <param name="args">Objeto <see cref="T:System.Xml.Xsl.XsltArgumentList" /> que contiene los argumentos calificados con el nombre de espacio de nombres utilizados como entrada para la transformación.</param>
        <param name="output">Objeto <see cref="T:System.Xml.XmlWriter" /> al que se desea enviar el resultado.</param>
        <param name="resolver">
          <see cref="T:System.Xml.XmlResolver" /> que se usa para resolver la función <c>document()</c> de XSLT. Si es <see langword="null" />, la función <c>document()</c> no se resuelve.  
  
 <see cref="T:System.Xml.XmlResolver" /> no se almacena en caché una vez finalizado el método <see cref="M:System.Xml.Xsl.XslTransform.Transform(System.Xml.XPath.XPathNavigator,System.Xml.Xsl.XsltArgumentList,System.Xml.XmlWriter,System.Xml.XmlResolver)" />.</param>
        <summary>Transforma los datos XML de <see cref="T:System.Xml.XPath.XPathNavigator" /> utilizando los argumentos especificados y envía el resultado a un <see cref="T:System.Xml.XmlWriter" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  La <xref:System.Xml.Xsl.XslTransform> clase está obsoleta en la versión 2.0 de .NET Framework. La <xref:System.Xml.Xsl.XslCompiledTransform> clase es el nuevo procesador XSLT. Para obtener más información, consulte [mediante la clase XslCompiledTransform](~/docs/standard/data/xml/using-the-xslcompiledtransform-class.md) y [Migrating From the XslTransform Class](~/docs/standard/data/xml/migrating-from-the-xsltransform-class.md).  
  
 <xref:System.Xml.Xsl.XslTransform> admite la sintaxis de XSLT 1.0. La hoja de estilos XSLT debe incluir la declaración de espacio de nombres `xmlns:xsl= http://www.w3.org/1999/XSL/Transform`.  
  
 El `args` se hacen coincidir con el `xsl:param` elementos definidos en la hoja de estilos. Las selecciones de transformación que se aplican al documento como un todo. En otras palabras, si el nodo actual se establece en un árbol de nodos que no sea el nodo raíz del documento, esto no impide el proceso de transformación de obtener acceso a todos los nodos del documento cargado. Después de realiza la transformación, el <xref:System.Xml.XPath.XPathNavigator> permanece en su estado original. Esto significa que el nodo, que era el actual antes del proceso de transformación, sigue siendo el actual después de la <xref:System.Xml.Xsl.XslTransform.Transform%2A> ha llamado al método.  
  
 El `xsl:output` elemento no se admite cuando la salida se envía a un <xref:System.Xml.XmlWriter> (`xsl:output` se pasa por alto). Vea [resultados de XslTransform](~/docs/standard/data/xml/outputs-from-an-xsltransform.md) para obtener más información.  
  
   
  
## Examples  
 En el ejemplo siguiente se carga y se edita un documento XML antes de realizar una transformación XSLT.  
  
 [!code-cpp[XslTransform.Transform2#1](~/samples/snippets/cpp/VS_Snippets_Data/XslTransform.Transform2/CPP/trans_snip.cpp#1)]
 [!code-csharp[XslTransform.Transform2#1](~/samples/snippets/csharp/VS_Snippets_Data/XslTransform.Transform2/CS/trans_snip.cs#1)]
 [!code-vb[XslTransform.Transform2#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XslTransform.Transform2/VB/trans_snip.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Se produjo un error al procesar la transformación XSLT.  
  
 Nota: éste es un cambio de comportamiento respecto a las versiones anteriores. Se inicia una <see cref="T:System.Xml.Xsl.XsltException" /> si usa Microsoft .NET Framework versión 1.1 o anterior.</exception>
        <altmember cref="T:System.Xml.Xsl.XsltArgumentList" />
        <altmember cref="T:System.Xml.XmlSecureResolver" />
        <altmember cref="P:System.Xml.XmlResolver.Credentials" />
      </Docs>
    </Member>
    <Member MemberName="XmlResolver">
      <MemberSignature Language="C#" Value="public System.Xml.XmlResolver XmlResolver { set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Xml.XmlResolver XmlResolver" />
      <MemberSignature Language="DocId" Value="P:System.Xml.Xsl.XslTransform.XmlResolver" />
      <MemberSignature Language="VB.NET" Value="Public Property XmlResolver As XmlResolver" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Xml::XmlResolver ^ XmlResolver {  void set(System::Xml::XmlResolver ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlResolver</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Establece <see cref="T:System.Xml.XmlResolver" /> que se utiliza para resolver recursos externos cuando se llama al método <see cref="Overload:System.Xml.Xsl.XslTransform.Transform" />.</summary>
        <value>Objeto <see cref="T:System.Xml.XmlResolver" /> que se va a utilizar durante la transformación. Si establece en <see langword="null" />, el XSLT <c>document()</c> función no se ha resuelto.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  La <xref:System.Xml.Xsl.XslTransform> clase está obsoleta en la versión 2.0 de .NET Framework. La <xref:System.Xml.Xsl.XslCompiledTransform> clase es el nuevo procesador XSLT. Para obtener más información, consulte [mediante la clase XslCompiledTransform](~/docs/standard/data/xml/using-the-xslcompiledtransform-class.md) y [Migrating From the XslTransform Class](~/docs/standard/data/xml/migrating-from-the-xsltransform-class.md).  
  
 En la versión 1.1 de .NET Framework, el nivel de confianza de la aplicación determina el comportamiento predeterminado:  
  
 `Fully trusted code:` Valor predeterminado es <xref:System.Xml.XmlUrlResolver> con ningún usuario las credenciales se usa para resolver la `document()` función. Si se requiere autenticación para tener acceso al recurso externo, use esta propiedad para especificar un <xref:System.Xml.XmlResolver> con las credenciales necesarias.  
  
 `Semi-trusted code:` La propiedad se establece en `null`, lo que significa que el `document()` función no se ha resuelto. Dado que se requiere plena confianza para especificar un <xref:System.Xml.XmlResolver>, esta propiedad no se puede establecer también.  
  
 Esta resolución se usa cuando el XSLT `document()` función se invoca. No se utiliza para resolver `xsl:import` y `xsl:include` elementos que se hace referencia en la hoja de estilos. Para especificar un <xref:System.Xml.XmlResolver> a utilizar para solucionar `xsl:import` y `xsl:include` elementos que se hace referencia en la hoja de estilos, utilice la <xref:System.Xml.Xsl.XslTransform.Load%2A> sobrecarga que toma un <xref:System.Xml.XmlResolver> como uno de sus argumentos.  
  
> [!NOTE]
>  Esta propiedad está obsoleta en la versión 1.1 de .NET Framework. Especificar un <xref:System.Xml.XmlResolver> mediante el <xref:System.Xml.Xsl.XslTransform.Transform%2A> método es el método recomendado. En este caso, el <xref:System.Xml.XmlResolver> no se almacena en caché después de la <xref:System.Xml.Xsl.XslTransform.Transform%2A> método se completa.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Xml.XmlResolver.Credentials" />
        <altmember cref="T:System.Net.CredentialCache" />
        <altmember cref="T:System.Net.NetworkCredential" />
      </Docs>
    </Member>
  </Members>
</Type>