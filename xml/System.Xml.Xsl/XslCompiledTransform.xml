<Type Name="XslCompiledTransform" FullName="System.Xml.Xsl.XslCompiledTransform">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="df35b09bb7bf6d29d6d71264fa0b9ba7fbd134ad" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="es-ES" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30721089" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class XslCompiledTransform" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed XslCompiledTransform extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Xml.Xsl.XslCompiledTransform" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class XslCompiledTransform" />
  <TypeSignature Language="C++ CLI" Value="public ref class XslCompiledTransform sealed" />
  <AssemblyInfo>
    <AssemblyName>System.Xml</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Transforma datos XML usando una hoja de estilos XSLT.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La <xref:System.Xml.Xsl.XslCompiledTransform> clase es un procesador XSLT que admite la sintaxis de XSLT 1.0. Es una nueva implementación e incluye mejoras de rendimiento en comparación con el atributo obsolete <xref:System.Xml.Xsl.XslTransform> clase. La estructura de la <xref:System.Xml.Xsl.XslCompiledTransform> clase es muy similar a la <xref:System.Xml.Xsl.XslTransform> clase. El <xref:System.Xml.Xsl.XslCompiledTransform.Load%2A> método carga y compila el estilo de hoja, mientras el <xref:System.Xml.Xsl.XslCompiledTransform.Transform%2A> el método ejecuta la transformación XSLT.  
  
 Compatibilidad con el objetivo de XSLT `document()` función y bloques de scripts incrustados están deshabilitados de forma predeterminada. Estas características pueden habilitarse mediante la creación de un <xref:System.Xml.Xsl.XsltSettings> objeto y pasarlo a la <xref:System.Xml.Xsl.XslCompiledTransform.Load%2A> método.  
  
 Para obtener más información, consulte [mediante la clase XslCompiledTransform](~/docs/standard/data/xml/using-the-xslcompiledtransform-class.md) y [Migrating From the XslTransform Class](~/docs/standard/data/xml/migrating-from-the-xsltransform-class.md).  
  
## <a name="security-considerations"></a>Consideraciones de seguridad  
 Si crea una aplicación que utiliza la clase <xref:System.Xml.Xsl.XslCompiledTransform>, debería conocer los siguientes puntos y sus implicaciones:  
  
-   El script XSLT está deshabilitado de manera predeterminada. El script XSLT solo se debería habilitar si necesita compatibilidad con scripts o si está trabajando en un entorno de total confianza.  
  
-   La función `document()` XSLT está deshabilitada de manera predeterminada. Si habilita la función `document()`, restrinja los recursos a los que se tiene acceso pasando un objeto <xref:System.Xml.XmlSecureResolver> al método <xref:System.Xml.Xsl.XslCompiledTransform.Transform%2A>.  
  
-   Los objetos de extensión están habilitados de manera predeterminada. Si se pasa un objeto <xref:System.Xml.Xsl.XsltArgumentList> que contiene objetos de extensión al método <xref:System.Xml.Xsl.XslCompiledTransform.Transform%2A>, estos objetos se utilizan.  
  
-   Las hojas de estilos XLST pueden incluir referencias a otros archivos y bloques de scripts incrustados. Un usuario malintencionado puede aprovecharse de esta característica para proporcionarle datos u hojas de estilos que, cuando se ejecutan, pueden hacer que el sistema los procese hasta que el equipo se quede sin recursos.  
  
-   Las aplicaciones XSLT que se ejecutan en un entorno de confianza mixto pueden sufrir suplantaciones de hoja de estilos. Por ejemplo, un usuario malintencionado podría cargar un objeto con una hoja de estilos perjudicial y pasárselo a otro usuario que, a continuación, llama al método <xref:System.Xml.Xsl.XslCompiledTransform.Transform%2A> y ejecuta la transformación.  
  
 Estos problemas de seguridad se pueden mitigar si no se habilitan los scripts o la función `document()` a menos que la hoja de estilos provenga de un origen de confianza, y si no se aceptan objetos <xref:System.Xml.Xsl.XslCompiledTransform>, hojas de estilos XSLT o datos de origen XML de un origen que no es de confianza.  
  
   
  
## Examples  
 En el ejemplo siguiente se ejecuta una transformación y muestra los resultados en un archivo.  
  
 [!code-csharp[XslCompiledTransform.Transform#1](~/samples/snippets/csharp/VS_Snippets_Data/XslCompiledTransform.Transform/CS/Xslt_Transform_v2.cs#1)]
 [!code-vb[XslCompiledTransform.Transform#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XslCompiledTransform.Transform/VB/Xslt_Transform_v2.vb#1)]  
  
 El ejemplo usa los dos archivos de entrada siguientes:  
  
 `books.xml`  
  
 [!code-xml[Classic WebData XslTransform.Transform7 Example#2](~/samples/snippets/xml/VS_Snippets_Data/Classic WebData XslTransform.Transform7 Example/XML/books.xml#2)]  
  
 `output.xsl`  
  
 [!code-xml[Classic WebData XslTransform.Transform7 Example#3](~/samples/snippets/xml/VS_Snippets_Data/Classic WebData XslTransform.Transform7 Example/XML/output.xsl#3)]  
  
 ]]></format>
    </remarks>
    <threadsafe>La <see cref="T:System.Xml.Xsl.XslCompiledTransform" /> objeto es seguro para subprocesos, una vez que se ha cargado. En otras palabras, después de la <see cref="Overload:System.Xml.Xsl.XslCompiledTransform.Load" /> método se haya completado correctamente, el <see cref="Overload:System.Xml.Xsl.XslCompiledTransform.Transform" /> método se puede llamar simultáneamente desde varios subprocesos.  
  
 Si el <see cref="Overload:System.Xml.Xsl.XslCompiledTransform.Load" /> método se llama de nuevo en un subproceso mientras la <see cref="Overload:System.Xml.Xsl.XslCompiledTransform.Transform" /> método se llama en otro subproceso, la <see cref="T:System.Xml.Xsl.XslCompiledTransform" /> objeto termina de ejecutarse el <see cref="Overload:System.Xml.Xsl.XslCompiledTransform.Transform" /> llamar debe seguir usando el estado anterior. El nuevo estado se utiliza cuando el <see cref="Overload:System.Xml.Xsl.XslCompiledTransform.Load" /> método se completa correctamente.  
  
 <block subset="none" type="note"><para>  
 El <see cref="Overload:System.Xml.Xsl.XslCompiledTransform.Load" /> método no es seguro para la ejecución cuando se llama simultáneamente desde varios subprocesos de subprocesos.  
  
</para></block></threadsafe>
    <altmember cref="T:System.Xml.Xsl.XsltArgumentList" />
    <altmember cref="T:System.Xml.Xsl.XsltMessageEncounteredEventArgs" />
    <altmember cref="N:System.Xml" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Xml.Xsl.XslCompiledTransform" />.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XslCompiledTransform ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Xsl.XslCompiledTransform.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XslCompiledTransform();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Xml.Xsl.XslCompiledTransform" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XslCompiledTransform (bool enableDebug);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(bool enableDebug) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Xsl.XslCompiledTransform.#ctor(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (enableDebug As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XslCompiledTransform(bool enableDebug);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="enableDebug" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="enableDebug">
          Es <see langword="true" /> para generar información de depuración; de lo contrario, es <see langword="false" />. Si se establece en <see langword="true" />, la hoja de estilos se puede depurar con el depurador de Microsoft Visual Studio.</param>
        <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Xml.Xsl.XslCompiledTransform" /> con la configuración de depuración especificada.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Las siguientes condiciones deben cumplirse para poder recorrer el código y depurar la hoja de estilos:  
  
-   El parámetro `enableDebug` debe establecerse en `true`.  
  
-   La hoja de estilos se pasa a la <xref:System.Xml.Xsl.XslCompiledTransform.Load%2A> método como un URI o una implementación de la <xref:System.Xml.XmlReader> clase que implementa el <xref:System.Xml.IXmlLineInfo> interfaz. El <xref:System.Xml.IXmlLineInfo> interfaz se implementa en todos los análisis de texto <xref:System.Xml.XmlReader> objetos.  
  
     En otras palabras, si se carga la hoja de estilos utilizando un <xref:System.Xml.XPath.IXPathNavigable> objeto, como un <xref:System.Xml.XmlDocument> o <xref:System.Xml.XPath.XPathDocument>, o un <xref:System.Xml.XmlReader> implementación que no implementa la <xref:System.Xml.IXmlLineInfo> interfaz, no se puede depurar la hoja de estilos.  
  
-   El <xref:System.Xml.XmlResolver> usa para cargar el estilo de hoja está basado en un archivo <xref:System.Xml.XmlResolver>, como el <xref:System.Xml.XmlUrlResolver> (este es el valor predeterminado <xref:System.Xml.XmlResolver> utilizado por el <xref:System.Xml.Xsl.XslCompiledTransform> clase).  
  
-   La hoja de estilos se encuentra en el equipo local o en la intranet.  
  
   
  
## Examples  
 En el ejemplo siguiente se muestra cómo habilitar la depuración de XSLT.  
  
 [!code-csharp[XslCompiledTransform.Load#10](~/samples/snippets/csharp/VS_Snippets_Data/XslCompiledTransform.Load/CS/Xslt_Load_v2.cs#10)]
 [!code-vb[XslCompiledTransform.Load#10](~/samples/snippets/visualbasic/VS_Snippets_Data/XslCompiledTransform.Load/VB/Xslt_Load_v2.vb#10)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CompileToType">
      <MemberSignature Language="C#" Value="public static System.CodeDom.Compiler.CompilerErrorCollection CompileToType (System.Xml.XmlReader stylesheet, System.Xml.Xsl.XsltSettings settings, System.Xml.XmlResolver stylesheetResolver, bool debug, System.Reflection.Emit.TypeBuilder typeBuilder, string scriptAssemblyPath);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.CodeDom.Compiler.CompilerErrorCollection CompileToType(class System.Xml.XmlReader stylesheet, class System.Xml.Xsl.XsltSettings settings, class System.Xml.XmlResolver stylesheetResolver, bool debug, class System.Reflection.Emit.TypeBuilder typeBuilder, string scriptAssemblyPath) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Xsl.XslCompiledTransform.CompileToType(System.Xml.XmlReader,System.Xml.Xsl.XsltSettings,System.Xml.XmlResolver,System.Boolean,System.Reflection.Emit.TypeBuilder,System.String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::CodeDom::Compiler::CompilerErrorCollection ^ CompileToType(System::Xml::XmlReader ^ stylesheet, System::Xml::Xsl::XsltSettings ^ settings, System::Xml::XmlResolver ^ stylesheetResolver, bool debug, System::Reflection::Emit::TypeBuilder ^ typeBuilder, System::String ^ scriptAssemblyPath);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.CodeDom.Compiler.CompilerErrorCollection</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stylesheet" Type="System.Xml.XmlReader" />
        <Parameter Name="settings" Type="System.Xml.Xsl.XsltSettings" />
        <Parameter Name="stylesheetResolver" Type="System.Xml.XmlResolver" />
        <Parameter Name="debug" Type="System.Boolean" />
        <Parameter Name="typeBuilder" Type="System.Reflection.Emit.TypeBuilder" />
        <Parameter Name="scriptAssemblyPath" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="stylesheet">El <see cref="T:System.Xml.XmlReader" /> colocado al principio de la hoja de estilos que se va a compilar.</param>
        <param name="settings">Las características <see cref="T:System.Xml.Xsl.XsltSettings" /> que se van a aplicar a la hoja de estilos. Si es <see langword="null" />, se aplicará <see cref="P:System.Xml.Xsl.XsltSettings.Default" />.</param>
        <param name="stylesheetResolver">
          <see cref="T:System.Xml.XmlResolver" /> resuelve los módulos de hoja de estilos a los que se hace referencia en los elementos <see langword="xsl:import" /> y <see langword="xsl:include" />. Si es <see langword="null" />, no se resolverán los recursos externos.</param>
        <param name="debug">Si se establece en <see langword="true" /> se habilita la depuración de la hoja de estilos con un depurador.</param>
        <param name="typeBuilder">
          <see cref="T:System.Reflection.Emit.TypeBuilder" /> utilizado para la compilación de la hoja de estilos. El TypeBuilder proporcionado se usa para generar el tipo resultante.</param>
        <param name="scriptAssemblyPath">La ruta de acceso base de los ensamblados generados para los elementos <see langword="msxsl:script" />. Si se genera solo un ensamblado de script, este parámetro especifica la ruta de acceso de ese ensamblado. En el caso de varios ensamblados de script, se anexará un sufijo distintivo al nombre de archivo para asegurar la exclusividad de los nombres de ensamblado.</param>
        <summary>Compila una hoja de estilos XSLT a un tipo especificado.</summary>
        <returns>Objeto <see cref="T:System.CodeDom.Compiler.CompilerErrorCollection" /> que contiene los errores y advertencias del compilador que indican los resultados de la compilación.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El `xsltc.exe` herramienta es un contenedor que envuelve la <xref:System.Xml.Xsl.XslCompiledTransform.CompileToType%2A> método. Compilación de las hojas de estilo con el `xsltc.exe` se satisfarán las demandas de la mayoría de las aplicaciones que aprovechan el uso de hojas de estilos compilada. El <xref:System.Xml.Xsl.XslCompiledTransform.CompileToType%2A> método se debe utilizar al generar herramientas de compilación personalizadas.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Load">
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Compila la hoja de estilos.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Aunque el rendimiento total de la clase <xref:System.Xml.Xsl.XslCompiledTransform> es mejor que la clase <xref:System.Xml.Xsl.XslTransform>, el método <xref:System.Xml.Xsl.XslCompiledTransform.Load%2A> de la clase <xref:System.Xml.Xsl.XslCompiledTransform> podría ser más lento que el método <xref:System.Xml.Xsl.XslTransform.Load%2A> de la clase <xref:System.Xml.Xsl.XslTransform> cuando se le llama por primera vez para una transformación. Esto se debe a que el archivo XSLT debe compilarse antes de cargarse. Para obtener más información, vea el siguiente blog: [XslCompiledTransform Slower than XslTransform?](http://go.microsoft.com/fwlink/?LinkId=130590) (¿XslCompiledTransform es más lento que XslTransform?).  
  
> [!NOTE]
>  Existen diferencias entre una transformación XSL compilada en modo de depuración y otra compilada en modo de lanzamiento. En algunas situaciones, las hojas de estilos compiladas en modo de depuración no producirán errores durante la <xref:System.Xml.Xsl.XslCompiledTransform.Load%2A>, pero sí lo harán posteriormente durante la <xref:System.Xml.Xsl.XslCompiledTransform.Transform%2A>. La misma hoja de estilos compilada en modo de lanzamiento producirá errores durante la <xref:System.Xml.Xsl.XslCompiledTransform.Load%2A>. Un ejemplo de este comportamiento se produce cuando una variable que no es de un tipo de conjunto de nodos se asigna a una expresión que requiere un conjunto de nodos.  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="Load">
      <MemberSignature Language="C#" Value="public void Load (string stylesheetUri);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Load(string stylesheetUri) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Xsl.XslCompiledTransform.Load(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Load (stylesheetUri As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Load(System::String ^ stylesheetUri);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stylesheetUri" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="stylesheetUri">URI de la hoja de estilos.</param>
        <summary>Carga y compila la hoja de estilos situada en el URI especificado.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La <xref:System.Xml.Xsl.XslCompiledTransform> clase es compatible con la sintaxis XSLT 1.0. La hoja de estilos XSLT debe utilizar el `http://www.w3.org/1999/XSL/Transform` espacio de nombres.  
  
 Este método tiene el siguiente comportamiento:  
  
-   Un <xref:System.Xml.XmlUrlResolver> con ningún usuario credenciales se usan para resolver el URI de la hoja de estilos y procesar cualquier `xsl:import` o `xsl:include` elementos.  
  
-   Un <xref:System.Xml.XmlReader> no tiene valor predeterminado la configuración se usa para cargar la hoja de estilos. El procesamiento de DTD está deshabilitado en el <xref:System.Xml.XmlReader>. Si necesita el procesamiento de DTD, cree un <xref:System.Xml.XmlReader> con esta característica habilitada y páselo a la <xref:System.Xml.Xsl.XslCompiledTransform.Load%2A> método.  
  
-   El `document()` función está deshabilitada.  
  
-   No se admiten scripts incrustados.  
  
 Puede usar el <xref:System.Xml.Xsl.XslCompiledTransform.Load%28System.String%2CSystem.Xml.Xsl.XsltSettings%2CSystem.Xml.XmlResolver%29> sobrecarga para especificar un <xref:System.Xml.XmlResolver> con las credenciales de autenticación necesarios, o para especificar diferentes valores de XSLT.  
  
   
  
## Examples  
 En el ejemplo siguiente se ejecuta una transformación y muestra los resultados en un archivo.  
  
 [!code-csharp[XslCompiledTransform.Transform#1](~/samples/snippets/csharp/VS_Snippets_Data/XslCompiledTransform.Transform/CS/Xslt_Transform_v2.cs#1)]
 [!code-vb[XslCompiledTransform.Transform#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XslCompiledTransform.Transform/VB/Xslt_Transform_v2.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">El valor <paramref name="stylesheetUri" /> es <see langword="null" />.</exception>
        <exception cref="T:System.Xml.Xsl.XsltException">La hoja de estilos contiene un error.</exception>
        <exception cref="T:System.IO.FileNotFoundException">No se puede encontrar la hoja de estilos.</exception>
        <exception cref="T:System.IO.DirectoryNotFoundException">El valor <paramref name="stylesheetUri" /> incluye un nombre de archivo o un directorio que no se puede encontrar.</exception>
        <exception cref="T:System.Net.WebException">El valor <paramref name="stylesheetUri" /> no se puede resolver.  
  
 O bien  
  
 Error al procesar la solicitud.</exception>
        <exception cref="T:System.UriFormatException">
          <paramref name="stylesheetUri" /> no es un URI válido.</exception>
        <exception cref="T:System.Xml.XmlException">Hubo un error de análisis al cargar la hoja de estilos.</exception>
      </Docs>
    </Member>
    <Member MemberName="Load">
      <MemberSignature Language="C#" Value="public void Load (Type compiledStylesheet);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Load(class System.Type compiledStylesheet) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Xsl.XslCompiledTransform.Load(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Load (compiledStylesheet As Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Load(Type ^ compiledStylesheet);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="compiledStylesheet" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="compiledStylesheet">Nombre de la clase que contiene la hoja de estilos compilada.  
  
 Normalmente se trata del nombre de la hoja de estilos. A menos que se especifique lo contrario, la herramienta xsltc.exe usa el nombre de la hoja de estilos para los nombres de ensamblado y clase.</param>
        <summary>Carga la hoja de estilos compilada que se creó usando el [compilador XSLT (xsltc.exe)](~/docs/standard/data/xml/xslt-compiler-xsltc-exe.md).</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La herramienta xsltc.exe se utiliza para compilar hojas de estilos y generar los ensamblados de las hojas de estilos. El <xref:System.Xml.Xsl.XslCompiledTransform.Load%2A> método carga la hoja de estilos compilada del ensamblado.  
  
> [!NOTE]
>  También debe incluir el ensamblado XSLT como una referencia en la aplicación.  
  
   
  
## Examples  
 En el ejemplo siguiente se muestra cómo cargar una hoja de estilos compilada de un ensamblado XSLT. En el ejemplo se da por supuesto que se utilizó la herramienta xsltc.exe para crear un ensamblado denominado bookOrders.dll con una clase denominada bookOrders.  
  
> [!NOTE]
>  Tendrá que hacer referencia al ensamblado XSLT al compilar el código. Por ejemplo: `csc /r:system.dll;system.xml.dll;bookOrders.dll myCode.cs`.  
  
```  
// Load the type of the class.  
XslCompiledTransform xslt = new XslCompiledTransform();  
xslt.Load(typeof(bookOrders));  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Load">
      <MemberSignature Language="C#" Value="public void Load (System.Xml.XmlReader stylesheet);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Load(class System.Xml.XmlReader stylesheet) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Xsl.XslCompiledTransform.Load(System.Xml.XmlReader)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Load (stylesheet As XmlReader)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Load(System::Xml::XmlReader ^ stylesheet);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stylesheet" Type="System.Xml.XmlReader" />
      </Parameters>
      <Docs>
        <param name="stylesheet">
          <see cref="T:System.Xml.XmlReader" /> que contiene la hoja de estilos.</param>
        <summary>Compila la hoja de estilos incluida en <see cref="T:System.Xml.XmlReader" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La <xref:System.Xml.Xsl.XslCompiledTransform> clase es compatible con la sintaxis XSLT 1.0. La hoja de estilos XSLT debe utilizar el `http://www.w3.org/1999/XSL/Transform` espacio de nombres.  
  
 La hoja de estilos se carga desde el nodo actual de la <xref:System.Xml.XmlReader> a través de todos sus nodos secundarios. Esto le permite utilizar una parte de un documento como la hoja de estilos. Después de la <xref:System.Xml.Xsl.XslCompiledTransform.Load%2A> método finaliza, el <xref:System.Xml.XmlReader> se coloca en el siguiente nodo después del final de la hoja de estilos. Si se llega al final del documento, <xref:System.Xml.XmlReader> se sitúa al final del archivo.  
  
 Este método tiene el siguiente comportamiento:  
  
-   Un <xref:System.Xml.XmlUrlResolver> con ningún usuario credenciales se usan para procesar cualquier `xsl:import` o `xsl:include` elementos.  
  
-   El `document()` función está deshabilitada.  
  
-   No se admiten scripts incrustados.  
  
 Puede usar el <xref:System.Xml.Xsl.XslCompiledTransform.Load%28System.Xml.XmlReader%2CSystem.Xml.Xsl.XsltSettings%2CSystem.Xml.XmlResolver%29> sobrecarga para especificar un <xref:System.Xml.XmlResolver> con las credenciales de autenticación necesarios, o para especificar diferentes valores de XSLT.  
  
   
  
## Examples  
 En el ejemplo siguiente se carga una hoja de estilos incluida en un <xref:System.Xml.XmlReader> objeto.  
  
 [!code-csharp[XslCompiledTransform.Load#5](~/samples/snippets/csharp/VS_Snippets_Data/XslCompiledTransform.Load/CS/Xslt_Load_v2.cs#5)]
 [!code-vb[XslCompiledTransform.Load#5](~/samples/snippets/visualbasic/VS_Snippets_Data/XslCompiledTransform.Load/VB/Xslt_Load_v2.vb#5)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">El valor <paramref name="stylesheet" /> es <see langword="null" />.</exception>
        <exception cref="T:System.Xml.Xsl.XsltException">La hoja de estilos contiene un error.</exception>
      </Docs>
    </Member>
    <Member MemberName="Load">
      <MemberSignature Language="C#" Value="public void Load (System.Xml.XPath.IXPathNavigable stylesheet);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Load(class System.Xml.XPath.IXPathNavigable stylesheet) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Xsl.XslCompiledTransform.Load(System.Xml.XPath.IXPathNavigable)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Load (stylesheet As IXPathNavigable)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Load(System::Xml::XPath::IXPathNavigable ^ stylesheet);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stylesheet" Type="System.Xml.XPath.IXPathNavigable" />
      </Parameters>
      <Docs>
        <param name="stylesheet">Objeto que implementa la interfaz <see cref="T:System.Xml.XPath.IXPathNavigable" />. En Microsoft .NET Framework, puede ser una clase <see cref="T:System.Xml.XmlNode" /> (normalmente una clase <see cref="T:System.Xml.XmlDocument" />) o una clase <see cref="T:System.Xml.XPath.XPathDocument" /> que contiene la hoja de estilos.</param>
        <summary>Compila la hoja de estilos incluida en el objeto <see cref="T:System.Xml.XPath.IXPathNavigable" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La <xref:System.Xml.Xsl.XslCompiledTransform> clase es compatible con la sintaxis XSLT 1.0. La hoja de estilos XSLT debe utilizar el `http://www.w3.org/1999/XSL/Transform` espacio de nombres.  
  
 Este método tiene el siguiente comportamiento:  
  
-   Un <xref:System.Xml.XmlUrlResolver> con ningún usuario credenciales se usan para procesar cualquier `xsl:import` o `xsl:include` elementos.  
  
-   El `document()` función está deshabilitada.  
  
-   No se admiten scripts incrustados.  
  
 Puede usar el <xref:System.Xml.Xsl.XslCompiledTransform.Load%2A> sobrecarga para especificar un <xref:System.Xml.XmlResolver> con las credenciales de autenticación necesarios, o para especificar diferentes valores de XSLT.  
  
   
  
## Examples  
 En el ejemplo siguiente se carga una hoja de estilos incluida en un <xref:System.Xml.XPath.XPathDocument> objeto.  
  
 [!code-csharp[XslCompiledTransform.Load#1](~/samples/snippets/csharp/VS_Snippets_Data/XslCompiledTransform.Load/CS/Xslt_Load_v2.cs#1)]
 [!code-vb[XslCompiledTransform.Load#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XslCompiledTransform.Load/VB/Xslt_Load_v2.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">El valor <paramref name="stylesheet" /> es <see langword="null" />.</exception>
        <exception cref="T:System.Xml.Xsl.XsltException">La hoja de estilos contiene un error.</exception>
      </Docs>
    </Member>
    <Member MemberName="Load">
      <MemberSignature Language="C#" Value="public void Load (System.Reflection.MethodInfo executeMethod, byte[] queryData, Type[] earlyBoundTypes);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Load(class System.Reflection.MethodInfo executeMethod, unsigned int8[] queryData, class System.Type[] earlyBoundTypes) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Xsl.XslCompiledTransform.Load(System.Reflection.MethodInfo,System.Byte[],System.Type[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub Load (executeMethod As MethodInfo, queryData As Byte(), earlyBoundTypes As Type())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Load(System::Reflection::MethodInfo ^ executeMethod, cli::array &lt;System::Byte&gt; ^ queryData, cli::array &lt;Type ^&gt; ^ earlyBoundTypes);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="executeMethod" Type="System.Reflection.MethodInfo" />
        <Parameter Name="queryData" Type="System.Byte[]" />
        <Parameter Name="earlyBoundTypes" Type="System.Type[]" />
      </Parameters>
      <Docs>
        <param name="executeMethod">Objeto <see cref="T:System.Reflection.MethodInfo" /> que representa el método <c>execute</c> generado por compilador de la hoja de estilos compilada.</param>
        <param name="queryData">Matriz de tipo byte de estructuras de datos serializados en el campo <c>staticData</c> de la hoja de estilos compilada como se ha generado con el método <see cref="M:System.Xml.Xsl.XslCompiledTransform.CompileToType(System.Xml.XmlReader,System.Xml.Xsl.XsltSettings,System.Xml.XmlResolver,System.Boolean,System.Reflection.Emit.TypeBuilder,System.String)" />.</param>
        <param name="earlyBoundTypes">Matriz de tipos almacenada en el campo <c>ebTypes</c> generado por compilador de la hoja de estilos compilada.</param>
        <summary>Carga un método de una hoja de estilos compilada con la utilidad <see langword="XSLTC.exe" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este método acepta una hoja de estilos compilada en forma de un <xref:System.Reflection.MethodInfo> objeto, una matriz de bytes y una matriz de tipos. <xref:System.Reflection.Emit.DynamicMethod> objetos que pueden utilizarse para permitir que se va los métodos de hoja de estilos compilada descarta cuando la <xref:System.Xml.Xsl.XslCompiledTransform> objeto sea reclamado.  
  
   
  
## Examples  
 El ejemplo de código siguiente utiliza el <xref:System.Xml.Xsl.XslCompiledTransform.Load%2A> para cargar una hoja de estilos compilada. La transformación reduce el valor de la `Price` elemento por diez por ciento.  
  
 [!code-csharp[XsltDynamicMethodLoad#1](~/samples/snippets/csharp/VS_Snippets_Data/XsltDynamicMethodLoad/CS/XsltDynamicMethodLoad.cs#1)]
 [!code-vb[XsltDynamicMethodLoad#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XsltDynamicMethodLoad/VB/XsltDynamicMethodLoad.vb#1)]  
  
> [!NOTE]
>  El ensamblado "Transform" utilizado en este ejemplo se generó con la utilidad xsltc.exe. Para obtener información detallada sobre el uso de esta herramienta de línea de comandos, consulte [Cómo: realizar una transformación XSLT mediante un ensamblado](~/docs/standard/data/xml/how-to-perform-an-xslt-transformation-by-using-an-assembly.md).  
  
 El ejemplo de código anterior utiliza la transformación siguiente:  
  
```  
<xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform"  
  xmlns:msxsl="urn:schemas-microsoft-com:xslt"  
  xmlns:user="urn:my-scripts">  
  <msxsl:script language="C#" implements-prefix="user">  
    <![CDATA[  
  public double modifyPrice(double price){  
    price*=0.9;  
    return price;  
  }  
  ]]]><![CDATA[]>  
  </msxsl:script>  
  <xsl:template match="Root">  
    <Root xmlns="">  
      <Price><xsl:value-of select="user:modifyPrice(Price)"/></Price>  
    </Root>  
  </xsl:template>  
</xsl:stylesheet>  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Load">
      <MemberSignature Language="C#" Value="public void Load (string stylesheetUri, System.Xml.Xsl.XsltSettings settings, System.Xml.XmlResolver stylesheetResolver);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Load(string stylesheetUri, class System.Xml.Xsl.XsltSettings settings, class System.Xml.XmlResolver stylesheetResolver) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Xsl.XslCompiledTransform.Load(System.String,System.Xml.Xsl.XsltSettings,System.Xml.XmlResolver)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Load (stylesheetUri As String, settings As XsltSettings, stylesheetResolver As XmlResolver)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Load(System::String ^ stylesheetUri, System::Xml::Xsl::XsltSettings ^ settings, System::Xml::XmlResolver ^ stylesheetResolver);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stylesheetUri" Type="System.String" />
        <Parameter Name="settings" Type="System.Xml.Xsl.XsltSettings" />
        <Parameter Name="stylesheetResolver" Type="System.Xml.XmlResolver" />
      </Parameters>
      <Docs>
        <param name="stylesheetUri">URI de la hoja de estilos.</param>
        <param name="settings">
          <see cref="T:System.Xml.Xsl.XsltSettings" /> que se va a aplicar a la hoja de estilos. Si el valor es <see langword="null" />, se aplica la configuración <see cref="P:System.Xml.Xsl.XsltSettings.Default" />.</param>
        <param name="stylesheetResolver">Clase <see cref="T:System.Xml.XmlResolver" /> usada para resolver el URI de la hoja de estilos y cualquier hoja de estilos a la que se haga referencia en los elementos <c>import</c> e <c>include</c> XSLT.</param>
        <summary>Carga y compila la hoja de estilos XSLT que especifica el URI. La clase <see cref="T:System.Xml.XmlResolver" /> resuelve todos los elementos <c>import</c> e <c>include</c> XSLT y la configuración XSLT determina los permisos de la hoja de estilos.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La <xref:System.Xml.Xsl.XslCompiledTransform> clase es compatible con la sintaxis XSLT 1.0. La hoja de estilos XSLT debe utilizar el `http://www.w3.org/1999/XSL/Transform` espacio de nombres.  
  
 Un <xref:System.Xml.XmlReader> no tiene valor predeterminado la configuración se usa para cargar la hoja de estilos. El procesamiento de DTD está deshabilitado en el <xref:System.Xml.XmlReader>. Si necesita el procesamiento de DTD, cree un <xref:System.Xml.XmlReader> con esta característica habilitada y páselo a la <xref:System.Xml.Xsl.XslCompiledTransform.Load%2A> método.  
  
   
  
## Examples  
 En el ejemplo siguiente se carga una hoja de estilos que se almacena en un recurso de red. Un objeto <xref:System.Xml.XmlSecureResolver> especifica las credenciales necesarias para tener acceso a la hoja de estilos.  
  
 [!code-csharp[XslCompiledTransform.Load#2](~/samples/snippets/csharp/VS_Snippets_Data/XslCompiledTransform.Load/CS/Xslt_Load_v2.cs#2)]
 [!code-vb[XslCompiledTransform.Load#2](~/samples/snippets/visualbasic/VS_Snippets_Data/XslCompiledTransform.Load/VB/Xslt_Load_v2.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">El valor de <paramref name="stylesheetUri" /> o <paramref name="stylesheetResolver" /> es <see langword="null" />.</exception>
        <exception cref="T:System.Xml.Xsl.XsltException">La hoja de estilos contiene un error.</exception>
        <exception cref="T:System.IO.FileNotFoundException">No se puede encontrar la hoja de estilos.</exception>
        <exception cref="T:System.IO.DirectoryNotFoundException">El valor <paramref name="stylesheetUri" /> incluye un nombre de archivo o un directorio que no se puede encontrar.</exception>
        <exception cref="T:System.Net.WebException">El valor <paramref name="stylesheetUri" /> no se puede resolver.  
  
 O bien  
  
 Error al procesar la solicitud.</exception>
        <exception cref="T:System.UriFormatException">
          <paramref name="stylesheetUri" /> no es un URI válido.</exception>
        <exception cref="T:System.Xml.XmlException">Hubo un error de análisis al cargar la hoja de estilos.</exception>
      </Docs>
    </Member>
    <Member MemberName="Load">
      <MemberSignature Language="C#" Value="public void Load (System.Xml.XmlReader stylesheet, System.Xml.Xsl.XsltSettings settings, System.Xml.XmlResolver stylesheetResolver);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Load(class System.Xml.XmlReader stylesheet, class System.Xml.Xsl.XsltSettings settings, class System.Xml.XmlResolver stylesheetResolver) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Xsl.XslCompiledTransform.Load(System.Xml.XmlReader,System.Xml.Xsl.XsltSettings,System.Xml.XmlResolver)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Load (stylesheet As XmlReader, settings As XsltSettings, stylesheetResolver As XmlResolver)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Load(System::Xml::XmlReader ^ stylesheet, System::Xml::Xsl::XsltSettings ^ settings, System::Xml::XmlResolver ^ stylesheetResolver);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stylesheet" Type="System.Xml.XmlReader" />
        <Parameter Name="settings" Type="System.Xml.Xsl.XsltSettings" />
        <Parameter Name="stylesheetResolver" Type="System.Xml.XmlResolver" />
      </Parameters>
      <Docs>
        <param name="stylesheet">
          <see cref="T:System.Xml.XmlReader" /> que contiene la hoja de estilos.</param>
        <param name="settings">
          <see cref="T:System.Xml.Xsl.XsltSettings" /> que se va a aplicar a la hoja de estilos. Si el valor es <see langword="null" />, se aplica la configuración <see cref="P:System.Xml.Xsl.XsltSettings.Default" />.</param>
        <param name="stylesheetResolver">Clase <see cref="T:System.Xml.XmlResolver" /> que se usa para resolver las hojas de estilos a las que se hace referencia en los elementos <c>import</c> e <c>include</c> XSLT. Si es <see langword="null" />, los recursos externos no se resuelven.</param>
        <summary>Compila la hoja de estilos XSLT incluida en <see cref="T:System.Xml.XmlReader" />. La clase <see cref="T:System.Xml.XmlResolver" /> resuelve todos los elementos <c>import</c> e <c>include</c> XSLT y la configuración XSLT determina los permisos de la hoja de estilos.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La <xref:System.Xml.Xsl.XslCompiledTransform> clase es compatible con la sintaxis XSLT 1.0. La hoja de estilos XSLT debe utilizar el `http://www.w3.org/1999/XSL/Transform` espacio de nombres.  
  
 La hoja de estilos se carga desde el nodo actual de la <xref:System.Xml.XmlReader> a través de todos sus nodos secundarios. Esto le permite utilizar una parte de un documento como la hoja de estilos. Después de la <xref:System.Xml.Xsl.XslCompiledTransform.Load%2A> método finaliza, el <xref:System.Xml.XmlReader> se coloca en el siguiente nodo después del final de la hoja de estilos. Si se llega al final del documento, <xref:System.Xml.XmlReader> se sitúa al final del archivo.  
  
   
  
## Examples  
 En el ejemplo siguiente se carga una hoja de estilos y se habilita la compatibilidad con secuencias de comandos XSLT.  
  
 [!code-csharp[XslCompiledTransform.Load#3](~/samples/snippets/csharp/VS_Snippets_Data/XslCompiledTransform.Load/CS/Xslt_Load_v2.cs#3)]
 [!code-vb[XslCompiledTransform.Load#3](~/samples/snippets/visualbasic/VS_Snippets_Data/XslCompiledTransform.Load/VB/Xslt_Load_v2.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">El valor <paramref name="stylesheet" /> es <see langword="null" />.</exception>
        <exception cref="T:System.Xml.Xsl.XsltException">La hoja de estilos contiene un error.</exception>
      </Docs>
    </Member>
    <Member MemberName="Load">
      <MemberSignature Language="C#" Value="public void Load (System.Xml.XPath.IXPathNavigable stylesheet, System.Xml.Xsl.XsltSettings settings, System.Xml.XmlResolver stylesheetResolver);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Load(class System.Xml.XPath.IXPathNavigable stylesheet, class System.Xml.Xsl.XsltSettings settings, class System.Xml.XmlResolver stylesheetResolver) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Xsl.XslCompiledTransform.Load(System.Xml.XPath.IXPathNavigable,System.Xml.Xsl.XsltSettings,System.Xml.XmlResolver)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Load (stylesheet As IXPathNavigable, settings As XsltSettings, stylesheetResolver As XmlResolver)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Load(System::Xml::XPath::IXPathNavigable ^ stylesheet, System::Xml::Xsl::XsltSettings ^ settings, System::Xml::XmlResolver ^ stylesheetResolver);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stylesheet" Type="System.Xml.XPath.IXPathNavigable" />
        <Parameter Name="settings" Type="System.Xml.Xsl.XsltSettings" />
        <Parameter Name="stylesheetResolver" Type="System.Xml.XmlResolver" />
      </Parameters>
      <Docs>
        <param name="stylesheet">Objeto que implementa la interfaz <see cref="T:System.Xml.XPath.IXPathNavigable" />. En Microsoft .NET Framework, puede ser una clase <see cref="T:System.Xml.XmlNode" /> (normalmente una clase <see cref="T:System.Xml.XmlDocument" />) o una clase <see cref="T:System.Xml.XPath.XPathDocument" /> que contiene la hoja de estilos.</param>
        <param name="settings">
          <see cref="T:System.Xml.Xsl.XsltSettings" /> que se va a aplicar a la hoja de estilos. Si el valor es <see langword="null" />, se aplica la configuración <see cref="P:System.Xml.Xsl.XsltSettings.Default" />.</param>
        <param name="stylesheetResolver">Clase <see cref="T:System.Xml.XmlResolver" /> que se usa para resolver las hojas de estilos a las que se hace referencia en los elementos <c>import</c> e <c>include</c> XSLT. Si es <see langword="null" />, los recursos externos no se resuelven.</param>
        <summary>Compila la hoja de estilos XSLT incluida en <see cref="T:System.Xml.XPath.IXPathNavigable" />. La clase <see cref="T:System.Xml.XmlResolver" /> resuelve todos los elementos <c>import</c> e <c>include</c> XSLT y la configuración XSLT determina los permisos de la hoja de estilos.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La <xref:System.Xml.Xsl.XslCompiledTransform> clase es compatible con la sintaxis XSLT 1.0. La hoja de estilos XSLT debe utilizar el `http://www.w3.org/1999/XSL/Transform` espacio de nombres.  
  
   
  
## Examples  
 En el ejemplo siguiente se carga una hoja de estilos. El <xref:System.Xml.XmlSecureResolver> objeto contiene las credenciales necesarias para tener acceso a `import` o `include` elementos que se encuentran en la hoja de estilos.  
  
 [!code-csharp[XslCompiledTransform.Load#4](~/samples/snippets/csharp/VS_Snippets_Data/XslCompiledTransform.Load/CS/Xslt_Load_v2.cs#4)]
 [!code-vb[XslCompiledTransform.Load#4](~/samples/snippets/visualbasic/VS_Snippets_Data/XslCompiledTransform.Load/VB/Xslt_Load_v2.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">El valor <paramref name="stylesheet" /> es <see langword="null" />.</exception>
        <exception cref="T:System.Xml.Xsl.XsltException">La hoja de estilos contiene un error.</exception>
      </Docs>
    </Member>
    <Member MemberName="OutputSettings">
      <MemberSignature Language="C#" Value="public System.Xml.XmlWriterSettings OutputSettings { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Xml.XmlWriterSettings OutputSettings" />
      <MemberSignature Language="DocId" Value="P:System.Xml.Xsl.XslCompiledTransform.OutputSettings" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property OutputSettings As XmlWriterSettings" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Xml::XmlWriterSettings ^ OutputSettings { System::Xml::XmlWriterSettings ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlWriterSettings</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene un objeto <see cref="T:System.Xml.XmlWriterSettings" /> que contiene la información de salida derivada del elemento <c>xsl:output</c> de la hoja de estilos.</summary>
        <value>Sólo lectura <see cref="T:System.Xml.XmlWriterSettings" /> derivado del objeto que contiene la información de salida de la <c>xsl: output</c> elemento de la hoja de estilos. Este valor puede ser <see langword="null" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Esta propiedad se rellena después de una llamada correcta a la <xref:System.Xml.Xsl.XslCompiledTransform.Load%2A> método. Contiene información que se deriva de la `xsl:output` elemento de una hoja de estilos compilada. Esto <xref:System.Xml.XmlWriterSettings> objeto puede pasarse a la <xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType> método para crear la <xref:System.Xml.XmlWriter> objeto al que desea enviar el resultado.  
  
   
  
## Examples  
 En el ejemplo siguiente se muestra cómo utilizar el <xref:System.Xml.Xsl.XslCompiledTransform.OutputSettings%2A> propiedad que se va a crear un <xref:System.Xml.XmlWriter> objeto que escribe texto en la consola.  
  
 [!code-csharp[XslCompiledTransform.OutputSettings#1](~/samples/snippets/csharp/VS_Snippets_Data/XslCompiledTransform.OutputSettings/CS/xslt_OutputSettings.cs#1)]
 [!code-vb[XslCompiledTransform.OutputSettings#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XslCompiledTransform.OutputSettings/VB/xslt_OutputSettings.vb#1)]  
  
 El ejemplo se utiliza la `books.xml` y `outputConsole.xsl` archivos como entrada.  
  
 `books.xml`  
  
 [!code-xml[XslCompiledTransform.OutputSettings#2](~/samples/snippets/xml/VS_Snippets_Data/XslCompiledTransform.OutputSettings/XML/books.xml#2)]  
  
 `outputConsole.xsl`  
  
 [!code-xml[XslCompiledTransform.OutputSettings#3](~/samples/snippets/xml/VS_Snippets_Data/XslCompiledTransform.OutputSettings/XML/outputConsole.xsl#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TemporaryFiles">
      <MemberSignature Language="C#" Value="public System.CodeDom.Compiler.TempFileCollection TemporaryFiles { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.CodeDom.Compiler.TempFileCollection TemporaryFiles" />
      <MemberSignature Language="DocId" Value="P:System.Xml.Xsl.XslCompiledTransform.TemporaryFiles" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property TemporaryFiles As TempFileCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::CodeDom::Compiler::TempFileCollection ^ TemporaryFiles { System::CodeDom::Compiler::TempFileCollection ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.CodeDom.Compiler.TempFileCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene la clase <see cref="T:System.CodeDom.Compiler.TempFileCollection" /> que contiene los archivos temporales generados en disco después de una llamada correcta al método <see cref="Overload:System.Xml.Xsl.XslCompiledTransform.Load" />.</summary>
        <value>Clase <see cref="T:System.CodeDom.Compiler.TempFileCollection" /> que contiene los archivos temporales generados en disco. Este valor es <see langword="null" /> si la llamada al método <see cref="Overload:System.Xml.Xsl.XslCompiledTransform.Load" /> no se ha realizado correctamente o si no se ha habilitado la depuración.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Esta propiedad identifica los archivos que se generaron durante XSLT de procesamiento. Los archivos se colocan en el directorio Temp (especificado por la variable de entorno % TEMP %) puede eliminar estos archivos cuando ha finalizado el procesamiento XSLT.  
  
   
  
## Examples  
 En el ejemplo siguiente se escribe los nombres de los archivos temporales en la consola.  
  
> [!NOTE]
>  Archivos temporales se crean solo al cargar hojas de estilos con \<msxsl: script > bloques.  
  
 [!code-csharp[XslCompiledTransform.Transform#8](~/samples/snippets/csharp/VS_Snippets_Data/XslCompiledTransform.Transform/CS/Xslt_Transform_v2.cs#8)]
 [!code-vb[XslCompiledTransform.Transform#8](~/samples/snippets/visualbasic/VS_Snippets_Data/XslCompiledTransform.Transform/VB/Xslt_Transform_v2.vb#8)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Transform">
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Ejecuta la transformación XSLT.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  Existen diferencias entre una transformación XSL compilada en modo de depuración y otra compilada en modo de lanzamiento. En algunas situaciones, las hojas de estilos compiladas en modo de depuración no producirán errores durante la <xref:System.Xml.Xsl.XslCompiledTransform.Load%2A>, pero sí lo harán posteriormente durante la <xref:System.Xml.Xsl.XslCompiledTransform.Transform%2A>. La misma hoja de estilos compilada en modo de lanzamiento producirá errores durante la <xref:System.Xml.Xsl.XslCompiledTransform.Load%2A>. Un ejemplo de este comportamiento se produce cuando una variable que no es de un tipo de conjunto de nodos se asigna a una expresión que requiere un conjunto de nodos.  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="Transform">
      <MemberSignature Language="C#" Value="public void Transform (string inputUri, string resultsFile);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Transform(string inputUri, string resultsFile) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Xsl.XslCompiledTransform.Transform(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Transform (inputUri As String, resultsFile As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Transform(System::String ^ inputUri, System::String ^ resultsFile);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="inputUri" Type="System.String" />
        <Parameter Name="resultsFile" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="inputUri">URI del documento de entrada.</param>
        <param name="resultsFile">URI del archivo de salida.</param>
        <summary>Ejecuta la transformación usando el documento de entrada especificado por el URI y envía el resultado a un archivo.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este método usa el valor predeterminado es <xref:System.Xml.XmlUrlResolver> sin credenciales de usuario para resolver los documentos de entrada y salidos. Si cualquiera de estos recursos se encuentran en un recurso de red que requiere autenticación, utilice la sobrecarga que toma un <xref:System.Xml.XmlResolver> como uno de sus argumentos y especifique un <xref:System.Xml.XmlResolver> con las credenciales necesarias.  
  
 Un <xref:System.Xml.XmlReader> no tiene valor predeterminado la configuración se usa para cargar el documento de entrada. El procesamiento de DTD está deshabilitado en el <xref:System.Xml.XmlReader>. Si necesita el procesamiento de DTD, cree un <xref:System.Xml.XmlReader> con esta característica habilitada y páselo a la <xref:System.Xml.Xsl.XslCompiledTransform.Transform%2A> método.  
  
   
  
## Examples  
 En el ejemplo siguiente se ejecuta una transformación y muestra los resultados en un archivo.  
  
 [!code-csharp[XslCompiledTransform.Transform#1](~/samples/snippets/csharp/VS_Snippets_Data/XslCompiledTransform.Transform/CS/Xslt_Transform_v2.cs#1)]
 [!code-vb[XslCompiledTransform.Transform#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XslCompiledTransform.Transform/VB/Xslt_Transform_v2.vb#1)]  
  
 El ejemplo usa los dos archivos de entrada siguientes:  
  
 `books.xml`  
  
 [!code-xml[Classic WebData XslTransform.Transform7 Example#2](~/samples/snippets/xml/VS_Snippets_Data/Classic WebData XslTransform.Transform7 Example/XML/books.xml#2)]  
  
 `output.xsl`  
  
 [!code-xml[Classic WebData XslTransform.Transform7 Example#3](~/samples/snippets/xml/VS_Snippets_Data/Classic WebData XslTransform.Transform7 Example/XML/output.xsl#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">El valor de <paramref name="inputUri" /> o <paramref name="resultsFile" /> es <see langword="null" />.</exception>
        <exception cref="T:System.Xml.Xsl.XsltException">Se ha producido un error al ejecutar la transformación XSLT.</exception>
        <exception cref="T:System.IO.FileNotFoundException">No se puede encontrar el documento de entrada.</exception>
        <exception cref="T:System.IO.DirectoryNotFoundException">El valor <paramref name="inputUri" /> o <paramref name="resultsFile" /> incluye un nombre de archivo o un directorio que no se puede encontrar.</exception>
        <exception cref="T:System.Net.WebException">El valor <paramref name="inputUri" /> o <paramref name="resultsFile" /> no se puede resolver.  
  
 O bien  
  
 Se ha producido un error al procesar la solicitud.</exception>
        <exception cref="T:System.UriFormatException">
          <paramref name="inputUri" /> o <paramref name="resultsFile" /> no es un URI válido.</exception>
        <exception cref="T:System.Xml.XmlException">Hubo un error de análisis al cargar el documento de entrada.</exception>
      </Docs>
    </Member>
    <Member MemberName="Transform">
      <MemberSignature Language="C#" Value="public void Transform (string inputUri, System.Xml.XmlWriter results);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Transform(string inputUri, class System.Xml.XmlWriter results) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Xsl.XslCompiledTransform.Transform(System.String,System.Xml.XmlWriter)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Transform (inputUri As String, results As XmlWriter)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Transform(System::String ^ inputUri, System::Xml::XmlWriter ^ results);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="inputUri" Type="System.String" />
        <Parameter Name="results" Type="System.Xml.XmlWriter" />
      </Parameters>
      <Docs>
        <param name="inputUri">URI del documento de entrada.</param>
        <param name="results">Objeto <see cref="T:System.Xml.XmlWriter" /> al que se desea enviar el resultado.  
  
 Si la hoja de estilos contiene un elemento <c>xsl:output</c>, deberá crear la clase <see cref="T:System.Xml.XmlWriter" /> usando el objeto <see cref="T:System.Xml.XmlWriterSettings" /> devuelto por la propiedad <see cref="P:System.Xml.Xsl.XslCompiledTransform.OutputSettings" />. Con ello se garantiza que <see cref="T:System.Xml.XmlWriter" /> tenga la configuración de resultados correcta.</param>
        <summary>Ejecuta la transformación usando el documento de entrada que especifica el URI y guarda el resultado en una clase <see cref="T:System.Xml.XmlWriter" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este método usa el valor predeterminado es <xref:System.Xml.XmlUrlResolver> sin credenciales de usuario para resolver el documento de entrada y todas las instancias de la transformación XSLT `document()` función se encuentra en la hoja de estilos. Si cualquiera de estos recursos se encuentran en un recurso de red que requiere autenticación, utilice la sobrecarga que toma un <xref:System.Xml.XmlResolver> como uno de sus argumentos y especifique un <xref:System.Xml.XmlResolver> con las credenciales necesarias.  
  
 Un <xref:System.Xml.XmlReader> no tiene valor predeterminado la configuración se usa para cargar el documento de entrada. El procesamiento de DTD está deshabilitado en el <xref:System.Xml.XmlReader>. Si necesita el procesamiento de DTD, cree un <xref:System.Xml.XmlReader> con esta característica habilitada y páselo a la <xref:System.Xml.Xsl.XslCompiledTransform.Transform%2A> método.  
  
 Este método no es compatible con la `xsl:strip-space` elemento. Si la hoja de estilos compilada incluye la `xsl:strip-space` elemento, debe utilizar el <xref:System.Xml.Xsl.XslCompiledTransform.Transform%2A> sobrecarga que toma un <xref:System.Xml.XmlReader> como argumento de entrada.  
  
   
  
## Examples  
 En el ejemplo siguiente se ejecuta una transformación XSLT y muestra los resultados en un <xref:System.Xml.XmlWriter> objeto.  
  
 [!code-csharp[XslCompiledTransform.Transform#2](~/samples/snippets/csharp/VS_Snippets_Data/XslCompiledTransform.Transform/CS/Xslt_Transform_v2.cs#2)]
 [!code-vb[XslCompiledTransform.Transform#2](~/samples/snippets/visualbasic/VS_Snippets_Data/XslCompiledTransform.Transform/VB/Xslt_Transform_v2.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">El valor de <paramref name="inputUri" /> o <paramref name="results" /> es <see langword="null" />.</exception>
        <exception cref="T:System.Xml.Xsl.XsltException">Se ha producido un error al ejecutar la transformación XSLT.</exception>
        <exception cref="T:System.IO.DirectoryNotFoundException">El valor <paramref name="inputUri" /> incluye un nombre de archivo o un directorio que no se puede encontrar.</exception>
        <exception cref="T:System.Net.WebException">El valor <paramref name="inputUri" /> no se puede resolver.  
  
 O bien  
  
 Error al procesar la solicitud.</exception>
        <exception cref="T:System.UriFormatException">
          <paramref name="inputUri" /> no es un URI válido.</exception>
        <exception cref="T:System.Xml.XmlException">Hubo un error de análisis al cargar el documento de entrada.</exception>
      </Docs>
    </Member>
    <Member MemberName="Transform">
      <MemberSignature Language="C#" Value="public void Transform (System.Xml.XmlReader input, System.Xml.XmlWriter results);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Transform(class System.Xml.XmlReader input, class System.Xml.XmlWriter results) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Xsl.XslCompiledTransform.Transform(System.Xml.XmlReader,System.Xml.XmlWriter)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Transform (input As XmlReader, results As XmlWriter)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Transform(System::Xml::XmlReader ^ input, System::Xml::XmlWriter ^ results);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.Xml.XmlReader" />
        <Parameter Name="results" Type="System.Xml.XmlWriter" />
      </Parameters>
      <Docs>
        <param name="input">
          <see cref="T:System.Xml.XmlReader" /> que contiene el documento de entrada.</param>
        <param name="results">Objeto <see cref="T:System.Xml.XmlWriter" /> al que se desea enviar el resultado.  
  
 Si la hoja de estilos contiene un elemento <c>xsl:output</c>, deberá crear la clase <see cref="T:System.Xml.XmlWriter" /> usando el objeto <see cref="T:System.Xml.XmlWriterSettings" /> devuelto por la propiedad <see cref="P:System.Xml.Xsl.XslCompiledTransform.OutputSettings" />. Con ello se garantiza que <see cref="T:System.Xml.XmlWriter" /> tenga la configuración de resultados correcta.</param>
        <summary>Ejecuta la transformación usando el documento de entrada especificado por el objeto <see cref="T:System.Xml.XmlReader" /> y guarda el resultado en un objeto <see cref="T:System.Xml.XmlWriter" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si el objetivo de XSLT `document()` función está habilitada, se resuelve utilizando un <xref:System.Xml.XmlUrlResolver> sin credenciales de usuario. Si el recurso externo se encuentra en un recurso de red que requiere autenticación, utilice la sobrecarga que toma un <xref:System.Xml.XmlResolver> como uno de sus argumentos y especifique un <xref:System.Xml.XmlResolver> con las credenciales necesarias.  
  
   
  
## Examples  
 En el ejemplo siguiente se transforma el primer libro del archivo books.xml.  
  
 [!code-csharp[XslCompiledTransform.Transform#7](~/samples/snippets/csharp/VS_Snippets_Data/XslCompiledTransform.Transform/CS/Xslt_Transform_v2.cs#7)]
 [!code-vb[XslCompiledTransform.Transform#7](~/samples/snippets/visualbasic/VS_Snippets_Data/XslCompiledTransform.Transform/VB/Xslt_Transform_v2.vb#7)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">El valor de <paramref name="input" /> o <paramref name="results" /> es <see langword="null" />.</exception>
        <exception cref="T:System.Xml.Xsl.XsltException">Se ha producido un error al ejecutar la transformación XSLT.</exception>
      </Docs>
    </Member>
    <Member MemberName="Transform">
      <MemberSignature Language="C#" Value="public void Transform (System.Xml.XPath.IXPathNavigable input, System.Xml.XmlWriter results);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Transform(class System.Xml.XPath.IXPathNavigable input, class System.Xml.XmlWriter results) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Xsl.XslCompiledTransform.Transform(System.Xml.XPath.IXPathNavigable,System.Xml.XmlWriter)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Transform (input As IXPathNavigable, results As XmlWriter)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Transform(System::Xml::XPath::IXPathNavigable ^ input, System::Xml::XmlWriter ^ results);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.Xml.XPath.IXPathNavigable" />
        <Parameter Name="results" Type="System.Xml.XmlWriter" />
      </Parameters>
      <Docs>
        <param name="input">Objeto que implementa la interfaz <see cref="T:System.Xml.XPath.IXPathNavigable" />. En Microsoft .NET Framework, puede ser una clase <see cref="T:System.Xml.XmlNode" /> (normalmente <see cref="T:System.Xml.XmlDocument" />) o una clase <see cref="T:System.Xml.XPath.XPathDocument" /> que contiene los datos que se van a transformar.</param>
        <param name="results">Objeto <see cref="T:System.Xml.XmlWriter" /> al que se desea enviar el resultado.  
  
 Si la hoja de estilos contiene un elemento <c>xsl:output</c>, deberá crear la clase <see cref="T:System.Xml.XmlWriter" /> usando el objeto <see cref="T:System.Xml.XmlWriterSettings" /> devuelto por la propiedad <see cref="P:System.Xml.Xsl.XslCompiledTransform.OutputSettings" />. Con ello se garantiza que <see cref="T:System.Xml.XmlWriter" /> tenga la configuración de resultados correcta.</param>
        <summary>Ejecuta la transformación usando el documento de entrada especificado por el objeto <see cref="T:System.Xml.XPath.IXPathNavigable" /> y guarda el resultado en un objeto <see cref="T:System.Xml.XmlWriter" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si el objetivo de XSLT `document()` función está habilitada, se resuelve utilizando un <xref:System.Xml.XmlUrlResolver> sin credenciales de usuario. Si el recurso externo se encuentra en un recurso de red que requiere autenticación, utilice la sobrecarga que toma un <xref:System.Xml.XmlResolver> como uno de sus argumentos y especifique un <xref:System.Xml.XmlResolver> con las credenciales necesarias.  
  
 Este método no es compatible con la `xsl:strip-space` elemento. Si la hoja de estilos compilada incluye la `xsl:strip-space` elemento, debe utilizar el <xref:System.Xml.Xsl.XslCompiledTransform.Transform%2A> sobrecarga que toma un <xref:System.Xml.XmlReader> como argumento de entrada.  
  
 La interfaz <xref:System.Xml.XPath.IXPathNavigable> se implementa en la clase <xref:System.Xml.XmlNode> y <xref:System.Xml.XPath.XPathDocument>. Estas clases representan una caché en memoria de datos XML.  
  
-   La clase <xref:System.Xml.XmlNode> se basa en el Modelo de objetos de documento (DOM) del W3C e incluye capacidades de edición.  
  
-   La clase <xref:System.Xml.XPath.XPathDocument> es un almacén de datos de solo lectura basado en el modelo de datos XPath. <xref:System.Xml.XPath.XPathDocument> es la clase recomendada para el procesamiento XSLT. Proporciona un rendimiento mayor comparada con la clase <xref:System.Xml.XmlNode>.  
  
 Las transformaciones se aplican al documento en su totalidad. En otras palabras, si se pasa un nodo distinto del nodo raíz del documento, esto no evita que el proceso de transformación pueda obtener acceso a todos los nodos del documento cargado. Para transformar un fragmento del nodo, debe crear un objeto que contenga solo el fragmento del nodo y pasar ese objeto al método <xref:System.Xml.Xsl.XslCompiledTransform.Transform%2A>. Para obtener más información, consulte [Transformación de un fragmento del nodo](~/docs/standard/data/xml/how-to-transform-a-node-fragment.md).  
  
   
  
## Examples  
 En el ejemplo siguiente se ejecuta una transformación XSLT y muestra los resultados en un <xref:System.Xml.XmlWriter> objeto.  
  
 [!code-csharp[XslCompiledTransform.Transform#5](~/samples/snippets/csharp/VS_Snippets_Data/XslCompiledTransform.Transform/CS/Xslt_Transform_v2.cs#5)]
 [!code-vb[XslCompiledTransform.Transform#5](~/samples/snippets/visualbasic/VS_Snippets_Data/XslCompiledTransform.Transform/VB/Xslt_Transform_v2.vb#5)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">El valor de <paramref name="input" /> o <paramref name="results" /> es <see langword="null" />.</exception>
        <exception cref="T:System.Xml.Xsl.XsltException">Se ha producido un error al ejecutar la transformación XSLT.</exception>
      </Docs>
    </Member>
    <Member MemberName="Transform">
      <MemberSignature Language="C#" Value="public void Transform (string inputUri, System.Xml.Xsl.XsltArgumentList arguments, System.IO.Stream results);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Transform(string inputUri, class System.Xml.Xsl.XsltArgumentList arguments, class System.IO.Stream results) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Xsl.XslCompiledTransform.Transform(System.String,System.Xml.Xsl.XsltArgumentList,System.IO.Stream)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Transform (inputUri As String, arguments As XsltArgumentList, results As Stream)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Transform(System::String ^ inputUri, System::Xml::Xsl::XsltArgumentList ^ arguments, System::IO::Stream ^ results);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="inputUri" Type="System.String" />
        <Parameter Name="arguments" Type="System.Xml.Xsl.XsltArgumentList" />
        <Parameter Name="results" Type="System.IO.Stream" />
      </Parameters>
      <Docs>
        <param name="inputUri">URI del documento de entrada.</param>
        <param name="arguments">
          <see cref="T:System.Xml.Xsl.XsltArgumentList" /> que contiene los argumentos, calificados con el espacio de nombres, utilizados como entrada para la transformación. Este valor puede ser <see langword="null" />.</param>
        <param name="results">Flujo al que se desea enviar la salida.</param>
        <summary>Ejecuta la transformación usando el documento de entrada que especifica el URI y guarda el resultado en un flujo. La clase <see cref="T:System.Xml.Xsl.XsltArgumentList" /> proporciona argumentos adicionales en tiempo de ejecución.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este método usa el valor predeterminado es <xref:System.Xml.XmlUrlResolver> sin credenciales de usuario para resolver el documento de entrada y todas las instancias de la transformación XSLT `document()` función se encuentra en la hoja de estilos. Si cualquiera de estos recursos se encuentran en un recurso de red que requiere autenticación, utilice la sobrecarga que toma un <xref:System.Xml.XmlResolver> como uno de sus argumentos y especifique un <xref:System.Xml.XmlResolver> con las credenciales necesarias.  
  
 Un <xref:System.Xml.XmlReader> no tiene valor predeterminado la configuración se usa para cargar el documento de entrada. El procesamiento de DTD está deshabilitado en el <xref:System.Xml.XmlReader>. Si necesita el procesamiento de DTD, cree un <xref:System.Xml.XmlReader> con esta característica habilitada y páselo a la <xref:System.Xml.Xsl.XslCompiledTransform.Transform%2A> método.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">El valor de <paramref name="inputUri" /> o <paramref name="results" /> es <see langword="null" />.</exception>
        <exception cref="T:System.Xml.Xsl.XsltException">Se ha producido un error al ejecutar la transformación XSLT.</exception>
        <exception cref="T:System.IO.DirectoryNotFoundException">El valor <paramref name="inputUri" /> incluye un nombre de archivo o un directorio que no se puede encontrar.</exception>
        <exception cref="T:System.Net.WebException">El valor <paramref name="inputUri" /> no se puede resolver.  
  
 O bien  
  
 Se ha producido un error al procesar la solicitud.</exception>
        <exception cref="T:System.UriFormatException">
          <paramref name="inputUri" /> no es un URI válido.</exception>
        <exception cref="T:System.Xml.XmlException">Hubo un error de análisis al cargar el documento de entrada.</exception>
      </Docs>
    </Member>
    <Member MemberName="Transform">
      <MemberSignature Language="C#" Value="public void Transform (string inputUri, System.Xml.Xsl.XsltArgumentList arguments, System.IO.TextWriter results);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Transform(string inputUri, class System.Xml.Xsl.XsltArgumentList arguments, class System.IO.TextWriter results) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Xsl.XslCompiledTransform.Transform(System.String,System.Xml.Xsl.XsltArgumentList,System.IO.TextWriter)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Transform (inputUri As String, arguments As XsltArgumentList, results As TextWriter)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Transform(System::String ^ inputUri, System::Xml::Xsl::XsltArgumentList ^ arguments, System::IO::TextWriter ^ results);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="inputUri" Type="System.String" />
        <Parameter Name="arguments" Type="System.Xml.Xsl.XsltArgumentList" />
        <Parameter Name="results" Type="System.IO.TextWriter" />
      </Parameters>
      <Docs>
        <param name="inputUri">URI del documento de entrada.</param>
        <param name="arguments">
          <see cref="T:System.Xml.Xsl.XsltArgumentList" /> que contiene los argumentos, calificados con el espacio de nombres, utilizados como entrada para la transformación. Este valor puede ser <see langword="null" />.</param>
        <param name="results">Objeto <see cref="T:System.IO.TextWriter" /> al que se desea enviar el resultado.</param>
        <summary>Ejecuta la transformación usando el documento de entrada que especifica el URI y guarda el resultado en una clase <see cref="T:System.IO.TextWriter" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este método usa el valor predeterminado es <xref:System.Xml.XmlUrlResolver> sin credenciales de usuario para resolver el documento de entrada y todas las instancias de la transformación XSLT `document()` función se encuentra en la hoja de estilos. Si cualquiera de estos recursos se encuentran en un recurso de red que requiere autenticación, utilice la sobrecarga que toma un <xref:System.Xml.XmlResolver> como uno de sus argumentos y especifique un <xref:System.Xml.XmlResolver> con las credenciales necesarias.  
  
 Un <xref:System.Xml.XmlReader> no tiene valor predeterminado la configuración se usa para cargar el documento de entrada. El procesamiento de DTD está deshabilitado en el <xref:System.Xml.XmlReader>. Si necesita el procesamiento de DTD, cree un <xref:System.Xml.XmlReader> con esta característica habilitada y páselo a la <xref:System.Xml.Xsl.XslCompiledTransform.Transform%2A> método.  
  
   
  
## Examples  
 En el ejemplo siguiente se ejecuta una transformación XSLT y genera una cadena.  
  
 [!code-csharp[XslCompiledTransform.Transform#3](~/samples/snippets/csharp/VS_Snippets_Data/XslCompiledTransform.Transform/CS/Xslt_Transform_v2.cs#3)]
 [!code-vb[XslCompiledTransform.Transform#3](~/samples/snippets/visualbasic/VS_Snippets_Data/XslCompiledTransform.Transform/VB/Xslt_Transform_v2.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">El valor de <paramref name="inputUri" /> o <paramref name="results" /> es <see langword="null" />.</exception>
        <exception cref="T:System.Xml.Xsl.XsltException">Se ha producido un error al ejecutar la transformación XSLT.</exception>
        <exception cref="T:System.IO.DirectoryNotFoundException">El valor <paramref name="inputUri" /> incluye un nombre de archivo o un directorio que no se puede encontrar.</exception>
        <exception cref="T:System.Net.WebException">El valor <paramref name="inputUri" /> no se puede resolver.  
  
 O bien  
  
 Se ha producido un error al procesar la solicitud.</exception>
        <exception cref="T:System.UriFormatException">
          <paramref name="inputUri" /> no es un URI válido.</exception>
        <exception cref="T:System.Xml.XmlException">Hubo un error de análisis al cargar el documento de entrada.</exception>
      </Docs>
    </Member>
    <Member MemberName="Transform">
      <MemberSignature Language="C#" Value="public void Transform (string inputUri, System.Xml.Xsl.XsltArgumentList arguments, System.Xml.XmlWriter results);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Transform(string inputUri, class System.Xml.Xsl.XsltArgumentList arguments, class System.Xml.XmlWriter results) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Xsl.XslCompiledTransform.Transform(System.String,System.Xml.Xsl.XsltArgumentList,System.Xml.XmlWriter)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Transform (inputUri As String, arguments As XsltArgumentList, results As XmlWriter)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Transform(System::String ^ inputUri, System::Xml::Xsl::XsltArgumentList ^ arguments, System::Xml::XmlWriter ^ results);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="inputUri" Type="System.String" />
        <Parameter Name="arguments" Type="System.Xml.Xsl.XsltArgumentList" />
        <Parameter Name="results" Type="System.Xml.XmlWriter" />
      </Parameters>
      <Docs>
        <param name="inputUri">URI del documento de entrada.</param>
        <param name="arguments">
          <see cref="T:System.Xml.Xsl.XsltArgumentList" /> que contiene los argumentos, calificados con el espacio de nombres, utilizados como entrada para la transformación. Este valor puede ser <see langword="null" />.</param>
        <param name="results">Objeto <see cref="T:System.Xml.XmlWriter" /> al que se desea enviar el resultado.  
  
 Si la hoja de estilos contiene un elemento <c>xsl:output</c>, deberá crear la clase <see cref="T:System.Xml.XmlWriter" /> usando el objeto <see cref="T:System.Xml.XmlWriterSettings" /> devuelto por la propiedad <see cref="P:System.Xml.Xsl.XslCompiledTransform.OutputSettings" />. Con ello se garantiza que <see cref="T:System.Xml.XmlWriter" /> tenga la configuración de resultados correcta.</param>
        <summary>Ejecuta la transformación usando el documento de entrada que especifica el URI y guarda el resultado en una clase <see cref="T:System.Xml.XmlWriter" />. La clase <see cref="T:System.Xml.Xsl.XsltArgumentList" /> proporciona argumentos adicionales en tiempo de ejecución.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este método usa el valor predeterminado es <xref:System.Xml.XmlUrlResolver> sin credenciales de usuario para resolver el documento de entrada y todas las instancias de la transformación XSLT `document()` función se encuentra en la hoja de estilos. Si cualquiera de estos recursos se encuentran en un recurso de red que requiere autenticación, utilice la sobrecarga que toma un <xref:System.Xml.XmlResolver> como uno de sus argumentos y especifique un <xref:System.Xml.XmlResolver> con las credenciales necesarias.  
  
 Un <xref:System.Xml.XmlReader> no tiene valor predeterminado la configuración se usa para cargar el documento de entrada. El procesamiento de DTD está deshabilitado en el <xref:System.Xml.XmlReader>. Si necesita el procesamiento de DTD, cree un <xref:System.Xml.XmlReader> con esta característica habilitada y páselo a la <xref:System.Xml.Xsl.XslCompiledTransform.Transform%2A> método.  
  
   
  
## Examples  
 En el ejemplo siguiente se usa un <xref:System.Xml.Xsl.XsltArgumentList> objeto para crear un parámetro que representa la fecha y hora actuales.  
  
 [!code-csharp[XsltArgumentList.AddParam#1](~/samples/snippets/csharp/VS_Snippets_Data/XsltArgumentList.AddParam/CS/addparam.cs#1)]
 [!code-vb[XsltArgumentList.AddParam#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XsltArgumentList.AddParam/VB/addparam.vb#1)]  
  
 El ejemplo utiliza los siguientes dos archivos de datos como entrada.  
  
 order.xml  
  
 [!code-xml[XsltArgumentList.AddParam#2](~/samples/snippets/xml/VS_Snippets_Data/XsltArgumentList.AddParam/XML/order.xml#2)]  
  
 order.xsl  
  
 [!code-xml[XsltArgumentList.AddParam#3](~/samples/snippets/xml/VS_Snippets_Data/XsltArgumentList.AddParam/XML/order.xsl#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">El valor de <paramref name="inputUri" /> o <paramref name="results" /> es <see langword="null" />.</exception>
        <exception cref="T:System.Xml.Xsl.XsltException">Se ha producido un error al ejecutar la transformación XSLT.</exception>
        <exception cref="T:System.IO.DirectoryNotFoundException">El valor <paramref name="inputtUri" /> incluye un nombre de archivo o un directorio que no se puede encontrar.</exception>
        <exception cref="T:System.Net.WebException">El valor <paramref name="inputUri" /> no se puede resolver.  
  
 O bien  
  
 Error al procesar la solicitud.</exception>
        <exception cref="T:System.UriFormatException">
          <paramref name="inputUri" /> no es un URI válido.</exception>
        <exception cref="T:System.Xml.XmlException">Hubo un error de análisis al cargar el documento de entrada.</exception>
      </Docs>
    </Member>
    <Member MemberName="Transform">
      <MemberSignature Language="C#" Value="public void Transform (System.Xml.XmlReader input, System.Xml.Xsl.XsltArgumentList arguments, System.IO.Stream results);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Transform(class System.Xml.XmlReader input, class System.Xml.Xsl.XsltArgumentList arguments, class System.IO.Stream results) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Xsl.XslCompiledTransform.Transform(System.Xml.XmlReader,System.Xml.Xsl.XsltArgumentList,System.IO.Stream)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Transform (input As XmlReader, arguments As XsltArgumentList, results As Stream)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Transform(System::Xml::XmlReader ^ input, System::Xml::Xsl::XsltArgumentList ^ arguments, System::IO::Stream ^ results);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.Xml.XmlReader" />
        <Parameter Name="arguments" Type="System.Xml.Xsl.XsltArgumentList" />
        <Parameter Name="results" Type="System.IO.Stream" />
      </Parameters>
      <Docs>
        <param name="input">
          <see cref="T:System.Xml.XmlReader" /> que contiene el documento de entrada.</param>
        <param name="arguments">
          <see cref="T:System.Xml.Xsl.XsltArgumentList" /> que contiene los argumentos, calificados con el espacio de nombres, utilizados como entrada para la transformación. Este valor puede ser <see langword="null" />.</param>
        <param name="results">Flujo al que se desea enviar la salida.</param>
        <summary>Ejecuta la transformación usando el documento de entrada especificado mediante el objeto <see cref="T:System.Xml.XmlReader" /> y guarda el resultado en una secuencia. La clase <see cref="T:System.Xml.Xsl.XsltArgumentList" /> proporciona argumentos adicionales en tiempo de ejecución.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si la hoja de estilos incluye una transformación XSLT `document()` función, se resuelve utilizando un <xref:System.Xml.XmlUrlResolver> sin credenciales de usuario. Si el recurso externo se encuentra en un recurso de red que requiere autenticación, utilice la sobrecarga que toma un <xref:System.Xml.XmlResolver> como uno de sus argumentos y especifique un <xref:System.Xml.XmlResolver> con las credenciales necesarias.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">El valor de <paramref name="input" /> o <paramref name="results" /> es <see langword="null" />.</exception>
        <exception cref="T:System.Xml.Xsl.XsltException">Se ha producido un error al ejecutar la transformación XSLT.</exception>
      </Docs>
    </Member>
    <Member MemberName="Transform">
      <MemberSignature Language="C#" Value="public void Transform (System.Xml.XmlReader input, System.Xml.Xsl.XsltArgumentList arguments, System.IO.TextWriter results);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Transform(class System.Xml.XmlReader input, class System.Xml.Xsl.XsltArgumentList arguments, class System.IO.TextWriter results) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Xsl.XslCompiledTransform.Transform(System.Xml.XmlReader,System.Xml.Xsl.XsltArgumentList,System.IO.TextWriter)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Transform (input As XmlReader, arguments As XsltArgumentList, results As TextWriter)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Transform(System::Xml::XmlReader ^ input, System::Xml::Xsl::XsltArgumentList ^ arguments, System::IO::TextWriter ^ results);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.Xml.XmlReader" />
        <Parameter Name="arguments" Type="System.Xml.Xsl.XsltArgumentList" />
        <Parameter Name="results" Type="System.IO.TextWriter" />
      </Parameters>
      <Docs>
        <param name="input">
          <see cref="T:System.Xml.XmlReader" /> que contiene el documento de entrada.</param>
        <param name="arguments">
          <see cref="T:System.Xml.Xsl.XsltArgumentList" /> que contiene los argumentos, calificados con el espacio de nombres, utilizados como entrada para la transformación. Este valor puede ser <see langword="null" />.</param>
        <param name="results">Objeto <see cref="T:System.IO.TextWriter" /> al que se desea enviar el resultado.</param>
        <summary>Ejecuta la transformación usando el documento de entrada especificado mediante el objeto <see cref="T:System.Xml.XmlReader" /> y guarda el resultado en <see cref="T:System.IO.TextWriter" />. La clase <see cref="T:System.Xml.Xsl.XsltArgumentList" /> proporciona argumentos adicionales en tiempo de ejecución.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si la hoja de estilos incluye una transformación XSLT `document()` función, se resuelve utilizando un <xref:System.Xml.XmlUrlResolver> sin credenciales de usuario. Si el recurso externo se encuentra en un recurso de red que requiere autenticación, utilice la sobrecarga que toma un <xref:System.Xml.XmlResolver> como uno de sus argumentos y especifique un <xref:System.Xml.XmlResolver> con las credenciales necesarias.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">El valor de <paramref name="input" /> o <paramref name="results" /> es <see langword="null" />.</exception>
        <exception cref="T:System.Xml.Xsl.XsltException">Se ha producido un error al ejecutar la transformación XSLT.</exception>
      </Docs>
    </Member>
    <Member MemberName="Transform">
      <MemberSignature Language="C#" Value="public void Transform (System.Xml.XmlReader input, System.Xml.Xsl.XsltArgumentList arguments, System.Xml.XmlWriter results);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Transform(class System.Xml.XmlReader input, class System.Xml.Xsl.XsltArgumentList arguments, class System.Xml.XmlWriter results) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Xsl.XslCompiledTransform.Transform(System.Xml.XmlReader,System.Xml.Xsl.XsltArgumentList,System.Xml.XmlWriter)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Transform (input As XmlReader, arguments As XsltArgumentList, results As XmlWriter)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Transform(System::Xml::XmlReader ^ input, System::Xml::Xsl::XsltArgumentList ^ arguments, System::Xml::XmlWriter ^ results);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.Xml.XmlReader" />
        <Parameter Name="arguments" Type="System.Xml.Xsl.XsltArgumentList" />
        <Parameter Name="results" Type="System.Xml.XmlWriter" />
      </Parameters>
      <Docs>
        <param name="input">
          <see cref="T:System.Xml.XmlReader" /> que contiene el documento de entrada.</param>
        <param name="arguments">
          <see cref="T:System.Xml.Xsl.XsltArgumentList" /> que contiene los argumentos, calificados con el espacio de nombres, utilizados como entrada para la transformación. Este valor puede ser <see langword="null" />.</param>
        <param name="results">Objeto <see cref="T:System.Xml.XmlWriter" /> al que se desea enviar el resultado.  
  
 Si la hoja de estilos contiene un elemento <c>xsl:output</c>, deberá crear la clase <see cref="T:System.Xml.XmlWriter" /> usando el objeto <see cref="T:System.Xml.XmlWriterSettings" /> devuelto por la propiedad <see cref="P:System.Xml.Xsl.XslCompiledTransform.OutputSettings" />. Con ello se garantiza que <see cref="T:System.Xml.XmlWriter" /> tenga la configuración de resultados correcta.</param>
        <summary>Ejecuta la transformación usando el documento de entrada especificado por el objeto <see cref="T:System.Xml.XmlReader" /> y guarda el resultado en un objeto <see cref="T:System.Xml.XmlWriter" />. La clase <see cref="T:System.Xml.Xsl.XsltArgumentList" /> proporciona argumentos adicionales en tiempo de ejecución.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si la hoja de estilos incluye una transformación XSLT `document()` función, se resuelve utilizando un <xref:System.Xml.XmlUrlResolver> sin credenciales de usuario. Si el recurso externo se encuentra en un recurso de red que requiere autenticación, utilice la sobrecarga que toma un <xref:System.Xml.XmlResolver> como uno de sus argumentos y especifique un <xref:System.Xml.XmlResolver> con las credenciales necesarias.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">El valor de <paramref name="input" /> o <paramref name="results" /> es <see langword="null" />.</exception>
        <exception cref="T:System.Xml.Xsl.XsltException">Se ha producido un error al ejecutar la transformación XSLT.</exception>
      </Docs>
    </Member>
    <Member MemberName="Transform">
      <MemberSignature Language="C#" Value="public void Transform (System.Xml.XPath.IXPathNavigable input, System.Xml.Xsl.XsltArgumentList arguments, System.IO.Stream results);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Transform(class System.Xml.XPath.IXPathNavigable input, class System.Xml.Xsl.XsltArgumentList arguments, class System.IO.Stream results) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Xsl.XslCompiledTransform.Transform(System.Xml.XPath.IXPathNavigable,System.Xml.Xsl.XsltArgumentList,System.IO.Stream)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Transform (input As IXPathNavigable, arguments As XsltArgumentList, results As Stream)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Transform(System::Xml::XPath::IXPathNavigable ^ input, System::Xml::Xsl::XsltArgumentList ^ arguments, System::IO::Stream ^ results);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.Xml.XPath.IXPathNavigable" />
        <Parameter Name="arguments" Type="System.Xml.Xsl.XsltArgumentList" />
        <Parameter Name="results" Type="System.IO.Stream" />
      </Parameters>
      <Docs>
        <param name="input">Objeto que implementa la interfaz <see cref="T:System.Xml.XPath.IXPathNavigable" />. En Microsoft .NET Framework, puede ser una clase <see cref="T:System.Xml.XmlNode" /> (normalmente <see cref="T:System.Xml.XmlDocument" />) o una clase <see cref="T:System.Xml.XPath.XPathDocument" /> que contiene los datos que se van a transformar.</param>
        <param name="arguments">
          <see cref="T:System.Xml.Xsl.XsltArgumentList" /> que contiene los argumentos, calificados con el espacio de nombres, utilizados como entrada para la transformación. Este valor puede ser <see langword="null" />.</param>
        <param name="results">Flujo al que se desea enviar la salida.</param>
        <summary>Ejecuta la transformación usando el documento de entrada especificado mediante el objeto <see cref="T:System.Xml.XPath.IXPathNavigable" /> y guarda el resultado en una secuencia. La clase <see cref="T:System.Xml.Xsl.XsltArgumentList" /> proporciona argumentos adicionales en tiempo de ejecución.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si el objetivo de XSLT `document()` función está habilitada, se resuelve utilizando un <xref:System.Xml.XmlUrlResolver> sin credenciales de usuario. Si el recurso externo se encuentra en un recurso de red que requiere autenticación, utilice la sobrecarga que toma un <xref:System.Xml.XmlResolver> como uno de sus argumentos y especifique un <xref:System.Xml.XmlResolver> con las credenciales necesarias.  
  
 Este método no es compatible con la `xsl:strip-space` elemento. Si la hoja de estilos compilada incluye la `xsl:strip-space` elemento, debe utilizar el <xref:System.Xml.Xsl.XslCompiledTransform.Transform%2A> sobrecarga que toma un <xref:System.Xml.XmlReader> como argumento de entrada.  
  
 La interfaz <xref:System.Xml.XPath.IXPathNavigable> se implementa en la clase <xref:System.Xml.XmlNode> y <xref:System.Xml.XPath.XPathDocument>. Estas clases representan una caché en memoria de datos XML.  
  
-   La clase <xref:System.Xml.XmlNode> se basa en el Modelo de objetos de documento (DOM) del W3C e incluye capacidades de edición.  
  
-   La clase <xref:System.Xml.XPath.XPathDocument> es un almacén de datos de solo lectura basado en el modelo de datos XPath. <xref:System.Xml.XPath.XPathDocument> es la clase recomendada para el procesamiento XSLT. Proporciona un rendimiento mayor comparada con la clase <xref:System.Xml.XmlNode>.  
  
 Las transformaciones se aplican al documento en su totalidad. En otras palabras, si se pasa un nodo distinto del nodo raíz del documento, esto no evita que el proceso de transformación pueda obtener acceso a todos los nodos del documento cargado. Para transformar un fragmento del nodo, debe crear un objeto que contenga solo el fragmento del nodo y pasar ese objeto al método <xref:System.Xml.Xsl.XslCompiledTransform.Transform%2A>. Para obtener más información, consulte [Transformación de un fragmento del nodo](~/docs/standard/data/xml/how-to-transform-a-node-fragment.md).  
  
   
  
## Examples  
 En el ejemplo siguiente se ejecuta una transformación XSLT y muestra los resultados en un <xref:System.IO.FileStream>.  
  
 [!code-csharp[XslCompiledTransform.Transform#6](~/samples/snippets/csharp/VS_Snippets_Data/XslCompiledTransform.Transform/CS/Xslt_Transform_v2.cs#6)]
 [!code-vb[XslCompiledTransform.Transform#6](~/samples/snippets/visualbasic/VS_Snippets_Data/XslCompiledTransform.Transform/VB/Xslt_Transform_v2.vb#6)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">El valor de <paramref name="input" /> o <paramref name="results" /> es <see langword="null" />.</exception>
        <exception cref="T:System.Xml.Xsl.XsltException">Se ha producido un error al ejecutar la transformación XSLT.</exception>
      </Docs>
    </Member>
    <Member MemberName="Transform">
      <MemberSignature Language="C#" Value="public void Transform (System.Xml.XPath.IXPathNavigable input, System.Xml.Xsl.XsltArgumentList arguments, System.IO.TextWriter results);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Transform(class System.Xml.XPath.IXPathNavigable input, class System.Xml.Xsl.XsltArgumentList arguments, class System.IO.TextWriter results) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Xsl.XslCompiledTransform.Transform(System.Xml.XPath.IXPathNavigable,System.Xml.Xsl.XsltArgumentList,System.IO.TextWriter)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Transform (input As IXPathNavigable, arguments As XsltArgumentList, results As TextWriter)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Transform(System::Xml::XPath::IXPathNavigable ^ input, System::Xml::Xsl::XsltArgumentList ^ arguments, System::IO::TextWriter ^ results);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.Xml.XPath.IXPathNavigable" />
        <Parameter Name="arguments" Type="System.Xml.Xsl.XsltArgumentList" />
        <Parameter Name="results" Type="System.IO.TextWriter" />
      </Parameters>
      <Docs>
        <param name="input">Objeto que implementa la interfaz <see cref="T:System.Xml.XPath.IXPathNavigable" />. En Microsoft .NET Framework, puede ser una clase <see cref="T:System.Xml.XmlNode" /> (normalmente <see cref="T:System.Xml.XmlDocument" />) o una clase <see cref="T:System.Xml.XPath.XPathDocument" /> que contiene los datos que se van a transformar.</param>
        <param name="arguments">
          <see cref="T:System.Xml.Xsl.XsltArgumentList" /> que contiene los argumentos, calificados con el espacio de nombres, utilizados como entrada para la transformación. Este valor puede ser <see langword="null" />.</param>
        <param name="results">Objeto <see cref="T:System.IO.TextWriter" /> al que se desea enviar el resultado.</param>
        <summary>Ejecuta la transformación usando el documento de entrada especificado por el objeto <see cref="T:System.Xml.XPath.IXPathNavigable" /> y guarda el resultado en un objeto <see cref="T:System.IO.TextWriter" />. La clase <see cref="T:System.Xml.Xsl.XsltArgumentList" /> proporciona argumentos adicionales en tiempo de ejecución.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si el objetivo de XSLT `document()` función está habilitada, se resuelve utilizando un <xref:System.Xml.XmlUrlResolver> sin credenciales de usuario. Si el recurso externo se encuentra en un recurso de red que requiere autenticación, utilice la sobrecarga que toma un <xref:System.Xml.XmlResolver> como uno de sus argumentos y especifique un <xref:System.Xml.XmlResolver> con las credenciales necesarias.  
  
 Este método no es compatible con la `xsl:strip-space` elemento. Si la hoja de estilos compilada incluye la `xsl:strip-space` elemento, debe utilizar el <xref:System.Xml.Xsl.XslCompiledTransform.Transform%2A> sobrecarga que toma un <xref:System.Xml.XmlReader> como argumento de entrada.  
  
 La interfaz <xref:System.Xml.XPath.IXPathNavigable> se implementa en la clase <xref:System.Xml.XmlNode> y <xref:System.Xml.XPath.XPathDocument>. Estas clases representan una caché en memoria de datos XML.  
  
-   La clase <xref:System.Xml.XmlNode> se basa en el Modelo de objetos de documento (DOM) del W3C e incluye capacidades de edición.  
  
-   La clase <xref:System.Xml.XPath.XPathDocument> es un almacén de datos de solo lectura basado en el modelo de datos XPath. <xref:System.Xml.XPath.XPathDocument> es la clase recomendada para el procesamiento XSLT. Proporciona un rendimiento mayor comparada con la clase <xref:System.Xml.XmlNode>.  
  
 Las transformaciones se aplican al documento en su totalidad. En otras palabras, si se pasa un nodo distinto del nodo raíz del documento, esto no evita que el proceso de transformación pueda obtener acceso a todos los nodos del documento cargado. Para transformar un fragmento del nodo, debe crear un objeto que contenga solo el fragmento del nodo y pasar ese objeto al método <xref:System.Xml.Xsl.XslCompiledTransform.Transform%2A>. Para obtener más información, consulte [Transformación de un fragmento del nodo](~/docs/standard/data/xml/how-to-transform-a-node-fragment.md).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">El valor de <paramref name="input" /> o <paramref name="results" /> es <see langword="null" />.</exception>
        <exception cref="T:System.Xml.Xsl.XsltException">Se ha producido un error al ejecutar la transformación XSLT.</exception>
      </Docs>
    </Member>
    <Member MemberName="Transform">
      <MemberSignature Language="C#" Value="public void Transform (System.Xml.XPath.IXPathNavigable input, System.Xml.Xsl.XsltArgumentList arguments, System.Xml.XmlWriter results);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Transform(class System.Xml.XPath.IXPathNavigable input, class System.Xml.Xsl.XsltArgumentList arguments, class System.Xml.XmlWriter results) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Xsl.XslCompiledTransform.Transform(System.Xml.XPath.IXPathNavigable,System.Xml.Xsl.XsltArgumentList,System.Xml.XmlWriter)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Transform (input As IXPathNavigable, arguments As XsltArgumentList, results As XmlWriter)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Transform(System::Xml::XPath::IXPathNavigable ^ input, System::Xml::Xsl::XsltArgumentList ^ arguments, System::Xml::XmlWriter ^ results);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.Xml.XPath.IXPathNavigable" />
        <Parameter Name="arguments" Type="System.Xml.Xsl.XsltArgumentList" />
        <Parameter Name="results" Type="System.Xml.XmlWriter" />
      </Parameters>
      <Docs>
        <param name="input">Objeto que implementa la interfaz <see cref="T:System.Xml.XPath.IXPathNavigable" />. En Microsoft .NET Framework, puede ser una clase <see cref="T:System.Xml.XmlNode" /> (normalmente <see cref="T:System.Xml.XmlDocument" />) o una clase <see cref="T:System.Xml.XPath.XPathDocument" /> que contiene los datos que se van a transformar.</param>
        <param name="arguments">
          <see cref="T:System.Xml.Xsl.XsltArgumentList" /> que contiene los argumentos, calificados con el espacio de nombres, utilizados como entrada para la transformación. Este valor puede ser <see langword="null" />.</param>
        <param name="results">Objeto <see cref="T:System.Xml.XmlWriter" /> al que se desea enviar el resultado.  
  
 Si la hoja de estilos contiene un elemento <c>xsl:output</c>, deberá crear la clase <see cref="T:System.Xml.XmlWriter" /> usando el objeto <see cref="T:System.Xml.XmlWriterSettings" /> devuelto por la propiedad <see cref="P:System.Xml.Xsl.XslCompiledTransform.OutputSettings" />. Con ello se garantiza que <see cref="T:System.Xml.XmlWriter" /> tenga la configuración de resultados correcta.</param>
        <summary>Ejecuta la transformación usando el documento de entrada especificado por el objeto <see cref="T:System.Xml.XPath.IXPathNavigable" /> y guarda el resultado en un objeto <see cref="T:System.Xml.XmlWriter" />. La clase <see cref="T:System.Xml.Xsl.XsltArgumentList" /> proporciona argumentos adicionales en tiempo de ejecución.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si el objetivo de XSLT `document()` función está habilitada, se resuelve utilizando un <xref:System.Xml.XmlUrlResolver> sin credenciales de usuario. Si el recurso externo se encuentra en un recurso de red que requiere autenticación, utilice la sobrecarga que toma un <xref:System.Xml.XmlResolver> como uno de sus argumentos y especifique un <xref:System.Xml.XmlResolver> con las credenciales necesarias.  
  
 Este método no es compatible con la `xsl:strip-space` elemento. Si la hoja de estilos compilada incluye la `xsl:strip-space` elemento, debe utilizar el <xref:System.Xml.Xsl.XslCompiledTransform.Transform%2A> sobrecarga que toma un <xref:System.Xml.XmlReader> como argumento de entrada.  
  
 La interfaz <xref:System.Xml.XPath.IXPathNavigable> se implementa en la clase <xref:System.Xml.XmlNode> y <xref:System.Xml.XPath.XPathDocument>. Estas clases representan una caché en memoria de datos XML.  
  
-   La clase <xref:System.Xml.XmlNode> se basa en el Modelo de objetos de documento (DOM) del W3C e incluye capacidades de edición.  
  
-   La clase <xref:System.Xml.XPath.XPathDocument> es un almacén de datos de solo lectura basado en el modelo de datos XPath. <xref:System.Xml.XPath.XPathDocument> es la clase recomendada para el procesamiento XSLT. Proporciona un rendimiento mayor comparada con la clase <xref:System.Xml.XmlNode>.  
  
 Las transformaciones se aplican al documento en su totalidad. En otras palabras, si se pasa un nodo distinto del nodo raíz del documento, esto no evita que el proceso de transformación pueda obtener acceso a todos los nodos del documento cargado. Para transformar un fragmento del nodo, debe crear un objeto que contenga solo el fragmento del nodo y pasar ese objeto al método <xref:System.Xml.Xsl.XslCompiledTransform.Transform%2A>. Para obtener más información, consulte [Transformación de un fragmento del nodo](~/docs/standard/data/xml/how-to-transform-a-node-fragment.md).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">El valor de <paramref name="input" /> o <paramref name="results" /> es <see langword="null" />.</exception>
        <exception cref="T:System.Xml.Xsl.XsltException">Se ha producido un error al ejecutar la transformación XSLT.</exception>
      </Docs>
    </Member>
    <Member MemberName="Transform">
      <MemberSignature Language="C#" Value="public void Transform (System.Xml.XmlReader input, System.Xml.Xsl.XsltArgumentList arguments, System.Xml.XmlWriter results, System.Xml.XmlResolver documentResolver);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Transform(class System.Xml.XmlReader input, class System.Xml.Xsl.XsltArgumentList arguments, class System.Xml.XmlWriter results, class System.Xml.XmlResolver documentResolver) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Xsl.XslCompiledTransform.Transform(System.Xml.XmlReader,System.Xml.Xsl.XsltArgumentList,System.Xml.XmlWriter,System.Xml.XmlResolver)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Transform (input As XmlReader, arguments As XsltArgumentList, results As XmlWriter, documentResolver As XmlResolver)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Transform(System::Xml::XmlReader ^ input, System::Xml::Xsl::XsltArgumentList ^ arguments, System::Xml::XmlWriter ^ results, System::Xml::XmlResolver ^ documentResolver);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.Xml.XmlReader" />
        <Parameter Name="arguments" Type="System.Xml.Xsl.XsltArgumentList" />
        <Parameter Name="results" Type="System.Xml.XmlWriter" />
        <Parameter Name="documentResolver" Type="System.Xml.XmlResolver" />
      </Parameters>
      <Docs>
        <param name="input">
          <see cref="T:System.Xml.XmlReader" /> que contiene el documento de entrada.</param>
        <param name="arguments">
          <see cref="T:System.Xml.Xsl.XsltArgumentList" /> que contiene los argumentos, calificados con el espacio de nombres, utilizados como entrada para la transformación. Este valor puede ser <see langword="null" />.</param>
        <param name="results">Objeto <see cref="T:System.Xml.XmlWriter" /> al que se desea enviar el resultado.  
  
 Si la hoja de estilos contiene un elemento <c>xsl:output</c>, deberá crear la clase <see cref="T:System.Xml.XmlWriter" /> usando el objeto <see cref="T:System.Xml.XmlWriterSettings" /> devuelto por la propiedad <see cref="P:System.Xml.Xsl.XslCompiledTransform.OutputSettings" />. Con ello se garantiza que <see cref="T:System.Xml.XmlWriter" /> tenga la configuración de resultados correcta.</param>
        <param name="documentResolver">
          <see cref="T:System.Xml.XmlResolver" /> que se usa para resolver la función <c>document()</c> de XSLT. Si es <see langword="null" />, la función <c>document()</c> no se resuelve.</param>
        <summary>Ejecuta la transformación usando el documento de entrada especificado por el objeto <see cref="T:System.Xml.XmlReader" /> y guarda el resultado en un objeto <see cref="T:System.Xml.XmlWriter" />. <see cref="T:System.Xml.Xsl.XsltArgumentList" /> proporciona argumentos adicionales en tiempo de ejecución y XmlResolver resuelve la función <c>document()</c> XSLT.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 En el ejemplo siguiente se usa un <xref:System.Xml.XmlSecureResolver> para resolver el XSLT `document()` función.  
  
 [!code-csharp[XslCompiledTransform.Transform#4](~/samples/snippets/csharp/VS_Snippets_Data/XslCompiledTransform.Transform/CS/Xslt_Transform_v2.cs#4)]
 [!code-vb[XslCompiledTransform.Transform#4](~/samples/snippets/visualbasic/VS_Snippets_Data/XslCompiledTransform.Transform/VB/Xslt_Transform_v2.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">El valor de <paramref name="input" /> o <paramref name="results" /> es <see langword="null" />.</exception>
        <exception cref="T:System.Xml.Xsl.XsltException">Se ha producido un error al ejecutar la transformación XSLT.</exception>
      </Docs>
    </Member>
    <Member MemberName="Transform">
      <MemberSignature Language="C#" Value="public void Transform (System.Xml.XPath.IXPathNavigable input, System.Xml.Xsl.XsltArgumentList arguments, System.Xml.XmlWriter results, System.Xml.XmlResolver documentResolver);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Transform(class System.Xml.XPath.IXPathNavigable input, class System.Xml.Xsl.XsltArgumentList arguments, class System.Xml.XmlWriter results, class System.Xml.XmlResolver documentResolver) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Xsl.XslCompiledTransform.Transform(System.Xml.XPath.IXPathNavigable,System.Xml.Xsl.XsltArgumentList,System.Xml.XmlWriter,System.Xml.XmlResolver)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Transform (input As IXPathNavigable, arguments As XsltArgumentList, results As XmlWriter, documentResolver As XmlResolver)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Transform(System::Xml::XPath::IXPathNavigable ^ input, System::Xml::Xsl::XsltArgumentList ^ arguments, System::Xml::XmlWriter ^ results, System::Xml::XmlResolver ^ documentResolver);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.Xml.XPath.IXPathNavigable" />
        <Parameter Name="arguments" Type="System.Xml.Xsl.XsltArgumentList" />
        <Parameter Name="results" Type="System.Xml.XmlWriter" />
        <Parameter Name="documentResolver" Type="System.Xml.XmlResolver" />
      </Parameters>
      <Docs>
        <param name="input">El documento que se va a transformar lo especifica el objeto <see cref="T:System.Xml.XPath.IXPathNavigable" />.</param>
        <param name="arguments">Lista de argumentos como <see cref="T:System.Xml.Xsl.XsltArgumentList" />.</param>
        <param name="results">Objeto <see cref="T:System.Xml.XmlWriter" /> al que se desea enviar el resultado.  
  
 Si la hoja de estilos contiene un elemento <see langword="xsl:output" />, deberá crear la clase <see cref="T:System.Xml.XmlWriter" /> usando el objeto <see cref="T:System.Xml.XmlWriterSettings" /> que devuelve la propiedad <see cref="P:System.Xml.Xsl.XslCompiledTransform.OutputSettings" />. Con ello se garantiza que <see cref="T:System.Xml.XmlWriter" /> tenga la configuración de resultados correcta.</param>
        <param name="documentResolver">
          <see cref="T:System.Xml.XmlResolver" /> que se usa para resolver la función <see langword="document()" /> de XSLT. Si es <see langword="null" />, la función <see langword="document()" /> no se resuelve.</param>
        <summary>Ejecuta la transformación usando el documento de entrada especificado por el objeto <see cref="T:System.Xml.XPath.IXPathNavigable" /> y guarda el resultado en <see cref="T:System.Xml.XmlWriter" />. El <see cref="T:System.Xml.Xsl.XsltArgumentList" /> proporciona argumentos adicionales en tiempo de ejecución y <see cref="T:System.Xml.XmlResolver" /> resuelve la función <see langword="document()" /> XSLT.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>