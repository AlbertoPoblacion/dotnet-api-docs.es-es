<Type Name="XamlTypeInvoker" FullName="System.Xaml.Schema.XamlTypeInvoker">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="bd266704ee3fe75b84f3b0e3aa578f64c1e8009d" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="es-ES" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36445049" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class XamlTypeInvoker" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit XamlTypeInvoker extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Xaml.Schema.XamlTypeInvoker" />
  <TypeSignature Language="VB.NET" Value="Public Class XamlTypeInvoker" />
  <TypeSignature Language="C++ CLI" Value="public ref class XamlTypeInvoker" />
  <TypeSignature Language="F#" Value="type XamlTypeInvoker = class" />
  <AssemblyInfo>
    <AssemblyName>System.Xaml</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Provides an extension point that can construct instances of a XAML type through techniques other than reflection and constructors.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El propósito de <xref:System.Xaml.Schema.XamlTypeInvoker> es permitir que un sistema de tipos XAML extensible, esquema y un Runtime activo que no se basen completamente en características CLR como los atributos CLR, información de reflexión a través de <xref:System.Type> y <xref:System.Reflection.MemberInfo>, y así sucesivamente. Las subclases de <xref:System.Xaml.Schema.XamlTypeInvoker> se usan como parámetros de entrada para los constructores alternativos de clases de esquema XAML como <xref:System.Xaml.XamlType>. Deriva una subclase de <xref:System.Xaml.XamlType> y pase el <xref:System.Xaml.Schema.XamlTypeInvoker> a través del constructor base. Además de definir un <xref:System.Xaml.Schema.XamlTypeInvoker> para el constructor, también debe proporcionar valores de reemplazo de al menos algunas de las `Lookup` métodos de <xref:System.Xaml.XamlType>.  
  
 <xref:System.Xaml.Schema.XamlTypeInvoker> tiene una implementación predeterminada. La implementación predeterminada sigue un modelo similar a la implementación predeterminada de tipos de esquema XAML <xref:System.Xaml.XamlType> y <xref:System.Xaml.XamlMember>: el sistema de tipos CLR se usa para la creación de instancias, valores y búsquedas, incluido el uso de atributos CLR, <xref:System.Type> y <xref:System.Reflection.MemberInfo>, y así sucesivamente.  
  
 <xref:System.Xaml.Schema.XamlTypeInvoker> Proporciona métodos para la creación de instancias básica (<xref:System.Xaml.Schema.XamlTypeInvoker.CreateInstance%2A>) y los métodos que son relevantes para los tipos donde la <xref:System.Xaml.XamlType> representa una colección, diccionario o matriz (<xref:System.Xaml.Schema.XamlTypeInvoker.AddToCollection%2A>; <xref:System.Xaml.Schema.XamlTypeInvoker.AddToDictionary%2A>; <xref:System.Xaml.Schema.XamlTypeInvoker.GetAddMethod%2A>; <xref:System.Xaml.Schema.XamlTypeInvoker.GetEnumeratorMethod%2A>; <xref:System.Xaml.Schema.XamlTypeInvoker.GetItems%2A>).  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Initializes a new instance of the <see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> class.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected XamlTypeInvoker ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.Schema.XamlTypeInvoker.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; XamlTypeInvoker();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Initializes a new instance of the <see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> class.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La implementación predeterminada está vacía.  
  
 Se invoca este constructor internamente para proporcionar un valor para <xref:System.Xaml.Schema.XamlTypeInvoker.UnknownInvoker%2A>. Para una <xref:System.Xaml.Schema.XamlTypeInvoker> subclase, se espera que se usar la <xref:System.Xaml.Schema.XamlTypeInvoker.%23ctor%28System.Xaml.XamlType%29> firma para la construcción o proporcione una invalidación que llama <xref:System.Xaml.Schema.XamlTypeInvoker.%23ctor%28System.Xaml.XamlType%29> como base. Proporcionar la <xref:System.Xaml.XamlType> implementa un valor predeterminado de patrón where <xref:System.Xaml.Schema.XamlTypeInvoker> es inmutable.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XamlTypeInvoker (System.Xaml.XamlType type);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Xaml.XamlType type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.Schema.XamlTypeInvoker.#ctor(System.Xaml.XamlType)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (type As XamlType)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XamlTypeInvoker(System::Xaml::XamlType ^ type);" />
      <MemberSignature Language="F#" Value="new System.Xaml.Schema.XamlTypeInvoker : System.Xaml.XamlType -&gt; System.Xaml.Schema.XamlTypeInvoker" Usage="new System.Xaml.Schema.XamlTypeInvoker type" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="type" Type="System.Xaml.XamlType" />
      </Parameters>
      <Docs>
        <param name="type">The <see cref="T:System.Xaml.XamlType" /> value for the specific XAML type relevant to this <see cref="T:System.Xaml.Schema.XamlTypeInvoker" />.</param>
        <summary>Initializes a new instance of the <see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> class, based on a provided <see cref="T:System.Xaml.XamlType" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este constructor se llama internamente en función de la <xref:System.Xaml.XamlType> donde el <xref:System.Xaml.Schema.XamlTypeInvoker> se utiliza para la construcción. El `type` proporcionado aquí es relevante para todos los otra llamada al método para <xref:System.Xaml.Schema.XamlTypeInvoker>.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="type" /> is <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="AddToCollection">
      <MemberSignature Language="C#" Value="public virtual void AddToCollection (object instance, object item);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AddToCollection(object instance, object item) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.Schema.XamlTypeInvoker.AddToCollection(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub AddToCollection (instance As Object, item As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void AddToCollection(System::Object ^ instance, System::Object ^ item);" />
      <MemberSignature Language="F#" Value="abstract member AddToCollection : obj * obj -&gt; unit&#xA;override this.AddToCollection : obj * obj -&gt; unit" Usage="xamlTypeInvoker.AddToCollection (instance, item)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="instance" Type="System.Object" />
        <Parameter Name="item" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="instance">An instance of the type specified by the <see cref="T:System.Xaml.XamlType" /> used for constructing this <see cref="T:System.Xaml.Schema.XamlTypeInvoker" />.</param>
        <param name="item">The item to add.</param>
        <summary>Adds the provided item to an instance of the type that is relevant to this <see cref="T:System.Xaml.Schema.XamlTypeInvoker" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Sólo debe llamar a este método en un <xref:System.Xaml.XamlType> que representa una colección.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">Invoked this method on a <see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> that is based on an unknown <see cref="T:System.Xaml.XamlType" />.  **-or-**  Invoked this method on a <see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> where the relevant type is not a collection.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="instance" /> is <see langword="null" />.</exception>
        <exception cref="T:System.Xaml.XamlSchemaException">
          <see cref="M:System.Xaml.Schema.XamlTypeInvoker.GetAddMethod(System.Xaml.XamlType)" /> for this <see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> returns <see langword="null" />.</exception>
        <block subset="none" type="overrides">
          <para>La implementación base incluye una llamada a la aplicación auxiliar interna <c>ThrowIfUnknown</c>. Esta aplicación auxiliar siempre produce una excepción para los casos donde un <see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> se basa en un estado desconocido <see cref="T:System.Xaml.XamlType" />, que incluye casos donde la <see cref="P:System.Xaml.XamlType.UnderlyingType" /> de la <see cref="T:System.Xaml.XamlType" /> es <see langword="null" />.  Internamente, la implementación base llama <see cref="P:System.Xaml.XamlType.IsCollection" />y se produce si el resultado es <see langword="false" />.  La implementación base no necesariamente utiliza su propio <see cref="M:System.Xaml.Schema.XamlTypeInvoker.GetAddMethod(System.Xaml.XamlType)" /> implementación. Primero, una conversión de <paramref name="instance" /> a <see cref="T:System.Collections.IList" /> se ha intentado. Si esto se realiza correctamente, una llamada a <see cref="M:System.Collections.IList.Add(System.Object)" /> se realiza y el método devuelve. En caso contrario, la implementación base usa CLR <see cref="M:System.Reflection.MethodBase.Invoke(System.Object,System.Object[])" /> para invocar subyacente <see langword="Add" /> método, que se obtienen de una llamada a <see cref="M:System.Xaml.Schema.XamlTypeInvoker.GetAddMethod(System.Xaml.XamlType)" /> para este <paramref name="" /><see cref="T:System.Xaml.Schema.XamlTypeInvoker" />.  En la implementación base ninguna excepción se produce en este nivel si <paramref name="item" /> es <see langword="null" />. Es posible que subyacente <see langword="Add" /> método producirá una excepción al invocarlo. Otras excepciones en tiempo de ejecución son posibles si <see cref="P:System.Xaml.XamlType.ItemType" /> no devuelve un resultado válido.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="AddToDictionary">
      <MemberSignature Language="C#" Value="public virtual void AddToDictionary (object instance, object key, object item);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AddToDictionary(object instance, object key, object item) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.Schema.XamlTypeInvoker.AddToDictionary(System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub AddToDictionary (instance As Object, key As Object, item As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void AddToDictionary(System::Object ^ instance, System::Object ^ key, System::Object ^ item);" />
      <MemberSignature Language="F#" Value="abstract member AddToDictionary : obj * obj * obj -&gt; unit&#xA;override this.AddToDictionary : obj * obj * obj -&gt; unit" Usage="xamlTypeInvoker.AddToDictionary (instance, key, item)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="instance" Type="System.Object" />
        <Parameter Name="key" Type="System.Object" />
        <Parameter Name="item" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="instance">An instance of the type specified by the <see cref="T:System.Xaml.XamlType" /> used for constructing this <see cref="T:System.Xaml.Schema.XamlTypeInvoker" />.</param>
        <param name="key">Dictionary key for the item to add.</param>
        <param name="item">The item value to add.</param>
        <summary>Adds the provided key and item value to an instance of the type that is relevant to this <see cref="T:System.Xaml.Schema.XamlTypeInvoker" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Sólo debe llamar a este método en un <xref:System.Xaml.XamlType> que representa un diccionario.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">Invoked this method on a <see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> that is based on an unknown <see cref="T:System.Xaml.XamlType" />.  **-or-**  Invoked this method on a <see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> where the relevant type is not a dictionary.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="instance" /> is <see langword="null" />.</exception>
        <exception cref="T:System.Xaml.XamlSchemaException">
          <see cref="M:System.Xaml.Schema.XamlTypeInvoker.GetAddMethod(System.Xaml.XamlType)" /> for this <see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> returns <see langword="null" />.</exception>
        <block subset="none" type="overrides">
          <para>La implementación base incluye una llamada a la aplicación auxiliar interna <c>ThrowIfUnknown</c>. Esta aplicación auxiliar siempre produce una excepción para los casos donde un <see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> se basa en un estado desconocido <see cref="T:System.Xaml.XamlType" />, que incluye casos donde la <see cref="P:System.Xaml.XamlType.UnderlyingType" /> de la <see cref="T:System.Xaml.XamlType" /> es <see langword="null" />.  Internamente, la implementación base llama <see cref="P:System.Xaml.XamlType.IsDictionary" />y se produce si el resultado es <see langword="false" />.  La implementación base no necesariamente utiliza su propio <see cref="M:System.Xaml.Schema.XamlTypeInvoker.GetAddMethod(System.Xaml.XamlType)" /> implementación. Primero, una conversión de <paramref name="instance" /> a <see cref="T:System.Collections.IDictionary" /> se ha intentado. Si esto se realiza correctamente, una llamada a <see cref="M:System.Collections.IDictionary.Add(System.Object,System.Object)" /> se realiza y el método devuelve. En caso contrario, la implementación base usa CLR <see cref="M:System.Reflection.MethodBase.Invoke(System.Object,System.Object[])" /> para invocar subyacente <see langword="Add" /> método, que se obtienen de una llamada a <see cref="M:System.Xaml.Schema.XamlTypeInvoker.GetAddMethod(System.Xaml.XamlType)" /> para este <paramref name="" /><see cref="T:System.Xaml.Schema.XamlTypeInvoker" />.  En la implementación base ninguna excepción se produce en este nivel si <paramref name="item" /> o <paramref name="key" /> son <see langword="null" />. Es posible que subyacente <see langword="Add" /> método producirá una excepción al invocarlo. Otras excepciones en tiempo de ejecución son posibles si <see cref="P:System.Xaml.XamlType.ItemType" /> no devuelve un resultado válido.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="CreateInstance">
      <MemberSignature Language="C#" Value="public virtual object CreateInstance (object[] arguments);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object CreateInstance(object[] arguments) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.Schema.XamlTypeInvoker.CreateInstance(System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CreateInstance (arguments As Object()) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Object ^ CreateInstance(cli::array &lt;System::Object ^&gt; ^ arguments);" />
      <MemberSignature Language="F#" Value="abstract member CreateInstance : obj[] -&gt; obj&#xA;override this.CreateInstance : obj[] -&gt; obj" Usage="xamlTypeInvoker.CreateInstance arguments" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="arguments" Type="System.Object[]" />
      </Parameters>
      <Docs>
        <param name="arguments">An array of objects that supply the <see langword="x:ConstructorArgs" /> for the instance. May be <see langword="null" /> for types that do not require or use <see langword="x:ConstructorArgs" />.</param>
        <summary>Creates an object instance based on the construction-initiated <see cref="T:System.Xaml.XamlType" /> for this <see cref="T:System.Xaml.Schema.XamlTypeInvoker" />.</summary>
        <returns>The created instance based on the construction-initiated <see cref="T:System.Xaml.XamlType" /> for this <see cref="T:System.Xaml.Schema.XamlTypeInvoker" />.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.MissingMethodException">Could not resolve a constructor.</exception>
        <block subset="none" type="overrides">
          <para>La implementación base incluye una llamada a la aplicación auxiliar interna <c>ThrowIfUnknown</c>. Esta aplicación auxiliar siempre produce una excepción para los casos donde un <see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> se basa en un estado desconocido <see cref="T:System.Xaml.XamlType" />, que incluye casos donde la <see cref="P:System.Xaml.XamlType.UnderlyingType" /> de la <see cref="T:System.Xaml.XamlType" /> es <see langword="null" />.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="GetAddMethod">
      <MemberSignature Language="C#" Value="public virtual System.Reflection.MethodInfo GetAddMethod (System.Xaml.XamlType contentType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.MethodInfo GetAddMethod(class System.Xaml.XamlType contentType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.Schema.XamlTypeInvoker.GetAddMethod(System.Xaml.XamlType)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetAddMethod (contentType As XamlType) As MethodInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Reflection::MethodInfo ^ GetAddMethod(System::Xaml::XamlType ^ contentType);" />
      <MemberSignature Language="F#" Value="abstract member GetAddMethod : System.Xaml.XamlType -&gt; System.Reflection.MethodInfo&#xA;override this.GetAddMethod : System.Xaml.XamlType -&gt; System.Reflection.MethodInfo" Usage="xamlTypeInvoker.GetAddMethod contentType" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="contentType" Type="System.Xaml.XamlType" />
      </Parameters>
      <Docs>
        <param name="contentType">
          <see cref="T:System.Xaml.XamlType" /> for the item type that is used by the <see langword="Add" /> method.</param>
        <summary>Returns the relevant <see langword="Add" /> method for a <see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> that is relevant to a collection or dictionary.</summary>
        <returns>CLR <see cref="T:System.Reflection.MethodInfo" /> information for the <see langword="Add" /> method, or null.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este método debe devolver `null` para los casos donde la <xref:System.Xaml.XamlType> para este <xref:System.Xaml.Schema.XamlTypeInvoker> no es una colección de escritura o el diccionario. En concreto, debe devolver `null` para los casos donde <xref:System.Xaml.XamlType.LookupCollectionKind%2A?displayProperty=nameWithType> devuelve `None`.  
  
> [!IMPORTANT]
>  Si no se tiene acceso a un sistema de tipos XAML plena confianza, este método tiene el potencial en false de informe <xref:System.Reflection.MethodInfo> información a los llamadores.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="contentType" /> is <see langword="null" />.</exception>
        <block subset="none" type="overrides">
          <para>Devuelve la implementación base <see langword="null" /> para los casos donde un <see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> se basa en un estado desconocido <see cref="T:System.Xaml.XamlType" />, que incluye casos donde la <see cref="P:System.Xaml.XamlType.UnderlyingType" /> de la <see cref="T:System.Xaml.XamlType" /> es <see langword="null" />. También devuelve <see langword="null" /> si <see cref="P:System.Xaml.XamlType.ItemType" /> es <see langword="null" />.  Colecciones de XAML potencialmente tienen más de una <see langword="Add" /> método, porque una colección XAML puede admitir potencialmente más de un tipo de contenido (vea <see cref="P:System.Xaml.XamlType.AllowedContentTypes" />, o consulte <see cref="T:System.Windows.Markup.ContentWrapperAttribute" /> para obtener información acerca de una implementación de este concepto en WPF). La implementación predeterminada usa la lógica interna para devolver la mejor coincidencia basándose en las firmas y el tipo de proporcionado <paramref name="contentType" />.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="GetEnumeratorMethod">
      <MemberSignature Language="C#" Value="public virtual System.Reflection.MethodInfo GetEnumeratorMethod ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.MethodInfo GetEnumeratorMethod() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.Schema.XamlTypeInvoker.GetEnumeratorMethod" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetEnumeratorMethod () As MethodInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Reflection::MethodInfo ^ GetEnumeratorMethod();" />
      <MemberSignature Language="F#" Value="abstract member GetEnumeratorMethod : unit -&gt; System.Reflection.MethodInfo&#xA;override this.GetEnumeratorMethod : unit -&gt; System.Reflection.MethodInfo" Usage="xamlTypeInvoker.GetEnumeratorMethod " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodInfo</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Returns an object representing a method that can enumerate over items.</summary>
        <returns>
          <see cref="T:System.Reflection.MethodInfo" /> for an enumerator method, or <see langword="null" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Debe devolver `null` para los casos donde <xref:System.Xaml.XamlType.LookupCollectionKind%2A?displayProperty=nameWithType> devuelve `None`.  
  
> [!IMPORTANT]
>  Si no se tiene acceso a un sistema de tipos XAML plena confianza, este método tiene el potencial en false de informe <xref:System.Reflection.MethodInfo> información a los llamadores.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>La implementación base llama a un método auxiliar interno. Esa aplicación auxiliar devuelve <see langword="null" /> para los casos donde un <see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> se basa en un estado desconocido <see cref="T:System.Xaml.XamlType" />, que incluye casos donde la <see cref="P:System.Xaml.XamlType.UnderlyingType" /> de la <see cref="T:System.Xaml.XamlType" /> es <see langword="null" />. También devuelve <see langword="null" /> para los casos donde <see cref="M:System.Xaml.XamlType.LookupCollectionKind" /> devuelve <see langword="None" />.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="GetItems">
      <MemberSignature Language="C#" Value="public virtual System.Collections.IEnumerator GetItems (object instance);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.IEnumerator GetItems(object instance) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.Schema.XamlTypeInvoker.GetItems(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetItems (instance As Object) As IEnumerator" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Collections::IEnumerator ^ GetItems(System::Object ^ instance);" />
      <MemberSignature Language="F#" Value="abstract member GetItems : obj -&gt; System.Collections.IEnumerator&#xA;override this.GetItems : obj -&gt; System.Collections.IEnumerator" Usage="xamlTypeInvoker.GetItems instance" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IEnumerator</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="instance" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="instance">An instance of the type specified by the <see cref="T:System.Xaml.XamlType" /> used for constructing this <see cref="T:System.Xaml.Schema.XamlTypeInvoker" />.</param>
        <summary>Returns an <see cref="T:System.Collections.IEnumerator" /> object representing the set of items.</summary>
        <returns>An <see cref="T:System.Collections.IEnumerator" /> object, or <see langword="null" />.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.NotSupportedException">Invoked this method on a <see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> that is based on an unknown <see cref="T:System.Xaml.XamlType" />.  **-or-**  Invoked this method on a <see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> where the relevant type is not a collection or dictionary.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="instance" /> is <see langword="null" />.</exception>
        <block subset="none" type="overrides">
          <para>La implementación base incluye una llamada a la aplicación auxiliar interna <c>ThrowIfUnknown</c>. Esta aplicación auxiliar siempre produce una excepción para los casos donde un <see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> se basa en un estado desconocido <see cref="T:System.Xaml.XamlType" />, que incluye casos donde la <see cref="P:System.Xaml.XamlType.UnderlyingType" /> de la <see cref="T:System.Xaml.XamlType" /> es <see langword="null" />.  La implementación base no necesariamente utiliza su propio <see cref="M:System.Xaml.Schema.XamlTypeInvoker.GetEnumeratorMethod" /> implementación. Primero, una conversión de <paramref name="instance" /> a <see cref="T:System.Collections.IEnumerable" /> se ha intentado. Si esto se realiza correctamente, una llamada a <see cref="M:System.Collections.IEnumerable.GetEnumerator" /> se realiza y el método devuelve que devuelven el valor. En caso contrario, la implementación base usa CLR <see cref="M:System.Reflection.MethodBase.Invoke(System.Object,System.Object[])" /> para invocar subyacente <see langword="GetEnumerator" /> método, que se obtienen de una llamada a <see cref="M:System.Xaml.Schema.XamlTypeInvoker.GetEnumeratorMethod" /> para este <paramref name="" /><see cref="T:System.Xaml.Schema.XamlTypeInvoker" />.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="SetMarkupExtensionHandler">
      <MemberSignature Language="C#" Value="public EventHandler&lt;System.Windows.Markup.XamlSetMarkupExtensionEventArgs&gt; SetMarkupExtensionHandler { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.EventHandler`1&lt;class System.Windows.Markup.XamlSetMarkupExtensionEventArgs&gt; SetMarkupExtensionHandler" />
      <MemberSignature Language="DocId" Value="P:System.Xaml.Schema.XamlTypeInvoker.SetMarkupExtensionHandler" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property SetMarkupExtensionHandler As EventHandler(Of XamlSetMarkupExtensionEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property EventHandler&lt;System::Windows::Markup::XamlSetMarkupExtensionEventArgs ^&gt; ^ SetMarkupExtensionHandler { EventHandler&lt;System::Windows::Markup::XamlSetMarkupExtensionEventArgs ^&gt; ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.SetMarkupExtensionHandler : EventHandler&lt;System.Windows.Markup.XamlSetMarkupExtensionEventArgs&gt;" Usage="System.Xaml.Schema.XamlTypeInvoker.SetMarkupExtensionHandler" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Windows.Markup.XamlSetMarkupExtensionEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the handler to use when a <see cref="T:System.Xaml.XamlObjectWriter" /> calls into an implemented <see cref="T:System.Windows.Markup.MarkupExtension" />.</summary>
        <value>Una implementación del controlador que controla este caso.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El controlador de eventos se basa en <xref:System.EventHandler%601> restringida <xref:System.Windows.Markup.XamlSetMarkupExtensionEventArgs> datos del evento.  
  
 El valor devuelto, se invoca el <xref:System.Xaml.XamlType.LookupSetMarkupExtensionHandler%2A> comportamiento de la <xref:System.Xaml.XamlType> que la <xref:System.Xaml.Schema.XamlTypeInvoker> se basa en.  
  
 El valor devuelto es `null` para un <xref:System.Xaml.Schema.XamlTypeInvoker> que se basa en un estado desconocido <xref:System.Xaml.XamlType>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetTypeConverterHandler">
      <MemberSignature Language="C#" Value="public EventHandler&lt;System.Windows.Markup.XamlSetTypeConverterEventArgs&gt; SetTypeConverterHandler { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.EventHandler`1&lt;class System.Windows.Markup.XamlSetTypeConverterEventArgs&gt; SetTypeConverterHandler" />
      <MemberSignature Language="DocId" Value="P:System.Xaml.Schema.XamlTypeInvoker.SetTypeConverterHandler" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property SetTypeConverterHandler As EventHandler(Of XamlSetTypeConverterEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property EventHandler&lt;System::Windows::Markup::XamlSetTypeConverterEventArgs ^&gt; ^ SetTypeConverterHandler { EventHandler&lt;System::Windows::Markup::XamlSetTypeConverterEventArgs ^&gt; ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.SetTypeConverterHandler : EventHandler&lt;System.Windows.Markup.XamlSetTypeConverterEventArgs&gt;" Usage="System.Xaml.Schema.XamlTypeInvoker.SetTypeConverterHandler" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Windows.Markup.XamlSetTypeConverterEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the handler to use when a <see cref="T:System.Xaml.XamlObjectWriter" /> calls into a CLR-implemented <see cref="T:System.ComponentModel.TypeConverter" />.</summary>
        <value>Una implementación del controlador que controla este caso.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El controlador de eventos se basa en <xref:System.EventHandler%601> restringida <xref:System.Windows.Markup.XamlSetMarkupExtensionEventArgs> datos del evento.  
  
 El valor devuelto, se invoca el <xref:System.Xaml.XamlType.LookupSetTypeConverterHandler%2A> comportamiento de la <xref:System.Xaml.XamlType> que la <xref:System.Xaml.Schema.XamlTypeInvoker> se basa en.  
  
 El valor devuelto es `null` para un <xref:System.Xaml.Schema.XamlTypeInvoker> que se basa en un estado desconocido <xref:System.Xaml.XamlType>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="UnknownInvoker">
      <MemberSignature Language="C#" Value="public static System.Xaml.Schema.XamlTypeInvoker UnknownInvoker { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Xaml.Schema.XamlTypeInvoker UnknownInvoker" />
      <MemberSignature Language="DocId" Value="P:System.Xaml.Schema.XamlTypeInvoker.UnknownInvoker" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property UnknownInvoker As XamlTypeInvoker" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Xaml::Schema::XamlTypeInvoker ^ UnknownInvoker { System::Xaml::Schema::XamlTypeInvoker ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.UnknownInvoker : System.Xaml.Schema.XamlTypeInvoker" Usage="System.Xaml.Schema.XamlTypeInvoker.UnknownInvoker" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xaml.Schema.XamlTypeInvoker</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Provides a static value that represents an unknown, not fully implemented <see cref="T:System.Xaml.Schema.XamlTypeInvoker" />.</summary>
        <value>Un valor estático que representa un estado desconocido, no totalmente implementado <see cref="T:System.Xaml.Schema.XamlTypeInvoker" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Proporcionar este valor para un <xref:System.Xaml.Schema.XamlTypeInvoker> API definido por el parámetro de System.Xaml normalmente se hará que el código llamado que se produzcan excepciones.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>