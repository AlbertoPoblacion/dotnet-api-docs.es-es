<Type Name="Scope" FullName="System.IdentityModel.Scope">
  <Metadata><Meta Name="ms.openlocfilehash" Value="2c3acf2d186bc00e7836e44ff85edcb61965ed26" /><Meta Name="ms.sourcegitcommit" Value="434f60616a9793fa8436744549fc856e94f7a648" /><Meta Name="ms.translationtype" Value="HT" /><Meta Name="ms.contentlocale" Value="es-ES" /><Meta Name="ms.lasthandoff" Value="08/24/2018" /><Meta Name="ms.locfileid" Value="36556004" /></Metadata><TypeSignature Language="C#" Value="public class Scope" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit Scope extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.IdentityModel.Scope" />
  <TypeSignature Language="VB.NET" Value="Public Class Scope" />
  <TypeSignature Language="C++ CLI" Value="public ref class Scope" />
  <TypeSignature Language="F#" Value="type Scope = class" />
  <AssemblyInfo>
    <AssemblyName>System.IdentityModel</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Representa la configuración de la solicitud de emisión de tokens.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La <xref:System.IdentityModel.Scope> clase encapsula la información sobre el usuario de confianza (RP) asociado a una solicitud de token de seguridad (RST). Esta información se usa por implementaciones de la <xref:System.IdentityModel.SecurityTokenService> (STS) de la clase en la canalización de emisión de tokens para devolver una respuesta (RSTR) a una solicitud de token de seguridad (RST).  
  
 <xref:System.IdentityModel.Scope> objetos contienen información sobre la dirección de RP, el cifrado y credenciales de firma para su uso con el token de seguridad emitido, y si el propio token o las claves simétricas emiten con se debe cifrar el token. De forma predeterminada, se cifran las claves simétricas y token. Puede ampliar el <xref:System.IdentityModel.Scope> predeterminado de clase para incluir información adicional acerca de la solicitud, como tipos de token aceptado por el RP, duración del token, duración máxima del token, los conjuntos de algoritmos utilizados por el RP, y así sucesivamente; sin embargo, la información se encapsula en Esta clase no debería variar para las solicitudes individuales.  
  
 La canalización de emisión de tokens se implementa en el <xref:System.IdentityModel.SecurityTokenService.Issue%2A> invoca este método y el <xref:System.IdentityModel.SecurityTokenService.GetScope%2A> método para obtener la configuración para el RST. Debe implementar un <xref:System.IdentityModel.SecurityTokenService.GetScope%2A> método en el STS de personalizada y vuelva un <xref:System.IdentityModel.Scope> objeto adecuado para su implementación de STS y el RP.  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Inicializa una nueva instancia de la clase <see cref="T:System.IdentityModel.Scope" />.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Scope ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Scope.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Scope();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Inicializa una nueva instancia de la clase <see cref="T:System.IdentityModel.Scope" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 En la tabla siguiente se muestra los valores de propiedad iniciales para el nuevo <xref:System.IdentityModel.Scope> instancia.  
  
|Propiedad.|Valor.|  
|--------------|------------|  
|<xref:System.IdentityModel.Scope.AppliesToAddress%2A>|`null` .|  
|<xref:System.IdentityModel.Scope.EncryptingCredentials%2A>|`null`.|  
|<xref:System.IdentityModel.Scope.Properties%2A>|Un diccionario vacío.|  
|<xref:System.IdentityModel.Scope.ReplyToAddress%2A>|`null`.|  
|<xref:System.IdentityModel.Scope.SigningCredentials%2A>|`null`.|  
|<xref:System.IdentityModel.Scope.SymmetricKeyEncryptionRequired%2A>|`true`.|  
|<xref:System.IdentityModel.Scope.TokenEncryptionRequired%2A>|`true`.|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Scope (string appliesToAddress);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string appliesToAddress) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Scope.#ctor(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (appliesToAddress As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Scope(System::String ^ appliesToAddress);" />
      <MemberSignature Language="F#" Value="new System.IdentityModel.Scope : string -&gt; System.IdentityModel.Scope" Usage="new System.IdentityModel.Scope appliesToAddress" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="appliesToAddress" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="appliesToAddress">Dirección appliesTo del usuario de confianza. Normalmente, e un URI.</param>
        <summary>Inicializa una nueva instancia de la clase <see cref="T:System.IdentityModel.Scope" /> con la dirección appliesTo especificada.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 En la tabla siguiente se muestra los valores de propiedad iniciales para el nuevo <xref:System.IdentityModel.Scope> instancia.  
  
|Propiedad.|Valor.|  
|--------------|------------|  
|<xref:System.IdentityModel.Scope.AppliesToAddress%2A>|Valor del parámetro `appliesToAddress`.|  
|<xref:System.IdentityModel.Scope.EncryptingCredentials%2A>|`null`.|  
|<xref:System.IdentityModel.Scope.Properties%2A>|Un diccionario vacío.|  
|<xref:System.IdentityModel.Scope.ReplyToAddress%2A>|`null`.|  
|<xref:System.IdentityModel.Scope.SigningCredentials%2A>|`null`.|  
|<xref:System.IdentityModel.Scope.SymmetricKeyEncryptionRequired%2A>|`true`.|  
|<xref:System.IdentityModel.Scope.TokenEncryptionRequired%2A>|`true`.|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Scope (string appliesToAddress, System.IdentityModel.Tokens.EncryptingCredentials encryptingCredentials);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string appliesToAddress, class System.IdentityModel.Tokens.EncryptingCredentials encryptingCredentials) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Scope.#ctor(System.String,System.IdentityModel.Tokens.EncryptingCredentials)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Scope(System::String ^ appliesToAddress, System::IdentityModel::Tokens::EncryptingCredentials ^ encryptingCredentials);" />
      <MemberSignature Language="F#" Value="new System.IdentityModel.Scope : string * System.IdentityModel.Tokens.EncryptingCredentials -&gt; System.IdentityModel.Scope" Usage="new System.IdentityModel.Scope (appliesToAddress, encryptingCredentials)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="appliesToAddress" Type="System.String" />
        <Parameter Name="encryptingCredentials" Type="System.IdentityModel.Tokens.EncryptingCredentials" />
      </Parameters>
      <Docs>
        <param name="appliesToAddress">Dirección appliesTo del usuario de confianza. Normalmente, e un URI.</param>
        <param name="encryptingCredentials">Credenciales de cifrado para el usuario de confianza.</param>
        <summary>Inicializa una nueva instancia de la clase <see cref="T:System.IdentityModel.Scope" /> con dirección appliesTo y credenciales de cifrado especificadas.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 En la tabla siguiente se muestra los valores de propiedad iniciales para el nuevo <xref:System.IdentityModel.Scope> instancia.  
  
|Propiedad.|Valor.|  
|--------------|------------|  
|<xref:System.IdentityModel.Scope.AppliesToAddress%2A>|Valor del parámetro `appliesToAddress`.|  
|<xref:System.IdentityModel.Scope.EncryptingCredentials%2A>|`null`.|  
|<xref:System.IdentityModel.Scope.Properties%2A>|Un diccionario vacío.|  
|<xref:System.IdentityModel.Scope.ReplyToAddress%2A>|`null`.|  
|<xref:System.IdentityModel.Scope.SigningCredentials%2A>|Valor del parámetro `signingCredentials`.|  
|<xref:System.IdentityModel.Scope.SymmetricKeyEncryptionRequired%2A>|`true`.|  
|<xref:System.IdentityModel.Scope.TokenEncryptionRequired%2A>|`true`.|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Scope (string appliesToAddress, System.IdentityModel.Tokens.SigningCredentials signingCredentials);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string appliesToAddress, class System.IdentityModel.Tokens.SigningCredentials signingCredentials) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Scope.#ctor(System.String,System.IdentityModel.Tokens.SigningCredentials)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Scope(System::String ^ appliesToAddress, System::IdentityModel::Tokens::SigningCredentials ^ signingCredentials);" />
      <MemberSignature Language="F#" Value="new System.IdentityModel.Scope : string * System.IdentityModel.Tokens.SigningCredentials -&gt; System.IdentityModel.Scope" Usage="new System.IdentityModel.Scope (appliesToAddress, signingCredentials)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="appliesToAddress" Type="System.String" />
        <Parameter Name="signingCredentials" Type="System.IdentityModel.Tokens.SigningCredentials" />
      </Parameters>
      <Docs>
        <param name="appliesToAddress">Dirección appliesTo del usuario de confianza. Normalmente, e un URI.</param>
        <param name="signingCredentials">Credenciales de inicio de sesión para el usuario de confianza.</param>
        <summary>Inicializa una nueva instancia de la clase <see cref="T:System.IdentityModel.Scope" /> con dirección appliesTo y credenciales de firma especificadas.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 En la tabla siguiente se muestra los valores de propiedad iniciales para el nuevo <xref:System.IdentityModel.Scope> instancia.  
  
|Propiedad.|Valor.|  
|--------------|------------|  
|<xref:System.IdentityModel.Scope.AppliesToAddress%2A>|Valor del parámetro `appliesToAddress`.|  
|<xref:System.IdentityModel.Scope.EncryptingCredentials%2A>|`null`.|  
|<xref:System.IdentityModel.Scope.Properties%2A>|Un diccionario vacío.|  
|<xref:System.IdentityModel.Scope.ReplyToAddress%2A>|`null`.|  
|<xref:System.IdentityModel.Scope.SigningCredentials%2A>|Valor del parámetro `signingCredentials`.|  
|<xref:System.IdentityModel.Scope.SymmetricKeyEncryptionRequired%2A>|`true`.|  
|<xref:System.IdentityModel.Scope.TokenEncryptionRequired%2A>|`true`.|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Scope (string appliesToAddress, System.IdentityModel.Tokens.SigningCredentials signingCredentials, System.IdentityModel.Tokens.EncryptingCredentials encryptingCredentials);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string appliesToAddress, class System.IdentityModel.Tokens.SigningCredentials signingCredentials, class System.IdentityModel.Tokens.EncryptingCredentials encryptingCredentials) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Scope.#ctor(System.String,System.IdentityModel.Tokens.SigningCredentials,System.IdentityModel.Tokens.EncryptingCredentials)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Scope(System::String ^ appliesToAddress, System::IdentityModel::Tokens::SigningCredentials ^ signingCredentials, System::IdentityModel::Tokens::EncryptingCredentials ^ encryptingCredentials);" />
      <MemberSignature Language="F#" Value="new System.IdentityModel.Scope : string * System.IdentityModel.Tokens.SigningCredentials * System.IdentityModel.Tokens.EncryptingCredentials -&gt; System.IdentityModel.Scope" Usage="new System.IdentityModel.Scope (appliesToAddress, signingCredentials, encryptingCredentials)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="appliesToAddress" Type="System.String" />
        <Parameter Name="signingCredentials" Type="System.IdentityModel.Tokens.SigningCredentials" />
        <Parameter Name="encryptingCredentials" Type="System.IdentityModel.Tokens.EncryptingCredentials" />
      </Parameters>
      <Docs>
        <param name="appliesToAddress">Dirección appliesTo del usuario de confianza. Normalmente, e un URI.</param>
        <param name="signingCredentials">Credenciales de inicio de sesión para el usuario de confianza.</param>
        <param name="encryptingCredentials">Credenciales de cifrado para el usuario de confianza.</param>
        <summary>Inicializa una nueva instancia de la clase <see cref="T:System.IdentityModel.Scope" /> con dirección appliesTo, credenciales de inicio de sesión y credenciales de cifrado especificadas.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 En la tabla siguiente se muestra los valores de propiedad iniciales para el nuevo <xref:System.IdentityModel.Scope> instancia.  
  
|Propiedad.|Valor|  
|--------------|-----------|  
|<xref:System.IdentityModel.Scope.AppliesToAddress%2A>|Valor del parámetro `appliesToAddress`.|  
|<xref:System.IdentityModel.Scope.EncryptingCredentials%2A>|Valor del parámetro `encryptingCredentials`.|  
|<xref:System.IdentityModel.Scope.Properties%2A>|Un diccionario vacío.|  
|<xref:System.IdentityModel.Scope.ReplyToAddress%2A>|`null`.|  
|<xref:System.IdentityModel.Scope.SigningCredentials%2A>|Valor del parámetro `signingCredentials`.|  
|<xref:System.IdentityModel.Scope.SymmetricKeyEncryptionRequired%2A>|`true`.|  
|<xref:System.IdentityModel.Scope.TokenEncryptionRequired%2A>|`true`.|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AppliesToAddress">
      <MemberSignature Language="C#" Value="public virtual string AppliesToAddress { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string AppliesToAddress" />
      <MemberSignature Language="DocId" Value="P:System.IdentityModel.Scope.AppliesToAddress" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property AppliesToAddress As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ AppliesToAddress { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.AppliesToAddress : string with get, set" Usage="System.IdentityModel.Scope.AppliesToAddress" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene o establece la dirección appliesTo del usuario de confianza.</summary>
        <value>Dirección appliesTo del usuario de confianza. Normalmente, e un URI.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EncryptingCredentials">
      <MemberSignature Language="C#" Value="public virtual System.IdentityModel.Tokens.EncryptingCredentials EncryptingCredentials { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.IdentityModel.Tokens.EncryptingCredentials EncryptingCredentials" />
      <MemberSignature Language="DocId" Value="P:System.IdentityModel.Scope.EncryptingCredentials" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property EncryptingCredentials As EncryptingCredentials" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::IdentityModel::Tokens::EncryptingCredentials ^ EncryptingCredentials { System::IdentityModel::Tokens::EncryptingCredentials ^ get(); void set(System::IdentityModel::Tokens::EncryptingCredentials ^ value); };" />
      <MemberSignature Language="F#" Value="member this.EncryptingCredentials : System.IdentityModel.Tokens.EncryptingCredentials with get, set" Usage="System.IdentityModel.Scope.EncryptingCredentials" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IdentityModel.Tokens.EncryptingCredentials</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene o establece las credenciales de cifrado para el usuario de confianza.</summary>
        <value>Credenciales de cifrado que se usarán para el usuario de confianza.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si el <xref:System.IdentityModel.Scope.TokenEncryptionRequired%2A> propiedad es `true`, las credenciales se usan para cifrar los tokens de seguridad emitido. Si el <xref:System.IdentityModel.Scope.SymmetricKeyEncryptionRequired%2A> propiedad es `true`, las credenciales se usan para cifrar las claves simétricas emitidas con tokens de seguridad.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Properties">
      <MemberSignature Language="C#" Value="public virtual System.Collections.Generic.Dictionary&lt;string,object&gt; Properties { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.Dictionary`2&lt;string, object&gt; Properties" />
      <MemberSignature Language="DocId" Value="P:System.IdentityModel.Scope.Properties" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property Properties As Dictionary(Of String, Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Collections::Generic::Dictionary&lt;System::String ^, System::Object ^&gt; ^ Properties { System::Collections::Generic::Dictionary&lt;System::String ^, System::Object ^&gt; ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Properties : System.Collections.Generic.Dictionary&lt;string, obj&gt;" Usage="System.IdentityModel.Scope.Properties" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.Dictionary&lt;System.String,System.Object&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene el contenedor Propiedades para extender el objeto.</summary>
        <value>Contenedor de propiedades.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ReplyToAddress">
      <MemberSignature Language="C#" Value="public virtual string ReplyToAddress { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ReplyToAddress" />
      <MemberSignature Language="DocId" Value="P:System.IdentityModel.Scope.ReplyToAddress" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property ReplyToAddress As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ ReplyToAddress { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.ReplyToAddress : string with get, set" Usage="System.IdentityModel.Scope.ReplyToAddress" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene o establece la dirección replyTo del usuario de confianza.</summary>
        <value>La dirección replyTo del usuario de confianza. Normalmente, e un URI.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SigningCredentials">
      <MemberSignature Language="C#" Value="public virtual System.IdentityModel.Tokens.SigningCredentials SigningCredentials { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.IdentityModel.Tokens.SigningCredentials SigningCredentials" />
      <MemberSignature Language="DocId" Value="P:System.IdentityModel.Scope.SigningCredentials" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property SigningCredentials As SigningCredentials" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::IdentityModel::Tokens::SigningCredentials ^ SigningCredentials { System::IdentityModel::Tokens::SigningCredentials ^ get(); void set(System::IdentityModel::Tokens::SigningCredentials ^ value); };" />
      <MemberSignature Language="F#" Value="member this.SigningCredentials : System.IdentityModel.Tokens.SigningCredentials with get, set" Usage="System.IdentityModel.Scope.SigningCredentials" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IdentityModel.Tokens.SigningCredentials</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene o establece las credenciales de firma para el usuario de confianza.</summary>
        <value>Credenciales de firma que se usarán para el usuario de confianza.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SymmetricKeyEncryptionRequired">
      <MemberSignature Language="C#" Value="public virtual bool SymmetricKeyEncryptionRequired { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool SymmetricKeyEncryptionRequired" />
      <MemberSignature Language="DocId" Value="P:System.IdentityModel.Scope.SymmetricKeyEncryptionRequired" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property SymmetricKeyEncryptionRequired As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool SymmetricKeyEncryptionRequired { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.SymmetricKeyEncryptionRequired : bool with get, set" Usage="System.IdentityModel.Scope.SymmetricKeyEncryptionRequired" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene o establece un valor que indica si las claves simétricas emitidas deben cifrarse.</summary>
        <value><see langword="true" /> si las claves simétricas deben estar cifradas; si no, <see langword="false" />. El valor predeterminado es <see langword="true" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si el <xref:System.IdentityModel.Scope.SymmetricKeyEncryptionRequired%2A> propiedad es `true`, claves simétricas se cifran mediante las credenciales en el <xref:System.IdentityModel.Scope.EncryptingCredentials%2A> propiedad.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TokenEncryptionRequired">
      <MemberSignature Language="C#" Value="public virtual bool TokenEncryptionRequired { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool TokenEncryptionRequired" />
      <MemberSignature Language="DocId" Value="P:System.IdentityModel.Scope.TokenEncryptionRequired" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property TokenEncryptionRequired As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool TokenEncryptionRequired { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.TokenEncryptionRequired : bool with get, set" Usage="System.IdentityModel.Scope.TokenEncryptionRequired" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene o establece un valor que indica si los tokens de seguridad emitidos deben cifrarse.</summary>
        <value><see langword="true" /> si los tokens de seguridad deben cifrarse; si no, <see langword="false" />. El valor predeterminado es <see langword="true" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si el <xref:System.IdentityModel.Scope.TokenEncryptionRequired%2A> propiedad es `true`, tokens de seguridad se cifran mediante las credenciales en el <xref:System.IdentityModel.Scope.EncryptingCredentials%2A> propiedad.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>