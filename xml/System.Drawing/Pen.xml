<Type Name="Pen" FullName="System.Drawing.Pen">
  <Metadata><Meta Name="ms.openlocfilehash" Value="5abce10ed5a16ad4392955a0dac69e5e1e086919" /><Meta Name="ms.sourcegitcommit" Value="adc8598fd19d91438cacaa8fa7ce613e28c8218e" /><Meta Name="ms.translationtype" Value="HT" /><Meta Name="ms.contentlocale" Value="es-ES" /><Meta Name="ms.lasthandoff" Value="12/11/2018" /><Meta Name="ms.locfileid" Value="53233021" /></Metadata><TypeSignature Language="C#" Value="public sealed class Pen : MarshalByRefObject, ICloneable, IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit Pen extends System.MarshalByRefObject implements class System.ICloneable, class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.Drawing.Pen" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class Pen&#xA;Inherits MarshalByRefObject&#xA;Implements ICloneable, IDisposable" />
  <TypeSignature Language="C++ CLI" Value="public ref class Pen sealed : MarshalByRefObject, ICloneable, IDisposable" />
  <TypeSignature Language="F#" Value="type Pen = class&#xA;    inherit MarshalByRefObject&#xA;    interface ICloneable&#xA;    interface IDisposable" />
  <AssemblyInfo>
    <AssemblyName>System.Drawing</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Drawing.Common</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.1</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.MarshalByRefObject</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.ICloneable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>Define un objeto usado para dibujar líneas y curvas. Esta clase no puede heredarse.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Un <xref:System.Drawing.Pen> dibuja una línea de ancho y estilo especificados. Use el <xref:System.Drawing.Drawing2D.DashStyle> propiedad que se va a dibujar varios tipos de líneas discontinuas. La línea dibujada por un <xref:System.Drawing.Pen> pueden rellenarse en una variedad de estilos de relleno, incluyendo colores sólidos y texturas. El estilo de relleno depende del pincel o de textura que se usa como el objeto de relleno.  
  
   
  
## Examples  
 El ejemplo de código siguiente se muestra cómo construir un <xref:System.Drawing.Pen> con un <xref:System.Drawing.Pen.Brush%2A> y los efectos de la configuración de la <xref:System.Drawing.Pen.LineJoin%2A> propiedad en un <xref:System.Drawing.Pen>.  
  
 En este ejemplo está diseñado para usarse con Windows Forms. Pegue el código en un formulario y llame a la `ShowLineJoin` método cuando el control del formulario <xref:System.Windows.Forms.Control.Paint> evento pasando `e` como <xref:System.Windows.Forms.PaintEventArgs>.  
  
 [!code-cpp[System.Drawing.PensExample#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.PensExample/CPP/form1.cpp#1)]
 [!code-csharp[System.Drawing.PensExample#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.PensExample/CS/form1.cs#1)]
 [!code-vb[System.Drawing.PensExample#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.PensExample/VB/form1.vb#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Drawing.Pen" /> con el color especificado.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Pen (System.Drawing.Brush brush);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Drawing.Brush brush) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Pen.#ctor(System.Drawing.Brush)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Pen(System::Drawing::Brush ^ brush);" />
      <MemberSignature Language="F#" Value="new System.Drawing.Pen : System.Drawing.Brush -&gt; System.Drawing.Pen" Usage="new System.Drawing.Pen brush" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="brush" Type="System.Drawing.Brush" />
      </Parameters>
      <Docs>
        <param name="brush"><see cref="T:System.Drawing.Brush" /> que define las propiedades de relleno de este <see cref="T:System.Drawing.Pen" />.</param>
        <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Drawing.Pen" /> con el objeto <see cref="T:System.Drawing.Brush" /> especificado.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Drawing.Pen.Brush%2A> propiedad determina cómo el <xref:System.Drawing.Pen> dibuja líneas. Las líneas se dibujan como si fueran rectángulos rellenos, con las características del elemento especificado <xref:System.Drawing.Brush>.  
  
 El <xref:System.Drawing.Pen.Width%2A> propiedad del nuevo <xref:System.Drawing.Pen> está establecido en 1 (valor predeterminado).  
  
   
  
## Examples  
 El ejemplo de código siguiente se muestra cómo construir un <xref:System.Drawing.Pen> con un <xref:System.Drawing.Pen.Brush%2A> y los efectos de la configuración de la <xref:System.Drawing.Pen.LineJoin%2A> propiedad en un <xref:System.Drawing.Pen>.  
  
 En este ejemplo está diseñado para usarse con Windows Forms. Pegue el código en un formulario y llame a la `ShowLineJoin` método cuando el control del formulario <xref:System.Windows.Forms.Control.Paint> evento pasando `e` como <xref:System.Windows.Forms.PaintEventArgs>.  
  
 [!code-cpp[System.Drawing.PensExample#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.PensExample/CPP/form1.cpp#1)]
 [!code-csharp[System.Drawing.PensExample#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.PensExample/CS/form1.cs#1)]
 [!code-vb[System.Drawing.PensExample#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.PensExample/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">El valor de <paramref name="brush" /> es <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Pen (System.Drawing.Color color);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype System.Drawing.Color color) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Pen.#ctor(System.Drawing.Color)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Pen(System::Drawing::Color color);" />
      <MemberSignature Language="F#" Value="new System.Drawing.Pen : System.Drawing.Color -&gt; System.Drawing.Pen" Usage="new System.Drawing.Pen color" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="color" Type="System.Drawing.Color" />
      </Parameters>
      <Docs>
        <param name="color">Estructura <see cref="T:System.Drawing.Color" /> que indica el color de este <see cref="T:System.Drawing.Pen" />.</param>
        <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Drawing.Pen" /> con el color especificado.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Drawing.Color> propiedad se establece en el color especificado por el `color` parámetro. El <xref:System.Drawing.Pen.Width%2A> propiedad está establecida en 1 (valor predeterminado).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Pen (System.Drawing.Brush brush, float width);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Drawing.Brush brush, float32 width) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Pen.#ctor(System.Drawing.Brush,System.Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Pen(System::Drawing::Brush ^ brush, float width);" />
      <MemberSignature Language="F#" Value="new System.Drawing.Pen : System.Drawing.Brush * single -&gt; System.Drawing.Pen" Usage="new System.Drawing.Pen (brush, width)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="brush" Type="System.Drawing.Brush" />
        <Parameter Name="width" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="brush"><see cref="T:System.Drawing.Brush" /> que determina las características de este <see cref="T:System.Drawing.Pen" />.</param>
        <param name="width">Ancho del nuevo <see cref="T:System.Drawing.Pen" />.</param>
        <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Drawing.Pen" /> con los parámetros <see cref="T:System.Drawing.Brush" /> y <see cref="P:System.Drawing.Pen.Width" /> especificados.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Drawing.Brush> se establece en el color especificado en el `brush` parámetro, el <xref:System.Drawing.Pen.Width%2A> propiedad está establecida en el valor especificado en el `width` parámetro y las unidades se establecen en <xref:System.Drawing.GraphicsUnit.World>.  
  
 Tenga en cuenta que el `brush` parámetro también especifica la <xref:System.Drawing.Color> propiedad de este <xref:System.Drawing.Pen>.  
  
 Un `width` 0 dará como resultado la <xref:System.Drawing.Pen> dibujará como si el ancho dieron 1.  
  
   
  
## Examples  
 En el ejemplo de código siguiente se crea un <xref:System.Drawing.Pen> y muestra los efectos de la configuración de la <xref:System.Drawing.Pen.StartCap%2A> y <xref:System.Drawing.Pen.EndCap%2A> propiedades en un <xref:System.Drawing.Pen>.  
  
 En este ejemplo está diseñado para usarse con Windows Forms. Pegue el código en un formulario y llame a la `ShowStartAndEndCaps` método cuando el control del formulario <xref:System.Windows.Forms.Control.Paint> evento pasando `e` como <xref:System.Windows.Forms.PaintEventArgs>.  
  
 [!code-cpp[System.Drawing.ImageExample#3](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ImageExample/CPP/form1.cpp#3)]
 [!code-csharp[System.Drawing.ImageExample#3](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ImageExample/CS/form1.cs#3)]
 [!code-vb[System.Drawing.ImageExample#3](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ImageExample/VB/form1.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">El valor de <paramref name="brush" /> es <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Pen (System.Drawing.Color color, float width);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype System.Drawing.Color color, float32 width) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Pen.#ctor(System.Drawing.Color,System.Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Pen(System::Drawing::Color color, float width);" />
      <MemberSignature Language="F#" Value="new System.Drawing.Pen : System.Drawing.Color * single -&gt; System.Drawing.Pen" Usage="new System.Drawing.Pen (color, width)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="color" Type="System.Drawing.Color" />
        <Parameter Name="width" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="color">Estructura <see cref="T:System.Drawing.Color" /> que indica el color de este <see cref="T:System.Drawing.Pen" />.</param>
        <param name="width">Valor que indica el ancho de este <see cref="T:System.Drawing.Pen" />.</param>
        <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Drawing.Pen" /> con las propiedades <see cref="T:System.Drawing.Color" /> y <see cref="P:System.Drawing.Pen.Width" /> especificadas.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Drawing.Color> propiedad se establece en el color especificado por el `color` parámetro. El <xref:System.Drawing.Pen.Width%2A> propiedad está establecida en el valor especificado en el `width` parámetro. Un `width` 0 dará como resultado la <xref:System.Drawing.Pen> dibujará como si el ancho dieron 1.  
  
   
  
## Examples  
 El ejemplo de código siguiente se muestra cómo crear un <xref:System.Drawing.Pen> y los efectos de la configuración de la <xref:System.Drawing.Pen.DashCap%2A>, <xref:System.Drawing.Pen.DashPattern%2A>, y <xref:System.Drawing.Graphics.SmoothingMode%2A> propiedades.  
  
 En este ejemplo está diseñado para usarse con Windows Forms. Pegue el código en un formulario y llame a la `ShowPensAndSmoothingMode` método cuando el control del formulario <xref:System.Windows.Forms.Control.Paint> evento, pasando e como <xref:System.Windows.Forms.PaintEventArgs>.  
  
 [!code-cpp[System.Drawing.PensExample#3](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.PensExample/CPP/form1.cpp#3)]
 [!code-csharp[System.Drawing.PensExample#3](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.PensExample/CS/form1.cs#3)]
 [!code-vb[System.Drawing.PensExample#3](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.PensExample/VB/form1.vb#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Alignment">
      <MemberSignature Language="C#" Value="public System.Drawing.Drawing2D.PenAlignment Alignment { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.Drawing2D.PenAlignment Alignment" />
      <MemberSignature Language="DocId" Value="P:System.Drawing.Pen.Alignment" />
      <MemberSignature Language="VB.NET" Value="Public Property Alignment As PenAlignment" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Drawing::Drawing2D::PenAlignment Alignment { System::Drawing::Drawing2D::PenAlignment get(); void set(System::Drawing::Drawing2D::PenAlignment value); };" />
      <MemberSignature Language="F#" Value="member this.Alignment : System.Drawing.Drawing2D.PenAlignment with get, set" Usage="System.Drawing.Pen.Alignment" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Drawing2D.PenAlignment</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene o establece la alineación de este <see cref="T:System.Drawing.Pen" />.</summary>
        <value>Un valor de <see cref="T:System.Drawing.Drawing2D.PenAlignment" /> que representa la alineación de este <see cref="T:System.Drawing.Pen" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Esta propiedad determina cómo el <xref:System.Drawing.Pen> dibuja curvas cerradas y polígonos. El <xref:System.Drawing.Drawing2D.PenAlignment> enumeración especifica cinco valores; sin embargo, solo dos valores - <xref:System.Drawing.Drawing2D.PenAlignment.Center> y <xref:System.Drawing.Drawing2D.PenAlignment.Inset> -cambiará la apariencia de una línea dibujada. <xref:System.Drawing.Drawing2D.PenAlignment.Center> es el valor predeterminado de esta propiedad y especifica que el ancho del lápiz está centrado en el contorno de la curva o polígono. Un valor de <xref:System.Drawing.Drawing2D.PenAlignment.Inset> para esta propiedad especifica que el ancho del lápiz está dentro del contorno de la curva o polígono. Los otros tres valores, <xref:System.Drawing.Drawing2D.PenAlignment.Right>, <xref:System.Drawing.Drawing2D.PenAlignment.Left>, y <xref:System.Drawing.Drawing2D.PenAlignment.Outset>, dará como resultado un lápiz que está centrado.  
  
 Un <xref:System.Drawing.Pen> que tiene la alineación establecida en <xref:System.Drawing.Drawing2D.PenAlignment.Inset> producirá resultados no confiables, dibujando a veces en la posición de inserción y, a veces en posición centrada. Además, un lápiz de bajorrelieve no se puede usar para dibujar líneas compuestas y no se puede dibujar líneas discontinuas con <xref:System.Drawing.Drawing2D.DashCap.Triangle> dash CAP.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">El valor especificado no es un miembro de <see cref="T:System.Drawing.Drawing2D.PenAlignment" />.</exception>
        <exception cref="T:System.ArgumentException">El valor de la propiedad <see cref="P:System.Drawing.Pen.Alignment" /> se establece en un objeto <see cref="T:System.Drawing.Pen" /> inmutable, como los devueltos por la clase <see cref="T:System.Drawing.Pens" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="Brush">
      <MemberSignature Language="C#" Value="public System.Drawing.Brush Brush { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Drawing.Brush Brush" />
      <MemberSignature Language="DocId" Value="P:System.Drawing.Pen.Brush" />
      <MemberSignature Language="VB.NET" Value="Public Property Brush As Brush" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Drawing::Brush ^ Brush { System::Drawing::Brush ^ get(); void set(System::Drawing::Brush ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Brush : System.Drawing.Brush with get, set" Usage="System.Drawing.Pen.Brush" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Brush</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene o establece el <see cref="T:System.Drawing.Brush" /> que determina los atributos de este <see cref="T:System.Drawing.Pen" />.</summary>
        <value>Un <see cref="T:System.Drawing.Brush" /> que determina los atributos de este <see cref="T:System.Drawing.Pen" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Asignación de esta propiedad hace que el lápiz dibujar líneas rellenas y curvas. Invalida el <xref:System.Drawing.Color> propiedad de la <xref:System.Drawing.Pen>.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">El valor de la propiedad <see cref="P:System.Drawing.Pen.Brush" /> se establece en un objeto <see cref="T:System.Drawing.Pen" /> inmutable, como los devueltos por la clase <see cref="T:System.Drawing.Pens" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="Clone">
      <MemberSignature Language="C#" Value="public object Clone ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object Clone() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Pen.Clone" />
      <MemberSignature Language="VB.NET" Value="Public Function Clone () As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Object ^ Clone();" />
      <MemberSignature Language="F#" Value="abstract member Clone : unit -&gt; obj&#xA;override this.Clone : unit -&gt; obj" Usage="pen.Clone " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.ICloneable.Clone</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Crea una copia exacta de este objeto <see cref="T:System.Drawing.Pen" />.</summary>
        <returns>Un <see cref="T:System.Object" /> que se puede convertir en un <see cref="T:System.Drawing.Pen" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 El siguiente ejemplo de código está diseñado para su uso con Windows Forms y requiere <xref:System.Windows.Forms.PaintEventArgs> `e`, que es un parámetro de la <xref:System.Windows.Forms.Control.Paint> controlador de eventos. El código realiza las siguientes acciones:  
  
-   Crea una interfaz <xref:System.Drawing.Pen>.  
  
-   Crea una copia de ese lápiz.  
  
-   Dibuja una línea en la pantalla, mediante la copia de la pluma.  
  
 [!code-cpp[System.Drawing.ClassicPenExamples#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicPenExamples/CPP/form1.cpp#1)]
 [!code-csharp[System.Drawing.ClassicPenExamples#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicPenExamples/CS/form1.cs#1)]
 [!code-vb[System.Drawing.ClassicPenExamples#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicPenExamples/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Color">
      <MemberSignature Language="C#" Value="public System.Drawing.Color Color { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.Color Color" />
      <MemberSignature Language="DocId" Value="P:System.Drawing.Pen.Color" />
      <MemberSignature Language="VB.NET" Value="Public Property Color As Color" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Drawing::Color Color { System::Drawing::Color get(); void set(System::Drawing::Color value); };" />
      <MemberSignature Language="F#" Value="member this.Color : System.Drawing.Color with get, set" Usage="System.Drawing.Pen.Color" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Color</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene o establece el color de este <see cref="T:System.Drawing.Pen" />.</summary>
        <value>Una estructura <see cref="T:System.Drawing.Color" /> que representa el color de este <see cref="T:System.Drawing.Pen" />.</value>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">El valor de la propiedad <see cref="P:System.Drawing.Pen.Color" /> se establece en un objeto <see cref="T:System.Drawing.Pen" /> inmutable, como los devueltos por la clase <see cref="T:System.Drawing.Pens" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="CompoundArray">
      <MemberSignature Language="C#" Value="public float[] CompoundArray { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float32[] CompoundArray" />
      <MemberSignature Language="DocId" Value="P:System.Drawing.Pen.CompoundArray" />
      <MemberSignature Language="VB.NET" Value="Public Property CompoundArray As Single()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property cli::array &lt;float&gt; ^ CompoundArray { cli::array &lt;float&gt; ^ get(); void set(cli::array &lt;float&gt; ^ value); };" />
      <MemberSignature Language="F#" Value="member this.CompoundArray : single[] with get, set" Usage="System.Drawing.Pen.CompoundArray" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene o establece una matriz de valores que especifica un lápiz compuesto. Un lápiz compuesto dibuja una línea compuesta formada por líneas y espacios paralelos.</summary>
        <value>Matriz de números reales que especifica la matriz compuesta. Los elementos de la matriz deben estar en orden ascendente, no menor que cero y no mayor que 1.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Una línea compuesta se compone de líneas paralelas y espacios de diversos anchos alternos. Los valores de la matriz especifican los puntos iniciales de cada componente de la línea compuesta con respecto al ancho del lápiz. El primer valor de la matriz especifica donde comienza el primer componente (una línea) como una fracción de la distancia a lo ancho del lápiz. El segundo valor de la matriz especifica el comienzo del siguiente componente (un espacio) como una fracción de la distancia a lo ancho del lápiz. El valor final de la matriz especifica que se acaba el último componente.  
  
 Supongamos que desea que un lápiz para dibujar dos líneas paralelas donde el ancho de la primera línea es 20 por ciento del ancho del lápiz, el ancho del espacio que separa las dos líneas es 50 por ciento de la pluma ' s ancho y el ancho de la segunda línea es el 30% de la pluma Ancho. Comience creando un <xref:System.Drawing.Pen> y una matriz de números reales. Establece la matriz compuesta pasando la matriz con los valores 0,0, 0,2, 0,7 y 1.0 a esta propiedad.  
  
 No establezca esta propiedad si el <xref:System.Drawing.Pen> tiene su <xref:System.Drawing.Pen.Alignment%2A> propiedad establecida en <xref:System.Drawing.Drawing2D.PenAlignment.Inset>.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">El valor de la propiedad <see cref="P:System.Drawing.Pen.CompoundArray" /> se establece en un objeto <see cref="T:System.Drawing.Pen" /> inmutable, como los devueltos por la clase <see cref="T:System.Drawing.Pens" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="CustomEndCap">
      <MemberSignature Language="C#" Value="public System.Drawing.Drawing2D.CustomLineCap CustomEndCap { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Drawing.Drawing2D.CustomLineCap CustomEndCap" />
      <MemberSignature Language="DocId" Value="P:System.Drawing.Pen.CustomEndCap" />
      <MemberSignature Language="VB.NET" Value="Public Property CustomEndCap As CustomLineCap" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Drawing::Drawing2D::CustomLineCap ^ CustomEndCap { System::Drawing::Drawing2D::CustomLineCap ^ get(); void set(System::Drawing::Drawing2D::CustomLineCap ^ value); };" />
      <MemberSignature Language="F#" Value="member this.CustomEndCap : System.Drawing.Drawing2D.CustomLineCap with get, set" Usage="System.Drawing.Pen.CustomEndCap" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Drawing2D.CustomLineCap</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene o establece un punto de conexión personalizado que se usa al final de las líneas dibujadas con este <see cref="T:System.Drawing.Pen" />.</summary>
        <value>Un <see cref="T:System.Drawing.Drawing2D.CustomLineCap" /> que representa el extremo usado al final de las líneas dibujadas con este <see cref="T:System.Drawing.Pen" />.</value>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">El valor de la propiedad <see cref="P:System.Drawing.Pen.CustomEndCap" /> se establece en un objeto <see cref="T:System.Drawing.Pen" /> inmutable, como los devueltos por la clase <see cref="T:System.Drawing.Pens" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="CustomStartCap">
      <MemberSignature Language="C#" Value="public System.Drawing.Drawing2D.CustomLineCap CustomStartCap { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Drawing.Drawing2D.CustomLineCap CustomStartCap" />
      <MemberSignature Language="DocId" Value="P:System.Drawing.Pen.CustomStartCap" />
      <MemberSignature Language="VB.NET" Value="Public Property CustomStartCap As CustomLineCap" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Drawing::Drawing2D::CustomLineCap ^ CustomStartCap { System::Drawing::Drawing2D::CustomLineCap ^ get(); void set(System::Drawing::Drawing2D::CustomLineCap ^ value); };" />
      <MemberSignature Language="F#" Value="member this.CustomStartCap : System.Drawing.Drawing2D.CustomLineCap with get, set" Usage="System.Drawing.Pen.CustomStartCap" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Drawing2D.CustomLineCap</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene o establece un punto de conexión personalizado que se usa al comienzo de las líneas dibujadas con este <see cref="T:System.Drawing.Pen" />.</summary>
        <value>Un <see cref="T:System.Drawing.Drawing2D.CustomLineCap" /> que representa el extremo usado al comienzo de las líneas dibujadas con este <see cref="T:System.Drawing.Pen" />.</value>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">El valor de la propiedad <see cref="P:System.Drawing.Pen.CustomStartCap" /> se establece en un objeto <see cref="T:System.Drawing.Pen" /> inmutable, como los devueltos por la clase <see cref="T:System.Drawing.Pens" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="DashCap">
      <MemberSignature Language="C#" Value="public System.Drawing.Drawing2D.DashCap DashCap { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.Drawing2D.DashCap DashCap" />
      <MemberSignature Language="DocId" Value="P:System.Drawing.Pen.DashCap" />
      <MemberSignature Language="VB.NET" Value="Public Property DashCap As DashCap" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Drawing::Drawing2D::DashCap DashCap { System::Drawing::Drawing2D::DashCap get(); void set(System::Drawing::Drawing2D::DashCap value); };" />
      <MemberSignature Language="F#" Value="member this.DashCap : System.Drawing.Drawing2D.DashCap with get, set" Usage="System.Drawing.Pen.DashCap" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Drawing2D.DashCap</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene o establece el estilo de punto de conexión que se usa al final de los guiones que forman las líneas discontinuas dibujadas con este <see cref="T:System.Drawing.Pen" />.</summary>
        <value>Uno de los valores de <see cref="T:System.Drawing.Drawing2D.DashCap" /> que representa el estilo de extremo que se usa al comienzo y al final de los guiones que forman las líneas discontinuas dibujadas con este <see cref="T:System.Drawing.Pen" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 No establezca esta propiedad en <xref:System.Drawing.Drawing2D.DashCap.Triangle> si el <xref:System.Drawing.Pen> tiene su <xref:System.Drawing.Pen.Alignment%2A> propiedad establecida en <xref:System.Drawing.Drawing2D.PenAlignment.Inset>.  
  
   
  
## Examples  
 El ejemplo de código siguiente se muestra cómo crear un <xref:System.Drawing.Pen> y los efectos de la configuración de la <xref:System.Drawing.Pen.DashCap%2A>, <xref:System.Drawing.Pen.DashPattern%2A>, y <xref:System.Drawing.Graphics.SmoothingMode%2A> propiedades.  
  
 En este ejemplo está diseñado para usarse con Windows Forms. Pegue el código en un formulario y llame a la `ShowPensAndSmoothingMode` método cuando el control del formulario <xref:System.Windows.Forms.Control.Paint> evento pasando `e` como <xref:System.Windows.Forms.PaintEventArgs>.  
  
 [!code-cpp[System.Drawing.PensExample#3](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.PensExample/CPP/form1.cpp#3)]
 [!code-csharp[System.Drawing.PensExample#3](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.PensExample/CS/form1.cs#3)]
 [!code-vb[System.Drawing.PensExample#3](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.PensExample/VB/form1.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">El valor especificado no es un miembro de <see cref="T:System.Drawing.Drawing2D.DashCap" />.</exception>
        <exception cref="T:System.ArgumentException">El valor de la propiedad <see cref="P:System.Drawing.Pen.DashCap" /> se establece en un objeto <see cref="T:System.Drawing.Pen" /> inmutable, como los devueltos por la clase <see cref="T:System.Drawing.Pens" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="DashOffset">
      <MemberSignature Language="C#" Value="public float DashOffset { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float32 DashOffset" />
      <MemberSignature Language="DocId" Value="P:System.Drawing.Pen.DashOffset" />
      <MemberSignature Language="VB.NET" Value="Public Property DashOffset As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property float DashOffset { float get(); void set(float value); };" />
      <MemberSignature Language="F#" Value="member this.DashOffset : single with get, set" Usage="System.Drawing.Pen.DashOffset" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene o establece la distancia desde el comienzo de una línea hasta el comienzo de un modelo de guiones.</summary>
        <value>Distancia desde el comienzo de una línea hasta el comienzo de un modelo de guiones.</value>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">El valor de la propiedad <see cref="P:System.Drawing.Pen.DashOffset" /> se establece en un objeto <see cref="T:System.Drawing.Pen" /> inmutable, como los devueltos por la clase <see cref="T:System.Drawing.Pens" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="DashPattern">
      <MemberSignature Language="C#" Value="public float[] DashPattern { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float32[] DashPattern" />
      <MemberSignature Language="DocId" Value="P:System.Drawing.Pen.DashPattern" />
      <MemberSignature Language="VB.NET" Value="Public Property DashPattern As Single()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property cli::array &lt;float&gt; ^ DashPattern { cli::array &lt;float&gt; ^ get(); void set(cli::array &lt;float&gt; ^ value); };" />
      <MemberSignature Language="F#" Value="member this.DashPattern : single[] with get, set" Usage="System.Drawing.Pen.DashPattern" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene o establece una matriz de guiones y espacios personalizados.</summary>
        <value>Una matriz de números reales que especifica las longitudes de los guiones y espacios alternos que forman las líneas discontinuas.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Asignar un valor distinto de `null` a esta propiedad se establecerá la <xref:System.Drawing.Drawing2D.DashStyle> propiedad para este <xref:System.Drawing.Pen> a <xref:System.Drawing.Drawing2D.DashStyle.Custom>.  
  
 Los elementos de la `dashArray` matriz establece la longitud de cada guión y espacio en el modelo de guiones. El primer elemento establece la longitud de un guión, el segundo elemento establece la longitud de un espacio, el tercer elemento establece la longitud de un guión y así sucesivamente. Por lo tanto, cada elemento debe ser un número positivo distinto de cero.  
  
 La longitud de cada guión y espacio en el modelo de guiones es el producto del valor del elemento de la matriz y el ancho de la <xref:System.Drawing.Pen>.  
  
   
  
## Examples  
 El ejemplo de código siguiente muestra los efectos de la configuración de la <xref:System.Drawing.Pen.DashCap%2A>, <xref:System.Drawing.Pen.DashPattern%2A>, y <xref:System.Drawing.Graphics.SmoothingMode%2A> propiedades.  
  
 En este ejemplo está diseñado para usarse con Windows Forms. Pegue el código en un formulario y llame a la `ShowPensAndSmoothingMode` método cuando el control del formulario <xref:System.Windows.Forms.Control.Paint> evento pasando `e` como <xref:System.Windows.Forms.PaintEventArgs>.  
  
 [!code-cpp[System.Drawing.PensExample#3](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.PensExample/CPP/form1.cpp#3)]
 [!code-csharp[System.Drawing.PensExample#3](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.PensExample/CS/form1.cs#3)]
 [!code-vb[System.Drawing.PensExample#3](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.PensExample/VB/form1.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">El valor de la propiedad <see cref="P:System.Drawing.Pen.DashPattern" /> se establece en un objeto <see cref="T:System.Drawing.Pen" /> inmutable, como los devueltos por la clase <see cref="T:System.Drawing.Pens" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="DashStyle">
      <MemberSignature Language="C#" Value="public System.Drawing.Drawing2D.DashStyle DashStyle { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.Drawing2D.DashStyle DashStyle" />
      <MemberSignature Language="DocId" Value="P:System.Drawing.Pen.DashStyle" />
      <MemberSignature Language="VB.NET" Value="Public Property DashStyle As DashStyle" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Drawing::Drawing2D::DashStyle DashStyle { System::Drawing::Drawing2D::DashStyle get(); void set(System::Drawing::Drawing2D::DashStyle value); };" />
      <MemberSignature Language="F#" Value="member this.DashStyle : System.Drawing.Drawing2D.DashStyle with get, set" Usage="System.Drawing.Pen.DashStyle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Drawing2D.DashStyle</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene o establece el estilo de las líneas discontinuas dibujadas con este <see cref="T:System.Drawing.Pen" />.</summary>
        <value><see cref="T:System.Drawing.Drawing2D.DashStyle" /> que representa el estilo de las líneas discontinuas dibujadas con este <see cref="T:System.Drawing.Pen" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Un valor de <xref:System.Drawing.Drawing2D.DashStyle.Custom> para esta propiedad especifica que un modelo personalizado de guiones y espacios, definido por el <xref:System.Drawing.Pen.DashPattern%2A> propiedad, hace que las líneas dibujadas con este <xref:System.Drawing.Pen>. Si el valor de esta propiedad es <xref:System.Drawing.Drawing2D.DashStyle.Custom> y el valor de la <xref:System.Drawing.Pen.DashPattern%2A> propiedad es `null`, el lápiz dibuja líneas sólidas.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">El valor de la propiedad <see cref="P:System.Drawing.Pen.DashStyle" /> se establece en un objeto <see cref="T:System.Drawing.Pen" /> inmutable, como los devueltos por la clase <see cref="T:System.Drawing.Pens" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Pen.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Dispose();" />
      <MemberSignature Language="F#" Value="abstract member Dispose : unit -&gt; unit&#xA;override this.Dispose : unit -&gt; unit" Usage="pen.Dispose " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Libera todos los recursos utilizados por este <see cref="T:System.Drawing.Pen" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Una llamada a <xref:System.Drawing.Pen.Dispose%2A> permite que los recursos utilizados por este <xref:System.Drawing.Brush> que reasignarse para otros fines.  
  
 Llame a <xref:System.Drawing.Pen.Dispose%2A> cuando haya terminado de usar <xref:System.Drawing.Pen>. El método <xref:System.Drawing.Pen.Dispose%2A> deja el <xref:System.Drawing.Pen> en un estado no utilizable. Después de llamar a <xref:System.Drawing.Pen.Dispose%2A>, debe liberar todas las referencias a la <xref:System.Drawing.Pen> por lo que el recolector de elementos no utilizados pueda reclamar la memoria que el <xref:System.Drawing.Pen> estaba ocupando. Para obtener más información, consulte [limpiar recursos no administrados](~/docs/standard/garbage-collection/unmanaged.md) y [implementar un método Dispose](~/docs/standard/garbage-collection/implementing-dispose.md).  
  
> [!NOTE]
>  Realice siempre una llamada a <xref:System.Drawing.Pen.Dispose%2A> antes de liberar la última referencia al objeto <xref:System.Drawing.Pen>. En caso contrario, los recursos que está usando no se liberarán hasta que el recolector de elementos no utilizados llame al método <xref:System.Drawing.Pen> del objeto `Finalize`.  
  
   
  
## Examples  
 El ejemplo de código siguiente muestra los efectos de la configuración de la <xref:System.Drawing.Pen.Width%2A> y <xref:System.Drawing.Pen.LineJoin%2A> propiedades y se muestra cómo llamar a la <xref:System.Drawing.Pen.Dispose%2A> método para un <xref:System.Drawing.Pen>.  
  
 En este ejemplo está diseñado para usarse con Windows Forms. Pegue el código en un formulario y llame a la `ShowLineJoin` método cuando el control del formulario <xref:System.Windows.Forms.Control.Paint> evento pasando `e` como <xref:System.Windows.Forms.PaintEventArgs>.  
  
 [!code-cpp[System.Drawing.PensExample#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.PensExample/CPP/form1.cpp#1)]
 [!code-csharp[System.Drawing.PensExample#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.PensExample/CS/form1.cs#1)]
 [!code-vb[System.Drawing.PensExample#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.PensExample/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EndCap">
      <MemberSignature Language="C#" Value="public System.Drawing.Drawing2D.LineCap EndCap { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.Drawing2D.LineCap EndCap" />
      <MemberSignature Language="DocId" Value="P:System.Drawing.Pen.EndCap" />
      <MemberSignature Language="VB.NET" Value="Public Property EndCap As LineCap" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Drawing::Drawing2D::LineCap EndCap { System::Drawing::Drawing2D::LineCap get(); void set(System::Drawing::Drawing2D::LineCap value); };" />
      <MemberSignature Language="F#" Value="member this.EndCap : System.Drawing.Drawing2D.LineCap with get, set" Usage="System.Drawing.Pen.EndCap" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Drawing2D.LineCap</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene o establece el estilo de punto de conexión que se usa al final de las líneas dibujadas con este <see cref="T:System.Drawing.Pen" />.</summary>
        <value>Uno de los valores de <see cref="T:System.Drawing.Drawing2D.LineCap" /> que representa el estilo de extremo usa al final de las líneas dibujadas con este <see cref="T:System.Drawing.Pen" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 El ejemplo de código siguiente muestra los efectos de la configuración de la <xref:System.Drawing.Pen.StartCap%2A> y <xref:System.Drawing.Pen.EndCap%2A> propiedades en un <xref:System.Drawing.Pen>.  
  
 En este ejemplo está diseñado para usarse con Windows Forms. Pegue el código en un formulario y llame a la `ShowStartAndEndCaps` método cuando el control del formulario <xref:System.Windows.Forms.Control.Paint> evento pasando `e` como <xref:System.Windows.Forms.PaintEventArgs>.  
  
 [!code-cpp[System.Drawing.PensExample#2](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.PensExample/CPP/form1.cpp#2)]
 [!code-csharp[System.Drawing.PensExample#2](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.PensExample/CS/form1.cs#2)]
 [!code-vb[System.Drawing.PensExample#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.PensExample/VB/form1.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">El valor especificado no es un miembro de <see cref="T:System.Drawing.Drawing2D.LineCap" />.</exception>
        <exception cref="T:System.ArgumentException">El valor de la propiedad <see cref="P:System.Drawing.Pen.EndCap" /> se establece en un objeto <see cref="T:System.Drawing.Pen" /> inmutable, como los devueltos por la clase <see cref="T:System.Drawing.Pens" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="Finalize">
      <MemberSignature Language="C#" Value="~Pen ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Finalize() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Pen.Finalize" />
      <MemberSignature Language="VB.NET" Value="Finalize ()" />
      <MemberSignature Language="C++ CLI" Value="!Pen ()" />
      <MemberSignature Language="F#" Value="override this.Finalize : unit -&gt; unit" Usage="pen.Finalize " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Permite que un objeto intente liberar recursos y realizar otras operaciones de limpieza antes de que sea reclamado por la recolección de elementos no utilizados.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LineJoin">
      <MemberSignature Language="C#" Value="public System.Drawing.Drawing2D.LineJoin LineJoin { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.Drawing2D.LineJoin LineJoin" />
      <MemberSignature Language="DocId" Value="P:System.Drawing.Pen.LineJoin" />
      <MemberSignature Language="VB.NET" Value="Public Property LineJoin As LineJoin" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Drawing::Drawing2D::LineJoin LineJoin { System::Drawing::Drawing2D::LineJoin get(); void set(System::Drawing::Drawing2D::LineJoin value); };" />
      <MemberSignature Language="F#" Value="member this.LineJoin : System.Drawing.Drawing2D.LineJoin with get, set" Usage="System.Drawing.Pen.LineJoin" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Drawing2D.LineJoin</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene o establece el estilo de unión de los puntos de conexión de dos líneas consecutivas dibujadas con este <see cref="T:System.Drawing.Pen" />.</summary>
        <value>Un valor de <see cref="T:System.Drawing.Drawing2D.LineJoin" /> que representa el estilo de unión de los extremos de dos líneas consecutivas dibujadas con este <see cref="T:System.Drawing.Pen" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Una unión de líneas es el área común que está formado por dos líneas cuyos extremos se juntan o se superponen. Hay tres estilos de unión de línea: ángulo, bisel y redondo.  Cuando se especifica un estilo de unión de línea para un <xref:System.Drawing.Pen> objeto, que se aplicará a todas las líneas conectadas en cualquier estilo de unión <xref:System.Drawing.Drawing2D.GraphicsPath> dibujado con ese lápiz del objeto. La siguiente ilustración muestra los resultados del ejemplo de unión de línea biselada.  
  
 ![Lápices](~/add/media/pens5.gif "lápices")  
  
   
  
## Examples  
 El ejemplo de código siguiente muestra los efectos de la configuración de la <xref:System.Drawing.Pen.Width%2A> y <xref:System.Drawing.Pen.LineJoin%2A> propiedades en un <xref:System.Drawing.Pen>.  
  
 En este ejemplo está diseñado para usarse con Windows Forms. Pegue el código en un formulario y llame a la `ShowLineJoin` método cuando el control del formulario <xref:System.Windows.Forms.Control.Paint> evento pasando `e` como <xref:System.Windows.Forms.PaintEventArgs> .  
  
 [!code-cpp[System.Drawing.PensExample#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.PensExample/CPP/form1.cpp#1)]
 [!code-csharp[System.Drawing.PensExample#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.PensExample/CS/form1.cs#1)]
 [!code-vb[System.Drawing.PensExample#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.PensExample/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">El valor de la propiedad <see cref="P:System.Drawing.Pen.LineJoin" /> se establece en un objeto <see cref="T:System.Drawing.Pen" /> inmutable, como los devueltos por la clase <see cref="T:System.Drawing.Pens" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="MiterLimit">
      <MemberSignature Language="C#" Value="public float MiterLimit { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float32 MiterLimit" />
      <MemberSignature Language="DocId" Value="P:System.Drawing.Pen.MiterLimit" />
      <MemberSignature Language="VB.NET" Value="Public Property MiterLimit As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property float MiterLimit { float get(); void set(float value); };" />
      <MemberSignature Language="F#" Value="member this.MiterLimit : single with get, set" Usage="System.Drawing.Pen.MiterLimit" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene o establece el límite del grosor de la combinación en una esquina en ángulo.</summary>
        <value>Límite del grosor de la combinación en una esquina en ángulo.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La longitud del ángulo es la distancia entre la intersección de las paredes de la línea en el interior de la combinación en la intersección de las paredes de la línea fuera de la combinación. La longitud del ángulo puede ser grande cuando el ángulo entre dos líneas es pequeño. El límite angular es la relación máxima permitida de la longitud del ángulo con respecto al ancho del trazo. El valor predeterminado es 10, 0f.  
  
 Si la longitud del ángulo de la combinación de la intersección supera el límite de la combinación, la combinación estará biselada para mantenerlo dentro del límite de la combinación de la intersección.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">El valor de la propiedad <see cref="P:System.Drawing.Pen.MiterLimit" /> se establece en un objeto <see cref="T:System.Drawing.Pen" /> inmutable, como los devueltos por la clase <see cref="T:System.Drawing.Pens" />.</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="MultiplyTransform">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Multiplica la matriz de transformación de este <see cref="T:System.Drawing.Pen" /> por la <see cref="T:System.Drawing.Drawing2D.Matrix" /> especificada.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="MultiplyTransform">
      <MemberSignature Language="C#" Value="public void MultiplyTransform (System.Drawing.Drawing2D.Matrix matrix);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void MultiplyTransform(class System.Drawing.Drawing2D.Matrix matrix) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Pen.MultiplyTransform(System.Drawing.Drawing2D.Matrix)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void MultiplyTransform(System::Drawing::Drawing2D::Matrix ^ matrix);" />
      <MemberSignature Language="F#" Value="member this.MultiplyTransform : System.Drawing.Drawing2D.Matrix -&gt; unit" Usage="pen.MultiplyTransform matrix" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="matrix" Type="System.Drawing.Drawing2D.Matrix" />
      </Parameters>
      <Docs>
        <param name="matrix">El objeto <see cref="T:System.Drawing.Drawing2D.Matrix" /> por el que se va a multiplicar la matriz de transformación.</param>
        <summary>Multiplica la matriz de transformación de este <see cref="T:System.Drawing.Pen" /> por la <see cref="T:System.Drawing.Drawing2D.Matrix" /> especificada.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este método antepone la matriz de multiplicación especificada en el `matrix` parámetro a la matriz de transformación de la operación de multiplicación.  
  
   
  
## Examples  
 El siguiente ejemplo de código está diseñado para su uso con Windows Forms y requiere <xref:System.Windows.Forms.PaintEventArgs> `e`, que es un parámetro de la <xref:System.Windows.Forms.Control.Paint> controlador de eventos. El código realiza las siguientes acciones:  
  
-   Crea una interfaz <xref:System.Drawing.Pen>.  
  
-   Dibuja una línea en la pantalla.  
  
-   Multiplica la matriz de transformación del lápiz por la matriz especificada.  
  
-   Dibuja una línea con el lápiz transformado.  
  
 [!code-cpp[System.Drawing.ClassicPenExamples#2](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicPenExamples/CPP/form1.cpp#2)]
 [!code-csharp[System.Drawing.ClassicPenExamples#2](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicPenExamples/CS/form1.cs#2)]
 [!code-vb[System.Drawing.ClassicPenExamples#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicPenExamples/VB/form1.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MultiplyTransform">
      <MemberSignature Language="C#" Value="public void MultiplyTransform (System.Drawing.Drawing2D.Matrix matrix, System.Drawing.Drawing2D.MatrixOrder order);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void MultiplyTransform(class System.Drawing.Drawing2D.Matrix matrix, valuetype System.Drawing.Drawing2D.MatrixOrder order) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Pen.MultiplyTransform(System.Drawing.Drawing2D.Matrix,System.Drawing.Drawing2D.MatrixOrder)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void MultiplyTransform(System::Drawing::Drawing2D::Matrix ^ matrix, System::Drawing::Drawing2D::MatrixOrder order);" />
      <MemberSignature Language="F#" Value="member this.MultiplyTransform : System.Drawing.Drawing2D.Matrix * System.Drawing.Drawing2D.MatrixOrder -&gt; unit" Usage="pen.MultiplyTransform (matrix, order)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="matrix" Type="System.Drawing.Drawing2D.Matrix" />
        <Parameter Name="order" Type="System.Drawing.Drawing2D.MatrixOrder" />
      </Parameters>
      <Docs>
        <param name="matrix"><see cref="T:System.Drawing.Drawing2D.Matrix" /> por la que se va a multiplicar la matriz de transformación.</param>
        <param name="order">Orden en que se va a realizar la operación de multiplicación.</param>
        <summary>Multiplica la matriz de transformación de este <see cref="T:System.Drawing.Pen" /> por la <see cref="T:System.Drawing.Drawing2D.Matrix" /> especificada y en el orden especificado.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este método usa la <xref:System.Drawing.Drawing2D.MatrixOrder> elemento enumeration (anteponer o anexar) especificado por el `order` parámetro para llevar a cabo la operación de multiplicación.  
  
   
  
## Examples  
 El siguiente ejemplo de código está diseñado para su uso con Windows Forms y requiere <xref:System.Windows.Forms.PaintEventArgs> `e`, que es un parámetro de la <xref:System.Windows.Forms.Control.Paint> controlador de eventos. El código realiza las siguientes acciones:  
  
-   Crea una interfaz <xref:System.Drawing.Pen>.  
  
-   Dibuja una línea en la pantalla.  
  
-   Multiplica la matriz de transformación del lápiz por la matriz especificada.  
  
-   Dibuja una línea con el lápiz transformado.  
  
 [!code-cpp[System.Drawing.ClassicPenExamples#3](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicPenExamples/CPP/form1.cpp#3)]
 [!code-csharp[System.Drawing.ClassicPenExamples#3](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicPenExamples/CS/form1.cs#3)]
 [!code-vb[System.Drawing.ClassicPenExamples#3](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicPenExamples/VB/form1.vb#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PenType">
      <MemberSignature Language="C#" Value="public System.Drawing.Drawing2D.PenType PenType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.Drawing2D.PenType PenType" />
      <MemberSignature Language="DocId" Value="P:System.Drawing.Pen.PenType" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property PenType As PenType" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Drawing::Drawing2D::PenType PenType { System::Drawing::Drawing2D::PenType get(); };" />
      <MemberSignature Language="F#" Value="member this.PenType : System.Drawing.Drawing2D.PenType" Usage="System.Drawing.Pen.PenType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Drawing2D.PenType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene el estilo de las líneas dibujadas con este <see cref="T:System.Drawing.Pen" />.</summary>
        <value>Una enumeración <see cref="T:System.Drawing.Drawing2D.PenType" /> que especifica el estilo de las líneas dibujadas con este <see cref="T:System.Drawing.Pen" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Un <xref:System.Drawing.Pen> puede dibujar líneas sólidas, rellenas o con textura, dependiendo del estilo especificado por un miembro de la <xref:System.Drawing.Drawing2D.PenType> enumeración.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ResetTransform">
      <MemberSignature Language="C#" Value="public void ResetTransform ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ResetTransform() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Pen.ResetTransform" />
      <MemberSignature Language="VB.NET" Value="Public Sub ResetTransform ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ResetTransform();" />
      <MemberSignature Language="F#" Value="member this.ResetTransform : unit -&gt; unit" Usage="pen.ResetTransform " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Restablece la matriz de transformación geométrica de este <see cref="T:System.Drawing.Pen" /> en identidad.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 El siguiente ejemplo de código está diseñado para su uso con Windows Forms y requiere <xref:System.Windows.Forms.PaintEventArgs> `e`, que es un parámetro de la <xref:System.Windows.Forms.Control.Paint> controlador de eventos. El código realiza las siguientes acciones:  
  
-   Crea una interfaz <xref:System.Drawing.Pen>.  
  
-   Establece la matriz de transformación de la pluma para ajustar la escala de 2 veces en la dirección del eje x.  
  
-   Dibuja una línea en la pantalla.  
  
-   Restablece la matriz de transformación en identidad.  
  
-   Dibuja una segunda línea en la pantalla.  
  
 [!code-cpp[System.Drawing.ClassicPenExamples#4](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicPenExamples/CPP/form1.cpp#4)]
 [!code-csharp[System.Drawing.ClassicPenExamples#4](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicPenExamples/CS/form1.cs#4)]
 [!code-vb[System.Drawing.ClassicPenExamples#4](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicPenExamples/VB/form1.vb#4)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="RotateTransform">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Gira la transformación geométrica local el ángulo especificado. Este método antepone la rotación a la transformación.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="RotateTransform">
      <MemberSignature Language="C#" Value="public void RotateTransform (float angle);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RotateTransform(float32 angle) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Pen.RotateTransform(System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RotateTransform (angle As Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RotateTransform(float angle);" />
      <MemberSignature Language="F#" Value="member this.RotateTransform : single -&gt; unit" Usage="pen.RotateTransform angle" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="angle" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="angle">Ángulo de rotación.</param>
        <summary>Gira la transformación geométrica local el ángulo especificado. Este método antepone la rotación a la transformación.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Dado que la forma de un lápiz es circular, un giro no tiene ningún efecto visible a menos que el tamaño del lápiz en la dirección del eje x o y.  
  
   
  
## Examples  
 El siguiente ejemplo de código está diseñado para su uso con Windows Forms y requiere <xref:System.Windows.Forms.PaintEventArgs> `e`, que es un parámetro de la <xref:System.Windows.Forms.Control.Paint> controlador de eventos. El código realiza las siguientes acciones:  
  
-   Crea una interfaz <xref:System.Drawing.Pen>.  
  
-   Dibuja un rectángulo con el lápiz.  
  
-   Se puede ampliar el lápiz por 2 veces en la dirección del eje x.  
  
-   Gira 90 grados a la derecha de la pluma.  
  
-   Dibuja un segundo rectángulo para demostrar la diferencia.  
  
 [!code-cpp[System.Drawing.ClassicPenExamples#5](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicPenExamples/CPP/form1.cpp#5)]
 [!code-csharp[System.Drawing.ClassicPenExamples#5](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicPenExamples/CS/form1.cs#5)]
 [!code-vb[System.Drawing.ClassicPenExamples#5](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicPenExamples/VB/form1.vb#5)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RotateTransform">
      <MemberSignature Language="C#" Value="public void RotateTransform (float angle, System.Drawing.Drawing2D.MatrixOrder order);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RotateTransform(float32 angle, valuetype System.Drawing.Drawing2D.MatrixOrder order) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Pen.RotateTransform(System.Single,System.Drawing.Drawing2D.MatrixOrder)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RotateTransform (angle As Single, order As MatrixOrder)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RotateTransform(float angle, System::Drawing::Drawing2D::MatrixOrder order);" />
      <MemberSignature Language="F#" Value="member this.RotateTransform : single * System.Drawing.Drawing2D.MatrixOrder -&gt; unit" Usage="pen.RotateTransform (angle, order)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="angle" Type="System.Single" />
        <Parameter Name="order" Type="System.Drawing.Drawing2D.MatrixOrder" />
      </Parameters>
      <Docs>
        <param name="angle">Ángulo de rotación.</param>
        <param name="order"><see cref="T:System.Drawing.Drawing2D.MatrixOrder" /> que especifica si la matriz de rotación se agrega delante o detrás.</param>
        <summary>Gira la transformación geométrica local el ángulo especificado y en el orden especificado.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Dado que la forma de un lápiz es circular, un giro no tiene ningún efecto visible a menos que el tamaño del lápiz en la dirección del eje x o y.  
  
   
  
## Examples  
 El siguiente ejemplo de código está diseñado para su uso con Windows Forms y requiere <xref:System.Windows.Forms.PaintEventArgs> `e`, que es un parámetro de la <xref:System.Windows.Forms.Control.Paint> controlador de eventos. El código realiza las siguientes acciones:  
  
-   Crea un objeto <xref:System.Drawing.Pen>.  
  
-   Se puede ampliar el lápiz por 2 veces en la dirección del eje x.  
  
-   Dibuja un rectángulo con el lápiz.  
  
-   Gira 90 grados a la derecha de la pluma.  
  
-   Dibuja un segundo rectángulo para demostrar la diferencia.  
  
 [!code-cpp[System.Drawing.ClassicPenExamples#6](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicPenExamples/CPP/form1.cpp#6)]
 [!code-csharp[System.Drawing.ClassicPenExamples#6](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicPenExamples/CS/form1.cs#6)]
 [!code-vb[System.Drawing.ClassicPenExamples#6](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicPenExamples/VB/form1.vb#6)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="ScaleTransform">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Cambia el tamaño de la transformación geométrica local en los factores especificados. Este método antepone la matriz de escala a la transformación.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ScaleTransform">
      <MemberSignature Language="C#" Value="public void ScaleTransform (float sx, float sy);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ScaleTransform(float32 sx, float32 sy) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Pen.ScaleTransform(System.Single,System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ScaleTransform (sx As Single, sy As Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ScaleTransform(float sx, float sy);" />
      <MemberSignature Language="F#" Value="member this.ScaleTransform : single * single -&gt; unit" Usage="pen.ScaleTransform (sx, sy)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sx" Type="System.Single" />
        <Parameter Name="sy" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="sx">Factor por el que se va a ajustar el tamaño de la transformación en la dirección del eje X.</param>
        <param name="sy">Factor por el que se va a ajustar el tamaño de la transformación en la dirección del eje Y.</param>
        <summary>Cambia el tamaño de la transformación geométrica local en los factores especificados. Este método antepone la matriz de escala a la transformación.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 El siguiente ejemplo de código está diseñado para su uso con Windows Forms y requiere <xref:System.Windows.Forms.PaintEventArgs> `e`, que es un parámetro de la <xref:System.Windows.Forms.Control.Paint> controlador de eventos. El código realiza las siguientes acciones:  
  
 Crea una interfaz <xref:System.Drawing.Pen>.  
  
 Dibuja un rectángulo con el lápiz.  
  
 Se puede ampliar el lápiz por 2 veces en la dirección del eje x.  
  
 Dibuja un segundo rectángulo para demostrar la diferencia.  
  
 [!code-cpp[System.Drawing.ClassicPenExamples#7](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicPenExamples/CPP/form1.cpp#7)]
 [!code-csharp[System.Drawing.ClassicPenExamples#7](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicPenExamples/CS/form1.cs#7)]
 [!code-vb[System.Drawing.ClassicPenExamples#7](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicPenExamples/VB/form1.vb#7)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ScaleTransform">
      <MemberSignature Language="C#" Value="public void ScaleTransform (float sx, float sy, System.Drawing.Drawing2D.MatrixOrder order);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ScaleTransform(float32 sx, float32 sy, valuetype System.Drawing.Drawing2D.MatrixOrder order) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Pen.ScaleTransform(System.Single,System.Single,System.Drawing.Drawing2D.MatrixOrder)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ScaleTransform (sx As Single, sy As Single, order As MatrixOrder)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ScaleTransform(float sx, float sy, System::Drawing::Drawing2D::MatrixOrder order);" />
      <MemberSignature Language="F#" Value="member this.ScaleTransform : single * single * System.Drawing.Drawing2D.MatrixOrder -&gt; unit" Usage="pen.ScaleTransform (sx, sy, order)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sx" Type="System.Single" />
        <Parameter Name="sy" Type="System.Single" />
        <Parameter Name="order" Type="System.Drawing.Drawing2D.MatrixOrder" />
      </Parameters>
      <Docs>
        <param name="sx">Factor por el que se va a ajustar el tamaño de la transformación en la dirección del eje X.</param>
        <param name="sy">Factor por el que se va a ajustar el tamaño de la transformación en la dirección del eje Y.</param>
        <param name="order"><see cref="T:System.Drawing.Drawing2D.MatrixOrder" /> que especifica si la matriz de transformación de escala se agrega delante o detrás.</param>
        <summary>Cambia el tamaño de la transformación geométrica local en los factores y en el orden especificados.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 El siguiente ejemplo de código está diseñado para su uso con Windows Forms y requiere <xref:System.Windows.Forms.PaintEventArgs> `e`, que es un parámetro de la <xref:System.Windows.Forms.Control.Paint> controlador de eventos. El código realiza las siguientes acciones:  
  
-   Crea una interfaz <xref:System.Drawing.Pen>.  
  
-   Dibuja un rectángulo con el lápiz.  
  
-   Se puede ampliar el lápiz por 2 veces en la dirección del eje x.  
  
-   Dibuja un segundo rectángulo para demostrar la diferencia.  
  
 [!code-cpp[System.Drawing.ClassicPenExamples#8](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicPenExamples/CPP/form1.cpp#8)]
 [!code-csharp[System.Drawing.ClassicPenExamples#8](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicPenExamples/CS/form1.cs#8)]
 [!code-vb[System.Drawing.ClassicPenExamples#8](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicPenExamples/VB/form1.vb#8)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetLineCap">
      <MemberSignature Language="C#" Value="public void SetLineCap (System.Drawing.Drawing2D.LineCap startCap, System.Drawing.Drawing2D.LineCap endCap, System.Drawing.Drawing2D.DashCap dashCap);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetLineCap(valuetype System.Drawing.Drawing2D.LineCap startCap, valuetype System.Drawing.Drawing2D.LineCap endCap, valuetype System.Drawing.Drawing2D.DashCap dashCap) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Pen.SetLineCap(System.Drawing.Drawing2D.LineCap,System.Drawing.Drawing2D.LineCap,System.Drawing.Drawing2D.DashCap)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetLineCap(System::Drawing::Drawing2D::LineCap startCap, System::Drawing::Drawing2D::LineCap endCap, System::Drawing::Drawing2D::DashCap dashCap);" />
      <MemberSignature Language="F#" Value="member this.SetLineCap : System.Drawing.Drawing2D.LineCap * System.Drawing.Drawing2D.LineCap * System.Drawing.Drawing2D.DashCap -&gt; unit" Usage="pen.SetLineCap (startCap, endCap, dashCap)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="startCap" Type="System.Drawing.Drawing2D.LineCap" />
        <Parameter Name="endCap" Type="System.Drawing.Drawing2D.LineCap" />
        <Parameter Name="dashCap" Type="System.Drawing.Drawing2D.DashCap" />
      </Parameters>
      <Docs>
        <param name="startCap"><see cref="T:System.Drawing.Drawing2D.LineCap" /> que representa el estilo de extremo usa al comienzo de las líneas dibujadas con este <see cref="T:System.Drawing.Pen" />.</param>
        <param name="endCap"><see cref="T:System.Drawing.Drawing2D.LineCap" /> que representa el estilo de extremo usado al final de las líneas dibujadas con este <see cref="T:System.Drawing.Pen" />.</param>
        <param name="dashCap"><see cref="T:System.Drawing.Drawing2D.LineCap" /> que representa el estilo de extremo usado al comienzo o al final de las líneas discontinuas dibujadas con este <see cref="T:System.Drawing.Pen" />.</param>
        <summary>Establece los valores que determinan el estilo de extremo que se usa para finalizar las líneas dibujadas con este <see cref="T:System.Drawing.Pen" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 El siguiente ejemplo de código está diseñado para su uso con Windows Forms y requiere <xref:System.Windows.Forms.PaintEventArgs> `e`, que es un parámetro de la <xref:System.Windows.Forms.Control.Paint> controlador de eventos. El código crea un <xref:System.Drawing.Pen> y se establece para que dibuje extremos de línea de delimitador de flecha del principio de líneas:  
  
 [!code-cpp[System.Drawing.ClassicPenExamples#9](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicPenExamples/CPP/form1.cpp#9)]
 [!code-csharp[System.Drawing.ClassicPenExamples#9](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicPenExamples/CS/form1.cs#9)]
 [!code-vb[System.Drawing.ClassicPenExamples#9](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicPenExamples/VB/form1.vb#9)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StartCap">
      <MemberSignature Language="C#" Value="public System.Drawing.Drawing2D.LineCap StartCap { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.Drawing2D.LineCap StartCap" />
      <MemberSignature Language="DocId" Value="P:System.Drawing.Pen.StartCap" />
      <MemberSignature Language="VB.NET" Value="Public Property StartCap As LineCap" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Drawing::Drawing2D::LineCap StartCap { System::Drawing::Drawing2D::LineCap get(); void set(System::Drawing::Drawing2D::LineCap value); };" />
      <MemberSignature Language="F#" Value="member this.StartCap : System.Drawing.Drawing2D.LineCap with get, set" Usage="System.Drawing.Pen.StartCap" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Drawing2D.LineCap</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene o establece el estilo de punto de conexión que se usa al comienzo de las líneas dibujadas con este <see cref="T:System.Drawing.Pen" />.</summary>
        <value>Uno de los valores de <see cref="T:System.Drawing.Drawing2D.LineCap" /> que representa el estilo de extremo usado al comienzo de las líneas dibujadas con este <see cref="T:System.Drawing.Pen" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 El ejemplo de código siguiente muestra los efectos de la configuración de la <xref:System.Drawing.Pen.StartCap%2A> y <xref:System.Drawing.Pen.EndCap%2A> propiedades en un <xref:System.Drawing.Pen>.  
  
 En este ejemplo está diseñado para usarse con Windows Forms. Pegue el código en un formulario y llame a la `ShowStartAndEndCaps` método cuando el control del formulario <xref:System.Windows.Forms.Control.Paint> evento pasando `e` como <xref:System.Windows.Forms.PaintEventArgs>.  
  
 [!code-cpp[System.Drawing.PensExample#2](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.PensExample/CPP/form1.cpp#2)]
 [!code-csharp[System.Drawing.PensExample#2](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.PensExample/CS/form1.cs#2)]
 [!code-vb[System.Drawing.PensExample#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.PensExample/VB/form1.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">El valor especificado no es un miembro de <see cref="T:System.Drawing.Drawing2D.LineCap" />.</exception>
        <exception cref="T:System.ArgumentException">El valor de la propiedad <see cref="P:System.Drawing.Pen.StartCap" /> se establece en un objeto <see cref="T:System.Drawing.Pen" /> inmutable, como los devueltos por la clase <see cref="T:System.Drawing.Pens" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="Transform">
      <MemberSignature Language="C#" Value="public System.Drawing.Drawing2D.Matrix Transform { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Drawing.Drawing2D.Matrix Transform" />
      <MemberSignature Language="DocId" Value="P:System.Drawing.Pen.Transform" />
      <MemberSignature Language="VB.NET" Value="Public Property Transform As Matrix" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Drawing::Drawing2D::Matrix ^ Transform { System::Drawing::Drawing2D::Matrix ^ get(); void set(System::Drawing::Drawing2D::Matrix ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Transform : System.Drawing.Drawing2D.Matrix with get, set" Usage="System.Drawing.Pen.Transform" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Drawing2D.Matrix</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene o establece una copia de la transformación geométrica para este objeto <see cref="T:System.Drawing.Pen" />.</summary>
        <value>Una copia de <see cref="T:System.Drawing.Drawing2D.Matrix" /> que representa la transformación geométrica para este objeto <see cref="T:System.Drawing.Pen" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Esta propiedad define una forma elíptica para la punta del lápiz. Esta elipse se obtiene de la forma circular predeterminada aplicando la matriz de transformación. Tenga en cuenta que se omite la parte de la traducción de la matriz. Dado que la matriz devuelta y por la <xref:System.Drawing.Pen.Transform%2A> propiedad es una copia de la transformación geométrica de la pluma, debe eliminar la matriz cuando ya no lo necesita.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">El valor de la propiedad <see cref="P:System.Drawing.Pen.Transform" /> se establece en un objeto <see cref="T:System.Drawing.Pen" /> inmutable, como los devueltos por la clase <see cref="T:System.Drawing.Pens" />.</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="TranslateTransform">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Convierte la transformación geométrica local en las dimensiones especificadas. Este método antepone la conversión a la transformación.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="TranslateTransform">
      <MemberSignature Language="C#" Value="public void TranslateTransform (float dx, float dy);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void TranslateTransform(float32 dx, float32 dy) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Pen.TranslateTransform(System.Single,System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Sub TranslateTransform (dx As Single, dy As Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void TranslateTransform(float dx, float dy);" />
      <MemberSignature Language="F#" Value="member this.TranslateTransform : single * single -&gt; unit" Usage="pen.TranslateTransform (dx, dy)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dx" Type="System.Single" />
        <Parameter Name="dy" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="dx">El valor de la conversión en X.</param>
        <param name="dy">El valor de la conversión en Y.</param>
        <summary>Convierte la transformación geométrica local en las dimensiones especificadas. Este método antepone la conversión a la transformación.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TranslateTransform">
      <MemberSignature Language="C#" Value="public void TranslateTransform (float dx, float dy, System.Drawing.Drawing2D.MatrixOrder order);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void TranslateTransform(float32 dx, float32 dy, valuetype System.Drawing.Drawing2D.MatrixOrder order) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Pen.TranslateTransform(System.Single,System.Single,System.Drawing.Drawing2D.MatrixOrder)" />
      <MemberSignature Language="VB.NET" Value="Public Sub TranslateTransform (dx As Single, dy As Single, order As MatrixOrder)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void TranslateTransform(float dx, float dy, System::Drawing::Drawing2D::MatrixOrder order);" />
      <MemberSignature Language="F#" Value="member this.TranslateTransform : single * single * System.Drawing.Drawing2D.MatrixOrder -&gt; unit" Usage="pen.TranslateTransform (dx, dy, order)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dx" Type="System.Single" />
        <Parameter Name="dy" Type="System.Single" />
        <Parameter Name="order" Type="System.Drawing.Drawing2D.MatrixOrder" />
      </Parameters>
      <Docs>
        <param name="dx">El valor de la conversión en X.</param>
        <param name="dy">El valor de la conversión en Y.</param>
        <param name="order">El orden (antes o después) en que se va a aplicar la conversión.</param>
        <summary>Convierte la transformación geométrica local en las dimensiones especificadas en el orden indicado.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Width">
      <MemberSignature Language="C#" Value="public float Width { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float32 Width" />
      <MemberSignature Language="DocId" Value="P:System.Drawing.Pen.Width" />
      <MemberSignature Language="VB.NET" Value="Public Property Width As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property float Width { float get(); void set(float value); };" />
      <MemberSignature Language="F#" Value="member this.Width : single with get, set" Usage="System.Drawing.Pen.Width" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene o establece el ancho de este objeto <see cref="T:System.Drawing.Pen" />, en unidades del objeto <see cref="T:System.Drawing.Graphics" /> usado para dibujar.</summary>
        <value>Ancho de este <see cref="T:System.Drawing.Pen" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Puede tener acceso a la unidad de medida de la <xref:System.Drawing.Graphics> objeto mediante su <xref:System.Drawing.Graphics.PageUnit%2A> propiedad. Normalmente, la unidad de medida es píxeles. Un <xref:System.Drawing.Pen.Width%2A> 0 dará como resultado la <xref:System.Drawing.Pen> dibujo como si el <xref:System.Drawing.Pen.Width%2A> dieron 1.  
  
   
  
## Examples  
 El ejemplo de código siguiente muestra los efectos de la configuración de la <xref:System.Drawing.Pen.Width%2A> y <xref:System.Drawing.Pen.LineJoin%2A> propiedades en un <xref:System.Drawing.Pen>.  
  
 En este ejemplo está diseñado para usarse con Windows Forms. Pegue el código en un formulario y llame a la `ShowLineJoin` método cuando el control del formulario <xref:System.Windows.Forms.Control.Paint> evento pasando `e` como <xref:System.Windows.Forms.PaintEventArgs>.  
  
 [!code-cpp[System.Drawing.PensExample#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.PensExample/CPP/form1.cpp#1)]
 [!code-csharp[System.Drawing.PensExample#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.PensExample/CS/form1.cs#1)]
 [!code-vb[System.Drawing.PensExample#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.PensExample/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">El valor de la propiedad <see cref="P:System.Drawing.Pen.Width" /> se establece en un objeto <see cref="T:System.Drawing.Pen" /> inmutable, como los devueltos por la clase <see cref="T:System.Drawing.Pens" />.</exception>
      </Docs>
    </Member>
  </Members>
</Type>