<Type Name="BufferedGraphics" FullName="System.Drawing.BufferedGraphics">
  <Metadata><Meta Name="ms.openlocfilehash" Value="d81edbe985ef55b5b69b4aa7ea69e5b2ea525423" /><Meta Name="ms.sourcegitcommit" Value="d40b35262cbc997b79bf76da3a39ccf59b738efc" /><Meta Name="ms.translationtype" Value="HT" /><Meta Name="ms.contentlocale" Value="es-ES" /><Meta Name="ms.lasthandoff" Value="12/05/2018" /><Meta Name="ms.locfileid" Value="52908495" /></Metadata><TypeSignature Language="C#" Value="public sealed class BufferedGraphics : IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit BufferedGraphics extends System.Object implements class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.Drawing.BufferedGraphics" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class BufferedGraphics&#xA;Implements IDisposable" />
  <TypeSignature Language="C++ CLI" Value="public ref class BufferedGraphics sealed : IDisposable" />
  <TypeSignature Language="F#" Value="type BufferedGraphics = class&#xA;    interface IDisposable" />
  <AssemblyInfo>
    <AssemblyName>System.Drawing</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Drawing.Common</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.1</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>Proporciona un búfer gráfico para el doble búfer.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La <xref:System.Drawing.BufferedGraphics> clase le permite implementar un doble búfer personalizado para los gráficos. Proporciona un contenedor para un búfer de gráficos, junto con los métodos que puede usar para escribir en el búfer y representar su contenido en un dispositivo de salida.  
  
 Gráficos que usan el almacenamiento en doble búfer pueden reducir o eliminar el parpadeo que se produjo al volver a dibujar una superficie de pantalla. Cuando se usa el almacenamiento en búfer doble, gráficos actualizados se dibujan en primer lugar a un búfer en memoria y el contenido de este búfer, a continuación, se escribe rápidamente en parte o toda la superficie mostrada. Esta sobrescritura relativamente breve de los gráficos mostrados normalmente reduce o elimina el parpadeo que a veces se produce cuando se actualizan los gráficos.  
  
> [!NOTE]
>  La manera más sencilla de usar el almacenamiento en doble búfer es establecer el <xref:System.Windows.Forms.ControlStyles.OptimizedDoubleBuffer> controlar la marca de estilo de un control mediante la <xref:System.Windows.Forms.Control.SetStyle%2A> método. Establecer el <xref:System.Windows.Forms.ControlStyles.OptimizedDoubleBuffer> marca para un control de dibujo del control a través de un búfer de gráficos de forma predeterminada, redirige sin necesidad de ningún código adicional. Esta marca se establece en `true` de forma predeterminada.  
  
 El <xref:System.Drawing.BufferedGraphics> clase no tiene ningún constructor público y debe crearse la <xref:System.Drawing.BufferedGraphicsContext> para un dominio de aplicación mediante su <xref:System.Drawing.BufferedGraphicsContext.Allocate%2A> método. Puede recuperar el <xref:System.Drawing.BufferedGraphicsContext> para el dominio de aplicación actual desde estático <xref:System.Drawing.BufferedGraphicsManager.Current%2A?displayProperty=nameWithType> propiedad.  
  
 El <xref:System.Drawing.BufferedGraphics.Graphics%2A> propiedad puede utilizarse para dibujar en el búfer de gráficos. Esta propiedad proporciona acceso a la <xref:System.Drawing.Graphics> objeto que se dibuja en el búfer gráfico asignado para este <xref:System.Drawing.BufferedGraphics> objeto.  
  
 El <xref:System.Drawing.BufferedGraphics.Render%2A> método con ningún dibuja argumentos almacenar en búfer el contenido de los gráficos a la superficie especificada cuando se asignó el búfer. Otras sobrecargas de los <xref:System.Drawing.BufferedGraphics.Render%2A> método le permiten especificar un <xref:System.Drawing.Graphics> objeto o un <xref:System.IntPtr> objeto que apunta a un contexto de dispositivo que se va a dibujar el contenido del búfer gráfico.  
  
 Para obtener más información sobre cómo dibujar gráficos de doble búfer, vea [Double Buffered Graphics](~/docs/framework/winforms/advanced/double-buffered-graphics.md).  
  
   
  
## Examples  
 En el ejemplo de código siguiente se muestra cómo utilizar un <xref:System.Drawing.BufferedGraphics> objeto que se va a dibujar gráficos con varios tipos de implementaciones de almacenamiento en búfer. O bien al hacer clic en el formulario se inicia y detiene un temporizador que hace que dibujar las actualizaciones. Las actualizaciones de dibujo le permiten observar el efecto de almacenamiento en doble búfer. Haciendo clic en los ciclos de formulario a través de los siguientes modos de dibujos:  
  
-   Dibujo directamente a la <xref:System.Windows.Forms.Control.Handle%2A> para un <xref:System.Windows.Forms.Form>.  
  
-   Dibujar reemplazando el <xref:System.Windows.Forms.Form.OnPaint%2A> método mediante el <xref:System.Windows.Forms.ControlStyles.OptimizedDoubleBuffer> controlar el estilo.  
  
-   Dibujar reemplazando el <xref:System.Windows.Forms.Form.OnPaint%2A> método para el método de formulario sin usar el <xref:System.Windows.Forms.ControlStyles.OptimizedDoubleBuffer> controlar el estilo.  
  
 En cada modo, se dibuja texto que identifica el modo actual y se describe el comportamiento que tiene lugar cuando se presiona cada botón del mouse.  
  
 [!code-cpp[BufferedGraphicsExample#1](~/samples/snippets/cpp/VS_Snippets_Winforms/BufferedGraphicsExample/CPP/bufferingtest.cpp#1)]
 [!code-csharp[BufferedGraphicsExample#1](~/samples/snippets/csharp/VS_Snippets_Winforms/BufferedGraphicsExample/CS/bufferingtest.cs#1)]
 [!code-vb[BufferedGraphicsExample#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/BufferedGraphicsExample/VB/bufferingtest.vb#1)]  
  
 ]]></format>
    </remarks>
    <threadsafe>La clase <see cref="T:System.Drawing.BufferedGraphics" /> no es segura para la ejecución de subprocesos. Al acceder a un búfer de gráficos desde subprocesos independientes, es importante usar un mecanismo de control de acceso de subprocesos para evitar conflictos.</threadsafe>
    <related type="Article" href="~/docs/framework/winforms/advanced/double-buffered-graphics.md">Gráficos de doble búfer</related>
  </Docs>
  <Members>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.BufferedGraphics.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Dispose();" />
      <MemberSignature Language="F#" Value="abstract member Dispose : unit -&gt; unit&#xA;override this.Dispose : unit -&gt; unit" Usage="bufferedGraphics.Dispose " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Libera todos los recursos utilizados por el objeto <see cref="T:System.Drawing.BufferedGraphics" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Llame a <xref:System.Drawing.BufferedGraphics.Dispose%2A> cuando haya terminado con el <xref:System.Drawing.BufferedGraphics> objeto. El <xref:System.Drawing.BufferedGraphics.Dispose%2A> método deja la <xref:System.Drawing.BufferedGraphics> objeto en un estado inutilizable. Después de llamar a <xref:System.Drawing.BufferedGraphics.Dispose%2A>, debe liberar todas las referencias a la <xref:System.Drawing.BufferedGraphics> de objeto para el recolector de elementos no utilizados pueda reclamar la memoria que el <xref:System.Drawing.BufferedGraphics> ocupada por el objeto. Para obtener más información, consulte [limpiar recursos no administrados](~/docs/standard/garbage-collection/unmanaged.md) y [implementar un método Dispose](~/docs/standard/garbage-collection/implementing-dispose.md).  
  
> [!NOTE]
>  Llame siempre a <xref:System.Drawing.BufferedGraphics.Dispose%2A> antes de liberar la última referencia a la <xref:System.Drawing.BufferedGraphics> objeto. En caso contrario, los recursos que está usando no se liberarán hasta que el recolector de elementos no utilizados llame al método <xref:System.Drawing.BufferedGraphics> del objeto `Finalize`.  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/framework/winforms/advanced/double-buffered-graphics.md">Gráficos de doble búfer</related>
      </Docs>
    </Member>
    <Member MemberName="Finalize">
      <MemberSignature Language="C#" Value="~BufferedGraphics ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Finalize() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.BufferedGraphics.Finalize" />
      <MemberSignature Language="VB.NET" Value="Finalize ()" />
      <MemberSignature Language="C++ CLI" Value="!BufferedGraphics ()" />
      <MemberSignature Language="F#" Value="override this.Finalize : unit -&gt; unit" Usage="bufferedGraphics.Finalize " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Permite que un objeto intente liberar recursos y realizar otras operaciones de limpieza antes de que sea reclamado por la recolección de elementos no utilizados.</summary>
        <remarks>To be added.</remarks>
        <altmember cref="M:System.Object.Finalize" />
      </Docs>
    </Member>
    <Member MemberName="Graphics">
      <MemberSignature Language="C#" Value="public System.Drawing.Graphics Graphics { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Drawing.Graphics Graphics" />
      <MemberSignature Language="DocId" Value="P:System.Drawing.BufferedGraphics.Graphics" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Graphics As Graphics" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Drawing::Graphics ^ Graphics { System::Drawing::Graphics ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Graphics : System.Drawing.Graphics" Usage="System.Drawing.BufferedGraphics.Graphics" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Drawing.Graphics</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene un objeto <see cref="T:System.Drawing.Graphics" /> que envía el resultado al búfer gráfico.</summary>
        <value>Un objeto <see cref="T:System.Drawing.Graphics" /> que envía el resultado al búfer gráfico.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Esta propiedad proporciona un <xref:System.Drawing.Graphics> objeto que se dibuja en el búfer gráfico asignado para este <xref:System.Drawing.BufferedGraphics> objeto.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Drawing.Graphics" />
        <related type="Article" href="~/docs/framework/winforms/advanced/double-buffered-graphics.md">Gráficos de doble búfer</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Render">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Escribe el contenido del búfer gráfico.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Render">
      <MemberSignature Language="C#" Value="public void Render ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Render() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.BufferedGraphics.Render" />
      <MemberSignature Language="VB.NET" Value="Public Sub Render ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Render();" />
      <MemberSignature Language="F#" Value="member this.Render : unit -&gt; unit" Usage="bufferedGraphics.Render " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Escribe el contenido del búfer gráfico en el dispositivo predeterminado.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este método escribe el contenido del búfer gráfico en el dispositivo especificado mediante una llamada a la <xref:System.Drawing.BufferedGraphicsContext.Allocate%2A> método de la <xref:System.Drawing.BufferedGraphicsContext> usado para crear este <xref:System.Drawing.BufferedGraphics> objeto.  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/framework/winforms/advanced/double-buffered-graphics.md">Gráficos de doble búfer</related>
      </Docs>
    </Member>
    <Member MemberName="Render">
      <MemberSignature Language="C#" Value="public void Render (System.Drawing.Graphics target);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Render(class System.Drawing.Graphics target) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.BufferedGraphics.Render(System.Drawing.Graphics)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Render (target As Graphics)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Render(System::Drawing::Graphics ^ target);" />
      <MemberSignature Language="F#" Value="member this.Render : System.Drawing.Graphics -&gt; unit" Usage="bufferedGraphics.Render target" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="target" Type="System.Drawing.Graphics" />
      </Parameters>
      <Docs>
        <param name="target">Objeto <see cref="T:System.Drawing.Graphics" /> en el que se va a escribir el contenido del búfer gráfico.</param>
        <summary>Escribe el contenido del búfer gráfico en el objeto <see cref="T:System.Drawing.Graphics" /> especificado.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este método escribe el contenido del búfer gráfico en especificado <xref:System.Drawing.Graphics> objeto.  
  
   
  
## Examples  
 En el ejemplo de código siguiente se muestra cómo representar el contenido del búfer gráfico en un <xref:System.Drawing.Graphics> objeto. Este código forma parte de un ejemplo más extenso proporcionado para el <xref:System.Drawing.BufferedGraphics> clase.  
  
 [!code-cpp[BufferingExamples#5](~/samples/snippets/cpp/VS_Snippets_Winforms/BufferingExamples/CPP/bufferingexamples.cpp#5)]
 [!code-csharp[BufferingExamples#5](~/samples/snippets/csharp/VS_Snippets_Winforms/BufferingExamples/CS/bufferingexamples.cs#5)]
 [!code-vb[BufferingExamples#5](~/samples/snippets/visualbasic/VS_Snippets_Winforms/BufferingExamples/VB/bufferingexamples.vb#5)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Drawing.Graphics" />
        <related type="Article" href="~/docs/framework/winforms/advanced/double-buffered-graphics.md">Gráficos de doble búfer</related>
      </Docs>
    </Member>
    <Member MemberName="Render">
      <MemberSignature Language="C#" Value="public void Render (IntPtr targetDC);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Render(native int targetDC) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.BufferedGraphics.Render(System.IntPtr)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Render (targetDC As IntPtr)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Render(IntPtr targetDC);" />
      <MemberSignature Language="F#" Value="member this.Render : nativeint -&gt; unit" Usage="bufferedGraphics.Render targetDC" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="targetDC" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="targetDC">Identificador <see cref="T:System.IntPtr" /> que apunta al contexto de dispositivo en el que se va a escribir el contenido del búfer gráfico.</param>
        <summary>Escribe el contenido del búfer gráfico en el contexto de dispositivo asociado al identificador <see cref="T:System.IntPtr" /> especificado.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este método escribe el contenido del búfer gráfico en el contexto de dispositivo asociado con los valores especificados <xref:System.IntPtr> controlar.  
  
   
  
## Examples  
 En el ejemplo de código siguiente se muestra cómo representar el contenido del búfer gráfico `grafx` a un contexto de dispositivo especificado. Este código forma parte de un ejemplo más extenso proporcionado para el <xref:System.Drawing.BufferedGraphics> clase.  
  
 [!code-cpp[BufferingExamples#6](~/samples/snippets/cpp/VS_Snippets_Winforms/BufferingExamples/CPP/bufferingexamples.cpp#6)]
 [!code-csharp[BufferingExamples#6](~/samples/snippets/csharp/VS_Snippets_Winforms/BufferingExamples/CS/bufferingexamples.cs#6)]
 [!code-vb[BufferingExamples#6](~/samples/snippets/visualbasic/VS_Snippets_Winforms/BufferingExamples/VB/bufferingexamples.vb#6)]  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission">Para obtener acceso a código no administrado. Enumeración relacionada: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" />.</permission>
        <altmember cref="T:System.IntPtr" />
        <related type="Article" href="~/docs/framework/winforms/advanced/double-buffered-graphics.md">Gráficos de doble búfer</related>
      </Docs>
    </Member>
  </Members>
</Type>