<Type Name="IssuerNameRegistry" FullName="System.IdentityModel.Tokens.IssuerNameRegistry">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="99ef3ede8c606349e7d5c5cc670ec0c65f58a76d" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="es-ES" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30418839" />
  </Metadata>
  <TypeSignature Language="C#" Value="public abstract class IssuerNameRegistry : System.IdentityModel.Configuration.ICustomIdentityConfiguration" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit IssuerNameRegistry extends System.Object implements class System.IdentityModel.Configuration.ICustomIdentityConfiguration" />
  <TypeSignature Language="DocId" Value="T:System.IdentityModel.Tokens.IssuerNameRegistry" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class IssuerNameRegistry&#xA;Implements ICustomIdentityConfiguration" />
  <TypeSignature Language="C++ CLI" Value="public ref class IssuerNameRegistry abstract : System::IdentityModel::Configuration::ICustomIdentityConfiguration" />
  <AssemblyInfo>
    <AssemblyName>System.IdentityModel</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IdentityModel.Configuration.ICustomIdentityConfiguration</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>La clase base abstracta para un Registro de nombres de emisores. Un Registro del nombre del emisor se utiliza para asociar un nombre mnemotécnico al material criptográfico necesario para comprobar las signaturas de los tokens generados por el emisor correspondiente. El registro de nombre de emisores mantiene una lista de emisores en los que una aplicación de usuario de confianza (RP) confía.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El registro de nombre de emisor se usa para asociar un nombre de tecla de acceso para el material criptográfico necesario para comprobar las firmas de tokens generados por el emisor correspondiente. Este nombre, a continuación, se usa para establecer el <xref:System.Security.Claims.Claim.Issuer%2A> o <xref:System.Security.Claims.Claim.OriginalIssuer%2A> propiedad de una notificación. Los métodos expuestos por la <xref:System.IdentityModel.Tokens.IssuerNameRegistry> clase se denominan de la canalización por el controlador de token de seguridad que se está procesando el token. Se descartan los tokens firmados por material que no está asignada por un registro de nombre de emisor como de no confianza. El nombre devuelto por el registro de nombre de emisor debe ser único dentro del contexto de una aplicación de RP.  
  
 En el código, puede especificar el registro de nombre de emisor para usar estableciendo el <xref:System.IdentityModel.Tokens.SecurityTokenHandlerConfiguration.IssuerNameRegistry%2A?displayProperty=nameWithType> propiedad. En un archivo de configuración, el registro de nombre de emisor puede especificarse mediante la especificación de la [ &lt;issuerNameRegistry&gt; ](~/docs/framework/configure-apps/file-schema/windows-identity-foundation/issuernameregistry.md) elemento bajo el [ &lt;securityTokenHandlerConfiguration &gt; ](~/docs/framework/configure-apps/file-schema/windows-identity-foundation/securitytokenhandlerconfiguration.md) elemento.  
  
 Windows Identity Foundation (WIF) proporciona una implementación de la <xref:System.IdentityModel.Tokens.IssuerNameRegistry> clase de fábrica: el <xref:System.IdentityModel.Tokens.ConfigurationBasedIssuerNameRegistry> clase. Cuando se usa esta implementación puede especificar la lista de emisores de confianza en el archivo de configuración de la aplicación de RP bajo la [ &lt;trustedIssuers&gt; ](~/docs/framework/configure-apps/file-schema/windows-identity-foundation/trustedissuers.md) elemento, que es un elemento secundario de la `<issuerNameRegistry>`elemento cuando el <xref:System.IdentityModel.Tokens.ConfigurationBasedIssuerNameRegistry>.class se hace referencia en ese elemento `type` atributo. En el `<trustedIssuers>` elemento, cada nombre de emisor se asigna al certificado X.509 que debe usarse para comprobar su firma.  
  
 Para crear un registro de nombre de emisor personalizado, debe invalidar el <xref:System.IdentityModel.Tokens.IssuerNameRegistry.GetIssuerName%28System.IdentityModel.Tokens.SecurityToken%29?displayProperty=nameWithType> método. Este método devuelve el nombre del emisor del token de seguridad especificado. Opcionalmente, puede invalidar la <xref:System.IdentityModel.Tokens.IssuerNameRegistry.GetIssuerName%28System.IdentityModel.Tokens.SecurityToken%2CSystem.String%29?displayProperty=nameWithType> método para proporcionar un mecanismo sugerido al recuperar los nombres del emisor y la <xref:System.IdentityModel.Tokens.IssuerNameRegistry.GetWindowsIssuerName%2A> método si desea proporcionar un nombre de emisor para Windows tokens que es diferente de <xref:System.Security.Claims.ClaimsIdentity.DefaultIssuer>. Invalidar el <xref:System.IdentityModel.Tokens.IssuerNameRegistry.LoadCustomConfiguration%2A> método para habilitar el registro de nombre de emisor se inicialicen desde un archivo de configuración.  
  
   
  
## Examples  
 El código siguiente muestra una implementación de la <xref:System.IdentityModel.Tokens.IssuerNameRegistry> clase que solo acepta emisores que usan certificados con el asunto "CN = localhost".  
  
> [!WARNING]
>  El código siguiente es solo con fines ilustrativos. Validación de certificados basados en nombre del firmante no es una buena práctica. Este código no debería utilizarse tal y como está en producción.  
  
 [!code-csharp[WifIssuerNameRegistry#1](~/samples/snippets/csharp/VS_Snippets_Misc/wifissuernameregistry/cs/mvcwepapp/trustedissuernameregistry.cs#1)]  
  
 A continuación muestra el código XML necesario configurar una aplicación con el registro de nombre de emisor de confianza.  
  
```xml  
<system.identityModel>  
  <identityConfiguration>  
    <issuerNameRegistry type="System.IdentityModel.Samples.TrustedIssuerNameRegistry, MyApp" />  
  </identityConfiguration>  
</system.identityModel>  
```  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.IdentityModel.Tokens.ConfigurationBasedIssuerNameRegistry" />
    <altmember cref="T:System.IdentityModel.Tokens.SecurityTokenHandler" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected IssuerNameRegistry ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Tokens.IssuerNameRegistry.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; IssuerNameRegistry();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Inicializa una nueva instancia de la clase <see cref="T:System.IdentityModel.Tokens.IssuerNameRegistry" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetIssuerName">
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Cuando se reemplaza en una clase derivada, devuelve el nombre de emisor para el token de seguridad especificado.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Se llama desde la canalización de procesamiento por el controlador de token de seguridad que se está procesando el token. El método debe devolver un nombre único para el emisor en el contexto de la aplicación de RP.  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetIssuerName">
      <MemberSignature Language="C#" Value="public abstract string GetIssuerName (System.IdentityModel.Tokens.SecurityToken securityToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string GetIssuerName(class System.IdentityModel.Tokens.SecurityToken securityToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Tokens.IssuerNameRegistry.GetIssuerName(System.IdentityModel.Tokens.SecurityToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract System::String ^ GetIssuerName(System::IdentityModel::Tokens::SecurityToken ^ securityToken);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="securityToken" Type="System.IdentityModel.Tokens.SecurityToken" />
      </Parameters>
      <Docs>
        <param name="securityToken">El token de seguridad para el que se va a devolver el nombre de emisor.</param>
        <summary>Cuando se reemplaza en una clase derivada, devuelve el nombre del emisor del token de seguridad especificado.</summary>
        <returns>Nombre del emisor.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Las implementaciones deben devolver una cadena null y no vacío para identificar a un emisor reconocido o una cadena nula para identificar a un emisor no reconocido.  
  
 Se llama desde la canalización de procesamiento por el controlador de token de seguridad que se está procesando el token. El método debe devolver un nombre único para el emisor en el contexto de la aplicación de RP.  
  
   
  
## Examples  
 El código siguiente muestra el <xref:System.IdentityModel.Tokens.IssuerNameRegistry.GetIssuerName%2A> método para un registro de nombre de emisor. El ejemplo completo está en el <xref:System.IdentityModel.Tokens.IssuerNameRegistry> tema de información general sobre la clase.  
  
> [!WARNING]
>  El código siguiente es solo con fines ilustrativos. Validación de certificados basados en nombre del firmante no es una buena práctica. Este código no debería utilizarse tal y como está en producción.  
  
 [!code-csharp[WifIssuerNameRegistry#2](~/samples/snippets/csharp/VS_Snippets_Misc/wifissuernameregistry/cs/mvcwepapp/trustedissuernameregistry.cs#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IdentityModel.Tokens.SecurityTokenHandler" />
      </Docs>
    </Member>
    <Member MemberName="GetIssuerName">
      <MemberSignature Language="C#" Value="public virtual string GetIssuerName (System.IdentityModel.Tokens.SecurityToken securityToken, string requestedIssuerName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string GetIssuerName(class System.IdentityModel.Tokens.SecurityToken securityToken, string requestedIssuerName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Tokens.IssuerNameRegistry.GetIssuerName(System.IdentityModel.Tokens.SecurityToken,System.String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::String ^ GetIssuerName(System::IdentityModel::Tokens::SecurityToken ^ securityToken, System::String ^ requestedIssuerName);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="securityToken" Type="System.IdentityModel.Tokens.SecurityToken" />
        <Parameter Name="requestedIssuerName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="securityToken">El token de seguridad para el que se va a devolver el nombre de emisor.</param>
        <param name="requestedIssuerName">Un nombre de emisor que se considera en la solicitud.</param>
        <summary>Cuando se reemplaza en una clase derivada, devuelve el nombre del emisor del token de seguridad especificado. El nombre especificado del emisor puede considerarse para determinar el nombre del emisor que se va a devolver.</summary>
        <returns>Nombre del emisor.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La implementación predeterminada omite la `requestedIssuerName` parámetro y simplemente llama el <xref:System.IdentityModel.Tokens.IssuerNameRegistry.GetIssuerName%28System.IdentityModel.Tokens.SecurityToken%29?displayProperty=nameWithType> método.  
  
 Se llama desde la canalización de procesamiento por el controlador de token de seguridad que se está procesando el token. El método debe devolver un nombre único para el emisor en el contexto de la aplicación de RP.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IdentityModel.Tokens.SecurityTokenHandler" />
      </Docs>
    </Member>
    <Member MemberName="GetWindowsIssuerName">
      <MemberSignature Language="C#" Value="public virtual string GetWindowsIssuerName ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string GetWindowsIssuerName() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Tokens.IssuerNameRegistry.GetWindowsIssuerName" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetWindowsIssuerName () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::String ^ GetWindowsIssuerName();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Devuelve el nombre de emisor predeterminado que se utilizará para las notificaciones de Windows.</summary>
        <returns>Nombre del emisor predeterminado para las notificaciones de Windows.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La implementación predeterminada devuelve <xref:System.Security.Claims.ClaimsIdentity.DefaultIssuer>.  
  
 Se llama desde la canalización de procesamiento por el controlador de token de seguridad que se está procesando el token. El método debe devolver un nombre único para el emisor en el contexto de la aplicación de RP.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IdentityModel.Tokens.SecurityTokenHandler" />
      </Docs>
    </Member>
    <Member MemberName="LoadCustomConfiguration">
      <MemberSignature Language="C#" Value="public virtual void LoadCustomConfiguration (System.Xml.XmlNodeList nodelist);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void LoadCustomConfiguration(class System.Xml.XmlNodeList nodelist) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Tokens.IssuerNameRegistry.LoadCustomConfiguration(System.Xml.XmlNodeList)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub LoadCustomConfiguration (nodelist As XmlNodeList)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void LoadCustomConfiguration(System::Xml::XmlNodeList ^ nodelist);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IdentityModel.Configuration.ICustomIdentityConfiguration.LoadCustomConfiguration(System.Xml.XmlNodeList)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="nodelist" Type="System.Xml.XmlNodeList" />
      </Parameters>
      <Docs>
        <param name="nodelist">Elementos XML de configuración. Todos los nodos de la lista son de tipo <see cref="T:System.Xml.XmlElement" />.</param>
        <summary>Cuando se reemplaza en una clase derivada, carga la configuración personalizada de XML.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.IdentityModel.Tokens.IssuerNameRegistry.LoadCustomConfiguration%2A> método se llama por la infraestructura de configuración. Cuando se llama a este método, el `nodelist` contendrá los elementos secundarios de nivel superior de la [ &lt;issuerNameRegistry&gt; ](~/docs/framework/configure-apps/file-schema/windows-identity-foundation/issuernameregistry.md) elemento desde el archivo de configuración. Cada uno de estos a su vez, podría contener atributos o elementos secundarios según el esquema de configuración que se definen para la clase derivada.  
  
 La implementación predeterminada produce un <xref:System.NotImplementedException>. Invalide este método en una clase derivada para habilitar la inicialización de seguridad del registro de nombre de emisor de un archivo de configuración.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>