<Type Name="SessionSecurityTokenCache" FullName="System.IdentityModel.Tokens.SessionSecurityTokenCache">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="859617cd3fcc2fd2b0e43d67f75c83e59767bbdc" />
    <Meta Name="ms.sourcegitcommit" Value="434f60616a9793fa8436744549fc856e94f7a648" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="es-ES" />
    <Meta Name="ms.lasthandoff" Value="08/24/2018" />
    <Meta Name="ms.locfileid" Value="36480107" />
  </Metadata>
  <TypeSignature Language="C#" Value="public abstract class SessionSecurityTokenCache : System.IdentityModel.Configuration.ICustomIdentityConfiguration" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit SessionSecurityTokenCache extends System.Object implements class System.IdentityModel.Configuration.ICustomIdentityConfiguration" />
  <TypeSignature Language="DocId" Value="T:System.IdentityModel.Tokens.SessionSecurityTokenCache" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class SessionSecurityTokenCache&#xA;Implements ICustomIdentityConfiguration" />
  <TypeSignature Language="C++ CLI" Value="public ref class SessionSecurityTokenCache abstract : System::IdentityModel::Configuration::ICustomIdentityConfiguration" />
  <TypeSignature Language="F#" Value="type SessionSecurityTokenCache = class&#xA;    interface ICustomIdentityConfiguration" />
  <AssemblyInfo>
    <AssemblyName>System.IdentityModel</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IdentityModel.Configuration.ICustomIdentityConfiguration</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>Define una clase abstracta para una memoria caché de tokens de seguridad de la sesión.</summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected SessionSecurityTokenCache ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Tokens.SessionSecurityTokenCache.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; SessionSecurityTokenCache();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Se llama desde constructores de clases derivadas para inicializar la clase <see cref="T:System.IdentityModel.Tokens.SessionSecurityTokenCache" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddOrUpdate">
      <MemberSignature Language="C#" Value="public abstract void AddOrUpdate (System.IdentityModel.Tokens.SessionSecurityTokenCacheKey key, System.IdentityModel.Tokens.SessionSecurityToken value, DateTime expiryTime);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AddOrUpdate(class System.IdentityModel.Tokens.SessionSecurityTokenCacheKey key, class System.IdentityModel.Tokens.SessionSecurityToken value, valuetype System.DateTime expiryTime) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Tokens.SessionSecurityTokenCache.AddOrUpdate(System.IdentityModel.Tokens.SessionSecurityTokenCacheKey,System.IdentityModel.Tokens.SessionSecurityToken,System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Sub AddOrUpdate (key As SessionSecurityTokenCacheKey, value As SessionSecurityToken, expiryTime As DateTime)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract void AddOrUpdate(System::IdentityModel::Tokens::SessionSecurityTokenCacheKey ^ key, System::IdentityModel::Tokens::SessionSecurityToken ^ value, DateTime expiryTime);" />
      <MemberSignature Language="F#" Value="abstract member AddOrUpdate : System.IdentityModel.Tokens.SessionSecurityTokenCacheKey * System.IdentityModel.Tokens.SessionSecurityToken * DateTime -&gt; unit" Usage="sessionSecurityTokenCache.AddOrUpdate (key, value, expiryTime)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.IdentityModel.Tokens.SessionSecurityTokenCacheKey" />
        <Parameter Name="value" Type="System.IdentityModel.Tokens.SessionSecurityToken" />
        <Parameter Name="expiryTime" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="key">Clave de la entrada que se va a agregar o actualizar.</param>
        <param name="value">Token asociado con la entrada.</param>
        <param name="expiryTime">Fecha de expiración de la entrada.</param>
        <summary>Cuando se reemplaza en una clase derivada, intenta agregar una entrada a la memoria caché o actualizar una existente.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Get">
      <MemberSignature Language="C#" Value="public abstract System.IdentityModel.Tokens.SessionSecurityToken Get (System.IdentityModel.Tokens.SessionSecurityTokenCacheKey key);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.IdentityModel.Tokens.SessionSecurityToken Get(class System.IdentityModel.Tokens.SessionSecurityTokenCacheKey key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Tokens.SessionSecurityTokenCache.Get(System.IdentityModel.Tokens.SessionSecurityTokenCacheKey)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function Get (key As SessionSecurityTokenCacheKey) As SessionSecurityToken" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract System::IdentityModel::Tokens::SessionSecurityToken ^ Get(System::IdentityModel::Tokens::SessionSecurityTokenCacheKey ^ key);" />
      <MemberSignature Language="F#" Value="abstract member Get : System.IdentityModel.Tokens.SessionSecurityTokenCacheKey -&gt; System.IdentityModel.Tokens.SessionSecurityToken" Usage="sessionSecurityTokenCache.Get key" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IdentityModel.Tokens.SessionSecurityToken</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.IdentityModel.Tokens.SessionSecurityTokenCacheKey" />
      </Parameters>
      <Docs>
        <param name="key">Clave de la entrada que se va a recuperar.</param>
        <summary>Cuando se reemplaza en una clase derivada, intenta recuperar una entrada de la memoria caché.</summary>
        <returns>El token de sesión asociado a la clave o <see langword="null" />, si no se encuentra ninguna coincidencia.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetAll">
      <MemberSignature Language="C#" Value="public abstract System.Collections.Generic.IEnumerable&lt;System.IdentityModel.Tokens.SessionSecurityToken&gt; GetAll (string endpointId, System.Xml.UniqueId contextId);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.Generic.IEnumerable`1&lt;class System.IdentityModel.Tokens.SessionSecurityToken&gt; GetAll(string endpointId, class System.Xml.UniqueId contextId) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Tokens.SessionSecurityTokenCache.GetAll(System.String,System.Xml.UniqueId)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function GetAll (endpointId As String, contextId As UniqueId) As IEnumerable(Of SessionSecurityToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract System::Collections::Generic::IEnumerable&lt;System::IdentityModel::Tokens::SessionSecurityToken ^&gt; ^ GetAll(System::String ^ endpointId, System::Xml::UniqueId ^ contextId);" />
      <MemberSignature Language="F#" Value="abstract member GetAll : string * System.Xml.UniqueId -&gt; seq&lt;System.IdentityModel.Tokens.SessionSecurityToken&gt;" Usage="sessionSecurityTokenCache.GetAll (endpointId, contextId)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.IdentityModel.Tokens.SessionSecurityToken&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="endpointId" Type="System.String" />
        <Parameter Name="contextId" Type="System.Xml.UniqueId" />
      </Parameters>
      <Docs>
        <param name="endpointId">Identificador del extremo que se busca.</param>
        <param name="contextId">Identificador de contexto que se busca.</param>
        <summary>Cuando se reemplaza en una clase derivada, recupera todos los tokens asociados a una clave.</summary>
        <returns>Colección de tokens de sesión asociados con la clave.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LoadCustomConfiguration">
      <MemberSignature Language="C#" Value="public virtual void LoadCustomConfiguration (System.Xml.XmlNodeList nodelist);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void LoadCustomConfiguration(class System.Xml.XmlNodeList nodelist) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Tokens.SessionSecurityTokenCache.LoadCustomConfiguration(System.Xml.XmlNodeList)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub LoadCustomConfiguration (nodelist As XmlNodeList)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void LoadCustomConfiguration(System::Xml::XmlNodeList ^ nodelist);" />
      <MemberSignature Language="F#" Value="abstract member LoadCustomConfiguration : System.Xml.XmlNodeList -&gt; unit&#xA;override this.LoadCustomConfiguration : System.Xml.XmlNodeList -&gt; unit" Usage="sessionSecurityTokenCache.LoadCustomConfiguration nodelist" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IdentityModel.Configuration.ICustomIdentityConfiguration.LoadCustomConfiguration(System.Xml.XmlNodeList)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="nodelist" Type="System.Xml.XmlNodeList" />
      </Parameters>
      <Docs>
        <param name="nodelist">Elementos de configuración personalizados.</param>
        <summary>Cuando se reemplaza en una clase derivada, carga la configuración personalizada de XML.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 De forma predeterminada, este método produce una <xref:System.NotImplementedException>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Remove">
      <MemberSignature Language="C#" Value="public abstract void Remove (System.IdentityModel.Tokens.SessionSecurityTokenCacheKey key);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Remove(class System.IdentityModel.Tokens.SessionSecurityTokenCacheKey key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Tokens.SessionSecurityTokenCache.Remove(System.IdentityModel.Tokens.SessionSecurityTokenCacheKey)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Sub Remove (key As SessionSecurityTokenCacheKey)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract void Remove(System::IdentityModel::Tokens::SessionSecurityTokenCacheKey ^ key);" />
      <MemberSignature Language="F#" Value="abstract member Remove : System.IdentityModel.Tokens.SessionSecurityTokenCacheKey -&gt; unit" Usage="sessionSecurityTokenCache.Remove key" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.IdentityModel.Tokens.SessionSecurityTokenCacheKey" />
      </Parameters>
      <Docs>
        <param name="key">Clave de la entrada que se va a quitar.</param>
        <summary>Cuando se implementa en una clase derivada, intenta quitar una entrada de la memoria caché.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="RemoveAll">
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Cuando se implementa en una clase derivada, intenta quitar todas las entradas asociadas a los identificadores especificados.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="RemoveAll">
      <MemberSignature Language="C#" Value="public abstract void RemoveAll (string endpointId);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RemoveAll(string endpointId) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Tokens.SessionSecurityTokenCache.RemoveAll(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Sub RemoveAll (endpointId As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract void RemoveAll(System::String ^ endpointId);" />
      <MemberSignature Language="F#" Value="abstract member RemoveAll : string -&gt; unit" Usage="sessionSecurityTokenCache.RemoveAll endpointId" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="endpointId" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="endpointId">Identificador del extremo para el que se van a quitar entradas.</param>
        <summary>Cuando se implementa en una clase derivada, intenta quitar todas las entradas con un identificador de extremo coincidente de la memoria caché.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveAll">
      <MemberSignature Language="C#" Value="public abstract void RemoveAll (string endpointId, System.Xml.UniqueId contextId);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RemoveAll(string endpointId, class System.Xml.UniqueId contextId) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Tokens.SessionSecurityTokenCache.RemoveAll(System.String,System.Xml.UniqueId)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Sub RemoveAll (endpointId As String, contextId As UniqueId)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract void RemoveAll(System::String ^ endpointId, System::Xml::UniqueId ^ contextId);" />
      <MemberSignature Language="F#" Value="abstract member RemoveAll : string * System.Xml.UniqueId -&gt; unit" Usage="sessionSecurityTokenCache.RemoveAll (endpointId, contextId)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="endpointId" Type="System.String" />
        <Parameter Name="contextId" Type="System.Xml.UniqueId" />
      </Parameters>
      <Docs>
        <param name="endpointId">Identificador del extremo para el que se van a quitar entradas.</param>
        <param name="contextId">Identificador de contexto para el que se van a quitar entradas.</param>
        <summary>Cuando se implementa en una clase derivada, intenta quitar todas las entradas coincidentes de la memoria caché.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>