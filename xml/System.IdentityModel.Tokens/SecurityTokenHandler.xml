<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="SecurityTokenHandler.xml" source-language="en-US" target-language="es-ES">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac5cbb9943aefb6ba2f295be7ff7f864be1ec607810.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">cbb9943aefb6ba2f295be7ff7f864be1ec607810</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.IdentityModel.Tokens.SecurityTokenHandler">
          <source>The abstract base class for security token handlers.</source>
          <target state="translated">La clase base abstracta para los controladores de token de seguridad.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IdentityModel.Tokens.SecurityTokenHandler">
          <source>The <ph id="ph1">&lt;xref:System.IdentityModel.Tokens.SecurityTokenHandler&gt;</ph> class is the base class from which all security token handlers derive.</source>
          <target state="translated">El <ph id="ph1">&lt;xref:System.IdentityModel.Tokens.SecurityTokenHandler&gt;</ph> es la clase base de que toda la seguridad se derivan los controladores de tokens.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IdentityModel.Tokens.SecurityTokenHandler">
          <source>A security token handler is responsible for:</source>
          <target state="translated">Un controlador de token de seguridad es responsable de:</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IdentityModel.Tokens.SecurityTokenHandler">
          <source>Validating security tokens (<ph id="ph1">&lt;xref:System.IdentityModel.Tokens.SecurityToken&gt;</ph>) of the type it is designed to process and packaging the claims contained in the token into a <ph id="ph2">&lt;xref:System.Security.Claims.ClaimsIdentity&gt;</ph> object.</source>
          <target state="translated">Validar los tokens de seguridad (<ph id="ph1">&lt;xref:System.IdentityModel.Tokens.SecurityToken&gt;</ph>) del tipo está diseñado para el proceso y el empaquetado las notificaciones contenidas en el token en un <ph id="ph2">&lt;xref:System.Security.Claims.ClaimsIdentity&gt;</ph> objeto.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IdentityModel.Tokens.SecurityTokenHandler">
          <source>Serializing and deserializing security tokens of the type it is designed to process.</source>
          <target state="translated">Serializar y deserializar los tokens de seguridad del tipo está diseñado para procesar.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IdentityModel.Tokens.SecurityTokenHandler">
          <source>Serializing and deserializing key identifier clauses (<ph id="ph1">&lt;xref:System.IdentityModel.Tokens.SecurityKeyIdentifierClause&gt;</ph>) that refer to tokens of the type it is designed to process to and from <ph id="ph2">`&lt;wsse:SecurityTokenReference&gt;`</ph> elements.</source>
          <target state="translated">Serializar y deserializar las cláusulas de identificador de clave (<ph id="ph1">&lt;xref:System.IdentityModel.Tokens.SecurityKeyIdentifierClause&gt;</ph>) que hacen referencia a los tokens del tipo está diseñado para procesar hacia y desde <ph id="ph2">`&lt;wsse:SecurityTokenReference&gt;`</ph> elementos.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IdentityModel.Tokens.SecurityTokenHandler">
          <source>Creating security tokens from a <ph id="ph1">&lt;xref:System.IdentityModel.Tokens.SecurityTokenDescriptor&gt;</ph> object passed by implementations of the <ph id="ph2">&lt;xref:System.IdentityModel.SecurityTokenService&gt;</ph> class.</source>
          <target state="translated">Crear los tokens de seguridad de un <ph id="ph1">&lt;xref:System.IdentityModel.Tokens.SecurityTokenDescriptor&gt;</ph> objeto pasado por implementaciones de la <ph id="ph2">&lt;xref:System.IdentityModel.SecurityTokenService&gt;</ph> clase.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IdentityModel.Tokens.SecurityTokenHandler">
          <source>Creating key identifier clauses from a security token for implementations of the <ph id="ph1">&lt;xref:System.IdentityModel.SecurityTokenService&gt;</ph> class.</source>
          <target state="translated">Creación de cláusulas de identificador de clave de un token de seguridad para las implementaciones de la <ph id="ph1">&lt;xref:System.IdentityModel.SecurityTokenService&gt;</ph> clase.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IdentityModel.Tokens.SecurityTokenHandler">
          <source>Windows Identity Foundation (WIF) ships the following security token handlers out of the box:</source>
          <target state="translated">Windows Identity Foundation (WIF) incluye los siguientes controladores de tokens de seguridad de fábrica:</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IdentityModel.Tokens.SecurityTokenHandler">
          <source>Most of these classes expose additional members that implement functionality that is specific to the processing of the tokens for which the class is designed.</source>
          <target state="translated">La mayoría de estas clases expone a miembros adicionales que implementan funcionalidad que es específica para el procesamiento de los tokens para el que la clase está diseñada.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IdentityModel.Tokens.SecurityTokenHandler">
          <source>In many cases it may be better to derive from one of these classes rather than directly from the <ph id="ph1">&lt;xref:System.IdentityModel.Tokens.SecurityTokenHandler&gt;</ph> class.</source>
          <target state="translated">En muchos casos, es posible que convenga al derivar de una de estas clases en lugar de hacerlo directamente desde el <ph id="ph1">&lt;xref:System.IdentityModel.Tokens.SecurityTokenHandler&gt;</ph> clase.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IdentityModel.Tokens.SecurityTokenHandler">
          <source>A security token handler can be added or removed from  a token handler collection by specifying the <bpt id="p1">[</bpt><ph id="ph1">&amp;lt;</ph>add<ph id="ph2">&amp;gt;</ph><ept id="p1">](~/docs/framework/configure-apps/file-schema/windows-identity-foundation/add.md)</ept>, <bpt id="p2">[</bpt><ph id="ph3">&amp;lt;</ph>remove<ph id="ph4">&amp;gt;</ph><ept id="p2">](~/docs/framework/configure-apps/file-schema/windows-identity-foundation/remove.md)</ept>, or <bpt id="p3">[</bpt><ph id="ph5">&amp;lt;</ph>clear<ph id="ph6">&amp;gt;</ph><ept id="p3">](~/docs/framework/configure-apps/file-schema/windows-identity-foundation/clear.md)</ept> elements under the <bpt id="p4">[</bpt><ph id="ph7">&amp;lt;</ph>securityTokenHandlers<ph id="ph8">&amp;gt;</ph><ept id="p4">](~/docs/framework/configure-apps/file-schema/windows-identity-foundation/securitytokenhandlers.md)</ept> element in a configuration file.</source>
          <target state="translated">Un controlador de token de seguridad se puede agregar o quitar de una colección de controlador de token especificando el <bpt id="p1">[</bpt> <ph id="ph1">&amp;lt;</ph>agregar<ph id="ph2">&amp;gt;</ph><ept id="p1">](~/docs/framework/configure-apps/file-schema/windows-identity-foundation/add.md)</ept>, <bpt id="p2">[</bpt> <ph id="ph3">&amp;lt;</ph>quitar<ph id="ph4">&amp;gt;</ph><ept id="p2">](~/docs/framework/configure-apps/file-schema/windows-identity-foundation/remove.md)</ept>, o <bpt id="p3">[</bpt> <ph id="ph5">&amp;lt;</ph>borrar<ph id="ph6">&amp;gt;</ph> <ept id="p3">](~/docs/framework/configure-apps/file-schema/windows-identity-foundation/clear.md)</ept> elementos en la <bpt id="p4">[</bpt> <ph id="ph7">&amp;lt;</ph>securityTokenHandlers<ph id="ph8">&amp;gt;</ph> <ept id="p4">](~/docs/framework/configure-apps/file-schema/windows-identity-foundation/securitytokenhandlers.md)</ept> elemento en un archivo de configuración.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IdentityModel.Tokens.SecurityTokenHandler">
          <source>The <ph id="ph1">&lt;xref:System.IdentityModel.Tokens.SecurityTokenHandlerConfiguration&gt;</ph> object that contains the configuration settings for the handler collection can be accessed through the <ph id="ph2">&lt;xref:System.IdentityModel.Tokens.SecurityTokenHandler.Configuration%2A&gt;</ph> property and the handler collection that the token handler is a member of can be accessed from the <ph id="ph3">&lt;xref:System.IdentityModel.Tokens.SecurityTokenHandler.ContainingCollection%2A&gt;</ph> property.</source>
          <target state="translated">El <ph id="ph1">&lt;xref:System.IdentityModel.Tokens.SecurityTokenHandlerConfiguration&gt;</ph> objeto que contiene los valores de configuración para la colección de controladores son accesibles a través de la <ph id="ph2">&lt;xref:System.IdentityModel.Tokens.SecurityTokenHandler.Configuration%2A&gt;</ph> propiedad y la colección de controladores que el controlador de token es un miembro de pueden tener acceso desde el <ph id="ph3">&lt;xref:System.IdentityModel.Tokens.SecurityTokenHandler.ContainingCollection%2A&gt;</ph> propiedad.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IdentityModel.Tokens.SecurityTokenHandler">
          <source>You can override the <ph id="ph1">&lt;xref:System.IdentityModel.Tokens.SecurityTokenHandler.LoadCustomConfiguration%2A&gt;</ph> method to process any custom configuration elements that your handler takes.</source>
          <target state="translated">Puede invalidar el <ph id="ph1">&lt;xref:System.IdentityModel.Tokens.SecurityTokenHandler.LoadCustomConfiguration%2A&gt;</ph> método para procesar los elementos de configuración personalizada que toma el controlador.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IdentityModel.Tokens.SecurityTokenHandler">
          <source>The <ph id="ph1">&lt;xref:System.IdentityModel.Tokens.SecurityTokenHandler&gt;</ph> class exposes several other properties and methods.</source>
          <target state="translated">La <ph id="ph1">&lt;xref:System.IdentityModel.Tokens.SecurityTokenHandler&gt;</ph> clase expone varias otras propiedades y métodos.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IdentityModel.Tokens.SecurityTokenHandler">
          <source>Depending on the functionality that you choose to implement, you may override some or all of these members.</source>
          <target state="translated">Dependiendo de la funcionalidad que desee implementar, puede reemplazar algunos o todos estos miembros.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IdentityModel.Tokens.SecurityTokenHandler">
          <source>You must override the <ph id="ph1">&lt;xref:System.IdentityModel.Tokens.SecurityTokenHandler.TokenType%2A&gt;</ph> property and the <ph id="ph2">&lt;xref:System.IdentityModel.Tokens.SecurityTokenHandler.GetTokenTypeIdentifiers%2A&gt;</ph> method to provide the WIF infrastructure with information about the type of security token that your class is designed to process.</source>
          <target state="translated">Es necesario reemplazar el <ph id="ph1">&lt;xref:System.IdentityModel.Tokens.SecurityTokenHandler.TokenType%2A&gt;</ph> propiedad y el <ph id="ph2">&lt;xref:System.IdentityModel.Tokens.SecurityTokenHandler.GetTokenTypeIdentifiers%2A&gt;</ph> método para proporcionar la infraestructura WIF con información sobre el tipo de token de seguridad que la clase está diseñada para procesar.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IdentityModel.Tokens.SecurityTokenHandler">
          <source>Validation, serialization, and deserialization functionality is exposed through properties or methods that indicate whether the handler can perform a specific function combined with the method or methods that implement the functionality.</source>
          <target state="translated">Validación, la serialización y deserialización funcionalidad se expone a través de propiedades o métodos que indican si el controlador puede realizar una función específica junto con el método o métodos que implementan la funcionalidad.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IdentityModel.Tokens.SecurityTokenHandler">
          <source>The following list pairs the properties or methods that indicate functionality with the methods that implement that functionality:</source>
          <target state="translated">En la siguiente lista de pares de las propiedades o métodos que indican la funcionalidad con los métodos que implementan esa funcionalidad:</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IdentityModel.Tokens.SecurityTokenHandler">
          <source>The <ph id="ph1">&lt;xref:System.IdentityModel.Tokens.SecurityTokenHandler.CanValidateToken%2A&gt;</ph> property and  the <ph id="ph2">&lt;xref:System.IdentityModel.Tokens.SecurityTokenHandler.ValidateToken%2A&gt;</ph> method: Validates a token and packages the claims contained in the token into a <ph id="ph3">&lt;xref:System.Security.Claims.ClaimsIdentity&gt;</ph>.</source>
          <target state="translated">El <ph id="ph1">&lt;xref:System.IdentityModel.Tokens.SecurityTokenHandler.CanValidateToken%2A&gt;</ph> propiedad y el <ph id="ph2">&lt;xref:System.IdentityModel.Tokens.SecurityTokenHandler.ValidateToken%2A&gt;</ph> método: valida un token y empaqueta las notificaciones contenidas en el símbolo (token) en un <ph id="ph3">&lt;xref:System.Security.Claims.ClaimsIdentity&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IdentityModel.Tokens.SecurityTokenHandler">
          <source>The <ph id="ph1">&lt;xref:System.IdentityModel.Tokens.SecurityTokenHandler.CanWriteToken%2A&gt;</ph> property and the <ph id="ph2">&lt;xref:System.IdentityModel.Tokens.SecurityTokenHandler.WriteToken%2A&gt;</ph> methods: Token serialization.</source>
          <target state="translated">El <ph id="ph1">&lt;xref:System.IdentityModel.Tokens.SecurityTokenHandler.CanWriteToken%2A&gt;</ph> propiedad y el <ph id="ph2">&lt;xref:System.IdentityModel.Tokens.SecurityTokenHandler.WriteToken%2A&gt;</ph> métodos: símbolo (token) de serialización.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IdentityModel.Tokens.SecurityTokenHandler">
          <source>The <ph id="ph1">&lt;xref:System.IdentityModel.Tokens.SecurityTokenHandler.CanReadToken%2A&gt;</ph> methods and the <ph id="ph2">&lt;xref:System.IdentityModel.Tokens.SecurityTokenHandler.ReadToken%2A&gt;</ph> methods: Token deserialization.</source>
          <target state="translated">El <ph id="ph1">&lt;xref:System.IdentityModel.Tokens.SecurityTokenHandler.CanReadToken%2A&gt;</ph> métodos y <ph id="ph2">&lt;xref:System.IdentityModel.Tokens.SecurityTokenHandler.ReadToken%2A&gt;</ph> métodos: símbolo (token) de deserialización.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IdentityModel.Tokens.SecurityTokenHandler">
          <source>The <ph id="ph1">&lt;xref:System.IdentityModel.Tokens.SecurityTokenHandler.CanReadKeyIdentifierClause%2A&gt;</ph> method and the <ph id="ph2">&lt;xref:System.IdentityModel.Tokens.SecurityTokenHandler.ReadKeyIdentifierClause%2A&gt;</ph> method: Deserializing key identifier clauses.</source>
          <target state="translated">El <ph id="ph1">&lt;xref:System.IdentityModel.Tokens.SecurityTokenHandler.CanReadKeyIdentifierClause%2A&gt;</ph> método y <ph id="ph2">&lt;xref:System.IdentityModel.Tokens.SecurityTokenHandler.ReadKeyIdentifierClause%2A&gt;</ph> método: deserializar las cláusulas de identificador de clave.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IdentityModel.Tokens.SecurityTokenHandler">
          <source>The <ph id="ph1">&lt;xref:System.IdentityModel.Tokens.SecurityTokenHandler.CanWriteKeyIdentifierClause%2A&gt;</ph> method and the <ph id="ph2">&lt;xref:System.IdentityModel.Tokens.SecurityTokenHandler.WriteKeyIdentifierClause%2A&gt;</ph> method: Serializing key identifier clauses.</source>
          <target state="translated">El <ph id="ph1">&lt;xref:System.IdentityModel.Tokens.SecurityTokenHandler.CanWriteKeyIdentifierClause%2A&gt;</ph> método y <ph id="ph2">&lt;xref:System.IdentityModel.Tokens.SecurityTokenHandler.WriteKeyIdentifierClause%2A&gt;</ph> método: serializar las cláusulas de identificador de clave.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IdentityModel.Tokens.SecurityTokenHandler">
          <source>The <ph id="ph1">&lt;xref:System.IdentityModel.Tokens.SecurityTokenHandler.CreateToken%2A&gt;</ph> and the <ph id="ph2">&lt;xref:System.IdentityModel.Tokens.SecurityTokenHandler.CreateSecurityTokenReference%2A&gt;</ph> methods are called from the pipeline in implementations of the <ph id="ph3">&lt;xref:System.IdentityModel.SecurityTokenService&gt;</ph> class.</source>
          <target state="translated">El <ph id="ph1">&lt;xref:System.IdentityModel.Tokens.SecurityTokenHandler.CreateToken%2A&gt;</ph> y <ph id="ph2">&lt;xref:System.IdentityModel.Tokens.SecurityTokenHandler.CreateSecurityTokenReference%2A&gt;</ph> métodos se invocan desde la canalización en las implementaciones de la <ph id="ph3">&lt;xref:System.IdentityModel.SecurityTokenService&gt;</ph> clase.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IdentityModel.Tokens.SecurityTokenHandler">
          <source>The <ph id="ph1">&lt;xref:System.IdentityModel.Tokens.SecurityTokenHandler.DetectReplayedToken%2A&gt;</ph> method is called by the WIF infrastructure to determine whether the specified token has already been received.</source>
          <target state="translated">El <ph id="ph1">&lt;xref:System.IdentityModel.Tokens.SecurityTokenHandler.DetectReplayedToken%2A&gt;</ph> método se llama por la infraestructura WIF para determinar si ya se ha recibido el token especificado.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IdentityModel.Tokens.SecurityTokenHandler">
          <source>By default this method returns <ph id="ph1">`false`</ph>, which indicates that the token has not already been received.</source>
          <target state="translated">De forma predeterminada, este método devuelve <ph id="ph1">`false`</ph>, que indica que el token ya no se ha recibido.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IdentityModel.Tokens.SecurityTokenHandler">
          <source>You can override the method and provide logic to detect replayed tokens.</source>
          <target state="translated">Puede invalidar el método y proporcionar lógica para detectar tokens reproducidos.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IdentityModel.Tokens.SecurityTokenHandler">
          <source>The code examples in all of the <ph id="ph1">&lt;xref:System.IdentityModel.Tokens.SecurityTokenHandler&gt;</ph> topics are taken from the <ph id="ph2">`Custom Token`</ph> sample.</source>
          <target state="translated">Los ejemplos de código en todos los <ph id="ph1">&lt;xref:System.IdentityModel.Tokens.SecurityTokenHandler&gt;</ph> temas se toman de la <ph id="ph2">`Custom Token`</ph> ejemplo.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IdentityModel.Tokens.SecurityTokenHandler">
          <source>This sample provides custom classes that enable processing of Simple Web Tokens (SWT).</source>
          <target state="translated">Este ejemplo proporciona las clases personalizadas que permitan realizar el procesamiento de Simple Web Tokens (SWT).</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IdentityModel.Tokens.SecurityTokenHandler">
          <source>For information about this sample and other samples available for WIF and where to download them, see <bpt id="p1">[</bpt>WIF Code Sample Index<ept id="p1">](~/docs/framework/security/wif-code-sample-index.md)</ept>.</source>
          <target state="translated">Para obtener información acerca de este ejemplo y otros ejemplos disponibles de WIF y la ubicación descargarlos, consulte <bpt id="p1">[</bpt>índice de ejemplo de código WIF<ept id="p1">](~/docs/framework/security/wif-code-sample-index.md)</ept>.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IdentityModel.Tokens.SecurityTokenHandler">
          <source>The following XML shows how to add the SWT token handler to the token handlers collection.</source>
          <target state="translated">El siguiente código XML muestra cómo agregar el controlador de token SWT a la colección de controladores de tokens.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" uid="M:System.IdentityModel.Tokens.SecurityTokenHandler.#ctor">
          <source>Called from constructors in derived classes to initialize the <ph id="ph1">&lt;see cref="T:System.IdentityModel.Tokens.SecurityTokenHandler" /&gt;</ph> class.</source>
          <target state="translated">Se llama desde constructores de clases derivadas para inicializar la clase <ph id="ph1">&lt;see cref="T:System.IdentityModel.Tokens.SecurityTokenHandler" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" uid="M:System.IdentityModel.Tokens.SecurityTokenHandler.CanReadKeyIdentifierClause(System.Xml.XmlReader)">
          <source>An XML reader positioned at the start element.</source>
          <target state="translated">Lector XML situado en el elemento de inicio.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" uid="M:System.IdentityModel.Tokens.SecurityTokenHandler.CanReadKeyIdentifierClause(System.Xml.XmlReader)">
          <source>The reader should not be advanced by this method.</source>
          <target state="translated">Este método no debe avanzar el lector.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" uid="M:System.IdentityModel.Tokens.SecurityTokenHandler.CanReadKeyIdentifierClause(System.Xml.XmlReader)">
          <source>Returns a value that indicates whether the XML element referred to by the specified XML reader is a key identifier clause that can be deserialized by this instance.</source>
          <target state="translated">Devuelve un valor que indica si el elemento XML al que hace referencia el lector XML especificado es una cláusula de identificador de clave que esta instancia puede deserializar.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" uid="M:System.IdentityModel.Tokens.SecurityTokenHandler.CanReadKeyIdentifierClause(System.Xml.XmlReader)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the <ph id="ph2">&lt;see cref="M:System.IdentityModel.Tokens.SecurityTokenHandler.ReadKeyIdentifierClause(System.Xml.XmlReader)" /&gt;</ph> method can read the element; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> si el método <ph id="ph2">&lt;see cref="M:System.IdentityModel.Tokens.SecurityTokenHandler.ReadKeyIdentifierClause(System.Xml.XmlReader)" /&gt;</ph> puede leer el elemento; en caso contrario, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" uid="M:System.IdentityModel.Tokens.SecurityTokenHandler.CanReadKeyIdentifierClause(System.Xml.XmlReader)">
          <source>The default is <ph id="ph1">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">El valor predeterminado es <ph id="ph1">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IdentityModel.Tokens.SecurityTokenHandler.CanReadKeyIdentifierClause(System.Xml.XmlReader)">
          <source>The default implementation returns <ph id="ph1">`false`</ph> to indicate that the key identifier clause cannot be read.</source>
          <target state="translated">La implementación predeterminada devuelve <ph id="ph1">`false`</ph> para indicar que no se puede leer la cláusula de identificador de clave.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IdentityModel.Tokens.SecurityTokenHandler.CanReadKeyIdentifierClause(System.Xml.XmlReader)">
          <source>A derived class checks the element that the reader is referring to in order to determine whether the instance can deserialize a key identifier clause.</source>
          <target state="translated">Una clase derivada, comprueba el elemento que hace referencia el lector a fin de determinar si la instancia puede deserializar una cláusula de identificador de clave.</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IdentityModel.Tokens.SecurityTokenHandler.CanReadKeyIdentifierClause(System.Xml.XmlReader)">
          <source>This is typically accomplished through a call to the <ph id="ph1">&lt;xref:System.Xml.XmlReader.IsStartElement%2A?displayProperty=nameWithType&gt;</ph> method with the appropriate element and namespace strings specified.</source>
          <target state="translated">Esto se consigue normalmente a través de una llamada a la <ph id="ph1">&lt;xref:System.Xml.XmlReader.IsStartElement%2A?displayProperty=nameWithType&gt;</ph> método con las cadenas apropiadas de elemento y espacio de nombres especificado.</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IdentityModel.Tokens.SecurityTokenHandler.CanReadKeyIdentifierClause(System.Xml.XmlReader)">
          <source>If you override <ph id="ph1">&lt;xref:System.IdentityModel.Tokens.SecurityTokenHandler.CanReadKeyIdentifierClause%2A&gt;</ph>, you must also override the <ph id="ph2">&lt;xref:System.IdentityModel.Tokens.SecurityTokenHandler.ReadKeyIdentifierClause%2A&gt;</ph> method to provide the logic to deserialize the key identifier clause.</source>
          <target state="translated">Si invalida <ph id="ph1">&lt;xref:System.IdentityModel.Tokens.SecurityTokenHandler.CanReadKeyIdentifierClause%2A&gt;</ph>, también debe invalidar el <ph id="ph2">&lt;xref:System.IdentityModel.Tokens.SecurityTokenHandler.ReadKeyIdentifierClause%2A&gt;</ph> método para proporcionar la lógica para deserializar la cláusula de identificador de clave.</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" uid="T:System.IdentityModel.Tokens.SecurityTokenHandler">
          <source>Returns a value that indicates whether the specified token can be deserialized as a token of the type processed by this instance.</source>
          <target state="translated">Devuelve un valor que indica si el token especificado se puede deserializar como token del tipo procesado por esta instancia.</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" uid="M:System.IdentityModel.Tokens.SecurityTokenHandler.CanReadToken(System.String)">
          <source>The token string to read.</source>
          <target state="translated">La cadena de token para leer.</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" uid="M:System.IdentityModel.Tokens.SecurityTokenHandler.CanReadToken(System.String)">
          <source>Returns a value that indicates whether the specified string can be deserialized as a token of the type processed by this instance.</source>
          <target state="translated">Devuelve un valor que indica si la cadena especificada se puede deserializar como token del tipo procesado por esta instancia.</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" uid="M:System.IdentityModel.Tokens.SecurityTokenHandler.CanReadToken(System.String)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the <ph id="ph2">&lt;see cref="M:System.IdentityModel.Tokens.SecurityTokenHandler.ReadToken(System.String)" /&gt;</ph> method can read the element; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> si el método <ph id="ph2">&lt;see cref="M:System.IdentityModel.Tokens.SecurityTokenHandler.ReadToken(System.String)" /&gt;</ph> puede leer el elemento; en caso contrario, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" uid="M:System.IdentityModel.Tokens.SecurityTokenHandler.CanReadToken(System.String)">
          <source>The default is <ph id="ph1">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">El valor predeterminado es <ph id="ph1">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IdentityModel.Tokens.SecurityTokenHandler.CanReadToken(System.String)">
          <source>The default implementation always returns <ph id="ph1">`false`</ph>.</source>
          <target state="translated">La implementación predeterminada siempre devuelve <ph id="ph1">`false`</ph>.</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IdentityModel.Tokens.SecurityTokenHandler.CanReadToken(System.String)">
          <source>If you override this method, you must also override the <ph id="ph1">&lt;xref:System.IdentityModel.Tokens.SecurityTokenHandler.ReadToken%2A?displayProperty=nameWithType&gt;</ph> method to provide the logic to deserialize the token.</source>
          <target state="translated">Si invalida este método, también debe invalidar el <ph id="ph1">&lt;xref:System.IdentityModel.Tokens.SecurityTokenHandler.ReadToken%2A?displayProperty=nameWithType&gt;</ph> método para proporcionar la lógica para deserializar el token.</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" uid="M:System.IdentityModel.Tokens.SecurityTokenHandler.CanReadToken(System.Xml.XmlReader)">
          <source>An XML reader positioned at a start element.</source>
          <target state="translated">Lector XML situado en un elemento de inicio.</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" uid="M:System.IdentityModel.Tokens.SecurityTokenHandler.CanReadToken(System.Xml.XmlReader)">
          <source>The reader should not be advanced by this method.</source>
          <target state="translated">Este método no debe avanzar el lector.</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" uid="M:System.IdentityModel.Tokens.SecurityTokenHandler.CanReadToken(System.Xml.XmlReader)">
          <source>Returns a value that indicates whether the XML element referenced by the specified XML reader can be read as a token of the type processed by this instance.</source>
          <target state="translated">Devuelve un valor que indica si el elemento XML al que el lector XML especificado hace referencia se puede leer como token del tipo procesado por esta instancia.</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" uid="M:System.IdentityModel.Tokens.SecurityTokenHandler.CanReadToken(System.Xml.XmlReader)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the <ph id="ph2">&lt;see cref="M:System.IdentityModel.Tokens.SecurityTokenHandler.ReadToken(System.Xml.XmlReader)" /&gt;</ph> method can read the element; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> si el método <ph id="ph2">&lt;see cref="M:System.IdentityModel.Tokens.SecurityTokenHandler.ReadToken(System.Xml.XmlReader)" /&gt;</ph> puede leer el elemento; en caso contrario, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" uid="M:System.IdentityModel.Tokens.SecurityTokenHandler.CanReadToken(System.Xml.XmlReader)">
          <source>The default is <ph id="ph1">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">El valor predeterminado es <ph id="ph1">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IdentityModel.Tokens.SecurityTokenHandler.CanReadToken(System.Xml.XmlReader)">
          <source>The default implementation always returns <ph id="ph1">`false`</ph>.</source>
          <target state="translated">La implementación predeterminada siempre devuelve <ph id="ph1">`false`</ph>.</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IdentityModel.Tokens.SecurityTokenHandler.CanReadToken(System.Xml.XmlReader)">
          <source>A derived class checks the element that the reader is referring to in order to determine whether the instance can deserialize a security token.</source>
          <target state="translated">Una clase derivada, comprueba el elemento que hace referencia el lector a fin de determinar si la instancia puede deserializar un token de seguridad.</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IdentityModel.Tokens.SecurityTokenHandler.CanReadToken(System.Xml.XmlReader)">
          <source>This is typically accomplished through a call to the <ph id="ph1">&lt;xref:System.Xml.XmlReader.IsStartElement%2A&gt;</ph> method with the appropriate element and namespace strings specified.</source>
          <target state="translated">Esto se consigue normalmente a través de una llamada a la <ph id="ph1">&lt;xref:System.Xml.XmlReader.IsStartElement%2A&gt;</ph> método con las cadenas apropiadas de elemento y espacio de nombres especificado.</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IdentityModel.Tokens.SecurityTokenHandler.CanReadToken(System.Xml.XmlReader)">
          <source>If you override <ph id="ph1">&lt;xref:System.IdentityModel.Tokens.SecurityTokenHandler.CanReadKeyIdentifierClause%2A&gt;</ph>, you must also override the <ph id="ph2">&lt;xref:System.IdentityModel.Tokens.SecurityTokenHandler.ReadToken%2A?displayProperty=nameWithType&gt;</ph> method or the <ph id="ph3">&lt;xref:System.IdentityModel.Tokens.SecurityTokenHandler.ReadToken%2A?displayProperty=nameWithType&gt;</ph> method to provide the logic to deserialize the key identifier clause.</source>
          <target state="translated">Si invalida <ph id="ph1">&lt;xref:System.IdentityModel.Tokens.SecurityTokenHandler.CanReadKeyIdentifierClause%2A&gt;</ph>, también debe invalidar el <ph id="ph2">&lt;xref:System.IdentityModel.Tokens.SecurityTokenHandler.ReadToken%2A?displayProperty=nameWithType&gt;</ph> método o la <ph id="ph3">&lt;xref:System.IdentityModel.Tokens.SecurityTokenHandler.ReadToken%2A?displayProperty=nameWithType&gt;</ph> método para proporcionar la lógica para deserializar la cláusula de identificador de clave.</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IdentityModel.Tokens.SecurityTokenHandler.CanReadToken(System.Xml.XmlReader)">
          <source>The following code shows how to override the <ph id="ph1">&lt;xref:System.IdentityModel.Tokens.SecurityTokenHandler.CanReadToken%2A&gt;</ph> method to determine whether a token can be read by a handler.</source>
          <target state="translated">El código siguiente muestra cómo invalidar el <ph id="ph1">&lt;xref:System.IdentityModel.Tokens.SecurityTokenHandler.CanReadToken%2A&gt;</ph> método para determinar si se puede leer un token por un controlador.</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IdentityModel.Tokens.SecurityTokenHandler.CanReadToken(System.Xml.XmlReader)">
          <source>The code is taken from the <ph id="ph1">`Custom Token`</ph> sample.</source>
          <target state="translated">El código se toma de la <ph id="ph1">`Custom Token`</ph> ejemplo.</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IdentityModel.Tokens.SecurityTokenHandler.CanReadToken(System.Xml.XmlReader)">
          <source>This sample provides custom classes that enable processing of Simple Web Tokens (SWT).</source>
          <target state="translated">Este ejemplo proporciona las clases personalizadas que permitan realizar el procesamiento de Simple Web Tokens (SWT).</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IdentityModel.Tokens.SecurityTokenHandler.CanReadToken(System.Xml.XmlReader)">
          <source>For information about this sample and other samples available for WIF and where to download them, see <bpt id="p1">[</bpt>WIF Code Sample Index<ept id="p1">](~/docs/framework/security/wif-code-sample-index.md)</ept>.</source>
          <target state="translated">Para obtener información acerca de este ejemplo y otros ejemplos disponibles de WIF y la ubicación descargarlos, consulte <bpt id="p1">[</bpt>índice de ejemplo de código WIF<ept id="p1">](~/docs/framework/security/wif-code-sample-index.md)</ept>.</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" uid="P:System.IdentityModel.Tokens.SecurityTokenHandler.CanValidateToken">
          <source>Gets a value that indicates whether the handler supports validation of security tokens.</source>
          <target state="translated">Obtiene un valor que indica si el identificador admite la validación de tokens de seguridad.</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IdentityModel.Tokens.SecurityTokenHandler.CanValidateToken">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the class is capable of validating security tokens; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> si la clase es capaz de validar tokens de seguridad; si no, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IdentityModel.Tokens.SecurityTokenHandler.CanValidateToken">
          <source>The default is <ph id="ph1">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">El valor predeterminado es <ph id="ph1">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IdentityModel.Tokens.SecurityTokenHandler.CanValidateToken">
          <source>To implement validation in a derived class, override this property to return <ph id="ph1">`true`</ph> and override the <ph id="ph2">&lt;xref:System.IdentityModel.Tokens.SecurityTokenHandler.ValidateToken%2A&gt;</ph> method to implement the validation logic.</source>
          <target state="translated">Para implementar la validación en una clase derivada, invalide esta propiedad para devolver <ph id="ph1">`true`</ph> e invalide el <ph id="ph2">&lt;xref:System.IdentityModel.Tokens.SecurityTokenHandler.ValidateToken%2A&gt;</ph> método para implementar la lógica de validación.</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IdentityModel.Tokens.SecurityTokenHandler.CanValidateToken">
          <source>The following code shows how to override the <ph id="ph1">&lt;xref:System.IdentityModel.Tokens.SecurityTokenHandler.CanValidateToken%2A&gt;</ph> property to indicate that a custom handler can validate tokens.</source>
          <target state="translated">El código siguiente muestra cómo invalidar el <ph id="ph1">&lt;xref:System.IdentityModel.Tokens.SecurityTokenHandler.CanValidateToken%2A&gt;</ph> propiedad para indicar que un controlador personalizado puede validar los tokens.</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IdentityModel.Tokens.SecurityTokenHandler.CanValidateToken">
          <source>The code is taken from the <ph id="ph1">`Custom Token`</ph> sample.</source>
          <target state="translated">El código se toma de la <ph id="ph1">`Custom Token`</ph> ejemplo.</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IdentityModel.Tokens.SecurityTokenHandler.CanValidateToken">
          <source>This sample provides custom classes that enable processing of Simple Web Tokens (SWT).</source>
          <target state="translated">Este ejemplo proporciona las clases personalizadas que permitan realizar el procesamiento de Simple Web Tokens (SWT).</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IdentityModel.Tokens.SecurityTokenHandler.CanValidateToken">
          <source>For information about this sample and other samples available for WIF and where to download them, see <bpt id="p1">[</bpt>WIF Code Sample Index<ept id="p1">](~/docs/framework/security/wif-code-sample-index.md)</ept>.</source>
          <target state="translated">Para obtener información acerca de este ejemplo y otros ejemplos disponibles de WIF y la ubicación descargarlos, consulte <bpt id="p1">[</bpt>índice de ejemplo de código WIF<ept id="p1">](~/docs/framework/security/wif-code-sample-index.md)</ept>.</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" uid="M:System.IdentityModel.Tokens.SecurityTokenHandler.CanWriteKeyIdentifierClause(System.IdentityModel.Tokens.SecurityKeyIdentifierClause)">
          <source>The key identifier clause to be checked.</source>
          <target state="translated">Cláusula de identificador de clave que se va a activar.</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" uid="M:System.IdentityModel.Tokens.SecurityTokenHandler.CanWriteKeyIdentifierClause(System.IdentityModel.Tokens.SecurityKeyIdentifierClause)">
          <source>Returns a value that indicates whether the specified key identifier clause can be serialized by this instance.</source>
          <target state="translated">Devuelve un valor que indica si la instancia puede serializar la cláusula de identificador de clave especificada.</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" uid="M:System.IdentityModel.Tokens.SecurityTokenHandler.CanWriteKeyIdentifierClause(System.IdentityModel.Tokens.SecurityKeyIdentifierClause)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the key identifier clause can be serialized; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> si se puede serializar la cláusula de identificador clave; de lo contrario, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" uid="M:System.IdentityModel.Tokens.SecurityTokenHandler.CanWriteKeyIdentifierClause(System.IdentityModel.Tokens.SecurityKeyIdentifierClause)">
          <source>The default is <ph id="ph1">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">El valor predeterminado es <ph id="ph1">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IdentityModel.Tokens.SecurityTokenHandler.CanWriteKeyIdentifierClause(System.IdentityModel.Tokens.SecurityKeyIdentifierClause)">
          <source>The default implementation always returns <ph id="ph1">`false`</ph>.</source>
          <target state="translated">La implementación predeterminada siempre devuelve <ph id="ph1">`false`</ph>.</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IdentityModel.Tokens.SecurityTokenHandler.CanWriteKeyIdentifierClause(System.IdentityModel.Tokens.SecurityKeyIdentifierClause)">
          <source>If you override <ph id="ph1">&lt;xref:System.IdentityModel.Tokens.SecurityTokenHandler.CanWriteKeyIdentifierClause%2A&gt;</ph>, you must also override the <ph id="ph2">&lt;xref:System.IdentityModel.Tokens.SecurityTokenHandler.WriteKeyIdentifierClause%2A&gt;</ph> method to provide the logic to serialize the key identifier clause.</source>
          <target state="translated">Si invalida <ph id="ph1">&lt;xref:System.IdentityModel.Tokens.SecurityTokenHandler.CanWriteKeyIdentifierClause%2A&gt;</ph>, también debe invalidar el <ph id="ph2">&lt;xref:System.IdentityModel.Tokens.SecurityTokenHandler.WriteKeyIdentifierClause%2A&gt;</ph> método para proporcionar la lógica para serializar la cláusula de identificador de clave.</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" uid="P:System.IdentityModel.Tokens.SecurityTokenHandler.CanWriteToken">
          <source>Gets a value that indicates whether the handler can serialize security tokens.</source>
          <target state="translated">Obtiene un valor que indica si el identificador puede serializar tokens de seguridad.</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IdentityModel.Tokens.SecurityTokenHandler.CanWriteToken">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the class is capable of serializing tokens; otherwise <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">Es <ph id="ph1">&lt;see langword="true" /&gt;</ph> si la clase es capaz de realizar la serialización de tokens; de lo contrario, es <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IdentityModel.Tokens.SecurityTokenHandler.CanWriteToken">
          <source>The default is <ph id="ph1">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">El valor predeterminado es <ph id="ph1">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IdentityModel.Tokens.SecurityTokenHandler.CanWriteToken">
          <source>To implement serialization in a derived class, override this property to return <ph id="ph1">`true`</ph> and override the <ph id="ph2">&lt;xref:System.IdentityModel.Tokens.SecurityTokenHandler.WriteToken%2A&gt;</ph> methods to implement the serialization logic.</source>
          <target state="translated">Para implementar la serialización en una clase derivada, invalide esta propiedad para devolver <ph id="ph1">`true`</ph> e invalide el <ph id="ph2">&lt;xref:System.IdentityModel.Tokens.SecurityTokenHandler.WriteToken%2A&gt;</ph> métodos para implementar la lógica de serialización.</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IdentityModel.Tokens.SecurityTokenHandler.CanWriteToken">
          <source>The following code shows how to override the <ph id="ph1">&lt;xref:System.IdentityModel.Tokens.SecurityTokenHandler.CanWriteToken%2A&gt;</ph> property to indicate that a custom handler can serialize tokens.</source>
          <target state="translated">El código siguiente muestra cómo invalidar el <ph id="ph1">&lt;xref:System.IdentityModel.Tokens.SecurityTokenHandler.CanWriteToken%2A&gt;</ph> propiedad para indicar que un controlador personalizado puede serializar tokens.</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IdentityModel.Tokens.SecurityTokenHandler.CanWriteToken">
          <source>The code is taken from the <ph id="ph1">`Custom Token`</ph> sample.</source>
          <target state="translated">El código se toma de la <ph id="ph1">`Custom Token`</ph> ejemplo.</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IdentityModel.Tokens.SecurityTokenHandler.CanWriteToken">
          <source>This sample provides custom classes that enable processing of Simple Web Tokens (SWT).</source>
          <target state="translated">Este ejemplo proporciona las clases personalizadas que permitan realizar el procesamiento de Simple Web Tokens (SWT).</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IdentityModel.Tokens.SecurityTokenHandler.CanWriteToken">
          <source>For information about this sample and other samples available for WIF and where to download them, see <bpt id="p1">[</bpt>WIF Code Sample Index<ept id="p1">](~/docs/framework/security/wif-code-sample-index.md)</ept>.</source>
          <target state="translated">Para obtener información acerca de este ejemplo y otros ejemplos disponibles de WIF y la ubicación descargarlos, consulte <bpt id="p1">[</bpt>índice de ejemplo de código WIF<ept id="p1">](~/docs/framework/security/wif-code-sample-index.md)</ept>.</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve" uid="P:System.IdentityModel.Tokens.SecurityTokenHandler.Configuration">
          <source>Gets or sets the <ph id="ph1">&lt;see cref="T:System.IdentityModel.Tokens.SecurityTokenHandlerConfiguration" /&gt;</ph> object that provides configuration for the current instance.</source>
          <target state="translated">Obtiene o establece el objeto <ph id="ph1">&lt;see cref="T:System.IdentityModel.Tokens.SecurityTokenHandlerConfiguration" /&gt;</ph> que proporciona la configuración de la instancia actual.</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IdentityModel.Tokens.SecurityTokenHandler.Configuration">
          <source>The configuration object for the current instance.</source>
          <target state="translated">El objeto de configuración de la instancia actual.</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IdentityModel.Tokens.SecurityTokenHandler.Configuration">
          <source>The <ph id="ph1">&lt;xref:System.IdentityModel.Tokens.SecurityTokenHandler.Configuration%2A&gt;</ph> property is typically set by the configuration infrastructure from the <bpt id="p1">[</bpt><ph id="ph2">&amp;lt;</ph>securityTokenHandlerConfiguration<ph id="ph3">&amp;gt;</ph><ept id="p1">](~/docs/framework/configure-apps/file-schema/windows-identity-foundation/securitytokenhandlerconfiguration.md)</ept> element in the configuration file during application start up.</source>
          <target state="translated">El <ph id="ph1">&lt;xref:System.IdentityModel.Tokens.SecurityTokenHandler.Configuration%2A&gt;</ph> propiedad se establece normalmente por la infraestructura de configuración de la <bpt id="p1">[</bpt> <ph id="ph2">&amp;lt;</ph>securityTokenHandlerConfiguration<ph id="ph3">&amp;gt;</ph> <ept id="p1">](~/docs/framework/configure-apps/file-schema/windows-identity-foundation/securitytokenhandlerconfiguration.md)</ept> elemento en el archivo de configuración durante la aplicación de iniciarse.</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IdentityModel.Tokens.SecurityTokenHandler.Configuration">
          <source>In derived classes, you use the <ph id="ph1">&lt;xref:System.IdentityModel.Tokens.SecurityTokenHandler.Configuration%2A&gt;</ph> property to access configuration settings; for example, the issuer name registry to use in the <ph id="ph2">&lt;xref:System.IdentityModel.Tokens.SecurityTokenHandler.ValidateToken%2A&gt;</ph> method can be accessed from the <ph id="ph3">&lt;xref:System.IdentityModel.Tokens.SecurityTokenHandlerConfiguration.IssuerNameRegistry%2A?displayProperty=nameWithType&gt;</ph> property of the configuration object.</source>
          <target state="translated">En las clases derivadas, use la <ph id="ph1">&lt;xref:System.IdentityModel.Tokens.SecurityTokenHandler.Configuration%2A&gt;</ph> propiedad para acceder a la configuración; por ejemplo, el registro de nombre de emisor para usar en el <ph id="ph2">&lt;xref:System.IdentityModel.Tokens.SecurityTokenHandler.ValidateToken%2A&gt;</ph> método puede tener acceso desde el <ph id="ph3">&lt;xref:System.IdentityModel.Tokens.SecurityTokenHandlerConfiguration.IssuerNameRegistry%2A?displayProperty=nameWithType&gt;</ph> propiedad del objeto de configuración.</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve" uid="P:System.IdentityModel.Tokens.SecurityTokenHandler.ContainingCollection">
          <source>Gets the token handler collection that contains the current instance.</source>
          <target state="translated">Obtiene la colección controladores de token que contiene la instancia actual.</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IdentityModel.Tokens.SecurityTokenHandler.ContainingCollection">
          <source>The token handler collection that contains the current instance.</source>
          <target state="translated">La colección de controladores de token que contiene la instancia actual.</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IdentityModel.Tokens.SecurityTokenHandler.ContainingCollection">
          <source>When the token handler is added to a <ph id="ph1">&lt;xref:System.IdentityModel.Tokens.SecurityTokenHandlerCollection&gt;</ph> instance, this property is automatically set.</source>
          <target state="translated">Cuando se agrega el controlador de token a un <ph id="ph1">&lt;xref:System.IdentityModel.Tokens.SecurityTokenHandlerCollection&gt;</ph> instancia, esta propiedad se establece automáticamente.</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve" uid="M:System.IdentityModel.Tokens.SecurityTokenHandler.CreateSecurityTokenReference(System.IdentityModel.Tokens.SecurityToken,System.Boolean)">
          <source>The token for which the reference is to be created.</source>
          <target state="translated">El token para el que se va a crear la referencia.</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve" uid="M:System.IdentityModel.Tokens.SecurityTokenHandler.CreateSecurityTokenReference(System.IdentityModel.Tokens.SecurityToken,System.Boolean)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if an attached reference should be created; <ph id="ph2">&lt;see langword="false" /&gt;</ph> if an unattached reference should be created.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> si se debe crear una referencia adjunta; <ph id="ph2">&lt;see langword="false" /&gt;</ph> si se debe crear una referencia sin adjuntar.</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve" uid="M:System.IdentityModel.Tokens.SecurityTokenHandler.CreateSecurityTokenReference(System.IdentityModel.Tokens.SecurityToken,System.Boolean)">
          <source>When overridden in a derived class, creates the security token reference for tokens processed by that class.</source>
          <target state="translated">Cuando se reemplaza en una clase derivada, crea la referencia del token de seguridad para tokens procesados por esa clase.</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve" uid="M:System.IdentityModel.Tokens.SecurityTokenHandler.CreateSecurityTokenReference(System.IdentityModel.Tokens.SecurityToken,System.Boolean)">
          <source>This method is typically called by a security token service (STS).</source>
          <target state="translated">Un servicio de token de seguridad (STS) llama normalmente a este método.</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve" uid="M:System.IdentityModel.Tokens.SecurityTokenHandler.CreateSecurityTokenReference(System.IdentityModel.Tokens.SecurityToken,System.Boolean)">
          <source>A key identifier clause that references the specified token.</source>
          <target state="translated">Cláusula de identificador de clave que hace referencia al token especificado.</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IdentityModel.Tokens.SecurityTokenHandler.CreateSecurityTokenReference(System.IdentityModel.Tokens.SecurityToken,System.Boolean)">
          <source>By default this method throws a <ph id="ph1">&lt;xref:System.NotImplementedException&gt;</ph> exception.</source>
          <target state="translated">De forma predeterminada, este método produce una <ph id="ph1">&lt;xref:System.NotImplementedException&gt;</ph> excepción.</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IdentityModel.Tokens.SecurityTokenHandler.CreateSecurityTokenReference(System.IdentityModel.Tokens.SecurityToken,System.Boolean)">
          <source>Derived classes override this method to return a key identifier clause (<ph id="ph1">&lt;xref:System.IdentityModel.Tokens.SecurityKeyIdentifierClause&gt;</ph>) that can be used to create a <ph id="ph2">`&lt;wsse:SecurityTokenReference&gt;`</ph> element for the specified token.</source>
          <target state="translated">Las clases derivadas invalidar este método para devolver una cláusula de identificador de clave (<ph id="ph1">&lt;xref:System.IdentityModel.Tokens.SecurityKeyIdentifierClause&gt;</ph>) que se puede utilizar para crear un <ph id="ph2">`&lt;wsse:SecurityTokenReference&gt;`</ph> (elemento) para el token especificado.</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IdentityModel.Tokens.SecurityTokenHandler.CreateSecurityTokenReference(System.IdentityModel.Tokens.SecurityToken,System.Boolean)">
          <source>Called from implementations of the <ph id="ph1">&lt;xref:System.IdentityModel.SecurityTokenService&gt;</ph> class.</source>
          <target state="translated">Llamar desde las implementaciones de la <ph id="ph1">&lt;xref:System.IdentityModel.SecurityTokenService&gt;</ph> clase.</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IdentityModel.Tokens.SecurityTokenHandler.CreateSecurityTokenReference(System.IdentityModel.Tokens.SecurityToken,System.Boolean)">
          <source>Typically, a <ph id="ph1">&lt;xref:System.IdentityModel.Tokens.SecurityKeyIdentifierClause&gt;</ph> does not need to be used, other than when a custom security token service is created.</source>
          <target state="translated">Normalmente, un <ph id="ph1">&lt;xref:System.IdentityModel.Tokens.SecurityKeyIdentifierClause&gt;</ph> no necesita ser utilizado, excepto cuando se crea un servicio de token de seguridad personalizado.</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IdentityModel.Tokens.SecurityTokenHandler.CreateSecurityTokenReference(System.IdentityModel.Tokens.SecurityToken,System.Boolean)">
          <source>When a security token service returns a security token, the issued security token contains references to attached and unattached security tokens.</source>
          <target state="translated">Cuando un servicio de token de seguridad devuelve un token de seguridad, el token de seguridad emitido contiene las referencias a los tokens de seguridad adjuntas y no adjuntas.</target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IdentityModel.Tokens.SecurityTokenHandler.CreateSecurityTokenReference(System.IdentityModel.Tokens.SecurityToken,System.Boolean)">
          <source>Attached references refer to security tokens that are contained within the security header of a SOAP message and unattached references reference security tokens that are not included within the security header of a SOAP message.</source>
          <target state="translated">Las referencias adjuntas hacen referencia a los tokens de seguridad que están contenidos dentro del encabezado de seguridad de un mensaje SOAP y las referencias no adjuntas hacen referencia a tokens de seguridad que no están incluidos dentro del encabezado de seguridad de un mensaje SOAP.</target>       </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IdentityModel.Tokens.SecurityTokenHandler.CreateSecurityTokenReference(System.IdentityModel.Tokens.SecurityToken,System.Boolean)">
          <source>These references typically affirm the authenticity of the issued security token.</source>
          <target state="translated">Normalmente, estas referencias afirman la autenticidad del token de seguridad emitido.</target>       </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IdentityModel.Tokens.SecurityTokenHandler.CreateSecurityTokenReference(System.IdentityModel.Tokens.SecurityToken,System.Boolean)">
          <source>The following code shows how to override the <ph id="ph1">&lt;xref:System.IdentityModel.Tokens.SecurityTokenHandler.CreateSecurityTokenReference%2A&gt;</ph> method to create a key identifier clause from the specified token.</source>
          <target state="translated">El código siguiente muestra cómo invalidar el <ph id="ph1">&lt;xref:System.IdentityModel.Tokens.SecurityTokenHandler.CreateSecurityTokenReference%2A&gt;</ph> método para crear una cláusula de identificador de clave desde el token especificado.</target>       </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IdentityModel.Tokens.SecurityTokenHandler.CreateSecurityTokenReference(System.IdentityModel.Tokens.SecurityToken,System.Boolean)">
          <source>The code is taken from the <ph id="ph1">`Custom Token`</ph> sample.</source>
          <target state="translated">El código se toma de la <ph id="ph1">`Custom Token`</ph> ejemplo.</target>       </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IdentityModel.Tokens.SecurityTokenHandler.CreateSecurityTokenReference(System.IdentityModel.Tokens.SecurityToken,System.Boolean)">
          <source>This sample provides custom classes that enable processing of Simple Web Tokens (SWT).</source>
          <target state="translated">Este ejemplo proporciona las clases personalizadas que permitan realizar el procesamiento de Simple Web Tokens (SWT).</target>       </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IdentityModel.Tokens.SecurityTokenHandler.CreateSecurityTokenReference(System.IdentityModel.Tokens.SecurityToken,System.Boolean)">
          <source>For information about this sample and other samples available for WIF and where to download them, see <bpt id="p1">[</bpt>WIF Code Sample Index<ept id="p1">](~/docs/framework/security/wif-code-sample-index.md)</ept>.</source>
          <target state="translated">Para obtener información acerca de este ejemplo y otros ejemplos disponibles de WIF y la ubicación descargarlos, consulte <bpt id="p1">[</bpt>índice de ejemplo de código WIF<ept id="p1">](~/docs/framework/security/wif-code-sample-index.md)</ept>.</target>       </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve" uid="M:System.IdentityModel.Tokens.SecurityTokenHandler.CreateToken(System.IdentityModel.Tokens.SecurityTokenDescriptor)">
          <source>The security token descriptor from which the token is to be created.</source>
          <target state="translated">El descriptor de token de seguridad del que se va a crear el token.</target>       </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve" uid="M:System.IdentityModel.Tokens.SecurityTokenHandler.CreateToken(System.IdentityModel.Tokens.SecurityTokenDescriptor)">
          <source>Properties of the token descriptor are set before this method is called.</source>
          <target state="translated">Las propiedades del descriptor de token se establecen antes de llamar a este método.</target>       </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve" uid="M:System.IdentityModel.Tokens.SecurityTokenHandler.CreateToken(System.IdentityModel.Tokens.SecurityTokenDescriptor)">
          <source>When overridden in a derived class, creates a security token using the specified token descriptor.</source>
          <target state="translated">Cuando se reemplaza en una clase derivada, crea un token de seguridad usando el descriptor del token especificado.</target>       </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve" uid="M:System.IdentityModel.Tokens.SecurityTokenHandler.CreateToken(System.IdentityModel.Tokens.SecurityTokenDescriptor)">
          <source>This method is called by a security token service (STS).</source>
          <target state="translated">Un servicio de token de seguridad (STS) llama a este método.</target>       </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve" uid="M:System.IdentityModel.Tokens.SecurityTokenHandler.CreateToken(System.IdentityModel.Tokens.SecurityTokenDescriptor)">
          <source>A security token that matches the properties of the token descriptor.</source>
          <target state="translated">Token de seguridad que coincide con las propiedades del descriptor de token.</target>       </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IdentityModel.Tokens.SecurityTokenHandler.CreateToken(System.IdentityModel.Tokens.SecurityTokenDescriptor)">
          <source>By default this method throws a <ph id="ph1">&lt;xref:System.NotImplementedException&gt;</ph> exception.</source>
          <target state="translated">De forma predeterminada, este método produce una <ph id="ph1">&lt;xref:System.NotImplementedException&gt;</ph> excepción.</target>       </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IdentityModel.Tokens.SecurityTokenHandler.CreateToken(System.IdentityModel.Tokens.SecurityTokenDescriptor)">
          <source>Called from implementations of the <ph id="ph1">&lt;xref:System.IdentityModel.SecurityTokenService&gt;</ph> class.</source>
          <target state="translated">Llamar desde las implementaciones de la <ph id="ph1">&lt;xref:System.IdentityModel.SecurityTokenService&gt;</ph> clase.</target>       </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IdentityModel.Tokens.SecurityTokenHandler.CreateToken(System.IdentityModel.Tokens.SecurityTokenDescriptor)">
          <source>The following code shows how to override the <ph id="ph1">&lt;xref:System.IdentityModel.Tokens.SecurityTokenHandler.CreateToken%2A&gt;</ph> method to create and return a token from a token descriptor.</source>
          <target state="translated">El código siguiente muestra cómo invalidar el <ph id="ph1">&lt;xref:System.IdentityModel.Tokens.SecurityTokenHandler.CreateToken%2A&gt;</ph> método para crear y devolver un símbolo (token) de un descriptor de símbolo (token).</target>       </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IdentityModel.Tokens.SecurityTokenHandler.CreateToken(System.IdentityModel.Tokens.SecurityTokenDescriptor)">
          <source>The code is taken from the <ph id="ph1">`Custom Token`</ph> sample.</source>
          <target state="translated">El código se toma de la <ph id="ph1">`Custom Token`</ph> ejemplo.</target>       </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IdentityModel.Tokens.SecurityTokenHandler.CreateToken(System.IdentityModel.Tokens.SecurityTokenDescriptor)">
          <source>This sample provides custom classes that enable processing of Simple Web Tokens (SWT).</source>
          <target state="translated">Este ejemplo proporciona las clases personalizadas que permitan realizar el procesamiento de Simple Web Tokens (SWT).</target>       </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IdentityModel.Tokens.SecurityTokenHandler.CreateToken(System.IdentityModel.Tokens.SecurityTokenDescriptor)">
          <source>For information about this sample and other samples available for WIF and where to download them, see <bpt id="p1">[</bpt>WIF Code Sample Index<ept id="p1">](~/docs/framework/security/wif-code-sample-index.md)</ept>.</source>
          <target state="translated">Para obtener información acerca de este ejemplo y otros ejemplos disponibles de WIF y la ubicación descargarlos, consulte <bpt id="p1">[</bpt>índice de ejemplo de código WIF<ept id="p1">](~/docs/framework/security/wif-code-sample-index.md)</ept>.</target>       </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve" uid="M:System.IdentityModel.Tokens.SecurityTokenHandler.DetectReplayedToken(System.IdentityModel.Tokens.SecurityToken)">
          <source>The token to check for replay.</source>
          <target state="translated">El token cuya reproducción se va a comprobar.</target>       </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve" uid="M:System.IdentityModel.Tokens.SecurityTokenHandler.DetectReplayedToken(System.IdentityModel.Tokens.SecurityToken)">
          <source>When overridden in a derived class, throws an exception if the specified token is detected as being replayed.</source>
          <target state="translated">Cuando se reemplaza en una clase derivada, produce una excepción si el token especificado se detecta como que se está volviendo a reproducir.</target>       </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IdentityModel.Tokens.SecurityTokenHandler.DetectReplayedToken(System.IdentityModel.Tokens.SecurityToken)">
          <source>The default implementation does nothing.</source>
          <target state="translated">La implementación predeterminada no hace nada.</target>       </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IdentityModel.Tokens.SecurityTokenHandler.DetectReplayedToken(System.IdentityModel.Tokens.SecurityToken)">
          <source>Derived classes should throw a <ph id="ph1">&lt;xref:System.IdentityModel.Tokens.SecurityTokenReplayDetectedException&gt;</ph> if the token has already been used.</source>
          <target state="translated">Las clases derivadas deben producir una <ph id="ph1">&lt;xref:System.IdentityModel.Tokens.SecurityTokenReplayDetectedException&gt;</ph> si ya se ha utilizado el token.</target>       </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IdentityModel.Tokens.SecurityTokenHandler.DetectReplayedToken(System.IdentityModel.Tokens.SecurityToken)">
          <source>Windows Identity Foundation (WIF) provides the <ph id="ph1">&lt;xref:System.IdentityModel.Tokens.TokenReplayCache&gt;</ph> class from which replay caches may be derived and the <bpt id="p1">[</bpt><ph id="ph2">&amp;lt;</ph>tokenReplayCache<ph id="ph3">&amp;gt;</ph><ept id="p1">](~/docs/framework/configure-apps/file-schema/windows-identity-foundation/tokenreplaycache.md)</ept> configuration element, which can be used to configure the replay cache used by token handlers in an application; however, the exact implementation of the <ph id="ph4">&lt;xref:System.IdentityModel.Tokens.SecurityTokenHandler.DetectReplayedToken%2A&gt;</ph> method is up to the designer of the derived class.</source>
          <target state="translated">Windows Identity Foundation (WIF) proporciona el <ph id="ph1">&lt;xref:System.IdentityModel.Tokens.TokenReplayCache&gt;</ph> clase desde qué reproducción se pueden derivar las memorias caché y la <bpt id="p1">[</bpt> <ph id="ph2">&amp;lt;</ph>tokenReplayCache<ph id="ph3">&amp;gt;</ph> <ept id="p1">](~/docs/framework/configure-apps/file-schema/windows-identity-foundation/tokenreplaycache.md)</ept> elemento de configuración, que se puede usar para configurar la reproducir la memoria caché usada por controladores de tokens en una aplicación; Sin embargo, la implementación exacta de la <ph id="ph4">&lt;xref:System.IdentityModel.Tokens.SecurityTokenHandler.DetectReplayedToken%2A&gt;</ph> método es hasta el Diseñador de la clase derivada.</target>       </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve" uid="M:System.IdentityModel.Tokens.SecurityTokenHandler.GetTokenTypeIdentifiers">
          <source>When overridden in a derived class, returns the set of URIs that are used in requests to identify a token of the type processed by the derived class.</source>
          <target state="translated">Cuando se reemplaza en una clase derivada, devuelve el conjunto de identificadores URI que se usan en solicitudes para identificar un token del tipo procesado por la clase derivada.</target>       </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve" uid="M:System.IdentityModel.Tokens.SecurityTokenHandler.GetTokenTypeIdentifiers">
          <source>The set of URIs that identify the token type that this handler supports.</source>
          <target state="translated">El conjunto de URI que identifican el tipo de token que este controlador admite.</target>       </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IdentityModel.Tokens.SecurityTokenHandler.GetTokenTypeIdentifiers">
          <source>The <ph id="ph1">&lt;xref:System.Type&gt;</ph> of the token processed by the current instance is accessed through the <ph id="ph2">&lt;xref:System.IdentityModel.Tokens.SecurityTokenHandler.TokenType%2A&gt;</ph> property.</source>
          <target state="translated">El <ph id="ph1">&lt;xref:System.Type&gt;</ph> del token procesado por la instancia actual se accede a través del <ph id="ph2">&lt;xref:System.IdentityModel.Tokens.SecurityTokenHandler.TokenType%2A&gt;</ph> propiedad.</target>       </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IdentityModel.Tokens.SecurityTokenHandler.GetTokenTypeIdentifiers">
          <source>The <ph id="ph1">&lt;xref:System.IdentityModel.Tokens.SecurityTokenHandler.GetTokenTypeIdentifiers%2A&gt;</ph> method returns the set of acceptable identifiers that can be used in messages to refer to the token type.</source>
          <target state="translated">El <ph id="ph1">&lt;xref:System.IdentityModel.Tokens.SecurityTokenHandler.GetTokenTypeIdentifiers%2A&gt;</ph> método devuelve el conjunto de identificadores aceptables que se puede usar en los mensajes para hacer referencia al tipo de símbolo (token).</target>       </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IdentityModel.Tokens.SecurityTokenHandler.GetTokenTypeIdentifiers">
          <source>For example, the URI value used in the <ph id="ph1">`&lt;wst:TokenType&gt;`</ph> element under the <ph id="ph2">`&lt;wst:RequestSecurityToken&gt;`</ph> element to request a specific kind of token (represented by the <ph id="ph3">&lt;xref:System.IdentityModel.Protocols.WSTrust.WSTrustMessage.TokenType%2A?displayProperty=nameWithType&gt;</ph> property in the object model).</source>
          <target state="translated">Por ejemplo, se usa el valor de URI en el <ph id="ph1">`&lt;wst:TokenType&gt;`</ph> elemento bajo el <ph id="ph2">`&lt;wst:RequestSecurityToken&gt;`</ph> elemento para solicitar un tipo específico de token (representado por la <ph id="ph3">&lt;xref:System.IdentityModel.Protocols.WSTrust.WSTrustMessage.TokenType%2A?displayProperty=nameWithType&gt;</ph> propiedad en el modelo de objetos).</target>       </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IdentityModel.Tokens.SecurityTokenHandler.GetTokenTypeIdentifiers">
          <source>The following code shows how to override the <ph id="ph1">&lt;xref:System.IdentityModel.Tokens.SecurityTokenHandler.GetTokenTypeIdentifiers%2A&gt;</ph> method to return the token type identifiers for a custom token.</source>
          <target state="translated">El código siguiente muestra cómo invalidar el <ph id="ph1">&lt;xref:System.IdentityModel.Tokens.SecurityTokenHandler.GetTokenTypeIdentifiers%2A&gt;</ph> método para devolver los identificadores de tipo de token para un token personalizado.</target>       </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IdentityModel.Tokens.SecurityTokenHandler.GetTokenTypeIdentifiers">
          <source>The code is taken from the <ph id="ph1">`Custom Token`</ph> sample.</source>
          <target state="translated">El código se toma de la <ph id="ph1">`Custom Token`</ph> ejemplo.</target>       </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IdentityModel.Tokens.SecurityTokenHandler.GetTokenTypeIdentifiers">
          <source>This sample provides custom classes that enable processing of Simple Web Tokens (SWT).</source>
          <target state="translated">Este ejemplo proporciona las clases personalizadas que permitan realizar el procesamiento de Simple Web Tokens (SWT).</target>       </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IdentityModel.Tokens.SecurityTokenHandler.GetTokenTypeIdentifiers">
          <source>For information about this sample and other samples available for WIF and where to download them, see <bpt id="p1">[</bpt>WIF Code Sample Index<ept id="p1">](~/docs/framework/security/wif-code-sample-index.md)</ept>.</source>
          <target state="translated">Para obtener información acerca de este ejemplo y otros ejemplos disponibles de WIF y la ubicación descargarlos, consulte <bpt id="p1">[</bpt>índice de ejemplo de código WIF<ept id="p1">](~/docs/framework/security/wif-code-sample-index.md)</ept>.</target>       </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve" uid="M:System.IdentityModel.Tokens.SecurityTokenHandler.LoadCustomConfiguration(System.Xml.XmlNodeList)">
          <source>The configuration XML elements.</source>
          <target state="translated">Elementos XML de configuración.</target>       </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve" uid="M:System.IdentityModel.Tokens.SecurityTokenHandler.LoadCustomConfiguration(System.Xml.XmlNodeList)">
          <source>Each node in the list is of type <ph id="ph1">&lt;see cref="T:System.Xml.XmlElement" /&gt;</ph>.</source>
          <target state="translated">Todos los nodos de la lista son de tipo <ph id="ph1">&lt;see cref="T:System.Xml.XmlElement" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve" uid="M:System.IdentityModel.Tokens.SecurityTokenHandler.LoadCustomConfiguration(System.Xml.XmlNodeList)">
          <source>When overridden in a derived class, loads custom configuration from XML.</source>
          <target state="translated">Cuando se reemplaza en una clase derivada, carga la configuración personalizada de XML.</target>       </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IdentityModel.Tokens.SecurityTokenHandler.LoadCustomConfiguration(System.Xml.XmlNodeList)">
          <source>The <ph id="ph1">&lt;xref:System.IdentityModel.Tokens.SecurityTokenHandler.LoadCustomConfiguration%2A&gt;</ph> method is called by the configuration infrastructure.</source>
          <target state="translated">El <ph id="ph1">&lt;xref:System.IdentityModel.Tokens.SecurityTokenHandler.LoadCustomConfiguration%2A&gt;</ph> método se llama por la infraestructura de configuración.</target>       </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IdentityModel.Tokens.SecurityTokenHandler.LoadCustomConfiguration(System.Xml.XmlNodeList)">
          <source>When this method is called, the <ph id="ph1">`nodelist`</ph> will contain the top-level child elements of the token handler’s <bpt id="p1">[</bpt><ph id="ph2">&amp;lt;</ph>add<ph id="ph3">&amp;gt;</ph><ept id="p1">](~/docs/framework/configure-apps/file-schema/windows-identity-foundation/add.md)</ept> element from the configuration file.</source>
          <target state="translated">Cuando se llama a este método, el <ph id="ph1">`nodelist`</ph> contendrá los elementos secundarios de nivel superior del controlador de token <bpt id="p1">[</bpt> <ph id="ph2">&amp;lt;</ph>agregar<ph id="ph3">&amp;gt;</ph> <ept id="p1">](~/docs/framework/configure-apps/file-schema/windows-identity-foundation/add.md)</ept> elemento desde el archivo de configuración.</target>       </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IdentityModel.Tokens.SecurityTokenHandler.LoadCustomConfiguration(System.Xml.XmlNodeList)">
          <source>Each of these may, in turn, contain attributes or child elements depending on the configuration schema you define for your derived class.</source>
          <target state="translated">Cada uno de estos a su vez, podría contener atributos o elementos secundarios según el esquema de configuración que se definen para la clase derivada.</target>       </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IdentityModel.Tokens.SecurityTokenHandler.LoadCustomConfiguration(System.Xml.XmlNodeList)">
          <source>The default implementation throws a <ph id="ph1">&lt;xref:System.NotImplementedException&gt;</ph>.</source>
          <target state="translated">La implementación predeterminada produce un <ph id="ph1">&lt;xref:System.NotImplementedException&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IdentityModel.Tokens.SecurityTokenHandler.LoadCustomConfiguration(System.Xml.XmlNodeList)">
          <source>Override this method in your derived class to enable initialization of your security token handler from a configuration file.</source>
          <target state="translated">Invalide este método en una clase derivada para habilitar la inicialización de su controlador de token de seguridad de un archivo de configuración.</target>       </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve" uid="M:System.IdentityModel.Tokens.SecurityTokenHandler.ReadKeyIdentifierClause(System.Xml.XmlReader)">
          <source>An XML reader positioned at the start element of the XML to be deserialized into the key identifier clause.</source>
          <target state="translated">Un lector XML colocado en el elemento inicial del XML que se va a deserializar en la cláusula del identificador de clave.</target>       </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve" uid="M:System.IdentityModel.Tokens.SecurityTokenHandler.ReadKeyIdentifierClause(System.Xml.XmlReader)">
          <source>When overridden in a derived class, deserializes the XML referenced by the specified XML reader to a key identifier clause that references a token processed by the derived class.</source>
          <target state="translated">Cuando se reemplaza en una clase derivada, deserializa el código XML al que hace referencia el lector XML especificado en una cláusula de identificador de clave que hace referencia a un token procesado por la clase derivada.</target>       </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve" uid="M:System.IdentityModel.Tokens.SecurityTokenHandler.ReadKeyIdentifierClause(System.Xml.XmlReader)">
          <source>The key identifier clause that was deserialized from the XML.</source>
          <target state="translated">Cláusula de identificador de clave que se deserializó de XML.</target>       </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IdentityModel.Tokens.SecurityTokenHandler.ReadKeyIdentifierClause(System.Xml.XmlReader)">
          <source>By default this method throws a <ph id="ph1">&lt;xref:System.NotImplementedException&gt;</ph> exception.</source>
          <target state="translated">De forma predeterminada, este método produce una <ph id="ph1">&lt;xref:System.NotImplementedException&gt;</ph> excepción.</target>       </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IdentityModel.Tokens.SecurityTokenHandler.ReadKeyIdentifierClause(System.Xml.XmlReader)">
          <source>Override this method to provide the logic to deserialize a key identifier clause from XML.</source>
          <target state="translated">Invalide este método para proporcionar la lógica para deserializar una cláusula de identificador de clave de XML.</target>       </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IdentityModel.Tokens.SecurityTokenHandler.ReadKeyIdentifierClause(System.Xml.XmlReader)">
          <source>If you override this method, you should also override the <ph id="ph1">&lt;xref:System.IdentityModel.Tokens.SecurityTokenHandler.CanReadKeyIdentifierClause%2A?displayProperty=nameWithType&gt;</ph> method.</source>
          <target state="translated">Si invalida este método, también debe invalidar el <ph id="ph1">&lt;xref:System.IdentityModel.Tokens.SecurityTokenHandler.CanReadKeyIdentifierClause%2A?displayProperty=nameWithType&gt;</ph> método.</target>       </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve" uid="T:System.IdentityModel.Tokens.SecurityTokenHandler">
          <source>When overridden in a derived class, deserializes the specified XML to a token of the type processed by the derived class.</source>
          <target state="translated">Cuando se reemplaza en una clase derivada, deserializa el XLM especificado a un token del tipo procesado por la clase derivada.</target>       </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve" uid="M:System.IdentityModel.Tokens.SecurityTokenHandler.ReadToken(System.String)">
          <source>The string to be deserialized.</source>
          <target state="translated">Cadena que se va a deserializar.</target>       </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve" uid="M:System.IdentityModel.Tokens.SecurityTokenHandler.ReadToken(System.String)">
          <source>When overridden in a derived class, deserializes the specified string to a token of the type processed by the derived class.</source>
          <target state="translated">Cuando se reemplaza en una clase derivada, deserializa la cadena especificada a un token del tipo procesado por la clase derivada.</target>       </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve" uid="M:System.IdentityModel.Tokens.SecurityTokenHandler.ReadToken(System.String)">
          <source>The security token that was deserialized from the specified string.</source>
          <target state="translated">El token de seguridad que se ha deserializado desde la cadena especificada.</target>       </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IdentityModel.Tokens.SecurityTokenHandler.ReadToken(System.String)">
          <source>Calling this method with untrusted data is a security risk.</source>
          <target state="translated">Llamar a este método con datos no es de confianza es un riesgo de seguridad.</target>       </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IdentityModel.Tokens.SecurityTokenHandler.ReadToken(System.String)">
          <source>Call this method only with trusted data.</source>
          <target state="translated">Llamar a este método solo con datos de confianza.</target>       </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IdentityModel.Tokens.SecurityTokenHandler.ReadToken(System.String)">
          <source>For more information, see <bpt id="p1">[</bpt>Data Validation<ept id="p1">](https://www.owasp.org/index.php/Data_Validation)</ept>.</source>
          <target state="translated">Para obtener más información, consulte <bpt id="p1">[</bpt>validación de datos<ept id="p1">](https://www.owasp.org/index.php/Data_Validation)</ept>.</target>       </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IdentityModel.Tokens.SecurityTokenHandler.ReadToken(System.String)">
          <source>By default this method throws a <ph id="ph1">&lt;xref:System.NotImplementedException&gt;</ph> exception.</source>
          <target state="translated">De forma predeterminada, este método produce una <ph id="ph1">&lt;xref:System.NotImplementedException&gt;</ph> excepción.</target>       </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IdentityModel.Tokens.SecurityTokenHandler.ReadToken(System.String)">
          <source>Override this method to provide functionality that can deserialize a security token from a string.</source>
          <target state="translated">Invalide este método para proporcionar la funcionalidad que puede deserializar un token de seguridad de una cadena.</target>       </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IdentityModel.Tokens.SecurityTokenHandler.ReadToken(System.String)">
          <source>If you override, this method, you should also override the <ph id="ph1">&lt;xref:System.IdentityModel.Tokens.SecurityTokenHandler.CanReadToken%2A?displayProperty=nameWithType&gt;</ph> method.</source>
          <target state="translated">Si se reemplaza, este método, también debe invalidar el <ph id="ph1">&lt;xref:System.IdentityModel.Tokens.SecurityTokenHandler.CanReadToken%2A?displayProperty=nameWithType&gt;</ph> método.</target>       </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve" uid="M:System.IdentityModel.Tokens.SecurityTokenHandler.ReadToken(System.Xml.XmlReader)">
          <source>An XML reader positioned at the start element of the token.</source>
          <target state="translated">Lector XML situado en el elemento de inicio del token.</target>       </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve" uid="M:System.IdentityModel.Tokens.SecurityTokenHandler.ReadToken(System.Xml.XmlReader)">
          <source>When overridden in a derived class, deserializes the XML referenced by the specified XML reader to a token of the type processed by the derived class.</source>
          <target state="translated">Cuando se reemplaza en una clase derivada, deserializa el código XML al que hace referencia el lector XML a un token del tipo procesado por la clase derivada.</target>       </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve" uid="M:System.IdentityModel.Tokens.SecurityTokenHandler.ReadToken(System.Xml.XmlReader)">
          <source>The security token that was deserialized from the XML.</source>
          <target state="translated">El token de seguridad que se ha deserializado desde XML.</target>       </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IdentityModel.Tokens.SecurityTokenHandler.ReadToken(System.Xml.XmlReader)">
          <source>Calling this method with untrusted data is a security risk.</source>
          <target state="translated">Llamar a este método con datos no es de confianza es un riesgo de seguridad.</target>       </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IdentityModel.Tokens.SecurityTokenHandler.ReadToken(System.Xml.XmlReader)">
          <source>Call this method only with trusted data.</source>
          <target state="translated">Llamar a este método solo con datos de confianza.</target>       </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IdentityModel.Tokens.SecurityTokenHandler.ReadToken(System.Xml.XmlReader)">
          <source>For more information, see <bpt id="p1">[</bpt>Data Validation<ept id="p1">](https://www.owasp.org/index.php/Data_Validation)</ept>.</source>
          <target state="translated">Para obtener más información, consulte <bpt id="p1">[</bpt>validación de datos<ept id="p1">](https://www.owasp.org/index.php/Data_Validation)</ept>.</target>       </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IdentityModel.Tokens.SecurityTokenHandler.ReadToken(System.Xml.XmlReader)">
          <source>By default this method throws a <ph id="ph1">&lt;xref:System.NotImplementedException&gt;</ph> exception.</source>
          <target state="translated">De forma predeterminada, este método produce una <ph id="ph1">&lt;xref:System.NotImplementedException&gt;</ph> excepción.</target>       </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IdentityModel.Tokens.SecurityTokenHandler.ReadToken(System.Xml.XmlReader)">
          <source>Override this method to provide the logic to deserialize a security token from XML.</source>
          <target state="translated">Invalide este método para proporcionar la lógica para deserializar un token de seguridad de XML.</target>       </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IdentityModel.Tokens.SecurityTokenHandler.ReadToken(System.Xml.XmlReader)">
          <source>If you override this method, you should also override the <ph id="ph1">&lt;xref:System.IdentityModel.Tokens.SecurityTokenHandler.CanReadToken%2A?displayProperty=nameWithType&gt;</ph> method.</source>
          <target state="translated">Si invalida este método, también debe invalidar el <ph id="ph1">&lt;xref:System.IdentityModel.Tokens.SecurityTokenHandler.CanReadToken%2A?displayProperty=nameWithType&gt;</ph> método.</target>       </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IdentityModel.Tokens.SecurityTokenHandler.ReadToken(System.Xml.XmlReader)">
          <source>Typically, in derived classes, if the method cannot deserialize the token from the referenced XML, it throws an <ph id="ph1">&lt;xref:System.Xml.XmlException&gt;</ph>.</source>
          <target state="translated">Normalmente, en las clases derivadas, si el método no puede deserializar el token de la que se hace referencia XML, produce una <ph id="ph1">&lt;xref:System.Xml.XmlException&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IdentityModel.Tokens.SecurityTokenHandler.ReadToken(System.Xml.XmlReader)">
          <source>The following code shows how to override the <ph id="ph1">&lt;xref:System.IdentityModel.Tokens.SecurityTokenHandler.ReadToken%2A&gt;</ph> method to read a custom token from the specified XML reader.</source>
          <target state="translated">El código siguiente muestra cómo invalidar el <ph id="ph1">&lt;xref:System.IdentityModel.Tokens.SecurityTokenHandler.ReadToken%2A&gt;</ph> método para leer un token personalizado desde el lector XML especificado.</target>       </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IdentityModel.Tokens.SecurityTokenHandler.ReadToken(System.Xml.XmlReader)">
          <source>The code is taken from the <ph id="ph1">`Custom Token`</ph> sample.</source>
          <target state="translated">El código se toma de la <ph id="ph1">`Custom Token`</ph> ejemplo.</target>       </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IdentityModel.Tokens.SecurityTokenHandler.ReadToken(System.Xml.XmlReader)">
          <source>This sample provides custom classes that enable processing of Simple Web Tokens (SWT).</source>
          <target state="translated">Este ejemplo proporciona las clases personalizadas que permitan realizar el procesamiento de Simple Web Tokens (SWT).</target>       </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IdentityModel.Tokens.SecurityTokenHandler.ReadToken(System.Xml.XmlReader)">
          <source>For information about this sample and other samples available for WIF and where to download them, see <bpt id="p1">[</bpt>WIF Code Sample Index<ept id="p1">](~/docs/framework/security/wif-code-sample-index.md)</ept>.</source>
          <target state="translated">Para obtener información acerca de este ejemplo y otros ejemplos disponibles de WIF y la ubicación descargarlos, consulte <bpt id="p1">[</bpt>índice de ejemplo de código WIF<ept id="p1">](~/docs/framework/security/wif-code-sample-index.md)</ept>.</target>       </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve" uid="M:System.IdentityModel.Tokens.SecurityTokenHandler.ReadToken(System.Xml.XmlReader,System.IdentityModel.Selectors.SecurityTokenResolver)">
          <source>An XML reader positioned at the start element of the token.</source>
          <target state="translated">Lector XML situado en el elemento de inicio del token.</target>       </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve" uid="M:System.IdentityModel.Tokens.SecurityTokenHandler.ReadToken(System.Xml.XmlReader,System.IdentityModel.Selectors.SecurityTokenResolver)">
          <source>A token resolver that contains out-of-band and cached tokens.</source>
          <target state="translated">Una resolución de tokens que contiene los tokens fuera de banda y almacenados en memoria caché.</target>       </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve" uid="M:System.IdentityModel.Tokens.SecurityTokenHandler.ReadToken(System.Xml.XmlReader,System.IdentityModel.Selectors.SecurityTokenResolver)">
          <source>When overridden in a derived class, deserializes the XML referenced by the specified XML reader to a token of the type processed by the derived class by using the specified token resolver.</source>
          <target state="translated">Cuando se reemplaza en una clase derivada, deserializa el código XML al que hace referencia el lector XML especificado en token del tipo procesado por la clase derivada mediante el solucionador de token especificado.</target>       </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve" uid="M:System.IdentityModel.Tokens.SecurityTokenHandler.ReadToken(System.Xml.XmlReader,System.IdentityModel.Selectors.SecurityTokenResolver)">
          <source>The security token that was deserialized from the XML.</source>
          <target state="translated">El token de seguridad que se ha deserializado desde XML.</target>       </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IdentityModel.Tokens.SecurityTokenHandler.ReadToken(System.Xml.XmlReader,System.IdentityModel.Selectors.SecurityTokenResolver)">
          <source>Calling this method with untrusted data is a security risk.</source>
          <target state="translated">Llamar a este método con datos no es de confianza es un riesgo de seguridad.</target>       </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IdentityModel.Tokens.SecurityTokenHandler.ReadToken(System.Xml.XmlReader,System.IdentityModel.Selectors.SecurityTokenResolver)">
          <source>Call this method only with trusted data.</source>
          <target state="translated">Llamar a este método solo con datos de confianza.</target>       </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IdentityModel.Tokens.SecurityTokenHandler.ReadToken(System.Xml.XmlReader,System.IdentityModel.Selectors.SecurityTokenResolver)">
          <source>For more information, see <bpt id="p1">[</bpt>Data Validation<ept id="p1">](https://www.owasp.org/index.php/Data_Validation)</ept>.</source>
          <target state="translated">Para obtener más información, consulte <bpt id="p1">[</bpt>validación de datos<ept id="p1">](https://www.owasp.org/index.php/Data_Validation)</ept>.</target>       </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IdentityModel.Tokens.SecurityTokenHandler.ReadToken(System.Xml.XmlReader,System.IdentityModel.Selectors.SecurityTokenResolver)">
          <source>The default implementation ignores the <ph id="ph1">`tokenResolver`</ph> parameter and delegates the call to the <ph id="ph2">&lt;xref:System.IdentityModel.Tokens.SecurityTokenHandler.ReadToken%2A?displayProperty=nameWithType&gt;</ph> method.</source>
          <target state="translated">La implementación predeterminada omite la <ph id="ph1">`tokenResolver`</ph> parámetro y delega la llamada a la <ph id="ph2">&lt;xref:System.IdentityModel.Tokens.SecurityTokenHandler.ReadToken%2A?displayProperty=nameWithType&gt;</ph> método.</target>       </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IdentityModel.Tokens.SecurityTokenHandler.ReadToken(System.Xml.XmlReader,System.IdentityModel.Selectors.SecurityTokenResolver)">
          <source>Override this method to provide the logic to deserialize a security token from XML.</source>
          <target state="translated">Invalide este método para proporcionar la lógica para deserializar un token de seguridad de XML.</target>       </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IdentityModel.Tokens.SecurityTokenHandler.ReadToken(System.Xml.XmlReader,System.IdentityModel.Selectors.SecurityTokenResolver)">
          <source>If you override this method, you should also override the <ph id="ph1">&lt;xref:System.IdentityModel.Tokens.SecurityTokenHandler.CanReadToken%2A?displayProperty=nameWithType&gt;</ph> method.</source>
          <target state="translated">Si invalida este método, también debe invalidar el <ph id="ph1">&lt;xref:System.IdentityModel.Tokens.SecurityTokenHandler.CanReadToken%2A?displayProperty=nameWithType&gt;</ph> método.</target>       </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IdentityModel.Tokens.SecurityTokenHandler.ReadToken(System.Xml.XmlReader,System.IdentityModel.Selectors.SecurityTokenResolver)">
          <source>Typically, in derived classes, if the method cannot deserialize the token from the referenced XML, it throws an <ph id="ph1">&lt;xref:System.Xml.XmlException&gt;</ph>.</source>
          <target state="translated">Normalmente, en las clases derivadas, si el método no puede deserializar el token de la que se hace referencia XML, produce una <ph id="ph1">&lt;xref:System.Xml.XmlException&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve" uid="P:System.IdentityModel.Tokens.SecurityTokenHandler.TokenType">
          <source>When overridden in a derived class, gets the type of the security token that is processed by this instance.</source>
          <target state="translated">Cuando se invalida en una clase derivada, obtiene el tipo del token de seguridad que procesa esta instancia.</target>       </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IdentityModel.Tokens.SecurityTokenHandler.TokenType">
          <source>The type of the security token that is processed by this instance.</source>
          <target state="translated">El tipo de token de seguridad procesados por esta instancia.</target>       </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IdentityModel.Tokens.SecurityTokenHandler.TokenType">
          <source>You must override this property in derived classes and return the <ph id="ph1">&lt;xref:System.Type&gt;</ph> of the security token (<ph id="ph2">&lt;xref:System.IdentityModel.Tokens.SecurityToken&gt;</ph>) that is processed by the derived class.</source>
          <target state="translated">Debe invalidar esta propiedad en las clases derivadas y devolver el <ph id="ph1">&lt;xref:System.Type&gt;</ph> del token de seguridad (<ph id="ph2">&lt;xref:System.IdentityModel.Tokens.SecurityToken&gt;</ph>) que es procesado por la clase derivada.</target>       </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IdentityModel.Tokens.SecurityTokenHandler.TokenType">
          <source>The following code shows how to override the <ph id="ph1">&lt;xref:System.IdentityModel.Tokens.SecurityTokenHandler.TokenType%2A&gt;</ph> property to return the <ph id="ph2">&lt;xref:System.Type&gt;</ph> of the security tokens that are processed by a custom handler.</source>
          <target state="translated">El código siguiente muestra cómo invalidar el <ph id="ph1">&lt;xref:System.IdentityModel.Tokens.SecurityTokenHandler.TokenType%2A&gt;</ph> propiedad para devolver el <ph id="ph2">&lt;xref:System.Type&gt;</ph> de los tokens de seguridad que se procesan mediante un controlador personalizado.</target>       </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IdentityModel.Tokens.SecurityTokenHandler.TokenType">
          <source>The code is taken from the <ph id="ph1">`Custom Token`</ph> sample.</source>
          <target state="translated">El código se toma de la <ph id="ph1">`Custom Token`</ph> ejemplo.</target>       </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IdentityModel.Tokens.SecurityTokenHandler.TokenType">
          <source>This sample provides custom classes that enable processing of Simple Web Tokens (SWT).</source>
          <target state="translated">Este ejemplo proporciona las clases personalizadas que permitan realizar el procesamiento de Simple Web Tokens (SWT).</target>       </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IdentityModel.Tokens.SecurityTokenHandler.TokenType">
          <source>For information about this sample and other samples available for WIF and where to download them, see <bpt id="p1">[</bpt>WIF Code Sample Index<ept id="p1">](~/docs/framework/security/wif-code-sample-index.md)</ept>.</source>
          <target state="translated">Para obtener información acerca de este ejemplo y otros ejemplos disponibles de WIF y la ubicación descargarlos, consulte <bpt id="p1">[</bpt>índice de ejemplo de código WIF<ept id="p1">](~/docs/framework/security/wif-code-sample-index.md)</ept>.</target>       </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve" uid="M:System.IdentityModel.Tokens.SecurityTokenHandler.TraceTokenValidationFailure(System.IdentityModel.Tokens.SecurityToken,System.String)">
          <source>The security token that is being validated.</source>
          <target state="translated">El token de seguridad que se está validando.</target>       </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve" uid="M:System.IdentityModel.Tokens.SecurityTokenHandler.TraceTokenValidationFailure(System.IdentityModel.Tokens.SecurityToken,System.String)">
          <source>The message to write to the trace.</source>
          <target state="translated">Mensaje que se va a escribir en el seguimiento.</target>       </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve" uid="M:System.IdentityModel.Tokens.SecurityTokenHandler.TraceTokenValidationFailure(System.IdentityModel.Tokens.SecurityToken,System.String)">
          <source>Traces the failure event during the validation of security tokens when tracing is enabled.</source>
          <target state="translated">Hace un seguimiento del evento de error durante la validación de tokens de seguridad cuando está habilitado el seguimiento.</target>       </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IdentityModel.Tokens.SecurityTokenHandler.TraceTokenValidationFailure(System.IdentityModel.Tokens.SecurityToken,System.String)">
          <source>This method should be called from the <ph id="ph1">&lt;xref:System.IdentityModel.Tokens.SecurityTokenHandler.ValidateToken%2A&gt;</ph> method when validation of the token fails.</source>
          <target state="translated">Este método debe llamarse desde el <ph id="ph1">&lt;xref:System.IdentityModel.Tokens.SecurityTokenHandler.ValidateToken%2A&gt;</ph> método cuando se produce un error en la validación del token.</target>       </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve" uid="M:System.IdentityModel.Tokens.SecurityTokenHandler.TraceTokenValidationSuccess(System.IdentityModel.Tokens.SecurityToken)">
          <source>The token that was validated.</source>
          <target state="translated">El token que se validó.</target>       </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve" uid="M:System.IdentityModel.Tokens.SecurityTokenHandler.TraceTokenValidationSuccess(System.IdentityModel.Tokens.SecurityToken)">
          <source>Traces the successful validation of security tokens event when tracing is enabled.</source>
          <target state="translated">Hace un seguimiento de la validación correcta del evento de tokens de seguridad cuando está habilitado el seguimiento.</target>       </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IdentityModel.Tokens.SecurityTokenHandler.TraceTokenValidationSuccess(System.IdentityModel.Tokens.SecurityToken)">
          <source>This method should be called from the <ph id="ph1">&lt;xref:System.IdentityModel.Tokens.SecurityTokenHandler.ValidateToken%2A&gt;</ph> method after the token has been successfully validated.</source>
          <target state="translated">Este método debe llamarse desde el <ph id="ph1">&lt;xref:System.IdentityModel.Tokens.SecurityTokenHandler.ValidateToken%2A&gt;</ph> método después de que el token se ha validado correctamente.</target>       </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve" uid="M:System.IdentityModel.Tokens.SecurityTokenHandler.ValidateToken(System.IdentityModel.Tokens.SecurityToken)">
          <source>The token to validate.</source>
          <target state="translated">Token que se va a validar.</target>       </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve" uid="M:System.IdentityModel.Tokens.SecurityTokenHandler.ValidateToken(System.IdentityModel.Tokens.SecurityToken)">
          <source>When overridden in a derived class, validates the specified security token.</source>
          <target state="translated">Cuando se reemplaza en una clase derivada, valida el token de seguridad especificado.</target>       </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve" uid="M:System.IdentityModel.Tokens.SecurityTokenHandler.ValidateToken(System.IdentityModel.Tokens.SecurityToken)">
          <source>The token must be of the type processed by the derived class.</source>
          <target state="translated">El token debe ser del tipo procesado por la clase derivada.</target>       </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve" uid="M:System.IdentityModel.Tokens.SecurityTokenHandler.ValidateToken(System.IdentityModel.Tokens.SecurityToken)">
          <source>The identities contained in the token.</source>
          <target state="translated">Identidades contenidas en el token.</target>       </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IdentityModel.Tokens.SecurityTokenHandler.ValidateToken(System.IdentityModel.Tokens.SecurityToken)">
          <source>By default this method throws a <ph id="ph1">&lt;xref:System.NotImplementedException&gt;</ph> exception.</source>
          <target state="translated">De forma predeterminada, este método produce una <ph id="ph1">&lt;xref:System.NotImplementedException&gt;</ph> excepción.</target>       </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IdentityModel.Tokens.SecurityTokenHandler.ValidateToken(System.IdentityModel.Tokens.SecurityToken)">
          <source>The <ph id="ph1">&lt;xref:System.IdentityModel.Tokens.SecurityTokenHandler.ValidateToken%2A&gt;</ph> method is called by the infrastructure to validate and extract the claims from the deserialized security token.</source>
          <target state="translated">El <ph id="ph1">&lt;xref:System.IdentityModel.Tokens.SecurityTokenHandler.ValidateToken%2A&gt;</ph> método se llama por la infraestructura para validar y extraer las notificaciones desde el token de seguridad deserializado.</target>       </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IdentityModel.Tokens.SecurityTokenHandler.ValidateToken(System.IdentityModel.Tokens.SecurityToken)">
          <source>These claims are returned in the collection of <ph id="ph1">&lt;xref:System.Security.Claims.ClaimsIdentity&gt;</ph> objects returned by the method.</source>
          <target state="translated">Estas notificaciones se devuelven en la colección de <ph id="ph1">&lt;xref:System.Security.Claims.ClaimsIdentity&gt;</ph> objetos devueltos por el método.</target>       </trans-unit>
        <trans-unit id="303" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IdentityModel.Tokens.SecurityTokenHandler.ValidateToken(System.IdentityModel.Tokens.SecurityToken)">
          <source>In the typical case, this collection will contain a single identity.</source>
          <target state="translated">En el caso típico, esta colección contendrá una identidad única.</target>       </trans-unit>
        <trans-unit id="304" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IdentityModel.Tokens.SecurityTokenHandler.ValidateToken(System.IdentityModel.Tokens.SecurityToken)">
          <source>In derived classes, validation typically includes validating the intended audience specified in the token against the audience URIs specified in the <ph id="ph1">&lt;xref:System.IdentityModel.Tokens.SecurityTokenHandlerConfiguration.AudienceRestriction%2A?displayProperty=nameWithType&gt;</ph> property of the token handler configuration object specified on the <ph id="ph2">&lt;xref:System.IdentityModel.Tokens.SecurityTokenHandler.Configuration%2A&gt;</ph> property.</source>
          <target state="translated">En las clases derivadas, validación normalmente incluye la validación de los destinatarios especificados en el token con la audiencia URI especificados en la <ph id="ph1">&lt;xref:System.IdentityModel.Tokens.SecurityTokenHandlerConfiguration.AudienceRestriction%2A?displayProperty=nameWithType&gt;</ph> propiedad del objeto de configuración de controlador de token especificado en el <ph id="ph2">&lt;xref:System.IdentityModel.Tokens.SecurityTokenHandler.Configuration%2A&gt;</ph> propiedad.</target>       </trans-unit>
        <trans-unit id="305" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IdentityModel.Tokens.SecurityTokenHandler.ValidateToken(System.IdentityModel.Tokens.SecurityToken)">
          <source>These URIs are typically set in the configuration file under the <bpt id="p1">[</bpt><ph id="ph1">&amp;lt;</ph>audienceUris<ph id="ph2">&amp;gt;</ph><ept id="p1">](~/docs/framework/configure-apps/file-schema/windows-identity-foundation/audienceuris.md)</ept> element.</source>
          <target state="translated">Estos URI normalmente se establecen en el archivo de configuración en el <bpt id="p1">[</bpt> <ph id="ph1">&amp;lt;</ph>audienceUris<ph id="ph2">&amp;gt;</ph> <ept id="p1">](~/docs/framework/configure-apps/file-schema/windows-identity-foundation/audienceuris.md)</ept> elemento.</target>       </trans-unit>
        <trans-unit id="306" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IdentityModel.Tokens.SecurityTokenHandler.ValidateToken(System.IdentityModel.Tokens.SecurityToken)">
          <source>If the audience cannot be validated, an <ph id="ph1">&lt;xref:System.IdentityModel.Tokens.AudienceUriValidationFailedException&gt;</ph> exception should be thrown.</source>
          <target state="translated">Si no se puede validar la audiencia, un <ph id="ph1">&lt;xref:System.IdentityModel.Tokens.AudienceUriValidationFailedException&gt;</ph> se lanzará la excepción.</target>       </trans-unit>
        <trans-unit id="307" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IdentityModel.Tokens.SecurityTokenHandler.ValidateToken(System.IdentityModel.Tokens.SecurityToken)">
          <source>When processing the token, the issuer is typically validated by passing the issuer token to one of the <ph id="ph1">&lt;xref:System.IdentityModel.Tokens.IssuerNameRegistry.GetIssuerName%2A&gt;</ph> methods on the <ph id="ph2">&lt;xref:System.IdentityModel.Tokens.IssuerNameRegistry&gt;</ph> object that is configured for the handler through the <ph id="ph3">&lt;xref:System.IdentityModel.Tokens.SecurityTokenHandler.Configuration%2A&gt;</ph> property.</source>
          <target state="translated">Cuando se procesa el token, el emisor normalmente se valida si se pasa el token del emisor en uno de los <ph id="ph1">&lt;xref:System.IdentityModel.Tokens.IssuerNameRegistry.GetIssuerName%2A&gt;</ph> métodos en el <ph id="ph2">&lt;xref:System.IdentityModel.Tokens.IssuerNameRegistry&gt;</ph> objeto que está configurado para el controlador a través de la <ph id="ph3">&lt;xref:System.IdentityModel.Tokens.SecurityTokenHandler.Configuration%2A&gt;</ph> propiedad.</target>       </trans-unit>
        <trans-unit id="308" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IdentityModel.Tokens.SecurityTokenHandler.ValidateToken(System.IdentityModel.Tokens.SecurityToken)">
          <source>The issuer name registry is typically configured through the <bpt id="p1">[</bpt><ph id="ph1">&amp;lt;</ph>issuerNameRegistry<ph id="ph2">&amp;gt;</ph><ept id="p1">](~/docs/framework/configure-apps/file-schema/windows-identity-foundation/issuernameregistry.md)</ept> element in the configuration file.</source>
          <target state="translated">El registro de nombre de emisor se configura normalmente a través de la <bpt id="p1">[</bpt> <ph id="ph1">&amp;lt;</ph>issuerNameRegistry<ph id="ph2">&amp;gt;</ph> <ept id="p1">](~/docs/framework/configure-apps/file-schema/windows-identity-foundation/issuernameregistry.md)</ept> elemento en el archivo de configuración.</target>       </trans-unit>
        <trans-unit id="309" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IdentityModel.Tokens.SecurityTokenHandler.ValidateToken(System.IdentityModel.Tokens.SecurityToken)">
          <source>The <ph id="ph1">&lt;xref:System.IdentityModel.Tokens.IssuerNameRegistry.GetIssuerName%2A&gt;</ph> returns the name of the issuer.</source>
          <target state="translated">El <ph id="ph1">&lt;xref:System.IdentityModel.Tokens.IssuerNameRegistry.GetIssuerName%2A&gt;</ph> devuelve el nombre del emisor.</target>       </trans-unit>
        <trans-unit id="310" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IdentityModel.Tokens.SecurityTokenHandler.ValidateToken(System.IdentityModel.Tokens.SecurityToken)">
          <source>This name should be used to set the <ph id="ph1">&lt;xref:System.Security.Claims.Claim.Issuer%2A?displayProperty=nameWithType&gt;</ph> property in claims contained in the token.</source>
          <target state="translated">Este nombre debe usarse para establecer el <ph id="ph1">&lt;xref:System.Security.Claims.Claim.Issuer%2A?displayProperty=nameWithType&gt;</ph> propiedad en las notificaciones contenidas en el token.</target>       </trans-unit>
        <trans-unit id="311" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IdentityModel.Tokens.SecurityTokenHandler.ValidateToken(System.IdentityModel.Tokens.SecurityToken)">
          <source>If the issuer name registry does not contain an entry for the issuer token, <ph id="ph1">&lt;xref:System.IdentityModel.Tokens.IssuerNameRegistry.GetIssuerName%2A&gt;</ph> returns <ph id="ph2">`null`</ph>.</source>
          <target state="translated">Si el registro de nombre de emisor no contiene una entrada para el token del emisor, <ph id="ph1">&lt;xref:System.IdentityModel.Tokens.IssuerNameRegistry.GetIssuerName%2A&gt;</ph> devuelve <ph id="ph2">`null`</ph>.</target>       </trans-unit>
        <trans-unit id="312" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IdentityModel.Tokens.SecurityTokenHandler.ValidateToken(System.IdentityModel.Tokens.SecurityToken)">
          <source>In this case a <ph id="ph1">&lt;xref:System.IdentityModel.Tokens.SecurityTokenException&gt;</ph> is typically thrown in derived classes, but this behavior is up to the designer of the class.</source>
          <target state="translated">En este caso un <ph id="ph1">&lt;xref:System.IdentityModel.Tokens.SecurityTokenException&gt;</ph> normalmente se produce en las clases derivadas, pero este comportamiento es hasta el Diseñador de la clase.</target>       </trans-unit>
        <trans-unit id="313" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IdentityModel.Tokens.SecurityTokenHandler.ValidateToken(System.IdentityModel.Tokens.SecurityToken)">
          <source>The following code shows an override of the <ph id="ph1">&lt;xref:System.IdentityModel.Tokens.SecurityTokenHandler.ValidateToken%2A&gt;</ph> method for a security token handler that processes simple web tokens (SWT).</source>
          <target state="translated">El código siguiente muestra una invalidación de la <ph id="ph1">&lt;xref:System.IdentityModel.Tokens.SecurityTokenHandler.ValidateToken%2A&gt;</ph> método para un controlador de token de seguridad que procesa los tokens de web simple (SWT).</target>       </trans-unit>
        <trans-unit id="314" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IdentityModel.Tokens.SecurityTokenHandler.ValidateToken(System.IdentityModel.Tokens.SecurityToken)">
          <source>The code is taken from the <ph id="ph1">`CustomToken`</ph> sample.</source>
          <target state="translated">El código se toma de la <ph id="ph1">`CustomToken`</ph> ejemplo.</target>       </trans-unit>
        <trans-unit id="315" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IdentityModel.Tokens.SecurityTokenHandler.ValidateToken(System.IdentityModel.Tokens.SecurityToken)">
          <source>For information about this sample and other samples available for WIF and where to download them, see <bpt id="p1">[</bpt>WIF Code Sample Index<ept id="p1">](~/docs/framework/security/wif-code-sample-index.md)</ept>.</source>
          <target state="translated">Para obtener información acerca de este ejemplo y otros ejemplos disponibles de WIF y la ubicación descargarlos, consulte <bpt id="p1">[</bpt>índice de ejemplo de código WIF<ept id="p1">](~/docs/framework/security/wif-code-sample-index.md)</ept>.</target>       </trans-unit>
        <trans-unit id="316" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IdentityModel.Tokens.SecurityTokenHandler.ValidateToken(System.IdentityModel.Tokens.SecurityToken)">
          <source>The following code shows <ph id="ph1">`CreateClaims`</ph> method that is invoked from the override of the <ph id="ph2">&lt;xref:System.IdentityModel.Tokens.SecurityTokenHandler.ValidateToken%2A&gt;</ph> method in the previous example.</source>
          <target state="translated">El código siguiente muestra <ph id="ph1">`CreateClaims`</ph> método que se invoca desde la invalidación de la <ph id="ph2">&lt;xref:System.IdentityModel.Tokens.SecurityTokenHandler.ValidateToken%2A&gt;</ph> método en el ejemplo anterior.</target>       </trans-unit>
        <trans-unit id="317" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IdentityModel.Tokens.SecurityTokenHandler.ValidateToken(System.IdentityModel.Tokens.SecurityToken)">
          <source>This method returns a <ph id="ph1">&lt;xref:System.Security.Claims.ClaimsIdentity&gt;</ph> object that is created from the claims in the token.</source>
          <target state="translated">Este método devuelve un <ph id="ph1">&lt;xref:System.Security.Claims.ClaimsIdentity&gt;</ph> objeto que se crea a partir de las notificaciones en el token.</target>       </trans-unit>
        <trans-unit id="318" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IdentityModel.Tokens.SecurityTokenHandler.ValidateToken(System.IdentityModel.Tokens.SecurityToken)">
          <source>The code is taken from the <ph id="ph1">`CustomToken`</ph> sample.</source>
          <target state="translated">El código se toma de la <ph id="ph1">`CustomToken`</ph> ejemplo.</target>       </trans-unit>
        <trans-unit id="319" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IdentityModel.Tokens.SecurityTokenHandler.ValidateToken(System.IdentityModel.Tokens.SecurityToken)">
          <source>For information about this sample and other samples available for WIF and where to download them, see <bpt id="p1">[</bpt>WIF Code Sample Index<ept id="p1">](~/docs/framework/security/wif-code-sample-index.md)</ept>.</source>
          <target state="translated">Para obtener información acerca de este ejemplo y otros ejemplos disponibles de WIF y la ubicación descargarlos, consulte <bpt id="p1">[</bpt>índice de ejemplo de código WIF<ept id="p1">](~/docs/framework/security/wif-code-sample-index.md)</ept>.</target>       </trans-unit>
        <trans-unit id="320" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IdentityModel.Tokens.SecurityTokenHandler.ValidateToken(System.IdentityModel.Tokens.SecurityToken)">
          <source>The following code shows <ph id="ph1">`ValidateSignature`</ph> method that is invoked from the override of the <ph id="ph2">&lt;xref:System.IdentityModel.Tokens.SecurityTokenHandler.ValidateToken%2A&gt;</ph> method in the simple web token handler.</source>
          <target state="translated">El código siguiente muestra <ph id="ph1">`ValidateSignature`</ph> método que se invoca desde la invalidación de la <ph id="ph2">&lt;xref:System.IdentityModel.Tokens.SecurityTokenHandler.ValidateToken%2A&gt;</ph> método en el controlador de token web simple.</target>       </trans-unit>
        <trans-unit id="321" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IdentityModel.Tokens.SecurityTokenHandler.ValidateToken(System.IdentityModel.Tokens.SecurityToken)">
          <source>This method validates the signature on the token by using the configured <ph id="ph1">&lt;xref:System.IdentityModel.Tokens.IssuerTokenResolver&gt;</ph>.</source>
          <target state="translated">Este método valida la firma del token usando la configurado <ph id="ph1">&lt;xref:System.IdentityModel.Tokens.IssuerTokenResolver&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="322" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IdentityModel.Tokens.SecurityTokenHandler.ValidateToken(System.IdentityModel.Tokens.SecurityToken)">
          <source>The code is taken from the <ph id="ph1">`CustomToken`</ph> sample.</source>
          <target state="translated">El código se toma de la <ph id="ph1">`CustomToken`</ph> ejemplo.</target>       </trans-unit>
        <trans-unit id="323" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IdentityModel.Tokens.SecurityTokenHandler.ValidateToken(System.IdentityModel.Tokens.SecurityToken)">
          <source>For information about this sample and other samples available for WIF and where to download them, see <bpt id="p1">[</bpt>WIF Code Sample Index<ept id="p1">](~/docs/framework/security/wif-code-sample-index.md)</ept>.</source>
          <target state="translated">Para obtener información acerca de este ejemplo y otros ejemplos disponibles de WIF y la ubicación descargarlos, consulte <bpt id="p1">[</bpt>índice de ejemplo de código WIF<ept id="p1">](~/docs/framework/security/wif-code-sample-index.md)</ept>.</target>       </trans-unit>
        <trans-unit id="324" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IdentityModel.Tokens.SecurityTokenHandler.ValidateToken(System.IdentityModel.Tokens.SecurityToken)">
          <source>The following code shows <ph id="ph1">`ValidateAudience`</ph> method that is invoked from the override of the <ph id="ph2">&lt;xref:System.IdentityModel.Tokens.SecurityTokenHandler.ValidateToken%2A&gt;</ph> method in the simple web token handler.</source>
          <target state="translated">El código siguiente muestra <ph id="ph1">`ValidateAudience`</ph> método que se invoca desde la invalidación de la <ph id="ph2">&lt;xref:System.IdentityModel.Tokens.SecurityTokenHandler.ValidateToken%2A&gt;</ph> método en el controlador de token web simple.</target>       </trans-unit>
        <trans-unit id="325" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IdentityModel.Tokens.SecurityTokenHandler.ValidateToken(System.IdentityModel.Tokens.SecurityToken)">
          <source>This method validates the audience contained in the token against the audience URIs that were specified in configuration.</source>
          <target state="translated">Este método valida la audiencia contenida en el token en el URI que se especificaron en la configuración de audiencia.</target>       </trans-unit>
        <trans-unit id="326" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IdentityModel.Tokens.SecurityTokenHandler.ValidateToken(System.IdentityModel.Tokens.SecurityToken)">
          <source>The code is taken from the <ph id="ph1">`CustomToken`</ph> sample.</source>
          <target state="translated">El código se toma de la <ph id="ph1">`CustomToken`</ph> ejemplo.</target>       </trans-unit>
        <trans-unit id="327" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IdentityModel.Tokens.SecurityTokenHandler.ValidateToken(System.IdentityModel.Tokens.SecurityToken)">
          <source>For information about this sample and other samples available for WIF and where to download them, see <bpt id="p1">[</bpt>WIF Code Sample Index<ept id="p1">](~/docs/framework/security/wif-code-sample-index.md)</ept>.</source>
          <target state="translated">Para obtener información acerca de este ejemplo y otros ejemplos disponibles de WIF y la ubicación descargarlos, consulte <bpt id="p1">[</bpt>índice de ejemplo de código WIF<ept id="p1">](~/docs/framework/security/wif-code-sample-index.md)</ept>.</target>       </trans-unit>
        <trans-unit id="328" translate="yes" xml:space="preserve" uid="M:System.IdentityModel.Tokens.SecurityTokenHandler.WriteKeyIdentifierClause(System.Xml.XmlWriter,System.IdentityModel.Tokens.SecurityKeyIdentifierClause)">
          <source>The XML writer.</source>
          <target state="translated">Sistema de escritura XML.</target>       </trans-unit>
        <trans-unit id="329" translate="yes" xml:space="preserve" uid="M:System.IdentityModel.Tokens.SecurityTokenHandler.WriteKeyIdentifierClause(System.Xml.XmlWriter,System.IdentityModel.Tokens.SecurityKeyIdentifierClause)">
          <source>The key identifier clause to serialize.</source>
          <target state="translated">Cláusula de identificador de clave que se va a serializar.</target>       </trans-unit>
        <trans-unit id="330" translate="yes" xml:space="preserve" uid="M:System.IdentityModel.Tokens.SecurityTokenHandler.WriteKeyIdentifierClause(System.Xml.XmlWriter,System.IdentityModel.Tokens.SecurityKeyIdentifierClause)">
          <source>When overridden in a derived class, serializes the specified key identifier clause to XML.</source>
          <target state="translated">Cuando se invalida en una clase derivada, serializa la cláusula del identificador de clave especificada a XML.</target>       </trans-unit>
        <trans-unit id="331" translate="yes" xml:space="preserve" uid="M:System.IdentityModel.Tokens.SecurityTokenHandler.WriteKeyIdentifierClause(System.Xml.XmlWriter,System.IdentityModel.Tokens.SecurityKeyIdentifierClause)">
          <source>The key identifier clause must be of the type supported by the derived class.</source>
          <target state="translated">La cláusula de identificador de clave debe ser del tipo admitido por la clase derivada.</target>       </trans-unit>
        <trans-unit id="332" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IdentityModel.Tokens.SecurityTokenHandler.WriteKeyIdentifierClause(System.Xml.XmlWriter,System.IdentityModel.Tokens.SecurityKeyIdentifierClause)">
          <source>By default this method throws a <ph id="ph1">&lt;xref:System.NotImplementedException&gt;</ph> exception.</source>
          <target state="translated">De forma predeterminada, este método produce una <ph id="ph1">&lt;xref:System.NotImplementedException&gt;</ph> excepción.</target>       </trans-unit>
        <trans-unit id="333" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IdentityModel.Tokens.SecurityTokenHandler.WriteKeyIdentifierClause(System.Xml.XmlWriter,System.IdentityModel.Tokens.SecurityKeyIdentifierClause)">
          <source>Override this method to provide the logic to serialize a key identifier clause to XML.</source>
          <target state="translated">Invalide este método para proporcionar la lógica para serializar una cláusula de identificador de clave para XML.</target>       </trans-unit>
        <trans-unit id="334" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IdentityModel.Tokens.SecurityTokenHandler.WriteKeyIdentifierClause(System.Xml.XmlWriter,System.IdentityModel.Tokens.SecurityKeyIdentifierClause)">
          <source>If you override this method, you should also override the <ph id="ph1">&lt;xref:System.IdentityModel.Tokens.SecurityTokenHandler.CanWriteKeyIdentifierClause%2A&gt;</ph> method.</source>
          <target state="translated">Si invalida este método, también debe invalidar el <ph id="ph1">&lt;xref:System.IdentityModel.Tokens.SecurityTokenHandler.CanWriteKeyIdentifierClause%2A&gt;</ph> método.</target>       </trans-unit>
        <trans-unit id="335" translate="yes" xml:space="preserve" uid="T:System.IdentityModel.Tokens.SecurityTokenHandler">
          <source>When overridden in a derived class, serializes the specified security token.</source>
          <target state="translated">Cuando se reemplaza en una clase derivada, serializa el token de seguridad especificado.</target>       </trans-unit>
        <trans-unit id="336" translate="yes" xml:space="preserve" uid="T:System.IdentityModel.Tokens.SecurityTokenHandler">
          <source>The token must be of the type processed by the derived class.</source>
          <target state="translated">El token debe ser del tipo procesado por la clase derivada.</target>       </trans-unit>
        <trans-unit id="337" translate="yes" xml:space="preserve" uid="M:System.IdentityModel.Tokens.SecurityTokenHandler.WriteToken(System.IdentityModel.Tokens.SecurityToken)">
          <source>The token to serialize.</source>
          <target state="translated">Token que se va a serializar.</target>       </trans-unit>
        <trans-unit id="338" translate="yes" xml:space="preserve" uid="M:System.IdentityModel.Tokens.SecurityTokenHandler.WriteToken(System.IdentityModel.Tokens.SecurityToken)">
          <source>When overridden in a derived class, serializes the specified security token to a string.</source>
          <target state="translated">Cuando se reemplaza en una clase derivada, serializa el token de seguridad especificado en una cadena.</target>       </trans-unit>
        <trans-unit id="339" translate="yes" xml:space="preserve" uid="M:System.IdentityModel.Tokens.SecurityTokenHandler.WriteToken(System.IdentityModel.Tokens.SecurityToken)">
          <source>The token must be of the type processed by the derived class.</source>
          <target state="translated">El token debe ser del tipo procesado por la clase derivada.</target>       </trans-unit>
        <trans-unit id="340" translate="yes" xml:space="preserve" uid="M:System.IdentityModel.Tokens.SecurityTokenHandler.WriteToken(System.IdentityModel.Tokens.SecurityToken)">
          <source>The serialized token.</source>
          <target state="translated">Token que se va a serializar.</target>       </trans-unit>
        <trans-unit id="341" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IdentityModel.Tokens.SecurityTokenHandler.WriteToken(System.IdentityModel.Tokens.SecurityToken)">
          <source>By default this method throws a <ph id="ph1">&lt;xref:System.NotImplementedException&gt;</ph> exception.</source>
          <target state="translated">De forma predeterminada, este método produce una <ph id="ph1">&lt;xref:System.NotImplementedException&gt;</ph> excepción.</target>       </trans-unit>
        <trans-unit id="342" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IdentityModel.Tokens.SecurityTokenHandler.WriteToken(System.IdentityModel.Tokens.SecurityToken)">
          <source>Override this method to provide the logic to serialize a security token to XML.</source>
          <target state="translated">Invalide este método para proporcionar la lógica para serializar un token de seguridad a XML.</target>       </trans-unit>
        <trans-unit id="343" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IdentityModel.Tokens.SecurityTokenHandler.WriteToken(System.IdentityModel.Tokens.SecurityToken)">
          <source>If you override this method, you should also override the <ph id="ph1">&lt;xref:System.IdentityModel.Tokens.SecurityTokenHandler.CanWriteToken%2A&gt;</ph> property.</source>
          <target state="translated">Si invalida este método, también debe invalidar el <ph id="ph1">&lt;xref:System.IdentityModel.Tokens.SecurityTokenHandler.CanWriteToken%2A&gt;</ph> propiedad.</target>       </trans-unit>
        <trans-unit id="344" translate="yes" xml:space="preserve" uid="M:System.IdentityModel.Tokens.SecurityTokenHandler.WriteToken(System.Xml.XmlWriter,System.IdentityModel.Tokens.SecurityToken)">
          <source>The XML writer.</source>
          <target state="translated">Sistema de escritura XML.</target>       </trans-unit>
        <trans-unit id="345" translate="yes" xml:space="preserve" uid="M:System.IdentityModel.Tokens.SecurityTokenHandler.WriteToken(System.Xml.XmlWriter,System.IdentityModel.Tokens.SecurityToken)">
          <source>The token to serialize.</source>
          <target state="translated">Token que se va a serializar.</target>       </trans-unit>
        <trans-unit id="346" translate="yes" xml:space="preserve" uid="M:System.IdentityModel.Tokens.SecurityTokenHandler.WriteToken(System.Xml.XmlWriter,System.IdentityModel.Tokens.SecurityToken)">
          <source>When overridden in a derived class, serializes the specified security token to XML.</source>
          <target state="translated">Cuando se reemplaza en una clase derivada, serializa el token de seguridad especificado en XML.</target>       </trans-unit>
        <trans-unit id="347" translate="yes" xml:space="preserve" uid="M:System.IdentityModel.Tokens.SecurityTokenHandler.WriteToken(System.Xml.XmlWriter,System.IdentityModel.Tokens.SecurityToken)">
          <source>The token must be of the type processed by the derived class.</source>
          <target state="translated">El token debe ser del tipo procesado por la clase derivada.</target>       </trans-unit>
        <trans-unit id="348" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IdentityModel.Tokens.SecurityTokenHandler.WriteToken(System.Xml.XmlWriter,System.IdentityModel.Tokens.SecurityToken)">
          <source>By default this method throws a <ph id="ph1">&lt;xref:System.NotImplementedException&gt;</ph> exception.</source>
          <target state="translated">De forma predeterminada, este método produce una <ph id="ph1">&lt;xref:System.NotImplementedException&gt;</ph> excepción.</target>       </trans-unit>
        <trans-unit id="349" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IdentityModel.Tokens.SecurityTokenHandler.WriteToken(System.Xml.XmlWriter,System.IdentityModel.Tokens.SecurityToken)">
          <source>Override this method to provide the logic to serialize a security token to XML.</source>
          <target state="translated">Invalide este método para proporcionar la lógica para serializar un token de seguridad a XML.</target>       </trans-unit>
        <trans-unit id="350" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IdentityModel.Tokens.SecurityTokenHandler.WriteToken(System.Xml.XmlWriter,System.IdentityModel.Tokens.SecurityToken)">
          <source>If you override this method, you should also override the <ph id="ph1">&lt;xref:System.IdentityModel.Tokens.SecurityTokenHandler.CanWriteToken%2A&gt;</ph> property.</source>
          <target state="translated">Si invalida este método, también debe invalidar el <ph id="ph1">&lt;xref:System.IdentityModel.Tokens.SecurityTokenHandler.CanWriteToken%2A&gt;</ph> propiedad.</target>       </trans-unit>
        <trans-unit id="351" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IdentityModel.Tokens.SecurityTokenHandler.WriteToken(System.Xml.XmlWriter,System.IdentityModel.Tokens.SecurityToken)">
          <source>The following code shows how to override the <ph id="ph1">&lt;xref:System.IdentityModel.Tokens.SecurityTokenHandler.WriteToken%2A&gt;</ph> method to serialize a custom token.</source>
          <target state="translated">El código siguiente muestra cómo invalidar el <ph id="ph1">&lt;xref:System.IdentityModel.Tokens.SecurityTokenHandler.WriteToken%2A&gt;</ph> método para serializar un token personalizado.</target>       </trans-unit>
        <trans-unit id="352" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IdentityModel.Tokens.SecurityTokenHandler.WriteToken(System.Xml.XmlWriter,System.IdentityModel.Tokens.SecurityToken)">
          <source>The code is taken from the <ph id="ph1">`Custom Token`</ph> sample.</source>
          <target state="translated">El código se toma de la <ph id="ph1">`Custom Token`</ph> ejemplo.</target>       </trans-unit>
        <trans-unit id="353" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IdentityModel.Tokens.SecurityTokenHandler.WriteToken(System.Xml.XmlWriter,System.IdentityModel.Tokens.SecurityToken)">
          <source>This sample provides custom classes that enable processing of Simple Web Tokens (SWT).</source>
          <target state="translated">Este ejemplo proporciona las clases personalizadas que permitan realizar el procesamiento de Simple Web Tokens (SWT).</target>       </trans-unit>
        <trans-unit id="354" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IdentityModel.Tokens.SecurityTokenHandler.WriteToken(System.Xml.XmlWriter,System.IdentityModel.Tokens.SecurityToken)">
          <source>For information about this sample and other samples available for WIF and where to download them, see <bpt id="p1">[</bpt>WIF Code Sample Index<ept id="p1">](~/docs/framework/security/wif-code-sample-index.md)</ept>.</source>
          <target state="translated">Para obtener información acerca de este ejemplo y otros ejemplos disponibles de WIF y la ubicación descargarlos, consulte <bpt id="p1">[</bpt>índice de ejemplo de código WIF<ept id="p1">](~/docs/framework/security/wif-code-sample-index.md)</ept>.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>