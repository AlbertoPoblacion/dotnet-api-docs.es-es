<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="ContainerRandomAccessIterator`1.xml" source-language="en-US" target-language="es-ES">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac5f6d6994debe1bd788f3bc3813fd9643bb91c7b0f.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">f6d6994debe1bd788f3bc3813fd9643bb91c7b0f</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1">
          <source>Provides an iterator that supports the following operations: moving forward one position by calling <bpt id="p1">&lt;c&gt;</bpt>operator++<ept id="p1">&lt;/c&gt;</ept>, moving backward one position by calling <bpt id="p2">&lt;c&gt;</bpt>operator--<ept id="p2">&lt;/c&gt;</ept>, accessing an element by using <bpt id="p3">&lt;c&gt;</bpt>operator[]<ept id="p3">&lt;/c&gt;</ept>, and accessing an element by using pointer arithmetic.</source>
          <target state="translated">Proporciona un iterador que admite las siguientes operaciones: avanzar una posición mediante una llamada a <bpt id="p1">&lt;c&gt;</bpt>operator++<ept id="p1">&lt;/c&gt;</ept>, retroceder una posición mediante una llamada a <bpt id="p2">&lt;c&gt;</bpt>operator--<ept id="p2">&lt;/c&gt;</ept>, tener acceso a un elemento mediante <bpt id="p3">&lt;c&gt;</bpt>operator[]<ept id="p3">&lt;/c&gt;</ept> y tener acceso a un elemento mediante aritmética de punteros.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" uid="T:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1">
          <source>Allocates and initializes a new <ph id="ph1">&lt;see cref="T:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1" /&gt;</ph> object.</source>
          <target state="translated">Asigna e inicializa un nuevo objeto <ph id="ph1">&lt;see cref="T:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.#ctor">
          <source>Allocates and initializes a new <ph id="ph1">&lt;see cref="T:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1" /&gt;</ph> object.</source>
          <target state="translated">Asigna e inicializa un nuevo objeto <ph id="ph1">&lt;see cref="T:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.#ctor(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
          <source>An existing <ph id="ph1">&lt;see cref="T:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1" /&gt;</ph> object to be copied to the current container.</source>
          <target state="translated">Objeto <ph id="ph1">&lt;see cref="T:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1" /&gt;</ph> existente que se va a copiar en el contenedor actual.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.#ctor(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
          <source>Allocates and initializes a new <ph id="ph1">&lt;see cref="T:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1" /&gt;</ph> object from an existing <ph id="ph2">&lt;see cref="T:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1" /&gt;</ph> object.</source>
          <target state="translated">Asigna e inicializa un nuevo objeto <ph id="ph1">&lt;see cref="T:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1" /&gt;</ph> desde un objeto <ph id="ph2">&lt;see cref="T:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1" /&gt;</ph> existente.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.#ctor(Microsoft.VisualC.StlClr.Generic.IRandomAccessContainer{`0},System.Int32)">
          <source>An existing <ph id="ph1">&lt;see cref="T:Microsoft.VisualC.StlClr.Generic.IRandomAccessContainer`1" /&gt;</ph> object to be copied to the current container.</source>
          <target state="translated">Objeto <ph id="ph1">&lt;see cref="T:Microsoft.VisualC.StlClr.Generic.IRandomAccessContainer`1" /&gt;</ph> existente que se va a copiar en el contenedor actual.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.#ctor(Microsoft.VisualC.StlClr.Generic.IRandomAccessContainer{`0},System.Int32)">
          <source>The offset of the element that the iterator will point to after creation.</source>
          <target state="translated">El desplazamiento del elemento al que apuntará el iterador después de la creación.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.#ctor(Microsoft.VisualC.StlClr.Generic.IRandomAccessContainer{`0},System.Int32)">
          <source>Allocates and initializes a new <ph id="ph1">&lt;see cref="T:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1" /&gt;</ph> object from an existing <ph id="ph2">&lt;see cref="T:Microsoft.VisualC.StlClr.Generic.IRandomAccessContainer`1" /&gt;</ph> object.</source>
          <target state="translated">Asigna e inicializa un nuevo objeto <ph id="ph1">&lt;see cref="T:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1" /&gt;</ph> desde un objeto <ph id="ph2">&lt;see cref="T:Microsoft.VisualC.StlClr.Generic.IRandomAccessContainer`1" /&gt;</ph> existente.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.Clone">
          <source>Creates a copy of the current <ph id="ph1">&lt;see cref="T:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1" /&gt;</ph> object.</source>
          <target state="translated">Crea una copia del objeto <ph id="ph1">&lt;see cref="T:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1" /&gt;</ph> actual.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.Clone">
          <source>A copy of the current <ph id="ph1">&lt;see cref="T:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1" /&gt;</ph> object.</source>
          <target state="translated">Copia del objeto <ph id="ph1">&lt;see cref="T:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1" /&gt;</ph> actual.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.container">
          <source>Gets the container that the iterator is traversing.</source>
          <target state="translated">Obtiene el contenedor que el iterador está recorriendo.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.container">
          <source>The container that the iterator is traversing.</source>
          <target state="translated">Contenedor que el iterador está recorriendo.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" uid="T:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1">
          <source>Determines the distance between the element that the current iterator is pointing to and the element that the given iterator is pointing to.</source>
          <target state="translated">Determina la distancia que existe entre el elemento al que apunta el iterador actual y el elemento al que apunta el iterador dado.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.distance(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
          <source>A valid iterator that points to the same container as the current iterator.</source>
          <target state="translated">Iterador válido que apunta al mismo contenedor que el iterador actual.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.distance(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
          <source>Determines the distance between the element that the current iterator is pointing to and the element that the given iterator is pointing to.</source>
          <target state="translated">Determina la distancia que existe entre el elemento al que apunta el iterador actual y el elemento al que apunta el iterador dado.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.distance(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
          <source>The distance, in number of elements, between the element that the current iterator is pointing to and the element that <ph id="ph1">&lt;paramref name="_Right" /&gt;</ph> is pointing to.</source>
          <target state="translated">Distancia, en número de elementos, que existe entre el elemento al que apunta el iterador actual y el elemento al que apunta <ph id="ph1">&lt;paramref name="_Right" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.distance(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
          <source>This number will be negative if <ph id="ph1">&lt;paramref name="_Right" /&gt;</ph> points to an element that is before the element that the current iterator points to.</source>
          <target state="translated">Este número será negativo si <ph id="ph1">&lt;paramref name="_Right" /&gt;</ph> apunta a un elemento situado delante del elemento al que apunta el iterador actual.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.distance(Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator{`0})">
          <source>A valid iterator that points to the same container as the current iterator.</source>
          <target state="translated">Iterador válido que apunta al mismo contenedor que el iterador actual.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.distance(Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator{`0})">
          <source>Determines the distance between the element that the current iterator is pointing to and the element that the given iterator is pointing to.</source>
          <target state="translated">Determina la distancia que existe entre el elemento al que apunta el iterador actual y el elemento al que apunta el iterador dado.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.distance(Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator{`0})">
          <source>The distance, in number of elements, between the element that the current iterator is pointing to and the element that <ph id="ph1">&lt;paramref name="_Right" /&gt;</ph> is pointing to.</source>
          <target state="translated">Distancia, en número de elementos, que existe entre el elemento al que apunta el iterador actual y el elemento al que apunta <ph id="ph1">&lt;paramref name="_Right" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.distance(Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator{`0})">
          <source>This number will be negative if <ph id="ph1">&lt;paramref name="_Right" /&gt;</ph> points to an element that is before the element that the current iterator points to.</source>
          <target state="translated">Este número será negativo si <ph id="ph1">&lt;paramref name="_Right" /&gt;</ph> apunta a un elemento situado delante del elemento al que apunta el iterador actual.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" uid="T:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1">
          <source>Determines whether two iterators are the same object.</source>
          <target state="translated">Determina si dos iteradores son el mismo objeto.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.equal_to(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
          <source>The <ph id="ph1">&lt;see cref="T:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1" /&gt;</ph> object to compare with the current <ph id="ph2">&lt;see cref="T:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1" /&gt;</ph> object.</source>
          <target state="translated">Objeto <ph id="ph1">&lt;see cref="T:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1" /&gt;</ph> que se va a comparar con el objeto <ph id="ph2">&lt;see cref="T:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1" /&gt;</ph> actual.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.equal_to(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
          <source>Determines whether the given <ph id="ph1">&lt;see cref="T:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1" /&gt;</ph> object is the same as the current <ph id="ph2">&lt;see cref="T:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1" /&gt;</ph> object.</source>
          <target state="translated">Determina si el objeto especificado <ph id="ph1">&lt;see cref="T:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1" /&gt;</ph> es el mismo que el objeto <ph id="ph2">&lt;see cref="T:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1" /&gt;</ph> actual.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.equal_to(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the two <ph id="ph2">&lt;see cref="T:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1" /&gt;</ph> objects are the same object; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> si los dos objetos <ph id="ph2">&lt;see cref="T:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1" /&gt;</ph> son el mismo objeto; de lo contrario, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.equal_to(Microsoft.VisualC.StlClr.Generic.IInputIterator{`0})">
          <source>The <ph id="ph1">&lt;see cref="T:Microsoft.VisualC.StlClr.Generic.IInputIterator`1" /&gt;</ph> object to compare with the current <ph id="ph2">&lt;see cref="T:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1" /&gt;</ph> object.</source>
          <target state="translated">Objeto <ph id="ph1">&lt;see cref="T:Microsoft.VisualC.StlClr.Generic.IInputIterator`1" /&gt;</ph> que se va a comparar con el objeto <ph id="ph2">&lt;see cref="T:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1" /&gt;</ph> actual.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.equal_to(Microsoft.VisualC.StlClr.Generic.IInputIterator{`0})">
          <source>Determines whether the given <ph id="ph1">&lt;see cref="T:Microsoft.VisualC.StlClr.Generic.IInputIterator`1" /&gt;</ph> object is the same as the current <ph id="ph2">&lt;see cref="T:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1" /&gt;</ph> object.</source>
          <target state="translated">Determina si el objeto especificado <ph id="ph1">&lt;see cref="T:Microsoft.VisualC.StlClr.Generic.IInputIterator`1" /&gt;</ph> es el mismo que el objeto <ph id="ph2">&lt;see cref="T:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1" /&gt;</ph> actual.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.equal_to(Microsoft.VisualC.StlClr.Generic.IInputIterator{`0})">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the two iterators are the same object; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">Es <ph id="ph1">&lt;see langword="true" /&gt;</ph> si los dos iteradores son el mismo objeto; de lo contrario, es <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" uid="P:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.Item(System.Int32)">
          <source>The position of the element to access.</source>
          <target state="translated">Posición del elemento al que se va a tener acceso.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" uid="P:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.Item(System.Int32)">
          <source>Accesses the element at the given position in the container.</source>
          <target state="translated">Tiene acceso al elemento en la posición dada del contenedor.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT" uid="P:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.Item(System.Int32)">
          <source>The element at the given position in the container.</source>
          <target state="translated">Elemento situado en la posición dada del contenedor.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" uid="T:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1">
          <source>Determines whether the current iterator is pointing to an element in the container that is before the element that a given iterator points to.</source>
          <target state="translated">Determina si el iterador actual apunta a un elemento del contenedor que está delante del elemento al que apunta un iterador dado.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.less_than(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
          <source>A valid iterator pointing to the same container as the current iterator.</source>
          <target state="translated">Iterador válido que apunta al mismo contenedor que el iterador actual.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.less_than(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
          <source>Determines whether the current iterator is pointing to an element in the container that is before the element that the given iterator points to.</source>
          <target state="translated">Determina si el iterador actual apunta a un elemento del contenedor que está delante del elemento al que apunta el iterador dado.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.less_than(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the current iterator is pointing to an element that comes before the element that <ph id="ph2">&lt;paramref name="_Right" /&gt;</ph> is pointing to; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">Es <ph id="ph1">&lt;see langword="true" /&gt;</ph> si el iterador actual apunta a un elemento que está delante del elemento al que apunta <ph id="ph2">&lt;paramref name="_Right" /&gt;</ph>; de lo contrario, es <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.less_than(Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator{`0})">
          <source>A valid iterator that points to the same container as the current iterator.</source>
          <target state="translated">Iterador válido que apunta al mismo contenedor que el iterador actual.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.less_than(Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator{`0})">
          <source>Determines whether the current iterator is pointing to an element in the container that is before the element that the given iterator points to.</source>
          <target state="translated">Determina si el iterador actual apunta a un elemento del contenedor que está delante del elemento al que apunta el iterador dado.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.less_than(Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator{`0})">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the current iterator is pointing to an element that comes before the element that <ph id="ph2">&lt;paramref name="_Right" /&gt;</ph> is pointing to; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">Es <ph id="ph1">&lt;see langword="true" /&gt;</ph> si el iterador actual apunta a un elemento que está delante del elemento al que apunta <ph id="ph2">&lt;paramref name="_Right" /&gt;</ph>; de lo contrario, es <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.move(System.Int32)">
          <source>The number of elements to traverse.</source>
          <target state="translated">Número de elementos que se van a recorrer.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.move(System.Int32)">
          <source>To move the iterator forward, specify a positive number.</source>
          <target state="translated">Para que avance el iterador, especifique un número positivo.</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.move(System.Int32)">
          <source>To move the iterator backward, use a negative number.</source>
          <target state="translated">Para que retroceda el iterador, use un número negativo.</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.move(System.Int32)">
          <source>Moves the iterator by the given number of elements.</source>
          <target state="translated">Mueve el iterador el número de elementos especificado.</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.move(System.Int32)">
          <source>The actual number of elements traversed.</source>
          <target state="translated">Número real de elementos recorridos.</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.move(System.Int32)">
          <source>This number will differ from <ph id="ph1">&lt;paramref name="_Offset" /&gt;</ph> if the beginning or end of the container is reached before iterating the desired number of elements.</source>
          <target state="translated">Este número es diferente del valor de <ph id="ph1">&lt;paramref name="_Offset" /&gt;</ph> si se llega al principio o al final del contenedor antes de recorrer el número deseado de elementos.</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.next">
          <source>Increments the iterator to the next position in the underlying container, or to the first position beyond the end of container if the container has been completely traversed.</source>
          <target state="translated">Incrementa el iterador hasta la siguiente posición del contenedor subyacente o a la primera posición tras el final del contenedor si este se ha recorrido por completo.</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" uid="T:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1">
          <source>Increments the iterator by the given number of elements.</source>
          <target state="translated">Incrementa el iterador en el número de elementos dado.</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.op_Addition(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}@,System.Int32)">
          <source>The number of elements to increment.</source>
          <target state="translated">Número de elementos que se van a incrementar.</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.op_Addition(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}@,System.Int32)">
          <source>Increments the iterator by the given number of elements.</source>
          <target state="translated">Incrementa el iterador en el número de elementos dado.</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.op_Addition(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}@,System.Int32)">
          <source>The integer parameter is specified on the right side of the addition operator.</source>
          <target state="translated">El parámetro entero se especifica en el lado derecho del operador de suma.</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.op_Addition(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}@,System.Int32)">
          <source>An iterator.</source>
          <target state="translated">Iterador.</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.op_Addition(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}@,System.Int32,Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
          <source>The number of elements to increment.</source>
          <target state="translated">Número de elementos que se van a incrementar.</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.op_Addition(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}@,System.Int32,Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
          <source>The iterator to increment.</source>
          <target state="translated">Iterador que se va a incrementar.</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.op_Addition(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}@,System.Int32,Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
          <source>Increments the iterator by the given number of elements.</source>
          <target state="translated">Incrementa el iterador en el número de elementos dado.</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.op_Addition(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}@,System.Int32,Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
          <source>The integer parameter is specified on the left side of the addition operator.</source>
          <target state="translated">El parámetro entero se especifica en el lado izquierdo del operador de suma.</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.op_Addition(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}@,System.Int32,Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
          <source>An iterator.</source>
          <target state="translated">Iterador.</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.op_Assign(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
          <source>The <ph id="ph1">&lt;see cref="T:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1" /&gt;</ph> object to assign to the current object.</source>
          <target state="translated">Objeto <ph id="ph1">&lt;see cref="T:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1" /&gt;</ph> que se va a asignar al objeto actual.</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.op_Assign(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
          <source>Assigns the given <ph id="ph1">&lt;see cref="T:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1" /&gt;</ph> object to the current object.</source>
          <target state="translated">Asigna el objeto <ph id="ph1">&lt;see cref="T:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1" /&gt;</ph> especificado al objeto actual.</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.op_Assign(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
          <source>The current object (<bpt id="p1">&lt;c&gt;</bpt>*this<ept id="p1">&lt;/c&gt;</ept>).</source>
          <target state="translated">Objeto actual (<bpt id="p1">&lt;c&gt;</bpt>*this<ept id="p1">&lt;/c&gt;</ept>).</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" uid="T:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1">
          <source>Decrements the iterator by one element.</source>
          <target state="translated">Reduce el iterador en un elemento.</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.op_Decrement(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}@)">
          <source>Decrements the iterator by one element.</source>
          <target state="translated">Reduce el iterador en un elemento.</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.op_Decrement(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}@)">
          <source>This is the prefix version of the decrement operator.</source>
          <target state="translated">Ésta es la versión prefija del operador de decremento.</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.op_Decrement(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}@)">
          <source>An iterator.</source>
          <target state="translated">Iterador.</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.op_Decrement(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}@,System.Int32)">
          <source>An unused parameter that indicates this is the postfix version of the operator.</source>
          <target state="translated">Parámetro no utilizado que indica que se trata de la versión postfija del operador.</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.op_Decrement(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}@,System.Int32)">
          <source>Decrements the iterator by one element.</source>
          <target state="translated">Reduce el iterador en un elemento.</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.op_Decrement(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}@,System.Int32)">
          <source>This is the postfix version of the decrement operator.</source>
          <target state="translated">Se trata de una versión postfija del operador de decremento.</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.op_Decrement(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}@,System.Int32)">
          <source>An iterator.</source>
          <target state="translated">Iterador.</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" uid="T:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1">
          <source>Determines whether two iterators are the same object.</source>
          <target state="translated">Determina si dos iteradores son el mismo objeto.</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.op_Equality(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
          <source>The <ph id="ph1">&lt;see cref="T:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1" /&gt;</ph> object to compare with the current <ph id="ph2">&lt;see cref="T:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1" /&gt;</ph> object.</source>
          <target state="translated">Objeto <ph id="ph1">&lt;see cref="T:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1" /&gt;</ph> que se va a comparar con el objeto <ph id="ph2">&lt;see cref="T:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1" /&gt;</ph> actual.</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.op_Equality(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
          <source>Determines whether the given <ph id="ph1">&lt;see cref="T:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1" /&gt;</ph> object is the same as the current <ph id="ph2">&lt;see cref="T:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1" /&gt;</ph> object.</source>
          <target state="translated">Determina si el objeto especificado <ph id="ph1">&lt;see cref="T:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1" /&gt;</ph> es el mismo que el objeto <ph id="ph2">&lt;see cref="T:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1" /&gt;</ph> actual.</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.op_Equality(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the two iterators are the same object; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">Es <ph id="ph1">&lt;see langword="true" /&gt;</ph> si los dos iteradores son el mismo objeto; de lo contrario, es <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.op_Equality(Microsoft.VisualC.StlClr.Generic.IInputIterator{`0})">
          <source>The <ph id="ph1">&lt;see cref="T:Microsoft.VisualC.StlClr.Generic.IInputIterator`1" /&gt;</ph> object to compare with the current <ph id="ph2">&lt;see cref="T:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1" /&gt;</ph> object.</source>
          <target state="translated">Objeto <ph id="ph1">&lt;see cref="T:Microsoft.VisualC.StlClr.Generic.IInputIterator`1" /&gt;</ph> que se va a comparar con el objeto <ph id="ph2">&lt;see cref="T:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1" /&gt;</ph> actual.</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.op_Equality(Microsoft.VisualC.StlClr.Generic.IInputIterator{`0})">
          <source>Determines whether the given <ph id="ph1">&lt;see cref="T:Microsoft.VisualC.StlClr.Generic.IInputIterator`1" /&gt;</ph> object is the same as the current <ph id="ph2">&lt;see cref="T:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1" /&gt;</ph> object.</source>
          <target state="translated">Determina si el objeto especificado <ph id="ph1">&lt;see cref="T:Microsoft.VisualC.StlClr.Generic.IInputIterator`1" /&gt;</ph> es el mismo que el objeto <ph id="ph2">&lt;see cref="T:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1" /&gt;</ph> actual.</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.op_Equality(Microsoft.VisualC.StlClr.Generic.IInputIterator{`0})">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the two iterators are the same object; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">Es <ph id="ph1">&lt;see langword="true" /&gt;</ph> si los dos iteradores son el mismo objeto; de lo contrario, es <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" uid="T:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1">
          <source>Determines whether the position of an iterator is greater than the position of another iterator.</source>
          <target state="translated">Determina si la posición de un iterador es mayor que la posición de otro iterador.</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.op_GreaterThan(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
          <source>The iterator to compare with the left-side iterator.</source>
          <target state="translated">Iterador que se va a compara con el iterador del lado izquierdo.</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.op_GreaterThan(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
          <source>Determines whether the position of the left-side iterator is greater than the position of the given right-side iterator.</source>
          <target state="translated">Determina si la posición del iterador del lado izquierdo es mayor que la posición del iterador del lado derecho especificado.</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.op_GreaterThan(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the left-side iterator is greater than the given right-side iterator; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">Es <ph id="ph1">&lt;see langword="true" /&gt;</ph> si el iterador del lado izquierdo es mayor que el iterador del lado derecho especificado; de lo contrario, es <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.op_GreaterThan(Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator{`0},Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
          <source>The iterator to compare with the right-side iterator.</source>
          <target state="translated">Iterador que se va a comparar con el iterador del lado derecho.</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.op_GreaterThan(Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator{`0},Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
          <source>The iterator to compare with the left-side iterator.</source>
          <target state="translated">Iterador que se va a compara con el iterador del lado izquierdo.</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.op_GreaterThan(Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator{`0},Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
          <source>Determines whether the position of the given left-side iterator is greater than the position of the given right-side iterator.</source>
          <target state="translated">Determina si la posición del iterador del lado izquierdo especificado es mayor que la posición del iterador del lado derecho especificado.</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.op_GreaterThan(Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator{`0},Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the given left-side iterator is greater than the given right-side iterator; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">Es <ph id="ph1">&lt;see langword="true" /&gt;</ph> si el iterador del lado izquierdo especificado es mayor que el iterador del lado derecho especificado; de lo contrario, es <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve" uid="T:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1">
          <source>Determines whether the position of an iterator is greater than or equal to the position of another iterator.</source>
          <target state="translated">Determina si la posición de un iterador es mayor o igual que la posición de otro iterador.</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.op_GreaterThanOrEqual(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
          <source>The iterator to compare with the left-side iterator.</source>
          <target state="translated">Iterador que se va a compara con el iterador del lado izquierdo.</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.op_GreaterThanOrEqual(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
          <source>Determines whether the position of the left-side iterator is greater than or equal to the position of the given right-side iterator.</source>
          <target state="translated">Determina si la posición del iterador del lado izquierdo es mayor o igual que la posición del iterador del lado derecho especificado.</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.op_GreaterThanOrEqual(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the left-side iterator is greater than or equal to the given right-side iterator; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">Es <ph id="ph1">&lt;see langword="true" /&gt;</ph> si el iterador del lado izquierdo es mayor o igual que el iterador del lado derecho especificado; de lo contrario, es <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.op_GreaterThanOrEqual(Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator{`0})">
          <source>The iterator to compare with the left-side iterator.</source>
          <target state="translated">Iterador que se va a compara con el iterador del lado izquierdo.</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.op_GreaterThanOrEqual(Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator{`0})">
          <source>Determines whether the position of the left-side iterator is greater than or equal to the position of the given right-side iterator.</source>
          <target state="translated">Determina si la posición del iterador del lado izquierdo es mayor o igual que la posición del iterador del lado derecho especificado.</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.op_GreaterThanOrEqual(Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator{`0})">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the left-side iterator is greater than or equal to the given right-side iterator; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">Es <ph id="ph1">&lt;see langword="true" /&gt;</ph> si el iterador del lado izquierdo es mayor o igual que el iterador del lado derecho especificado; de lo contrario, es <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.op_Implicit~Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator{`0}">
          <source>Converts a <ph id="ph1">&lt;see cref="T:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1" /&gt;</ph> to an <ph id="ph2">&lt;see cref="T:Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator`1" /&gt;</ph>.</source>
          <target state="translated">Convierte un objeto <ph id="ph1">&lt;see cref="T:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1" /&gt;</ph> en <ph id="ph2">&lt;see cref="T:Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator`1" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.op_Implicit~Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator{`0}">
          <source>The current iterator as an <ph id="ph1">&lt;see cref="T:Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator`1" /&gt;</ph>.</source>
          <target state="translated">Iterador actual como una interfaz <ph id="ph1">&lt;see cref="T:Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator`1" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve" uid="T:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1">
          <source>Increments the iterator by one element.</source>
          <target state="translated">Incrementa el iterador en un elemento.</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.op_Increment(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}@)">
          <source>Increments the iterator by one element.</source>
          <target state="translated">Incrementa el iterador en un elemento.</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.op_Increment(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}@)">
          <source>This is the prefix version of the increment operator.</source>
          <target state="translated">Ésta es la versión prefija del operador de incremento.</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.op_Increment(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}@)">
          <source>An iterator.</source>
          <target state="translated">Iterador.</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.op_Increment(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}@,System.Int32)">
          <source>An unused parameter that indicates this is the postfix version of the operator.</source>
          <target state="translated">Parámetro no utilizado que indica que se trata de la versión postfija del operador.</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.op_Increment(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}@,System.Int32)">
          <source>Increments the iterator by one element.</source>
          <target state="translated">Incrementa el iterador en un elemento.</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.op_Increment(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}@,System.Int32)">
          <source>This is the postfix version of the increment operator.</source>
          <target state="translated">Se trata de una versión postfija del operador de incremento.</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.op_Increment(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}@,System.Int32)">
          <source>An iterator.</source>
          <target state="translated">Iterador.</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve" uid="T:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1">
          <source>Determines whether two iterators are not the same object.</source>
          <target state="translated">Determina si dos iteradores no son el mismo objeto.</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.op_Inequality(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
          <source>The <ph id="ph1">&lt;see cref="T:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1" /&gt;</ph> object to compare with the current <ph id="ph2">&lt;see cref="T:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1" /&gt;</ph> object.</source>
          <target state="translated">Objeto <ph id="ph1">&lt;see cref="T:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1" /&gt;</ph> que se va a comparar con el objeto <ph id="ph2">&lt;see cref="T:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1" /&gt;</ph> actual.</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.op_Inequality(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
          <source>Determines whether the given <ph id="ph1">&lt;see cref="T:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1" /&gt;</ph> object differs from the current <ph id="ph2">&lt;see cref="T:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1" /&gt;</ph> object.</source>
          <target state="translated">Determina si el objeto <ph id="ph1">&lt;see cref="T:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1" /&gt;</ph> especificado difiere del objeto <ph id="ph2">&lt;see cref="T:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1" /&gt;</ph> actual.</target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.op_Inequality(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the two iterators are different objects; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">Es <ph id="ph1">&lt;see langword="true" /&gt;</ph> si los dos iteradores son objetos diferentes; de lo contrario, es <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.op_Inequality(Microsoft.VisualC.StlClr.Generic.IInputIterator{`0})">
          <source>The <ph id="ph1">&lt;see cref="T:Microsoft.VisualC.StlClr.Generic.IInputIterator`1" /&gt;</ph> object to compare with the current <ph id="ph2">&lt;see cref="T:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1" /&gt;</ph> object.</source>
          <target state="translated">Objeto <ph id="ph1">&lt;see cref="T:Microsoft.VisualC.StlClr.Generic.IInputIterator`1" /&gt;</ph> que se va a comparar con el objeto <ph id="ph2">&lt;see cref="T:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1" /&gt;</ph> actual.</target>       </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.op_Inequality(Microsoft.VisualC.StlClr.Generic.IInputIterator{`0})">
          <source>Determines whether the given <ph id="ph1">&lt;see cref="T:Microsoft.VisualC.StlClr.Generic.IInputIterator`1" /&gt;</ph> object differs from the current <ph id="ph2">&lt;see cref="T:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1" /&gt;</ph> object.</source>
          <target state="translated">Determina si el objeto <ph id="ph1">&lt;see cref="T:Microsoft.VisualC.StlClr.Generic.IInputIterator`1" /&gt;</ph> especificado difiere del objeto <ph id="ph2">&lt;see cref="T:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1" /&gt;</ph> actual.</target>       </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.op_Inequality(Microsoft.VisualC.StlClr.Generic.IInputIterator{`0})">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the two iterators are different objects; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">Es <ph id="ph1">&lt;see langword="true" /&gt;</ph> si los dos iteradores son objetos diferentes; de lo contrario, es <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve" uid="T:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1">
          <source>Determines whether the position of an iterator is less than the position of another iterator.</source>
          <target state="translated">Determina si la posición de un iterador es menor que la posición de otro iterador.</target>       </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.op_LessThan(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
          <source>The iterator to compare with the left-side iterator.</source>
          <target state="translated">Iterador que se va a compara con el iterador del lado izquierdo.</target>       </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.op_LessThan(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
          <source>Determines whether the position of the left-side iterator is less than the position of the given right-side iterator.</source>
          <target state="translated">Determina si la posición del iterador del lado izquierdo es menor que la posición del iterador del lado derecho especificado.</target>       </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.op_LessThan(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the left-side iterator is less than the given right-side iterator; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">Es <ph id="ph1">&lt;see langword="true" /&gt;</ph> si el iterador del lado izquierdo es menor que el iterador del lado derecho especificado; de lo contrario, es <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.op_LessThan(Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator{`0})">
          <source>The iterator to compare with the left-side iterator.</source>
          <target state="translated">Iterador que se va a compara con el iterador del lado izquierdo.</target>       </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.op_LessThan(Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator{`0})">
          <source>Determines whether the position of the left-side iterator is less than the position of the given right-side iterator.</source>
          <target state="translated">Determina si la posición del iterador del lado izquierdo es menor que la posición del iterador del lado derecho especificado.</target>       </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.op_LessThan(Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator{`0})">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the left-side iterator is less than the given right-side iterator; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">Es <ph id="ph1">&lt;see langword="true" /&gt;</ph> si el iterador del lado izquierdo es menor que el iterador del lado derecho especificado; de lo contrario, es <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve" uid="T:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1">
          <source>Determines whether the position of an iterator is less than or equal to the position of another iterator.</source>
          <target state="translated">Determina si la posición de un iterador es menor o igual que la posición de otro iterador.</target>       </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.op_LessThanOrEqual(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
          <source>The iterator to compare with the left-side iterator.</source>
          <target state="translated">Iterador que se va a compara con el iterador del lado izquierdo.</target>       </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.op_LessThanOrEqual(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
          <source>Determines whether the position of the left-side iterator is less than or equal to the position of the given right-side iterator.</source>
          <target state="translated">Determina si la posición del iterador del lado izquierdo es menor o igual que la posición del iterador del lado derecho especificado.</target>       </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.op_LessThanOrEqual(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the left-side iterator is less than or equal to the given right-side iterator; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">Es <ph id="ph1">&lt;see langword="true" /&gt;</ph> si el iterador del lado izquierdo es menor o igual que el iterador del lado derecho especificado; de lo contrario, es <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.op_LessThanOrEqual(Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator{`0},Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
          <source>The iterator to compare with the right-side iterator.</source>
          <target state="translated">Iterador que se va a comparar con el iterador del lado derecho.</target>       </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.op_LessThanOrEqual(Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator{`0},Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
          <source>The iterator to compare with the left-side iterator.</source>
          <target state="translated">Iterador que se va a compara con el iterador del lado izquierdo.</target>       </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.op_LessThanOrEqual(Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator{`0},Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
          <source>Determines whether the position of the given left-side iterator is less than the position of the given right-side iterator.</source>
          <target state="translated">Determina si la posición del iterador del lado izquierdo especificado es menor que la posición del iterador del lado derecho especificado.</target>       </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.op_LessThanOrEqual(Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator{`0},Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the given left-side iterator is less than or equal to the given right-side iterator; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">Es <ph id="ph1">&lt;see langword="true" /&gt;</ph> si el iterador del lado izquierdo especificado es menor o igual que el iterador del lado derecho especificado; de lo contrario, es <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.op_MemberSelection(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
          <source>The iterator that the operator is applied to.</source>
          <target state="translated">Iterador al que se aplica el operador.</target>       </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.op_MemberSelection(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
          <source>Returns the element that the iterator is currently pointing to.</source>
          <target state="translated">Devuelve el elemento al que el iterador apunta actualmente.</target>       </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.op_MemberSelection(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
          <source>The element that the iterator is currently pointing to.</source>
          <target state="translated">Elemento al que el iterador apunta actualmente.</target>       </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.op_PointerDereference(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
          <source>The iterator that the operator is applied to.</source>
          <target state="translated">Iterador al que se aplica el operador.</target>       </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.op_PointerDereference(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
          <source>Returns the element that the iterator is currently pointing to.</source>
          <target state="translated">Devuelve el elemento al que el iterador apunta actualmente.</target>       </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.op_PointerDereference(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
          <source>The element that the iterator is currently pointing to.</source>
          <target state="translated">Elemento al que el iterador apunta actualmente.</target>       </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve" uid="T:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1">
          <source>Decrements the iterator by the given number of elements, or determines the difference between two iterators.</source>
          <target state="translated">Disminuye el iterador en el número dado de elementos o determina la diferencia entre dos iteradores.</target>       </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.op_Subtraction(Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator{`0})">
          <source>The <ph id="ph1">&lt;see cref="T:Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator`1" /&gt;</ph> to be subtracted from the current <ph id="ph2">&lt;see cref="T:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1" /&gt;</ph> object.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator`1" /&gt;</ph> que se va a restar del objeto <ph id="ph2">&lt;see cref="T:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1" /&gt;</ph> actual.</target>       </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.op_Subtraction(Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator{`0})">
          <source>Determines the difference between two iterators.</source>
          <target state="translated">Determina la diferencia que existe entre dos iteradores.</target>       </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.op_Subtraction(Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator{`0})">
          <source>The difference (number of elements) between the two iterators.</source>
          <target state="translated">La diferencia, en número de elementos, entre los dos iteradores.</target>       </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.op_Subtraction(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}@,System.Int32)">
          <source>The number of elements to decrement.</source>
          <target state="translated">Número de elementos que se van a reducir.</target>       </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.op_Subtraction(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}@,System.Int32)">
          <source>Decrements the iterator by the given number of elements.</source>
          <target state="translated">Disminuye el iterador en el número de elementos dado.</target>       </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.op_Subtraction(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}@,System.Int32)">
          <source>The integer parameter is specified on the right side of the subtraction operator.</source>
          <target state="translated">El parámetro entero se especifica en el lado derecho del operador de resta.</target>       </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.op_Subtraction(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}@,System.Int32)">
          <source>An iterator.</source>
          <target state="translated">Iterador.</target>       </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.prev">
          <source>Positions the iterator to the element immediately before the current element.</source>
          <target state="translated">Coloca el iterador en el elemento situado inmediatamente delante del elemento actual.</target>       </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.valid">
          <source>Determines whether the iterator is valid and can be safely used to traverse the underlying container.</source>
          <target state="translated">Determina si el iterador es válido y se puede usar de forma segura para recorrer el contenedor subyacente.</target>       </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.valid">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the iterator is valid and safe to use; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">Es <ph id="ph1">&lt;see langword="true" /&gt;</ph> si el iterador es válido y su uso es seguro; de lo contrario, es <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>