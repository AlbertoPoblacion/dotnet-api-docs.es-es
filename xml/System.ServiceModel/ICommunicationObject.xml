<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="ICommunicationObject.xml" source-language="en-US" target-language="es-ES">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac5864e880f75f69ec7b5b1eaad2fa2a42f3c1377ea.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">864e880f75f69ec7b5b1eaad2fa2a42f3c1377ea</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-1.0,netcore-1.1,netcore-2.0,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.ServiceModel.ICommunicationObject">
          <source>Defines the contract for the basic state machine for all communication-oriented objects in the system, including channels, the channel managers, factories, listeners, and dispatchers, and service hosts.</source>
          <target state="translated">Define el contrato para la máquina de estados básicos para todos los objetos orientados a la comunicación en el sistema, incluidos los canales, administradores de canales, generadores, agentes de escucha, distribuidores y hosts de servicio.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.ICommunicationObject">
          <source>The <ph id="ph1">&lt;xref:System.ServiceModel.ICommunicationObject&gt;</ph> interface defines:</source>
          <target state="translated">La interfaz <ph id="ph1">&lt;xref:System.ServiceModel.ICommunicationObject&gt;</ph> define:</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.ICommunicationObject">
          <source>A set of open, close and abort methods for initiating state transitions:</source>
          <target state="translated">Un conjunto de métodos abiertos, cerrados y anulados para iniciar las transiciones de estado:</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.ICommunicationObject">
          <source>Asynchronous versions of the open and close methods:</source>
          <target state="translated">Versiones asincrónicas de los métodos abiertos y cerrados:</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.ICommunicationObject">
          <source>A set of events that provide notifications of state transitions:</source>
          <target state="translated">Un conjunto de eventos que proporcionan notificaciones de las transiciones de estado:</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.ICommunicationObject">
          <source>A common <ph id="ph1">&lt;xref:System.ServiceModel.ICommunicationObject.State%2A&gt;</ph> property for inspecting the state of an object</source>
          <target state="translated">Una propiedad <ph id="ph1">&lt;xref:System.ServiceModel.ICommunicationObject.State%2A&gt;</ph> común para inspeccionar el estado de un objeto</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.ICommunicationObject.Abort">
          <source>Causes a communication object to transition immediately from its current state into the closed state.</source>
          <target state="translated">Hace que un objeto de comunicación pase inmediatamente de su estado actual al estado cerrado.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.ICommunicationObject.Abort">
          <source>This method indicates that any unfinished work should be ignored or ungracefully terminated before returning.</source>
          <target state="translated">Este método indica que se debería omitir o terminar de forma discreta cualquier trabajo inacabado antes de devolverse.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.ICommunicationObject.Abort">
          <source>The <ph id="ph1">&lt;xref:System.ServiceModel.ICommunicationObject.Abort%2A&gt;</ph> method can be used to cancel any outstanding operations, including outstanding calls to <ph id="ph2">&lt;xref:System.ServiceModel.ICommunicationObject.Close%2A&gt;</ph>.</source>
          <target state="translated">El método <ph id="ph1">&lt;xref:System.ServiceModel.ICommunicationObject.Abort%2A&gt;</ph> se puede usar para cancelar cualquier operación pendiente, incluidas las llamadas pendientes a <ph id="ph2">&lt;xref:System.ServiceModel.ICommunicationObject.Close%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.ICommunicationObject.Abort">
          <source>To gracefully transition an <ph id="ph1">&lt;xref:System.ServiceModel.ICommunicationObject&gt;</ph> from the <ph id="ph2">&lt;xref:System.ServiceModel.CommunicationState.Opened&gt;</ph> state to the <ph id="ph3">&lt;xref:System.ServiceModel.CommunicationState.Closed&gt;</ph> state call <ph id="ph4">&lt;xref:System.ServiceModel.ICommunicationObject.Close%2A&gt;</ph>.</source>
          <target state="translated">Para pasar de forma correcta un <ph id="ph1">&lt;xref:System.ServiceModel.ICommunicationObject&gt;</ph> del estado <ph id="ph2">&lt;xref:System.ServiceModel.CommunicationState.Opened&gt;</ph> al estado <ph id="ph3">&lt;xref:System.ServiceModel.CommunicationState.Closed&gt;</ph>, llame a <ph id="ph4">&lt;xref:System.ServiceModel.ICommunicationObject.Close%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" uid="T:System.ServiceModel.ICommunicationObject">
          <source>Begins an asynchronous operation to close a communication object.</source>
          <target state="translated">Comienza una operación asincrónica para cerrar un objeto de comunicación.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.ICommunicationObject">
          <source>This method causes an <ph id="ph1">&lt;xref:System.ServiceModel.ICommunicationObject&gt;</ph> to gracefully transition from the <ph id="ph2">&lt;xref:System.ServiceModel.CommunicationState.Opened&gt;</ph> state to the <ph id="ph3">&lt;xref:System.ServiceModel.CommunicationState.Closed&gt;</ph> state.</source>
          <target state="translated">Este método provoca que <ph id="ph1">&lt;xref:System.ServiceModel.ICommunicationObject&gt;</ph> pase correctamente del estado <ph id="ph2">&lt;xref:System.ServiceModel.CommunicationState.Opened&gt;</ph> al estado <ph id="ph3">&lt;xref:System.ServiceModel.CommunicationState.Closed&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.ICommunicationObject">
          <source>Versions with and without an explicit timeout are provided.</source>
          <target state="translated">Se proporcionan las versiones con y sin un tiempo de espera concreto.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.ICommunicationObject.BeginClose(System.AsyncCallback,System.Object)">
          <source>The <ph id="ph1">&lt;see cref="T:System.AsyncCallback" /&gt;</ph> delegate that receives notification of the completion of the asynchronous close operation.</source>
          <target state="translated">Delegado de <ph id="ph1">&lt;see cref="T:System.AsyncCallback" /&gt;</ph> que recibe la notificación de la finalización de la operación de cierre asincrónica.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.ICommunicationObject.BeginClose(System.AsyncCallback,System.Object)">
          <source>An object, specified by the application, that contains state information associated with the asynchronous close operation.</source>
          <target state="translated">Objeto, especificado por la aplicación, que contiene la información de estado asociada a la operación de cierre asincrónica.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.ICommunicationObject.BeginClose(System.AsyncCallback,System.Object)">
          <source>Begins an asynchronous operation to close a communication object.</source>
          <target state="translated">Comienza una operación asincrónica para cerrar un objeto de comunicación.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.ICommunicationObject.BeginClose(System.AsyncCallback,System.Object)">
          <source>The <ph id="ph1">&lt;see cref="T:System.IAsyncResult" /&gt;</ph> that references the asynchronous close operation.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.IAsyncResult" /&gt;</ph> que hace referencia a la operación de cierre asincrónica.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.ICommunicationObject.BeginClose(System.AsyncCallback,System.Object)">
          <source>This method causes an <ph id="ph1">&lt;xref:System.ServiceModel.ICommunicationObject&gt;</ph> to gracefully transition from any state, other than the <ph id="ph2">&lt;xref:System.ServiceModel.CommunicationState.Opened&gt;</ph> state to the <ph id="ph3">&lt;xref:System.ServiceModel.CommunicationState.Closed&gt;</ph> state.</source>
          <target state="translated">Este método provoca que <ph id="ph1">&lt;xref:System.ServiceModel.ICommunicationObject&gt;</ph> pase correctamente desde cualquier estado, distinto del estado <ph id="ph2">&lt;xref:System.ServiceModel.CommunicationState.Opened&gt;</ph> al estado <ph id="ph3">&lt;xref:System.ServiceModel.CommunicationState.Closed&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.ICommunicationObject.BeginClose(System.AsyncCallback,System.Object)">
          <source>The <ph id="ph1">&lt;xref:System.ServiceModel.ICommunicationObject.BeginClose%2A&gt;</ph> method allows any unfinished work to be completed before returning.</source>
          <target state="translated">El método <ph id="ph1">&lt;xref:System.ServiceModel.ICommunicationObject.BeginClose%2A&gt;</ph> permite completar cualquier trabajo inacabado antes de devolverse.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.ICommunicationObject.BeginClose(System.AsyncCallback,System.Object)">
          <source>For example, finish sending any buffered messages).</source>
          <target state="translated">Por ejemplo, terminar de enviar cualquier mensaje almacenado en búfer.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.ICommunicationObject.BeginClose(System.AsyncCallback,System.Object)">
          <source><ph id="ph1">&lt;see cref="M:System.ServiceModel.ICommunicationObject.BeginClose" /&gt;</ph> was called on an object in the <ph id="ph2">&lt;see cref="F:System.ServiceModel.CommunicationState.Faulted" /&gt;</ph> state.</source>
          <target state="translated">Se llamó a <ph id="ph1">&lt;see cref="M:System.ServiceModel.ICommunicationObject.BeginClose" /&gt;</ph> en un objeto con el estado <ph id="ph2">&lt;see cref="F:System.ServiceModel.CommunicationState.Faulted" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.ICommunicationObject.BeginClose(System.AsyncCallback,System.Object)">
          <source>The default timeout elapsed before the <ph id="ph1">&lt;see cref="T:System.ServiceModel.ICommunicationObject" /&gt;</ph> was able to close gracefully.</source>
          <target state="translated">El tiempo de espera predeterminado transcurrió antes de que <ph id="ph1">&lt;see cref="T:System.ServiceModel.ICommunicationObject" /&gt;</ph> pudiera cerrarse correctamente.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.ICommunicationObject.BeginClose(System.TimeSpan,System.AsyncCallback,System.Object)">
          <source>The <ph id="ph1">&lt;see cref="T:System.TimeSpan" /&gt;</ph> that specifies how long the send operation has to complete before timing out.</source>
          <target state="translated">El objeto <ph id="ph1">&lt;see cref="T:System.TimeSpan" /&gt;</ph> que especifica el tiempo con el que cuenta la operación de envío para completarse antes de que se agote el tiempo de espera.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.ICommunicationObject.BeginClose(System.TimeSpan,System.AsyncCallback,System.Object)">
          <source>The <ph id="ph1">&lt;see cref="T:System.AsyncCallback" /&gt;</ph> delegate that receives notification of the completion of the asynchronous close operation.</source>
          <target state="translated">Delegado de <ph id="ph1">&lt;see cref="T:System.AsyncCallback" /&gt;</ph> que recibe la notificación de la finalización de la operación de cierre asincrónica.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.ICommunicationObject.BeginClose(System.TimeSpan,System.AsyncCallback,System.Object)">
          <source>An object, specified by the application, that contains state information associated with the asynchronous close operation.</source>
          <target state="translated">Objeto, especificado por la aplicación, que contiene la información de estado asociada a la operación de cierre asincrónica.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.ICommunicationObject.BeginClose(System.TimeSpan,System.AsyncCallback,System.Object)">
          <source>Begins an asynchronous operation to close a communication object with a specified timeout.</source>
          <target state="translated">Comienza una operación asincrónica para cerrar un objeto de comunicación con un tiempo de espera especificado.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.ICommunicationObject.BeginClose(System.TimeSpan,System.AsyncCallback,System.Object)">
          <source>The <ph id="ph1">&lt;see cref="T:System.IAsyncResult" /&gt;</ph> that references the asynchronous close operation.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.IAsyncResult" /&gt;</ph> que hace referencia a la operación de cierre asincrónica.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.ICommunicationObject.BeginClose(System.TimeSpan,System.AsyncCallback,System.Object)">
          <source>This method causes an <ph id="ph1">&lt;xref:System.ServiceModel.ICommunicationObject&gt;</ph> to gracefully transition from any state, other than the <ph id="ph2">&lt;xref:System.ServiceModel.CommunicationState.Opened&gt;</ph> state to the <ph id="ph3">&lt;xref:System.ServiceModel.CommunicationState.Closed&gt;</ph> state with in a specified interval of time.</source>
          <target state="translated">Este método provoca que <ph id="ph1">&lt;xref:System.ServiceModel.ICommunicationObject&gt;</ph> pase correctamente de un estado, distinto del estado <ph id="ph2">&lt;xref:System.ServiceModel.CommunicationState.Opened&gt;</ph> al estado <ph id="ph3">&lt;xref:System.ServiceModel.CommunicationState.Closed&gt;</ph> en un intervalo de tiempo especificado.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.ICommunicationObject.BeginClose(System.TimeSpan,System.AsyncCallback,System.Object)">
          <source>The <ph id="ph1">&lt;xref:System.ServiceModel.ICommunicationObject.BeginClose%2A&gt;</ph> method allows any unfinished work to be completed before returning.</source>
          <target state="translated">El método <ph id="ph1">&lt;xref:System.ServiceModel.ICommunicationObject.BeginClose%2A&gt;</ph> permite completar cualquier trabajo inacabado antes de devolverse.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.ICommunicationObject.BeginClose(System.TimeSpan,System.AsyncCallback,System.Object)">
          <source>For example, finish sending any buffered messages).</source>
          <target state="translated">Por ejemplo, terminar de enviar cualquier mensaje almacenado en búfer.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.ICommunicationObject.BeginClose(System.TimeSpan,System.AsyncCallback,System.Object)">
          <source><ph id="ph1">&lt;see cref="M:System.ServiceModel.ICommunicationObject.BeginClose" /&gt;</ph> was called on an object in the <ph id="ph2">&lt;see cref="F:System.ServiceModel.CommunicationState.Faulted" /&gt;</ph> state.</source>
          <target state="translated">Se llamó a <ph id="ph1">&lt;see cref="M:System.ServiceModel.ICommunicationObject.BeginClose" /&gt;</ph> en un objeto con el estado <ph id="ph2">&lt;see cref="F:System.ServiceModel.CommunicationState.Faulted" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.ICommunicationObject.BeginClose(System.TimeSpan,System.AsyncCallback,System.Object)">
          <source>The specified timeout elapsed before the <ph id="ph1">&lt;see cref="T:System.ServiceModel.ICommunicationObject" /&gt;</ph> was able to close gracefully.</source>
          <target state="translated">El tiempo de espera predeterminado transcurrió antes de que <ph id="ph1">&lt;see cref="T:System.ServiceModel.ICommunicationObject" /&gt;</ph> pudiera cerrarse correctamente.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" uid="T:System.ServiceModel.ICommunicationObject">
          <source>Begins an asynchronous operation to close a communication object.</source>
          <target state="translated">Comienza una operación asincrónica para cerrar un objeto de comunicación.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.ICommunicationObject">
          <source>The <ph id="ph1">&lt;xref:System.ServiceModel.ICommunicationObject.BeginOpen%2A&gt;</ph> method causes an <ph id="ph2">&lt;xref:System.ServiceModel.ICommunicationObject&gt;</ph> to enter into the <ph id="ph3">&lt;xref:System.ServiceModel.CommunicationState.Opening&gt;</ph> state where it remains until its transition to the <ph id="ph4">&lt;xref:System.ServiceModel.CommunicationState.Opened&gt;</ph> state is completed or fails.</source>
          <target state="translated">El método <ph id="ph1">&lt;xref:System.ServiceModel.ICommunicationObject.BeginOpen%2A&gt;</ph> provoca que un <ph id="ph2">&lt;xref:System.ServiceModel.ICommunicationObject&gt;</ph> pase al estado <ph id="ph3">&lt;xref:System.ServiceModel.CommunicationState.Opening&gt;</ph> donde permanecerá hasta que su transición al estado <ph id="ph4">&lt;xref:System.ServiceModel.CommunicationState.Opened&gt;</ph> se complete o no se produzca.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.ICommunicationObject">
          <source>Versions with and without an explicit timeout are provided.</source>
          <target state="translated">Se proporcionan las versiones con y sin un tiempo de espera concreto.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.ICommunicationObject.BeginOpen(System.AsyncCallback,System.Object)">
          <source>The <ph id="ph1">&lt;see cref="T:System.AsyncCallback" /&gt;</ph> delegate that receives notification of the completion of the asynchronous open operation.</source>
          <target state="translated">Delegado de <ph id="ph1">&lt;see cref="T:System.AsyncCallback" /&gt;</ph> que recibe la notificación de la finalización de la operación de apertura asincrónica.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.ICommunicationObject.BeginOpen(System.AsyncCallback,System.Object)">
          <source>An object, specified by the application, that contains state information associated with the asynchronous open operation.</source>
          <target state="translated">Un objeto, especificado por la aplicación, que contiene información de estado asociada a la operación de apertura asincrónica.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.ICommunicationObject.BeginOpen(System.AsyncCallback,System.Object)">
          <source>Begins an asynchronous operation to open a communication object.</source>
          <target state="translated">Comienza una operación asincrónica para abrir un objeto de comunicación.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.ICommunicationObject.BeginOpen(System.AsyncCallback,System.Object)">
          <source>The <ph id="ph1">&lt;see cref="T:System.IAsyncResult" /&gt;</ph> that references the asynchronous open operation.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.IAsyncResult" /&gt;</ph>, que hace referencia a la operación de apertura asincrónica.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.ICommunicationObject.BeginOpen(System.AsyncCallback,System.Object)">
          <source>When an <ph id="ph1">&lt;xref:System.ServiceModel.ICommunicationObject&gt;</ph> is instantiated, it begins in the <ph id="ph2">&lt;xref:System.ServiceModel.CommunicationState.Created&gt;</ph> state.</source>
          <target state="translated">Cuando se crea una instancia de <ph id="ph1">&lt;xref:System.ServiceModel.ICommunicationObject&gt;</ph>, comienza en el estado <ph id="ph2">&lt;xref:System.ServiceModel.CommunicationState.Created&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.ICommunicationObject.BeginOpen(System.AsyncCallback,System.Object)">
          <source>In the <ph id="ph1">&lt;xref:System.ServiceModel.CommunicationState.Created&gt;</ph> state, the object can be configured (for example, properties can be set, or events can be registered), but it is not yet usable to send or receive messages.</source>
          <target state="translated">En el estado <ph id="ph1">&lt;xref:System.ServiceModel.CommunicationState.Created&gt;</ph>, el objeto se puede configurar (por ejemplo, se pueden establecer las propiedades o registrar los eventos), pero no se puede usar todavía para enviar o recibir mensajes.</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.ICommunicationObject.BeginOpen(System.AsyncCallback,System.Object)">
          <source>The <ph id="ph1">&lt;xref:System.ServiceModel.ICommunicationObject.BeginOpen%2A&gt;</ph> method causes an <ph id="ph2">&lt;xref:System.ServiceModel.ICommunicationObject&gt;</ph> to enter into the <ph id="ph3">&lt;xref:System.ServiceModel.CommunicationState.Opening&gt;</ph> state where it remains until the open operation succeeds, the open operation times out or fails and the object becomes faulted, or the <ph id="ph4">&lt;xref:System.ServiceModel.ICommunicationObject&gt;</ph> is aborted.</source>
          <target state="translated">El método <ph id="ph1">&lt;xref:System.ServiceModel.ICommunicationObject.BeginOpen%2A&gt;</ph> hace que <ph id="ph2">&lt;xref:System.ServiceModel.ICommunicationObject&gt;</ph> pase al estado <ph id="ph3">&lt;xref:System.ServiceModel.CommunicationState.Opening&gt;</ph> donde permanecerá hasta que la operación de apertura se realice correctamente, se agote el tiempo de espera de la operación de apertura y el objeto genere un error o se anule <ph id="ph4">&lt;xref:System.ServiceModel.ICommunicationObject&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.ICommunicationObject.BeginOpen(System.AsyncCallback,System.Object)">
          <source>In the <ph id="ph1">&lt;xref:System.ServiceModel.CommunicationState.Opened&gt;</ph> state, the <ph id="ph2">&lt;xref:System.ServiceModel.ICommunicationObject&gt;</ph> is usable (for example, messages can be received), but it is no longer configurable.</source>
          <target state="translated">En el estado <ph id="ph1">&lt;xref:System.ServiceModel.CommunicationState.Opened&gt;</ph>, se puede utilizar <ph id="ph2">&lt;xref:System.ServiceModel.ICommunicationObject&gt;</ph> (por ejemplo, se pueden recibir los mensajes), pero ya no se pueden configurar.</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.ICommunicationObject.BeginOpen(System.AsyncCallback,System.Object)">
          <source>The <ph id="ph1">&lt;see cref="T:System.ServiceModel.ICommunicationObject" /&gt;</ph> was unable to be opened and has entered the <ph id="ph2">&lt;see cref="F:System.ServiceModel.CommunicationState.Faulted" /&gt;</ph> state.</source>
          <target state="translated">El <ph id="ph1">&lt;see cref="T:System.ServiceModel.ICommunicationObject" /&gt;</ph> no pudo abrirse y ha entrado en el estado <ph id="ph2">&lt;see cref="F:System.ServiceModel.CommunicationState.Faulted" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.ICommunicationObject.BeginOpen(System.AsyncCallback,System.Object)">
          <source>The default open timeout elapsed before the <ph id="ph1">&lt;see cref="T:System.ServiceModel.ICommunicationObject" /&gt;</ph> was able to enter the <ph id="ph2">&lt;see cref="F:System.ServiceModel.CommunicationState.Opened" /&gt;</ph> state and has entered the <ph id="ph3">&lt;see cref="F:System.ServiceModel.CommunicationState.Faulted" /&gt;</ph> state.</source>
          <target state="translated">El tiempo de espera para la apertura predeterminado transcurrió antes de que <ph id="ph1">&lt;see cref="T:System.ServiceModel.ICommunicationObject" /&gt;</ph> pudiera introducir el estado <ph id="ph2">&lt;see cref="F:System.ServiceModel.CommunicationState.Opened" /&gt;</ph> y ha introducido el estado <ph id="ph3">&lt;see cref="F:System.ServiceModel.CommunicationState.Faulted" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.ICommunicationObject.BeginOpen(System.TimeSpan,System.AsyncCallback,System.Object)">
          <source>The <ph id="ph1">&lt;see cref="T:System.TimeSpan" /&gt;</ph> that specifies how long the send operation has to complete before timing out.</source>
          <target state="translated">El objeto <ph id="ph1">&lt;see cref="T:System.TimeSpan" /&gt;</ph> que especifica el tiempo con el que cuenta la operación de envío para completarse antes de que se agote el tiempo de espera.</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.ICommunicationObject.BeginOpen(System.TimeSpan,System.AsyncCallback,System.Object)">
          <source>The <ph id="ph1">&lt;see cref="T:System.AsyncCallback" /&gt;</ph> delegate that receives notification of the completion of the asynchronous open operation.</source>
          <target state="translated">Delegado de <ph id="ph1">&lt;see cref="T:System.AsyncCallback" /&gt;</ph> que recibe la notificación de la finalización de la operación de apertura asincrónica.</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.ICommunicationObject.BeginOpen(System.TimeSpan,System.AsyncCallback,System.Object)">
          <source>An object, specified by the application, that contains state information associated with the asynchronous open operation.</source>
          <target state="translated">Un objeto, especificado por la aplicación, que contiene información de estado asociada a la operación de apertura asincrónica.</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.ICommunicationObject.BeginOpen(System.TimeSpan,System.AsyncCallback,System.Object)">
          <source>Begins an asynchronous operation to open a communication object within a specified interval of time.</source>
          <target state="translated">Comienza una operación asincrónica para abrir un objeto de comunicación dentro de un intervalo de tiempo especificado.</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.ICommunicationObject.BeginOpen(System.TimeSpan,System.AsyncCallback,System.Object)">
          <source>The <ph id="ph1">&lt;see cref="T:System.IAsyncResult" /&gt;</ph> that references the asynchronous open operation.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.IAsyncResult" /&gt;</ph>, que hace referencia a la operación de apertura asincrónica.</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.ICommunicationObject.BeginOpen(System.TimeSpan,System.AsyncCallback,System.Object)">
          <source>When an <ph id="ph1">&lt;xref:System.ServiceModel.ICommunicationObject&gt;</ph> is instantiated, it begins in the <ph id="ph2">&lt;xref:System.ServiceModel.CommunicationState.Created&gt;</ph> state.</source>
          <target state="translated">Cuando se crea una instancia de <ph id="ph1">&lt;xref:System.ServiceModel.ICommunicationObject&gt;</ph>, comienza en el estado <ph id="ph2">&lt;xref:System.ServiceModel.CommunicationState.Created&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.ICommunicationObject.BeginOpen(System.TimeSpan,System.AsyncCallback,System.Object)">
          <source>In the <ph id="ph1">&lt;xref:System.ServiceModel.CommunicationState.Created&gt;</ph> state, the object can be configured (for example, properties can be set, or events can be registered), but it is not yet usable to send or receive messages.</source>
          <target state="translated">En el estado <ph id="ph1">&lt;xref:System.ServiceModel.CommunicationState.Created&gt;</ph>, el objeto se puede configurar (por ejemplo, se pueden establecer las propiedades o registrar los eventos), pero no se puede usar todavía para enviar o recibir mensajes.</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.ICommunicationObject.BeginOpen(System.TimeSpan,System.AsyncCallback,System.Object)">
          <source>The <ph id="ph1">&lt;xref:System.ServiceModel.ICommunicationObject.Open%2A&gt;</ph> method causes an <ph id="ph2">&lt;xref:System.ServiceModel.ICommunicationObject&gt;</ph> to enter into the <ph id="ph3">&lt;xref:System.ServiceModel.CommunicationState.Opening&gt;</ph> state where it remains until the open operation succeeds, the open operation times out or fails and the object becomes faulted, or the <ph id="ph4">&lt;xref:System.ServiceModel.ICommunicationObject&gt;</ph> is aborted.</source>
          <target state="translated">El método <ph id="ph1">&lt;xref:System.ServiceModel.ICommunicationObject.Open%2A&gt;</ph> hace que <ph id="ph2">&lt;xref:System.ServiceModel.ICommunicationObject&gt;</ph> pase al estado <ph id="ph3">&lt;xref:System.ServiceModel.CommunicationState.Opening&gt;</ph> donde permanecerá hasta que la operación de apertura se realice correctamente, se agote el tiempo de espera de la operación de apertura y el objeto genere un error o se anule <ph id="ph4">&lt;xref:System.ServiceModel.ICommunicationObject&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.ICommunicationObject.BeginOpen(System.TimeSpan,System.AsyncCallback,System.Object)">
          <source>In the <ph id="ph1">&lt;xref:System.ServiceModel.CommunicationState.Opened&gt;</ph> state, the <ph id="ph2">&lt;xref:System.ServiceModel.ICommunicationObject&gt;</ph> is usable (for example, messages can be received), but it is no longer configurable.</source>
          <target state="translated">En el estado <ph id="ph1">&lt;xref:System.ServiceModel.CommunicationState.Opened&gt;</ph>, se puede utilizar <ph id="ph2">&lt;xref:System.ServiceModel.ICommunicationObject&gt;</ph> (por ejemplo, se pueden recibir los mensajes), pero ya no se pueden configurar.</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.ICommunicationObject.BeginOpen(System.TimeSpan,System.AsyncCallback,System.Object)">
          <source>The <ph id="ph1">&lt;see cref="T:System.ServiceModel.ICommunicationObject" /&gt;</ph> was unable to be opened and has entered the <ph id="ph2">&lt;see cref="F:System.ServiceModel.CommunicationState.Faulted" /&gt;</ph> state.</source>
          <target state="translated">El <ph id="ph1">&lt;see cref="T:System.ServiceModel.ICommunicationObject" /&gt;</ph> no pudo abrirse y ha entrado en el estado <ph id="ph2">&lt;see cref="F:System.ServiceModel.CommunicationState.Faulted" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.ICommunicationObject.BeginOpen(System.TimeSpan,System.AsyncCallback,System.Object)">
          <source>The specified timeout elapsed before the <ph id="ph1">&lt;see cref="T:System.ServiceModel.ICommunicationObject" /&gt;</ph> was able to enter the <ph id="ph2">&lt;see cref="F:System.ServiceModel.CommunicationState.Opened" /&gt;</ph> state and has entered the <ph id="ph3">&lt;see cref="F:System.ServiceModel.CommunicationState.Faulted" /&gt;</ph> state.</source>
          <target state="translated">El tiempo de espera especificado transcurrió antes de que <ph id="ph1">&lt;see cref="T:System.ServiceModel.ICommunicationObject" /&gt;</ph> pudiera introducir el estado <ph id="ph2">&lt;see cref="F:System.ServiceModel.CommunicationState.Opened" /&gt;</ph> y ha introducido el estado <ph id="ph3">&lt;see cref="F:System.ServiceModel.CommunicationState.Faulted" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.ICommunicationObject.BeginOpen(System.TimeSpan,System.AsyncCallback,System.Object)">
          <source>The operation must throw a <ph id="ph1">&lt;see cref="T:System.TimeoutException" /&gt;</ph> if the specified <ph id="ph2">&lt;paramref name="timeout" /&gt;</ph> is exceeded.</source>
          <target state="translated">La operación debe iniciar un <ph id="ph1">&lt;see cref="T:System.TimeoutException" /&gt;</ph> si se supera el parámetro <ph id="ph2">&lt;paramref name="timeout" /&gt;</ph> especificado.</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" uid="T:System.ServiceModel.ICommunicationObject">
          <source>Causes a communication object to transition from its current state into the closed state.</source>
          <target state="translated">Provoca que un objeto de comunicación pase de su estado actual al estado cerrado.</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.ICommunicationObject.Close">
          <source>Causes a communication object to transition from its current state into the closed state.</source>
          <target state="translated">Provoca que un objeto de comunicación pase de su estado actual al estado cerrado.</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.ICommunicationObject.Close">
          <source>This method causes an <ph id="ph1">&lt;xref:System.ServiceModel.ICommunicationObject&gt;</ph> to gracefully transition from the <ph id="ph2">&lt;xref:System.ServiceModel.CommunicationState.Opened&gt;</ph> state to the <ph id="ph3">&lt;xref:System.ServiceModel.CommunicationState.Closed&gt;</ph> state.</source>
          <target state="translated">Este método provoca que <ph id="ph1">&lt;xref:System.ServiceModel.ICommunicationObject&gt;</ph> pase correctamente del estado <ph id="ph2">&lt;xref:System.ServiceModel.CommunicationState.Opened&gt;</ph> al estado <ph id="ph3">&lt;xref:System.ServiceModel.CommunicationState.Closed&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.ICommunicationObject.Close">
          <source>The <ph id="ph1">&lt;xref:System.ServiceModel.ICommunicationObject.Close%2A&gt;</ph> method allows any unfinished work to be completed before returning.</source>
          <target state="translated">El método <ph id="ph1">&lt;xref:System.ServiceModel.ICommunicationObject.Close%2A&gt;</ph> permite completar cualquier trabajo inacabado antes de devolverse.</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.ICommunicationObject.Close">
          <source>For example, finish sending any buffered messages).</source>
          <target state="translated">Por ejemplo, terminar de enviar cualquier mensaje almacenado en búfer.</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.ICommunicationObject.Close">
          <source>The <ph id="ph1">&lt;xref:System.ServiceModel.ICommunicationObject&gt;</ph> enters the <ph id="ph2">&lt;xref:System.ServiceModel.CommunicationState.Closing&gt;</ph> state and remains in it until the transition to the <ph id="ph3">&lt;xref:System.ServiceModel.CommunicationState.Closed&gt;</ph> state is completed.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.ServiceModel.ICommunicationObject&gt;</ph> introduce el estado <ph id="ph2">&lt;xref:System.ServiceModel.CommunicationState.Closing&gt;</ph> y permanece en él hasta que la transición al estado <ph id="ph3">&lt;xref:System.ServiceModel.CommunicationState.Closed&gt;</ph> se haya completado.</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.ICommunicationObject.Close">
          <source><ph id="ph1">&lt;xref:System.ServiceModel.ICommunicationObject.Close%2A&gt;</ph> returns once the <ph id="ph2">&lt;xref:System.ServiceModel.CommunicationState.Closed&gt;</ph> state is reached.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.ServiceModel.ICommunicationObject.Close%2A&gt;</ph> se devuelve una vez que se ha alcanzado el estado <ph id="ph2">&lt;xref:System.ServiceModel.CommunicationState.Closed&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.ICommunicationObject.Close">
          <source>If the default close timeout elapses before the <ph id="ph1">&lt;xref:System.ServiceModel.ICommunicationObject&gt;</ph> is able to close gracefully, the <ph id="ph2">&lt;xref:System.ServiceModel.ICommunicationObject&gt;</ph> is aborted.</source>
          <target state="translated">Si el tiempo de espera predeterminado transcurre antes de que <ph id="ph1">&lt;xref:System.ServiceModel.ICommunicationObject&gt;</ph> pueda cerrarse correctamente, se anulará <ph id="ph2">&lt;xref:System.ServiceModel.ICommunicationObject&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.ICommunicationObject.Close">
          <source>If <ph id="ph1">&lt;xref:System.ServiceModel.ICommunicationObject.Close%2A&gt;</ph> is called on an <ph id="ph2">&lt;xref:System.ServiceModel.ICommunicationObject&gt;</ph> in the <ph id="ph3">&lt;xref:System.ServiceModel.CommunicationState.Created&gt;</ph>, <ph id="ph4">&lt;xref:System.ServiceModel.CommunicationState.Opening&gt;</ph>, or <ph id="ph5">&lt;xref:System.ServiceModel.CommunicationState.Faulted&gt;</ph> state, the <ph id="ph6">&lt;xref:System.ServiceModel.ICommunicationObject&gt;</ph> is aborted.</source>
          <target state="translated">Si se llama a <ph id="ph1">&lt;xref:System.ServiceModel.ICommunicationObject.Close%2A&gt;</ph> en un <ph id="ph2">&lt;xref:System.ServiceModel.ICommunicationObject&gt;</ph> en el estado <ph id="ph3">&lt;xref:System.ServiceModel.CommunicationState.Created&gt;</ph>, <ph id="ph4">&lt;xref:System.ServiceModel.CommunicationState.Opening&gt;</ph> o <ph id="ph5">&lt;xref:System.ServiceModel.CommunicationState.Faulted&gt;</ph>, se anulará <ph id="ph6">&lt;xref:System.ServiceModel.ICommunicationObject&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.ICommunicationObject.Close">
          <source>If <ph id="ph1">&lt;xref:System.ServiceModel.ICommunicationObject.Close%2A&gt;</ph> is called on an <ph id="ph2">&lt;xref:System.ServiceModel.ICommunicationObject&gt;</ph> in the <ph id="ph3">&lt;xref:System.ServiceModel.CommunicationState.Closing&gt;</ph> or <ph id="ph4">&lt;xref:System.ServiceModel.CommunicationState.Closed&gt;</ph> state, the call returns immediately.</source>
          <target state="translated">Si se llama a <ph id="ph1">&lt;xref:System.ServiceModel.ICommunicationObject.Close%2A&gt;</ph> en un <ph id="ph2">&lt;xref:System.ServiceModel.ICommunicationObject&gt;</ph> en el estado <ph id="ph3">&lt;xref:System.ServiceModel.CommunicationState.Closing&gt;</ph> o <ph id="ph4">&lt;xref:System.ServiceModel.CommunicationState.Closed&gt;</ph>, la llamada se devolverá inmediatamente.</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.ICommunicationObject.Close">
          <source>There is also an asynchronous version of the close method that is initiated by calling <ph id="ph1">&lt;xref:System.ServiceModel.ICommunicationObject.BeginClose%2A&gt;</ph> and completed by calling <ph id="ph2">&lt;xref:System.ServiceModel.ICommunicationObject.Close%2A&gt;</ph>.</source>
          <target state="translated">Hay también una versión asincrónica del método de cierre que se inicia llamando a <ph id="ph1">&lt;xref:System.ServiceModel.ICommunicationObject.BeginClose%2A&gt;</ph> y se completa llamando a <ph id="ph2">&lt;xref:System.ServiceModel.ICommunicationObject.Close%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.ICommunicationObject.Close">
          <source><ph id="ph1">&lt;see cref="M:System.ServiceModel.ICommunicationObject.Close" /&gt;</ph> was called on an object in the <ph id="ph2">&lt;see cref="F:System.ServiceModel.CommunicationState.Faulted" /&gt;</ph> state.</source>
          <target state="translated">Se llamó a <ph id="ph1">&lt;see cref="M:System.ServiceModel.ICommunicationObject.Close" /&gt;</ph> en un objeto con el estado <ph id="ph2">&lt;see cref="F:System.ServiceModel.CommunicationState.Faulted" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.ICommunicationObject.Close">
          <source>The default close timeout elapsed before the <ph id="ph1">&lt;see cref="T:System.ServiceModel.ICommunicationObject" /&gt;</ph> was able to close gracefully.</source>
          <target state="translated">El tiempo de espera predeterminado transcurrió antes de que <ph id="ph1">&lt;see cref="T:System.ServiceModel.ICommunicationObject" /&gt;</ph> pudiera cerrarse correctamente.</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.ICommunicationObject.Close(System.TimeSpan)">
          <source>The <ph id="ph1">&lt;see cref="T:System.TimeSpan" /&gt;</ph> that specifies how long the send operation has to complete before timing out.</source>
          <target state="translated">El objeto <ph id="ph1">&lt;see cref="T:System.TimeSpan" /&gt;</ph> que especifica el tiempo con el que cuenta la operación de envío para completarse antes de que se agote el tiempo de espera.</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.ICommunicationObject.Close(System.TimeSpan)">
          <source>Causes a communication object to transition from its current state into the closed state.</source>
          <target state="translated">Provoca que un objeto de comunicación pase de su estado actual al estado cerrado.</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.ICommunicationObject.Close(System.TimeSpan)">
          <source>This method causes an <ph id="ph1">&lt;xref:System.ServiceModel.ICommunicationObject&gt;</ph> to gracefully transition from the <ph id="ph2">&lt;xref:System.ServiceModel.CommunicationState.Opened&gt;</ph> state to the <ph id="ph3">&lt;xref:System.ServiceModel.CommunicationState.Closed&gt;</ph> state within a specified interval of time.</source>
          <target state="translated">Este método provoca que <ph id="ph1">&lt;xref:System.ServiceModel.ICommunicationObject&gt;</ph> pase de forma correcta del estado <ph id="ph2">&lt;xref:System.ServiceModel.CommunicationState.Opened&gt;</ph> al estado <ph id="ph3">&lt;xref:System.ServiceModel.CommunicationState.Closed&gt;</ph> dentro de un intervalo especificado de tiempo.</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.ICommunicationObject.Close(System.TimeSpan)">
          <source>The <ph id="ph1">&lt;xref:System.ServiceModel.ICommunicationObject.Close%2A&gt;</ph> method allows any unfinished work to be completed before returning.</source>
          <target state="translated">El método <ph id="ph1">&lt;xref:System.ServiceModel.ICommunicationObject.Close%2A&gt;</ph> permite completar cualquier trabajo inacabado antes de devolverse.</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.ICommunicationObject.Close(System.TimeSpan)">
          <source>For example, finish sending any buffered messages).</source>
          <target state="translated">Por ejemplo, terminar de enviar cualquier mensaje almacenado en búfer.</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.ICommunicationObject.Close(System.TimeSpan)">
          <source>The <ph id="ph1">&lt;xref:System.ServiceModel.ICommunicationObject&gt;</ph> enters the <ph id="ph2">&lt;xref:System.ServiceModel.CommunicationState.Closing&gt;</ph> state and remains in it until the transition to the <ph id="ph3">&lt;xref:System.ServiceModel.CommunicationState.Closed&gt;</ph> state is completed.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.ServiceModel.ICommunicationObject&gt;</ph> introduce el estado <ph id="ph2">&lt;xref:System.ServiceModel.CommunicationState.Closing&gt;</ph> y permanece en él hasta que la transición al estado <ph id="ph3">&lt;xref:System.ServiceModel.CommunicationState.Closed&gt;</ph> se haya completado.</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.ICommunicationObject.Close(System.TimeSpan)">
          <source><ph id="ph1">&lt;xref:System.ServiceModel.ICommunicationObject.Close%2A&gt;</ph> returns once the <ph id="ph2">&lt;xref:System.ServiceModel.CommunicationState.Closed&gt;</ph> state is reached.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.ServiceModel.ICommunicationObject.Close%2A&gt;</ph> se devuelve una vez que se ha alcanzado el estado <ph id="ph2">&lt;xref:System.ServiceModel.CommunicationState.Closed&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.ICommunicationObject.Close(System.TimeSpan)">
          <source>If the timeout elapses before the <ph id="ph1">&lt;xref:System.ServiceModel.ICommunicationObject&gt;</ph> is able to gracefully close, the <ph id="ph2">&lt;xref:System.ServiceModel.ICommunicationObject&gt;</ph> is aborted.</source>
          <target state="translated">Si el tiempo de espera transcurre antes de que <ph id="ph1">&lt;xref:System.ServiceModel.ICommunicationObject&gt;</ph> pueda cerrarse correctamente, se anulará <ph id="ph2">&lt;xref:System.ServiceModel.ICommunicationObject&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.ICommunicationObject.Close(System.TimeSpan)">
          <source>If <ph id="ph1">&lt;xref:System.ServiceModel.ICommunicationObject.Close%2A&gt;</ph> is called on an <ph id="ph2">&lt;xref:System.ServiceModel.ICommunicationObject&gt;</ph> in the <ph id="ph3">&lt;xref:System.ServiceModel.CommunicationState.Created&gt;</ph>, <ph id="ph4">&lt;xref:System.ServiceModel.CommunicationState.Opening&gt;</ph>, or <ph id="ph5">&lt;xref:System.ServiceModel.CommunicationState.Faulted&gt;</ph> state, the <ph id="ph6">&lt;xref:System.ServiceModel.ICommunicationObject&gt;</ph> is aborted.</source>
          <target state="translated">Si se llama a <ph id="ph1">&lt;xref:System.ServiceModel.ICommunicationObject.Close%2A&gt;</ph> en un <ph id="ph2">&lt;xref:System.ServiceModel.ICommunicationObject&gt;</ph> en el estado <ph id="ph3">&lt;xref:System.ServiceModel.CommunicationState.Created&gt;</ph>, <ph id="ph4">&lt;xref:System.ServiceModel.CommunicationState.Opening&gt;</ph> o <ph id="ph5">&lt;xref:System.ServiceModel.CommunicationState.Faulted&gt;</ph>, se anulará <ph id="ph6">&lt;xref:System.ServiceModel.ICommunicationObject&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.ICommunicationObject.Close(System.TimeSpan)">
          <source>If <ph id="ph1">&lt;xref:System.ServiceModel.ICommunicationObject.Close%2A&gt;</ph> is called on an <ph id="ph2">&lt;xref:System.ServiceModel.ICommunicationObject&gt;</ph> in the <ph id="ph3">&lt;xref:System.ServiceModel.CommunicationState.Closing&gt;</ph> or <ph id="ph4">&lt;xref:System.ServiceModel.CommunicationState.Closed&gt;</ph> state, the call returns immediately.</source>
          <target state="translated">Si se llama a <ph id="ph1">&lt;xref:System.ServiceModel.ICommunicationObject.Close%2A&gt;</ph> en un <ph id="ph2">&lt;xref:System.ServiceModel.ICommunicationObject&gt;</ph> en el estado <ph id="ph3">&lt;xref:System.ServiceModel.CommunicationState.Closing&gt;</ph> o <ph id="ph4">&lt;xref:System.ServiceModel.CommunicationState.Closed&gt;</ph>, la llamada se devolverá inmediatamente.</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.ICommunicationObject.Close(System.TimeSpan)">
          <source>There is also an asynchronous version of the close method that is initiated by calling <ph id="ph1">&lt;xref:System.ServiceModel.ICommunicationObject.BeginClose%2A&gt;</ph> and completed by calling <ph id="ph2">&lt;xref:System.ServiceModel.ICommunicationObject.Close%2A&gt;</ph>.</source>
          <target state="translated">Hay también una versión asincrónica del método de cierre que se inicia llamando a <ph id="ph1">&lt;xref:System.ServiceModel.ICommunicationObject.BeginClose%2A&gt;</ph> y se completa llamando a <ph id="ph2">&lt;xref:System.ServiceModel.ICommunicationObject.Close%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.ICommunicationObject.Close(System.TimeSpan)">
          <source><ph id="ph1">&lt;see cref="M:System.ServiceModel.ICommunicationObject.Close" /&gt;</ph> was called on an object in the <ph id="ph2">&lt;see cref="F:System.ServiceModel.CommunicationState.Faulted" /&gt;</ph> state.</source>
          <target state="translated">Se llamó a <ph id="ph1">&lt;see cref="M:System.ServiceModel.ICommunicationObject.Close" /&gt;</ph> en un objeto con el estado <ph id="ph2">&lt;see cref="F:System.ServiceModel.CommunicationState.Faulted" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.ICommunicationObject.Close(System.TimeSpan)">
          <source>The timeout elapsed before the <ph id="ph1">&lt;see cref="T:System.ServiceModel.ICommunicationObject" /&gt;</ph> was able to close gracefully.</source>
          <target state="translated">El tiempo de espera transcurrido antes de que <ph id="ph1">&lt;see cref="T:System.ServiceModel.ICommunicationObject" /&gt;</ph> pudiera cerrarse correctamente.</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.ICommunicationObject.Close(System.TimeSpan)">
          <source>The operation must throw a <ph id="ph1">&lt;see cref="T:System.TimeoutException" /&gt;</ph> if the specified <ph id="ph2">&lt;paramref name="timeout" /&gt;</ph> is exceeded.</source>
          <target state="translated">La operación debe iniciar un <ph id="ph1">&lt;see cref="T:System.TimeoutException" /&gt;</ph> si se supera el parámetro <ph id="ph2">&lt;paramref name="timeout" /&gt;</ph> especificado.</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve" uid="E:System.ServiceModel.ICommunicationObject.Closed">
          <source>Occurs when the communication object completes its transition from the closing state into the closed state.</source>
          <target state="translated">Se produce cuando el objeto de comunicación completa su transición del estado de cierre al estado cerrado.</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve" uid="E:System.ServiceModel.ICommunicationObject.Closing">
          <source>Occurs when the communication object first enters the closing state.</source>
          <target state="translated">Se produce cuando el objeto de comunicación introduce primero el estado de cierre.</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.ServiceModel.ICommunicationObject.Closing">
          <source>This event occurs when the communication object first begins to transition from the <ph id="ph1">&lt;xref:System.ServiceModel.CommunicationState.Opened&gt;</ph> state into the <ph id="ph2">&lt;xref:System.ServiceModel.CommunicationState.Closed&gt;</ph> state, immediately after either the <ph id="ph3">&lt;xref:System.ServiceModel.ICommunicationObject.Close%2A&gt;</ph> or <ph id="ph4">&lt;xref:System.ServiceModel.ICommunicationObject.BeginClose%2A&gt;</ph> method is invoked.</source>
          <target state="translated">Este evento se produce cuando el objeto de comunicación comienza primero a pasar del estado <ph id="ph1">&lt;xref:System.ServiceModel.CommunicationState.Opened&gt;</ph> al estado <ph id="ph2">&lt;xref:System.ServiceModel.CommunicationState.Closed&gt;</ph>, inmediatamente después se invoca el método <ph id="ph3">&lt;xref:System.ServiceModel.ICommunicationObject.Close%2A&gt;</ph> o <ph id="ph4">&lt;xref:System.ServiceModel.ICommunicationObject.BeginClose%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.ICommunicationObject.EndClose(System.IAsyncResult)">
          <source>The <ph id="ph1">&lt;see cref="T:System.IAsyncResult" /&gt;</ph> that is returned by a call to the <ph id="ph2">&lt;see cref="Overload:System.ServiceModel.ICommunicationObject.BeginClose" /&gt;</ph> method.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.IAsyncResult" /&gt;</ph> que se devuelve al llamar al método <ph id="ph2">&lt;see cref="Overload:System.ServiceModel.ICommunicationObject.BeginClose" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.ICommunicationObject.EndClose(System.IAsyncResult)">
          <source>Completes an asynchronous operation to close a communication object.</source>
          <target state="translated">Completa una operación asincrónica para cerrar un objeto de comunicación.</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.ICommunicationObject.EndClose(System.IAsyncResult)">
          <source><ph id="ph1">&lt;see cref="Overload:System.ServiceModel.ICommunicationObject.BeginClose" /&gt;</ph> was called on an object in the <ph id="ph2">&lt;see cref="F:System.ServiceModel.CommunicationState.Faulted" /&gt;</ph> state.</source>
          <target state="translated">Se llamó a <ph id="ph1">&lt;see cref="Overload:System.ServiceModel.ICommunicationObject.BeginClose" /&gt;</ph> en un objeto con el estado <ph id="ph2">&lt;see cref="F:System.ServiceModel.CommunicationState.Faulted" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.ICommunicationObject.EndClose(System.IAsyncResult)">
          <source>The timeout elapsed before the <ph id="ph1">&lt;see cref="T:System.ServiceModel.ICommunicationObject" /&gt;</ph> was able to close gracefully.</source>
          <target state="translated">El tiempo de espera transcurrido antes de que <ph id="ph1">&lt;see cref="T:System.ServiceModel.ICommunicationObject" /&gt;</ph> pudiera cerrarse correctamente.</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.ICommunicationObject.EndOpen(System.IAsyncResult)">
          <source>The <ph id="ph1">&lt;see cref="T:System.IAsyncResult" /&gt;</ph> that is returned by a call to the <ph id="ph2">&lt;see cref="Overload:System.ServiceModel.ICommunicationObject.BeginOpen" /&gt;</ph> method.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.IAsyncResult" /&gt;</ph> que se devuelve al llamar al método <ph id="ph2">&lt;see cref="Overload:System.ServiceModel.ICommunicationObject.BeginOpen" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.ICommunicationObject.EndOpen(System.IAsyncResult)">
          <source>Completes an asynchronous operation to open a communication object.</source>
          <target state="translated">Completa una operación asincrónica para abrir un objeto de comunicación.</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.ICommunicationObject.EndOpen(System.IAsyncResult)">
          <source>The <ph id="ph1">&lt;see cref="T:System.ServiceModel.ICommunicationObject" /&gt;</ph> was unable to be opened and has entered the <ph id="ph2">&lt;see cref="F:System.ServiceModel.CommunicationState.Faulted" /&gt;</ph> state.</source>
          <target state="translated">El <ph id="ph1">&lt;see cref="T:System.ServiceModel.ICommunicationObject" /&gt;</ph> no pudo abrirse y ha entrado en el estado <ph id="ph2">&lt;see cref="F:System.ServiceModel.CommunicationState.Faulted" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.ICommunicationObject.EndOpen(System.IAsyncResult)">
          <source>The timeout elapsed before the <ph id="ph1">&lt;see cref="T:System.ServiceModel.ICommunicationObject" /&gt;</ph> was able to enter the <ph id="ph2">&lt;see cref="F:System.ServiceModel.CommunicationState.Opened" /&gt;</ph> state and has entered the <ph id="ph3">&lt;see cref="F:System.ServiceModel.CommunicationState.Faulted" /&gt;</ph> state.</source>
          <target state="translated">El tiempo de espera especificado transcurrió antes de que <ph id="ph1">&lt;see cref="T:System.ServiceModel.ICommunicationObject" /&gt;</ph> pudiera introducir el estado <ph id="ph2">&lt;see cref="F:System.ServiceModel.CommunicationState.Opened" /&gt;</ph> y ha introducido el estado <ph id="ph3">&lt;see cref="F:System.ServiceModel.CommunicationState.Faulted" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve" uid="E:System.ServiceModel.ICommunicationObject.Faulted">
          <source>Occurs when the communication object first enters the faulted state.</source>
          <target state="translated">Se produce cuando el objeto de comunicación introduce primero el estado de error.</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve" uid="T:System.ServiceModel.ICommunicationObject">
          <source>Causes a communication object to transition from the created state into the opened state.</source>
          <target state="translated">Hace que un objeto de comunicación pase del estado creado al estado abierto.</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.ICommunicationObject">
          <source>Versions with and without an explicit timeout are provided.</source>
          <target state="translated">Se proporcionan las versiones con y sin un tiempo de espera concreto.</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.ICommunicationObject.Open">
          <source>Causes a communication object to transition from the created state into the opened state.</source>
          <target state="translated">Hace que un objeto de comunicación pase del estado creado al estado abierto.</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.ICommunicationObject.Open">
          <source>When an <ph id="ph1">&lt;xref:System.ServiceModel.ICommunicationObject&gt;</ph> is instantiated, it begins in the <ph id="ph2">&lt;xref:System.ServiceModel.CommunicationState.Created&gt;</ph> state.</source>
          <target state="translated">Cuando se crea una instancia de <ph id="ph1">&lt;xref:System.ServiceModel.ICommunicationObject&gt;</ph>, comienza en el estado <ph id="ph2">&lt;xref:System.ServiceModel.CommunicationState.Created&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.ICommunicationObject.Open">
          <source>In the <ph id="ph1">&lt;xref:System.ServiceModel.CommunicationState.Created&gt;</ph> state, the object can be configured (for example, properties can be set, or events can be registered), but it is not yet usable to send or receive messages.</source>
          <target state="translated">En el estado <ph id="ph1">&lt;xref:System.ServiceModel.CommunicationState.Created&gt;</ph>, el objeto se puede configurar (por ejemplo, se pueden establecer las propiedades o registrar los eventos), pero no se puede usar todavía para enviar o recibir mensajes.</target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.ICommunicationObject.Open">
          <source>The <ph id="ph1">&lt;xref:System.ServiceModel.ICommunicationObject.Open%2A&gt;</ph> method causes an <ph id="ph2">&lt;xref:System.ServiceModel.ICommunicationObject&gt;</ph> to enter into the <ph id="ph3">&lt;xref:System.ServiceModel.CommunicationState.Opening&gt;</ph> state where it remains until the open operation succeeds, the open operation times out or fails and the object becomes faulted, or the <ph id="ph4">&lt;xref:System.ServiceModel.ICommunicationObject&gt;</ph> is aborted.</source>
          <target state="translated">El método <ph id="ph1">&lt;xref:System.ServiceModel.ICommunicationObject.Open%2A&gt;</ph> hace que <ph id="ph2">&lt;xref:System.ServiceModel.ICommunicationObject&gt;</ph> pase al estado <ph id="ph3">&lt;xref:System.ServiceModel.CommunicationState.Opening&gt;</ph> donde permanecerá hasta que la operación de apertura se realice correctamente, se agote el tiempo de espera de la operación de apertura y el objeto genere un error o se anule <ph id="ph4">&lt;xref:System.ServiceModel.ICommunicationObject&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.ICommunicationObject.Open">
          <source>In the <ph id="ph1">&lt;xref:System.ServiceModel.CommunicationState.Opened&gt;</ph> state, the <ph id="ph2">&lt;xref:System.ServiceModel.ICommunicationObject&gt;</ph> is usable (for example, messages can be received), but it is no longer configurable.</source>
          <target state="translated">En el estado <ph id="ph1">&lt;xref:System.ServiceModel.CommunicationState.Opened&gt;</ph>, se puede utilizar <ph id="ph2">&lt;xref:System.ServiceModel.ICommunicationObject&gt;</ph> (por ejemplo, se pueden recibir los mensajes), pero ya no se pueden configurar.</target>       </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.ICommunicationObject.Open">
          <source>There is also an asynchronous version of the open method that is initiated by calling <ph id="ph1">&lt;xref:System.ServiceModel.ICommunicationObject.BeginOpen%2A&gt;</ph> and completed by calling <ph id="ph2">&lt;xref:System.ServiceModel.ICommunicationObject.EndOpen%28System.IAsyncResult%29&gt;</ph>.</source>
          <target state="translated">Existe también una versión asincrónica del método de apertura que se inicia llamando a <ph id="ph1">&lt;xref:System.ServiceModel.ICommunicationObject.BeginOpen%2A&gt;</ph> y se completa llamando a <ph id="ph2">&lt;xref:System.ServiceModel.ICommunicationObject.EndOpen%28System.IAsyncResult%29&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.ICommunicationObject.Open">
          <source>The <ph id="ph1">&lt;see cref="T:System.ServiceModel.ICommunicationObject" /&gt;</ph> was unable to be opened and has entered the <ph id="ph2">&lt;see cref="F:System.ServiceModel.CommunicationState.Faulted" /&gt;</ph> state.</source>
          <target state="translated">El <ph id="ph1">&lt;see cref="T:System.ServiceModel.ICommunicationObject" /&gt;</ph> no pudo abrirse y ha entrado en el estado <ph id="ph2">&lt;see cref="F:System.ServiceModel.CommunicationState.Faulted" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.ICommunicationObject.Open">
          <source>The default open timeout elapsed before the <ph id="ph1">&lt;see cref="T:System.ServiceModel.ICommunicationObject" /&gt;</ph> was able to enter the <ph id="ph2">&lt;see cref="F:System.ServiceModel.CommunicationState.Opened" /&gt;</ph> state and has entered the <ph id="ph3">&lt;see cref="F:System.ServiceModel.CommunicationState.Faulted" /&gt;</ph> state.</source>
          <target state="translated">El tiempo de espera para la apertura predeterminado transcurrió antes de que <ph id="ph1">&lt;see cref="T:System.ServiceModel.ICommunicationObject" /&gt;</ph> pudiera introducir el estado <ph id="ph2">&lt;see cref="F:System.ServiceModel.CommunicationState.Opened" /&gt;</ph> y ha introducido el estado <ph id="ph3">&lt;see cref="F:System.ServiceModel.CommunicationState.Faulted" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.ICommunicationObject.Open(System.TimeSpan)">
          <source>The <ph id="ph1">&lt;see cref="T:System.TimeSpan" /&gt;</ph> that specifies how long the send operation has to complete before timing out.</source>
          <target state="translated">El objeto <ph id="ph1">&lt;see cref="T:System.TimeSpan" /&gt;</ph> que especifica el tiempo con el que cuenta la operación de envío para completarse antes de que se agote el tiempo de espera.</target>       </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.ICommunicationObject.Open(System.TimeSpan)">
          <source>Causes a communication object to transition from the created state into the opened state within a specified interval of time.</source>
          <target state="translated">Hace que un objeto de comunicación pase del estado creado al estado abierto dentro de un intervalo de tiempo especificado.</target>       </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.ICommunicationObject.Open(System.TimeSpan)">
          <source>When an <ph id="ph1">&lt;xref:System.ServiceModel.ICommunicationObject&gt;</ph> is instantiated, it begins in the <ph id="ph2">&lt;xref:System.ServiceModel.CommunicationState.Created&gt;</ph> state.</source>
          <target state="translated">Cuando se crea una instancia de <ph id="ph1">&lt;xref:System.ServiceModel.ICommunicationObject&gt;</ph>, comienza en el estado <ph id="ph2">&lt;xref:System.ServiceModel.CommunicationState.Created&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.ICommunicationObject.Open(System.TimeSpan)">
          <source>In the <ph id="ph1">&lt;xref:System.ServiceModel.CommunicationState.Created&gt;</ph> state, the object can be configured (for example, properties can be set, or events can be registered), but it is not yet usable to send or receive messages.</source>
          <target state="translated">En el estado <ph id="ph1">&lt;xref:System.ServiceModel.CommunicationState.Created&gt;</ph>, el objeto se puede configurar (por ejemplo, se pueden establecer las propiedades o registrar los eventos), pero no se puede usar todavía para enviar o recibir mensajes.</target>       </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.ICommunicationObject.Open(System.TimeSpan)">
          <source>The <ph id="ph1">&lt;xref:System.ServiceModel.ICommunicationObject.Open%2A&gt;</ph> method causes an <ph id="ph2">&lt;xref:System.ServiceModel.ICommunicationObject&gt;</ph> to enter into the <ph id="ph3">&lt;xref:System.ServiceModel.CommunicationState.Opening&gt;</ph> state where it remains until the open operation succeeds, the open operation times out or fails and the object becomes faulted, or the <ph id="ph4">&lt;xref:System.ServiceModel.ICommunicationObject&gt;</ph> is aborted.</source>
          <target state="translated">El método <ph id="ph1">&lt;xref:System.ServiceModel.ICommunicationObject.Open%2A&gt;</ph> hace que <ph id="ph2">&lt;xref:System.ServiceModel.ICommunicationObject&gt;</ph> pase al estado <ph id="ph3">&lt;xref:System.ServiceModel.CommunicationState.Opening&gt;</ph> donde permanecerá hasta que la operación de apertura se realice correctamente, se agote el tiempo de espera de la operación de apertura y el objeto genere un error o se anule <ph id="ph4">&lt;xref:System.ServiceModel.ICommunicationObject&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.ICommunicationObject.Open(System.TimeSpan)">
          <source>In the <ph id="ph1">&lt;xref:System.ServiceModel.CommunicationState.Opened&gt;</ph> state, the <ph id="ph2">&lt;xref:System.ServiceModel.ICommunicationObject&gt;</ph> is usable (for example, messages can be received), but it is no longer configurable.</source>
          <target state="translated">En el estado <ph id="ph1">&lt;xref:System.ServiceModel.CommunicationState.Opened&gt;</ph>, se puede utilizar <ph id="ph2">&lt;xref:System.ServiceModel.ICommunicationObject&gt;</ph> (por ejemplo, se pueden recibir los mensajes), pero ya no se pueden configurar.</target>       </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.ICommunicationObject.Open(System.TimeSpan)">
          <source>There is also an asynchronous version of the open method that is initiated by calling <ph id="ph1">&lt;xref:System.ServiceModel.ICommunicationObject.BeginOpen%2A&gt;</ph> and completed by calling <ph id="ph2">&lt;xref:System.ServiceModel.ICommunicationObject.EndOpen%28System.IAsyncResult%29&gt;</ph>.</source>
          <target state="translated">Existe también una versión asincrónica del método de apertura que se inicia llamando a <ph id="ph1">&lt;xref:System.ServiceModel.ICommunicationObject.BeginOpen%2A&gt;</ph> y se completa llamando a <ph id="ph2">&lt;xref:System.ServiceModel.ICommunicationObject.EndOpen%28System.IAsyncResult%29&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.ICommunicationObject.Open(System.TimeSpan)">
          <source>The <ph id="ph1">&lt;see cref="T:System.ServiceModel.ICommunicationObject" /&gt;</ph> was unable to be opened and has entered the <ph id="ph2">&lt;see cref="F:System.ServiceModel.CommunicationState.Faulted" /&gt;</ph> state.</source>
          <target state="translated">El <ph id="ph1">&lt;see cref="T:System.ServiceModel.ICommunicationObject" /&gt;</ph> no pudo abrirse y ha entrado en el estado <ph id="ph2">&lt;see cref="F:System.ServiceModel.CommunicationState.Faulted" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.ICommunicationObject.Open(System.TimeSpan)">
          <source>The specified timeout elapsed before the <ph id="ph1">&lt;see cref="T:System.ServiceModel.ICommunicationObject" /&gt;</ph> was able to enter the <ph id="ph2">&lt;see cref="F:System.ServiceModel.CommunicationState.Opened" /&gt;</ph> state and has entered the <ph id="ph3">&lt;see cref="F:System.ServiceModel.CommunicationState.Faulted" /&gt;</ph> state.</source>
          <target state="translated">El tiempo de espera especificado transcurrió antes de que <ph id="ph1">&lt;see cref="T:System.ServiceModel.ICommunicationObject" /&gt;</ph> pudiera introducir el estado <ph id="ph2">&lt;see cref="F:System.ServiceModel.CommunicationState.Opened" /&gt;</ph> y ha introducido el estado <ph id="ph3">&lt;see cref="F:System.ServiceModel.CommunicationState.Faulted" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.ICommunicationObject.Open(System.TimeSpan)">
          <source>The operation must throw a <ph id="ph1">&lt;see cref="T:System.TimeoutException" /&gt;</ph> if the specified <ph id="ph2">&lt;paramref name="timeout" /&gt;</ph> is exceeded.</source>
          <target state="translated">La operación debe iniciar un <ph id="ph1">&lt;see cref="T:System.TimeoutException" /&gt;</ph> si se supera el parámetro <ph id="ph2">&lt;paramref name="timeout" /&gt;</ph> especificado.</target>       </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve" uid="E:System.ServiceModel.ICommunicationObject.Opened">
          <source>Occurs when the communication object completes its transition from the opening state into the opened state.</source>
          <target state="translated">Se produce cuando el objeto de comunicación completa su transición del estado de apertura al estado abierto.</target>       </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve" uid="E:System.ServiceModel.ICommunicationObject.Opening">
          <source>Occurs when the communication object first enters the opening state.</source>
          <target state="translated">Se produce cuando el objeto de comunicación introduce primero el estado de apertura.</target>       </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.ServiceModel.ICommunicationObject.Opening">
          <source>This event occurs when the communication object first begins to transition from the <ph id="ph1">&lt;xref:System.ServiceModel.CommunicationState.Created&gt;</ph> state into the <ph id="ph2">&lt;xref:System.ServiceModel.CommunicationState.Opened&gt;</ph> state, immediately after either the <ph id="ph3">&lt;xref:System.ServiceModel.ICommunicationObject.Open%2A&gt;</ph> or <ph id="ph4">&lt;xref:System.ServiceModel.ICommunicationObject.BeginOpen%2A&gt;</ph> method is invoked.</source>
          <target state="translated">Este evento se produce cuando el objeto de comunicación comienza primero a pasar del estado <ph id="ph1">&lt;xref:System.ServiceModel.CommunicationState.Created&gt;</ph> al estado <ph id="ph2">&lt;xref:System.ServiceModel.CommunicationState.Opened&gt;</ph>, inmediatamente después se invoca el método <ph id="ph3">&lt;xref:System.ServiceModel.ICommunicationObject.Open%2A&gt;</ph> o <ph id="ph4">&lt;xref:System.ServiceModel.ICommunicationObject.BeginOpen%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve" uid="P:System.ServiceModel.ICommunicationObject.State">
          <source>Gets the current state of the communication-oriented object.</source>
          <target state="translated">Obtiene el estado actual del objeto orientado a la comunicación.</target>       </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ServiceModel.ICommunicationObject.State">
          <source>The value of the <ph id="ph1">&lt;see cref="T:System.ServiceModel.CommunicationState" /&gt;</ph> of the object.</source>
          <target state="translated">El valor de <ph id="ph1">&lt;see cref="T:System.ServiceModel.CommunicationState" /&gt;</ph> correspondiente al objeto.</target>       </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ServiceModel.ICommunicationObject.State">
          <source>The main communication states available to an <ph id="ph1">&lt;xref:System.ServiceModel.ICommunicationObject&gt;</ph> are:</source>
          <target state="translated">Los estados de comunicación principales disponibles para <ph id="ph1">&lt;xref:System.ServiceModel.ICommunicationObject&gt;</ph> son:</target>       </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ServiceModel.ICommunicationObject.State">
          <source><ph id="ph1">&lt;xref:System.ServiceModel.CommunicationState.Created&gt;</ph> <ph id="ph2">&lt;xref:System.ServiceModel.CommunicationState.Opened&gt;</ph></source>
          <target state="translated"><ph id="ph1">&lt;xref:System.ServiceModel.CommunicationState.Created&gt;</ph> <ph id="ph2">&lt;xref:System.ServiceModel.CommunicationState.Opened&gt;</ph></target>       </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ServiceModel.ICommunicationObject.State">
          <source>There are also transitory states that such an object can occupy when transitioning between the first three main states:</source>
          <target state="translated">Existen también estados transitorios que este tipo de objeto puede ocupar cuando se produce la transición entre los tres primeros estados principales:</target>       </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ServiceModel.ICommunicationObject.State">
          <source>This <ph id="ph1">&lt;xref:System.ServiceModel.CommunicationState&gt;</ph> defines the states that are valid for all communication-oriented objects in the system, including channels, listeners, the channel and listener factories, and the <ph id="ph2">&lt;xref:System.ServiceModel.ServiceHost&gt;</ph> class.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.ServiceModel.CommunicationState&gt;</ph> define los estados que son válidos para todos los objetos orientados a la comunicación en el sistema, incluidos los canales, agentes de escucha, generadores de canales y de agentes de escuchas y la clase <ph id="ph2">&lt;xref:System.ServiceModel.ServiceHost&gt;</ph>.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>