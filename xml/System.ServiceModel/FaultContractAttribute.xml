<Type Name="FaultContractAttribute" FullName="System.ServiceModel.FaultContractAttribute">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="795373f1ce9ff0f09829174199e504959b08004f" />
    <Meta Name="ms.sourcegitcommit" Value="3907f9a5780957d9c85af2e54c0a5bc2a5bf19ab" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="es-ES" />
    <Meta Name="ms.lasthandoff" Value="06/14/2018" />
    <Meta Name="ms.locfileid" Value="34316845" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class FaultContractAttribute : Attribute" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit FaultContractAttribute extends System.Attribute" />
  <TypeSignature Language="DocId" Value="T:System.ServiceModel.FaultContractAttribute" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class FaultContractAttribute&#xA;Inherits Attribute" />
  <TypeSignature Language="C++ CLI" Value="public ref class FaultContractAttribute sealed : Attribute" />
  <AssemblyInfo>
    <AssemblyName>System.ServiceModel</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Attribute</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.AttributeUsage(System.AttributeTargets.Method, AllowMultiple=true, Inherited=false)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Especifica uno o más errores de SOAP que se devuelven cuando se producen errores de procesamiento en una operación de servicio.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Marque una operación con el atributo <xref:System.ServiceModel.FaultContractAttribute> para declarar una o varias condiciones de excepción específicas que se agregarán a la descripción del Lenguaje de descripción de servicios Web (WSDL) correspondiente a la operación de servicio como mensajes de error de SOAP explícitos devueltos por la operación.  
  
 En todas las aplicaciones administradas, los errores de procesamiento están representados mediante objetos <xref:System.Exception>. En las aplicaciones basadas en SOAP, como las aplicaciones de Windows Communication Foundation (WCF), métodos de servicio comunican la información de error de procesamiento mediante mensajes de error SOAP. Dado que las aplicaciones WCF que se ejecutan en ambos tipos de sistemas de error, cualquier información de excepción administrada que se debe enviar al cliente debe convertirse de excepciones a errores SOAP. Puede usar los comportamientos de excepción de servicio predeterminados o controlar explícitamente si (y cómo) las excepciones se asignan a los mensajes de error. Para obtener información general de excepciones y errores SOAP en aplicaciones de WCF, vea [especificar y control de errores en contactos y servicios](~/docs/framework/wcf/specifying-and-handling-faults-in-contracts-and-services.md).  
  
 Se recomienda que las operaciones de servicio utilicen <xref:System.ServiceModel.FaultContractAttribute> para especificar formalmente todos los errores de SOAP que un cliente puede esperar recibir en el curso normal de una operación. Además, se recomienda que sólo se devuelva en un error de SOAP la información que un cliente deba conocer para minimizar la divulgación de información.  
  
-   La propiedad <xref:System.ServiceModel.FaultContractAttribute.Action%2A> controla la acción del mensaje de error.  
  
-   La propiedad <xref:System.ServiceModel.FaultContractAttribute.DetailType%2A> obtiene el tipo del objeto de detalle serializado en el mensaje de error.  
  
-   Las propiedades <xref:System.ServiceModel.FaultContractAttribute.Name%2A> y <xref:System.ServiceModel.FaultContractAttribute.Namespace%2A> controlan el nombre y el espacio de nombres, respectivamente, del mensaje de error.  
  
-   <xref:System.ServiceModel.FaultContractAttribute.HasProtectionLevel%2A> indica si el mensaje de error tiene un nivel de protección especificado y, en ese caso, será la propiedad <xref:System.ServiceModel.FaultContractAttribute.ProtectionLevel%2A> la que lo controle.  
  
> [!CAUTION]
>  Si un mensaje de error contiene información que es confidencial o puede provocar problemas de seguridad, se recomienda encarecidamente que se defina la propiedad <xref:System.ServiceModel.FaultContractAttribute.ProtectionLevel%2A>.  
  
-   Si establece explícitamente <xref:System.ServiceModel.FaultContractAttribute.ProtectionLevel%2A> en <xref:System.Net.Security.ProtectionLevel.Sign?displayProperty=nameWithType> o en <xref:System.Net.Security.ProtectionLevel.EncryptAndSign?displayProperty=nameWithType>, después deberá usar un enlace con la seguridad habilitada mediante la propiedad <xref:System.ServiceModel.SecurityMode?displayProperty=nameWithType> en el enlace o se producirá una excepción.  
  
-   Si selecciona un enlace que habilita la seguridad y no establece la propiedad <xref:System.ServiceModel.FaultContractAttribute.ProtectionLevel%2A> en cualquier parte del contrato, se cifrarán y firmarán todos los datos de la aplicación.  
  
-   Si selecciona un enlace que no tiene la seguridad habilitada (por ejemplo, <xref:System.ServiceModel.BasicHttpBinding?displayProperty=nameWithType> tiene la seguridad deshabilitada de forma predeterminada) y no se establece <xref:System.ServiceModel.FaultContractAttribute.ProtectionLevel%2A> explícitamente, no se protegerá ninguno de los datos de la aplicación.  
  
 En muchos escenarios, definir <xref:System.ServiceModel.FaultContractAttribute.ProtectionLevel%2A> en <xref:System.Net.Security.ProtectionLevel.EncryptAndSign> para los mensajes del error es suficiente. Para obtener más información, consulte [nivel de protección descripción](~/docs/framework/wcf/understanding-protection-level.md).  
  
 Para devolver un error especificado desde una operación marcada con <xref:System.ServiceModel.FaultContractAttribute>, inicie una <xref:System.ServiceModel.FaultException%601> (donde el parámetro de tipo es la información de error serializable) cuando la excepción administrada se produce durante la operación. Las aplicaciones de cliente WCF expuesta el error de SOAP como el mismo tipo, tal y como se inició en la implementación del cliente; es decir, como un <xref:System.ServiceModel.FaultException%601> (donde el typeparameter es la información de error serializable). <xref:System.ServiceModel.FaultContractAttribute> sólo se puede utilizar para especificar los errores de SOAP para las operaciones de servicio bidireccionales y para los pares de operación asincrónica; las operaciones unidireccionales no admiten los errores de SOAP y, por consiguiente, no admiten <xref:System.ServiceModel.FaultContractAttribute>.  
  
> [!NOTE]
>  Puede utilizar cualquier tipo serializable para llevar información de error. La única restricción en esta versión de WCF es que los tipos especificados en un <xref:System.ServiceModel.FaultContractAttribute> deben ser serializables por la <xref:System.Runtime.Serialization.DataContractSerializer?displayProperty=nameWithType>. Para la compatibilidad de serialización la <xref:System.Runtime.Serialization.DataContractSerializer> proporciona, consulte [serializador de contratos de datos](~/docs/framework/wcf/feature-details/data-contract-serializer.md).  
  
 Por ejemplo, para especificar que los clientes pueden esperar un error de SOAP que contiene <xref:System.Int32>, coloque ese parámetro de tipo en <xref:System.ServiceModel.FaultContractAttribute> en el método de servicio.  
  
> [!NOTE]
>  Los ejemplos de código siguientes no definen las propiedades de <xref:System.ServiceModel.FaultContractAttribute.ProtectionLevel%2A>, <xref:System.ServiceModel.FaultContractAttribute.Name%2A> o <xref:System.ServiceModel.FaultContractAttribute.Namespace%2A>.  
  
 [!code-csharp[C_FCA#1](~/samples/snippets/csharp/VS_Snippets_CFX/c_fca/cs/fcademo.cs#1)]
 [!code-vb[C_FCA#1](~/samples/snippets/visualbasic/VS_Snippets_CFX/c_fca/vb/fcademo.vb#1)]  
  
 A continuación, en su método de servicio, inicie un nuevo <xref:System.ServiceModel.FaultException%601> donde el parámetro de tipo es el tipo que contiene la información del error (en el caso anterior, <xref:System.Int32>). Por ejemplo:  
  
 [!code-csharp[C_FCA#2](~/samples/snippets/csharp/VS_Snippets_CFX/c_fca/cs/fcademo.cs#2)]
 [!code-vb[C_FCA#2](~/samples/snippets/visualbasic/VS_Snippets_CFX/c_fca/vb/fcademo.vb#2)]  
  
 El ejemplo anterior es muy básico; se puede pasar casi cualquier tipo de información utilizando un código <xref:System.Int32?displayProperty=nameWithType>, por lo que este tipo de detalle no es el más útil. Por lo general, aplicaciones WCF que especifican los errores SOAP con tipos de detalles específicos de los requisitos de información de error del cliente. Para obtener un ejemplo más completo, consulte la sección Ejemplo.  
  
> [!NOTE]
>  Si especifica <xref:System.ServiceModel.FaultException%601> donde el parámetro de tipo es <xref:System.String?displayProperty=nameWithType>, se asignará el valor de la cadena a la propiedad Detail en la aplicación cliente. Los clientes no pueden recuperar esa cadena llamando al método <xref:System.ServiceModel.FaultException%601.ToString%2A?displayProperty=nameWithType>. Para que se devuelva el valor de la cadena cuando la aplicación cliente llama a <xref:System.Exception.ToString%2A?displayProperty=nameWithType>, se inicia una excepción <xref:System.ServiceModel.FaultException?displayProperty=nameWithType> dentro de la operación y se pasa la cadena al constructor.  
  
 Para controlar explícitamente el comportamiento de la aplicación cuando se inicia una excepción o una <xref:System.ServiceModel.FaultException%601>, implemente la interfaz <xref:System.ServiceModel.Dispatcher.IErrorHandler?displayProperty=nameWithType> en un <xref:System.ServiceModel.Description.IServiceBehavior?displayProperty=nameWithType>, <xref:System.ServiceModel.Description.IContractBehavior?displayProperty=nameWithType> o <xref:System.ServiceModel.Description.IEndpointBehavior?displayProperty=nameWithType> y asígnesela a la propiedad <xref:System.ServiceModel.Dispatcher.ChannelDispatcher.ErrorHandlers%2A?displayProperty=nameWithType>. <xref:System.ServiceModel.Dispatcher.IErrorHandler> le permite controlar explícitamente el error de SOAP que se genera y si se debe enviar al cliente.  
  
 Para facilitar la depuración, establezca el <xref:System.ServiceModel.ServiceBehaviorAttribute.IncludeExceptionDetailInFaults%2A?displayProperty=nameWithType> a `true` en el código o puede usar el <xref:System.ServiceModel.Description.ServiceDebugBehavior.IncludeExceptionDetailInFaults%2A?displayProperty=nameWithType> en un archivo de configuración de aplicación. Cuando se habilita, el servicio devuelve automáticamente información de excepción al autor de la llamada. Estos errores aparecen en el cliente como excepciones <xref:System.ServiceModel.FaultException>.  
  
> [!IMPORTANT]
>  Dado que las excepciones administradas pueden exponer información interna de la aplicación, establecer <xref:System.ServiceModel.ServiceBehaviorAttribute.IncludeExceptionDetailInFaults%2A?displayProperty=nameWithType> o <xref:System.ServiceModel.Description.ServiceDebugBehavior.IncludeExceptionDetailInFaults%2A?displayProperty=nameWithType> a `true` puede permitir que los clientes WCF para obtener información sobre excepciones de la operación de servicio internas, incluida personal identificación personal u otra información confidencial.  
>   
>  Por consiguiente, establecer <xref:System.ServiceModel.ServiceBehaviorAttribute.IncludeExceptionDetailInFaults%2A?displayProperty=nameWithType> o <xref:System.ServiceModel.Description.ServiceDebugBehavior.IncludeExceptionDetailInFaults%2A?displayProperty=nameWithType> en `true` solo está recomendado como una manera de depurar temporalmente una aplicación de servicio. Además, el WSDL de un método que devuelve excepciones administradas no controladas de esta manera no contiene el contrato para la <xref:System.ServiceModel.FaultException%601> de tipo <xref:System.String>. Los clientes deben esperar la posibilidad de un error SOAP desconocido (devuelto a los clientes WCF como <xref:System.ServiceModel.FaultException?displayProperty=nameWithType> objetos) para obtener correctamente la información de depuración.  
  
   
  
## Examples  
 El ejemplo de código siguiente muestra el uso de <xref:System.ServiceModel.FaultContractAttribute> para especificar que la operación `SampleMethod` puede devolver un error de SOAP con el tipo de detalle de `GreetingFault`.  
  
 [!code-csharp[FaultContractAttribute#1](~/samples/snippets/csharp/VS_Snippets_CFX/faultcontractattribute/cs/services.cs#1)]
 [!code-vb[FaultContractAttribute#1](~/samples/snippets/visualbasic/VS_Snippets_CFX/faultcontractattribute/vb/services.vb#1)]  
  
 En el ejemplo de código siguiente se muestra que los clientes WCF de `ISampleService` experimentan este error SOAP como un <xref:System.ServiceModel.FaultException%601> de tipo `GreetingFault`.  
  
 [!code-csharp[FaultContractAttribute#3](~/samples/snippets/csharp/VS_Snippets_CFX/faultcontractattribute/cs/client.cs#3)]
 [!code-vb[FaultContractAttribute#3](~/samples/snippets/visualbasic/VS_Snippets_CFX/faultcontractattribute/vb/client.vb#3)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public FaultContractAttribute (Type detailType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Type detailType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.FaultContractAttribute.#ctor(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (detailType As Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; FaultContractAttribute(Type ^ detailType);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="detailType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="detailType">El tipo serializable que contiene información de error para el autor de la llamada.</param>
        <summary>Inicializa una nueva instancia de la clase <see cref="T:System.ServiceModel.FaultContractAttribute" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El constructor se ejecuta normalmente aplicando el atributo a un método de servicio y especificando un tipo como el argumento en el atributo.  
  
   
  
## Examples  
 El ejemplo de código siguiente muestra el uso de <xref:System.ServiceModel.FaultContractAttribute> para especificar que la operación `SampleMethod` puede devolver un error de SOAP con el tipo de detalle de `GreetingFault`.  
  
 [!code-csharp[FaultContractAttribute#1](~/samples/snippets/csharp/VS_Snippets_CFX/faultcontractattribute/cs/services.cs#1)]
 [!code-vb[FaultContractAttribute#1](~/samples/snippets/visualbasic/VS_Snippets_CFX/faultcontractattribute/vb/services.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">El argumento <paramref name="detailType" /> es <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="Action">
      <MemberSignature Language="C#" Value="public string Action { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Action" />
      <MemberSignature Language="DocId" Value="P:System.ServiceModel.FaultContractAttribute.Action" />
      <MemberSignature Language="VB.NET" Value="Public Property Action As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Action { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene o establece la acción del mensaje de error de SOAP que se especifica como parte del contrato de la operación.</summary>
        <value>El valor de la acción para el mensaje de error de SOAP.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Se utiliza para controlar la acción del mensaje de error de SOAP.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DetailType">
      <MemberSignature Language="C#" Value="public Type DetailType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type DetailType" />
      <MemberSignature Language="DocId" Value="P:System.ServiceModel.FaultContractAttribute.DetailType" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property DetailType As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Type ^ DetailType { Type ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene el tipo de un objeto serializable que contiene información de error.</summary>
        <value>El tipo que representa la clase de error serializable.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 El ejemplo de código siguiente muestra el uso de <xref:System.ServiceModel.FaultContractAttribute> para especificar que la operación `SampleMethod` puede devolver un error de SOAP con el tipo de detalle de `GreetingFault`.  
  
 [!code-csharp[FaultContractAttribute#1](~/samples/snippets/csharp/VS_Snippets_CFX/faultcontractattribute/cs/services.cs#1)]
 [!code-vb[FaultContractAttribute#1](~/samples/snippets/visualbasic/VS_Snippets_CFX/faultcontractattribute/vb/services.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="HasProtectionLevel">
      <MemberSignature Language="C#" Value="public bool HasProtectionLevel { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool HasProtectionLevel" />
      <MemberSignature Language="DocId" Value="P:System.ServiceModel.FaultContractAttribute.HasProtectionLevel" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property HasProtectionLevel As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool HasProtectionLevel { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene un valor que indica si el mensaje de error de SOAP tiene un nivel de protección asignado.</summary>
        <value>
          <see langword="true" /> si el mensaje de error tiene un nivel de protección; de lo contrario, <see langword="false" />. El valor predeterminado es <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use la propiedad <xref:System.ServiceModel.FaultContractAttribute.HasProtectionLevel%2A> para especificar si el mensaje de error de SOAP debe cifrarse, firmarse o ambas cosas. Consulte la propiedad <xref:System.ServiceModel.FaultContractAttribute.ProtectionLevel%2A> para obtener más información.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Name">
      <MemberSignature Language="C#" Value="public string Name { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Name" />
      <MemberSignature Language="DocId" Value="P:System.ServiceModel.FaultContractAttribute.Name" />
      <MemberSignature Language="VB.NET" Value="Public Property Name As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Name { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene o establece el nombre del mensaje de error en el Lenguaje de descripción de servicios Web (WSDL).</summary>
        <value>El nombre del mensaje de error. El valor predeterminado es el nombre del tipo utilizado como detalle del error.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Namespace">
      <MemberSignature Language="C#" Value="public string Namespace { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Namespace" />
      <MemberSignature Language="DocId" Value="P:System.ServiceModel.FaultContractAttribute.Namespace" />
      <MemberSignature Language="VB.NET" Value="Public Property Namespace As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Namespace { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene o establece el espacio de nombres del error de SOAP.</summary>
        <value>El espacio de nombres del error de SOAP.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ProtectionLevel">
      <MemberSignature Language="C#" Value="public System.Net.Security.ProtectionLevel ProtectionLevel { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Net.Security.ProtectionLevel ProtectionLevel" />
      <MemberSignature Language="DocId" Value="P:System.ServiceModel.FaultContractAttribute.ProtectionLevel" />
      <MemberSignature Language="VB.NET" Value="Public Property ProtectionLevel As ProtectionLevel" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Net::Security::ProtectionLevel ProtectionLevel { System::Net::Security::ProtectionLevel get(); void set(System::Net::Security::ProtectionLevel value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.Security.ProtectionLevel</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Especifica el nivel de protección que el error de SOAP requiere del enlace.</summary>
        <value>Uno de los valores de <see cref="T:System.Net.Security.ProtectionLevel" />. El valor predeterminado es <see cref="F:System.Net.Security.ProtectionLevel.None" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Utilice la propiedad <xref:System.ServiceModel.Description.FaultDescription.ProtectionLevel%2A?displayProperty=nameWithType> para especificar hasta qué punto el enlace debe cifrar, firmar o ambas cosas al enviar el error de SOAP. Se recomienda encarecidamente que el error de una operación decida explícitamente los requisitos de nivel de protección de seguridad en el contrato. El nivel de protección predeterminado es <xref:System.Net.Security.ProtectionLevel.None?displayProperty=nameWithType>, lo que significa que el mensaje de error de SOAP que está definiendo no requiere cifrado ni una firma digital (aunque el enlace puede proporcionar esta compatibilidad si se configura para ello). Si un mensaje de error contiene información que es confidencial o que puede provocar problemas de seguridad, se recomienda encarecidamente que se defina la propiedad <xref:System.ServiceModel.FaultContractAttribute.ProtectionLevel%2A> en <xref:System.Net.Security.ProtectionLevel.EncryptAndSign?displayProperty=nameWithType>. Para obtener más información acerca de los problemas de seguridad, consulte [nivel de protección descripción](~/docs/framework/wcf/understanding-protection-level.md).  
  
 El comportamiento de protección en el tiempo de ejecución es la combinación de las propiedades de nivel de protección que tienen una estructura jerárquica. Al establecer el valor extremo, se establece la configuración predeterminada para todos los ámbitos más restringidos a menos que se establezca un valor diferente para un ámbito más restringido explícitamente. En este caso, el valor externo sigue siendo el predeterminado para todos los ámbitos más restringidos con la excepción del definido específicamente.  
  
 Por ejemplo, si <xref:System.ServiceModel.ServiceContractAttribute.ProtectionLevel%2A?displayProperty=nameWithType> está establecido en <xref:System.Net.Security.ProtectionLevel.EncryptAndSign?displayProperty=nameWithType> y ningún otro ámbito más restringido tiene los valores de nivel de protección, se cifrarán y firmarán todos los mensajes en un contrato de la operación, incluidos los mensajes de error. Si, sin embargo, una de esas operaciones tiene <xref:System.ServiceModel.OperationContractAttribute> definido en <xref:System.Net.Security.ProtectionLevel.Sign?displayProperty=nameWithType>, a continuación, se firmarán los mensajes para esa operación pero se cifrarán y firmarán todos los demás mensajes en el contrato, incluidos los mensajes de error.  
  
 Los ámbitos en los que se establecen estos valores son:  
  
 <xref:System.ServiceModel.ServiceContractAttribute.ProtectionLevel%2A?displayProperty=nameWithType>  
  
 <xref:System.ServiceModel.OperationContractAttribute.ProtectionLevel%2A?displayProperty=nameWithType>  
  
 <xref:System.ServiceModel.FaultContractAttribute.ProtectionLevel%2A?displayProperty=nameWithType>  
  
 <xref:System.ServiceModel.MessageContractAttribute.ProtectionLevel%2A?displayProperty=nameWithType>  
  
 La propiedad <xref:System.ServiceModel.MessageContractMemberAttribute.ProtectionLevel%2A?displayProperty=nameWithType> en <xref:System.ServiceModel.MessageHeaderAttribute?displayProperty=nameWithType>.  
  
 La propiedad <xref:System.ServiceModel.MessageContractMemberAttribute.ProtectionLevel%2A?displayProperty=nameWithType> en <xref:System.ServiceModel.MessageBodyMemberAttribute?displayProperty=nameWithType>.  
  
 Cuando no se haya especificado de manera concreta ningún nivel de protección en el contrato y el enlace subyacente admita la seguridad (ya sea en el nivel de transporte o de mensaje), el nivel de protección efectivo para todo el contrato será <xref:System.Net.Security.ProtectionLevel.EncryptAndSign?displayProperty=nameWithType>. Si el enlace no admite la seguridad (como <xref:System.ServiceModel.BasicHttpBinding>), el <xref:System.Net.Security.ProtectionLevel?displayProperty=nameWithType> eficaz será <xref:System.Net.Security.ProtectionLevel.None?displayProperty=nameWithType> para todo el contrato. El resultado será (en función del enlace del extremo) que los clientes pueden exigir una protección de nivel de seguridad diferente para los mensajes o el transporte aun cuando el contrato especifique <xref:System.Net.Security.ProtectionLevel.None?displayProperty=nameWithType>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>