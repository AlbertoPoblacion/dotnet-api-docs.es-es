<Type Name="MessageContractMemberAttribute" FullName="System.ServiceModel.MessageContractMemberAttribute">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="8bd7dd5ba88b9904b8ea869d643e4d030ff67158" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="es-ES" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36610669" />
  </Metadata>
  <TypeSignature Language="C#" Value="public abstract class MessageContractMemberAttribute : Attribute" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit MessageContractMemberAttribute extends System.Attribute" />
  <TypeSignature Language="DocId" Value="T:System.ServiceModel.MessageContractMemberAttribute" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class MessageContractMemberAttribute&#xA;Inherits Attribute" />
  <TypeSignature Language="C++ CLI" Value="public ref class MessageContractMemberAttribute abstract : Attribute" />
  <TypeSignature Language="F#" Value="type MessageContractMemberAttribute = class&#xA;    inherit Attribute" />
  <AssemblyInfo>
    <AssemblyName>System.ServiceModel</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Attribute</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Declara los miembros base para <see cref="T:System.ServiceModel.MessageBodyMemberAttribute" /> y <see cref="T:System.ServiceModel.MessageHeaderAttribute" />.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Esta clase contiene las propiedades comunes a todas las partes de un mensaje SOAP. Por ejemplo, todas las partes tienen un nombre y un espacio de nombres y, potencialmente, un nivel de seguridad aplicado.  
  
 Para obtener información sobre cómo controlar la serialización del contenido de un cuerpo SOAP sin modificar el propio sobre SOAP predeterminado, consulte <xref:System.Runtime.Serialization.DataContractAttribute?displayProperty=nameWithType>, [especificación de transferencia de datos en contratos de servicio](~/docs/framework/wcf/feature-details/specifying-data-transfer-in-service-contracts.md), y [Using Data Contratos](~/docs/framework/wcf/feature-details/using-data-contracts.md).  
  
 Para obtener más información sobre la creación de contratos de mensajes, vea [usar contratos de mensaje](~/docs/framework/wcf/feature-details/using-message-contracts.md).  
  
   
  
## Examples  
 Los ejemplos de código siguientes muestran un contrato de mensaje personalizado que utiliza los atributos <xref:System.ServiceModel.MessageContractAttribute>, <xref:System.ServiceModel.MessageHeaderAttribute> y <xref:System.ServiceModel.MessageBodyMemberAttribute> (que todos heredan de <xref:System.ServiceModel.MessageContractMemberAttribute>) para crear mensajes con tipo personalizados que se usarán en operaciones. En este caso, hay tres miembros que se serializan en el cuerpo del mensaje SOAP: `sourceAccount`, `targetAccount` y el valor `amount` (que se serializa en un elemento con el nombre `transactionAmount`). Además, el elemento de encabezado SOAP `IsAudited` reside en el espacio de nombres `http://schemas.contosobank.com/auditing/2005` y `sourceAccount` se cifra y se firma digitalmente.  
  
> [!NOTE]
>  Los tipos `Operation` y `Account` deben tener un contrato de datos.  
  
```csharp  
[MessageContract]  
public class BankingTransaction  
{  
  [MessageHeader]   
  public Operation operation;  
  [MessageHeader(Namespace="http://schemas.contosobank.com/auditing/2005")]   
  public bool IsAudited;  
  [MessageBody(ProtectionLevel=ProtectionLevel.EncryptAndSign)]   
  public Account sourceAccount;  
  [MessageBody]   
  public Account targetAccount;  
  [MessageBody(Name="transactionAmount")]   
  public int amount;  
```  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected MessageContractMemberAttribute ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.MessageContractMemberAttribute.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; MessageContractMemberAttribute();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Inicializa una nueva instancia de la clase <see cref="T:System.ServiceModel.MessageContractMemberAttribute" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HasProtectionLevel">
      <MemberSignature Language="C#" Value="public bool HasProtectionLevel { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool HasProtectionLevel" />
      <MemberSignature Language="DocId" Value="P:System.ServiceModel.MessageContractMemberAttribute.HasProtectionLevel" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property HasProtectionLevel As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool HasProtectionLevel { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.HasProtectionLevel : bool" Usage="System.ServiceModel.MessageContractMemberAttribute.HasProtectionLevel" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Cuando se invalida en una clase derivada, obtiene un valor que indica si el miembro tiene un nivel de protección asignado.</summary>
        <value>
          <see langword="true" /> si el miembro tiene un nivel de protección; de lo contrario, <see langword="false" />.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Name">
      <MemberSignature Language="C#" Value="public string Name { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Name" />
      <MemberSignature Language="DocId" Value="P:System.ServiceModel.MessageContractMemberAttribute.Name" />
      <MemberSignature Language="VB.NET" Value="Public Property Name As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Name { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Name : string with get, set" Usage="System.ServiceModel.MessageContractMemberAttribute.Name" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Especifica el nombre del elemento que se corresponde a este miembro.</summary>
        <value>El nombre del elemento que se corresponde a este miembro. Esta cadena debe ser un nombre de elemento XML válido.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Los ejemplos de código siguientes muestran un contrato de mensaje personalizado que utiliza los atributos <xref:System.ServiceModel.MessageContractAttribute>, <xref:System.ServiceModel.MessageHeaderAttribute> y <xref:System.ServiceModel.MessageBodyMemberAttribute> para crear mensajes personalizados y fuertemente tipados que usar como parámetros. En este caso, hay tres miembros de datos que se serializan en el cuerpo del mensaje SOAP: `sourceAccount`, `targetAccount` y el valor `amount` (que se serializa en un elemento con el nombre `transactionAmount`). Además, el elemento de encabezado SOAP `IsAudited` reside en el espacio de nombres `http://schemas.contosobank.com/auditing/2005`.  
  
> [!NOTE]
>  Los tipos `Operation` y `Account` también deben tener un contrato de datos.  
  
```csharp  
[MessageContract]  
public class BankingTransaction  
{  
  [MessageHeader] public Operation operation;  
  [MessageHeader(Namespace="http://schemas.contosobank.com/auditing/2005")] public bool IsAudited;  
  [MessageBody] public Account sourceAccount;  
  [MessageBody] public Account targetAccount;  
  [MessageBody(Name="transactionAmount")] public int amount;  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Namespace">
      <MemberSignature Language="C#" Value="public string Namespace { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Namespace" />
      <MemberSignature Language="DocId" Value="P:System.ServiceModel.MessageContractMemberAttribute.Namespace" />
      <MemberSignature Language="VB.NET" Value="Public Property Namespace As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Namespace { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Namespace : string with get, set" Usage="System.ServiceModel.MessageContractMemberAttribute.Namespace" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Especifica el espacio de nombres del elemento que se corresponde a este miembro.</summary>
        <value>Un URI de espacio de nombres del elemento que se corresponde con este miembro.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Los ejemplos de código siguientes muestran un contrato de mensaje personalizado que utiliza los atributos <xref:System.ServiceModel.MessageContractAttribute>, <xref:System.ServiceModel.MessageHeaderAttribute> y <xref:System.ServiceModel.MessageBodyMemberAttribute> (que todos heredan de <xref:System.ServiceModel.MessageContractMemberAttribute>) para crear mensajes con tipo personalizados que se usarán en operaciones. En este caso, hay tres miembros que se serializan en el cuerpo del mensaje SOAP: `sourceAccount`, `targetAccount` y el valor `amount` (que se serializa en un elemento con el nombre `transactionAmount`). Además, el elemento de encabezado SOAP `IsAudited` reside en el espacio de nombres `http://schemas.contosobank.com/auditing/2005` y `sourceAccount` se cifra y se firma digitalmente.  
  
> [!NOTE]
>  Los tipos `Operation` y `Account` deben tener un contrato de datos.  
  
```csharp  
[MessageContract]  
public class BankingTransaction  
{  
  [MessageHeader] public Operation operation;  
  [MessageHeader(Namespace="http://schemas.contosobank.com/auditing/2005")] public bool IsAudited;  
  [MessageBody] public Account sourceAccount;  
  [MessageBody] public Account targetAccount;  
  [MessageBody(Name="transactionAmount")] public int amount;  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ProtectionLevel">
      <MemberSignature Language="C#" Value="public System.Net.Security.ProtectionLevel ProtectionLevel { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Net.Security.ProtectionLevel ProtectionLevel" />
      <MemberSignature Language="DocId" Value="P:System.ServiceModel.MessageContractMemberAttribute.ProtectionLevel" />
      <MemberSignature Language="VB.NET" Value="Public Property ProtectionLevel As ProtectionLevel" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Net::Security::ProtectionLevel ProtectionLevel { System::Net::Security::ProtectionLevel get(); void set(System::Net::Security::ProtectionLevel value); };" />
      <MemberSignature Language="F#" Value="member this.ProtectionLevel : System.Net.Security.ProtectionLevel with get, set" Usage="System.ServiceModel.MessageContractMemberAttribute.ProtectionLevel" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.Security.ProtectionLevel</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Especifica si el miembro será transmitido tal cual, está firmado, o firmado y cifrado.</summary>
        <value>Uno de los valores de <see cref="T:System.Net.Security.ProtectionLevel" />. El valor predeterminado es <see cref="F:System.Net.Security.ProtectionLevel.None" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Para utilizar la propiedad <xref:System.ServiceModel.MessageContractMemberAttribute.ProtectionLevel%2A> en los atributos <xref:System.ServiceModel.MessageHeaderAttribute> o <xref:System.ServiceModel.MessageBodyMemberAttribute>, debe configurar el enlace y los comportamientos correctamente. Si estas características de seguridad se utilizan sin una configuración apropiada (por ejemplo, utilizando <xref:System.Net.Security.ProtectionLevel.Sign?displayProperty=nameWithType> con una parte del mensaje sin proporcionar las credenciales de seguridad), se iniciará una excepción en el tiempo de ejecución.  
  
 Además, el nivel de protección se determina individualmente para cada encabezado. Sin embargo, el cuerpo SOAP tiene sólo un nivel de protección, sin tener en cuenta el número de partes del cuerpo. El valor de propiedad <xref:System.ServiceModel.MessageContractMemberAttribute.ProtectionLevel%2A> más alto de todas las partes del cuerpo determina el nivel de protección del cuerpo. Por ejemplo, considere la siguiente clase:  
  
```csharp  
[MessageContract]  
public class PatientRecord  
{  
   [MessageHeader(ProtectionLevel=None)] public int recordID;  
   [MessageHeader(ProtectionLevel=Sign)] public string patientName;  
   [MessageHeader(ProtectionLevel=EncryptAndSign)] public string SSN;  
   [MessageBody(ProtectionLevel=None)] public string comments;  
   [MessageBody(ProtectionLevel=Sign)] public string diagnosis;  
   [MessageBody(ProtectionLevel=EncryptAndSign)] public string medicalHistory;  
}  
```  
  
 En este ejemplo, el encabezado `recordID` no está protegido, se firma `patientName`, y se cifra y se firma `SSN`. Hay por lo menos una parte del cuerpo, `medicalHistory`, con <xref:System.Net.Security.ProtectionLevel.EncryptAndSign?displayProperty=nameWithType> y así el cuerpo del mensaje completo se cifra y firma, aun cuando las partes del cuerpo `comments` y `diagnosis` especifican los niveles más bajos de protección.  
  
 El comportamiento de protección en el tiempo de ejecución es la combinación de los valores de nivel de protección definida en las propiedades siguientes. Estas propiedades tienen una estructura jerárquica. Al establecer el valor punto de conexión, se establece la configuración predeterminada para todos los ámbitos más restringidos a menos que se establezca un valor diferente para un ámbito más restringido explícitamente. En este caso, el valor externo sigue siendo el predeterminado para todos los ámbitos más restringidos con la excepción del definido específicamente.  
  
 Por ejemplo, si <xref:System.ServiceModel.ServiceContractAttribute.ProtectionLevel%2A?displayProperty=nameWithType> está establecido en <xref:System.Net.Security.ProtectionLevel.EncryptAndSign?displayProperty=nameWithType> y ningún otro ámbito más restringido tiene valores de nivel de protección, se cifrarán y firmarán todos los mensajes en un contrato de la operación. Si, sin embargo, una de esas operaciones tiene <xref:System.ServiceModel.OperationContractAttribute> definido en <xref:System.Net.Security.ProtectionLevel.Sign?displayProperty=nameWithType>, se firmarán los mensajes para esa operación pero se cifrarán y firmarán todos los demás mensajes en el contrato.  
  
 Para obtener más información acerca de los niveles de protección y sus suposiciones y ámbitos, consulte [nivel de protección descripción](~/docs/framework/wcf/understanding-protection-level.md).  
  
 Los ámbitos en los que se establecen estos valores son:  
  
 <xref:System.ServiceModel.ServiceContractAttribute.ProtectionLevel%2A?displayProperty=nameWithType>  
  
 <xref:System.ServiceModel.OperationContractAttribute.ProtectionLevel%2A?displayProperty=nameWithType>  
  
 <xref:System.ServiceModel.FaultContractAttribute.ProtectionLevel%2A?displayProperty=nameWithType>  
  
 <xref:System.ServiceModel.MessageContractAttribute.ProtectionLevel%2A?displayProperty=nameWithType>  
  
 La propiedad <xref:System.ServiceModel.MessageContractMemberAttribute.ProtectionLevel%2A?displayProperty=nameWithType> en <xref:System.ServiceModel.MessageHeaderAttribute?displayProperty=nameWithType>.  
  
 La propiedad <xref:System.ServiceModel.MessageContractMemberAttribute.ProtectionLevel%2A?displayProperty=nameWithType> en <xref:System.ServiceModel.MessageBodyMemberAttribute?displayProperty=nameWithType>.  
  
 Cuando no se haya especificado de manera concreta ningún nivel de protección en el contrato y el enlace subyacente admita la seguridad (ya sea en el nivel de transporte o de mensaje), el nivel de protección efectivo para todo el contrato será <xref:System.Net.Security.ProtectionLevel.EncryptAndSign?displayProperty=nameWithType>. Si el enlace no admite la seguridad (como <xref:System.ServiceModel.BasicHttpBinding>), el <xref:System.Net.Security.ProtectionLevel?displayProperty=nameWithType> eficaz será <xref:System.Net.Security.ProtectionLevel.None?displayProperty=nameWithType> para todo el contrato. El resultado será (en función del enlace del extremo) que los clientes pueden exigir una protección de nivel de seguridad diferente para los mensajes o el transporte aun cuando el contrato especifique <xref:System.Net.Security.ProtectionLevel.None?displayProperty=nameWithType>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>