<Type Name="ServiceAuthorizationManager" FullName="System.ServiceModel.ServiceAuthorizationManager">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="95ea7afefd3fdd4d82ada474a808842e3166a30b" />
    <Meta Name="ms.sourcegitcommit" Value="9dda17222b9f7d3edf130133bfb1370d5b410a4b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="es-ES" />
    <Meta Name="ms.lasthandoff" Value="09/22/2018" />
    <Meta Name="ms.locfileid" Value="46641256" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class ServiceAuthorizationManager" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit ServiceAuthorizationManager extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.ServiceModel.ServiceAuthorizationManager" />
  <TypeSignature Language="VB.NET" Value="Public Class ServiceAuthorizationManager" />
  <TypeSignature Language="C++ CLI" Value="public ref class ServiceAuthorizationManager" />
  <TypeSignature Language="F#" Value="type ServiceAuthorizationManager = class" />
  <AssemblyInfo>
    <AssemblyName>System.ServiceModel</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Proporciona la comprobación de acceso de autorización para las operaciones del servicio.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Esta clase es responsable de evaluar todas las directivas (reglas que definen lo que un usuario puede hacer), comparar las directivas con las notificaciones realizadas por un cliente, establecer el <xref:System.IdentityModel.Policy.AuthorizationContext> resultante en <xref:System.ServiceModel.ServiceSecurityContext> y proporcionar la decisión de autorización sobre si se debe permitir o denegar el acceso a una operación del servicio determinada para el autor de una llamada.  
  
 El <xref:System.ServiceModel.ServiceAuthorizationManager.CheckAccessCore%2A> método se llama por la infraestructura de Windows Communication Foundation (WCF) cada vez que se realiza un intento para tener acceso a un recurso. El método devuelve `true` o `false` para permitir o denegar el acceso, respectivamente.  
  
 El <xref:System.ServiceModel.ServiceAuthorizationManager> forma parte de WCF*modelo de identidad* infraestructura. El Modelo de identidad le permite crear directivas de autorización personalizadas y esquemas de autorización personalizados. Para obtener más información sobre cómo funciona el modelo de identidad, vea [Administrar notificaciones y autorización con el modelo de identidad](~/docs/framework/wcf/feature-details/managing-claims-and-authorization-with-the-identity-model.md).  
  
## <a name="custom-authorization"></a>Autorización personalizada  
 Esta clase no realiza ninguna autorización y permite que los usuarios tengan acceso a todas las operaciones del servicio. Para proporcionar una autorización más restrictiva, debe crear un administrador de autorización personalizado que compruebe las directivas personalizadas. Para ello, herede de esta clase e invalide el método <xref:System.ServiceModel.ServiceAuthorizationManager.CheckAccessCore%2A>. Especifique la instancia de la clase derivada a través de la propiedad <xref:System.ServiceModel.Dispatcher.DispatchRuntime.ServiceAuthorizationManager%2A>.  
  
 En <xref:System.ServiceModel.ServiceAuthorizationManager.CheckAccessCore%2A>, la aplicación puede utilizar el objeto <xref:System.ServiceModel.OperationContext> para tener acceso a la identidad del autor de la llamada (<xref:System.ServiceModel.OperationContext.ServiceSecurityContext%2A>).  
  
 Obteniendo la propiedad <xref:System.ServiceModel.OperationContext.IncomingMessageHeaders%2A>, que devuelve un objeto <xref:System.ServiceModel.Channels.MessageHeaders>, la aplicación puede tener acceso al servicio (<xref:System.ServiceModel.Channels.MessageHeaders.To%2A>) y a la operación (<xref:System.ServiceModel.Channels.MessageHeaders.Action%2A>).  
  
 Obteniendo la propiedad <xref:System.ServiceModel.OperationContext.RequestContext%2A>, que devuelve un objeto <xref:System.ServiceModel.Channels.RequestContext>, la aplicación puede obtener acceso el mensaje de solicitud completo (<xref:System.ServiceModel.Channels.RequestContext.RequestMessage%2A>) y tomar la decisión de la autorización en consecuencia.  
  
 Para obtener un ejemplo, vea [Cómo: crear un administrador de autorización personalizado para un servicio](~/docs/framework/wcf/extending/how-to-create-a-custom-authorization-manager-for-a-service.md).  
  
 Para crear las directivas de autorización personalizadas, implemente la clase <xref:System.IdentityModel.Policy.IAuthorizationPolicy>.  Para obtener un ejemplo, vea [Cómo: crear una directiva de autorización personalizada](~/docs/framework/wcf/extending/how-to-create-a-custom-authorization-policy.md).  
  
 Para crear una demanda personalizada, utilice la clase <xref:System.IdentityModel.Claims.Claim>.  Para obtener un ejemplo, vea [Cómo: crear una demanda personalizada](~/docs/framework/wcf/extending/how-to-create-a-custom-claim.md). Para comparar las notificaciones personalizadas, debe comparar notificaciones, como se muestra en [Cómo: comparar notificaciones](~/docs/framework/wcf/extending/how-to-compare-claims.md).  
  
 Para obtener más información, consulte [autorización personalizada](~/docs/framework/wcf/extending/custom-authorization.md).  
  
 Puede establecer el tipo de un administrador de autorización personalizada mediante el [ &lt;serviceAuthorization&gt; ](~/docs/framework/configure-apps/file-schema/wcf/serviceauthorization-element.md) en un archivo de configuración de la aplicación de cliente.  
  
   
  
## Examples  
 En el ejemplo de código siguiente se muestra una clase denominada `MyServiceAuthorizationManager` que hereda de <xref:System.ServiceModel.ServiceAuthorizationManager> e invalida el método <xref:System.ServiceModel.ServiceAuthorizationManager.CheckAccessCore%2A>.  
  
 [!code-csharp[c_CustomAuthMgr#2](~/samples/snippets/csharp/VS_Snippets_CFX/c_customauthmgr/cs/c_customauthmgr.cs#2)]
 [!code-vb[c_CustomAuthMgr#2](~/samples/snippets/visualbasic/VS_Snippets_CFX/c_customauthmgr/vb/c_customauthmgr.vb#2)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.IdentityModel.Claims.ClaimSet" />
    <altmember cref="T:System.IdentityModel.Claims.Claim" />
    <related type="Article" href="http://msdn.microsoft.com/library/4f90311a-2593-462e-9174-2f7ac78217b9">Autorización personalizada</related>
    <related type="Article" href="http://msdn.microsoft.com/library/6214afde-44c1-4bf5-ba07-5ad6493620ea">Cómo: Crear un dicho administrador personalizado para un servicio</related>
    <related type="Article" href="http://msdn.microsoft.com/library/05b0549b-882d-4660-b6f0-5678543e5475">Cómo: Crear una directiva de autorización personalizada</related>
    <related type="Article" href="http://msdn.microsoft.com/library/d619976b-eda3-475e-ac23-c7988a2dceb0">Cómo: Crear una notificación personalizada</related>
    <related type="Article" href="http://msdn.microsoft.com/library/0c4ec84d-53df-408f-8953-9bc437f56c28">Cómo: Comparar notificaciones</related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ServiceAuthorizationManager ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.ServiceAuthorizationManager.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ServiceAuthorizationManager();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>Inicializa una nueva instancia de la clase <see cref="T:System.ServiceModel.ServiceAuthorizationManager" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="CheckAccess">
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Comprueba la autorización para el contexto de operación determinado y el mensaje opcional.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="CheckAccess">
      <MemberSignature Language="C#" Value="public virtual bool CheckAccess (System.ServiceModel.OperationContext operationContext);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool CheckAccess(class System.ServiceModel.OperationContext operationContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.ServiceAuthorizationManager.CheckAccess(System.ServiceModel.OperationContext)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool CheckAccess(System::ServiceModel::OperationContext ^ operationContext);" />
      <MemberSignature Language="F#" Value="abstract member CheckAccess : System.ServiceModel.OperationContext -&gt; bool&#xA;override this.CheckAccess : System.ServiceModel.OperationContext -&gt; bool" Usage="serviceAuthorizationManager.CheckAccess operationContext" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="operationContext" Type="System.ServiceModel.OperationContext" />
      </Parameters>
      <Docs>
        <param name="operationContext">
          <see cref="T:System.ServiceModel.OperationContext" />.</param>
        <summary>Comprueba la autorización para el contexto de la operación determinado.</summary>
        <returns>
          <see langword="true" /> si se permite el acceso; de lo contrario, <see langword="false" />. El valor predeterminado es <see langword="true" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 En general, las aplicaciones deben invalidar <xref:System.ServiceModel.ServiceAuthorizationManager.CheckAccessCore%2A> en lugar de este método.  
  
 Invalide <xref:System.ServiceModel.ServiceAuthorizationManager.CheckAccess%2A> si la aplicación asocia o introduce un conjunto diferente de directivas para el <xref:System.ServiceModel.ServiceSecurityContext> resultante o proporciona un modelo de evaluación de directiva (encadenado) diferente.  
  
 Este método es responsable de llamar <xref:System.ServiceModel.ServiceAuthorizationManager.CheckAccessCore%2A>.  
  
   
  
## Examples  
 El código siguiente muestra cómo invalidar este método para exigir los requisitos de control de acceso personalizados.  
  
 [!code-csharp[c_Federation#1](~/samples/snippets/csharp/VS_Snippets_CFX/c_federation/cs/source.cs#1)]
 [!code-vb[c_Federation#1](~/samples/snippets/visualbasic/VS_Snippets_CFX/c_federation/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CheckAccess">
      <MemberSignature Language="C#" Value="public virtual bool CheckAccess (System.ServiceModel.OperationContext operationContext, ref System.ServiceModel.Channels.Message message);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool CheckAccess(class System.ServiceModel.OperationContext operationContext, class System.ServiceModel.Channels.Message&amp; message) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.ServiceAuthorizationManager.CheckAccess(System.ServiceModel.OperationContext,System.ServiceModel.Channels.Message@)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool CheckAccess(System::ServiceModel::OperationContext ^ operationContext, System::ServiceModel::Channels::Message ^ % message);" />
      <MemberSignature Language="F#" Value="abstract member CheckAccess : System.ServiceModel.OperationContext *  -&gt; bool&#xA;override this.CheckAccess : System.ServiceModel.OperationContext *  -&gt; bool" Usage="serviceAuthorizationManager.CheckAccess (operationContext, message)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="operationContext" Type="System.ServiceModel.OperationContext" />
        <Parameter Name="message" Type="System.ServiceModel.Channels.Message" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="operationContext">
          <see cref="T:System.ServiceModel.OperationContext" />.</param>
        <param name="message">
          <see cref="T:System.ServiceModel.Channels.Message" /> que se van a examinar para determinar la autorización.</param>
        <summary>Comprueba la autorización para el contexto de la operación determinado cuando se requiere el acceso a un mensaje.</summary>
        <returns>
          <see langword="true" /> si se permite el acceso; de lo contrario, <see langword="false" />. El valor predeterminado es <see langword="true" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 En general, las aplicaciones deben invalidar <xref:System.ServiceModel.ServiceAuthorizationManager.CheckAccessCore%2A> en lugar de este método, que sólo se debería utilizar si la decisión de la autorización depende del cuerpo del mensaje. Debido a los problemas de rendimiento, en la medida de lo posible debe rediseñar su aplicación para que la decisión de autorización no requiera el acceso al cuerpo del mensaje.  
  
 Invalide este método si la aplicación asocia o introduce un conjunto diferente de directivas para <xref:System.ServiceModel.ServiceSecurityContext> y <xref:System.ServiceModel.Channels.Message> resultantes o proporciona un modelo de evaluación de directiva (encadenado) diferente.  
  
 Este método es responsable de llamar <xref:System.ServiceModel.ServiceAuthorizationManager.CheckAccessCore%2A>.  
  
   
  
## Examples  
 El código siguiente muestra cómo invalidar este método para exigir requisitos de control de acceso personalizados que requieren el acceso al cuerpo del mensaje.  
  
 [!code-csharp[c_Federation#6](~/samples/snippets/csharp/VS_Snippets_CFX/c_federation/cs/source.cs#6)]
 [!code-vb[c_Federation#6](~/samples/snippets/visualbasic/VS_Snippets_CFX/c_federation/vb/source.vb#6)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CheckAccessCore">
      <MemberSignature Language="C#" Value="protected virtual bool CheckAccessCore (System.ServiceModel.OperationContext operationContext);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool CheckAccessCore(class System.ServiceModel.OperationContext operationContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.ServiceAuthorizationManager.CheckAccessCore(System.ServiceModel.OperationContext)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual bool CheckAccessCore(System::ServiceModel::OperationContext ^ operationContext);" />
      <MemberSignature Language="F#" Value="abstract member CheckAccessCore : System.ServiceModel.OperationContext -&gt; bool&#xA;override this.CheckAccessCore : System.ServiceModel.OperationContext -&gt; bool" Usage="serviceAuthorizationManager.CheckAccessCore operationContext" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="operationContext" Type="System.ServiceModel.OperationContext" />
      </Parameters>
      <Docs>
        <param name="operationContext">
          <see cref="T:System.ServiceModel.OperationContext" /> para la solicitud de la autorización actual.</param>
        <summary>Comprueba la autorización para el contexto de la operación determinado basándose en la evaluación de la directiva predeterminada.</summary>
        <returns>
          <see langword="true" /> si se permite el acceso; de lo contrario, <see langword="false" />. El valor predeterminado es <see langword="true" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.ServiceModel.OperationContext.ServiceSecurityContext%2A> generalmente es el resultado de la evaluación de la directiva predeterminada.  
  
 Reemplace este método para proporcionar decisiones de autorización personalizadas.  
  
 Este método se puede utilizar para tomar decisiones de autorización basadas en los conjuntos de notificaciones que se deducen a partir de los tokens de entrada o se agregan a través de las directivas de autorización externas. También puede tomar decisiones de autorización basadas en las propiedades del mensaje entrante: por ejemplo, el encabezado de acción.  
  
 En este método, la aplicación puede utilizar el parámetro `operationContext` para tener acceso a la identidad del llamador (<xref:System.ServiceModel.OperationContext.ServiceSecurityContext%2A>). Al devolver el objeto <xref:System.ServiceModel.Channels.RequestContext> de la propiedad <xref:System.ServiceModel.OperationContext.RequestContext%2A>, la aplicación puede tener acceso al mensaje de solicitud completo (<xref:System.ServiceModel.Channels.RequestContext.RequestMessage%2A>). Al devolver el objeto <xref:System.ServiceModel.Channels.MessageHeaders> de la propiedad <xref:System.ServiceModel.OperationContext.IncomingMessageHeaders%2A>, la aplicación puede tener acceso a la dirección URL del servicio (<xref:System.ServiceModel.Channels.MessageHeaders.To%2A>) y a la operación (<xref:System.ServiceModel.Channels.MessageHeaders.Action%2A>). Con esta información, la aplicación puede tomar la decisión de la autorización en consecuencia.  
  
 Las demandas realizadas por un usuario se encuentran en el <xref:System.IdentityModel.Claims.ClaimSet> devuelto por la propiedad <xref:System.IdentityModel.Policy.AuthorizationContext.ClaimSets%2A> de `AuthorizationContext`. La propiedad `AuthorizationContext` de la clase <xref:System.ServiceModel.OperationContext.ServiceSecurityContext%2A> devuelve el <xref:System.ServiceModel.OperationContext> actual.  
  
   
  
## Examples  
 En el siguiente ejemplo de código se muestra una invalidación del método <xref:System.ServiceModel.ServiceAuthorizationManager.CheckAccessCore%2A>.  
  
 [!code-csharp[c_CustomAuthMgr#6](~/samples/snippets/csharp/VS_Snippets_CFX/c_customauthmgr/cs/c_customauthmgr.cs#6)]
 [!code-vb[c_CustomAuthMgr#6](~/samples/snippets/visualbasic/VS_Snippets_CFX/c_customauthmgr/vb/c_customauthmgr.vb#6)]  
  
 Para obtener otro ejemplo, vea [Cómo: crear un administrador de autorización personalizado para un servicio](~/docs/framework/wcf/extending/how-to-create-a-custom-authorization-manager-for-a-service.md).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetAuthorizationPolicies">
      <MemberSignature Language="C#" Value="protected virtual System.Collections.ObjectModel.ReadOnlyCollection&lt;System.IdentityModel.Policy.IAuthorizationPolicy&gt; GetAuthorizationPolicies (System.ServiceModel.OperationContext operationContext);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Collections.ObjectModel.ReadOnlyCollection`1&lt;class System.IdentityModel.Policy.IAuthorizationPolicy&gt; GetAuthorizationPolicies(class System.ServiceModel.OperationContext operationContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.ServiceAuthorizationManager.GetAuthorizationPolicies(System.ServiceModel.OperationContext)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::Collections::ObjectModel::ReadOnlyCollection&lt;System::IdentityModel::Policy::IAuthorizationPolicy ^&gt; ^ GetAuthorizationPolicies(System::ServiceModel::OperationContext ^ operationContext);" />
      <MemberSignature Language="F#" Value="abstract member GetAuthorizationPolicies : System.ServiceModel.OperationContext -&gt; System.Collections.ObjectModel.ReadOnlyCollection&lt;System.IdentityModel.Policy.IAuthorizationPolicy&gt;&#xA;override this.GetAuthorizationPolicies : System.ServiceModel.OperationContext -&gt; System.Collections.ObjectModel.ReadOnlyCollection&lt;System.IdentityModel.Policy.IAuthorizationPolicy&gt;" Usage="serviceAuthorizationManager.GetAuthorizationPolicies operationContext" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ObjectModel.ReadOnlyCollection&lt;System.IdentityModel.Policy.IAuthorizationPolicy&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="operationContext" Type="System.ServiceModel.OperationContext" />
      </Parameters>
      <Docs>
        <param name="operationContext">
          <see cref="T:System.ServiceModel.OperationContext" /> de la solicitud de la autorización actual.</param>
        <summary>Obtiene el conjunto de directivas que participan en la evaluación de la directiva.</summary>
        <returns>
          <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> de tipo <see cref="T:System.IdentityModel.Policy.IAuthorizationPolicy" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La implementación de Windows Communication Foundation (WCF) proporciona un conjunto predeterminado de directivas de autorización. Éstos incluyen el token primario que contiene las credenciales del solicitante y todos los tokens auxiliares, tokens de transporte y directivas externas si se especifica.  
  
 Puede invalidar esta implementación y proporcionar un conjunto diferente de directivas.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>