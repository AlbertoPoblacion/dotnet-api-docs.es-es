<Type Name="ServiceContractAttribute" FullName="System.ServiceModel.ServiceContractAttribute">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="bf6e55a71287ed8926d7972577d0eee7a1bca814" />
    <Meta Name="ms.sourcegitcommit" Value="3907f9a5780957d9c85af2e54c0a5bc2a5bf19ab" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="es-ES" />
    <Meta Name="ms.lasthandoff" Value="06/14/2018" />
    <Meta Name="ms.locfileid" Value="34317534" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class ServiceContractAttribute : Attribute" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit ServiceContractAttribute extends System.Attribute" />
  <TypeSignature Language="DocId" Value="T:System.ServiceModel.ServiceContractAttribute" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class ServiceContractAttribute&#xA;Inherits Attribute" />
  <TypeSignature Language="C++ CLI" Value="public ref class ServiceContractAttribute sealed : Attribute" />
  <AssemblyInfo>
    <AssemblyName>System.ServiceModel</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Attribute</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.AttributeUsage(System.AttributeTargets.Class | System.AttributeTargets.Interface, Inherited=false)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Indica que una interfaz o una clase define un contrato de servicio en una aplicación Windows Communication Foundation (WCF).</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Utilice el atributo <xref:System.ServiceModel.ServiceContractAttribute> en una interfaz (o clase) para definir un contrato de servicio. A continuación, utilice el atributo <xref:System.ServiceModel.OperationContractAttribute> en uno o varios de los métodos de clase (o interfaz) para definir las operaciones de servicio del contrato. Cuando el contrato de servicio se implementa y se combina con un [enlaces](~/docs/framework/wcf/bindings.md) y <xref:System.ServiceModel.EndpointAddress> del objeto, el contrato de servicio se expone para su uso por los clientes. Para obtener información general del proceso con ejemplos sencillos, vea [Tutorial de introducción](~/docs/framework/wcf/getting-started-tutorial.md). Para obtener más información sobre la creación de contratos de servicio, consulte [diseñar e implementar servicios](~/docs/framework/wcf/designing-and-implementing-services.md).  
  
 La información expresada por <xref:System.ServiceModel.ServiceContractAttribute> y su interfaz está relacionada con el elemento `<portType>` del lenguaje de descripción de servicios Web (WSDL). Un contrato de servicio se usa en el lado del servicio para especificar lo que el punto de conexión del servicio expone a los autores de las llamadas. También se utiliza en el lado del cliente para especificar el contrato del extremo con el que el cliente se comunica y, en el caso de contratos dúplex, para especificar el contrato de devolución de llamada (mediante la propiedad <xref:System.ServiceModel.ServiceContractAttribute.CallbackContract%2A>) que el cliente debe implementar para participar en una conversación dúplex.  
  
> [!NOTE]
>  Una interfaz o clase decorada con <xref:System.ServiceModel.ServiceContractAttribute> también debe tener por lo menos un método marcado con el atributo <xref:System.ServiceModel.OperationContractAttribute> para exponer cualquier funcionalidad. Consulte la sección Ejemplos para ver un ejemplo de código del uso más simple de los dos atributos para definir e implementar un servicio.  
  
 Utilice las propiedades <xref:System.ServiceModel.ServiceContractAttribute> para modificar el contrato de servicio.  
  
-   La propiedad <xref:System.ServiceModel.ServiceContractAttribute.ConfigurationName%2A> especifica el nombre del elemento de servicio en el archivo de configuración que se va a usar.  
  
-   Las propiedades <xref:System.ServiceModel.ServiceContractAttribute.Name%2A> y <xref:System.ServiceModel.ServiceContractAttribute.Namespace%2A> controlan el nombre y espacio de nombres del contrato en el elemento `<portType>` de WSDL.  
  
-   La propiedad <xref:System.ServiceModel.ServiceContractAttribute.SessionMode%2A> especifica si el contrato requiere un enlace que admita sesiones.  
  
-   La propiedad <xref:System.ServiceModel.ServiceContractAttribute.CallbackContract%2A> especifica el contrato de devolución en una conversación bidireccional (dúplex).  
  
-   Las propiedades <xref:System.ServiceModel.ServiceContractAttribute.HasProtectionLevel%2A> y <xref:System.ServiceModel.ServiceContractAttribute.ProtectionLevel%2A> indican si todos los mensajes que admiten el contrato tienen un valor <xref:System.ServiceModel.ServiceContractAttribute.ProtectionLevel%2A> explícito, y en ese caso, qué nivel es.  
  
 Los servicios implementan contratos de servicio, que representan el intercambio de datos que un tipo de servicio admite. Una clase de servicio puede implementar un contrato de servicio (implementando una interfaz marcada con <xref:System.ServiceModel.ServiceContractAttribute> que tiene los métodos marcados con <xref:System.ServiceModel.OperationContractAttribute>) o se puede marcar con <xref:System.ServiceModel.ServiceContractAttribute> y aplicar el atributo <xref:System.ServiceModel.OperationContractAttribute> a sus propios métodos. (Si una clase implementa una interfaz marcada con <xref:System.ServiceModel.ServiceContractAttribute>, no se podrá marcar con <xref:System.ServiceModel.ServiceContractAttribute>.) Los métodos en los tipos de servicio que se marcan con <xref:System.ServiceModel.OperationContractAttribute> se tratan como la parte de un contrato de servicio predeterminado especificado por el propio tipo de servicio. Para obtener información detallada sobre las operaciones de servicio, consulte <xref:System.ServiceModel.OperationContractAttribute>.  
  
 De forma predeterminada, las propiedades <xref:System.ServiceModel.ServiceContractAttribute.Name%2A> y <xref:System.ServiceModel.ServiceContractAttribute.Namespace%2A> son el nombre del tipo de contrato y `http://tempuri.org`, respectivamente, y <xref:System.ServiceModel.ServiceContractAttribute.ProtectionLevel%2A> es <xref:System.Net.Security.ProtectionLevel.None?displayProperty=nameWithType>. Se recomienda que los contratos de servicio definan explícitamente los nombres, espacios de nombres y niveles de protección mediante estas propiedades. Al hacerlo, se logran dos objetivos. Primero, se crea un contrato que no está conectado directamente a la información del tipo administrado, lo que le permite refactorizar su código y espacios de nombres administrados sin interrumpir el contrato tal y como se expresa en WSDL. Segundo, exigir explícitamente un cierto nivel de protección en el propio contrato permite al tiempo de ejecución validar si la configuración de enlace admite ese nivel de seguridad, con lo que se evita que una configuración poco definida haga visible información confidencial. Para obtener más información acerca de los niveles de protección, consulte [nivel de protección descripción](~/docs/framework/wcf/understanding-protection-level.md).  
  
 Para exponer un servicio para su uso por aplicaciones cliente, cree una aplicación de host para registrar el extremo de servicio con Windows Communication Foundation (WCF). Puede hospedar servicios WCF con los servicios de activación de Windows (WAS), en las aplicaciones de consola, las aplicaciones de servicio de Windows, las aplicaciones ASP.NET, aplicaciones de Windows Forms o cualquier otro tipo de dominio de aplicación.  
  
 Hospedar en WAS es muy similar a crear una aplicación ASP.NET. Para obtener más información, consulte [Cómo: hospedar un servicio WCF en IIS](~/docs/framework/wcf/feature-details/how-to-host-a-wcf-service-in-iis.md).  
  
 Los clientes utilizan la interfaz de contrato de servicio (la interfaz marcada con <xref:System.ServiceModel.ServiceContractAttribute>) para crear un canal al servicio o utilizan los objetos de cliente (que combinan la información del tipo de la interfaz de contrato de servicio con la clase <xref:System.ServiceModel.ClientBase%601>) para comunicar con su servicio. Para obtener información detallada sobre los canales de cliente a los servicios, vea el <xref:System.ServiceModel.ChannelFactory%601> clase y [información general sobre el cliente de WCF](~/docs/framework/wcf/wcf-client-overview.md).  
  
 Utilizar una clase <xref:System.ServiceModel.ServiceContractAttribute> o interfaz para heredar de otra clase <xref:System.ServiceModel.ServiceContractAttribute> o interfaz extiende el contrato primario. Por ejemplo, si una interfaz `IChildContract` se marca con <xref:System.ServiceModel.ServiceContractAttribute> y hereda de otra interfaz de contrato de servicio, `IParentContract`, el contrato de servicio `IChildContract` contiene los métodos de `IParentContract` e `IChildContract`. Extender los contratos (en clases o interfaces) es muy similar a extender clases e interfaces administradas.  
  
 El enfoque más flexible para crear los servicios es definir primero las interfaces de contrato de servicio y después que la clase de servicio implemente esa interfaz. (Ésta también es la manera más simple de crear sus servicios si debe implementar contratos de servicio definidos por otros.) Crear servicios directamente marcando una clase con <xref:System.ServiceModel.ServiceContractAttribute> y sus métodos con <xref:System.ServiceModel.OperationContractAttribute> funciona cuando el servicio expone sólo un contrato (aunque más de un extremo pueden exponer ese contrato).  
  
 Use la <xref:System.ServiceModel.ServiceContractAttribute.CallbackContract%2A> propiedad para indicar otro contrato de servicio que, cuando se enlaza con el contrato de servicio original, definir un intercambio de mensajes que puede fluir independientemente de dos maneras. Para obtener información detallada, vea <xref:System.ServiceModel.ServiceContractAttribute.CallbackContract%2A>.  
  
   
  
## Examples  
 El ejemplo de código siguiente muestra cómo aplicar <xref:System.ServiceModel.ServiceContractAttribute> a una interfaz para definir un contrato de servicio con un método de servicio, indicado por <xref:System.ServiceModel.OperationContractAttribute>. En este caso, el nivel de protección requerido de los enlaces para todos los mensajes es <xref:System.Net.Security.ProtectionLevel.EncryptAndSign?displayProperty=nameWithType>.  
  
 Después, el ejemplo de código implementará ese contrato en la clase `SampleService`.  
  
 [!code-csharp[ServiceContractAttribute#1](~/samples/snippets/csharp/VS_Snippets_CFX/servicecontractattribute/cs/services.cs#1)]
 [!code-vb[ServiceContractAttribute#1](~/samples/snippets/visualbasic/VS_Snippets_CFX/servicecontractattribute/vb/services.vb#1)]  
  
 El ejemplo de código siguiente muestra un archivo de configuración simple para el servicio anterior que crea un punto de conexión.  
  
 [!code-xml[ServiceContractAttribute#2](~/samples/snippets/csharp/VS_Snippets_CFX/servicecontractattribute/cs/hostapplication.exe.config#2)]   
  
 El ejemplo de código siguiente muestra un cliente que invoca el `SampleService` anterior.  
  
 [!code-csharp[ServiceContractAttribute#3](~/samples/snippets/csharp/VS_Snippets_CFX/servicecontractattribute/cs/client.cs#3)]
 [!code-vb[ServiceContractAttribute#3](~/samples/snippets/visualbasic/VS_Snippets_CFX/servicecontractattribute/vb/client.vb#3)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.ServiceModel.OperationContractAttribute" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ServiceContractAttribute ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.ServiceContractAttribute.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ServiceContractAttribute();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Inicializa una nueva instancia de la clase <see cref="T:System.ServiceModel.ServiceContractAttribute" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El constructor crea una instancia del atributo sin requisitos de sesión, ningún contrato de devolución de llamada ni el nombre ni espacio de nombres predeterminados.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CallbackContract">
      <MemberSignature Language="C#" Value="public Type CallbackContract { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type CallbackContract" />
      <MemberSignature Language="DocId" Value="P:System.ServiceModel.ServiceContractAttribute.CallbackContract" />
      <MemberSignature Language="VB.NET" Value="Public Property CallbackContract As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Type ^ CallbackContract { Type ^ get(); void set(Type ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene o establece el tipo de contrato de devolución de llamada cuando el contrato es un contrato dúplex.</summary>
        <value>
          <see cref="T:System.Type" /> que indica el contrato de devolución de llamada. El valor predeterminado es <see langword="null" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Especifique una interfaz en la propiedad <xref:System.ServiceModel.ServiceContractAttribute.CallbackContract%2A> que representa el contrato contrario necesario en un intercambio del mensaje bidireccional (o dúplex). Esto permite a las aplicaciones cliente realizar escuchas para las llamadas de operación entrantes que la aplicación de servicio del lado del servidor puede enviar independientemente de la actividad del cliente. Los contratos de devolución de llamada que cuentan con operaciones unidireccionales representan llamadas del servicio que el cliente puede administrar.  
  
> [!NOTE]
>  El atributo <xref:System.ServiceModel.ServiceContractAttribute> se omite en contratos de devolución de llamada. Para configurar el comportamiento en tiempo de ejecución de los objetos de devolución de llamada, utilice <xref:System.ServiceModel.CallbackBehaviorAttribute?displayProperty=nameWithType>.  
  
   
  
## Examples  
 El ejemplo de código siguiente muestra un servicio que especifica un contrato de devolución de llamada, que indica que un servicio de tipo `IDuplexHello` debe tener un corresponsal que implemente un servicio de tipo `IHelloCallbackContract`. Además, `IHelloCallbackContract` implementa un método de devolución de llamada unidireccional, permitiendo al servicio llamar al cliente sin esperar para que una respuesta admita un cliente distribuido, orientado a eventos.  
  
 [!code-csharp[SCA.CallbackContract#1](~/samples/snippets/csharp/VS_Snippets_CFX/sca.callbackcontract/cs/services.cs#1)]
 [!code-vb[SCA.CallbackContract#1](~/samples/snippets/visualbasic/VS_Snippets_CFX/sca.callbackcontract/vb/services.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ConfigurationName">
      <MemberSignature Language="C#" Value="public string ConfigurationName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ConfigurationName" />
      <MemberSignature Language="DocId" Value="P:System.ServiceModel.ServiceContractAttribute.ConfigurationName" />
      <MemberSignature Language="VB.NET" Value="Public Property ConfigurationName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ ConfigurationName { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene o establece el nombre utilizado para buscar el servicio en un archivo de configuración de la aplicación.</summary>
        <value>El nombre utilizado para buscar el elemento de servicio en un archivo de configuración de la aplicación. El valor predeterminado es el nombre de la clase de implementación de servicio.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Para establecer el valor por el que el sistema de configuración busca un valor de contrato en el archivo de configuración, consulte <xref:System.ServiceModel.ServiceBehaviorAttribute.ConfigurationName%2A>.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">El valor es null.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">El valor es una cadena vacía.</exception>
      </Docs>
    </Member>
    <Member MemberName="HasProtectionLevel">
      <MemberSignature Language="C#" Value="public bool HasProtectionLevel { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool HasProtectionLevel" />
      <MemberSignature Language="DocId" Value="P:System.ServiceModel.ServiceContractAttribute.HasProtectionLevel" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property HasProtectionLevel As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool HasProtectionLevel { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene un valor que indica si el miembro tiene un nivel de protección asignado.</summary>
        <value>
          <see langword="true" /> si la propiedad <see cref="P:System.ServiceModel.ServiceContractAttribute.ProtectionLevel" /> no es <see cref="F:System.Net.Security.ProtectionLevel.None" />; de lo contrario, <see langword="false" />. El valor predeterminado es <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La propiedad <xref:System.ServiceModel.ServiceContractAttribute.HasProtectionLevel%2A> indica si se ha definido para el contrato un valor de nivel de protección distinto de `false`.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Name">
      <MemberSignature Language="C#" Value="public string Name { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Name" />
      <MemberSignature Language="DocId" Value="P:System.ServiceModel.ServiceContractAttribute.Name" />
      <MemberSignature Language="VB.NET" Value="Public Property Name As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Name { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene o establece el nombre para el <see langword="&lt;portType&gt;" /> en el lenguaje de descripción de servicios Web (WSDL).</summary>
        <value>El valor predeterminado es el nombre de la clase o interfaz a la que se aplica <see cref="T:System.ServiceModel.ServiceContractAttribute" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Utilice las propiedades <xref:System.ServiceModel.ServiceContractAttribute.Name%2A> y <xref:System.ServiceModel.ServiceContractAttribute.Namespace%2A> para controlar el nombre y el espacio de nombres del elemento `<portType>` en WSDL.  
  
   
  
## Examples  
 El ejemplo de código siguiente muestra cómo utilizar las propiedades <xref:System.ServiceModel.ServiceContractAttribute.Name%2A> y <xref:System.ServiceModel.ServiceContractAttribute.Namespace%2A> de <xref:System.ServiceModel.ServiceContractAttribute> para establecer los valores correspondientes en WSDL.  
  
 [!code-csharp[SCA.Names#1](~/samples/snippets/csharp/VS_Snippets_CFX/sca.names/cs/services.cs#1)]
 [!code-vb[SCA.Names#1](~/samples/snippets/visualbasic/VS_Snippets_CFX/sca.names/vb/services.vb#1)]  
  
 En el ejemplo de código siguiente se muestra un cliente de Windows Communication Foundation (WCF) para el servicio anterior que importa WSDL mediante el [la herramienta de utilidad de metadatos de ServiceModel (Svcutil.exe)](~/docs/framework/wcf/servicemodel-metadata-utility-tool-svcutil-exe.md). Este cliente utiliza un cliente `HelloWorldProxy` en lugar de un cliente `SampleServiceProxy` (como es el caso de la muestra en la sección Ejemplo de <xref:System.ServiceModel.ServiceContractAttribute>).  
  
 [!code-csharp[SCA.Names#3](~/samples/snippets/csharp/VS_Snippets_CFX/sca.names/cs/client.cs#3)]
 [!code-vb[SCA.Names#3](~/samples/snippets/visualbasic/VS_Snippets_CFX/sca.names/vb/client.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">El valor es null.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">El valor es una cadena vacía.</exception>
      </Docs>
    </Member>
    <Member MemberName="Namespace">
      <MemberSignature Language="C#" Value="public string Namespace { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Namespace" />
      <MemberSignature Language="DocId" Value="P:System.ServiceModel.ServiceContractAttribute.Namespace" />
      <MemberSignature Language="VB.NET" Value="Public Property Namespace As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Namespace { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene o establece el espacio de nombres para el <see langword="&lt;portType&gt;" /> en el lenguaje de descripción de servicios Web (WSDL).</summary>
        <value>El espacio de nombres WSDL del elemento <see langword="&lt;portType&gt;" />. El valor predeterminado es "http://tempuri.org".</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 El ejemplo de código siguiente muestra cómo utilizar las propiedades <xref:System.ServiceModel.ServiceContractAttribute.Name%2A> y <xref:System.ServiceModel.ServiceContractAttribute.Namespace%2A> de <xref:System.ServiceModel.ServiceContractAttribute> para establecer los valores correspondientes en WSDL.  
  
 [!code-csharp[SCA.Names#1](~/samples/snippets/csharp/VS_Snippets_CFX/sca.names/cs/services.cs#1)]
 [!code-vb[SCA.Names#1](~/samples/snippets/visualbasic/VS_Snippets_CFX/sca.names/vb/services.vb#1)]  
  
 En el ejemplo de código siguiente se muestra un cliente de Windows Communication Foundation (WCF) para el servicio anterior que importa WSDL mediante el [la herramienta de utilidad de metadatos de ServiceModel (Svcutil.exe)](~/docs/framework/wcf/servicemodel-metadata-utility-tool-svcutil-exe.md). Este cliente utiliza un cliente `HelloWorldClient` en lugar de un cliente `SampleServiceClient` (como es el caso de la muestra en la sección Ejemplo de <xref:System.ServiceModel.ServiceContractAttribute>).  
  
 [!code-csharp[SCA.Names#3](~/samples/snippets/csharp/VS_Snippets_CFX/sca.names/cs/client.cs#3)]
 [!code-vb[SCA.Names#3](~/samples/snippets/visualbasic/VS_Snippets_CFX/sca.names/vb/client.vb#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ProtectionLevel">
      <MemberSignature Language="C#" Value="public System.Net.Security.ProtectionLevel ProtectionLevel { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Net.Security.ProtectionLevel ProtectionLevel" />
      <MemberSignature Language="DocId" Value="P:System.ServiceModel.ServiceContractAttribute.ProtectionLevel" />
      <MemberSignature Language="VB.NET" Value="Public Property ProtectionLevel As ProtectionLevel" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Net::Security::ProtectionLevel ProtectionLevel { System::Net::Security::ProtectionLevel get(); void set(System::Net::Security::ProtectionLevel value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.Security.ProtectionLevel</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Especifica si el enlace para el contrato debe admitir el valor de la propiedad <see cref="P:System.ServiceModel.ServiceContractAttribute.ProtectionLevel" />.</summary>
        <value>Uno de los valores de <see cref="T:System.Net.Security.ProtectionLevel" />. El valor predeterminado es <see cref="F:System.Net.Security.ProtectionLevel.None" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Utilice la propiedad <xref:System.ServiceModel.ServiceContractAttribute.ProtectionLevel%2A> para especificar hasta qué punto el enlace del contrato requiere cifrado, firmas digitales o ambos para los extremos que exponen el contrato. El valor establecido aquí es el predeterminado para todos los mensajes de operación incluidos los errores.  
  
 Es importante recordar que el comportamiento de protección en el tiempo de ejecución es la combinación de los valores de nivel de protección definidos en las propiedades siguientes. Estas propiedades tienen una estructura jerárquica. Al establecer el valor punto de conexión, se establece la configuración predeterminada para todos los ámbitos más restringidos a menos que se establezca un valor diferente para un ámbito más restringido explícitamente. En este caso, el valor externo sigue siendo el predeterminado para todos los ámbitos más restringidos con la excepción del definido específicamente.  
  
 Por ejemplo, si <xref:System.ServiceModel.ServiceContractAttribute.ProtectionLevel%2A?displayProperty=nameWithType> está establecido en <xref:System.Net.Security.ProtectionLevel.EncryptAndSign?displayProperty=nameWithType> y ningún otro ámbito más restringido tiene valores de nivel de protección, se cifrarán y firmarán todos los mensajes en un contrato de la operación. Si, sin embargo, una de esas operaciones tiene <xref:System.ServiceModel.OperationContractAttribute> definido en <xref:System.Net.Security.ProtectionLevel.Sign?displayProperty=nameWithType>, se firmarán los mensajes para esa operación pero se cifrarán y firmarán todos los demás mensajes en el contrato.  
  
 Para obtener más información acerca de los niveles de protección y sus suposiciones y ámbitos, consulte [nivel de protección descripción](~/docs/framework/wcf/understanding-protection-level.md).  
  
 Los ámbitos en los que se establecen estos valores son:  
  
 <xref:System.ServiceModel.ServiceContractAttribute.ProtectionLevel%2A?displayProperty=nameWithType>  
  
 <xref:System.ServiceModel.OperationContractAttribute.ProtectionLevel%2A?displayProperty=nameWithType>  
  
 <xref:System.ServiceModel.FaultContractAttribute.ProtectionLevel%2A?displayProperty=nameWithType>  
  
 <xref:System.ServiceModel.MessageContractAttribute.ProtectionLevel%2A?displayProperty=nameWithType>  
  
 La propiedad <xref:System.ServiceModel.MessageContractMemberAttribute.ProtectionLevel%2A?displayProperty=nameWithType> en <xref:System.ServiceModel.MessageHeaderAttribute?displayProperty=nameWithType>.  
  
 La propiedad <xref:System.ServiceModel.MessageContractMemberAttribute.ProtectionLevel%2A?displayProperty=nameWithType> en <xref:System.ServiceModel.MessageBodyMemberAttribute?displayProperty=nameWithType>.  
  
 Cuando no se haya especificado de manera concreta ningún nivel de protección en el contrato y el enlace subyacente admita la seguridad (ya sea en el nivel de transporte o de mensaje), el nivel de protección efectivo para todo el contrato será <xref:System.Net.Security.ProtectionLevel.EncryptAndSign?displayProperty=nameWithType>. Si el enlace no admite la seguridad (como <xref:System.ServiceModel.BasicHttpBinding>), el <xref:System.Net.Security.ProtectionLevel?displayProperty=nameWithType> eficaz será <xref:System.Net.Security.ProtectionLevel.None?displayProperty=nameWithType> para todo el contrato. El resultado será (en función del enlace del extremo) que los clientes pueden exigir una protección de nivel de seguridad diferente para los mensajes o el transporte aun cuando el contrato especifique <xref:System.Net.Security.ProtectionLevel.None?displayProperty=nameWithType>.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">El valor no es uno de los valores de <see cref="T:System.Net.Security.ProtectionLevel" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="SessionMode">
      <MemberSignature Language="C#" Value="public System.ServiceModel.SessionMode SessionMode { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.ServiceModel.SessionMode SessionMode" />
      <MemberSignature Language="DocId" Value="P:System.ServiceModel.ServiceContractAttribute.SessionMode" />
      <MemberSignature Language="VB.NET" Value="Public Property SessionMode As SessionMode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::ServiceModel::SessionMode SessionMode { System::ServiceModel::SessionMode get(); void set(System::ServiceModel::SessionMode value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ServiceModel.SessionMode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene o establece si se permiten sesiones, si no se permiten o si son necesarias.</summary>
        <value>
          <see cref="T:System.ServiceModel.SessionMode" />, que indica si se permiten sesiones, no se permiten o si son necesarias.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Utilice la propiedad <xref:System.ServiceModel.ServiceContractAttribute.SessionMode%2A> para requerir enlaces que admiten sesiones entre los extremos. Una sesión es una manera de poner en correlación un conjunto de mensajes intercambiados entre dos o más extremos. Si el servicio admite las sesiones del canal, puede utilizar a continuación la propiedad <xref:System.ServiceModel.ServiceBehaviorAttribute.InstanceContextMode%2A> para especificar la relación entre las instancias de implementación de contrato de servicio y la sesión del canal. Si un enlace no admite sesiones, se producirá una excepción.  
  
 Por ejemplo, si la propiedad <xref:System.ServiceModel.ServiceContractAttribute.SessionMode%2A> está establecida en <xref:System.ServiceModel.SessionMode.Required?displayProperty=nameWithType> y la propiedad <xref:System.ServiceModel.ServiceBehaviorAttribute.InstanceContextMode%2A> en <xref:System.ServiceModel.InstanceContextMode.PerSession>, los clientes pueden utilizar la misma conexión para realizar llamadas repetidas al mismo objeto de servicio.  
  
 Para obtener más información acerca de las sesiones e instancias de servicio, consulte [mediante sesiones](~/docs/framework/wcf/using-sessions.md) y [sesiones, Instancing y simultaneidad](~/docs/framework/wcf/feature-details/sessions-instancing-and-concurrency.md).  
  
> [!NOTE]
>  Un canal que admite sesiones es compatible con la asociación predeterminada de una instancia de servicio con una sesión determinada. Sin embargo, las implementaciones de sesión diferentes admiten características distintas además del control de creación de instancias basado en la sesión. WCF proporciona cuatro tipos de sesiones que puede usar para proporcionar un comportamiento de la aplicación con sesión; cada tipo de sesión que proporciona un comportamiento adicional específico del tipo de sesión es.  
  
1.  <xref:System.ServiceModel.Channels.SecurityBindingElement?displayProperty=nameWithType> admite sesiones de seguridad, en las que ambos fines de comunicación han estado de acuerdo en un cifrado y/o proceso de firma digital; todos los mensajes se ponen en correlación con esa conversación segura concreta. Para obtener más información, consulte [proteger Services](~/docs/framework/wcf/securing-services.md). Por ejemplo, <xref:System.ServiceModel.WSHttpBinding?displayProperty=nameWithType>, que es compatible con las sesiones de seguridad y confiables, utiliza de forma predeterminada sólo una sesión segura que cifra y firma digitalmente los mensajes.  
  
2.  <xref:System.ServiceModel.NetTcpBinding?displayProperty=nameWithType> admite las sesiones expuestas por las conexiones de TCP/IP para asegurarse de que todos los mensajes están correlacionados por la sesión de conexión en el nivel de socket.  
  
3.  <xref:System.ServiceModel.Channels.ReliableSessionBindingElement?displayProperty=nameWithType>, que implementa la especificación de WS-ReliableMessaging, proporciona la compatibilidad para las sesiones confiables en las que los mensajes se entregan en orden y sólo una vez, posibilitando el establecimiento de relaciones de confianza aun cuando los mensajes viajan por varios nodos durante la conversación. Para obtener más información, consulte [sesiones confiables](~/docs/framework/wcf/feature-details/reliable-sessions.md).  
  
4.  <xref:System.ServiceModel.NetMsmqBinding?displayProperty=nameWithType> proporciona las sesiones de datagrama de MSMQ. Para obtener más información, consulte [colas en WCF](~/docs/framework/wcf/feature-details/queues-in-wcf.md).  
  
 Recuerde que establecer la propiedad <xref:System.ServiceModel.ServiceContractAttribute.SessionMode%2A> no especifica el tipo de sesión que el contrato requiere, sólo que requiere uno.  
  
   
  
## Examples  
 El contrato del servicio siguiente requiere que los enlaces configurados usen sesiones al interactuar con las implementaciones de servicio `SampleDuplexHello`.  
  
 [!code-csharp[SCA.Session#1](~/samples/snippets/csharp/VS_Snippets_CFX/sca.session/cs/services.cs#1)]
 [!code-vb[SCA.Session#1](~/samples/snippets/visualbasic/VS_Snippets_CFX/sca.session/vb/services.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">El valor no es uno de los valores de <see cref="T:System.ServiceModel.SessionMode" />.</exception>
      </Docs>
    </Member>
  </Members>
</Type>