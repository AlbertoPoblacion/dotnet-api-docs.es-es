<Type Name="ObjectStateManager" FullName="System.Data.Objects.ObjectStateManager">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="ac1ba80e294bdf91b1aa64f1e025d3203ca1c927" />
    <Meta Name="ms.sourcegitcommit" Value="5a49536d99d2d0b54e4cb7280870903e043272df" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="es-ES" />
    <Meta Name="ms.lasthandoff" Value="07/03/2018" />
    <Meta Name="ms.locfileid" Value="37678232" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class ObjectStateManager" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit ObjectStateManager extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Data.Objects.ObjectStateManager" />
  <TypeSignature Language="VB.NET" Value="Public Class ObjectStateManager" />
  <TypeSignature Language="C++ CLI" Value="public ref class ObjectStateManager" />
  <TypeSignature Language="F#" Value="type ObjectStateManager = class" />
  <AssemblyInfo>
    <AssemblyName>System.Data.Entity</AssemblyName>
    <AssemblyVersion>3.5.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Mantiene el estado de los objetos y la administración de las identidades en las instancias de tipo de entidad y en las instancias de relación.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.Objects.ObjectStateManager> realiza el seguimiento de los resultados de la consulta y proporciona la lógica necesaria para combinar varios resultados de la consulta superpuestos. Además, realiza un seguimiento de los cambios en memoria cuando un usuario inserta, elimina o modifica objetos, y proporciona el conjunto de cambios para las actualizaciones. El procesador de cambios usa este conjunto de cambios para almacenar las modificaciones.  
  
 <xref:System.Data.Objects.ObjectContext> usa normalmente esta clase, pero no se usa directamente en las aplicaciones.  
  
   
  
## Examples  
 Estos ejemplos se basan en el [modelo AdventureWorks Sales](http://msdn.microsoft.com/library/f16cd988-673f-4376-b034-129ca93c7832).  
  
 En el ejemplo siguiente, se obtiene el <xref:System.Data.Objects.ObjectStateManager> del <xref:System.Data.Objects.ObjectContext> y se usa el administrador de estados para tener acceso a un objeto del contexto.  
  
 [!code-csharp[DP ObjectServices Concepts#ObjectStateManager](~/samples/snippets/csharp/VS_Snippets_Data/DP ObjectServices Concepts/CS/Source.cs#objectstatemanager)]
 [!code-vb[DP ObjectServices Concepts#ObjectStateManager](~/samples/snippets/visualbasic/VS_Snippets_Data/DP ObjectServices Concepts/VB/Source.vb#objectstatemanager)]  
  
 En el ejemplo siguiente, se usa el método <xref:System.Data.Objects.ObjectStateManager.TryGetObjectStateEntry%28System.Data.EntityKey%2CSystem.Data.Objects.ObjectStateEntry%40%29> en el <xref:System.Data.Objects.ObjectStateManager> devuelto para obtener un objeto basado en su clave de entidad.  
  
 [!code-csharp[DP ObjectServices Concepts#ApplyItemUpdates](~/samples/snippets/csharp/VS_Snippets_Data/DP ObjectServices Concepts/CS/Source.cs#applyitemupdates)]
 [!code-vb[DP ObjectServices Concepts#ApplyItemUpdates](~/samples/snippets/visualbasic/VS_Snippets_Data/DP ObjectServices Concepts/VB/Source.vb#applyitemupdates)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ObjectStateManager (System.Data.Metadata.Edm.MetadataWorkspace metadataWorkspace);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Data.Metadata.Edm.MetadataWorkspace metadataWorkspace) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Objects.ObjectStateManager.#ctor(System.Data.Metadata.Edm.MetadataWorkspace)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ObjectStateManager(System::Data::Metadata::Edm::MetadataWorkspace ^ metadataWorkspace);" />
      <MemberSignature Language="F#" Value="new System.Data.Objects.ObjectStateManager : System.Data.Metadata.Edm.MetadataWorkspace -&gt; System.Data.Objects.ObjectStateManager" Usage="new System.Data.Objects.ObjectStateManager metadataWorkspace" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="metadataWorkspace" Type="System.Data.Metadata.Edm.MetadataWorkspace" />
      </Parameters>
      <Docs>
        <param name="metadataWorkspace">
          <see cref="T:System.Data.Metadata.Edm.MetadataWorkspace" />, que proporciona la información de asignación y de metadatos.</param>
        <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Data.Objects.ObjectStateManager" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ChangeObjectState">
      <MemberSignature Language="C#" Value="public System.Data.Objects.ObjectStateEntry ChangeObjectState (object entity, System.Data.EntityState entityState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Data.Objects.ObjectStateEntry ChangeObjectState(object entity, valuetype System.Data.EntityState entityState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Objects.ObjectStateManager.ChangeObjectState(System.Object,System.Data.EntityState)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Data::Objects::ObjectStateEntry ^ ChangeObjectState(System::Object ^ entity, System::Data::EntityState entityState);" />
      <MemberSignature Language="F#" Value="member this.ChangeObjectState : obj * System.Data.EntityState -&gt; System.Data.Objects.ObjectStateEntry" Usage="objectStateManager.ChangeObjectState (entity, entityState)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Objects.ObjectStateEntry</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entity" Type="System.Object" />
        <Parameter Name="entityState" Type="System.Data.EntityState" />
      </Parameters>
      <Docs>
        <param name="entity">Objeto para el que se debe cambiar el estado.</param>
        <param name="entityState">Nuevo estado del objeto.</param>
        <summary>Cambia el estado del objeto <see cref="T:System.Data.Objects.ObjectStateEntry" /> para un objeto concreto en la enumeración <paramref name="entityState" /> especificada.</summary>
        <returns>
          <see cref="T:System.Data.Objects.ObjectStateEntry" /> para el objeto <paramref name="entity" /> proporcionado.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Una llamada a la <xref:System.Data.Objects.ObjectStateManager.ChangeObjectState%2A> método para cambiar el estado de un objeto a <xref:System.Data.EntityState.Deleted> no hace que los objetos relacionados en una relación restringida va a eliminar.  
  
 Cambiar el estado de un objeto no afecta a los objetos relacionados en el gráfico de objetos.  
  
 Al cambiar el <xref:System.Data.EntityState> de una entrada de objeto de entidad a <xref:System.Data.EntityState.Modified>, todas las propiedades del objeto se marcan como modificada, independientemente de los valores originales o actuales.  
  
 Cuando el <xref:System.Data.EntityState> de un objeto entidad se cambia la entrada a <xref:System.Data.EntityState.Added>, <xref:System.Data.EntityState.Deleted>, o <xref:System.Data.EntityState.Detached>, también se actualizan las entradas de relación para el objeto.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Cuando <paramref name="entity" /> es <see langword="null" />.</exception>
        <exception cref="T:System.InvalidOperationException">Cuando el objeto no se desasocia y no tiene una entrada en el administrador de estado.  -o bien- Al intentar cambiar el estado a <see cref="F:System.Data.EntityState.Detached" /> desde cualquier otro <see cref="T:System.Data.EntityState" /> -o bien- Cuando <paramref name="state" /> no es un valor <see cref="T:System.Data.EntityState" /> válido.</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="ChangeRelationshipState">
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Cambia el estado de la relación especificada entre dos objetos entidad.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este método no se admite para relaciones basadas en una asociación de clave externa.  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="ChangeRelationshipState">
      <MemberSignature Language="C#" Value="public System.Data.Objects.ObjectStateEntry ChangeRelationshipState (object sourceEntity, object targetEntity, string navigationProperty, System.Data.EntityState relationshipState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Data.Objects.ObjectStateEntry ChangeRelationshipState(object sourceEntity, object targetEntity, string navigationProperty, valuetype System.Data.EntityState relationshipState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Objects.ObjectStateManager.ChangeRelationshipState(System.Object,System.Object,System.String,System.Data.EntityState)" />
      <MemberSignature Language="VB.NET" Value="Public Function ChangeRelationshipState (sourceEntity As Object, targetEntity As Object, navigationProperty As String, relationshipState As EntityState) As ObjectStateEntry" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Data::Objects::ObjectStateEntry ^ ChangeRelationshipState(System::Object ^ sourceEntity, System::Object ^ targetEntity, System::String ^ navigationProperty, System::Data::EntityState relationshipState);" />
      <MemberSignature Language="F#" Value="member this.ChangeRelationshipState : obj * obj * string * System.Data.EntityState -&gt; System.Data.Objects.ObjectStateEntry" Usage="objectStateManager.ChangeRelationshipState (sourceEntity, targetEntity, navigationProperty, relationshipState)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Objects.ObjectStateEntry</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sourceEntity" Type="System.Object" />
        <Parameter Name="targetEntity" Type="System.Object" />
        <Parameter Name="navigationProperty" Type="System.String" />
        <Parameter Name="relationshipState" Type="System.Data.EntityState" />
      </Parameters>
      <Docs>
        <param name="sourceEntity">Instancia de objeto o <see cref="T:System.Data.EntityKey" /> de la entidad de origen que se encuentra en un extremo de la relación.</param>
        <param name="targetEntity">Instancia de objeto o <see cref="T:System.Data.EntityKey" /> de la entidad de destino que se encuentra en el otro extremo de la relación.</param>
        <param name="navigationProperty">Nombre de la propiedad de navegación en <c>source</c> que devuelve el valor <c>target</c> especificado.</param>
        <param name="relationshipState">Enumeración <see cref="T:System.Data.EntityState" /> solicitada de la relación especificada.</param>
        <summary>Cambia el estado de la relación entre dos objetos entidad especificados basándose en los dos objetos relacionados y el nombre de la propiedad de navegación.</summary>
        <returns>Objeto <see cref="T:System.Data.Objects.ObjectStateEntry" /> para la relación que se cambió.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Entradas para los objetos en ambos extremos de la relación especificada deben existir en el <xref:System.Data.Objects.ObjectStateManager>.  
  
> [!NOTE]
>  Este método no se admite para relaciones basadas en una asociación de clave externa.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Cuando <paramref name="source" /> o <paramref name="target" /> es <see langword="null" />.</exception>
        <exception cref="T:System.InvalidOperationException">Al intentar cambiar el estado de la relación a un estado distinto de <see cref="F:System.Data.EntityState.Deleted" /> o <see cref="F:System.Data.EntityState.Detached" /> cuando <paramref name="source" /> o <paramref name="target" /> está en un estado <see cref="F:System.Data.EntityState.Deleted" />.  -o bien- Al intentar cambiar el estado de la relación a un estado distinto de <see cref="F:System.Data.EntityState.Added" /> o <see cref="F:System.Data.EntityState.Detached" /> cuando <paramref name="source" /> o <paramref name="target" /> está en un estado <see cref="F:System.Data.EntityState.Added" />.  -o bien- Cuando <paramref name="state" /> no es un valor válido de <see cref="T:System.Data.EntityState" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="ChangeRelationshipState">
      <MemberSignature Language="C#" Value="public System.Data.Objects.ObjectStateEntry ChangeRelationshipState (object sourceEntity, object targetEntity, string relationshipName, string targetRoleName, System.Data.EntityState relationshipState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Data.Objects.ObjectStateEntry ChangeRelationshipState(object sourceEntity, object targetEntity, string relationshipName, string targetRoleName, valuetype System.Data.EntityState relationshipState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Objects.ObjectStateManager.ChangeRelationshipState(System.Object,System.Object,System.String,System.String,System.Data.EntityState)" />
      <MemberSignature Language="VB.NET" Value="Public Function ChangeRelationshipState (sourceEntity As Object, targetEntity As Object, relationshipName As String, targetRoleName As String, relationshipState As EntityState) As ObjectStateEntry" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Data::Objects::ObjectStateEntry ^ ChangeRelationshipState(System::Object ^ sourceEntity, System::Object ^ targetEntity, System::String ^ relationshipName, System::String ^ targetRoleName, System::Data::EntityState relationshipState);" />
      <MemberSignature Language="F#" Value="member this.ChangeRelationshipState : obj * obj * string * string * System.Data.EntityState -&gt; System.Data.Objects.ObjectStateEntry" Usage="objectStateManager.ChangeRelationshipState (sourceEntity, targetEntity, relationshipName, targetRoleName, relationshipState)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Objects.ObjectStateEntry</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sourceEntity" Type="System.Object" />
        <Parameter Name="targetEntity" Type="System.Object" />
        <Parameter Name="relationshipName" Type="System.String" />
        <Parameter Name="targetRoleName" Type="System.String" />
        <Parameter Name="relationshipState" Type="System.Data.EntityState" />
      </Parameters>
      <Docs>
        <param name="sourceEntity">Instancia de objeto o <see cref="T:System.Data.EntityKey" /> de la entidad de origen que se encuentra en un extremo de la relación.</param>
        <param name="targetEntity">Instancia de objeto o <see cref="T:System.Data.EntityKey" /> de la entidad de destino que se encuentra en el otro extremo de la relación.</param>
        <param name="relationshipName">Nombre de la relación.</param>
        <param name="targetRoleName">El nombre del rol en el extremo <c>target</c> de la relación.</param>
        <param name="relationshipState">Enumeración <see cref="T:System.Data.EntityState" /> solicitada de la relación especificada.</param>
        <summary>Cambia el estado de la relación entre dos objetos entidad especificados basándose en los dos objetos relacionados y en las propiedades de la relación.</summary>
        <returns>Objeto <see cref="T:System.Data.Objects.ObjectStateEntry" /> para la relación que se cambió.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Entradas para los objetos en ambos extremos de la relación especificada deben existir en el <xref:System.Data.Objects.ObjectStateManager>.  
  
> [!NOTE]
>  Este método no se admite para las relaciones que se basan en una asociación de clave externa. Para obtener más información, consulte [definir y administrar relaciones](http://msdn.microsoft.com/library/2c92c097-56bd-4145-989e-16d92475ecda)  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Cuando <paramref name="source" /> o <paramref name="target" /> es <see langword="null" />.</exception>
        <exception cref="T:System.InvalidOperationException">Al intentar cambiar el estado de la relación a un estado distinto de <see cref="F:System.Data.EntityState.Deleted" /> o <see cref="F:System.Data.EntityState.Detached" /> cuando <paramref name="source" /> o <paramref name="target" /> está en un estado <see cref="F:System.Data.EntityState.Deleted" />.  -o bien- Al intentar cambiar el estado de la relación a un estado distinto de <see cref="F:System.Data.EntityState.Added" /> o <see cref="F:System.Data.EntityState.Detached" /> cuando <paramref name="source" /> o <paramref name="target" /> está en un estado <see cref="F:System.Data.EntityState.Added" />.  -o bien- Cuando <paramref name="state" /> no es un valor válido de <see cref="T:System.Data.EntityState" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="ChangeRelationshipState&lt;TEntity&gt;">
      <MemberSignature Language="C#" Value="public System.Data.Objects.ObjectStateEntry ChangeRelationshipState&lt;TEntity&gt; (TEntity sourceEntity, object targetEntity, System.Linq.Expressions.Expression&lt;Func&lt;TEntity,object&gt;&gt; navigationPropertySelector, System.Data.EntityState relationshipState) where TEntity : class;" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Data.Objects.ObjectStateEntry ChangeRelationshipState&lt;class TEntity&gt;(!!TEntity sourceEntity, object targetEntity, class System.Linq.Expressions.Expression`1&lt;class System.Func`2&lt;!!TEntity, object&gt;&gt; navigationPropertySelector, valuetype System.Data.EntityState relationshipState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Objects.ObjectStateManager.ChangeRelationshipState``1(``0,System.Object,System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Data.EntityState)" />
      <MemberSignature Language="VB.NET" Value="Public Function ChangeRelationshipState(Of TEntity As Class) (sourceEntity As TEntity, targetEntity As Object, navigationPropertySelector As Expression(Of Func(Of TEntity, Object)), relationshipState As EntityState) As ObjectStateEntry" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TEntity&gt;&#xA; where TEntity : class System::Data::Objects::ObjectStateEntry ^ ChangeRelationshipState(TEntity sourceEntity, System::Object ^ targetEntity, System::Linq::Expressions::Expression&lt;Func&lt;TEntity, System::Object ^&gt; ^&gt; ^ navigationPropertySelector, System::Data::EntityState relationshipState);" />
      <MemberSignature Language="F#" Value="member this.ChangeRelationshipState : 'Entity * obj * System.Linq.Expressions.Expression&lt;Func&lt;'Entity, obj&gt;&gt; * System.Data.EntityState -&gt; System.Data.Objects.ObjectStateEntry (requires 'Entity : null)" Usage="objectStateManager.ChangeRelationshipState (sourceEntity, targetEntity, navigationPropertySelector, relationshipState)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Objects.ObjectStateEntry</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TEntity">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="sourceEntity" Type="TEntity" />
        <Parameter Name="targetEntity" Type="System.Object" />
        <Parameter Name="navigationPropertySelector" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TEntity,System.Object&gt;&gt;" />
        <Parameter Name="relationshipState" Type="System.Data.EntityState" />
      </Parameters>
      <Docs>
        <typeparam name="TEntity">El tipo de entidad de la <c>origen</c> objeto.</typeparam>
        <param name="sourceEntity">Instancia de objeto o <see cref="T:System.Data.EntityKey" /> de la entidad de origen que se encuentra en un extremo de la relación.</param>
        <param name="targetEntity">Instancia de objeto o <see cref="T:System.Data.EntityKey" /> de la entidad de destino que se encuentra en el otro extremo de la relación.</param>
        <param name="navigationPropertySelector">Expresión LINQ que selecciona la propiedad de navegación en <c>source</c> que devuelve el valor <c>target</c> especificado.</param>
        <param name="relationshipState">Enumeración <see cref="T:System.Data.EntityState" /> solicitada de la relación especificada.</param>
        <summary>Cambia el estado de la relación entre dos objetos entidad especificados basándose en los dos objetos relacionados y una expresión LINQ que define la propiedad de navegación.</summary>
        <returns>Objeto <see cref="T:System.Data.Objects.ObjectStateEntry" /> para la relación que se cambió.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Entradas para los objetos en ambos extremos de la relación especificada deben existir en el <xref:System.Data.Objects.ObjectStateManager>.  
  
> [!NOTE]
>  Este método no se admite para las relaciones que se basan en una asociación de clave externa.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Cuando <paramref name="source" />, <paramref name="target" /> o <paramref name="selector" /> es <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="selector" /> es incorrecto o no puede devolver una propiedad de desplazamiento.</exception>
        <exception cref="T:System.InvalidOperationException">Al intentar cambiar el estado de la relación a un estado distinto de <see cref="F:System.Data.EntityState.Deleted" /> o <see cref="F:System.Data.EntityState.Detached" /> cuando <paramref name="source" /> o <paramref name="target" /> está en un estado <see cref="F:System.Data.EntityState.Deleted" />.  -o bien- Al intentar cambiar el estado de la relación a un estado distinto de <see cref="F:System.Data.EntityState.Added" /> o <see cref="F:System.Data.EntityState.Detached" /> cuando <paramref name="source" /> o <paramref name="target" /> está en un estado <see cref="F:System.Data.EntityState.Added" />.  -o bien- Cuando <paramref name="state" /> no es un valor válido de <see cref="T:System.Data.EntityState" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="GetObjectStateEntries">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerable&lt;System.Data.Objects.ObjectStateEntry&gt; GetObjectStateEntries (System.Data.EntityState state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Generic.IEnumerable`1&lt;class System.Data.Objects.ObjectStateEntry&gt; GetObjectStateEntries(valuetype System.Data.EntityState state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Objects.ObjectStateManager.GetObjectStateEntries(System.Data.EntityState)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetObjectStateEntries (state As EntityState) As IEnumerable(Of ObjectStateEntry)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Generic::IEnumerable&lt;System::Data::Objects::ObjectStateEntry ^&gt; ^ GetObjectStateEntries(System::Data::EntityState state);" />
      <MemberSignature Language="F#" Value="member this.GetObjectStateEntries : System.Data.EntityState -&gt; seq&lt;System.Data.Objects.ObjectStateEntry&gt;" Usage="objectStateManager.GetObjectStateEntries state" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.Data.Objects.ObjectStateEntry&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="state" Type="System.Data.EntityState" />
      </Parameters>
      <Docs>
        <param name="state">
          <see cref="T:System.Data.EntityState" /> usado para filtrar los objetos <see cref="T:System.Data.Objects.ObjectStateEntry" /> devueltos.</param>
        <summary>Devuelve una colección de objetos <see cref="T:System.Data.Objects.ObjectStateEntry" /> para los objetos o las relaciones que tienen el estado especificado.</summary>
        <returns>Colección de objetos <see cref="T:System.Data.Objects.ObjectStateEntry" /> que están en el <see cref="T:System.Data.EntityState" /> especificado.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Data.EntityState> es un campo de bits, de modo que se pueden recuperar entradas de estado para varios estados en una llamada mediante un operador OR bit a bit de varios valores <xref:System.Data.EntityState>.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Cuando <paramref name="state" /> es <see cref="F:System.Data.EntityState.Detached" />.</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetObjectStateEntry">
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Devuelve una <see cref="T:System.Data.Objects.ObjectStateEntry" /> para una entrada de objeto o de relación específica.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetObjectStateEntry">
      <MemberSignature Language="C#" Value="public System.Data.Objects.ObjectStateEntry GetObjectStateEntry (System.Data.EntityKey key);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Data.Objects.ObjectStateEntry GetObjectStateEntry(class System.Data.EntityKey key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Objects.ObjectStateManager.GetObjectStateEntry(System.Data.EntityKey)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetObjectStateEntry (key As EntityKey) As ObjectStateEntry" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Data::Objects::ObjectStateEntry ^ GetObjectStateEntry(System::Data::EntityKey ^ key);" />
      <MemberSignature Language="F#" Value="member this.GetObjectStateEntry : System.Data.EntityKey -&gt; System.Data.Objects.ObjectStateEntry" Usage="objectStateManager.GetObjectStateEntry key" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Objects.ObjectStateEntry</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.Data.EntityKey" />
      </Parameters>
      <Docs>
        <param name="key">
          <see cref="T:System.Data.EntityKey" />.</param>
        <summary>Devuelve una <see cref="T:System.Data.Objects.ObjectStateEntry" /> para la entrada de objeto o de relación con la clave especificada.</summary>
        <returns>
          <see cref="T:System.Data.Objects.ObjectStateEntry" /> correspondiente al <see cref="T:System.Data.EntityKey" /> especificado.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use la <xref:System.Data.Objects.ObjectStateManager.TryGetObjectStateEntry%28System.Data.EntityKey%2CSystem.Data.Objects.ObjectStateEntry%40%29> método devuelva un <xref:System.Data.Objects.ObjectStateEntry> objeto sin tener que controlar la <xref:System.InvalidOperationException> generados por el <xref:System.Data.Objects.ObjectStateManager.GetObjectStateEntry%28System.Data.EntityKey%29> método.  
  
   
  
## Examples  
 El ejemplo de este tema se basa en el [modelo AdventureWorks Sales](http://msdn.microsoft.com/library/f16cd988-673f-4376-b034-129ca93c7832). En el ejemplo, se obtiene la <xref:System.Data.Objects.ObjectStateEntry> para la <xref:System.Data.EntityKey> especificada del <xref:System.Data.Objects.ObjectStateManager>. A continuación, obtiene el valor actual de la `SalesOrderHeader.PurchaseOrderNumber` propiedad, cambia el valor de propiedad y enumera la colección de propiedades modificadas.  
  
 [!code-csharp[DP ObjectServices Concepts#ObjectStateEntry](~/samples/snippets/csharp/VS_Snippets_Data/DP ObjectServices Concepts/CS/Source.cs#objectstateentry)]
 [!code-vb[DP ObjectServices Concepts#ObjectStateEntry](~/samples/snippets/visualbasic/VS_Snippets_Data/DP ObjectServices Concepts/VB/Source.vb#objectstateentry)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Cuando <paramref name="key" /> es <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">Cuando los <paramref name="key" /> especificados no se pueden encontrar en el administrador estatal.</exception>
        <exception cref="T:System.InvalidOperationException">No existe ninguna entidad con la <see cref="T:System.Data.EntityKey" /> especificada en el <see cref="T:System.Data.Objects.ObjectStateManager" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="GetObjectStateEntry">
      <MemberSignature Language="C#" Value="public System.Data.Objects.ObjectStateEntry GetObjectStateEntry (object entity);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Data.Objects.ObjectStateEntry GetObjectStateEntry(object entity) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Objects.ObjectStateManager.GetObjectStateEntry(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetObjectStateEntry (entity As Object) As ObjectStateEntry" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Data::Objects::ObjectStateEntry ^ GetObjectStateEntry(System::Object ^ entity);" />
      <MemberSignature Language="F#" Value="member this.GetObjectStateEntry : obj -&gt; System.Data.Objects.ObjectStateEntry" Usage="objectStateManager.GetObjectStateEntry entity" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Objects.ObjectStateEntry</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entity" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="entity">
          <see cref="T:System.Object" /> al que pertenece la <see cref="T:System.Data.Objects.ObjectStateEntry" /> recuperada.</param>
        <summary>Devuelve una <see cref="T:System.Data.Objects.ObjectStateEntry" /> para el objeto especificado.</summary>
        <returns>
          <see cref="T:System.Data.Objects.ObjectStateEntry" /> correspondiente al <see cref="T:System.Object" /> especificado.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use la <xref:System.Data.Objects.ObjectStateManager.TryGetObjectStateEntry%28System.Object%2CSystem.Data.Objects.ObjectStateEntry%40%29> método devuelva un <xref:System.Data.Objects.ObjectStateEntry> objeto sin tener que controlar la <xref:System.InvalidOperationException> generados por el <xref:System.Data.Objects.ObjectStateManager.GetObjectStateEntry%28System.Object%29> método.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">No existe ninguna entidad para el <see cref="T:System.Object" /> especificado en el <see cref="T:System.Data.Objects.ObjectStateManager" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="GetRelationshipManager">
      <MemberSignature Language="C#" Value="public System.Data.Objects.DataClasses.RelationshipManager GetRelationshipManager (object entity);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Data.Objects.DataClasses.RelationshipManager GetRelationshipManager(object entity) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Objects.ObjectStateManager.GetRelationshipManager(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetRelationshipManager (entity As Object) As RelationshipManager" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Data::Objects::DataClasses::RelationshipManager ^ GetRelationshipManager(System::Object ^ entity);" />
      <MemberSignature Language="F#" Value="member this.GetRelationshipManager : obj -&gt; System.Data.Objects.DataClasses.RelationshipManager" Usage="objectStateManager.GetRelationshipManager entity" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Objects.DataClasses.RelationshipManager</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entity" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="entity">Objeto para el que se va a devolver la clase <see cref="T:System.Data.Objects.DataClasses.RelationshipManager" />.</param>
        <summary>Devuelve la clase <see cref="T:System.Data.Objects.DataClasses.RelationshipManager" /> usada por el objeto especificado.</summary>
        <returns>Clase <see cref="T:System.Data.Objects.DataClasses.RelationshipManager" /> para el objeto especificado.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Una llamada a la <xref:System.Data.Objects.ObjectStateManager.GetRelationshipManager%2A> método equivale a llamar a la <xref:System.Data.Objects.ObjectStateManager.TryGetRelationshipManager%2A> método, salvo que este método produce una excepción en lugar de devolver `false`.  
  
 Llame a la <xref:System.Data.Objects.ObjectStateManager.TryGetRelationshipManager%2A> método para no tener que controlar la <xref:System.InvalidOperationException> que se produce cuando un <xref:System.Data.Objects.DataClasses.RelationshipManager> no se puede devolver para la entidad proporcionada.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Cuando <see cref="T:System.Data.Objects.DataClasses.RelationshipManager" /> no se puede devolver para el <paramref name="entity" /> especificado.</exception>
      </Docs>
    </Member>
    <Member MemberName="MetadataWorkspace">
      <MemberSignature Language="C#" Value="public System.Data.Metadata.Edm.MetadataWorkspace MetadataWorkspace { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Data.Metadata.Edm.MetadataWorkspace MetadataWorkspace" />
      <MemberSignature Language="DocId" Value="P:System.Data.Objects.ObjectStateManager.MetadataWorkspace" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property MetadataWorkspace As MetadataWorkspace" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Data::Metadata::Edm::MetadataWorkspace ^ MetadataWorkspace { System::Data::Metadata::Edm::MetadataWorkspace ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.MetadataWorkspace : System.Data.Metadata.Edm.MetadataWorkspace" Usage="System.Data.Objects.ObjectStateManager.MetadataWorkspace" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Data.Metadata.Edm.MetadataWorkspace</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene el <see cref="T:System.Data.Metadata.Edm.MetadataWorkspace" /> asociada a este administrador de estados.</summary>
        <value>
          <see cref="T:System.Data.Metadata.Edm.MetadataWorkspace" /> asociada a esta <see cref="T:System.Data.Objects.ObjectStateManager" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La clase <xref:System.Data.Metadata.Edm.MetadataWorkspace> es una interfaz de programación central que se puede usar para interactuar con los metadatos de Entity Data Model (EDM) en tiempo de ejecución y en el contexto de una aplicación.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ObjectStateManagerChanged">
      <MemberSignature Language="C#" Value="public event System.ComponentModel.CollectionChangeEventHandler ObjectStateManagerChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.ComponentModel.CollectionChangeEventHandler ObjectStateManagerChanged" />
      <MemberSignature Language="DocId" Value="E:System.Data.Objects.ObjectStateManager.ObjectStateManagerChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event ObjectStateManagerChanged As CollectionChangeEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::ComponentModel::CollectionChangeEventHandler ^ ObjectStateManagerChanged;" />
      <MemberSignature Language="F#" Value="member this.ObjectStateManagerChanged : System.ComponentModel.CollectionChangeEventHandler " Usage="member this.ObjectStateManagerChanged : System.ComponentModel.CollectionChangeEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ComponentModel.CollectionChangeEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Se produce cuando las entidades se agregan o se quitan del administrador de estados.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="TryGetObjectStateEntry">
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Intenta devolver un objeto <see cref="T:System.Data.Objects.ObjectStateEntry" /> para una entrada de objeto o de relación específica.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="TryGetObjectStateEntry">
      <MemberSignature Language="C#" Value="public bool TryGetObjectStateEntry (System.Data.EntityKey key, out System.Data.Objects.ObjectStateEntry entry);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool TryGetObjectStateEntry(class System.Data.EntityKey key, [out] class System.Data.Objects.ObjectStateEntry&amp; entry) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Objects.ObjectStateManager.TryGetObjectStateEntry(System.Data.EntityKey,System.Data.Objects.ObjectStateEntry@)" />
      <MemberSignature Language="VB.NET" Value="Public Function TryGetObjectStateEntry (key As EntityKey, ByRef entry As ObjectStateEntry) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool TryGetObjectStateEntry(System::Data::EntityKey ^ key, [Runtime::InteropServices::Out] System::Data::Objects::ObjectStateEntry ^ % entry);" />
      <MemberSignature Language="F#" Value="member this.TryGetObjectStateEntry : System.Data.EntityKey *  -&gt; bool" Usage="objectStateManager.TryGetObjectStateEntry (key, entry)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.Data.EntityKey" />
        <Parameter Name="entry" Type="System.Data.Objects.ObjectStateEntry&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="key">
          <see cref="T:System.Data.EntityKey" /> especificada.</param>
        <param name="entry">Cuando termina, este método contiene una <see cref="T:System.Data.Objects.ObjectStateEntry" /> para la <see cref="T:System.Data.EntityKey" /> especificada. Este parámetro se pasa sin inicializar.</param>
        <summary>Intenta recuperar la correspondiente <see cref="T:System.Data.Objects.ObjectStateEntry" /> para el objeto o la relación con la <see cref="T:System.Data.EntityKey" /> especificada.</summary>
        <returns>Valor booleano que es <see langword="true" /> si hay un objeto <see cref="T:System.Data.Objects.ObjectStateEntry" /> correspondiente para el elemento <see cref="T:System.Data.EntityKey" /> especificado; de lo contrario, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use <xref:System.Data.Objects.ObjectStateManager.TryGetObjectStateEntry%28System.Data.EntityKey%2CSystem.Data.Objects.ObjectStateEntry%40%29> para devolver una <xref:System.Data.Objects.ObjectStateEntry> sin tener que controlar la <xref:System.InvalidOperationException> que ha iniciado el método <xref:System.Data.Objects.ObjectStateManager.GetObjectStateEntry%28System.Data.EntityKey%29>.  
  
   
  
## Examples  
 Los ejemplos de este tema se basan en el [modelo AdventureWorks Sales](http://msdn.microsoft.com/library/f16cd988-673f-4376-b034-129ca93c7832).  
  
 En el ejemplo, se intenta recuperar la correspondiente <xref:System.Data.Objects.ObjectStateEntry> para la <xref:System.Data.EntityKey> especificada.  
  
 [!code-csharp[DP ObjectServices Concepts#ObjectStateManager](~/samples/snippets/csharp/VS_Snippets_Data/DP ObjectServices Concepts/CS/Source.cs#objectstatemanager)]
 [!code-vb[DP ObjectServices Concepts#ObjectStateManager](~/samples/snippets/visualbasic/VS_Snippets_Data/DP ObjectServices Concepts/VB/Source.vb#objectstatemanager)]  
  
 En el ejemplo siguiente, se usa el método <xref:System.Data.Objects.ObjectStateManager.TryGetObjectStateEntry%28System.Data.EntityKey%2CSystem.Data.Objects.ObjectStateEntry%40%29> en el <xref:System.Data.Objects.ObjectStateManager> devuelto para obtener un objeto basado en su clave de entidad.  
  
 [!code-csharp[DP ObjectServices Concepts#ApplyItemUpdates](~/samples/snippets/csharp/VS_Snippets_Data/DP ObjectServices Concepts/CS/Source.cs#applyitemupdates)]
 [!code-vb[DP ObjectServices Concepts#ApplyItemUpdates](~/samples/snippets/visualbasic/VS_Snippets_Data/DP ObjectServices Concepts/VB/Source.vb#applyitemupdates)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="key" /> proporciona un valor <see langword="null" /> (<see langword="Nothing" /> en Visual Basic).</exception>
      </Docs>
    </Member>
    <Member MemberName="TryGetObjectStateEntry">
      <MemberSignature Language="C#" Value="public bool TryGetObjectStateEntry (object entity, out System.Data.Objects.ObjectStateEntry entry);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool TryGetObjectStateEntry(object entity, [out] class System.Data.Objects.ObjectStateEntry&amp; entry) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Objects.ObjectStateManager.TryGetObjectStateEntry(System.Object,System.Data.Objects.ObjectStateEntry@)" />
      <MemberSignature Language="VB.NET" Value="Public Function TryGetObjectStateEntry (entity As Object, ByRef entry As ObjectStateEntry) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool TryGetObjectStateEntry(System::Object ^ entity, [Runtime::InteropServices::Out] System::Data::Objects::ObjectStateEntry ^ % entry);" />
      <MemberSignature Language="F#" Value="member this.TryGetObjectStateEntry : obj *  -&gt; bool" Usage="objectStateManager.TryGetObjectStateEntry (entity, entry)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entity" Type="System.Object" />
        <Parameter Name="entry" Type="System.Data.Objects.ObjectStateEntry&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="entity">
          <see cref="T:System.Object" /> al que pertenece la <see cref="T:System.Data.Objects.ObjectStateEntry" /> recuperada.</param>
        <param name="entry">Cuando termina, este método contiene la <see cref="T:System.Data.Objects.ObjectStateEntry" /> para la <see cref="T:System.Data.EntityKey" /> especificada. Este parámetro se pasa sin inicializar.</param>
        <summary>Intenta recuperar la correspondiente <see cref="T:System.Data.Objects.ObjectStateEntry" /> para el <see cref="T:System.Object" /> especificado.</summary>
        <returns>Valor booleano que es <see langword="true" /> si hay un objeto <see cref="T:System.Data.Objects.ObjectStateEntry" /> correspondiente para el objeto especificado; de lo contrario, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use el método <xref:System.Data.Objects.ObjectStateManager.TryGetObjectStateEntry%28System.Object%2CSystem.Data.Objects.ObjectStateEntry%40%29> para devolver una <xref:System.Data.Objects.ObjectStateEntry> sin tener que controlar la <xref:System.InvalidOperationException> que ha iniciado el método <xref:System.Data.Objects.ObjectStateManager.GetObjectStateEntry%28System.Object%29>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TryGetRelationshipManager">
      <MemberSignature Language="C#" Value="public bool TryGetRelationshipManager (object entity, out System.Data.Objects.DataClasses.RelationshipManager relationshipManager);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool TryGetRelationshipManager(object entity, [out] class System.Data.Objects.DataClasses.RelationshipManager&amp; relationshipManager) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Objects.ObjectStateManager.TryGetRelationshipManager(System.Object,System.Data.Objects.DataClasses.RelationshipManager@)" />
      <MemberSignature Language="VB.NET" Value="Public Function TryGetRelationshipManager (entity As Object, ByRef relationshipManager As RelationshipManager) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool TryGetRelationshipManager(System::Object ^ entity, [Runtime::InteropServices::Out] System::Data::Objects::DataClasses::RelationshipManager ^ % relationshipManager);" />
      <MemberSignature Language="F#" Value="member this.TryGetRelationshipManager : obj *  -&gt; bool" Usage="objectStateManager.TryGetRelationshipManager (entity, relationshipManager)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entity" Type="System.Object" />
        <Parameter Name="relationshipManager" Type="System.Data.Objects.DataClasses.RelationshipManager&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="entity">Objeto para el que se va a devolver la clase <see cref="T:System.Data.Objects.DataClasses.RelationshipManager" />.</param>
        <param name="relationshipManager">Cuando este método devuelve un valor, contiene <see cref="T:System.Data.Objects.DataClasses.RelationshipManager" /> para <c>entity</c>.</param>
        <summary>Devuelve la clase <see cref="T:System.Data.Objects.DataClasses.RelationshipManager" /> usada por el objeto especificado.</summary>
        <returns>
          <see langword="true" /> si se devolvió una instancia <see cref="T:System.Data.Objects.DataClasses.RelationshipManager" /> para el objeto <paramref name="entity" /> proporcionado; de lo contrario <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Data.Objects.ObjectStateManager.GetRelationshipManager%2A> método se utiliza para obtener el <xref:System.Data.Objects.DataClasses.RelationshipManager> para los objetos que ignoran la persistencia. Cuando se implementan objetos <xref:System.Data.Objects.DataClasses.IEntityWithRelationships> o heredar <xref:System.Data.Objects.DataClasses.EntityObject>, <xref:System.Data.Objects.DataClasses.RelationshipManager> se obtiene acceso desde el <xref:System.Data.Objects.DataClasses.IEntityWithRelationships.RelationshipManager%2A> propiedad.  
  
 El <xref:System.Data.Objects.DataClasses.RelationshipManager> no se puede devolver cuando el objeto está en un <xref:System.Data.EntityState.Detached> estado.  
  
 Una llamada a la <xref:System.Data.Objects.ObjectStateManager.TryGetRelationshipManager%2A> método equivale a llamar a la <xref:System.Data.Objects.ObjectStateManager.GetRelationshipManager%2A> método, salvo que este método devuelve `false` en lugar de generar una excepción.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>