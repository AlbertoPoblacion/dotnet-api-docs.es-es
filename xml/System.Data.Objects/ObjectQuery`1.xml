<Type Name="ObjectQuery&lt;T&gt;" FullName="System.Data.Objects.ObjectQuery&lt;T&gt;">
  <Metadata><Meta Name="ms.openlocfilehash" Value="8527b392b7347bbac99bcbc2e1d96eef4687848b" /><Meta Name="ms.sourcegitcommit" Value="42a3c35677e9d87eeb503607ae50c9d39827d414" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="es-ES" /><Meta Name="ms.lasthandoff" Value="12/17/2018" /><Meta Name="ms.locfileid" Value="53490588" /></Metadata><TypeSignature Language="C#" Value="public class ObjectQuery&lt;T&gt; : System.Data.Objects.ObjectQuery, System.Collections.Generic.IEnumerable&lt;T&gt;, System.ComponentModel.IListSource, System.Linq.IOrderedQueryable&lt;T&gt;, System.Linq.IQueryable&lt;T&gt;" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit ObjectQuery`1&lt;T&gt; extends System.Data.Objects.ObjectQuery implements class System.Collections.Generic.IEnumerable`1&lt;!T&gt;, class System.Collections.IEnumerable, class System.ComponentModel.IListSource, class System.Linq.IOrderedQueryable, class System.Linq.IOrderedQueryable`1&lt;!T&gt;, class System.Linq.IQueryable, class System.Linq.IQueryable`1&lt;!T&gt;" />
  <TypeSignature Language="DocId" Value="T:System.Data.Objects.ObjectQuery`1" />
  <TypeSignature Language="VB.NET" Value="Public Class ObjectQuery(Of T)&#xA;Inherits ObjectQuery&#xA;Implements IEnumerable(Of T), IListSource, IOrderedQueryable(Of T), IQueryable(Of T)" />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename T&gt;&#xA;public ref class ObjectQuery : System::Data::Objects::ObjectQuery, System::Collections::Generic::IEnumerable&lt;T&gt;, System::ComponentModel::IListSource, System::Linq::IOrderedQueryable&lt;T&gt;, System::Linq::IQueryable&lt;T&gt;" />
  <TypeSignature Language="F#" Value="type ObjectQuery&lt;'T&gt; = class&#xA;    inherit ObjectQuery&#xA;    interface seq&lt;'T&gt;&#xA;    interface IEnumerable&#xA;    interface IQueryable&lt;'T&gt;&#xA;    interface IQueryable&#xA;    interface IOrderedQueryable&lt;'T&gt;&#xA;    interface IOrderedQueryable&#xA;    interface IListSource" />
  <AssemblyInfo>
    <AssemblyName>System.Data.Entity</AssemblyName>
    <AssemblyVersion>3.5.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="T" />
  </TypeParameters>
  <Base>
    <BaseTypeName>System.Data.Objects.ObjectQuery</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Collections.Generic.IEnumerable&lt;T&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.IEnumerable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.ComponentModel.IListSource</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Linq.IOrderedQueryable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Linq.IOrderedQueryable&lt;T&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Linq.IQueryable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Linq.IQueryable&lt;T&gt;</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <typeparam name="T">Tipo de entidad de la consulta.</typeparam>
    <summary>Representa una consulta con tipo en un modelo conceptual en un contexto de objeto determinado.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La clase genérica <xref:System.Data.Objects.ObjectQuery%601> representa una consulta que devuelve una colección de cero o más objetos de un tipo determinado. El <xref:System.Data.Objects.ObjectContext> debe estar definido antes de la ejecución de una consulta de objeto. Este contexto proporciona la información de metadatos y de conexión necesaria para crear y ejecutar la consulta. Una consulta de objeto se ejecuta en los escenarios siguientes:  
  
-   Cuando se actúa sobre ella; por ejemplo, durante una enumeración `foreach` (C#) o `For Each` (Visual Basic).  
  
-   Cuando se asigna para rellenar una colección <xref:System.Collections.Generic.List%601>.  
  
-   Cuando se llama explícitamente al método <xref:System.Data.Objects.ObjectQuery%601.Execute%2A>.  
  
 La consulta en sí se puede crear usando una instrucción [!INCLUDE[esql](~/includes/esql-md.md)] o una consulta LINQ, o puede generarse incrementalmente mediante los métodos del generador de consultas incluidos en la clase. En cualquier caso, el resultado es una nueva instancia de <xref:System.Data.Objects.ObjectQuery%601> que, cuando se ejecute o se enumere explícitamente, enviará la consulta al origen de datos para su ejecución y devolverá los resultados.  
  
 Una <xref:System.Data.Objects.ObjectQuery%601> suele ser de un tipo de entidad, pero también puede ser del tipo <xref:System.Data.Common.DbDataRecord>, para las proyecciones a un tipo anónimo, o de un tipo primitivo, como un entero o una cadena. Para obtener más información, consulte [las consultas de objeto](https://msdn.microsoft.com/library/0768033c-876f-471d-85d5-264884349276).  
  
   
  
## Examples  
 El ejemplo de este tema se basa en el [modelo AdventureWorks Sales](https://msdn.microsoft.com/library/f16cd988-673f-4376-b034-129ca93c7832).  
  
 En el ejemplo se muestra cómo construir una instancia de la clase <xref:System.Data.Objects.ObjectQuery%601>.  
  
 [!code-csharp[DP ObjectServices Concepts#ObjectQuery](~/samples/snippets/csharp/VS_Snippets_Data/DP ObjectServices Concepts/CS/Source.cs#objectquery)]
 [!code-vb[DP ObjectServices Concepts#ObjectQuery](~/samples/snippets/visualbasic/VS_Snippets_Data/DP ObjectServices Concepts/VB/Source.vb#objectquery)]  
  
 ]]></format>
    </remarks>
    <related type="Article" href="https://msdn.microsoft.com/library/9e7d8837-28c5-429d-a824-7bafb59724cf">Lenguaje Entity SQL</related>
    <related type="Article" href="https://msdn.microsoft.com/library/641f9b68-9046-47a1-abb0-1c8eaeda0e2d">LINQ to Entities</related>
    <related type="Article" href="~/docs/framework/data/adonet/ef/querying-a-conceptual-model.md">Consultar datos como objetos (Entity Framework)</related>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Data.Objects.ObjectQuery`1" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Se puede inicializar una <xref:System.Data.Objects.ObjectQuery%601> de modo que represente un único resultado escalar y no una colección de resultados escalares. Algunos métodos de extensión requieren el uso de los resultados de la colección como entrada. En este caso, se produce una <xref:System.ArgumentException> cuando se llama a uno de estos métodos. Para obtener más información, consulte [las consultas de objeto](https://msdn.microsoft.com/library/0768033c-876f-471d-85d5-264884349276).  
  
 Cuando la aplicación genera consultas Entity SQL en tiempo de ejecución, debe tener en cuenta las limitaciones de longitud de comando del origen de datos. Entity SQL no impone limitaciones en la longitud del texto del comando en las consultas.  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/framework/data/adonet/ef/querying-a-conceptual-model.md">Consultar datos como objetos y dar forma a los resultados (Entity Framework)</related>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ObjectQuery (string commandText, System.Data.Objects.ObjectContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string commandText, class System.Data.Objects.ObjectContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Objects.ObjectQuery`1.#ctor(System.String,System.Data.Objects.ObjectContext)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (commandText As String, context As ObjectContext)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ObjectQuery(System::String ^ commandText, System::Data::Objects::ObjectContext ^ context);" />
      <MemberSignature Language="F#" Value="new System.Data.Objects.ObjectQuery&lt;'T&gt; : string * System.Data.Objects.ObjectContext -&gt; System.Data.Objects.ObjectQuery&lt;'T&gt;" Usage="new System.Data.Objects.ObjectQuery&lt;'T&gt; (commandText, context)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="commandText" Type="System.String" />
        <Parameter Name="context" Type="System.Data.Objects.ObjectContext" />
      </Parameters>
      <Docs>
        <param name="commandText">Consulta [!INCLUDE[esql](~/includes/esql-md.md)].</param>
        <param name="context"><see cref="T:System.Data.Objects.ObjectContext" /> en el que se va a ejecutar la consulta.</param>
        <summary>Crea una nueva instancia de <see cref="T:System.Data.Objects.ObjectQuery`1" /> usando el comando [!INCLUDE[esql](~/includes/esql-md.md)] especificado como consulta inicial.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cuando la aplicación genera consultas Entity SQL en tiempo de ejecución, debe tener en cuenta las limitaciones de longitud de comando del origen de datos. Entity SQL no impone limitaciones en la longitud del texto del comando en las consultas.  
  
   
  
## Examples  
 El ejemplo de este tema se basa en el [modelo AdventureWorks Sales](https://msdn.microsoft.com/library/f16cd988-673f-4376-b034-129ca93c7832). En el ejemplo se muestra cómo construir una instancia de la clase <xref:System.Data.Objects.ObjectQuery%601>.  
  
 [!code-csharp[DP ObjectServices Concepts#ObjectQuery](~/samples/snippets/csharp/VS_Snippets_Data/DP ObjectServices Concepts/CS/Source.cs#objectquery)]
 [!code-vb[DP ObjectServices Concepts#ObjectQuery](~/samples/snippets/visualbasic/VS_Snippets_Data/DP ObjectServices Concepts/VB/Source.vb#objectquery)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/framework/data/adonet/ef/querying-a-conceptual-model.md">Consultar datos como objetos (Entity Framework)</related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ObjectQuery (string commandText, System.Data.Objects.ObjectContext context, System.Data.Objects.MergeOption mergeOption);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string commandText, class System.Data.Objects.ObjectContext context, valuetype System.Data.Objects.MergeOption mergeOption) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Objects.ObjectQuery`1.#ctor(System.String,System.Data.Objects.ObjectContext,System.Data.Objects.MergeOption)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ObjectQuery(System::String ^ commandText, System::Data::Objects::ObjectContext ^ context, System::Data::Objects::MergeOption mergeOption);" />
      <MemberSignature Language="F#" Value="new System.Data.Objects.ObjectQuery&lt;'T&gt; : string * System.Data.Objects.ObjectContext * System.Data.Objects.MergeOption -&gt; System.Data.Objects.ObjectQuery&lt;'T&gt;" Usage="new System.Data.Objects.ObjectQuery&lt;'T&gt; (commandText, context, mergeOption)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="commandText" Type="System.String" />
        <Parameter Name="context" Type="System.Data.Objects.ObjectContext" />
        <Parameter Name="mergeOption" Type="System.Data.Objects.MergeOption" />
      </Parameters>
      <Docs>
        <param name="commandText">Consulta [!INCLUDE[esql](~/includes/esql-md.md)].</param>
        <param name="context"><see cref="T:System.Data.Objects.ObjectContext" /> en el que se va a ejecutar la consulta.</param>
        <param name="mergeOption">Especifica el modo en que las entidades que se recuperen a través de esta consulta se deberían combinar con las entidades devueltas por consultas anteriores en el mismo <see cref="T:System.Data.Objects.ObjectContext" />.</param>
        <summary>Crea una nueva instancia de <see cref="T:System.Data.Objects.ObjectQuery`1" /> usando el comando [!INCLUDE[esql](~/includes/esql-md.md)] especificado como consulta inicial y la opción de fusión mediante combinación especificada.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cuando la aplicación genera consultas Entity SQL en tiempo de ejecución, debe tener en cuenta las limitaciones de longitud de comando del origen de datos. Entity SQL no impone limitaciones en la longitud del texto del comando en las consultas.  
  
   
  
## Examples  
 En este ejemplo se basa en el [modelo AdventureWorks Sales](https://msdn.microsoft.com/library/f16cd988-673f-4376-b034-129ca93c7832). <xref:System.Data.Objects.ObjectQuery%601> se inicializa con la consulta especificada, <xref:System.Data.Objects.ObjectContext> y <xref:System.Data.Objects.MergeOption>.  
  
 [!code-csharp[DP ObjectServices Concepts#ObjectQuery_Select](~/samples/snippets/csharp/VS_Snippets_Data/DP ObjectServices Concepts/CS/Source.cs#objectquery_select)]
 [!code-vb[DP ObjectServices Concepts#ObjectQuery_Select](~/samples/snippets/visualbasic/VS_Snippets_Data/DP ObjectServices Concepts/VB/Source.vb#objectquery_select)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Distinct">
      <MemberSignature Language="C#" Value="public System.Data.Objects.ObjectQuery&lt;T&gt; Distinct ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Data.Objects.ObjectQuery`1&lt;!T&gt; Distinct() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Objects.ObjectQuery`1.Distinct" />
      <MemberSignature Language="VB.NET" Value="Public Function Distinct () As ObjectQuery(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Data::Objects::ObjectQuery&lt;T&gt; ^ Distinct();" />
      <MemberSignature Language="F#" Value="member this.Distinct : unit -&gt; System.Data.Objects.ObjectQuery&lt;'T&gt;" Usage="objectQuery.Distinct " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Objects.ObjectQuery&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Limita la consulta a los resultados únicos.</summary>
        <returns>Nueva instancia de <see cref="T:System.Data.Objects.ObjectQuery`1" /> que es equivalente a la instancia original, pero aplicando <see href="https://docs.microsoft.com/dotnet/framework/data/adonet/ef/language-reference/select-entity-sql">SELECT DISTINCT</see>.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este método de generador de consultas devuelve una <xref:System.Data.Objects.ObjectQuery%601> instancia que es equivalente a la consulta original con [SELECT DISTINCT](~/docs/framework/data/adonet/ef/language-reference/select-entity-sql.md) aplicado.  
  
 El `DISTINCT` operador no se puede aplicar a un objeto que incluye una asignación a una columna no comparable del origen de datos (como ntext).  
  
   
  
## Examples  
 El ejemplo de este tema se basa en el [modelo AdventureWorks Sales](https://msdn.microsoft.com/library/f16cd988-673f-4376-b034-129ca93c7832). A continuación, el ejemplo usa el método <xref:System.Data.Objects.ObjectQuery%601.UnionAll%2A> para crear un objeto <xref:System.Data.Objects.ObjectQuery%601> nuevo. A continuación, llama a <xref:System.Data.Objects.ObjectQuery%601.Distinct%2A> en el nuevo objeto <xref:System.Data.Objects.ObjectQuery%601> para obtener los resultados únicos de esta consulta.  
  
 [!code-csharp[DP ObjectServices Concepts#ObjectQuery_Distinct_UnionAll](~/samples/snippets/csharp/VS_Snippets_Data/DP ObjectServices Concepts/CS/Source.cs#objectquery_distinct_unionall)]
 [!code-vb[DP ObjectServices Concepts#ObjectQuery_Distinct_UnionAll](~/samples/snippets/visualbasic/VS_Snippets_Data/DP ObjectServices Concepts/VB/Source.vb#objectquery_distinct_unionall)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/framework/data/adonet/ef/querying-a-conceptual-model.md">Consultar datos como objetos (Entity Framework)</related>
      </Docs>
    </Member>
    <Member MemberName="Except">
      <MemberSignature Language="C#" Value="public System.Data.Objects.ObjectQuery&lt;T&gt; Except (System.Data.Objects.ObjectQuery&lt;T&gt; query);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Data.Objects.ObjectQuery`1&lt;!T&gt; Except(class System.Data.Objects.ObjectQuery`1&lt;!T&gt; query) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Objects.ObjectQuery`1.Except(System.Data.Objects.ObjectQuery{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Function Except (query As ObjectQuery(Of T)) As ObjectQuery(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Data::Objects::ObjectQuery&lt;T&gt; ^ Except(System::Data::Objects::ObjectQuery&lt;T&gt; ^ query);" />
      <MemberSignature Language="F#" Value="member this.Except : System.Data.Objects.ObjectQuery&lt;'T&gt; -&gt; System.Data.Objects.ObjectQuery&lt;'T&gt;" Usage="objectQuery.Except query" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Objects.ObjectQuery&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="query" Type="System.Data.Objects.ObjectQuery&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="query"><see cref="T:System.Data.Objects.ObjectQuery`1" /> que representa los resultados que hay que excluir de la consulta.</param>
        <summary>Limita los resultados de la consulta excluyendo resultados basándose en los resultados de otra consulta de objeto.</summary>
        <returns>Nueva instancia de <see cref="T:System.Data.Objects.ObjectQuery`1" /> que es equivalente a la instancia original, pero aplicando <see href="https://docs.microsoft.com/dotnet/framework/data/adonet/ef/language-reference/except-entity-sql">EXCEPT</see> basándose en la <paramref name="query" /> especificada.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Suministrado `query` que define los resultados que excluir debe ser del mismo tipo o de un tipo que es compatible con la <xref:System.Data.Objects.ObjectQuery%601>.  
  
 Parámetros que se definen en proporcionado `query` se combinan con los parámetros que se definen en el <xref:System.Data.Objects.ObjectQuery%601> instancia. Los parámetros deben ser únicos en la <xref:System.Data.Objects.ObjectParameterCollection> combinada. No puede haber dos parámetros en la colección combinada con el mismo nombre. Para obtener más información, consulte [métodos del generador de consultas](https://msdn.microsoft.com/library/05685434-05e6-41c2-8d5e-8933b88a40b0).  
  
 La consulta resultante hereda la conexión de la instancia de <xref:System.Data.Objects.ObjectQuery%601> en la que se llamó a <xref:System.Data.Objects.ObjectQuery%601.Except%2A>.  
  
   
  
## Examples  
 En este ejemplo se basa en el [modelo AdventureWorks Sales](https://msdn.microsoft.com/library/f16cd988-673f-4376-b034-129ca93c7832). En el ejemplo, se usa el método <xref:System.Data.Objects.ObjectQuery%601.Except%2A> para crear un nuevo objeto <xref:System.Data.Objects.ObjectQuery%601> y, a continuación, se recorre en iteración el resultado de la nueva consulta.  
  
 [!code-csharp[DP ObjectServices Concepts#ObjectQuery_Except](~/samples/snippets/csharp/VS_Snippets_Data/DP ObjectServices Concepts/CS/Source.cs#objectquery_except)]
 [!code-vb[DP ObjectServices Concepts#ObjectQuery_Except](~/samples/snippets/visualbasic/VS_Snippets_Data/DP ObjectServices Concepts/VB/Source.vb#objectquery_except)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">El parámetro <paramref name="query" /> es <see langword="null" /> o una cadena vacía.</exception>
        <related type="Article" href="~/docs/framework/data/adonet/ef/querying-a-conceptual-model.md">Consultar datos como objetos y dar forma a los resultados (Entity Framework)</related>
      </Docs>
    </Member>
    <Member MemberName="Execute">
      <MemberSignature Language="C#" Value="public System.Data.Objects.ObjectResult&lt;T&gt; Execute (System.Data.Objects.MergeOption mergeOption);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Data.Objects.ObjectResult`1&lt;!T&gt; Execute(valuetype System.Data.Objects.MergeOption mergeOption) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Objects.ObjectQuery`1.Execute(System.Data.Objects.MergeOption)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Data::Objects::ObjectResult&lt;T&gt; ^ Execute(System::Data::Objects::MergeOption mergeOption);" />
      <MemberSignature Language="F#" Value="override this.Execute : System.Data.Objects.MergeOption -&gt; System.Data.Objects.ObjectResult&lt;'T&gt;" Usage="objectQuery.Execute mergeOption" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Objects.ObjectResult&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="mergeOption" Type="System.Data.Objects.MergeOption" />
      </Parameters>
      <Docs>
        <param name="mergeOption"><see cref="T:System.Data.Objects.MergeOption" /> que se debe usar al ejecutar la consulta. De manera predeterminada, es <see cref="F:System.Data.Objects.MergeOption.AppendOnly" />.</param>
        <summary>Ejecuta la consulta de objeto con la opción de fusión mediante combinación especificada.</summary>
        <returns><see cref="T:System.Data.Objects.ObjectResult`1" /> que contiene una colección de objetos entidad devueltos por la consulta.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La opción de fusión mediante combinación predeterminada para las consultas de objeto es <xref:System.Data.Objects.MergeOption.AppendOnly>. Para obtener más información, consulte [resolución de identidades, administración de Estados y seguimiento de cambios](https://msdn.microsoft.com/library/3bd49311-0e72-4ea4-8355-38fe57036ba0).  
  
   
  
## Examples  
 En este ejemplo se basa en el [modelo AdventureWorks Sales](https://msdn.microsoft.com/library/f16cd988-673f-4376-b034-129ca93c7832). El ejemplo devuelve un <xref:System.Data.Objects.ObjectResult%601> a partir de un método <xref:System.Data.Objects.ObjectQuery.Execute%2A>. A continuación, obtiene un enumerador y recorre en iteración los resultados de la consulta. Por último, libera el enumerador y el objeto <xref:System.Data.Objects.ObjectResult%601>.  
  
 [!code-csharp[DP ObjectServices Concepts#QueryResult](~/samples/snippets/csharp/VS_Snippets_Data/DP ObjectServices Concepts/CS/Source.cs#queryresult)]
 [!code-vb[DP ObjectServices Concepts#QueryResult](~/samples/snippets/visualbasic/VS_Snippets_Data/DP ObjectServices Concepts/VB/Source.vb#queryresult)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/framework/data/adonet/ef/querying-a-conceptual-model.md">Consultar datos como objetos (Entity Framework)</related>
      </Docs>
    </Member>
    <Member MemberName="GroupBy">
      <MemberSignature Language="C#" Value="public System.Data.Objects.ObjectQuery&lt;System.Data.Common.DbDataRecord&gt; GroupBy (string keys, string projection, params System.Data.Objects.ObjectParameter[] parameters);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Data.Objects.ObjectQuery`1&lt;class System.Data.Common.DbDataRecord&gt; GroupBy(string keys, string projection, class System.Data.Objects.ObjectParameter[] parameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Objects.ObjectQuery`1.GroupBy(System.String,System.String,System.Data.Objects.ObjectParameter[])" />
      <MemberSignature Language="VB.NET" Value="Public Function GroupBy (keys As String, projection As String, ParamArray parameters As ObjectParameter()) As ObjectQuery(Of DbDataRecord)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Data::Objects::ObjectQuery&lt;System::Data::Common::DbDataRecord ^&gt; ^ GroupBy(System::String ^ keys, System::String ^ projection, ... cli::array &lt;System::Data::Objects::ObjectParameter ^&gt; ^ parameters);" />
      <MemberSignature Language="F#" Value="member this.GroupBy : string * string * System.Data.Objects.ObjectParameter[] -&gt; System.Data.Objects.ObjectQuery&lt;System.Data.Common.DbDataRecord&gt;" Usage="objectQuery.GroupBy (keys, projection, parameters)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Objects.ObjectQuery&lt;System.Data.Common.DbDataRecord&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="keys" Type="System.String" />
        <Parameter Name="projection" Type="System.String" />
        <Parameter Name="parameters" Type="System.Data.Objects.ObjectParameter[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="keys">Columnas de clave por las que se deben agrupar los resultados.</param>
        <param name="projection">Lista de propiedades seleccionadas que define la proyección.</param>
        <param name="parameters">Cero o más parámetros que se usan en este método.</param>
        <summary>Agrupa los resultados de la consulta de acuerdo con los criterios especificados.</summary>
        <returns>Nueva instancia de <see cref="T:System.Data.Objects.ObjectQuery`1" /> de tipo <see cref="T:System.Data.Common.DbDataRecord" /> que es equivalente a la instancia original, pero aplicando <see href="https://docs.microsoft.com/dotnet/framework/data/adonet/ef/language-reference/group-by-entity-sql">GROUP BY</see>.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.Objects.ObjectQuery%601.GroupBy%2A> se aplica la proyección especificada por el `projection` parámetro. Esto significa que la <xref:System.Data.Objects.ObjectQuery%601> devuelta por el método <xref:System.Data.Objects.ObjectQuery%601.GroupBy%2A> siempre es de tipo <xref:System.Data.Common.DbDataRecord>. Para obtener más información, consulte [las consultas de objeto](https://msdn.microsoft.com/library/0768033c-876f-471d-85d5-264884349276).  
  
   
  
## Examples  
 En este ejemplo se basa en el [modelo AdventureWorks Sales](https://msdn.microsoft.com/library/f16cd988-673f-4376-b034-129ca93c7832).  
  
 En este ejemplo, se crea un nuevo objeto <xref:System.Data.Objects.ObjectQuery%601> que contiene los resultados de la consulta existente agrupados por nombre de producto.  
  
 [!code-csharp[DP ObjectServices Concepts#ObjectQuery_GroupBy](~/samples/snippets/csharp/VS_Snippets_Data/DP ObjectServices Concepts/CS/Source.cs#objectquery_groupby)]
 [!code-vb[DP ObjectServices Concepts#ObjectQuery_GroupBy](~/samples/snippets/visualbasic/VS_Snippets_Data/DP ObjectServices Concepts/VB/Source.vb#objectquery_groupby)]  
  
 En este ejemplo se devuelve un conjunto de registros de datos anidados que contienen el `Contact.LastName` columna, agrupados y ordenados alfabéticamente por la primera letra de `Contact.LastName`.  
  
 [!code-csharp[DP ObjectServices Concepts#Projection_GroupBy](~/samples/snippets/csharp/VS_Snippets_Data/DP ObjectServices Concepts/CS/Source.cs#projection_groupby)]
 [!code-vb[DP ObjectServices Concepts#Projection_GroupBy](~/samples/snippets/visualbasic/VS_Snippets_Data/DP ObjectServices Concepts/VB/Source.vb#projection_groupby)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">El parámetro <paramref name="query" /> es <see langword="null" /> o una cadena vacía.  
  
O bien 
El parámetro <paramref name="projection" /> es <see langword="null" /> o una cadena vacía.</exception>
        <related type="Article" href="~/docs/framework/data/adonet/ef/querying-a-conceptual-model.md">Consultar datos como objetos (Entity Framework)</related>
      </Docs>
    </Member>
    <Member MemberName="Include">
      <MemberSignature Language="C#" Value="public System.Data.Objects.ObjectQuery&lt;T&gt; Include (string path);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Data.Objects.ObjectQuery`1&lt;!T&gt; Include(string path) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Objects.ObjectQuery`1.Include(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function Include (path As String) As ObjectQuery(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Data::Objects::ObjectQuery&lt;T&gt; ^ Include(System::String ^ path);" />
      <MemberSignature Language="F#" Value="member this.Include : string -&gt; System.Data.Objects.ObjectQuery&lt;'T&gt;" Usage="objectQuery.Include path" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Objects.ObjectQuery&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="path">Lista separada por puntos de los objetos relacionados que se deben devolver en los resultados de la consulta.</param>
        <summary>Especifica los objetos relacionados que se van a incluir en los resultados de la consulta.</summary>
        <returns>Nueva <see cref="T:System.Data.Objects.ObjectQuery`1" /> con la ruta de la consulta definida.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Las rutas de la consulta se pueden usar con consultas Entity SQL y LINQ.  
  
 Las rutas son exhaustivas. Por ejemplo, si una llamada de inclusión indica `Include("Orders.OrderLines")`, no sólo le `OrderLines` incluirán, sino también `Orders`. Para obtener más información, consulte [cargar objetos relacionados](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/bb896272(v=vs.100)).  
  
 Cuando se llama al método <xref:System.Data.Objects.ObjectQuery%601.Include%2A>, la ruta de la consulta solo es válida en la instancia devuelta de <xref:System.Data.Objects.ObjectQuery%601>. Otras instancias de <xref:System.Data.Objects.ObjectQuery%601> y el contexto del objeto en sí no se ven afectados.  
  
 Dado que el método <xref:System.Data.Objects.ObjectQuery%601.Include%2A> devuelve el objeto de consulta, puede llamar varias veces a este método en una <xref:System.Data.Objects.ObjectQuery%601> para especificar varias rutas para la consulta, como en el ejemplo siguiente:  
  
 [!code-csharp[DP ObjectServices Concepts#SpanOnlyWithMultiplePaths](~/samples/snippets/csharp/VS_Snippets_Data/DP ObjectServices Concepts/CS/Source.cs#spanonlywithmultiplepaths)]
 [!code-vb[DP ObjectServices Concepts#SpanOnlyWithMultiplePaths](~/samples/snippets/visualbasic/VS_Snippets_Data/DP ObjectServices Concepts/VB/Source.vb#spanonlywithmultiplepaths)]  
  
   
  
## Examples  
 [!code-csharp[DP ObjectServices Concepts#QueryWithSpan](~/samples/snippets/csharp/VS_Snippets_Data/DP ObjectServices Concepts/CS/Source.cs#querywithspan)]
 [!code-vb[DP ObjectServices Concepts#QueryWithSpan](~/samples/snippets/visualbasic/VS_Snippets_Data/DP ObjectServices Concepts/VB/Source.vb#querywithspan)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">El valor de <paramref name="path" /> es <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">El valor de <paramref name="path" /> es <see langword="empty" />.</exception>
        <related type="Article" href="~/docs/framework/data/adonet/ef/querying-a-conceptual-model.md">Consultar datos como objetos (Entity Framework)</related>
      </Docs>
    </Member>
    <Member MemberName="Intersect">
      <MemberSignature Language="C#" Value="public System.Data.Objects.ObjectQuery&lt;T&gt; Intersect (System.Data.Objects.ObjectQuery&lt;T&gt; query);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Data.Objects.ObjectQuery`1&lt;!T&gt; Intersect(class System.Data.Objects.ObjectQuery`1&lt;!T&gt; query) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Objects.ObjectQuery`1.Intersect(System.Data.Objects.ObjectQuery{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Function Intersect (query As ObjectQuery(Of T)) As ObjectQuery(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Data::Objects::ObjectQuery&lt;T&gt; ^ Intersect(System::Data::Objects::ObjectQuery&lt;T&gt; ^ query);" />
      <MemberSignature Language="F#" Value="member this.Intersect : System.Data.Objects.ObjectQuery&lt;'T&gt; -&gt; System.Data.Objects.ObjectQuery&lt;'T&gt;" Usage="objectQuery.Intersect query" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Objects.ObjectQuery&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="query" Type="System.Data.Objects.ObjectQuery&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="query"><see cref="T:System.Data.Objects.ObjectQuery`1" /> que representa los resultados que hay que incluir en la consulta.</param>
        <summary>Limita los resultados de la consulta incluyendo solo los resultados existentes en otra consulta de objeto.</summary>
        <returns>Nueva instancia de <see cref="T:System.Data.Objects.ObjectQuery`1" /> que es equivalente a la instancia original, pero aplicando <see href="https://docs.microsoft.com/dotnet/framework/data/adonet/ef/language-reference/intersect-entity-sql">INTERSECT</see> basándose en la <paramref name="query" /> especificada.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Suministrado `query` que define los resultados que incluir debe ser del mismo tipo o de un tipo que es compatible con la <xref:System.Data.Objects.ObjectQuery%601>.  
  
 Parámetros que se definen en proporcionado `query` se combinan con los parámetros que se definen en el <xref:System.Data.Objects.ObjectQuery%601> instancia. Los parámetros deben ser únicos en la <xref:System.Data.Objects.ObjectParameterCollection> combinada. No puede haber dos parámetros en la colección combinada con el mismo nombre. Para obtener más información, consulte [métodos del generador de consultas](https://msdn.microsoft.com/library/05685434-05e6-41c2-8d5e-8933b88a40b0).  
  
 La consulta resultante hereda la conexión de la instancia de <xref:System.Data.Objects.ObjectQuery%601> en la que se llamó al método <xref:System.Data.Objects.ObjectQuery%601.Intersect%2A>.  
  
   
  
## Examples  
 El ejemplo de este tema se basa en el [modelo AdventureWorks Sales](https://msdn.microsoft.com/library/f16cd988-673f-4376-b034-129ca93c7832). En este ejemplo, se crea un nuevo objeto <xref:System.Data.Objects.ObjectQuery%601> que contiene los resultados de otras dos consultas.  
  
 [!code-csharp[DP ObjectServices Concepts#ObjectQuery_Intersect](~/samples/snippets/csharp/VS_Snippets_Data/DP ObjectServices Concepts/CS/Source.cs#objectquery_intersect)]
 [!code-vb[DP ObjectServices Concepts#ObjectQuery_Intersect](~/samples/snippets/visualbasic/VS_Snippets_Data/DP ObjectServices Concepts/VB/Source.vb#objectquery_intersect)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">El parámetro <paramref name="query" /> es <see langword="null" /> o una cadena vacía.</exception>
        <related type="Article" href="~/docs/framework/data/adonet/ef/querying-a-conceptual-model.md">Consultar datos como objetos (Entity Framework)</related>
      </Docs>
    </Member>
    <Member MemberName="Name">
      <MemberSignature Language="C#" Value="public string Name { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Name" />
      <MemberSignature Language="DocId" Value="P:System.Data.Objects.ObjectQuery`1.Name" />
      <MemberSignature Language="VB.NET" Value="Public Property Name As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Name { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Name : string with get, set" Usage="System.Data.Objects.ObjectQuery&lt;'T&gt;.Name" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene o establece el nombre de esta consulta de objeto.</summary>
        <value>Un valor de tipo <see langword="string" /> que es el nombre del objeto <see cref="T:System.Data.Objects.ObjectQuery`1" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El nombre de la consulta de objeto identifica la consulta de objeto actual en la secuencia mediante el nombre al construir los métodos de generador de consultas. De forma predeterminada, el nombre de la consulta es `it`. Esto puede ser útil al hacer referencia a la secuencia actual en combinaciones dentro del método <xref:System.Data.Objects.ObjectQuery`1.Where*> o en el método <xref:System.Data.Objects.ObjectQuery`1.SelectValue*>. Para obtener más información, consulte [métodos del generador de consultas](https://msdn.microsoft.com/library/05685434-05e6-41c2-8d5e-8933b88a40b0).  
  
 Cuando se establece la propiedad <xref:System.Data.Objects.ObjectQuery%601.Name%2A> de una <xref:System.Data.Objects.ObjectQuery%601>, ese valor se convierte en el alias para los métodos posteriores.  
  
 El valor de la propiedad <xref:System.Data.Objects.ObjectQuery%601.Name%2A> debe comenzar por una letra y puede contener letras, números y caracteres de subrayado.  
  
   
  
## Examples  
 En este ejemplo, se establece el nombre de la primera <xref:System.Data.Objects.ObjectQuery%601> en "product" y, a continuación, se usa este alias en el método <xref:System.Data.Objects.ObjectQuery%601.OrderBy%2A> siguiente. El ejemplo de este tema se basa en el [modelo AdventureWorks Sales](https://msdn.microsoft.com/library/f16cd988-673f-4376-b034-129ca93c7832).  
  
 [!code-csharp[DP ObjectServices Concepts#QueryWithAliasNamed](~/samples/snippets/csharp/VS_Snippets_Data/DP ObjectServices Concepts/CS/Source.cs#querywithaliasnamed)]
 [!code-vb[DP ObjectServices Concepts#QueryWithAliasNamed](~/samples/snippets/visualbasic/VS_Snippets_Data/DP ObjectServices Concepts/VB/Source.vb#querywithaliasnamed)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">El valor especificado en la asignación no es válido.</exception>
        <related type="Article" href="~/docs/framework/data/adonet/ef/querying-a-conceptual-model.md">Consultar datos como objetos (Entity Framework)</related>
      </Docs>
    </Member>
    <Member MemberName="OfType&lt;TResultType&gt;">
      <MemberSignature Language="C#" Value="public System.Data.Objects.ObjectQuery&lt;TResultType&gt; OfType&lt;TResultType&gt; ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Data.Objects.ObjectQuery`1&lt;!!TResultType&gt; OfType&lt;TResultType&gt;() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Objects.ObjectQuery`1.OfType``1" />
      <MemberSignature Language="VB.NET" Value="Public Function OfType(Of TResultType) () As ObjectQuery(Of TResultType)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResultType&gt;&#xA; System::Data::Objects::ObjectQuery&lt;TResultType&gt; ^ OfType();" />
      <MemberSignature Language="F#" Value="member this.OfType : unit -&gt; System.Data.Objects.ObjectQuery&lt;'ResultType&gt;" Usage="objectQuery.OfType " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Objects.ObjectQuery&lt;TResultType&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResultType" />
      </TypeParameters>
      <Parameters />
      <Docs>
        <typeparam name="TResultType">Tipo del <see cref="T:System.Data.Objects.ObjectResult`1" /> devuelto cuando la consulta se ejecuta con el filtro aplicado.</typeparam>
        <summary>Limita la consulta a los resultados de un tipo determinado.</summary>
        <returns>Nueva instancia de <see cref="T:System.Data.Objects.ObjectQuery`1" /> que es equivalente a la instancia original, pero aplicando <see href="https://docs.microsoft.com/dotnet/framework/data/adonet/ef/language-reference/oftype-entity-sql">OFTYPE</see>.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
<xref:System.Data.Objects.ObjectQuery`1.OfType*> se usa para filtrar los resultados de la consulta por una entidad o un tipo complejo determinados. Esto admite un modelo conceptual con herencia de objetos. Para obtener más información, consulte [Entity Data Model: Herencia](~/docs/framework/data/adonet/entity-data-model-inheritance.md).

El <xref:System.Data.Objects.ObjectQuery`1.OfType*> método sólo puede aplicarse a un <xref:System.Data.Objects.ObjectQuery%601> de un tipo de entidad o tipo complejo que se define en el EDM.
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Data.EntitySqlException">El tipo especificado no es válido.</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/be01614e-070e-41be-9746-bb674b41e488(v=vs.90)">Cómo crear y ejecutar consultas de objeto con herencia de tabla por jerarquía (Entity Framework)</related>
        <related type="Article" href="~/docs/framework/data/adonet/ef/querying-a-conceptual-model.md">Consultar datos como objetos (Entity Framework)</related>
      </Docs>
    </Member>
    <Member MemberName="OrderBy">
      <MemberSignature Language="C#" Value="public System.Data.Objects.ObjectQuery&lt;T&gt; OrderBy (string keys, params System.Data.Objects.ObjectParameter[] parameters);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Data.Objects.ObjectQuery`1&lt;!T&gt; OrderBy(string keys, class System.Data.Objects.ObjectParameter[] parameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Objects.ObjectQuery`1.OrderBy(System.String,System.Data.Objects.ObjectParameter[])" />
      <MemberSignature Language="VB.NET" Value="Public Function OrderBy (keys As String, ParamArray parameters As ObjectParameter()) As ObjectQuery(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Data::Objects::ObjectQuery&lt;T&gt; ^ OrderBy(System::String ^ keys, ... cli::array &lt;System::Data::Objects::ObjectParameter ^&gt; ^ parameters);" />
      <MemberSignature Language="F#" Value="member this.OrderBy : string * System.Data.Objects.ObjectParameter[] -&gt; System.Data.Objects.ObjectQuery&lt;'T&gt;" Usage="objectQuery.OrderBy (keys, parameters)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Objects.ObjectQuery&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="keys" Type="System.String" />
        <Parameter Name="parameters" Type="System.Data.Objects.ObjectParameter[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="keys">Columnas de clave por las que se deben ordenar los resultados.</param>
        <param name="parameters">Cero o más parámetros que se usan en este método.</param>
        <summary>Ordena los resultados de la consulta de acuerdo con los criterios especificados.</summary>
        <returns>Nueva instancia de <see cref="T:System.Data.Objects.ObjectQuery`1" /> que es equivalente a la instancia original, pero aplicando <see href="https://docs.microsoft.com/dotnet/framework/data/adonet/ef/language-reference/order-by-entity-sql">ORDER BY</see>.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 No se pueden garantizar los resultados de ordenación de una consulta anidada.  
  
 <xref:System.Data.Objects.ObjectQuery%601.OrderBy%2A> siempre debería ser el último método del generador de consultas de la secuencia.  
  
   
  
## Examples  
 En este ejemplo se basa en el [modelo AdventureWorks Sales](https://msdn.microsoft.com/library/f16cd988-673f-4376-b034-129ca93c7832). El ejemplo crea un nuevo <xref:System.Data.Objects.ObjectQuery%601> objeto que contiene los resultados de la consulta existente ordenados por `ProductID`.  
  
 [!code-csharp[DP ObjectServices Concepts#ObjectQuery_OrderBy](~/samples/snippets/csharp/VS_Snippets_Data/DP ObjectServices Concepts/CS/Source.cs#objectquery_orderby)]
 [!code-vb[DP ObjectServices Concepts#ObjectQuery_OrderBy](~/samples/snippets/visualbasic/VS_Snippets_Data/DP ObjectServices Concepts/VB/Source.vb#objectquery_orderby)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">El parámetro <paramref name="keys" /> o <paramref name="parameters" /> es <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException"><paramref name="key" /> es una cadena vacía.</exception>
        <related type="Article" href="~/docs/framework/data/adonet/ef/querying-a-conceptual-model.md">Consultar datos como objetos (Entity Framework)</related>
      </Docs>
    </Member>
    <Member MemberName="Select">
      <MemberSignature Language="C#" Value="public System.Data.Objects.ObjectQuery&lt;System.Data.Common.DbDataRecord&gt; Select (string projection, params System.Data.Objects.ObjectParameter[] parameters);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Data.Objects.ObjectQuery`1&lt;class System.Data.Common.DbDataRecord&gt; Select(string projection, class System.Data.Objects.ObjectParameter[] parameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Objects.ObjectQuery`1.Select(System.String,System.Data.Objects.ObjectParameter[])" />
      <MemberSignature Language="VB.NET" Value="Public Function Select (projection As String, ParamArray parameters As ObjectParameter()) As ObjectQuery(Of DbDataRecord)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Data::Objects::ObjectQuery&lt;System::Data::Common::DbDataRecord ^&gt; ^ Select(System::String ^ projection, ... cli::array &lt;System::Data::Objects::ObjectParameter ^&gt; ^ parameters);" />
      <MemberSignature Language="F#" Value="member this.Select : string * System.Data.Objects.ObjectParameter[] -&gt; System.Data.Objects.ObjectQuery&lt;System.Data.Common.DbDataRecord&gt;" Usage="objectQuery.Select (projection, parameters)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Objects.ObjectQuery&lt;System.Data.Common.DbDataRecord&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="projection" Type="System.String" />
        <Parameter Name="parameters" Type="System.Data.Objects.ObjectParameter[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="projection">Lista de propiedades seleccionadas que define la proyección.</param>
        <param name="parameters">Cero o más parámetros que se usan en este método.</param>
        <summary>Limita los resultados de la consulta a las propiedades definidas en la proyección especificada.</summary>
        <returns>Nueva instancia de <see cref="T:System.Data.Objects.ObjectQuery`1" /> de tipo <see cref="T:System.Data.Common.DbDataRecord" /> que es equivalente a la instancia original, pero aplicando <see href="https://docs.microsoft.com/dotnet/framework/data/adonet/ef/language-reference/select-entity-sql">SELECT</see>.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.Objects.ObjectQuery%601.Select%2A> se aplica la proyección especificada por el `projection` parámetro. La <xref:System.Data.Objects.ObjectQuery%601> devuelta por el método <xref:System.Data.Objects.ObjectQuery%601.Select%2A> siempre es una fila de tipo <xref:System.Data.Common.DbDataRecord>. Use el método <xref:System.Data.Objects.ObjectQuery`1.SelectValue*> para devolver valores que son tipos simples, tipos de entidad o tipos complejos. Para obtener más información, consulte [LINQ to Entities](~/docs/framework/data/adonet/ef/language-reference/linq-to-entities.md).  
  
 Cuando una propiedad de navegación esté incluida en la proyección, los resultados de la consulta incluyen una colección de objetos <xref:System.Data.Common.DbDataRecord> anidados. Para obtener más información, vea [Cómo: Navegar por las relaciones mediante propiedades de navegación](https://msdn.microsoft.com/library/b1d71c7d-16a7-4b46-96ac-690176bd5057).  
  
   
  
## Examples  
 En este ejemplo se basa en el [modelo AdventureWorks Sales](https://msdn.microsoft.com/library/f16cd988-673f-4376-b034-129ca93c7832). El ejemplo crea un nuevo <xref:System.Data.Objects.ObjectQuery%601> cuyos resultados son registros de datos que contienen la `ProductID` campos de los resultados de esta consulta.  
  
 [!code-csharp[DP ObjectServices Concepts#ObjectQuery_Select](~/samples/snippets/csharp/VS_Snippets_Data/DP ObjectServices Concepts/CS/Source.cs#objectquery_select)]
 [!code-vb[DP ObjectServices Concepts#ObjectQuery_Select](~/samples/snippets/visualbasic/VS_Snippets_Data/DP ObjectServices Concepts/VB/Source.vb#objectquery_select)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">El valor de <paramref name="projection" /> es <see langword="null" />.  
  
O bien 
 El valor de <paramref name="parameters" /> es <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException"><paramref name="projection" /> es una cadena vacía.</exception>
        <related type="Article" href="~/docs/framework/data/adonet/ef/querying-a-conceptual-model.md">Consultar datos como objetos (Entity Framework)</related>
      </Docs>
    </Member>
    <Member MemberName="SelectValue&lt;TResultType&gt;">
      <MemberSignature Language="C#" Value="public System.Data.Objects.ObjectQuery&lt;TResultType&gt; SelectValue&lt;TResultType&gt; (string projection, params System.Data.Objects.ObjectParameter[] parameters);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Data.Objects.ObjectQuery`1&lt;!!TResultType&gt; SelectValue&lt;TResultType&gt;(string projection, class System.Data.Objects.ObjectParameter[] parameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Objects.ObjectQuery`1.SelectValue``1(System.String,System.Data.Objects.ObjectParameter[])" />
      <MemberSignature Language="VB.NET" Value="Public Function SelectValue(Of TResultType) (projection As String, ParamArray parameters As ObjectParameter()) As ObjectQuery(Of TResultType)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResultType&gt;&#xA; System::Data::Objects::ObjectQuery&lt;TResultType&gt; ^ SelectValue(System::String ^ projection, ... cli::array &lt;System::Data::Objects::ObjectParameter ^&gt; ^ parameters);" />
      <MemberSignature Language="F#" Value="member this.SelectValue : string * System.Data.Objects.ObjectParameter[] -&gt; System.Data.Objects.ObjectQuery&lt;'ResultType&gt;" Usage="objectQuery.SelectValue (projection, parameters)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Objects.ObjectQuery&lt;TResultType&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResultType" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="projection" Type="System.String" />
        <Parameter Name="parameters" Type="System.Data.Objects.ObjectParameter[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <typeparam name="TResultType">Tipo de la <see cref="T:System.Data.Objects.ObjectQuery`1" /> devuelta por el método <see cref="M:System.Data.Objects.ObjectQuery`1.SelectValue``1(System.String,System.Data.Objects.ObjectParameter[])" />.</typeparam>
        <param name="projection">Lista de proyección.</param>
        <param name="parameters">Conjunto opcional de parámetros de consulta que deberían estar en el ámbito durante el análisis.</param>
        <summary>Limita los resultados de la consulta a la propiedad especificada en la proyección.</summary>
        <returns>Nueva instancia de <see cref="T:System.Data.Objects.ObjectQuery`1" /> de un tipo compatible con la proyección especificada. La <see cref="T:System.Data.Objects.ObjectQuery`1" /> devuelta es equivalente a la instancia original, pero aplicando <see href="https://docs.microsoft.com/dotnet/framework/data/adonet/ef/language-reference/select-entity-sql">SELECT VALUE</see>.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.Objects.ObjectQuery`1.SelectValue*> se usa para devolver valores que son tipos simples, tipos de entidad o tipos complejos. Use el método <xref:System.Data.Objects.ObjectQuery%601.Select%2A> para las proyecciones que requieren un tipo de fila en lugar de un tipo de valor. Para obtener más información, consulte [las consultas de objeto](https://msdn.microsoft.com/library/0768033c-876f-471d-85d5-264884349276).  
  
 El <xref:System.Data.Objects.ObjectQuery`1.SelectValue*> método aplica la proyección especificada por el `projection` parámetro. La <xref:System.Data.Objects.ObjectQuery%601> devuelta por el método <xref:System.Data.Objects.ObjectQuery`1.SelectValue*> debe ser de un tipo de valor compatible con la proyección, y debe ser del mismo tipo que <xref:System.Data.Objects.ObjectQuery`1.SelectValue*>.  
  
   
  
## Examples  
 En este ejemplo se basa en el [modelo AdventureWorks Sales](https://msdn.microsoft.com/library/f16cd988-673f-4376-b034-129ca93c7832). El ejemplo crea un nuevo <xref:System.Data.Objects.ObjectQuery%601> que contiene los resultados de una secuencia de `ProductID` valores proyectan a partir de los resultados de la consulta existente.  
  
 [!code-csharp[DP ObjectServices Concepts#ObjectQuery_SelectValue](~/samples/snippets/csharp/VS_Snippets_Data/DP ObjectServices Concepts/CS/Source.cs#objectquery_selectvalue)]
 [!code-vb[DP ObjectServices Concepts#ObjectQuery_SelectValue](~/samples/snippets/visualbasic/VS_Snippets_Data/DP ObjectServices Concepts/VB/Source.vb#objectquery_selectvalue)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">El valor de <paramref name="projection" /> es <see langword="null" />.  
  
O bien 
 El valor de <paramref name="parameters" /> es <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException"><paramref name="projection" /> es una cadena vacía.</exception>
        <related type="Article" href="~/docs/framework/data/adonet/ef/querying-a-conceptual-model.md">Consultar datos como objetos (Entity Framework)</related>
      </Docs>
    </Member>
    <Member MemberName="Skip">
      <MemberSignature Language="C#" Value="public System.Data.Objects.ObjectQuery&lt;T&gt; Skip (string keys, string count, params System.Data.Objects.ObjectParameter[] parameters);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Data.Objects.ObjectQuery`1&lt;!T&gt; Skip(string keys, string count, class System.Data.Objects.ObjectParameter[] parameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Objects.ObjectQuery`1.Skip(System.String,System.String,System.Data.Objects.ObjectParameter[])" />
      <MemberSignature Language="VB.NET" Value="Public Function Skip (keys As String, count As String, ParamArray parameters As ObjectParameter()) As ObjectQuery(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Data::Objects::ObjectQuery&lt;T&gt; ^ Skip(System::String ^ keys, System::String ^ count, ... cli::array &lt;System::Data::Objects::ObjectParameter ^&gt; ^ parameters);" />
      <MemberSignature Language="F#" Value="member this.Skip : string * string * System.Data.Objects.ObjectParameter[] -&gt; System.Data.Objects.ObjectQuery&lt;'T&gt;" Usage="objectQuery.Skip (keys, count, parameters)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Objects.ObjectQuery&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="keys" Type="System.String" />
        <Parameter Name="count" Type="System.String" />
        <Parameter Name="parameters" Type="System.Data.Objects.ObjectParameter[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="keys">Columnas de clave por las que se deben ordenar los resultados.</param>
        <param name="count">Número de resultados que hay que omitir. Debe ser una constante o una referencia de parámetro.</param>
        <param name="parameters">Conjunto opcional de parámetros de consulta que deberían estar en el ámbito durante el análisis.</param>
        <summary>Ordena los resultados de la consulta según los criterios especificados y omite un número especificado de resultados.</summary>
        <returns>Nueva instancia de <see cref="T:System.Data.Objects.ObjectQuery`1" /> que es equivalente a la instancia original, pero aplicando <see href="https://docs.microsoft.com/dotnet/framework/data/adonet/ef/language-reference/order-by-entity-sql">ORDER BY</see> y [SKIP](~/docs/framework/data/adonet/ef/language-reference/skip-entity-sql.md).</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El método <xref:System.Data.Objects.ObjectQuery%601.Skip%2A> no se puede usar después del método <xref:System.Data.Objects.ObjectQuery%601.Top%2A>. Cuando usas <xref:System.Data.Objects.ObjectQuery%601.Top%2A> después <xref:System.Data.Objects.ObjectQuery%601.Skip%2A>, funciona como el [límite](~/docs/framework/data/adonet/ef/language-reference/limit-entity-sql.md) instrucción de una cláusula.  
  
   
  
## Examples  
 En este ejemplo se obtiene cinco `Product` objetos después de omitir los tres primeros resultados de la consulta, ordenados por `Product.ListPrice`.  
  
 [!code-csharp[DP ObjectServices Concepts#Projection_SkipLimit](~/samples/snippets/csharp/VS_Snippets_Data/DP ObjectServices Concepts/CS/Source.cs#projection_skiplimit)]
 [!code-vb[DP ObjectServices Concepts#Projection_SkipLimit](~/samples/snippets/visualbasic/VS_Snippets_Data/DP ObjectServices Concepts/VB/Source.vb#projection_skiplimit)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Cualquier argumento es <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException"><paramref name="keys" /> es una cadena vacía.  
  
O bien 
 <paramref name="count" /> es una cadena vacía.</exception>
        <related type="Article" href="~/docs/framework/data/adonet/ef/querying-a-conceptual-model.md">Consultar datos como objetos (Entity Framework)</related>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.Generic.IEnumerable&lt;T&gt;.GetEnumerator">
      <MemberSignature Language="C#" Value="System.Collections.Generic.IEnumerator&lt;T&gt; IEnumerable&lt;T&gt;.GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Collections.Generic.IEnumerator`1&lt;!T&gt; System.Collections.Generic.IEnumerable&lt;T&gt;.GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Objects.ObjectQuery`1.System#Collections#Generic#IEnumerable&lt;T&gt;#GetEnumerator" />
      <MemberSignature Language="VB.NET" Value="Function GetEnumerator () As IEnumerator(Of T) Implements IEnumerable(Of T).GetEnumerator" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Collections::Generic::IEnumerator&lt;T&gt; ^ System.Collections.Generic.IEnumerable&lt;T&gt;.GetEnumerator() = System::Collections::Generic::IEnumerable&lt;T&gt;::GetEnumerator;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.IEnumerable`1.GetEnumerator</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerator&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Devuelve un enumerador que recorre en iteración los resultados de la consulta.</summary>
        <returns>Objeto <see cref="T:System.Collections.Generic.IEnumerator`1" /> que se puede usar para recorrer en iteración los resultados.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Al llamar a <xref:System.Data.Objects.ObjectQuery%601.System%23Collections%23Generic%23IEnumerable%7BT%7D%23GetEnumerator%2A> se ejecuta la consulta.  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/framework/data/adonet/ef/querying-a-conceptual-model.md">Consultar datos como objetos (Entity Framework)</related>
      </Docs>
    </Member>
    <Member MemberName="Top">
      <MemberSignature Language="C#" Value="public System.Data.Objects.ObjectQuery&lt;T&gt; Top (string count, params System.Data.Objects.ObjectParameter[] parameters);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Data.Objects.ObjectQuery`1&lt;!T&gt; Top(string count, class System.Data.Objects.ObjectParameter[] parameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Objects.ObjectQuery`1.Top(System.String,System.Data.Objects.ObjectParameter[])" />
      <MemberSignature Language="VB.NET" Value="Public Function Top (count As String, ParamArray parameters As ObjectParameter()) As ObjectQuery(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Data::Objects::ObjectQuery&lt;T&gt; ^ Top(System::String ^ count, ... cli::array &lt;System::Data::Objects::ObjectParameter ^&gt; ^ parameters);" />
      <MemberSignature Language="F#" Value="member this.Top : string * System.Data.Objects.ObjectParameter[] -&gt; System.Data.Objects.ObjectQuery&lt;'T&gt;" Usage="objectQuery.Top (count, parameters)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Objects.ObjectQuery&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="count" Type="System.String" />
        <Parameter Name="parameters" Type="System.Data.Objects.ObjectParameter[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="count">Número de elementos en los resultados, como un valor string.</param>
        <param name="parameters">Conjunto opcional de parámetros de consulta que deberían estar en el ámbito durante el análisis.</param>
        <summary>Limita los resultados de la consulta al número de elementos especificado.</summary>
        <returns>Nueva instancia de <see cref="T:System.Data.Objects.ObjectQuery`1" /> que es equivalente a la instancia original, pero aplicando <see href="https://docs.microsoft.com/dotnet/framework/data/adonet/ef/language-reference/top-entity-sql">TOP</see>.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.Objects.ObjectQuery%601.Top%2A> es no determinista a menos que la consulta esté ordenada.  
  
 Cuando se usa el <xref:System.Data.Objects.ObjectQuery%601.Top%2A> método después de la <xref:System.Data.Objects.ObjectQuery%601.Skip%2A> método, funciona como el [límite](~/docs/framework/data/adonet/ef/language-reference/limit-entity-sql.md) instrucción de un [ORDER BY](~/docs/framework/data/adonet/ef/language-reference/order-by-entity-sql.md) cláusula.  
  
   
  
## Examples  
 Estos ejemplos se basan en el [modelo AdventureWorks Sales](https://msdn.microsoft.com/library/f16cd988-673f-4376-b034-129ca93c7832).  
  
 En este ejemplo, se crea un nuevo objeto <xref:System.Data.Objects.ObjectQuery%601> que contiene los dos primeros resultados de la consulta existente.  
  
 [!code-csharp[DP ObjectServices Concepts#ObjectQuery_Top](~/samples/snippets/csharp/VS_Snippets_Data/DP ObjectServices Concepts/CS/Source.cs#objectquery_top)]
 [!code-vb[DP ObjectServices Concepts#ObjectQuery_Top](~/samples/snippets/visualbasic/VS_Snippets_Data/DP ObjectServices Concepts/VB/Source.vb#objectquery_top)]  
  
 En este ejemplo se obtiene cinco `Product` objetos después de omitir los tres primeros resultados de la consulta, ordenados por `Product.ListPrice`. <xref:System.Data.Objects.ObjectQuery%601.Top%2A> se usa en lugar de [límite](~/docs/framework/data/adonet/ef/language-reference/limit-entity-sql.md) para la paginación.  
  
 [!code-csharp[DP ObjectServices Concepts#Projection_SkipLimit](~/samples/snippets/csharp/VS_Snippets_Data/DP ObjectServices Concepts/CS/Source.cs#projection_skiplimit)]
 [!code-vb[DP ObjectServices Concepts#Projection_SkipLimit](~/samples/snippets/visualbasic/VS_Snippets_Data/DP ObjectServices Concepts/VB/Source.vb#projection_skiplimit)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">El valor de <paramref name="count" /> es <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException"><paramref name="count" /> es una cadena vacía.</exception>
        <related type="Article" href="~/docs/framework/data/adonet/ef/querying-a-conceptual-model.md">Consultar datos como objetos (Entity Framework)</related>
      </Docs>
    </Member>
    <Member MemberName="Union">
      <MemberSignature Language="C#" Value="public System.Data.Objects.ObjectQuery&lt;T&gt; Union (System.Data.Objects.ObjectQuery&lt;T&gt; query);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Data.Objects.ObjectQuery`1&lt;!T&gt; Union(class System.Data.Objects.ObjectQuery`1&lt;!T&gt; query) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Objects.ObjectQuery`1.Union(System.Data.Objects.ObjectQuery{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Function Union (query As ObjectQuery(Of T)) As ObjectQuery(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Data::Objects::ObjectQuery&lt;T&gt; ^ Union(System::Data::Objects::ObjectQuery&lt;T&gt; ^ query);" />
      <MemberSignature Language="F#" Value="member this.Union : System.Data.Objects.ObjectQuery&lt;'T&gt; -&gt; System.Data.Objects.ObjectQuery&lt;'T&gt;" Usage="objectQuery.Union query" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Objects.ObjectQuery&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="query" Type="System.Data.Objects.ObjectQuery&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="query"><see cref="T:System.Data.Objects.ObjectQuery`1" /> que representa los resultados que se van a agregar.</param>
        <summary>Combina los resultados de la consulta con los resultados de otra consulta de objeto, pero sin duplicados.</summary>
        <returns>Nueva instancia de <see cref="T:System.Data.Objects.ObjectQuery`1" /> que es equivalente a la instancia original, pero aplicando <see href="https://docs.microsoft.com/dotnet/framework/data/adonet/ef/language-reference/union-entity-sql">UNION</see> para agregar los resultados de la <paramref name="query" /> especificada.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.Objects.ObjectQuery%601.Union%2A> Agrega los resultados de la `query` sin ningún duplicado.  
  
 Suministrado `query` que define los resultados que se va a agregar debe ser del mismo tipo o de un tipo que se puede promover al tipo de este <xref:System.Data.Objects.ObjectQuery%601>. Por ejemplo, la siguiente es válida porque `DiscontinuedProducts` se puede promover a `Products`:  
  
```  
ObjectQuery<Product>.Union(ObjectQuery<DiscontinuedProduct>)  
```  
  
 La siguiente generará una excepción porque `Products` no se puede promover a `DiscontinuedProducts`.  
  
```  
ObjectQuery <DiscontinuedProduct>.Union(ObjectQuery<Product>)   
```  
  
 Para un <xref:System.Data.Objects.ObjectQuery%601> de tipo <xref:System.Data.Common.DbDataRecord>, los registros de ambas consultas deben tener el mismo número de columnas y los tipos en las columnas de la <xref:System.Data.Common.DbDataRecord> del pasado `query` debe ser promovibles a los tipos de las columnas de la <xref:System.Data.Common.DbDataRecord> de la <xref:System.Data.Objects.ObjectQuery%601>.  
  
 Parámetros que se definen en proporcionado `query` se combinan con los parámetros que se definen en el <xref:System.Data.Objects.ObjectQuery%601> instancia. Los parámetros deben ser únicos en la <xref:System.Data.Objects.ObjectParameterCollection> combinada. No puede haber dos parámetros en la colección combinada con el mismo nombre. Para obtener más información, consulte [métodos del generador de consultas](https://msdn.microsoft.com/library/05685434-05e6-41c2-8d5e-8933b88a40b0).  
  
 La consulta resultante hereda la conexión de la instancia de <xref:System.Data.Objects.ObjectQuery%601> en la que se llamó a <xref:System.Data.Objects.ObjectQuery%601.Union%2A>.  
  
   
  
## Examples  
 En este ejemplo se basa en el [modelo AdventureWorks Sales](https://msdn.microsoft.com/library/f16cd988-673f-4376-b034-129ca93c7832). En el ejemplo, se usa el método <xref:System.Data.Objects.ObjectQuery%601.Union%2A> para crear un objeto <xref:System.Data.Objects.ObjectQuery%601> nuevo.  
  
 [!code-csharp[DP ObjectServices Concepts#ObjectQuery_Distinct_Union](~/samples/snippets/csharp/VS_Snippets_Data/DP ObjectServices Concepts/CS/Source.cs#objectquery_distinct_union)]
 [!code-vb[DP ObjectServices Concepts#ObjectQuery_Distinct_Union](~/samples/snippets/visualbasic/VS_Snippets_Data/DP ObjectServices Concepts/VB/Source.vb#objectquery_distinct_union)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">El parámetro <paramref name="query" /> es <see langword="null" />.</exception>
        <related type="Article" href="~/docs/framework/data/adonet/ef/querying-a-conceptual-model.md">Consultar datos como objetos (Entity Framework)</related>
      </Docs>
    </Member>
    <Member MemberName="UnionAll">
      <MemberSignature Language="C#" Value="public System.Data.Objects.ObjectQuery&lt;T&gt; UnionAll (System.Data.Objects.ObjectQuery&lt;T&gt; query);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Data.Objects.ObjectQuery`1&lt;!T&gt; UnionAll(class System.Data.Objects.ObjectQuery`1&lt;!T&gt; query) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Objects.ObjectQuery`1.UnionAll(System.Data.Objects.ObjectQuery{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Function UnionAll (query As ObjectQuery(Of T)) As ObjectQuery(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Data::Objects::ObjectQuery&lt;T&gt; ^ UnionAll(System::Data::Objects::ObjectQuery&lt;T&gt; ^ query);" />
      <MemberSignature Language="F#" Value="member this.UnionAll : System.Data.Objects.ObjectQuery&lt;'T&gt; -&gt; System.Data.Objects.ObjectQuery&lt;'T&gt;" Usage="objectQuery.UnionAll query" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Objects.ObjectQuery&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="query" Type="System.Data.Objects.ObjectQuery&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="query"><see cref="T:System.Data.Objects.ObjectQuery`1" /> que representa los resultados que se van a agregar.</param>
        <summary>Combina los resultados de la consulta con los resultados de otra consulta de objeto, incluyendo todos los duplicados.</summary>
        <returns>Nueva instancia de <see cref="T:System.Data.Objects.ObjectQuery`1" /> que es equivalente a la instancia original, pero aplicando <see href="https://docs.microsoft.com/dotnet/framework/data/adonet/ef/language-reference/union-entity-sql">UNION ALL</see> para agregar los resultados de la <paramref name="query" /> especificada.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.Objects.ObjectQuery%601.UnionAll%2A> Agrega los resultados de la `query` incluyendo todos los duplicados.  
  
 Suministrado `query` que define los resultados que agregar debe ser del mismo tipo o de un tipo que se puede promover al tipo de este <xref:System.Data.Objects.ObjectQuery%601>. Por ejemplo, la siguiente es válida porque `DiscontinuedProducts` se puede promover a `Products`:  
  
```  
ObjectQuery<Product>.Union(ObjectQuery<DiscontinuedProduct>)  
```  
  
 La siguiente generará una excepción porque `Products` no se puede promover a `DiscontinuedProducts`.  
  
```  
ObjectQuery <DiscontinuedProduct>.Union(ObjectQuery<Product>)   
```  
  
 Para un <xref:System.Data.Objects.ObjectQuery%601> de tipo <xref:System.Data.Common.DbDataRecord>, los registros de ambas consultas deben tener el mismo número de columnas y los tipos en las columnas de la <xref:System.Data.Common.DbDataRecord> del pasado `query` debe ser promovibles a los tipos de las columnas de la <xref:System.Data.Common.DbDataRecord> de la <xref:System.Data.Objects.ObjectQuery%601>.  
  
 Parámetros que se definen en proporcionado `query` se combinan con los parámetros que se definen en el <xref:System.Data.Objects.ObjectQuery%601> instancia. Los parámetros deben ser únicos en la <xref:System.Data.Objects.ObjectParameterCollection> combinada. No puede haber dos parámetros en la colección combinada con el mismo nombre. Para obtener más información, consulte [métodos del generador de consultas](https://msdn.microsoft.com/library/05685434-05e6-41c2-8d5e-8933b88a40b0).  
  
 La consulta resultante hereda la conexión de la instancia de <xref:System.Data.Objects.ObjectQuery%601> en la que se llamó a <xref:System.Data.Objects.ObjectQuery%601.UnionAll%2A>.  
  
   
  
## Examples  
 El ejemplo de este tema se basa en el [modelo AdventureWorks Sales](https://msdn.microsoft.com/library/f16cd988-673f-4376-b034-129ca93c7832). En el ejemplo, se usa el método <xref:System.Data.Objects.ObjectQuery%601.UnionAll%2A> para crear un objeto <xref:System.Data.Objects.ObjectQuery%601> nuevo. A continuación, se llama al método <xref:System.Data.Objects.ObjectQuery%601.Distinct%2A> en el nuevo objeto <xref:System.Data.Objects.ObjectQuery%601> para obtener los resultados únicos de esta consulta.  
  
 [!code-csharp[DP ObjectServices Concepts#ObjectQuery_Distinct_UnionAll](~/samples/snippets/csharp/VS_Snippets_Data/DP ObjectServices Concepts/CS/Source.cs#objectquery_distinct_unionall)]
 [!code-vb[DP ObjectServices Concepts#ObjectQuery_Distinct_UnionAll](~/samples/snippets/visualbasic/VS_Snippets_Data/DP ObjectServices Concepts/VB/Source.vb#objectquery_distinct_unionall)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">El parámetro <paramref name="query" /> es <see langword="null" />.</exception>
        <related type="Article" href="~/docs/framework/data/adonet/ef/querying-a-conceptual-model.md">Consultar datos como objetos (Entity Framework)</related>
      </Docs>
    </Member>
    <Member MemberName="Where">
      <MemberSignature Language="C#" Value="public System.Data.Objects.ObjectQuery&lt;T&gt; Where (string predicate, params System.Data.Objects.ObjectParameter[] parameters);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Data.Objects.ObjectQuery`1&lt;!T&gt; Where(string predicate, class System.Data.Objects.ObjectParameter[] parameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Objects.ObjectQuery`1.Where(System.String,System.Data.Objects.ObjectParameter[])" />
      <MemberSignature Language="VB.NET" Value="Public Function Where (predicate As String, ParamArray parameters As ObjectParameter()) As ObjectQuery(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Data::Objects::ObjectQuery&lt;T&gt; ^ Where(System::String ^ predicate, ... cli::array &lt;System::Data::Objects::ObjectParameter ^&gt; ^ parameters);" />
      <MemberSignature Language="F#" Value="member this.Where : string * System.Data.Objects.ObjectParameter[] -&gt; System.Data.Objects.ObjectQuery&lt;'T&gt;" Usage="objectQuery.Where (predicate, parameters)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Objects.ObjectQuery&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="predicate" Type="System.String" />
        <Parameter Name="parameters" Type="System.Data.Objects.ObjectParameter[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="predicate">Predicado de filtro.</param>
        <param name="parameters">Cero o más parámetros que se usan en este método.</param>
        <summary>Limita la consulta a los resultados que coinciden con los criterios de filtrado especificados.</summary>
        <returns>Nueva instancia de <see cref="T:System.Data.Objects.ObjectQuery`1" /> que es equivalente a la instancia original, pero aplicando <see href="https://docs.microsoft.com/dotnet/framework/data/adonet/ef/language-reference/where-entity-sql">WHERE</see>.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 En este ejemplo se basa en el [modelo AdventureWorks Sales](https://msdn.microsoft.com/library/f16cd988-673f-4376-b034-129ca93c7832). El ejemplo crea un nuevo <xref:System.Data.Objects.ObjectQuery%601> que contiene los resultados de la consulta existente filtrados por los siguientes criterios: `"it.ProductID = 900"`.  
  
 [!code-csharp[DP ObjectServices Concepts#ObjectQuery_Where](~/samples/snippets/csharp/VS_Snippets_Data/DP ObjectServices Concepts/CS/Source.cs#objectquery_where)]
 [!code-vb[DP ObjectServices Concepts#ObjectQuery_Where](~/samples/snippets/visualbasic/VS_Snippets_Data/DP ObjectServices Concepts/VB/Source.vb#objectquery_where)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">El valor de <paramref name="predicate" /> es <see langword="null" />.  
  
O bien 
 El valor de <paramref name="parameters" /> es <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException"><paramref name="predicate" /> es una cadena vacía.</exception>
        <related type="Article" href="~/docs/framework/data/adonet/ef/querying-a-conceptual-model.md">Consultar datos como objetos (Entity Framework)</related>
      </Docs>
    </Member>
  </Members>
</Type>