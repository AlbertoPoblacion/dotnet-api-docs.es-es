<Type Name="AddInToken" FullName="System.AddIn.Hosting.AddInToken">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="d49bd4276d82002509c03bdfbf87072ff7d4d280" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="es-ES" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30360439" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class AddInToken : System.Collections.Generic.IEnumerable&lt;System.AddIn.Hosting.QualificationDataItem&gt;" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable sealed beforefieldinit AddInToken extends System.Object implements class System.Collections.Generic.IEnumerable`1&lt;valuetype System.AddIn.Hosting.QualificationDataItem&gt;, class System.Collections.IEnumerable" />
  <TypeSignature Language="DocId" Value="T:System.AddIn.Hosting.AddInToken" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class AddInToken&#xA;Implements IEnumerable(Of QualificationDataItem)" />
  <TypeSignature Language="C++ CLI" Value="public ref class AddInToken sealed : System::Collections::Generic::IEnumerable&lt;System::AddIn::Hosting::QualificationDataItem&gt;" />
  <AssemblyInfo>
    <AssemblyName>System.AddIn</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Collections.Generic.IEnumerable&lt;System.AddIn.Hosting.QualificationDataItem&gt;</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>Representa un complemento que se puede activar.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Un <xref:System.AddIn.Hosting.AddInToken> objeto representa un complemento y sus segmentos de canalización asociados, que se pueden activar. El token contiene el nombre, nombre del ensamblado, descripción, publicador y versión del complemento que representa.  
  
 Use la <xref:System.AddIn.Hosting.AddInStore.FindAddIns%2A?displayProperty=nameWithType> método para obtener una colección de tokens que representan los complementos cuyas canalizaciones coincidan con una vista de host especificada. Use la <xref:System.AddIn.Hosting.AddInStore.FindAddIn%2A?displayProperty=nameWithType> método para obtener una colección de tokens que representan todas las canalizaciones de un complemento especificado que coinciden con una vista de host especificada.  
  
 Para activar un complemento, pase el token que representa el complemento deseado para el <xref:System.AddIn.Hosting.AddInToken.Activate%2A> método. Este método devuelve una instancia del tipo que representa la vista de host del complemento.  
  
 El <xref:System.AddIn.Hosting.AddInToken.Activate%2A> método tiene varias sobrecargas. Cuando se usa una sobrecarga que no requiere el nombre de un dominio de aplicación como uno de sus parámetros, se crea automáticamente un nuevo dominio de aplicación para el complemento.  
  
 Puede utilizar métodos de extensión de Language-Integrated Query (LINQ) para realizar consultas en un <xref:System.AddIn.Hosting.AddInToken>, tratar el token como una colección de <xref:System.AddIn.Hosting.QualificationDataItem> estructuras.  
  
   
  
## Examples  
 Esta sección contiene dos ejemplos. El primer ejemplo activa un complemento que se ha seleccionado mediante el uso de la `ChooseAddIn` método y el segundo ejemplo se muestra la `ChooseAddIn` método.  
  
 **Ejemplo 1**  
  
 En el ejemplo siguiente se muestra cómo activar un complemento con un token.  
  
 [!code-csharp[AddInP3Host#5](~/samples/snippets/csharp/VS_Snippets_CLR/addinP3Host/cs/P3Host.cs#5)]
 [!code-vb[AddInP3Host#5](~/samples/snippets/visualbasic/VS_Snippets_CLR/addinP3Host/vb/p3host.vb#5)]  
  
 **Ejemplo 2**  
  
 En el ejemplo siguiente se muestra la opción de instalación `ChooseAddIn` método, que enumera un <xref:System.AddIn.Hosting.AddInToken> colección. El usuario selecciona un token de esta colección para activar el complemento correspondiente.  
  
 [!code-csharp[AddInP3Host#13](~/samples/snippets/csharp/VS_Snippets_CLR/addinP3Host/cs/P3Host.cs#13)]
 [!code-vb[AddInP3Host#13](~/samples/snippets/visualbasic/VS_Snippets_CLR/addinP3Host/vb/p3host.vb#13)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName="Activate&lt;T&gt;">
      <AssemblyInfo>
        <AssemblyName>System.AddIn</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Activa un complemento.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Activate&lt;T&gt;">
      <MemberSignature Language="C#" Value="public T Activate&lt;T&gt; (System.AddIn.Hosting.AddInEnvironment environment);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance !!T Activate&lt;T&gt;(class System.AddIn.Hosting.AddInEnvironment environment) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.AddIn.Hosting.AddInToken.Activate``1(System.AddIn.Hosting.AddInEnvironment)" />
      <MemberSignature Language="VB.NET" Value="Public Function Activate(Of T) (environment As AddInEnvironment) As T" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; T Activate(System::AddIn::Hosting::AddInEnvironment ^ environment);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.AddIn</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="environment" Type="System.AddIn.Hosting.AddInEnvironment" />
      </Parameters>
      <Docs>
        <typeparam name="T">Interfaz o tipo base abstracto que representa la vista de host del complemento.</typeparam>
        <param name="environment">Dominio de aplicación y proceso que contiene el complemento original.</param>
        <summary>Activa un complemento en el entorno de otro complemento.</summary>
        <returns>Vista del host del complemento.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Esta sobrecarga del método activa el complemento en el mismo dominio de aplicación y proceso que el complemento desde el que `environment` se obtuvo.  
  
   
  
## Examples  
 En el ejemplo siguiente se activa un complemento en un dominio de aplicación generado automáticamente con un nivel de seguridad especificado. A continuación, activa un segundo complemento en el mismo dominio de aplicación y proceso que el primero usando el primer complemento <xref:System.AddIn.Hosting.AddInEnvironment> objeto.  
  
 [!code-csharp[AddInP3Host#8](~/samples/snippets/csharp/VS_Snippets_CLR/addinP3Host/cs/P3Host.cs#8)]
 [!code-vb[AddInP3Host#8](~/samples/snippets/visualbasic/VS_Snippets_CLR/addinP3Host/vb/p3host.vb#8)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Activate&lt;T&gt;">
      <MemberSignature Language="C#" Value="public T Activate&lt;T&gt; (System.AddIn.Hosting.AddInSecurityLevel trustLevel);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance !!T Activate&lt;T&gt;(valuetype System.AddIn.Hosting.AddInSecurityLevel trustLevel) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.AddIn.Hosting.AddInToken.Activate``1(System.AddIn.Hosting.AddInSecurityLevel)" />
      <MemberSignature Language="VB.NET" Value="Public Function Activate(Of T) (trustLevel As AddInSecurityLevel) As T" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; T Activate(System::AddIn::Hosting::AddInSecurityLevel trustLevel);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.AddIn</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="trustLevel" Type="System.AddIn.Hosting.AddInSecurityLevel" />
      </Parameters>
      <Docs>
        <typeparam name="T">Interfaz o tipo base abstracto que representa la vista de host del complemento.</typeparam>
        <param name="trustLevel">Uno de los valores de la enumeración que especifica el nivel de confianza.</param>
        <summary>Activa un complemento con el nivel de confianza especificado en un dominio de aplicación nuevo.</summary>
        <returns>Vista del host del complemento.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Esta sobrecarga del método carga el complemento en un dominio de aplicación generado automáticamente. Si desea especificar un nombre para el nuevo dominio de aplicación, use la <xref:System.AddIn.Hosting.AddInToken.Activate%60%601%28System.AddIn.Hosting.AddInSecurityLevel%2CSystem.String%29> sobrecarga.  
  
 Este método establece el directorio base para el dominio de aplicación como la ubicación del ensamblado del complemento. También busca el archivo de configuración [addinassemblyname]. dll. config y, si se encuentra, lo establece como el archivo de configuración para el nuevo dominio de aplicación.  
  
   
  
## Examples  
 En el ejemplo siguiente se muestra cómo activar un complemento, identificado por el token elegido, en un dominio de aplicación generado automáticamente con un nivel de seguridad especificado.  
  
 [!code-csharp[AddInP3Host#5](~/samples/snippets/csharp/VS_Snippets_CLR/addinP3Host/cs/P3Host.cs#5)]
 [!code-vb[AddInP3Host#5](~/samples/snippets/visualbasic/VS_Snippets_CLR/addinP3Host/vb/p3host.vb#5)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Activate&lt;T&gt;">
      <MemberSignature Language="C#" Value="public T Activate&lt;T&gt; (AppDomain target);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance !!T Activate&lt;T&gt;(class System.AppDomain target) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.AddIn.Hosting.AddInToken.Activate``1(System.AppDomain)" />
      <MemberSignature Language="VB.NET" Value="Public Function Activate(Of T) (target As AppDomain) As T" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; T Activate(AppDomain ^ target);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.AddIn</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="target" Type="System.AppDomain" />
      </Parameters>
      <Docs>
        <typeparam name="T">Interfaz o tipo base abstracto que representa la vista de host del complemento.</typeparam>
        <param name="target">Dominio de aplicación en el que debe activarse el complemento.</param>
        <summary>Activa un complemento en un dominio de aplicación existente.</summary>
        <returns>Vista del host del complemento.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Para activar un complemento en un dominio de aplicación generado automáticamente, use la <xref:System.AddIn.Hosting.AddInToken.Activate%60%601%28System.AddIn.Hosting.AddInSecurityLevel%29> sobrecarga para generar un nuevo dominio de aplicación con un nivel de seguridad especificado o la <xref:System.AddIn.Hosting.AddInToken.Activate%60%601%28System.AddIn.Hosting.AddInSecurityLevel%2CSystem.String%29> sobrecarga para incluir un nombre descriptivo para el dominio de aplicación.  
  
   
  
## Examples  
 En el ejemplo siguiente se activa un complemento en un dominio de aplicación que está usando otro complemento. Se proporciona el código para el primer complemento en el <xref:System.AddIn.Hosting.AddInToken> clase.  
  
 [!code-csharp[AddInP3Host#9](~/samples/snippets/csharp/VS_Snippets_CLR/addinP3Host/cs/P3Host.cs#9)]
 [!code-vb[AddInP3Host#9](~/samples/snippets/visualbasic/VS_Snippets_CLR/addinP3Host/vb/p3host.vb#9)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.SecurityException">Se exigen permisos Full Trust. Un llamador de la cadena de llamadas no tiene suficientes permisos.</exception>
      </Docs>
    </Member>
    <Member MemberName="Activate&lt;T&gt;">
      <MemberSignature Language="C#" Value="public T Activate&lt;T&gt; (System.Security.PermissionSet permissions);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance !!T Activate&lt;T&gt;(class System.Security.PermissionSet permissions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.AddIn.Hosting.AddInToken.Activate``1(System.Security.PermissionSet)" />
      <MemberSignature Language="VB.NET" Value="Public Function Activate(Of T) (permissions As PermissionSet) As T" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; T Activate(System::Security::PermissionSet ^ permissions);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.AddIn</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="permissions" Type="System.Security.PermissionSet" />
      </Parameters>
      <Docs>
        <typeparam name="T">Interfaz o tipo base abstracto que representa la vista de host del complemento.</typeparam>
        <param name="permissions">Permisos concedidos para el complemento.</param>
        <summary>Activa un complemento con el conjunto de permisos especificado en un nuevo dominio de aplicación.</summary>
        <returns>Vista del host del complemento.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Esta sobrecarga del método carga el complemento en un dominio de aplicación generado automáticamente. Establece el directorio base para el dominio de aplicación como la ubicación del ensamblado del complemento. También busca el archivo de configuración `[addinassemblyname].dll.config` y, si lo encuentra, conjuntos de que sea el archivo de configuración para el nuevo dominio de aplicación.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="permissions" /> es <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="Activate&lt;T&gt;">
      <MemberSignature Language="C#" Value="public T Activate&lt;T&gt; (System.AddIn.Hosting.AddInProcess process, System.AddIn.Hosting.AddInSecurityLevel level);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance !!T Activate&lt;T&gt;(class System.AddIn.Hosting.AddInProcess process, valuetype System.AddIn.Hosting.AddInSecurityLevel level) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.AddIn.Hosting.AddInToken.Activate``1(System.AddIn.Hosting.AddInProcess,System.AddIn.Hosting.AddInSecurityLevel)" />
      <MemberSignature Language="VB.NET" Value="Public Function Activate(Of T) (process As AddInProcess, level As AddInSecurityLevel) As T" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; T Activate(System::AddIn::Hosting::AddInProcess ^ process, System::AddIn::Hosting::AddInSecurityLevel level);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.AddIn</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="process" Type="System.AddIn.Hosting.AddInProcess" />
        <Parameter Name="level" Type="System.AddIn.Hosting.AddInSecurityLevel" />
      </Parameters>
      <Docs>
        <typeparam name="T">Interfaz o tipo base abstracto que representa la vista de host del complemento.</typeparam>
        <param name="process">El proceso externo en el que se va a activar el complemento.</param>
        <param name="level">Uno de los valores de la enumeración que especifica el nivel de confianza.</param>
        <summary>Activa un complemento en un proceso externo, en un nuevo dominio de aplicación y con el nivel de confianza especificado.</summary>
        <returns>Vista del host del complemento.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este método establece el directorio base para el dominio de aplicación como la ubicación del ensamblado del complemento. También busca el archivo de configuración `[addinassemblyname].dll.config` y, si lo encuentra, conjuntos de que sea el archivo de configuración para el nuevo dominio de aplicación.  
  
   
  
## Examples  
 En el ejemplo siguiente se crea un proceso nuevo y se activa un complemento en ese proceso con un nivel de seguridad de plena confianza.  
  
 [!code-csharp[AddInP3Host#10](~/samples/snippets/csharp/VS_Snippets_CLR/addinP3Host/cs/P3Host.cs#10)]
 [!code-vb[AddInP3Host#10](~/samples/snippets/visualbasic/VS_Snippets_CLR/addinP3Host/vb/p3host.vb#10)]  
  
 ]]></format>
        </remarks>
        <permission cref="F:System.Security.Permissions.SecurityAction.Demand">plena confianza para el llamador inmediato. Un código de confianza parcial no puede utilizar este miembro.</permission>
      </Docs>
    </Member>
    <Member MemberName="Activate&lt;T&gt;">
      <MemberSignature Language="C#" Value="public T Activate&lt;T&gt; (System.AddIn.Hosting.AddInProcess process, System.Security.PermissionSet permissionSet);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance !!T Activate&lt;T&gt;(class System.AddIn.Hosting.AddInProcess process, class System.Security.PermissionSet permissionSet) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.AddIn.Hosting.AddInToken.Activate``1(System.AddIn.Hosting.AddInProcess,System.Security.PermissionSet)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; T Activate(System::AddIn::Hosting::AddInProcess ^ process, System::Security::PermissionSet ^ permissionSet);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.AddIn</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="process" Type="System.AddIn.Hosting.AddInProcess" />
        <Parameter Name="permissionSet" Type="System.Security.PermissionSet" />
      </Parameters>
      <Docs>
        <typeparam name="T">Interfaz o tipo base abstracto que representa la vista de host del complemento.</typeparam>
        <param name="process">El proceso externo en el que se va a activar el complemento.</param>
        <param name="permissionSet">Conjunto de permisos necesario que se concede para el complemento.</param>
        <summary>Activa un complemento en un proceso externo, en un nuevo dominio de aplicación y con el conjunto de permisos especificado.</summary>
        <returns>Vista del host del complemento.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este método establece el directorio base para el dominio de aplicación como la ubicación del ensamblado del complemento. También busca el archivo de configuración `[addinassemblyname].dll.config` y, si lo encuentra, conjuntos de que sea el archivo de configuración para el nuevo dominio de aplicación.  
  
 ]]></format>
        </remarks>
        <permission cref="F:System.Security.Permissions.SecurityAction.Demand">plena confianza para el llamador inmediato. Un código de confianza parcial no puede utilizar este miembro.</permission>
      </Docs>
    </Member>
    <Member MemberName="Activate&lt;T&gt;">
      <MemberSignature Language="C#" Value="public T Activate&lt;T&gt; (System.AddIn.Hosting.AddInSecurityLevel trustLevel, string appDomainName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance !!T Activate&lt;T&gt;(valuetype System.AddIn.Hosting.AddInSecurityLevel trustLevel, string appDomainName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.AddIn.Hosting.AddInToken.Activate``1(System.AddIn.Hosting.AddInSecurityLevel,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function Activate(Of T) (trustLevel As AddInSecurityLevel, appDomainName As String) As T" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; T Activate(System::AddIn::Hosting::AddInSecurityLevel trustLevel, System::String ^ appDomainName);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.AddIn</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="trustLevel" Type="System.AddIn.Hosting.AddInSecurityLevel" />
        <Parameter Name="appDomainName" Type="System.String" />
      </Parameters>
      <Docs>
        <typeparam name="T">Interfaz o tipo base abstracto que representa la vista de host del complemento.</typeparam>
        <param name="trustLevel">Uno de los valores de la enumeración que especifica el nivel de confianza.</param>
        <param name="appDomainName">Nombre descriptivo que va a asignarse al nuevo dominio de aplicación.</param>
        <summary>Activa un complemento en un nuevo dominio de aplicación con el nombre y el nivel de confianza especificados.</summary>
        <returns>Vista del host del complemento.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si no necesita especificar un nombre de dominio de aplicación, use la <xref:System.AddIn.Hosting.AddInToken.Activate%60%601%28System.AddIn.Hosting.AddInSecurityLevel%29> sobrecarga.  
  
 Este método establece el directorio base para el dominio de aplicación como la ubicación del ensamblado del complemento. También busca el archivo de configuración `[addinassemblyname].dll.config` y, si lo encuentra, conjuntos de que sea el archivo de configuración para el nuevo dominio de aplicación.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AddInFullName">
      <MemberSignature Language="C#" Value="public string AddInFullName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string AddInFullName" />
      <MemberSignature Language="DocId" Value="P:System.AddIn.Hosting.AddInToken.AddInFullName" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property AddInFullName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ AddInFullName { System::String ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.AddIn</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene el espacio de nombres y el tipo del complemento.</summary>
        <value>Nombre completo del complemento (es decir, su espacio de nombres y su nombre de tipo).</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Esta propiedad obtiene el nombre completo del complemento, tal y como se devolvería el <xref:System.Type.FullName%2A?displayProperty=nameWithType> propiedad. Este valor siempre está disponible en una instancia de un <xref:System.AddIn.Hosting.AddInToken> objeto.  
  
   
  
## Examples  
 En el ejemplo siguiente se muestra el valor de la <xref:System.AddIn.Hosting.AddInToken.Name%2A>, <xref:System.AddIn.Hosting.AddInToken.AddInFullName%2A>, <xref:System.AddIn.Hosting.AddInToken.Description%2A>, <xref:System.AddIn.Hosting.AddInToken.AssemblyName%2A>, <xref:System.AddIn.Hosting.AddInToken.Publisher%2A>, y <xref:System.AddIn.Hosting.AddInToken.Version%2A> propiedades en la consola. Este ejemplo de código forma parte de un ejemplo mayor proporcionado para el <xref:System.AddIn.Hosting.AddInToken> clase.  
  
 [!code-csharp[AddInP3Host#7](~/samples/snippets/csharp/VS_Snippets_CLR/addinP3Host/cs/P3Host.cs#7)]
 [!code-vb[AddInP3Host#7](~/samples/snippets/visualbasic/VS_Snippets_CLR/addinP3Host/vb/p3host.vb#7)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AssemblyName">
      <MemberSignature Language="C#" Value="public System.Reflection.AssemblyName AssemblyName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Reflection.AssemblyName AssemblyName" />
      <MemberSignature Language="DocId" Value="P:System.AddIn.Hosting.AddInToken.AssemblyName" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property AssemblyName As AssemblyName" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Reflection::AssemblyName ^ AssemblyName { System::Reflection::AssemblyName ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.AddIn</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.AssemblyName</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene el nombre del ensamblado que contiene el complemento.</summary>
        <value>Nombre del ensamblado.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Esta propiedad obtiene el nombre para mostrar del ensamblado que contiene el complemento, tal y como lo devolvería la <xref:System.Reflection.Assembly.FullName%2A?displayProperty=nameWithType> propiedad. Este valor siempre está disponible en una instancia de un <xref:System.AddIn.Hosting.AddInToken> objeto.  
  
   
  
## Examples  
 En el ejemplo siguiente se muestra el valor de la <xref:System.AddIn.Hosting.AddInToken.Name%2A>, <xref:System.AddIn.Hosting.AddInToken.AddInFullName%2A>, <xref:System.AddIn.Hosting.AddInToken.Description%2A>, <xref:System.AddIn.Hosting.AddInToken.AssemblyName%2A>, <xref:System.AddIn.Hosting.AddInToken.Publisher%2A>, y <xref:System.AddIn.Hosting.AddInToken.Version%2A> propiedades en la consola. Este ejemplo de código forma parte de un ejemplo mayor proporcionado para el <xref:System.AddIn.Hosting.AddInToken> clase.  
  
 [!code-csharp[AddInP3Host#7](~/samples/snippets/csharp/VS_Snippets_CLR/addinP3Host/cs/P3Host.cs#7)]
 [!code-vb[AddInP3Host#7](~/samples/snippets/visualbasic/VS_Snippets_CLR/addinP3Host/vb/p3host.vb#7)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Description">
      <MemberSignature Language="C#" Value="public string Description { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Description" />
      <MemberSignature Language="DocId" Value="P:System.AddIn.Hosting.AddInToken.Description" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Description As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Description { System::String ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.AddIn</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene la descripción del complemento.</summary>
        <value>Descripción del complemento o <see langword="null" /> si la descripción no se especifica en el atributo <see cref="T:System.AddIn.AddInAttribute" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Esta propiedad obtiene la descripción del complemento como se especifica en el <xref:System.AddIn.AddInAttribute> atributo.  
  
   
  
## Examples  
 En el ejemplo siguiente se muestra el valor de la <xref:System.AddIn.Hosting.AddInToken.Name%2A>, <xref:System.AddIn.Hosting.AddInToken.AddInFullName%2A>, <xref:System.AddIn.Hosting.AddInToken.Description%2A>, <xref:System.AddIn.Hosting.AddInToken.AssemblyName%2A>, <xref:System.AddIn.Hosting.AddInToken.Publisher%2A>, y <xref:System.AddIn.Hosting.AddInToken.Version%2A> propiedades en la consola. Este ejemplo de código forma parte de un ejemplo mayor proporcionado para el <xref:System.AddIn.Hosting.AddInToken> clase.  
  
 [!code-csharp[AddInP3Host#7](~/samples/snippets/csharp/VS_Snippets_CLR/addinP3Host/cs/P3Host.cs#7)]
 [!code-vb[AddInP3Host#7](~/samples/snippets/visualbasic/VS_Snippets_CLR/addinP3Host/vb/p3host.vb#7)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EnableDirectConnect">
      <MemberSignature Language="C#" Value="public static bool EnableDirectConnect { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property bool EnableDirectConnect" />
      <MemberSignature Language="DocId" Value="P:System.AddIn.Hosting.AddInToken.EnableDirectConnect" />
      <MemberSignature Language="VB.NET" Value="Public Shared Property EnableDirectConnect As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property bool EnableDirectConnect { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.AddIn</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene y establece un valor que indica si los complementos deben estar conectados directamente a sus hosts cuando las condiciones lo permitan.</summary>
        <value>
          Es <see langword="true" /> si el complemento debe estar conectado directamente al host; de lo contrario, es <see langword="false" />. El valor predeterminado es <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Para que la conexión directa que se produzca, deben existir las siguientes condiciones:  
  
-   Esta propiedad debe establecerse en `true`.  
  
-   El complemento debe estar en el mismo dominio de aplicación que el host.  
  
-   La vista de complemento y la vista de host del complemento deben ser del mismo tipo.  
  
-   Todos los segmentos de la canalización deben estar disponibles.  
  
 Cuando se establece una conexión directa, el adaptador de conversión y el adaptador de host no se crean instancias.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.AddIn.Hosting.AddInToken.Equals(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Equals (obj As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool Equals(System::Object ^ obj);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.AddIn</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj">Objeto que se va a comparar con la instancia actual.</param>
        <summary>Determina si un objeto especificado es igual a la instancia actual.</summary>
        <returns>
          Es <see langword="true" /> si el objeto especificado y la instancia actual son iguales; en caso contrario, es <see langword="false" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetEnumerator">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerator&lt;System.AddIn.Hosting.QualificationDataItem&gt; GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.Generic.IEnumerator`1&lt;valuetype System.AddIn.Hosting.QualificationDataItem&gt; GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.AddIn.Hosting.AddInToken.GetEnumerator" />
      <MemberSignature Language="VB.NET" Value="Public Function GetEnumerator () As IEnumerator(Of QualificationDataItem)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Collections::Generic::IEnumerator&lt;System::AddIn::Hosting::QualificationDataItem&gt; ^ GetEnumerator();" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.IEnumerable`1.GetEnumerator</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.AddIn</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerator&lt;System.AddIn.Hosting.QualificationDataItem&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Devuelve un enumerador para los datos de calificación de los segmentos de canalización asociados a este token.</summary>
        <returns>Enumerador que puede usarse para recorrer en iteración los datos de calificación de los segmentos de canalización asociados al token actual.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Utilice este método para tratar un token como si fuera una colección de elementos de datos de calificación, por ejemplo, en un `foreach` instrucción (`For Each` en Visual Basic, `for each` en Visual C++).  
  
 El enumerador devuelto por este método se utiliza para recorrer en iteración los elementos de datos de calificación de los segmentos de canalización asociados al token actual. Cada elemento de datos de calificación es un <xref:System.AddIn.Hosting.QualificationDataItem> estructura que identifica el segmento de canalización y contiene un par nombre/valor de un <xref:System.AddIn.Pipeline.QualificationDataAttribute> atributo aplicado a ese segmento.  
  
> [!NOTE]
>  El modelo de complementos no usa los datos de calificación que se aplican a la vista de host del complemento. Como resultado, al enumerar los datos de calificación no encontrará ninguno los elementos cuyo <xref:System.AddIn.Hosting.QualificationDataItem.Segment%2A> propiedad es <xref:System.AddIn.Hosting.AddInSegmentType.HostViewOfAddIn?displayProperty=nameWithType>.  
  
 Como alternativa, puede usar el <xref:System.AddIn.Hosting.AddInToken.QualificationData%2A> propiedad que se va a obtener un conjunto anidado de diccionarios que contienen los datos de calificación de los segmentos de canalización.  
  
   
  
## Examples  
 En el ejemplo siguiente se enumeran los datos de calificación de los segmentos de canalización asociados a cada <xref:System.AddIn.Hosting.AddInToken> en una colección de tokens.  
  
 [!code-csharp[AddInP3Host#12](~/samples/snippets/csharp/VS_Snippets_CLR/addinP3Host/cs/P3Host.cs#12)]
 [!code-vb[AddInP3Host#12](~/samples/snippets/visualbasic/VS_Snippets_CLR/addinP3Host/vb/p3host.vb#12)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.AddIn.Hosting.AddInToken.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetHashCode () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetHashCode();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.AddIn</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Sirve como función hash para un token.</summary>
        <returns>Código hash del actual token.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Name">
      <MemberSignature Language="C#" Value="public string Name { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Name" />
      <MemberSignature Language="DocId" Value="P:System.AddIn.Hosting.AddInToken.Name" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Name As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Name { System::String ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.AddIn</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene el nombre del complemento.</summary>
        <value>Nombre del complemento.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Esta propiedad obtiene el nombre del complemento como se especifica en el <xref:System.AddIn.AddInAttribute> atributo. Este valor siempre está disponible en una instancia de un <xref:System.AddIn.Hosting.AddInToken> objeto.  
  
   
  
## Examples  
 En el ejemplo siguiente se muestra el valor de la <xref:System.AddIn.Hosting.AddInToken.Name%2A>, <xref:System.AddIn.Hosting.AddInToken.AddInFullName%2A>, <xref:System.AddIn.Hosting.AddInToken.Description%2A>, <xref:System.AddIn.Hosting.AddInToken.AssemblyName%2A>, <xref:System.AddIn.Hosting.AddInToken.Publisher%2A>, y <xref:System.AddIn.Hosting.AddInToken.Version%2A> propiedades en la consola. Este ejemplo de código forma parte de un ejemplo mayor proporcionado para el <xref:System.AddIn.Hosting.AddInToken> clase.  
  
 [!code-csharp[AddInP3Host#7](~/samples/snippets/csharp/VS_Snippets_CLR/addinP3Host/cs/P3Host.cs#7)]
 [!code-vb[AddInP3Host#7](~/samples/snippets/visualbasic/VS_Snippets_CLR/addinP3Host/vb/p3host.vb#7)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Publisher">
      <MemberSignature Language="C#" Value="public string Publisher { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Publisher" />
      <MemberSignature Language="DocId" Value="P:System.AddIn.Hosting.AddInToken.Publisher" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Publisher As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Publisher { System::String ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.AddIn</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene el editor del complemento.</summary>
        <value>Editor del complemento o <see langword="null" /> si el editor no se especifica en el atributo <see cref="T:System.AddIn.AddInAttribute" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Esta propiedad obtiene el Editor del complemento como se especifica en el <xref:System.AddIn.AddInAttribute> atributo.  
  
   
  
## Examples  
 En el ejemplo siguiente se muestra el valor de la <xref:System.AddIn.Hosting.AddInToken.Name%2A>, <xref:System.AddIn.Hosting.AddInToken.AddInFullName%2A>, <xref:System.AddIn.Hosting.AddInToken.Description%2A>, <xref:System.AddIn.Hosting.AddInToken.AssemblyName%2A>, <xref:System.AddIn.Hosting.AddInToken.Publisher%2A>, y <xref:System.AddIn.Hosting.AddInToken.Version%2A> propiedades en la consola. Este ejemplo de código forma parte de un ejemplo mayor proporcionado para el <xref:System.AddIn.Hosting.AddInToken> clase.  
  
 [!code-csharp[AddInP3Host#7](~/samples/snippets/csharp/VS_Snippets_CLR/addinP3Host/cs/P3Host.cs#7)]
 [!code-vb[AddInP3Host#7](~/samples/snippets/visualbasic/VS_Snippets_CLR/addinP3Host/vb/p3host.vb#7)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="QualificationData">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IDictionary&lt;System.AddIn.Hosting.AddInSegmentType,System.Collections.Generic.IDictionary&lt;string,string&gt;&gt; QualificationData { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.IDictionary`2&lt;valuetype System.AddIn.Hosting.AddInSegmentType, class System.Collections.Generic.IDictionary`2&lt;string, string&gt;&gt; QualificationData" />
      <MemberSignature Language="DocId" Value="P:System.AddIn.Hosting.AddInToken.QualificationData" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property QualificationData As IDictionary(Of AddInSegmentType, IDictionary(Of String, String))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::Generic::IDictionary&lt;System::AddIn::Hosting::AddInSegmentType, System::Collections::Generic::IDictionary&lt;System::String ^, System::String ^&gt; ^&gt; ^ QualificationData { System::Collections::Generic::IDictionary&lt;System::AddIn::Hosting::AddInSegmentType, System::Collections::Generic::IDictionary&lt;System::String ^, System::String ^&gt; ^&gt; ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.AddIn</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IDictionary&lt;System.AddIn.Hosting.AddInSegmentType,System.Collections.Generic.IDictionary&lt;System.String,System.String&gt;&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene un diccionario de datos sobre los segmentos de la canalización asociada al token actual.</summary>
        <value>Diccionario cuyas claves son los segmentos de canalización y cuyos valores son diccionarios de pares nombre/valor que representan los datos de calificación de cada segmento.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Utilice esta propiedad para obtener los datos que se ha aplicado para segmentos de canalización con el <xref:System.AddIn.Pipeline.QualificationDataAttribute> atributo. Puede usar estos datos para identificar y trabajar con los tipos que componen las canalizaciones.  
  
 Esta propiedad devuelve un diccionario de diccionarios. El diccionario superior siempre tiene seis claves. Cada clave es un <xref:System.AddIn.Hosting.AddInSegmentType> valor de un segmento de la canalización. Cada valor es un tipo genérico <xref:System.Collections.Generic.IDictionary%602> de cadenas con claves de cadena que contiene los datos de calificación del segmento.  
  
 Las claves y los valores de estos diccionarios internos son los nombres y valores especificados en la <xref:System.AddIn.Pipeline.QualificationDataAttribute> atributos para los segmentos. Si no se ha aplicado ningún dato de calificación a un segmento, su diccionario está vacío.  
  
> [!NOTE]
>  El modelo de complementos no usa los datos de calificación que se aplican a la vista de host del complemento. Como resultado, el diccionario <xref:System.AddIn.Hosting.AddInSegmentType.HostViewOfAddIn?displayProperty=nameWithType> siempre está vacía.  
  
 Como alternativa, puede obtener datos de calificación enumerando un <xref:System.AddIn.Hosting.AddInToken> como si fuera una colección de <xref:System.AddIn.Hosting.QualificationDataItem> estructuras, con un `foreach` instrucción (`For Each` en Visual Basic, `for each` en Visual C++). Vea el ejemplo proporcionado para el <xref:System.AddIn.Hosting.QualificationDataItem> estructura.  
  
   
  
## Examples  
 En el ejemplo siguiente se muestra cómo examinar datos de calificación de un complemento.  
  
 [!code-csharp[AddInP3Host#11](~/samples/snippets/csharp/VS_Snippets_CLR/addinP3Host/cs/P3Host.cs#11)]
 [!code-vb[AddInP3Host#11](~/samples/snippets/visualbasic/VS_Snippets_CLR/addinP3Host/vb/p3host.vb#11)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IEnumerable.GetEnumerator">
      <MemberSignature Language="C#" Value="System.Collections.IEnumerator IEnumerable.GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.AddIn.Hosting.AddInToken.System#Collections#IEnumerable#GetEnumerator" />
      <MemberSignature Language="VB.NET" Value="Function GetEnumerator () As IEnumerator Implements IEnumerable.GetEnumerator" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Collections::IEnumerator ^ System.Collections.IEnumerable.GetEnumerator() = System::Collections::IEnumerable::GetEnumerator;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IEnumerable.GetEnumerator</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.AddIn</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IEnumerator</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Devuelve un enumerador para los datos de calificación de los segmentos de canalización asociados a este token.</summary>
        <returns>Enumerador que puede usarse para recorrer en iteración los datos de calificación de los segmentos de canalización asociados al token actual.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este método permite que un token se puede tratar como una colección de elementos de datos de calificación, por ejemplo en un `foreach` instrucción (`For Each` en Visual Basic, `for each` en Visual C++).  
  
 El enumerador devuelto por este método se utiliza para recorrer en iteración los elementos de datos de calificación de los segmentos de canalización asociados al token actual. Cada elemento de datos de calificación es un <xref:System.AddIn.Hosting.QualificationDataItem> estructura que identifica el segmento de canalización y contiene el par de nombre/valor de un <xref:System.AddIn.Pipeline.QualificationDataAttribute> atributo aplicado a ese segmento.  
  
> [!NOTE]
>  El modelo de complementos no usa los datos de calificación que se aplican a la vista de host del complemento. Como resultado, al enumerar los datos de calificación no encontrará ninguno los elementos cuyo <xref:System.AddIn.Hosting.QualificationDataItem.Segment%2A> propiedad es <xref:System.AddIn.Hosting.AddInSegmentType.HostViewOfAddIn?displayProperty=nameWithType>.  
  
 Como alternativa, puede usar el <xref:System.AddIn.Hosting.AddInToken.QualificationData%2A> propiedad que se va a obtener un conjunto anidado de diccionarios que contiene los datos de calificación de los segmentos de canalización.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.AddIn.Hosting.AddInToken.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToString();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.AddIn</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Devuelve una cadena que representa el token.</summary>
        <returns>Cadena que representa el token.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Version">
      <MemberSignature Language="C#" Value="public string Version { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Version" />
      <MemberSignature Language="DocId" Value="P:System.AddIn.Hosting.AddInToken.Version" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Version As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Version { System::String ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.AddIn</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene la versión del complemento, tal y como se especifica en el atributo <see cref="T:System.AddIn.AddInAttribute" />.</summary>
        <value>Versión del complemento o <see langword="null" /> si el número de versión no se especifica en el atributo <see cref="T:System.AddIn.AddInAttribute" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El número de versión es una cadena de forma libre.  
  
   
  
## Examples  
 En el ejemplo siguiente se muestra el valor de la <xref:System.AddIn.Hosting.AddInToken.Name%2A>, <xref:System.AddIn.Hosting.AddInToken.AddInFullName%2A>, <xref:System.AddIn.Hosting.AddInToken.Description%2A>, <xref:System.AddIn.Hosting.AddInToken.AssemblyName%2A>, <xref:System.AddIn.Hosting.AddInToken.Publisher%2A>, y <xref:System.AddIn.Hosting.AddInToken.Version%2A> propiedades en la consola. Este ejemplo de código forma parte de un ejemplo mayor proporcionado para el <xref:System.AddIn.Hosting.AddInToken> clase.  
  
 [!code-csharp[AddInP3Host#7](~/samples/snippets/csharp/VS_Snippets_CLR/addinP3Host/cs/P3Host.cs#7)]
 [!code-vb[AddInP3Host#7](~/samples/snippets/visualbasic/VS_Snippets_CLR/addinP3Host/vb/p3host.vb#7)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>