<Type Name="IEqualityComparer&lt;T&gt;" FullName="System.Collections.Generic.IEqualityComparer&lt;T&gt;">
  <Metadata><Meta Name="ms.openlocfilehash" Value="3e7072613516433c6ad7b3214207cd25563d0e8a" /><Meta Name="ms.sourcegitcommit" Value="1bb00d2f4343e73ae8d58668f02297a3cf10a4c1" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="es-ES" /><Meta Name="ms.lasthandoff" Value="06/15/2019" /><Meta Name="ms.locfileid" Value="63908537" /></Metadata><TypeSignature Language="C#" Value="public interface IEqualityComparer&lt;in T&gt;" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IEqualityComparer`1&lt;- T&gt;" />
  <TypeSignature Language="DocId" Value="T:System.Collections.Generic.IEqualityComparer`1" />
  <TypeSignature Language="VB.NET" Value="Public Interface IEqualityComparer(Of In T)" />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename T&gt;&#xA;public interface class IEqualityComparer" />
  <TypeSignature Language="F#" Value="type IEqualityComparer&lt;'T&gt; = interface" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="T">
      <Constraints>
        <ParameterAttribute>Contravariant</ParameterAttribute>
      </Constraints>
    </TypeParameter>
  </TypeParameters>
  <Interfaces />
  <Docs>
    <typeparam name="T">Tipo de objetos que se van a comparar.</typeparam>
    <summary>Define métodos para admitir la comparación de objetos en concepto de igualdad.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Esta interfaz permite la implementación de comparación de igualdad personalizada para las colecciones. Es decir, puede crear su propia definición de igualdad para el tipo `T`y especificar que esta definición se usa con un tipo de colección que acepta el <xref:System.Collections.Generic.IEqualityComparer%601> interfaz genérica. En .NET Framework, los constructores de la <xref:System.Collections.Generic.Dictionary%602> tipo de colección genérica Aceptar esta interfaz.  
  
 Proporciona una implementación predeterminada de esta interfaz la <xref:System.Collections.Generic.EqualityComparer%601.Default%2A> propiedad de la <xref:System.Collections.Generic.EqualityComparer%601> clase genérica. El <xref:System.StringComparer> la clase implementa <xref:System.Collections.Generic.IEqualityComparer%601> de tipo <xref:System.String>.  
  
 Esta interfaz admite solo las comparaciones de igualdad. Personalización de las comparaciones de ordenación y orden es proporcionada por el <xref:System.Collections.Generic.IComparer%601> interfaz genérica.  
  
 Se recomienda derivar desde la <xref:System.Collections.Generic.EqualityComparer%601> clase en lugar de implementar la <xref:System.Collections.Generic.IEqualityComparer%601> interfaz, porque el <xref:System.Collections.Generic.EqualityComparer%601> las pruebas de igualdad mediante la clase el <xref:System.IEquatable%601.Equals%2A?displayProperty=nameWithType> método en lugar de la <xref:System.Object.Equals%2A?displayProperty=nameWithType> método. Esto es coherente con la `Contains`, `IndexOf`, `LastIndexOf`, y `Remove` métodos de la <xref:System.Collections.Generic.Dictionary%602> clase y otras colecciones genéricas.  
  
   
  
## Examples  
 En el ejemplo siguiente se agrega personalizado `Box` objetos a una colección de diccionarios. El `Box` objetos se consideran iguales si sus dimensiones son iguales.  
  
 [!code-csharp[System.Collections.Generic.IEqualityComparer#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.collections.generic.iequalitycomparer/cs/program.cs#1)]
 [!code-vb[System.Collections.Generic.IEqualityComparer#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.collections.generic.iequalitycomparer/vb/program.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Collections.Generic.EqualityComparer`1" />
    <altmember cref="T:System.Collections.Generic.Dictionary`2" />
    <altmember cref="Overload:System.Collections.Generic.Dictionary`2.#ctor" />
    <altmember cref="T:System.Collections.Generic.IComparer`1" />
  </Docs>
  <Members>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public bool Equals (T x, T y);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Equals(!T x, !T y) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.IEqualityComparer`1.Equals(`0,`0)" />
      <MemberSignature Language="VB.NET" Value="Public Function Equals (x As T, y As T) As Boolean" />
      <MemberSignature Language="F#" Value="abstract member Equals : 'T * 'T -&gt; bool" Usage="iEqualityComparer.Equals (x, y)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Equals(T x, T y);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="T" />
        <Parameter Name="y" Type="T" />
      </Parameters>
      <Docs>
        <param name="x">Primer objeto de tipo <paramref name="T" /> que se va a comparar.</param>
        <param name="y">Segundo objeto de tipo <paramref name="T" /> que se va a comparar.</param>
        <summary>Determina si los objetos especificados son iguales.</summary>
        <returns><see langword="true" /> si los objetos especificados son iguales; en caso contrario, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Implemente este método para proporcionar una comparación de igualdad personalizada para el tipo `T`.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>Las implementaciones son necesarias para garantizar que si el <see cref="M:System.Collections.Generic.IEqualityComparer`1.Equals(`0,`0)" /> devuelve del método <see langword="true" /> para dos objetos <paramref name="x" /> y <paramref name="y" />, a continuación, el valor devuelto por la <see cref="M:System.Collections.Generic.IEqualityComparer`1.GetHashCode(`0)" /> método para <paramref name="x" /> debe ser igual al valor devuelto para <paramref name="y" />.  
  
El <see cref="M:System.Collections.Generic.IEqualityComparer`1.Equals(`0,`0)" /> método es simétrico, reflexivo y transitivo. Es decir, devuelve <see langword="true" /> si se usa para comparar un objeto consigo misma; <see langword="true" /> para dos objetos <paramref name="x" /> y <paramref name="y" /> si es <see langword="true" /> para <paramref name="y" /> y <paramref name="x" />; y <see langword="true" /> para dos objetos <paramref name="x" /> y <paramref name="z" /> si es <see langword="true" /> para <paramref name="x" /> y <paramref name="y" /> y también <see langword="true" /> para <paramref name="y" /> y <paramref name="z" />.</para></block>
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public int GetHashCode (T obj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 GetHashCode(!T obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.IEqualityComparer`1.GetHashCode(`0)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetHashCode (obj As T) As Integer" />
      <MemberSignature Language="F#" Value="abstract member GetHashCode : 'T -&gt; int" Usage="iEqualityComparer.GetHashCode obj" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int GetHashCode(T obj);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="T" />
      </Parameters>
      <Docs>
        <param name="obj"><see cref="T:System.Object" /> para el que se va a devolver un código hash.</param>
        <summary>Devuelve un código hash para el objeto especificado.</summary>
        <returns>Código hash para el objeto especificado.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Implemente este método para proporcionar un código hash personalizado para el tipo `T`, que corresponde a la comparación de igualdad personalizada proporcionada por el <xref:System.Collections.Generic.IEqualityComparer%601.Equals%2A> método.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">El tipo de <paramref name="obj" /> es un tipo de referencia y <paramref name="obj" /> es <see langword="null" />.</exception>
        <block subset="none" type="overrides"><para>Las implementaciones son necesarias para garantizar que si el <see cref="M:System.Collections.Generic.IEqualityComparer`1.Equals(`0,`0)" /> devuelve del método <see langword="true" /> para dos objetos <paramref name="x" /> y <paramref name="y" />, a continuación, el valor devuelto por la <see cref="M:System.Collections.Generic.IEqualityComparer`1.GetHashCode(`0)" /> método para <paramref name="x" /> debe ser igual al valor devuelto para <paramref name="y" />.</para></block>
        <altmember cref="M:System.Object.GetHashCode" />
        <altmember cref="T:System.Collections.IHashCodeProvider" />
      </Docs>
    </Member>
  </Members>
</Type>