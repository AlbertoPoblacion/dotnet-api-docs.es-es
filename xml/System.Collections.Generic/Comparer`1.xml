<Type Name="Comparer&lt;T&gt;" FullName="System.Collections.Generic.Comparer&lt;T&gt;">
  <Metadata><Meta Name="ms.openlocfilehash" Value="b2ccd28c7deb249e6b3413b4f5b8838afb297102" /><Meta Name="ms.sourcegitcommit" Value="1bb00d2f4343e73ae8d58668f02297a3cf10a4c1" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="es-ES" /><Meta Name="ms.lasthandoff" Value="06/15/2019" /><Meta Name="ms.locfileid" Value="63908882" /></Metadata><TypeSignature Language="C#" Value="public abstract class Comparer&lt;T&gt; : System.Collections.Generic.IComparer&lt;T&gt;, System.Collections.IComparer" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract serializable beforefieldinit Comparer`1&lt;T&gt; extends System.Object implements class System.Collections.Generic.IComparer`1&lt;!T&gt;, class System.Collections.IComparer" />
  <TypeSignature Language="DocId" Value="T:System.Collections.Generic.Comparer`1" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class Comparer(Of T)&#xA;Implements IComparer, IComparer(Of T)" />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename T&gt;&#xA;public ref class Comparer abstract : System::Collections::Generic::IComparer&lt;T&gt;, System::Collections::IComparer" />
  <TypeSignature Language="F#" Value="type Comparer&lt;'T&gt; = class&#xA;    interface IComparer&#xA;    interface IComparer&lt;'T&gt;" />
  <AssemblyInfo>
    <AssemblyName>System.Collections</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="T" />
  </TypeParameters>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Collections.Generic.IComparer&lt;T&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.IComparer</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <AttributeName>System.Serializable</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <typeparam name="T">Tipo de objetos que se van a comparar.</typeparam>
    <summary>Proporciona una clase base para las implementaciones de la interfaz genérica <see cref="T:System.Collections.Generic.IComparer`1" />.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Derivar de esta clase para proporcionar una implementación personalizada de la <xref:System.Collections.Generic.IComparer%601> interfaz para su uso con las clases de colección, como el <xref:System.Collections.Generic.SortedList%602> y <xref:System.Collections.Generic.SortedDictionary%602> clases genéricas.  
  
 La diferencia entre la derivación desde el <xref:System.Collections.Generic.Comparer%601> clase e implementar la <xref:System.IComparable?displayProperty=nameWithType> interfaz es como sigue:  
  
-   Para especificar cómo deben compararse los dos objetos de forma predeterminada, implemente el <xref:System.IComparable?displayProperty=nameWithType> interfaz en la clase. Esto garantiza que las operaciones de ordenación usará el código de comparación predeterminado que proporcionó.  
  
-   Para definir un comparador que se va a usar en lugar del comparador predeterminado, que se derivan de la <xref:System.Collections.Generic.Comparer%601> clase. A continuación, puede usar a este comparador en las operaciones de ordenación que toman a un comparador como un parámetro.  
  
 El objeto devuelto por la <xref:System.Collections.Generic.Comparer%601.Default%2A> propiedad usa el <xref:System.IComparable%601?displayProperty=nameWithType> interfaz genérica (`IComparable<T>` en C#, `IComparable(Of T)` en Visual Basic) para comparar dos objetos. Si tipo `T` no implementa la <xref:System.IComparable%601?displayProperty=nameWithType> interfaz genérica, la <xref:System.Collections.Generic.Comparer%601.Default%2A> propiedad devuelve un <xref:System.Collections.Generic.Comparer%601> que usa el <xref:System.IComparable?displayProperty=nameWithType> interfaz.  
  
   
  
## Examples  
 En el ejemplo siguiente se deriva una clase, `BoxLengthFirst`, desde el <xref:System.Collections.Generic.Comparer%601> clase. Este comparador que compara dos objetos de tipo `Box`. Ordena primero por la longitud, alto y, a continuación, en el ancho. El `Box` la clase implementa la <xref:System.IComparable%601> interfaz para controlar la comparación predeterminada entre dos `Box` objetos. Esta implementación predeterminada ordena primero por alto, longitud y, a continuación, en el ancho. En el ejemplo se muestra las diferencias entre las dos comparaciones al ordenar una lista de `Box` objetos primero mediante el `BoxLengthFirst` comparador y a continuación, use el comparador predeterminado.  
  
 [!code-csharp[System.Collections.Generic.BoxCompare#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.collections.generic.boxcompare/cs/program.cs#1)]
 [!code-vb[System.Collections.Generic.BoxCompare#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.collections.generic.boxcompare/vb/program.vb#1)]  
  
 ]]></format>
    </remarks>
    <block subset="none" type="overrides"><para>
        <see cref="M:System.Collections.Generic.Comparer`1.Compare(`0,`0)" /> y <see cref="M:System.Collections.Generic.EqualityComparer`1.Equals(`0,`0)" /> pueden comportarse de forma diferente en cuanto a mayúsculas y minúsculas y confidencialidad de la referencia cultural.  
  
Para las comparaciones de cadenas, la <see cref="T:System.StringComparer" /> clase es preferible a <c>comparador&lt;cadena&gt;</c>.  Propiedades de la <see cref="T:System.StringComparer" /> clase devuelven instancias predefinidas que realizan las comparaciones de cadenas con diferentes combinaciones de mayúsculas y minúsculas y confidencialidad de la referencia cultural.  Las minúsculas y la sensibilidad de la referencia cultural son coherentes entre los miembros del mismo <see cref="T:System.StringComparer" /> instancia.  
  
Para obtener más información sobre las comparaciones específicas de la referencia cultural, consulte el <see cref="N:System.Globalization" /> espacio de nombres y [globalización y localización](~/docs/standard/globalization-localization/index.md).</para></block>
    <altmember cref="T:System.Collections.Generic.IComparer`1" />
    <altmember cref="T:System.IComparable`1" />
    <altmember cref="T:System.StringComparer" />
    <altmember cref="T:System.Globalization.CultureInfo" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected Comparer ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.Comparer`1.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; Comparer();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Collections.Generic.Comparer`1" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Compare">
      <MemberSignature Language="C#" Value="public abstract int Compare (T x, T y);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 Compare(!T x, !T y) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.Comparer`1.Compare(`0,`0)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function Compare (x As T, y As T) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract int Compare(T x, T y);" />
      <MemberSignature Language="F#" Value="abstract member Compare : 'T * 'T -&gt; int" Usage="comparer.Compare (x, y)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.IComparer`1.Compare(`0,`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="T" />
        <Parameter Name="y" Type="T" />
      </Parameters>
      <Docs>
        <param name="x">Primer objeto que se va a comparar.</param>
        <param name="y">Segundo objeto que se va a comparar.</param>
        <summary>Cuando se reemplaza en una clase derivada, realiza una comparación de dos objetos del mismo tipo y devuelve un valor que indica si uno es menor, igual o mayor que el otro.</summary>
        <returns>Entero con signo que indica los valores relativos de <paramref name="x" /> y <paramref name="y" />, como se muestra en la tabla siguiente.  
  
 <list type="table"><listheader><term> Valor 
 </term><description> Significado 
 </description></listheader><item><term> Menor que cero 
 </term><description><paramref name="x" /> es menor que <paramref name="y" />.  
  
 </description></item><item><term> Cero 
 </term><description><paramref name="x" /> es igual que <paramref name="y" />.  
  
 </description></item><item><term> Mayor que cero 
 </term><description><paramref name="x" /> es mayor que <paramref name="y" />.  
  
 </description></item></list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Implemente este método para proporcionar una personalizada para el tipo de comparación de ordenación `T`.  
  
   
  
## Examples  
 En el ejemplo siguiente se define un comparador de `Box` objetos que se pueden usar el comparador predeterminado. Este ejemplo forma parte de un ejemplo más extenso proporcionado para el <xref:System.Collections.Generic.Comparer%601> clase.  
  
 [!code-csharp[System.Collections.Generic.BoxCompare#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.collections.generic.boxcompare/cs/program.cs#5)]
 [!code-vb[System.Collections.Generic.BoxCompare#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.collections.generic.boxcompare/vb/program.vb#5)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">El tipo <paramref name="T" /> no implementa la interfaz genérica <see cref="T:System.IComparable`1" /> o la interfaz <see cref="T:System.IComparable" />.</exception>
        <block subset="none" type="overrides"><para>Comparar <see langword="null" /> con cualquier referencia de tipo está permitido y no genera una excepción. Una referencia nula se considera menor que cualquier referencia que no es null.  
  
Para obtener información acerca de las comparaciones específicas de referencias culturales, vea la <see cref="N:System.Globalization" /> espacio de nombres y [globalización y localización](~/docs/standard/globalization-localization/index.md).</para></block>
        <altmember cref="T:System.IComparable`1" />
        <altmember cref="T:System.IComparable" />
        <altmember cref="T:System.StringComparer" />
        <altmember cref="T:System.Object" />
        <altmember cref="T:System.Globalization.CultureInfo" />
      </Docs>
    </Member>
    <Member MemberName="Create">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.Comparer&lt;T&gt; Create (Comparison&lt;T&gt; comparison);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.Comparer`1&lt;!T&gt; Create(class System.Comparison`1&lt;!T&gt; comparison) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.Comparer`1.Create(System.Comparison{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Create (comparison As Comparison(Of T)) As Comparer(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Collections::Generic::Comparer&lt;T&gt; ^ Create(Comparison&lt;T&gt; ^ comparison);" />
      <MemberSignature Language="F#" Value="static member Create : Comparison&lt;'T&gt; -&gt; System.Collections.Generic.Comparer&lt;'T&gt;" Usage="System.Collections.Generic.Comparer&lt;'T&gt;.Create comparison" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.Comparer&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="comparison" Type="System.Comparison&lt;T&gt;" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="comparison">Comparación que se va a utilizar.</param>
        <summary>Crea un comparador mediante la comparación especificada.</summary>
        <returns>El nuevo comparador.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Default">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.Comparer&lt;T&gt; Default { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Collections.Generic.Comparer`1&lt;!T&gt; Default" />
      <MemberSignature Language="DocId" Value="P:System.Collections.Generic.Comparer`1.Default" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property Default As Comparer(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Collections::Generic::Comparer&lt;T&gt; ^ Default { System::Collections::Generic::Comparer&lt;T&gt; ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Default : System.Collections.Generic.Comparer&lt;'T&gt;" Usage="System.Collections.Generic.Comparer&lt;'T&gt;.Default" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.Comparer&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Devuelve un comparador de criterios de ordenación predeterminado para el tipo especificado por el argumento genérico.</summary>
        <value>Objeto que hereda <see cref="T:System.Collections.Generic.Comparer`1" /> y sirve como un comparador de criterios de ordenación para el tipo <paramref name="T" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Collections.Generic.Comparer%601> devuelto por esta propiedad usa el <xref:System.IComparable%601?displayProperty=nameWithType> interfaz genérica (`IComparable<T>` en C#, `IComparable(Of T)` en Visual Basic) para comparar dos objetos. Si tipo `T` no implementa la <xref:System.IComparable%601?displayProperty=nameWithType> interfaz genérica, esta propiedad devuelve un <xref:System.Collections.Generic.Comparer%601> que usa el <xref:System.IComparable?displayProperty=nameWithType> interfaz.  
  
   
  
## Examples  
 El ejemplo siguiente muestra cómo usar el <xref:System.Collections.Generic.Comparer%601.Default%2A> propiedad para obtener un objeto que realiza la comparación predeterminada. Este ejemplo forma parte de un ejemplo más extenso proporcionado para el <xref:System.Collections.Generic.Comparer%601> clase.  
  
 [!code-csharp[System.Collections.Generic.BoxCompare#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.collections.generic.boxcompare/cs/program.cs#3)]
 [!code-vb[System.Collections.Generic.BoxCompare#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.collections.generic.boxcompare/vb/program.vb#3)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="usage"><para>Para las comparaciones de cadenas, la <see cref="T:System.StringComparer" /> clase es preferible a <c>comparador&lt;cadena&gt;</c> (<c>comparador (Of String)</c> en Visual Basic).  Propiedades de la <see cref="T:System.StringComparer" /> clase devuelven instancias predefinidas que realizan las comparaciones de cadenas con diferentes combinaciones de mayúsculas y minúsculas y confidencialidad de la referencia cultural.  Las minúsculas y la sensibilidad de la referencia cultural son coherentes entre los miembros del mismo <see cref="T:System.StringComparer" /> instancia.  
  
Para obtener más información sobre las comparaciones específicas de la referencia cultural, consulte el <see cref="N:System.Globalization" /> espacio de nombres y [globalización y localización](~/docs/standard/globalization-localization/index.md).</para></block>
        <altmember cref="T:System.IComparable`1" />
        <altmember cref="T:System.IComparable" />
        <altmember cref="T:System.StringComparer" />
        <altmember cref="T:System.Object" />
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IComparer.Compare">
      <MemberSignature Language="C#" Value="int IComparer.Compare (object x, object y);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int32 System.Collections.IComparer.Compare(object x, object y) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.Comparer`1.System#Collections#IComparer#Compare(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Function Compare (x As Object, y As Object) As Integer Implements IComparer.Compare" />
      <MemberSignature Language="C++ CLI" Value=" virtual int System.Collections.IComparer.Compare(System::Object ^ x, System::Object ^ y) = System::Collections::IComparer::Compare;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IComparer.Compare(System.Object,System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.Object" />
        <Parameter Name="y" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="x">Primer objeto que se va a comparar.</param>
        <param name="y">Segundo objeto que se va a comparar.</param>
        <summary>Compara dos objetos y devuelve un valor que indica si uno de ellos es menor, igual o mayor que el otro.</summary>
        <returns>Entero con signo que indica los valores relativos de <paramref name="x" /> y <paramref name="y" />, como se muestra en la tabla siguiente.  
  
 <list type="table"><listheader><term> Valor 
 </term><description> Significado 
 </description></listheader><item><term> Menor que cero 
 </term><description><paramref name="x" /> es menor que <paramref name="y" />.  
  
 </description></item><item><term> Cero 
 </term><description><paramref name="x" /> es igual que <paramref name="y" />.  
  
 </description></item><item><term> Mayor que cero 
 </term><description><paramref name="x" /> es mayor que <paramref name="y" />.  
  
 </description></item></list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este método es un contenedor para el <xref:System.Collections.Generic.Comparer%601.Compare%28%600%2C%600%29> método, por lo que `obj` debe convertirse al tipo especificado por el argumento genérico `T` de la instancia actual. Si no se puede convertir a `T`, un <xref:System.ArgumentException> se produce.  
  
 Comparar `null` con cualquier referencia de tipo está permitido y no genera una excepción. Al ordenar, `null` se considera menor que cualquier otro objeto.  
  
   
  
## Examples  
 El ejemplo siguiente muestra cómo usar el <xref:System.Collections.Generic.Comparer%601.System%23Collections%23IComparer%23Compare%2A> método para comparar dos objetos. Este ejemplo forma parte de un ejemplo más extenso proporcionado para el <xref:System.Collections.Generic.Comparer%601> clase.  
  
 [!code-csharp[System.Collections.Generic.BoxCompare#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.collections.generic.boxcompare/cs/program.cs#4)]
 [!code-vb[System.Collections.Generic.BoxCompare#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.collections.generic.boxcompare/vb/program.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">El tipo de <paramref name="x" /> o <paramref name="y" /> no se puede convertir al tipo <paramref name="T" />.  
  
O bien 
 <paramref name="x" /> e <paramref name="y" /> no implementan la interfaz genérica <see cref="T:System.IComparable`1" />, ni la interfaz <see cref="T:System.IComparable" />.</exception>
        <block subset="none" type="usage"><para>
            <see cref="M:System.Collections.Generic.Comparer`1.Compare(`0,`0)" /> y <see cref="M:System.Collections.Generic.EqualityComparer`1.Equals(`0,`0)" /> comportarse de manera diferente en cuanto a mayúsculas y minúsculas y confidencialidad de la referencia cultural.  
  
Para las comparaciones de cadenas, la <see cref="T:System.StringComparer" /> clase es preferible a <c>comparador&lt;cadena&gt;</c>.  Propiedades de la <see cref="T:System.StringComparer" /> clase devuelven instancias predefinidas que realizan las comparaciones de cadenas con diferentes combinaciones de mayúsculas y minúsculas y confidencialidad de la referencia cultural.  Las minúsculas y la sensibilidad de la referencia cultural son coherentes entre los miembros del mismo <see cref="T:System.StringComparer" /> instancia.  
  
Para obtener más información sobre las comparaciones específicas de la referencia cultural, consulte el <see cref="N:System.Globalization" /> espacio de nombres y [globalización y localización](~/docs/standard/globalization-localization/index.md).</para></block>
        <altmember cref="T:System.StringComparer" />
        <altmember cref="T:System.Collections.IComparer" />
        <altmember cref="T:System.IComparable" />
        <altmember cref="P:System.Threading.Thread.CurrentCulture" />
        <altmember cref="T:System.Globalization.CultureInfo" />
      </Docs>
    </Member>
  </Members>
</Type>