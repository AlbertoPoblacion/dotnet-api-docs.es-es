<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="SortedList`2.xml" source-language="en-US" target-language="es-ES">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac572c1e1ae48ac3af90725e33b902861db5d83679a.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">72c1e1ae48ac3af90725e33b902861db5d83679a</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-1.0,netcore-1.1,netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,netstandard-1.3,netstandard-1.4,netstandard-1.6,netstandard-2.0,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.SortedList`2">
          <source>The type of keys in the collection.</source>
          <target state="translated">Tipo de claves de la colección.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.SortedList`2">
          <source>The type of values in the collection.</source>
          <target state="translated">Tipo de valores de la colección.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" uid="T:System.Collections.Generic.SortedList`2">
          <source>Represents a collection of key/value pairs that are sorted by key based on the associated <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IComparer`1" /&gt;</ph> implementation.</source>
          <target state="translated">Representa una colección de pares clave-valor que se ordenan por claves según la implementación de <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IComparer`1" /&gt;</ph> asociada.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.SortedList`2">
          <source>The <ph id="ph1">&lt;xref:System.Collections.Generic.SortedList%602&gt;</ph> generic class is an array of key/value pairs with O(log <ph id="ph2">`n`</ph>) retrieval, where n is the number of elements in the dictionary.</source>
          <target state="translated">El <ph id="ph1">&lt;xref:System.Collections.Generic.SortedList%602&gt;</ph> clase genérica es una matriz de pares de clave/valor con E/s (registro <ph id="ph2">`n`</ph>) la recuperación, donde n es el número de elementos en el diccionario.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.SortedList`2">
          <source>In this, it is similar to the <ph id="ph1">&lt;xref:System.Collections.Generic.SortedDictionary%602&gt;</ph> generic class.</source>
          <target state="translated">En este caso, es similar a la <ph id="ph1">&lt;xref:System.Collections.Generic.SortedDictionary%602&gt;</ph> clase genérica.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.SortedList`2">
          <source>The two classes have similar object models, and both have O(log <ph id="ph1">`n`</ph>) retrieval.</source>
          <target state="translated">Las dos clases tienen modelos de objetos similares, y ambos tienen O (registro <ph id="ph1">`n`</ph>) la recuperación.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.SortedList`2">
          <source>Where the two classes differ is in memory use and speed of insertion and removal:</source>
          <target state="translated">En qué se diferencian las dos clases se encuentra en uso de memoria y velocidad de inserción y eliminación:</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.SortedList`2">
          <source><ph id="ph1">&lt;xref:System.Collections.Generic.SortedList%602&gt;</ph> uses less memory than <ph id="ph2">&lt;xref:System.Collections.Generic.SortedDictionary%602&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.Generic.SortedList%602&gt;</ph> utiliza menos memoria que <ph id="ph2">&lt;xref:System.Collections.Generic.SortedDictionary%602&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.SortedList`2">
          <source><ph id="ph1">&lt;xref:System.Collections.Generic.SortedDictionary%602&gt;</ph> has faster insertion and removal operations for unsorted data, O(log <ph id="ph2">`n`</ph>) as opposed to O(<ph id="ph3">`n`</ph>) for <ph id="ph4">&lt;xref:System.Collections.Generic.SortedList%602&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.Generic.SortedDictionary%602&gt;</ph> tiene más rápida inserción y las operaciones de eliminación de datos sin ordenar, O (registro <ph id="ph2">`n`</ph>) en lugar de E/s (<ph id="ph3">`n`</ph>) para <ph id="ph4">&lt;xref:System.Collections.Generic.SortedList%602&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.SortedList`2">
          <source>If the list is populated all at once from sorted data, <ph id="ph1">&lt;xref:System.Collections.Generic.SortedList%602&gt;</ph> is faster than <ph id="ph2">&lt;xref:System.Collections.Generic.SortedDictionary%602&gt;</ph>.</source>
          <target state="translated">Si la lista se rellena a la vez de datos ordenados, <ph id="ph1">&lt;xref:System.Collections.Generic.SortedList%602&gt;</ph> es más rápido que <ph id="ph2">&lt;xref:System.Collections.Generic.SortedDictionary%602&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.SortedList`2">
          <source>Another difference between the <ph id="ph1">&lt;xref:System.Collections.Generic.SortedDictionary%602&gt;</ph> and <ph id="ph2">&lt;xref:System.Collections.Generic.SortedList%602&gt;</ph> classes is that <ph id="ph3">&lt;xref:System.Collections.Generic.SortedList%602&gt;</ph> supports efficient indexed retrieval of keys and values through the collections returned by the <ph id="ph4">&lt;xref:System.Collections.Generic.SortedList%602.Keys%2A&gt;</ph> and <ph id="ph5">&lt;xref:System.Collections.Generic.SortedList%602.Values%2A&gt;</ph> properties.</source>
          <target state="translated">Otra diferencia entre la <ph id="ph1">&lt;xref:System.Collections.Generic.SortedDictionary%602&gt;</ph> y <ph id="ph2">&lt;xref:System.Collections.Generic.SortedList%602&gt;</ph> clases es que <ph id="ph3">&lt;xref:System.Collections.Generic.SortedList%602&gt;</ph> admite la recuperación indizada eficaz de claves y valores a través de las colecciones devueltas por la <ph id="ph4">&lt;xref:System.Collections.Generic.SortedList%602.Keys%2A&gt;</ph> y <ph id="ph5">&lt;xref:System.Collections.Generic.SortedList%602.Values%2A&gt;</ph> propiedades.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.SortedList`2">
          <source>It is not necessary to regenerate the lists when the properties are accessed, because the lists are just wrappers for the internal arrays of keys and values.</source>
          <target state="translated">No es necesario volver a generar las listas cuando se accede a las propiedades, porque las listas son simplemente contenedores para las matrices internas de claves y valores.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.SortedList`2">
          <source>The following code shows the use of the <ph id="ph1">&lt;xref:System.Collections.Generic.SortedList%602.Values%2A&gt;</ph> property for indexed retrieval of values from a sorted list of strings:</source>
          <target state="translated">El código siguiente muestra el uso de la <ph id="ph1">&lt;xref:System.Collections.Generic.SortedList%602.Values%2A&gt;</ph> propiedad para la recuperación indizada de valores de una lista ordenada de cadenas:</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.SortedList`2">
          <source><ph id="ph1">&lt;xref:System.Collections.Generic.SortedList%602&gt;</ph> is implemented as an array of key/value pairs, sorted by the key.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.Generic.SortedList%602&gt;</ph> se implementa como una matriz de pares de clave/valor, ordenados por la clave.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.SortedList`2">
          <source>Each element can be retrieved as a <ph id="ph1">&lt;xref:System.Collections.Generic.KeyValuePair%602&gt;</ph> object.</source>
          <target state="translated">Cada elemento se puede recuperar como un <ph id="ph1">&lt;xref:System.Collections.Generic.KeyValuePair%602&gt;</ph> objeto.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.SortedList`2">
          <source>Key objects must be immutable as long as they are used as keys in the <ph id="ph1">&lt;xref:System.Collections.Generic.SortedList%602&gt;</ph>.</source>
          <target state="translated">Objetos de clave deben ser inmutables siempre y cuando se usan como claves en el <ph id="ph1">&lt;xref:System.Collections.Generic.SortedList%602&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.SortedList`2">
          <source>Every key in a <ph id="ph1">&lt;xref:System.Collections.Generic.SortedList%602&gt;</ph> must be unique.</source>
          <target state="translated">Todas las claves de un <ph id="ph1">&lt;xref:System.Collections.Generic.SortedList%602&gt;</ph> deben ser únicos.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.SortedList`2">
          <source>A key cannot be <ph id="ph1">`null`</ph>, but a value can be, if the type of values in the list, <ph id="ph2">`TValue`</ph>, is a reference type.</source>
          <target state="translated">No puede ser una clave <ph id="ph1">`null`</ph>, pero un valor valor puede ser, si el tipo de valores en la lista, <ph id="ph2">`TValue`</ph>, es un tipo de referencia.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.SortedList`2">
          <source><ph id="ph1">&lt;xref:System.Collections.Generic.SortedList%602&gt;</ph> requires a comparer implementation to sort and to perform comparisons.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.Generic.SortedList%602&gt;</ph> requiere una implementación de comparador para ordenar y para realizar comparaciones.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.SortedList`2">
          <source>The default comparer <ph id="ph1">&lt;xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType&gt;</ph> checks whether the key type <ph id="ph2">`TKey`</ph> implements <ph id="ph3">&lt;xref:System.IComparable%601?displayProperty=nameWithType&gt;</ph> and uses that implementation, if available.</source>
          <target state="translated">El comparador predeterminado <ph id="ph1">&lt;xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType&gt;</ph> comprueba si la clave de tipo <ph id="ph2">`TKey`</ph> implementa <ph id="ph3">&lt;xref:System.IComparable%601?displayProperty=nameWithType&gt;</ph> y utiliza esa implementación, si está disponible.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.SortedList`2">
          <source>If not, <ph id="ph1">&lt;xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType&gt;</ph> checks whether the key type <ph id="ph2">`TKey`</ph> implements <ph id="ph3">&lt;xref:System.IComparable?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">Si no es así, <ph id="ph1">&lt;xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType&gt;</ph> comprueba si la clave de tipo <ph id="ph2">`TKey`</ph> implementa <ph id="ph3">&lt;xref:System.IComparable?displayProperty=nameWithType&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.SortedList`2">
          <source>If the key type <ph id="ph1">`TKey`</ph> does not implement either interface, you can specify a <ph id="ph2">&lt;xref:System.Collections.Generic.IComparer%601?displayProperty=nameWithType&gt;</ph> implementation in a constructor overload that accepts a <ph id="ph3">`comparer`</ph> parameter.</source>
          <target state="translated">Si el tipo de la clave <ph id="ph1">`TKey`</ph> no implementa ninguna de estas interfaces, puede especificar un <ph id="ph2">&lt;xref:System.Collections.Generic.IComparer%601?displayProperty=nameWithType&gt;</ph> implementación en una sobrecarga del constructor que acepta un <ph id="ph3">`comparer`</ph> parámetro.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.SortedList`2">
          <source>The capacity of a <ph id="ph1">&lt;xref:System.Collections.Generic.SortedList%602&gt;</ph> is the number of elements the <ph id="ph2">&lt;xref:System.Collections.Generic.SortedList%602&gt;</ph> can hold.</source>
          <target state="translated">La capacidad de un <ph id="ph1">&lt;xref:System.Collections.Generic.SortedList%602&gt;</ph> es el número de elementos de la <ph id="ph2">&lt;xref:System.Collections.Generic.SortedList%602&gt;</ph> puede contener.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.SortedList`2">
          <source>As elements are added to a <ph id="ph1">&lt;xref:System.Collections.Generic.SortedList%602&gt;</ph>, the capacity is automatically increased as required by reallocating the internal array.</source>
          <target state="translated">Cuando se agregan elementos a un <ph id="ph1">&lt;xref:System.Collections.Generic.SortedList%602&gt;</ph>, la capacidad aumenta automáticamente según sea necesario mediante la reasignación de la matriz interna.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.SortedList`2">
          <source>The capacity can be decreased by calling <ph id="ph1">&lt;xref:System.Collections.Generic.SortedList%602.TrimExcess%2A&gt;</ph> or by setting the <ph id="ph2">&lt;xref:System.Collections.Generic.SortedList%602.Capacity%2A&gt;</ph> property explicitly.</source>
          <target state="translated">La capacidad puede reducirse mediante una llamada a <ph id="ph1">&lt;xref:System.Collections.Generic.SortedList%602.TrimExcess%2A&gt;</ph> o estableciendo la <ph id="ph2">&lt;xref:System.Collections.Generic.SortedList%602.Capacity%2A&gt;</ph> propiedad explícitamente.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.SortedList`2">
          <source>Decreasing the capacity reallocates memory and copies all the elements in the <ph id="ph1">&lt;xref:System.Collections.Generic.SortedList%602&gt;</ph>.</source>
          <target state="translated">Al disminuir la capacidad se reasigna memoria y copia todos los elementos en el <ph id="ph1">&lt;xref:System.Collections.Generic.SortedList%602&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.SortedList`2">
          <source>For very large <ph id="ph1">&lt;xref:System.Collections.Generic.SortedList%602&gt;</ph> objects, you can increase the maximum capacity to 2 billion elements on a 64-bit system by setting the <ph id="ph2">`enabled`</ph> attribute of the  configuration element to <ph id="ph3">`true`</ph> in the run-time environment.</source>
          <target state="translated">Para un gran <ph id="ph1">&lt;xref:System.Collections.Generic.SortedList%602&gt;</ph> objetos, puede aumentar la capacidad máxima de 2 millones de elementos en un sistema de 64 bits estableciendo la <ph id="ph2">`enabled`</ph> atributo del elemento de configuración para <ph id="ph3">`true`</ph> en el entorno de tiempo de ejecución.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.SortedList`2">
          <source>The <ph id="ph1">`foreach`</ph> statement of the C# language (<ph id="ph2">`for each`</ph> in C++, <ph id="ph3">`For Each`</ph> in Visual Basic) returns an object of the type of the elements in the collection.</source>
          <target state="translated">El <ph id="ph1">`foreach`</ph> instrucción del lenguaje C# (<ph id="ph2">`for each`</ph> en C++, <ph id="ph3">`For Each`</ph> en Visual Basic) devuelve un objeto del tipo de los elementos de la colección.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.SortedList`2">
          <source>Since the elements of the <ph id="ph1">&lt;xref:System.Collections.Generic.SortedList%602&gt;</ph> are key/value pairs, the element type is not the type of the key or the type of the value.</source>
          <target state="translated">Desde los elementos de la <ph id="ph1">&lt;xref:System.Collections.Generic.SortedList%602&gt;</ph> son pares de clave/valor, el tipo de elemento no es el tipo de la clave o el tipo del valor.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.SortedList`2">
          <source>Instead, the element type is <ph id="ph1">&lt;xref:System.Collections.Generic.KeyValuePair%602&gt;</ph>.</source>
          <target state="translated">En su lugar, el tipo de elemento es <ph id="ph1">&lt;xref:System.Collections.Generic.KeyValuePair%602&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.SortedList`2">
          <source>For example:</source>
          <target state="translated">Por ejemplo:</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.SortedList`2">
          <source>The <ph id="ph1">`foreach`</ph> statement is a wrapper around the enumerator, which only allows reading from, not writing to, the collection.</source>
          <target state="translated">El <ph id="ph1">`foreach`</ph> instrucción es un contenedor del enumerador, que sólo permite la lectura de no escritura a la colección.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.SortedList`2">
          <source>The following code example creates an empty <ph id="ph1">&lt;xref:System.Collections.Generic.SortedList%602&gt;</ph> of strings with string keys and uses the <ph id="ph2">&lt;xref:System.Collections.Generic.SortedList%602.Add%2A&gt;</ph> method to add some elements.</source>
          <target state="translated">En el ejemplo de código siguiente se crea vacío <ph id="ph1">&lt;xref:System.Collections.Generic.SortedList%602&gt;</ph> de cadenas con claves de cadena y usa el <ph id="ph2">&lt;xref:System.Collections.Generic.SortedList%602.Add%2A&gt;</ph> método para agregar algunos elementos.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.SortedList`2">
          <source>The example demonstrates that the <ph id="ph1">&lt;xref:System.Collections.Generic.SortedList%602.Add%2A&gt;</ph> method throws an <ph id="ph2">&lt;xref:System.ArgumentException&gt;</ph> when attempting to add a duplicate key.</source>
          <target state="translated">El ejemplo muestra que la <ph id="ph1">&lt;xref:System.Collections.Generic.SortedList%602.Add%2A&gt;</ph> método produce un <ph id="ph2">&lt;xref:System.ArgumentException&gt;</ph> al intentar agregar una clave duplicada.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.SortedList`2">
          <source>The example uses the <ph id="ph1">&lt;xref:System.Collections.Generic.SortedList%602.Item%2A&gt;</ph> property (the indexer in C#) to retrieve values, demonstrating that a <ph id="ph2">&lt;xref:System.Collections.Generic.KeyNotFoundException&gt;</ph> is thrown when a requested key is not present, and showing that the value associated with a key can be replaced.</source>
          <target state="translated">El ejemplo se utiliza la <ph id="ph1">&lt;xref:System.Collections.Generic.SortedList%602.Item%2A&gt;</ph> propiedad (el indizador en C#) para recuperar valores, lo que indica que un <ph id="ph2">&lt;xref:System.Collections.Generic.KeyNotFoundException&gt;</ph> se produce cuando una clave solicitada no está presente y que muestra que el valor asociado a una clave se puede reemplazar.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.SortedList`2">
          <source>The example shows how to use the <ph id="ph1">&lt;xref:System.Collections.Generic.SortedList%602.TryGetValue%2A&gt;</ph> method as a more efficient way to retrieve values if a program often must try key values that are not in the sorted list, and it shows how to use the <ph id="ph2">&lt;xref:System.Collections.Generic.SortedList%602.ContainsKey%2A&gt;</ph> method to test whether a key exists before calling the <ph id="ph3">&lt;xref:System.Collections.Generic.SortedList%602.Add%2A&gt;</ph> method.</source>
          <target state="translated">En el ejemplo se muestra cómo utilizar el <ph id="ph1">&lt;xref:System.Collections.Generic.SortedList%602.TryGetValue%2A&gt;</ph> método como una forma más eficaz para recuperar valores si un programa debe probar con frecuencia valores de clave que no están en la lista ordenada, y muestra cómo utilizar el <ph id="ph2">&lt;xref:System.Collections.Generic.SortedList%602.ContainsKey%2A&gt;</ph> método para comprobar si existe una clave antes de llamar a la <ph id="ph3">&lt;xref:System.Collections.Generic.SortedList%602.Add%2A&gt;</ph> método.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.SortedList`2">
          <source>The example shows how to enumerate the keys and values in the sorted list and how to enumerate the keys and values alone using the <ph id="ph1">&lt;xref:System.Collections.Generic.SortedList%602.Keys%2A&gt;</ph> property and the <ph id="ph2">&lt;xref:System.Collections.Generic.SortedList%602.Values%2A&gt;</ph> property.</source>
          <target state="translated">En el ejemplo se muestra cómo enumerar las claves y valores en la lista ordenada y cómo enumerar las claves y valores por sí solo mediante la <ph id="ph1">&lt;xref:System.Collections.Generic.SortedList%602.Keys%2A&gt;</ph> propiedad y el <ph id="ph2">&lt;xref:System.Collections.Generic.SortedList%602.Values%2A&gt;</ph> propiedad.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.SortedList`2">
          <source>Finally, the example demonstrates the <ph id="ph1">&lt;xref:System.Collections.Generic.SortedList%602.Remove%2A&gt;</ph> method.</source>
          <target state="translated">Por último, el ejemplo se muestra la <ph id="ph1">&lt;xref:System.Collections.Generic.SortedList%602.Remove%2A&gt;</ph> método.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.SortedList`2">
          <source>Public static (<ph id="ph1">&lt;see langword="Shared" /&gt;</ph> in Visual Basic) members of this type are thread safe.</source>
          <target state="translated">Estático público (<ph id="ph1">&lt;see langword="Shared" /&gt;</ph> en Visual Basic) miembros de este tipo son seguros para subprocesos.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.SortedList`2">
          <source>Any instance members are not guaranteed to be thread safe.</source>
          <target state="translated">No se garantiza que los miembros de instancias sean seguros para la ejecución de subprocesos.</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.SortedList`2">
          <source>A <ph id="ph1">&lt;see cref="T:System.Collections.Generic.SortedList`2" /&gt;</ph> can support multiple readers concurrently, as long as the collection is not modified.</source>
          <target state="translated">Un <ph id="ph1">&lt;see cref="T:System.Collections.Generic.SortedList`2" /&gt;</ph> puede admitir varios sistemas de lectura al mismo tiempo, siempre y cuando no se modifica la colección.</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.SortedList`2">
          <source>Even so, enumerating through a collection is intrinsically not a thread-safe procedure.</source>
          <target state="translated">Aun así, enumerar una colección no es intrínsecamente un procedimiento seguro para subprocesos.</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.SortedList`2">
          <source>To guarantee thread safety during enumeration, you can lock the collection during the entire enumeration.</source>
          <target state="translated">A fin de garantizar la seguridad de los subprocesos, se puede bloquear la colección durante toda la enumeración.</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.SortedList`2">
          <source>To allow the collection to be accessed by multiple threads for reading and writing, you must implement your own synchronization.</source>
          <target state="translated">Para permitir que varios subprocesos obtengan acceso de lectura y escritura a la colección, debe implementar su propia sincronización.</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" uid="T:System.Collections.Generic.SortedList`2">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Collections.Generic.SortedList`2" /&gt;</ph> class.</source>
          <target state="translated">Inicializa una nueva instancia de la clase <ph id="ph1">&lt;see cref="T:System.Collections.Generic.SortedList`2" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.SortedList`2.#ctor">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Collections.Generic.SortedList`2" /&gt;</ph> class that is empty, has the default initial capacity, and uses the default <ph id="ph2">&lt;see cref="T:System.Collections.Generic.IComparer`1" /&gt;</ph>.</source>
          <target state="translated">Inicializa una nueva instancia de la clase <ph id="ph1">&lt;see cref="T:System.Collections.Generic.SortedList`2" /&gt;</ph> que está vacía, tiene la capacidad inicial predeterminada y utiliza el <ph id="ph2">&lt;see cref="T:System.Collections.Generic.IComparer`1" /&gt;</ph> predeterminado.</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.SortedList`2.#ctor">
          <source>Every key in a <ph id="ph1">&lt;xref:System.Collections.Generic.SortedList%602&gt;</ph> must be unique according to the default comparer.</source>
          <target state="translated">Todas las claves de una <ph id="ph1">&lt;xref:System.Collections.Generic.SortedList%602&gt;</ph> debe ser única según el comparador predeterminado.</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.SortedList`2.#ctor">
          <source>This constructor uses the default value for the initial capacity of the <ph id="ph1">&lt;xref:System.Collections.Generic.SortedList%602&gt;</ph>.</source>
          <target state="translated">Este constructor utiliza el valor predeterminado para la capacidad inicial de la <ph id="ph1">&lt;xref:System.Collections.Generic.SortedList%602&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.SortedList`2.#ctor">
          <source>To set the initial capacity, use the <ph id="ph1">&lt;xref:System.Collections.Generic.SortedList%602.%23ctor%28System.Int32%29&gt;</ph> constructor.</source>
          <target state="translated">Para establecer la capacidad inicial, use el <ph id="ph1">&lt;xref:System.Collections.Generic.SortedList%602.%23ctor%28System.Int32%29&gt;</ph> constructor.</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.SortedList`2.#ctor">
          <source>If the final size of the collection can be estimated, specifying the initial capacity eliminates the need to perform a number of resizing operations while adding elements to the <ph id="ph1">&lt;xref:System.Collections.Generic.SortedList%602&gt;</ph>.</source>
          <target state="translated">Si se puede estimar el tamaño final de la colección, al especificar la capacidad inicial elimina la necesidad de realizar una serie de operaciones de cambio de tamaño al agregar elementos a la <ph id="ph1">&lt;xref:System.Collections.Generic.SortedList%602&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.SortedList`2.#ctor">
          <source>This constructor uses the default comparer for <ph id="ph1">`TKey`</ph>.</source>
          <target state="translated">Este constructor utiliza el comparador predeterminado para <ph id="ph1">`TKey`</ph>.</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.SortedList`2.#ctor">
          <source>To specify a comparer, use the <ph id="ph1">&lt;xref:System.Collections.Generic.SortedList%602.%23ctor%28System.Collections.Generic.IComparer%7B%600%7D%29&gt;</ph> constructor.</source>
          <target state="translated">Para especificar un comparador, utilice el <ph id="ph1">&lt;xref:System.Collections.Generic.SortedList%602.%23ctor%28System.Collections.Generic.IComparer%7B%600%7D%29&gt;</ph> constructor.</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.SortedList`2.#ctor">
          <source>The default comparer <ph id="ph1">&lt;xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType&gt;</ph> checks whether the key type <ph id="ph2">`TKey`</ph> implements <ph id="ph3">&lt;xref:System.IComparable%601?displayProperty=nameWithType&gt;</ph> and uses that implementation, if available.</source>
          <target state="translated">El comparador predeterminado <ph id="ph1">&lt;xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType&gt;</ph> comprueba si la clave de tipo <ph id="ph2">`TKey`</ph> implementa <ph id="ph3">&lt;xref:System.IComparable%601?displayProperty=nameWithType&gt;</ph> y utiliza esa implementación, si está disponible.</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.SortedList`2.#ctor">
          <source>If not, <ph id="ph1">&lt;xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType&gt;</ph> checks whether the key type <ph id="ph2">`TKey`</ph> implements <ph id="ph3">&lt;xref:System.IComparable?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">Si no es así, <ph id="ph1">&lt;xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType&gt;</ph> comprueba si la clave de tipo <ph id="ph2">`TKey`</ph> implementa <ph id="ph3">&lt;xref:System.IComparable?displayProperty=nameWithType&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.SortedList`2.#ctor">
          <source>If the key type <ph id="ph1">`TKey`</ph> does not implement either interface, you can specify a <ph id="ph2">&lt;xref:System.Collections.Generic.IComparer%601?displayProperty=nameWithType&gt;</ph> implementation in a constructor overload that accepts a <ph id="ph3">`comparer`</ph> parameter.</source>
          <target state="translated">Si el tipo de la clave <ph id="ph1">`TKey`</ph> no implementa ninguna de estas interfaces, puede especificar un <ph id="ph2">&lt;xref:System.Collections.Generic.IComparer%601?displayProperty=nameWithType&gt;</ph> implementación en una sobrecarga del constructor que acepta un <ph id="ph3">`comparer`</ph> parámetro.</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.SortedList`2.#ctor">
          <source>This constructor is an O(1) operation.</source>
          <target state="translated">Este constructor es una operación o (1).</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.SortedList`2.#ctor">
          <source>The following code example creates an empty <ph id="ph1">&lt;xref:System.Collections.Generic.SortedList%602&gt;</ph> of strings with string keys and uses the <ph id="ph2">&lt;xref:System.Collections.Generic.SortedList%602.Add%2A&gt;</ph> method to add some elements.</source>
          <target state="translated">En el ejemplo de código siguiente se crea vacío <ph id="ph1">&lt;xref:System.Collections.Generic.SortedList%602&gt;</ph> de cadenas con claves de cadena y usa el <ph id="ph2">&lt;xref:System.Collections.Generic.SortedList%602.Add%2A&gt;</ph> método para agregar algunos elementos.</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.SortedList`2.#ctor">
          <source>The example demonstrates that the <ph id="ph1">&lt;xref:System.Collections.Generic.SortedList%602.Add%2A&gt;</ph> method throws an <ph id="ph2">&lt;xref:System.ArgumentException&gt;</ph> when attempting to add a duplicate key.</source>
          <target state="translated">El ejemplo muestra que la <ph id="ph1">&lt;xref:System.Collections.Generic.SortedList%602.Add%2A&gt;</ph> método produce un <ph id="ph2">&lt;xref:System.ArgumentException&gt;</ph> al intentar agregar una clave duplicada.</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.SortedList`2.#ctor">
          <source>This code example is part of a larger example provided for the <ph id="ph1">&lt;xref:System.Collections.Generic.SortedList%602&gt;</ph> class.</source>
          <target state="translated">Este ejemplo de código forma parte de un ejemplo mayor proporcionado para el <ph id="ph1">&lt;xref:System.Collections.Generic.SortedList%602&gt;</ph> clase.</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.SortedList`2.#ctor(System.Collections.Generic.IComparer{`0})">
          <source>The <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IComparer`1" /&gt;</ph> implementation to use when comparing keys.</source>
          <target state="translated">Implementación de <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IComparer`1" /&gt;</ph> que se va a usar al comparar claves.</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.SortedList`2.#ctor(System.Collections.Generic.IComparer{`0})">
          <source>-or-</source>
          <target state="translated">O bien</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.SortedList`2.#ctor(System.Collections.Generic.IComparer{`0})">
          <source><ph id="ph1">&lt;see langword="null" /&gt;</ph> to use the default <ph id="ph2">&lt;see cref="T:System.Collections.Generic.Comparer`1" /&gt;</ph> for the type of the key.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="null" /&gt;</ph> para utilizar el objeto <ph id="ph2">&lt;see cref="T:System.Collections.Generic.Comparer`1" /&gt;</ph> predeterminado para el tipo de la clave.</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.SortedList`2.#ctor(System.Collections.Generic.IComparer{`0})">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Collections.Generic.SortedList`2" /&gt;</ph> class that is empty, has the default initial capacity, and uses the specified <ph id="ph2">&lt;see cref="T:System.Collections.Generic.IComparer`1" /&gt;</ph>.</source>
          <target state="translated">Inicializa una nueva instancia de la clase <ph id="ph1">&lt;see cref="T:System.Collections.Generic.SortedList`2" /&gt;</ph> que está vacía, tiene la capacidad inicial predeterminada y utiliza la interfaz <ph id="ph2">&lt;see cref="T:System.Collections.Generic.IComparer`1" /&gt;</ph> especificada.</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.SortedList`2.#ctor(System.Collections.Generic.IComparer{`0})">
          <source>Every key in a <ph id="ph1">&lt;xref:System.Collections.Generic.SortedList%602&gt;</ph> must be unique according to the specified comparer.</source>
          <target state="translated">Todas las claves de una <ph id="ph1">&lt;xref:System.Collections.Generic.SortedList%602&gt;</ph> debe ser única según el comparador especificado.</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.SortedList`2.#ctor(System.Collections.Generic.IComparer{`0})">
          <source>This constructor uses the default value for the initial capacity of the <ph id="ph1">&lt;xref:System.Collections.Generic.SortedList%602&gt;</ph>.</source>
          <target state="translated">Este constructor utiliza el valor predeterminado para la capacidad inicial de la <ph id="ph1">&lt;xref:System.Collections.Generic.SortedList%602&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.SortedList`2.#ctor(System.Collections.Generic.IComparer{`0})">
          <source>To set the initial capacity, use the <ph id="ph1">&lt;xref:System.Collections.Generic.SortedList%602.%23ctor%28System.Int32%2CSystem.Collections.Generic.IComparer%7B%600%7D%29&gt;</ph> constructor.</source>
          <target state="translated">Para establecer la capacidad inicial, use el <ph id="ph1">&lt;xref:System.Collections.Generic.SortedList%602.%23ctor%28System.Int32%2CSystem.Collections.Generic.IComparer%7B%600%7D%29&gt;</ph> constructor.</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.SortedList`2.#ctor(System.Collections.Generic.IComparer{`0})">
          <source>If the final size of the collection can be estimated, specifying the initial capacity eliminates the need to perform a number of resizing operations while adding elements to the <ph id="ph1">&lt;xref:System.Collections.Generic.SortedList%602&gt;</ph>.</source>
          <target state="translated">Si se puede estimar el tamaño final de la colección, al especificar la capacidad inicial elimina la necesidad de realizar una serie de operaciones de cambio de tamaño al agregar elementos a la <ph id="ph1">&lt;xref:System.Collections.Generic.SortedList%602&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.SortedList`2.#ctor(System.Collections.Generic.IComparer{`0})">
          <source>This constructor is an O(1) operation.</source>
          <target state="translated">Este constructor es una operación o (1).</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.SortedList`2.#ctor(System.Collections.Generic.IComparer{`0})">
          <source>The following code example creates a sorted list with a case-insensitive comparer for the current culture.</source>
          <target state="translated">En el ejemplo de código siguiente se crea una lista ordenada con un comparador entre mayúsculas y minúsculas para la referencia cultural actual.</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.SortedList`2.#ctor(System.Collections.Generic.IComparer{`0})">
          <source>The example adds four elements, some with lower-case keys and some with upper-case keys.</source>
          <target state="translated">El ejemplo agrega cuatro elementos, algunos con claves en minúsculas y otros con claves en mayúsculas.</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.SortedList`2.#ctor(System.Collections.Generic.IComparer{`0})">
          <source>The example then attempts to add an element with a key that differs from an existing key only by case, catches the resulting exception, and displays an error message.</source>
          <target state="translated">El ejemplo se intenta agregar un elemento con una clave que solo se diferencia de una clave existente por caso, detecta la excepción resultante y muestra un mensaje de error.</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.SortedList`2.#ctor(System.Collections.Generic.IComparer{`0})">
          <source>Finally, the example displays the elements in case-insensitive sort order.</source>
          <target state="translated">Por último, el ejemplo muestra los elementos en el criterio de ordenación entre mayúsculas y minúsculas.</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.SortedList`2.#ctor(System.Collections.Generic.IDictionary{`0,`1})">
          <source>The <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IDictionary`2" /&gt;</ph> whose elements are copied to the new <ph id="ph2">&lt;see cref="T:System.Collections.Generic.SortedList`2" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Collections.Generic.IDictionary`2" /&gt;</ph> cuyos elementos se copian en el nuevo <ph id="ph2">&lt;see cref="T:System.Collections.Generic.SortedList`2" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.SortedList`2.#ctor(System.Collections.Generic.IDictionary{`0,`1})">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Collections.Generic.SortedList`2" /&gt;</ph> class that contains elements copied from the specified <ph id="ph2">&lt;see cref="T:System.Collections.Generic.IDictionary`2" /&gt;</ph>, has sufficient capacity to accommodate the number of elements copied, and uses the default <ph id="ph3">&lt;see cref="T:System.Collections.Generic.IComparer`1" /&gt;</ph>.</source>
          <target state="translated">Inicializa una nueva instancia de la clase <ph id="ph1">&lt;see cref="T:System.Collections.Generic.SortedList`2" /&gt;</ph> que contiene elementos copiados del <ph id="ph2">&lt;see cref="T:System.Collections.Generic.IDictionary`2" /&gt;</ph> especificado, tiene una capacidad suficiente para alojar el número de elementos copiados y utiliza el <ph id="ph3">&lt;see cref="T:System.Collections.Generic.IComparer`1" /&gt;</ph> predeterminado.</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.SortedList`2.#ctor(System.Collections.Generic.IDictionary{`0,`1})">
          <source>Every key in a <ph id="ph1">&lt;xref:System.Collections.Generic.SortedList%602&gt;</ph> must be unique according to the default comparer; likewise, every key in the source <ph id="ph2">`dictionary`</ph> must also be unique according to the default comparer.</source>
          <target state="translated">Todas las claves de un <ph id="ph1">&lt;xref:System.Collections.Generic.SortedList%602&gt;</ph> debe ser única según el valor predeterminado comparador; Asimismo, todas las claves en el origen de <ph id="ph2">`dictionary`</ph> también debe ser única según el comparador predeterminado.</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.SortedList`2.#ctor(System.Collections.Generic.IDictionary{`0,`1})">
          <source>The capacity of the new <ph id="ph1">&lt;xref:System.Collections.Generic.SortedList%602&gt;</ph> is set to the number of elements in <ph id="ph2">`dictionary`</ph>, so no resizing takes place while the list is being populated.</source>
          <target state="translated">La capacidad de la nueva <ph id="ph1">&lt;xref:System.Collections.Generic.SortedList%602&gt;</ph> se establece en el número de elementos de <ph id="ph2">`dictionary`</ph>, por lo que ningún cambio de tamaño tiene lugar mientras se está llenando la lista.</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.SortedList`2.#ctor(System.Collections.Generic.IDictionary{`0,`1})">
          <source>This constructor uses the default comparer for <ph id="ph1">`TKey`</ph>.</source>
          <target state="translated">Este constructor utiliza el comparador predeterminado para <ph id="ph1">`TKey`</ph>.</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.SortedList`2.#ctor(System.Collections.Generic.IDictionary{`0,`1})">
          <source>To specify a comparer, use the <ph id="ph1">&lt;xref:System.Collections.Generic.SortedList%602.%23ctor%28System.Collections.Generic.IDictionary%7B%600%2C%601%7D%2CSystem.Collections.Generic.IComparer%7B%600%7D%29&gt;</ph> constructor.</source>
          <target state="translated">Para especificar un comparador, utilice el <ph id="ph1">&lt;xref:System.Collections.Generic.SortedList%602.%23ctor%28System.Collections.Generic.IDictionary%7B%600%2C%601%7D%2CSystem.Collections.Generic.IComparer%7B%600%7D%29&gt;</ph> constructor.</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.SortedList`2.#ctor(System.Collections.Generic.IDictionary{`0,`1})">
          <source>The default comparer <ph id="ph1">&lt;xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType&gt;</ph> checks whether the key type <ph id="ph2">`TKey`</ph> implements <ph id="ph3">&lt;xref:System.IComparable%601?displayProperty=nameWithType&gt;</ph> and uses that implementation, if available.</source>
          <target state="translated">El comparador predeterminado <ph id="ph1">&lt;xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType&gt;</ph> comprueba si la clave de tipo <ph id="ph2">`TKey`</ph> implementa <ph id="ph3">&lt;xref:System.IComparable%601?displayProperty=nameWithType&gt;</ph> y utiliza esa implementación, si está disponible.</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.SortedList`2.#ctor(System.Collections.Generic.IDictionary{`0,`1})">
          <source>If not, <ph id="ph1">&lt;xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType&gt;</ph> checks whether the key type <ph id="ph2">`TKey`</ph> implements <ph id="ph3">&lt;xref:System.IComparable?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">Si no es así, <ph id="ph1">&lt;xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType&gt;</ph> comprueba si la clave de tipo <ph id="ph2">`TKey`</ph> implementa <ph id="ph3">&lt;xref:System.IComparable?displayProperty=nameWithType&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.SortedList`2.#ctor(System.Collections.Generic.IDictionary{`0,`1})">
          <source>If the key type <ph id="ph1">`TKey`</ph> does not implement either interface, you can specify a <ph id="ph2">&lt;xref:System.Collections.Generic.IComparer%601?displayProperty=nameWithType&gt;</ph> implementation in a constructor overload that accepts a <ph id="ph3">`comparer`</ph> parameter.</source>
          <target state="translated">Si el tipo de la clave <ph id="ph1">`TKey`</ph> no implementa ninguna de estas interfaces, puede especificar un <ph id="ph2">&lt;xref:System.Collections.Generic.IComparer%601?displayProperty=nameWithType&gt;</ph> implementación en una sobrecarga del constructor que acepta un <ph id="ph3">`comparer`</ph> parámetro.</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.SortedList`2.#ctor(System.Collections.Generic.IDictionary{`0,`1})">
          <source>If the data in <ph id="ph1">`dictionary`</ph> are sorted, this constructor is an O(<ph id="ph2">`n`</ph>) operation, where <ph id="ph3">`n`</ph> is the number of elements in <ph id="ph4">`dictionary`</ph>.</source>
          <target state="translated">Si los datos de <ph id="ph1">`dictionary`</ph> están ordenados, este constructor es una O (<ph id="ph2">`n`</ph>) operación, donde <ph id="ph3">`n`</ph> es el número de elementos de <ph id="ph4">`dictionary`</ph>.</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.SortedList`2.#ctor(System.Collections.Generic.IDictionary{`0,`1})">
          <source>Otherwise it is an O(<ph id="ph1">`n`</ph><ph id="ph2">*</ph><ph id="ph3">`n`</ph>) operation.</source>
          <target state="translated">En caso contrario, es una O (<ph id="ph1">`n`</ph><ph id="ph2">*</ph><ph id="ph3">`n`</ph>) operación.</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.SortedList`2.#ctor(System.Collections.Generic.IDictionary{`0,`1})">
          <source>The following code example shows how to use <ph id="ph1">&lt;xref:System.Collections.Generic.SortedList%602&gt;</ph> to create a sorted copy of the information in a <ph id="ph2">&lt;xref:System.Collections.Generic.Dictionary%602&gt;</ph>, by passing the <ph id="ph3">&lt;xref:System.Collections.Generic.Dictionary%602&gt;</ph> to the <ph id="ph4">&lt;xref:System.Collections.Generic.SortedList%602.%23ctor%28System.Collections.Generic.IDictionary%7B%600%2C%601%7D%29&gt;</ph> constructor.</source>
          <target state="translated">En el ejemplo de código siguiente se muestra cómo utilizar <ph id="ph1">&lt;xref:System.Collections.Generic.SortedList%602&gt;</ph> para crear una copia ordenada de la información de un <ph id="ph2">&lt;xref:System.Collections.Generic.Dictionary%602&gt;</ph>, pasando el <ph id="ph3">&lt;xref:System.Collections.Generic.Dictionary%602&gt;</ph> a la <ph id="ph4">&lt;xref:System.Collections.Generic.SortedList%602.%23ctor%28System.Collections.Generic.IDictionary%7B%600%2C%601%7D%29&gt;</ph> constructor.</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.SortedList`2.#ctor(System.Collections.Generic.IDictionary{`0,`1})">
          <source><ph id="ph1">&lt;paramref name="dictionary" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="dictionary" /&gt;</ph> es <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.SortedList`2.#ctor(System.Collections.Generic.IDictionary{`0,`1})">
          <source><ph id="ph1">&lt;paramref name="dictionary" /&gt;</ph> contains one or more duplicate keys.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="dictionary" /&gt;</ph> contiene una o varias claves duplicadas.</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.SortedList`2.#ctor(System.Int32)">
          <source>The initial number of elements that the <ph id="ph1">&lt;see cref="T:System.Collections.Generic.SortedList`2" /&gt;</ph> can contain.</source>
          <target state="translated">Número inicial de elementos que puede contener la colección <ph id="ph1">&lt;see cref="T:System.Collections.Generic.SortedList`2" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.SortedList`2.#ctor(System.Int32)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Collections.Generic.SortedList`2" /&gt;</ph> class that is empty, has the specified initial capacity, and uses the default <ph id="ph2">&lt;see cref="T:System.Collections.Generic.IComparer`1" /&gt;</ph>.</source>
          <target state="translated">Inicializa una nueva instancia de la clase <ph id="ph1">&lt;see cref="T:System.Collections.Generic.SortedList`2" /&gt;</ph> que está vacía, tiene la capacidad inicial especificada y utiliza el <ph id="ph2">&lt;see cref="T:System.Collections.Generic.IComparer`1" /&gt;</ph> predeterminado.</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.SortedList`2.#ctor(System.Int32)">
          <source>Every key in a <ph id="ph1">&lt;xref:System.Collections.Generic.SortedList%602&gt;</ph> must be unique according to the default comparer.</source>
          <target state="translated">Todas las claves de una <ph id="ph1">&lt;xref:System.Collections.Generic.SortedList%602&gt;</ph> debe ser única según el comparador predeterminado.</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.SortedList`2.#ctor(System.Int32)">
          <source>The capacity of a <ph id="ph1">&lt;xref:System.Collections.Generic.SortedList%602&gt;</ph> is the number of elements that the <ph id="ph2">&lt;xref:System.Collections.Generic.SortedList%602&gt;</ph> can hold before resizing.</source>
          <target state="translated">La capacidad de un <ph id="ph1">&lt;xref:System.Collections.Generic.SortedList%602&gt;</ph> es el número de elementos que la <ph id="ph2">&lt;xref:System.Collections.Generic.SortedList%602&gt;</ph> puede contener antes de cambiar el tamaño.</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.SortedList`2.#ctor(System.Int32)">
          <source>As elements are added to a <ph id="ph1">&lt;xref:System.Collections.Generic.SortedList%602&gt;</ph>, the capacity is automatically increased as required by reallocating the internal array.</source>
          <target state="translated">Cuando se agregan elementos a un <ph id="ph1">&lt;xref:System.Collections.Generic.SortedList%602&gt;</ph>, la capacidad aumenta automáticamente según sea necesario mediante la reasignación de la matriz interna.</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.SortedList`2.#ctor(System.Int32)">
          <source>If the size of the collection can be estimated, specifying the initial capacity eliminates the need to perform a number of resizing operations while adding elements to the <ph id="ph1">&lt;xref:System.Collections.Generic.SortedList%602&gt;</ph>.</source>
          <target state="translated">Si se puede estimar el tamaño de la colección, al especificar la capacidad inicial elimina la necesidad de realizar una serie de operaciones de cambio de tamaño al agregar elementos a la <ph id="ph1">&lt;xref:System.Collections.Generic.SortedList%602&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.SortedList`2.#ctor(System.Int32)">
          <source>The capacity can be decreased by calling <ph id="ph1">&lt;xref:System.Collections.Generic.SortedList%602.TrimExcess%2A&gt;</ph> or by setting the <ph id="ph2">&lt;xref:System.Collections.Generic.SortedList%602.Capacity%2A&gt;</ph> property explicitly.</source>
          <target state="translated">La capacidad puede reducirse mediante una llamada a <ph id="ph1">&lt;xref:System.Collections.Generic.SortedList%602.TrimExcess%2A&gt;</ph> o estableciendo la <ph id="ph2">&lt;xref:System.Collections.Generic.SortedList%602.Capacity%2A&gt;</ph> propiedad explícitamente.</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.SortedList`2.#ctor(System.Int32)">
          <source>Decreasing the capacity reallocates memory and copies all the elements in the <ph id="ph1">&lt;xref:System.Collections.Generic.SortedList%602&gt;</ph>.</source>
          <target state="translated">Al disminuir la capacidad se reasigna memoria y copia todos los elementos en el <ph id="ph1">&lt;xref:System.Collections.Generic.SortedList%602&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.SortedList`2.#ctor(System.Int32)">
          <source>This constructor uses the default comparer for <ph id="ph1">`TKey`</ph>.</source>
          <target state="translated">Este constructor utiliza el comparador predeterminado para <ph id="ph1">`TKey`</ph>.</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.SortedList`2.#ctor(System.Int32)">
          <source>To specify a comparer, use the <ph id="ph1">&lt;xref:System.Collections.Generic.SortedList%602.%23ctor%28System.Int32%2CSystem.Collections.Generic.IComparer%7B%600%7D%29&gt;</ph> constructor.</source>
          <target state="translated">Para especificar un comparador, utilice el <ph id="ph1">&lt;xref:System.Collections.Generic.SortedList%602.%23ctor%28System.Int32%2CSystem.Collections.Generic.IComparer%7B%600%7D%29&gt;</ph> constructor.</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.SortedList`2.#ctor(System.Int32)">
          <source>The default comparer <ph id="ph1">&lt;xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType&gt;</ph> checks whether the key type <ph id="ph2">`TKey`</ph> implements <ph id="ph3">&lt;xref:System.IComparable%601?displayProperty=nameWithType&gt;</ph> and uses that implementation, if available.</source>
          <target state="translated">El comparador predeterminado <ph id="ph1">&lt;xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType&gt;</ph> comprueba si la clave de tipo <ph id="ph2">`TKey`</ph> implementa <ph id="ph3">&lt;xref:System.IComparable%601?displayProperty=nameWithType&gt;</ph> y utiliza esa implementación, si está disponible.</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.SortedList`2.#ctor(System.Int32)">
          <source>If not, <ph id="ph1">&lt;xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType&gt;</ph> checks whether the key type <ph id="ph2">`TKey`</ph> implements <ph id="ph3">&lt;xref:System.IComparable?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">Si no es así, <ph id="ph1">&lt;xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType&gt;</ph> comprueba si la clave de tipo <ph id="ph2">`TKey`</ph> implementa <ph id="ph3">&lt;xref:System.IComparable?displayProperty=nameWithType&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.SortedList`2.#ctor(System.Int32)">
          <source>If the key type <ph id="ph1">`TKey`</ph> does not implement either interface, you can specify a <ph id="ph2">&lt;xref:System.Collections.Generic.IComparer%601?displayProperty=nameWithType&gt;</ph> implementation in a constructor overload that accepts a <ph id="ph3">`comparer`</ph> parameter.</source>
          <target state="translated">Si el tipo de la clave <ph id="ph1">`TKey`</ph> no implementa ninguna de estas interfaces, puede especificar un <ph id="ph2">&lt;xref:System.Collections.Generic.IComparer%601?displayProperty=nameWithType&gt;</ph> implementación en una sobrecarga del constructor que acepta un <ph id="ph3">`comparer`</ph> parámetro.</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.SortedList`2.#ctor(System.Int32)">
          <source>This constructor is an O(<ph id="ph1">`n`</ph>) operation, where <ph id="ph2">`n`</ph> is <ph id="ph3">`capacity`</ph>.</source>
          <target state="translated">Este constructor es una O (<ph id="ph1">`n`</ph>) operación, donde <ph id="ph2">`n`</ph> es <ph id="ph3">`capacity`</ph>.</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.SortedList`2.#ctor(System.Int32)">
          <source>The following code example creates a sorted list with an initial capacity of 4 and populates it with 4 entries.</source>
          <target state="translated">En el ejemplo de código siguiente se crea una lista ordenada con una capacidad inicial de 4 y lo rellena con 4 entradas.</target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.SortedList`2.#ctor(System.Int32)">
          <source><ph id="ph1">&lt;paramref name="capacity" /&gt;</ph> is less than zero.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="capacity" /&gt;</ph> es menor que cero.</target>       </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.SortedList`2.#ctor(System.Collections.Generic.IDictionary{`0,`1},System.Collections.Generic.IComparer{`0})">
          <source>The <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IDictionary`2" /&gt;</ph> whose elements are copied to the new <ph id="ph2">&lt;see cref="T:System.Collections.Generic.SortedList`2" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Collections.Generic.IDictionary`2" /&gt;</ph> cuyos elementos se copian en el nuevo <ph id="ph2">&lt;see cref="T:System.Collections.Generic.SortedList`2" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.SortedList`2.#ctor(System.Collections.Generic.IDictionary{`0,`1},System.Collections.Generic.IComparer{`0})">
          <source>The <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IComparer`1" /&gt;</ph> implementation to use when comparing keys.</source>
          <target state="translated">Implementación de <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IComparer`1" /&gt;</ph> que se va a usar al comparar claves.</target>       </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.SortedList`2.#ctor(System.Collections.Generic.IDictionary{`0,`1},System.Collections.Generic.IComparer{`0})">
          <source>-or-</source>
          <target state="translated">O bien</target>       </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.SortedList`2.#ctor(System.Collections.Generic.IDictionary{`0,`1},System.Collections.Generic.IComparer{`0})">
          <source><ph id="ph1">&lt;see langword="null" /&gt;</ph> to use the default <ph id="ph2">&lt;see cref="T:System.Collections.Generic.Comparer`1" /&gt;</ph> for the type of the key.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="null" /&gt;</ph> para utilizar el objeto <ph id="ph2">&lt;see cref="T:System.Collections.Generic.Comparer`1" /&gt;</ph> predeterminado para el tipo de la clave.</target>       </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.SortedList`2.#ctor(System.Collections.Generic.IDictionary{`0,`1},System.Collections.Generic.IComparer{`0})">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Collections.Generic.SortedList`2" /&gt;</ph> class that contains elements copied from the specified <ph id="ph2">&lt;see cref="T:System.Collections.Generic.IDictionary`2" /&gt;</ph>, has sufficient capacity to accommodate the number of elements copied, and uses the specified <ph id="ph3">&lt;see cref="T:System.Collections.Generic.IComparer`1" /&gt;</ph>.</source>
          <target state="translated">Inicializa una nueva instancia de la clase <ph id="ph1">&lt;see cref="T:System.Collections.Generic.SortedList`2" /&gt;</ph> que contiene elementos copiados del <ph id="ph2">&lt;see cref="T:System.Collections.Generic.IDictionary`2" /&gt;</ph> especificado, tiene una capacidad suficiente para alojar el número de elementos copiados y utiliza el <ph id="ph3">&lt;see cref="T:System.Collections.Generic.IComparer`1" /&gt;</ph> especificado.</target>       </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.SortedList`2.#ctor(System.Collections.Generic.IDictionary{`0,`1},System.Collections.Generic.IComparer{`0})">
          <source>Every key in a <ph id="ph1">&lt;xref:System.Collections.Generic.SortedList%602&gt;</ph> must be unique according to the specified comparer; likewise, every key in the source <ph id="ph2">`dictionary`</ph> must also be unique according to the specified comparer.</source>
          <target state="translated">Todas las claves de un <ph id="ph1">&lt;xref:System.Collections.Generic.SortedList%602&gt;</ph> deben ser únicas conforme especificado comparador; Asimismo, todas las claves en el origen de <ph id="ph2">`dictionary`</ph> también debe ser única según el comparador especificado.</target>       </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.SortedList`2.#ctor(System.Collections.Generic.IDictionary{`0,`1},System.Collections.Generic.IComparer{`0})">
          <source>The capacity of the new <ph id="ph1">&lt;xref:System.Collections.Generic.SortedList%602&gt;</ph> is set to the number of elements in <ph id="ph2">`dictionary`</ph>, so no resizing takes place while the list is being populated.</source>
          <target state="translated">La capacidad de la nueva <ph id="ph1">&lt;xref:System.Collections.Generic.SortedList%602&gt;</ph> se establece en el número de elementos de <ph id="ph2">`dictionary`</ph>, por lo que ningún cambio de tamaño tiene lugar mientras se está llenando la lista.</target>       </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.SortedList`2.#ctor(System.Collections.Generic.IDictionary{`0,`1},System.Collections.Generic.IComparer{`0})">
          <source>If the data in <ph id="ph1">`dictionary`</ph> are sorted, this constructor is an O(<ph id="ph2">`n`</ph>) operation, where <ph id="ph3">`n`</ph> is the number of elements in <ph id="ph4">`dictionary`</ph>.</source>
          <target state="translated">Si los datos de <ph id="ph1">`dictionary`</ph> están ordenados, este constructor es una O (<ph id="ph2">`n`</ph>) operación, donde <ph id="ph3">`n`</ph> es el número de elementos de <ph id="ph4">`dictionary`</ph>.</target>       </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.SortedList`2.#ctor(System.Collections.Generic.IDictionary{`0,`1},System.Collections.Generic.IComparer{`0})">
          <source>Otherwise it is an O(<ph id="ph1">`n`</ph><ph id="ph2">*</ph><ph id="ph3">`n`</ph>) operation.</source>
          <target state="translated">En caso contrario, es una O (<ph id="ph1">`n`</ph><ph id="ph2">*</ph><ph id="ph3">`n`</ph>) operación.</target>       </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.SortedList`2.#ctor(System.Collections.Generic.IDictionary{`0,`1},System.Collections.Generic.IComparer{`0})">
          <source>The following code example shows how to use <ph id="ph1">&lt;xref:System.Collections.Generic.SortedList%602&gt;</ph> to create a case-insensitive sorted copy of the information in a case-insensitive <ph id="ph2">&lt;xref:System.Collections.Generic.Dictionary%602&gt;</ph>, by passing the <ph id="ph3">&lt;xref:System.Collections.Generic.Dictionary%602&gt;</ph> to the <ph id="ph4">&lt;xref:System.Collections.Generic.SortedList%602.%23ctor%28System.Collections.Generic.IDictionary%7B%600%2C%601%7D%2CSystem.Collections.Generic.IComparer%7B%600%7D%29&gt;</ph> constructor.</source>
          <target state="translated">En el ejemplo de código siguiente se muestra cómo utilizar <ph id="ph1">&lt;xref:System.Collections.Generic.SortedList%602&gt;</ph> crear un entre mayúsculas y minúsculas ordena copia de la información en un entre mayúsculas y minúsculas <ph id="ph2">&lt;xref:System.Collections.Generic.Dictionary%602&gt;</ph>, pasando el <ph id="ph3">&lt;xref:System.Collections.Generic.Dictionary%602&gt;</ph> a la <ph id="ph4">&lt;xref:System.Collections.Generic.SortedList%602.%23ctor%28System.Collections.Generic.IDictionary%7B%600%2C%601%7D%2CSystem.Collections.Generic.IComparer%7B%600%7D%29&gt;</ph> constructor.</target>       </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.SortedList`2.#ctor(System.Collections.Generic.IDictionary{`0,`1},System.Collections.Generic.IComparer{`0})">
          <source>In this example, the case-insensitive comparers are for the current culture.</source>
          <target state="translated">En este ejemplo, los comparadores entre mayúsculas y minúsculas son para la referencia cultural actual.</target>       </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.SortedList`2.#ctor(System.Collections.Generic.IDictionary{`0,`1},System.Collections.Generic.IComparer{`0})">
          <source><ph id="ph1">&lt;paramref name="dictionary" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="dictionary" /&gt;</ph> es <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.SortedList`2.#ctor(System.Collections.Generic.IDictionary{`0,`1},System.Collections.Generic.IComparer{`0})">
          <source><ph id="ph1">&lt;paramref name="dictionary" /&gt;</ph> contains one or more duplicate keys.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="dictionary" /&gt;</ph> contiene una o varias claves duplicadas.</target>       </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.SortedList`2.#ctor(System.Int32,System.Collections.Generic.IComparer{`0})">
          <source>The initial number of elements that the <ph id="ph1">&lt;see cref="T:System.Collections.Generic.SortedList`2" /&gt;</ph> can contain.</source>
          <target state="translated">Número inicial de elementos que puede contener la colección <ph id="ph1">&lt;see cref="T:System.Collections.Generic.SortedList`2" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.SortedList`2.#ctor(System.Int32,System.Collections.Generic.IComparer{`0})">
          <source>The <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IComparer`1" /&gt;</ph> implementation to use when comparing keys.</source>
          <target state="translated">Implementación de <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IComparer`1" /&gt;</ph> que se va a usar al comparar claves.</target>       </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.SortedList`2.#ctor(System.Int32,System.Collections.Generic.IComparer{`0})">
          <source>-or-</source>
          <target state="translated">O bien</target>       </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.SortedList`2.#ctor(System.Int32,System.Collections.Generic.IComparer{`0})">
          <source><ph id="ph1">&lt;see langword="null" /&gt;</ph> to use the default <ph id="ph2">&lt;see cref="T:System.Collections.Generic.Comparer`1" /&gt;</ph> for the type of the key.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="null" /&gt;</ph> para utilizar el objeto <ph id="ph2">&lt;see cref="T:System.Collections.Generic.Comparer`1" /&gt;</ph> predeterminado para el tipo de la clave.</target>       </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.SortedList`2.#ctor(System.Int32,System.Collections.Generic.IComparer{`0})">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Collections.Generic.SortedList`2" /&gt;</ph> class that is empty, has the specified initial capacity, and uses the specified <ph id="ph2">&lt;see cref="T:System.Collections.Generic.IComparer`1" /&gt;</ph>.</source>
          <target state="translated">Inicializa una nueva instancia de la clase <ph id="ph1">&lt;see cref="T:System.Collections.Generic.SortedList`2" /&gt;</ph> que está vacía, tiene la capacidad inicial especificada y utiliza el <ph id="ph2">&lt;see cref="T:System.Collections.Generic.IComparer`1" /&gt;</ph> especificado.</target>       </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.SortedList`2.#ctor(System.Int32,System.Collections.Generic.IComparer{`0})">
          <source>Every key in a <ph id="ph1">&lt;xref:System.Collections.Generic.SortedList%602&gt;</ph> must be unique according to the specified comparer.</source>
          <target state="translated">Todas las claves de una <ph id="ph1">&lt;xref:System.Collections.Generic.SortedList%602&gt;</ph> debe ser única según el comparador especificado.</target>       </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.SortedList`2.#ctor(System.Int32,System.Collections.Generic.IComparer{`0})">
          <source>The capacity of a <ph id="ph1">&lt;xref:System.Collections.Generic.SortedList%602&gt;</ph> is the number of elements that the <ph id="ph2">&lt;xref:System.Collections.Generic.SortedList%602&gt;</ph> can hold before resizing.</source>
          <target state="translated">La capacidad de un <ph id="ph1">&lt;xref:System.Collections.Generic.SortedList%602&gt;</ph> es el número de elementos que la <ph id="ph2">&lt;xref:System.Collections.Generic.SortedList%602&gt;</ph> puede contener antes de cambiar el tamaño.</target>       </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.SortedList`2.#ctor(System.Int32,System.Collections.Generic.IComparer{`0})">
          <source>As elements are added to a <ph id="ph1">&lt;xref:System.Collections.Generic.SortedList%602&gt;</ph>, the capacity is automatically increased as required by reallocating the internal array.</source>
          <target state="translated">Cuando se agregan elementos a un <ph id="ph1">&lt;xref:System.Collections.Generic.SortedList%602&gt;</ph>, la capacidad aumenta automáticamente según sea necesario mediante la reasignación de la matriz interna.</target>       </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.SortedList`2.#ctor(System.Int32,System.Collections.Generic.IComparer{`0})">
          <source>If the size of the collection can be estimated, specifying the initial capacity eliminates the need to perform a number of resizing operations while adding elements to the <ph id="ph1">&lt;xref:System.Collections.Generic.SortedList%602&gt;</ph>.</source>
          <target state="translated">Si se puede estimar el tamaño de la colección, al especificar la capacidad inicial elimina la necesidad de realizar una serie de operaciones de cambio de tamaño al agregar elementos a la <ph id="ph1">&lt;xref:System.Collections.Generic.SortedList%602&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.SortedList`2.#ctor(System.Int32,System.Collections.Generic.IComparer{`0})">
          <source>The capacity can be decreased by calling <ph id="ph1">&lt;xref:System.Collections.Generic.SortedList%602.TrimExcess%2A&gt;</ph> or by setting the <ph id="ph2">&lt;xref:System.Collections.Generic.SortedList%602.Capacity%2A&gt;</ph> property explicitly.</source>
          <target state="translated">La capacidad puede reducirse mediante una llamada a <ph id="ph1">&lt;xref:System.Collections.Generic.SortedList%602.TrimExcess%2A&gt;</ph> o estableciendo la <ph id="ph2">&lt;xref:System.Collections.Generic.SortedList%602.Capacity%2A&gt;</ph> propiedad explícitamente.</target>       </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.SortedList`2.#ctor(System.Int32,System.Collections.Generic.IComparer{`0})">
          <source>Decreasing the capacity reallocates memory and copies all the elements in the <ph id="ph1">&lt;xref:System.Collections.Generic.SortedList%602&gt;</ph>.</source>
          <target state="translated">Al disminuir la capacidad se reasigna memoria y copia todos los elementos en el <ph id="ph1">&lt;xref:System.Collections.Generic.SortedList%602&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.SortedList`2.#ctor(System.Int32,System.Collections.Generic.IComparer{`0})">
          <source>This constructor is an O(<ph id="ph1">`n`</ph>) operation, where <ph id="ph2">`n`</ph> is <ph id="ph3">`capacity`</ph>.</source>
          <target state="translated">Este constructor es una O (<ph id="ph1">`n`</ph>) operación, donde <ph id="ph2">`n`</ph> es <ph id="ph3">`capacity`</ph>.</target>       </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.SortedList`2.#ctor(System.Int32,System.Collections.Generic.IComparer{`0})">
          <source>The following code example creates a sorted list with an initial capacity of 5 and a case-insensitive comparer for the current culture.</source>
          <target state="translated">En el ejemplo de código siguiente se crea una lista ordenada con una capacidad inicial de 5 y un comparador entre mayúsculas y minúsculas para la referencia cultural actual.</target>       </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.SortedList`2.#ctor(System.Int32,System.Collections.Generic.IComparer{`0})">
          <source>The example adds four elements, some with lower-case keys and some with upper-case keys.</source>
          <target state="translated">El ejemplo agrega cuatro elementos, algunos con claves en minúsculas y otros con claves en mayúsculas.</target>       </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.SortedList`2.#ctor(System.Int32,System.Collections.Generic.IComparer{`0})">
          <source>The example then attempts to add an element with a key that differs from an existing key only by case, catches the resulting exception, and displays an error message.</source>
          <target state="translated">El ejemplo se intenta agregar un elemento con una clave que solo se diferencia de una clave existente por caso, detecta la excepción resultante y muestra un mensaje de error.</target>       </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.SortedList`2.#ctor(System.Int32,System.Collections.Generic.IComparer{`0})">
          <source>Finally, the example displays the elements in case-insensitive sort order.</source>
          <target state="translated">Por último, el ejemplo muestra los elementos en el criterio de ordenación entre mayúsculas y minúsculas.</target>       </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.SortedList`2.#ctor(System.Int32,System.Collections.Generic.IComparer{`0})">
          <source><ph id="ph1">&lt;paramref name="capacity" /&gt;</ph> is less than zero.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="capacity" /&gt;</ph> es menor que cero.</target>       </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.SortedList`2.Add(`0,`1)">
          <source>The key of the element to add.</source>
          <target state="translated">Clave del elemento que se va a agregar.</target>       </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.SortedList`2.Add(`0,`1)">
          <source>The value of the element to add.</source>
          <target state="translated">Valor del elemento que se va a agregar.</target>       </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.SortedList`2.Add(`0,`1)">
          <source>The value can be <ph id="ph1">&lt;see langword="null" /&gt;</ph> for reference types.</source>
          <target state="translated">El valor puede ser <ph id="ph1">&lt;see langword="null" /&gt;</ph> para los tipos de referencia.</target>       </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.SortedList`2.Add(`0,`1)">
          <source>Adds an element with the specified key and value into the <ph id="ph1">&lt;see cref="T:System.Collections.Generic.SortedList`2" /&gt;</ph>.</source>
          <target state="translated">Agrega un elemento con la clave y el valor especificados a <ph id="ph1">&lt;see cref="T:System.Collections.Generic.SortedList`2" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.SortedList`2.Add(`0,`1)">
          <source>A key cannot be <ph id="ph1">`null`</ph>, but a value can be, if the type of values in the sorted list, <ph id="ph2">`TValue`</ph>, is a reference type.</source>
          <target state="translated">No puede ser una clave <ph id="ph1">`null`</ph>, pero un valor valor puede ser, si el tipo de valores en la lista ordenada, <ph id="ph2">`TValue`</ph>, es un tipo de referencia.</target>       </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.SortedList`2.Add(`0,`1)">
          <source>You can also use the <ph id="ph1">&lt;xref:System.Collections.Generic.SortedList%602.Item%2A&gt;</ph> property to add new elements by setting the value of a key that does not exist in the <ph id="ph2">&lt;xref:System.Collections.Generic.SortedList%602&gt;</ph>; for example, <ph id="ph3">`myCollection["myNonexistentKey"] = myValue`</ph>.</source>
          <target state="translated">También puede usar el <ph id="ph1">&lt;xref:System.Collections.Generic.SortedList%602.Item%2A&gt;</ph> propiedad para agregar nuevos elementos estableciendo el valor de una clave que no existe en el <ph id="ph2">&lt;xref:System.Collections.Generic.SortedList%602&gt;</ph>; por ejemplo, <ph id="ph3">`myCollection["myNonexistentKey"] = myValue`</ph>.</target>       </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.SortedList`2.Add(`0,`1)">
          <source>However, if the specified key already exists in the <ph id="ph1">&lt;xref:System.Collections.Generic.SortedList%602&gt;</ph>, setting the <ph id="ph2">&lt;xref:System.Collections.Generic.SortedList%602.Item%2A&gt;</ph> property overwrites the old value.</source>
          <target state="translated">Sin embargo, si la clave especificada ya existe en el <ph id="ph1">&lt;xref:System.Collections.Generic.SortedList%602&gt;</ph>, y establece el <ph id="ph2">&lt;xref:System.Collections.Generic.SortedList%602.Item%2A&gt;</ph> propiedad sobrescribe el valor anterior.</target>       </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.SortedList`2.Add(`0,`1)">
          <source>In contrast, the <ph id="ph1">&lt;xref:System.Collections.Generic.SortedList%602.Add%2A&gt;</ph> method does not modify existing elements.</source>
          <target state="translated">En cambio, la <ph id="ph1">&lt;xref:System.Collections.Generic.SortedList%602.Add%2A&gt;</ph> método no modifica los elementos existentes.</target>       </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.SortedList`2.Add(`0,`1)">
          <source>If <ph id="ph1">&lt;xref:System.Collections.Generic.SortedList%602.Count%2A&gt;</ph> already equals <ph id="ph2">&lt;xref:System.Collections.Generic.SortedList%602.Capacity%2A&gt;</ph>, the capacity of the <ph id="ph3">&lt;xref:System.Collections.Generic.SortedList%602&gt;</ph> is increased by automatically reallocating the internal array, and the existing elements are copied to the new array before the new element is added.</source>
          <target state="translated">Si <ph id="ph1">&lt;xref:System.Collections.Generic.SortedList%602.Count%2A&gt;</ph> ya es igual a <ph id="ph2">&lt;xref:System.Collections.Generic.SortedList%602.Capacity%2A&gt;</ph>, la capacidad de la <ph id="ph3">&lt;xref:System.Collections.Generic.SortedList%602&gt;</ph> se incrementa mediante la reasignación automática de la matriz interna, y se copian los elementos existentes en la nueva matriz antes de agrega el nuevo elemento.</target>       </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.SortedList`2.Add(`0,`1)">
          <source>This method is an O(<ph id="ph1">`n`</ph>) operation for unsorted data, where <ph id="ph2">`n`</ph> is <ph id="ph3">&lt;xref:System.Collections.Generic.SortedList%602.Count%2A&gt;</ph>.</source>
          <target state="translated">Este método es una O (<ph id="ph1">`n`</ph>) operación para datos sin ordenar, donde <ph id="ph2">`n`</ph> es <ph id="ph3">&lt;xref:System.Collections.Generic.SortedList%602.Count%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.SortedList`2.Add(`0,`1)">
          <source>It is an O(log <ph id="ph1">`n`</ph>) operation if the new element is added at the end of the list.</source>
          <target state="translated">Es una O (registro <ph id="ph1">`n`</ph>) operación si el nuevo elemento se agrega al final de la lista.</target>       </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.SortedList`2.Add(`0,`1)">
          <source>If insertion causes a resize, the operation is O(<ph id="ph1">`n`</ph>).</source>
          <target state="translated">Si la inserción provoca un cambio de tamaño, la operación es O (<ph id="ph1">`n`</ph>).</target>       </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.SortedList`2.Add(`0,`1)">
          <source>The following code example creates an empty <ph id="ph1">&lt;xref:System.Collections.Generic.SortedList%602&gt;</ph> of strings with string keys and uses the <ph id="ph2">&lt;xref:System.Collections.Generic.SortedList%602.Add%2A&gt;</ph> method to add some elements.</source>
          <target state="translated">En el ejemplo de código siguiente se crea vacío <ph id="ph1">&lt;xref:System.Collections.Generic.SortedList%602&gt;</ph> de cadenas con claves de cadena y usa el <ph id="ph2">&lt;xref:System.Collections.Generic.SortedList%602.Add%2A&gt;</ph> método para agregar algunos elementos.</target>       </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.SortedList`2.Add(`0,`1)">
          <source>The example demonstrates that the <ph id="ph1">&lt;xref:System.Collections.Generic.SortedList%602.Add%2A&gt;</ph> method throws an <ph id="ph2">&lt;xref:System.ArgumentException&gt;</ph> when attempting to add a duplicate key.</source>
          <target state="translated">El ejemplo muestra que la <ph id="ph1">&lt;xref:System.Collections.Generic.SortedList%602.Add%2A&gt;</ph> método produce un <ph id="ph2">&lt;xref:System.ArgumentException&gt;</ph> al intentar agregar una clave duplicada.</target>       </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.SortedList`2.Add(`0,`1)">
          <source>This code example is part of a larger example provided for the <ph id="ph1">&lt;xref:System.Collections.Generic.SortedList%602&gt;</ph> class.</source>
          <target state="translated">Este ejemplo de código forma parte de un ejemplo mayor proporcionado para el <ph id="ph1">&lt;xref:System.Collections.Generic.SortedList%602&gt;</ph> clase.</target>       </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.SortedList`2.Add(`0,`1)">
          <source><ph id="ph1">&lt;paramref name="key" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="key" /&gt;</ph> es <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.SortedList`2.Add(`0,`1)">
          <source>An element with the same key already exists in the <ph id="ph1">&lt;see cref="T:System.Collections.Generic.SortedList`2" /&gt;</ph>.</source>
          <target state="translated">Ya existe un elemento con la misma clave en <ph id="ph1">&lt;see cref="T:System.Collections.Generic.SortedList`2" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve" uid="P:System.Collections.Generic.SortedList`2.Capacity">
          <source>Gets or sets the number of elements that the <ph id="ph1">&lt;see cref="T:System.Collections.Generic.SortedList`2" /&gt;</ph> can contain.</source>
          <target state="translated">Obtiene o establece el número de elementos que puede contener <ph id="ph1">&lt;see cref="T:System.Collections.Generic.SortedList`2" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.SortedList`2.Capacity">
          <source>The number of elements that the <ph id="ph1">&lt;see cref="T:System.Collections.Generic.SortedList`2" /&gt;</ph> can contain.</source>
          <target state="translated">Número de elementos que puede contener <ph id="ph1">&lt;see cref="T:System.Collections.Generic.SortedList`2" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.SortedList`2.Capacity">
          <source><ph id="ph1">&lt;xref:System.Collections.Generic.SortedList%602.Capacity%2A&gt;</ph> is the number of elements that the <ph id="ph2">&lt;xref:System.Collections.Generic.SortedList%602&gt;</ph> can store.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.Generic.SortedList%602.Capacity%2A&gt;</ph> es el número de elementos que la <ph id="ph2">&lt;xref:System.Collections.Generic.SortedList%602&gt;</ph> puede almacenar.</target>       </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.SortedList`2.Capacity">
          <source><ph id="ph1">&lt;xref:System.Collections.Generic.SortedList%602.Count%2A&gt;</ph> is the number of elements that are actually in the <ph id="ph2">&lt;xref:System.Collections.Generic.SortedList%602&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.Generic.SortedList%602.Count%2A&gt;</ph> es el número de elementos que están realmente en la <ph id="ph2">&lt;xref:System.Collections.Generic.SortedList%602&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.SortedList`2.Capacity">
          <source><ph id="ph1">&lt;xref:System.Collections.Generic.SortedList%602.Capacity%2A&gt;</ph> is always greater than or equal to <ph id="ph2">&lt;xref:System.Collections.Generic.SortedList%602.Count%2A&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.Generic.SortedList%602.Capacity%2A&gt;</ph> es siempre mayor o igual que <ph id="ph2">&lt;xref:System.Collections.Generic.SortedList%602.Count%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.SortedList`2.Capacity">
          <source>If <ph id="ph1">&lt;xref:System.Collections.Generic.SortedList%602.Count%2A&gt;</ph> exceeds <ph id="ph2">&lt;xref:System.Collections.Generic.SortedList%602.Capacity%2A&gt;</ph> while adding elements, the capacity is increased by automatically reallocating the internal array before copying the old elements and adding the new elements.</source>
          <target state="translated">Si <ph id="ph1">&lt;xref:System.Collections.Generic.SortedList%602.Count%2A&gt;</ph> supera <ph id="ph2">&lt;xref:System.Collections.Generic.SortedList%602.Capacity%2A&gt;</ph> al agregar elementos, se aumenta la capacidad reasignando automáticamente la matriz interna antes de copiar los elementos antiguos y agregar los nuevos elementos.</target>       </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.SortedList`2.Capacity">
          <source>The capacity can be decreased by calling <ph id="ph1">&lt;xref:System.Collections.Generic.SortedList%602.TrimExcess%2A&gt;</ph> or by setting the <ph id="ph2">&lt;xref:System.Collections.Generic.SortedList%602.Capacity%2A&gt;</ph> property explicitly.</source>
          <target state="translated">La capacidad puede reducirse mediante una llamada a <ph id="ph1">&lt;xref:System.Collections.Generic.SortedList%602.TrimExcess%2A&gt;</ph> o estableciendo la <ph id="ph2">&lt;xref:System.Collections.Generic.SortedList%602.Capacity%2A&gt;</ph> propiedad explícitamente.</target>       </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.SortedList`2.Capacity">
          <source>When the value of <ph id="ph1">&lt;xref:System.Collections.Generic.SortedList%602.Capacity%2A&gt;</ph> is set explicitly, the internal array is also reallocated to accommodate the specified capacity.</source>
          <target state="translated">Cuando el valor de <ph id="ph1">&lt;xref:System.Collections.Generic.SortedList%602.Capacity%2A&gt;</ph> se establece explícitamente, la matriz interna se reasigna para alojar la capacidad especificada.</target>       </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.SortedList`2.Capacity">
          <source>Retrieving the value of this property is an O(1) operation; setting the property is an O(<ph id="ph1">`n`</ph>) operation, where <ph id="ph2">`n`</ph> is the new capacity.</source>
          <target state="translated">La recuperación del valor de esta propiedad es una operación o (1); establecer la propiedad es una O (<ph id="ph1">`n`</ph>) operación, donde <ph id="ph2">`n`</ph> es la capacidad de nuevo.</target>       </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve" uid="P:System.Collections.Generic.SortedList`2.Capacity">
          <source><ph id="ph1">&lt;see cref="P:System.Collections.Generic.SortedList`2.Capacity" /&gt;</ph> is set to a value that is less than <ph id="ph2">&lt;see cref="P:System.Collections.Generic.SortedList`2.Count" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="P:System.Collections.Generic.SortedList`2.Capacity" /&gt;</ph> se establece en un valor que es menor que <ph id="ph2">&lt;see cref="P:System.Collections.Generic.SortedList`2.Count" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve" uid="P:System.Collections.Generic.SortedList`2.Capacity">
          <source>There is not enough memory available on the system.</source>
          <target state="translated">No hay memoria suficiente en el sistema.</target>       </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.SortedList`2.Clear">
          <source>Removes all elements from the <ph id="ph1">&lt;see cref="T:System.Collections.Generic.SortedList`2" /&gt;</ph>.</source>
          <target state="translated">Quita todos los elementos de <ph id="ph1">&lt;see cref="T:System.Collections.Generic.SortedList`2" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.SortedList`2.Clear">
          <source><ph id="ph1">&lt;xref:System.Collections.Generic.SortedList%602.Count%2A&gt;</ph> is set to zero, and references to other objects from elements of the collection are also released.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.Generic.SortedList%602.Count%2A&gt;</ph> está establecido en cero, y también se liberan las referencias a otros objetos desde los elementos de la colección.</target>       </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.SortedList`2.Clear">
          <source><ph id="ph1">&lt;xref:System.Collections.Generic.SortedList%602.Capacity%2A&gt;</ph> remains unchanged.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.Generic.SortedList%602.Capacity%2A&gt;</ph> No cambie.</target>       </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.SortedList`2.Clear">
          <source>To reset the capacity of the <ph id="ph1">&lt;xref:System.Collections.Generic.SortedList%602&gt;</ph>, call <ph id="ph2">&lt;xref:System.Collections.Generic.SortedList%602.TrimExcess%2A&gt;</ph> or set the <ph id="ph3">&lt;xref:System.Collections.Generic.SortedList%602.Capacity%2A&gt;</ph> property directly.</source>
          <target state="translated">Para restablecer la capacidad de la <ph id="ph1">&lt;xref:System.Collections.Generic.SortedList%602&gt;</ph>, llame a <ph id="ph2">&lt;xref:System.Collections.Generic.SortedList%602.TrimExcess%2A&gt;</ph> o establecer el <ph id="ph3">&lt;xref:System.Collections.Generic.SortedList%602.Capacity%2A&gt;</ph> propiedad directamente.</target>       </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.SortedList`2.Clear">
          <source>Trimming an empty <ph id="ph1">&lt;xref:System.Collections.Generic.SortedList%602&gt;</ph> sets the capacity of the <ph id="ph2">&lt;xref:System.Collections.Generic.SortedList%602&gt;</ph> to the default capacity.</source>
          <target state="translated">Recortar vacío <ph id="ph1">&lt;xref:System.Collections.Generic.SortedList%602&gt;</ph> establece la capacidad de la <ph id="ph2">&lt;xref:System.Collections.Generic.SortedList%602&gt;</ph> en la capacidad predeterminada.</target>       </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.SortedList`2.Clear">
          <source>This method is an O(<ph id="ph1">`n`</ph>) operation, where <ph id="ph2">`n`</ph> is <ph id="ph3">&lt;xref:System.Collections.Generic.SortedList%602.Count%2A&gt;</ph>.</source>
          <target state="translated">Este método es una O (<ph id="ph1">`n`</ph>) operación, donde <ph id="ph2">`n`</ph> es <ph id="ph3">&lt;xref:System.Collections.Generic.SortedList%602.Count%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve" uid="P:System.Collections.Generic.SortedList`2.Comparer">
          <source>Gets the <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IComparer`1" /&gt;</ph> for the sorted list.</source>
          <target state="translated">Obtiene el <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IComparer`1" /&gt;</ph> para la lista ordenada.</target>       </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.SortedList`2.Comparer">
          <source>The <ph id="ph1">&lt;see cref="T:System.IComparable`1" /&gt;</ph> for the current <ph id="ph2">&lt;see cref="T:System.Collections.Generic.SortedList`2" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.IComparable`1" /&gt;</ph> de la <ph id="ph2">&lt;see cref="T:System.Collections.Generic.SortedList`2" /&gt;</ph> actual.</target>       </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.SortedList`2.Comparer">
          <source>Retrieving the value of this property is an O(1) operation.</source>
          <target state="translated">La recuperación del valor de esta propiedad es una operación O(1).</target>       </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.SortedList`2.ContainsKey(`0)">
          <source>The key to locate in the <ph id="ph1">&lt;see cref="T:System.Collections.Generic.SortedList`2" /&gt;</ph>.</source>
          <target state="translated">Clave que se buscará en <ph id="ph1">&lt;see cref="T:System.Collections.Generic.SortedList`2" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.SortedList`2.ContainsKey(`0)">
          <source>Determines whether the <ph id="ph1">&lt;see cref="T:System.Collections.Generic.SortedList`2" /&gt;</ph> contains a specific key.</source>
          <target state="translated">Determina si <ph id="ph1">&lt;see cref="T:System.Collections.Generic.SortedList`2" /&gt;</ph> contiene una clave específica.</target>       </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.SortedList`2.ContainsKey(`0)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the <ph id="ph2">&lt;see cref="T:System.Collections.Generic.SortedList`2" /&gt;</ph> contains an element with the specified key; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> si la colección <ph id="ph2">&lt;see cref="T:System.Collections.Generic.SortedList`2" /&gt;</ph> contiene un elemento con la clave especificada; en caso contrario, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.SortedList`2.ContainsKey(`0)">
          <source>This method is an O(log <ph id="ph1">`n`</ph>) operation, where <ph id="ph2">`n`</ph> is <ph id="ph3">&lt;xref:System.Collections.Generic.SortedList%602.Count%2A&gt;</ph>.</source>
          <target state="translated">Este método es una O (registro <ph id="ph1">`n`</ph>) operación, donde <ph id="ph2">`n`</ph> es <ph id="ph3">&lt;xref:System.Collections.Generic.SortedList%602.Count%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.SortedList`2.ContainsKey(`0)">
          <source>The following code example shows how to use the <ph id="ph1">&lt;xref:System.Collections.Generic.SortedList%602.ContainsKey%2A&gt;</ph> method to test whether a key exists prior to calling the <ph id="ph2">&lt;xref:System.Collections.Generic.SortedList%602.Add%2A&gt;</ph> method.</source>
          <target state="translated">En el ejemplo de código siguiente se muestra cómo utilizar el <ph id="ph1">&lt;xref:System.Collections.Generic.SortedList%602.ContainsKey%2A&gt;</ph> método para comprobar si existe una clave antes de llamar a la <ph id="ph2">&lt;xref:System.Collections.Generic.SortedList%602.Add%2A&gt;</ph> método.</target>       </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.SortedList`2.ContainsKey(`0)">
          <source>It also shows how to use the <ph id="ph1">&lt;xref:System.Collections.Generic.SortedList%602.TryGetValue%2A&gt;</ph> method to retrieve values, which is an efficient way to retrieve values when a program frequently tries keys that are not in the sorted list.</source>
          <target state="translated">También muestra cómo utilizar el <ph id="ph1">&lt;xref:System.Collections.Generic.SortedList%602.TryGetValue%2A&gt;</ph> método para recuperar valores, que es una manera eficaz de recuperar valores cuando un programa prueba con frecuencia claves que no están en la lista ordenada.</target>       </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.SortedList`2.ContainsKey(`0)">
          <source>Finally, it shows the least efficient way to test whether keys exist, by using the <ph id="ph1">&lt;xref:System.Collections.Generic.SortedList%602.Item%2A&gt;</ph> property (the indexer in C#).</source>
          <target state="translated">Por último, se muestra la forma menos eficaz para probar si las claves existen, utilizando la <ph id="ph1">&lt;xref:System.Collections.Generic.SortedList%602.Item%2A&gt;</ph> propiedad (el indizador en C#).</target>       </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.SortedList`2.ContainsKey(`0)">
          <source>This code example is part of a larger example provided for the <ph id="ph1">&lt;xref:System.Collections.Generic.SortedList%602&gt;</ph> class.</source>
          <target state="translated">Este ejemplo de código forma parte de un ejemplo mayor proporcionado para el <ph id="ph1">&lt;xref:System.Collections.Generic.SortedList%602&gt;</ph> clase.</target>       </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.SortedList`2.ContainsKey(`0)">
          <source><ph id="ph1">&lt;paramref name="key" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="key" /&gt;</ph> es <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.SortedList`2.ContainsValue(`1)">
          <source>The value to locate in the <ph id="ph1">&lt;see cref="T:System.Collections.Generic.SortedList`2" /&gt;</ph>.</source>
          <target state="translated">Valor que se va a buscar en la colección <ph id="ph1">&lt;see cref="T:System.Collections.Generic.SortedList`2" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.SortedList`2.ContainsValue(`1)">
          <source>The value can be <ph id="ph1">&lt;see langword="null" /&gt;</ph> for reference types.</source>
          <target state="translated">El valor puede ser <ph id="ph1">&lt;see langword="null" /&gt;</ph> para los tipos de referencia.</target>       </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.SortedList`2.ContainsValue(`1)">
          <source>Determines whether the <ph id="ph1">&lt;see cref="T:System.Collections.Generic.SortedList`2" /&gt;</ph> contains a specific value.</source>
          <target state="translated">Determina si <ph id="ph1">&lt;see cref="T:System.Collections.Generic.SortedList`2" /&gt;</ph> contiene un valor específico.</target>       </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.SortedList`2.ContainsValue(`1)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the <ph id="ph2">&lt;see cref="T:System.Collections.Generic.SortedList`2" /&gt;</ph> contains an element with the specified value; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">Es <ph id="ph1">&lt;see langword="true" /&gt;</ph> si <ph id="ph2">&lt;see cref="T:System.Collections.Generic.SortedList`2" /&gt;</ph> contiene un elemento con el valor especificado; en caso contrario, es <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.SortedList`2.ContainsValue(`1)">
          <source>This method determines equality using the default comparer <ph id="ph1">&lt;xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType&gt;</ph> for the value type <ph id="ph2">`TValue`</ph>.</source>
          <target state="translated">Este método determina la igualdad utilizando el comparador predeterminado <ph id="ph1">&lt;xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType&gt;</ph> para el tipo de valor <ph id="ph2">`TValue`</ph>.</target>       </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.SortedList`2.ContainsValue(`1)">
          <source><ph id="ph1">&lt;xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType&gt;</ph> checks whether the value type <ph id="ph2">`TValue`</ph> implements <ph id="ph3">&lt;xref:System.IComparable%601?displayProperty=nameWithType&gt;</ph> and uses that implementation, if available.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType&gt;</ph> comprueba si el valor de tipo <ph id="ph2">`TValue`</ph> implementa <ph id="ph3">&lt;xref:System.IComparable%601?displayProperty=nameWithType&gt;</ph> y utiliza esa implementación, si está disponible.</target>       </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.SortedList`2.ContainsValue(`1)">
          <source>If not, <ph id="ph1">&lt;xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType&gt;</ph> checks whether the value type <ph id="ph2">`TValue`</ph> implements <ph id="ph3">&lt;xref:System.IComparable?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">Si no es así, <ph id="ph1">&lt;xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType&gt;</ph> comprueba si el valor de tipo <ph id="ph2">`TValue`</ph> implementa <ph id="ph3">&lt;xref:System.IComparable?displayProperty=nameWithType&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.SortedList`2.ContainsValue(`1)">
          <source>If the value type <ph id="ph1">`TValue`</ph> does not implement either interface, this method uses <ph id="ph2">&lt;xref:System.Object.Equals%2A?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">Si el tipo de valor <ph id="ph1">`TValue`</ph> implementa ninguna de estas interfaces, este método usa <ph id="ph2">&lt;xref:System.Object.Equals%2A?displayProperty=nameWithType&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.SortedList`2.ContainsValue(`1)">
          <source>This method performs a linear search; therefore, the average execution time is proportional to <ph id="ph1">&lt;xref:System.Collections.Generic.SortedList%602.Count%2A&gt;</ph>.</source>
          <target state="translated">Este método realiza una búsqueda lineal; por lo tanto, el tiempo medio de ejecución es proporcional al <ph id="ph1">&lt;xref:System.Collections.Generic.SortedList%602.Count%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.SortedList`2.ContainsValue(`1)">
          <source>That is, this method is an O(<ph id="ph1">`n`</ph>) operation, where <ph id="ph2">`n`</ph> is <ph id="ph3">&lt;xref:System.Collections.Generic.SortedList%602.Count%2A&gt;</ph>.</source>
          <target state="translated">Es decir, este método es una O (<ph id="ph1">`n`</ph>) operación, donde <ph id="ph2">`n`</ph> es <ph id="ph3">&lt;xref:System.Collections.Generic.SortedList%602.Count%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve" uid="P:System.Collections.Generic.SortedList`2.Count">
          <source>Gets the number of key/value pairs contained in the <ph id="ph1">&lt;see cref="T:System.Collections.Generic.SortedList`2" /&gt;</ph>.</source>
          <target state="translated">Obtiene el número de pares clave-valor incluidos en <ph id="ph1">&lt;see cref="T:System.Collections.Generic.SortedList`2" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.SortedList`2.Count">
          <source>The number of key/value pairs contained in the <ph id="ph1">&lt;see cref="T:System.Collections.Generic.SortedList`2" /&gt;</ph>.</source>
          <target state="translated">Número de pares clave-valor incluidos en <ph id="ph1">&lt;see cref="T:System.Collections.Generic.SortedList`2" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.SortedList`2.Count">
          <source><ph id="ph1">&lt;xref:System.Collections.Generic.SortedList%602.Capacity%2A&gt;</ph> is the number of elements that the <ph id="ph2">&lt;xref:System.Collections.Generic.SortedList%602&gt;</ph> can store.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.Generic.SortedList%602.Capacity%2A&gt;</ph> es el número de elementos que la <ph id="ph2">&lt;xref:System.Collections.Generic.SortedList%602&gt;</ph> puede almacenar.</target>       </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.SortedList`2.Count">
          <source><ph id="ph1">&lt;xref:System.Collections.Generic.SortedList%602.Count%2A&gt;</ph> is the number of elements that are actually in the <ph id="ph2">&lt;xref:System.Collections.Generic.SortedList%602&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.Generic.SortedList%602.Count%2A&gt;</ph> es el número de elementos que están realmente en la <ph id="ph2">&lt;xref:System.Collections.Generic.SortedList%602&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.SortedList`2.Count">
          <source><ph id="ph1">&lt;xref:System.Collections.Generic.SortedList%602.Capacity%2A&gt;</ph> is always greater than or equal to <ph id="ph2">&lt;xref:System.Collections.Generic.SortedList%602.Count%2A&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.Generic.SortedList%602.Capacity%2A&gt;</ph> es siempre mayor o igual que <ph id="ph2">&lt;xref:System.Collections.Generic.SortedList%602.Count%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.SortedList`2.Count">
          <source>If <ph id="ph1">&lt;xref:System.Collections.Generic.SortedList%602.Count%2A&gt;</ph> exceeds <ph id="ph2">&lt;xref:System.Collections.Generic.SortedList%602.Capacity%2A&gt;</ph> while adding elements, the capacity is increased by automatically reallocating the internal array before copying the old elements and adding the new elements.</source>
          <target state="translated">Si <ph id="ph1">&lt;xref:System.Collections.Generic.SortedList%602.Count%2A&gt;</ph> supera <ph id="ph2">&lt;xref:System.Collections.Generic.SortedList%602.Capacity%2A&gt;</ph> al agregar elementos, se aumenta la capacidad reasignando automáticamente la matriz interna antes de copiar los elementos antiguos y agregar los nuevos elementos.</target>       </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.SortedList`2.Count">
          <source>Retrieving the value of this property is an O(1) operation.</source>
          <target state="translated">La recuperación del valor de esta propiedad es una operación O(1).</target>       </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.SortedList`2.GetEnumerator">
          <source>Returns an enumerator that iterates through the <ph id="ph1">&lt;see cref="T:System.Collections.Generic.SortedList`2" /&gt;</ph>.</source>
          <target state="translated">Devuelve un enumerador que recorre en iteración la colección <ph id="ph1">&lt;see cref="T:System.Collections.Generic.SortedList`2" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.SortedList`2.GetEnumerator">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerator`1" /&gt;</ph> of type <ph id="ph2">&lt;see cref="T:System.Collections.Generic.KeyValuePair`2" /&gt;</ph> for the <ph id="ph3">&lt;see cref="T:System.Collections.Generic.SortedList`2" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerator`1" /&gt;</ph> de tipo <ph id="ph2">&lt;see cref="T:System.Collections.Generic.KeyValuePair`2" /&gt;</ph> para <ph id="ph3">&lt;see cref="T:System.Collections.Generic.SortedList`2" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.SortedList`2.GetEnumerator">
          <source>The <ph id="ph1">`foreach`</ph> statement of the C# language (<ph id="ph2">`for each`</ph> in C++, <ph id="ph3">`For Each`</ph> in Visual Basic) hides the complexity of the enumerators.</source>
          <target state="translated">El <ph id="ph1">`foreach`</ph> instrucción del lenguaje C# (<ph id="ph2">`for each`</ph> en C++, <ph id="ph3">`For Each`</ph> en Visual Basic) oculta la complejidad de los enumeradores.</target>       </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.SortedList`2.GetEnumerator">
          <source>Therefore, using <ph id="ph1">`foreach`</ph> is recommended, instead of directly manipulating the enumerator.</source>
          <target state="translated">Por lo tanto, se recomienda el uso de <ph id="ph1">`foreach`</ph>, en lugar de manipular directamente el enumerador.</target>       </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.SortedList`2.GetEnumerator">
          <source>Enumerators can be used to read the data in the collection, but they cannot be used to modify the underlying collection.</source>
          <target state="translated">Los enumeradores pueden usarse para leer los datos de la colección, pero no para modificar la colección subyacente.</target>       </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.SortedList`2.GetEnumerator">
          <source>The dictionary is maintained in a sorted order using an internal tree.</source>
          <target state="translated">El diccionario se mantiene en un criterio de ordenación con un árbol interno.</target>       </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.SortedList`2.GetEnumerator">
          <source>Every new element is positioned at the correct sort position, and the tree is adjusted to maintain the sort order whenever an element is removed.</source>
          <target state="translated">Cada nuevo elemento se coloca en la posición de ordenación correcta y el árbol se ajusta para mantener el criterio de ordenación cada vez que se quita un elemento.</target>       </trans-unit>
        <trans-unit id="303" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.SortedList`2.GetEnumerator">
          <source>While enumerating, the sort order is maintained.</source>
          <target state="translated">Durante la enumeración, se mantiene el criterio de ordenación.</target>       </trans-unit>
        <trans-unit id="304" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.SortedList`2.GetEnumerator">
          <source>Initially, the enumerator is positioned before the first element in the collection.</source>
          <target state="translated">En principio, el enumerador se coloca antes del primer elemento de la colección.</target>       </trans-unit>
        <trans-unit id="305" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.SortedList`2.GetEnumerator">
          <source>At this position, <ph id="ph1">&lt;xref:System.Collections.Generic.IEnumerator%601.Current%2A&gt;</ph> is undefined.</source>
          <target state="translated">En esta posición, el valor de propiedad <ph id="ph1">&lt;xref:System.Collections.Generic.IEnumerator%601.Current%2A&gt;</ph> está sin definir.</target>       </trans-unit>
        <trans-unit id="306" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.SortedList`2.GetEnumerator">
          <source>Therefore, you must call <ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> to advance the enumerator to the first element of the collection before reading the value of <ph id="ph2">&lt;xref:System.Collections.Generic.IEnumerator%601.Current%2A&gt;</ph>.</source>
          <target state="translated">Por lo tanto, debe llamar a <ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> para adelantar el enumerador hasta el primer elemento de la colección antes de leer el valor de <ph id="ph2">&lt;xref:System.Collections.Generic.IEnumerator%601.Current%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="307" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.SortedList`2.GetEnumerator">
          <source><ph id="ph1">&lt;xref:System.Collections.Generic.IEnumerator%601.Current%2A&gt;</ph> returns the same object until <ph id="ph2">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> is called.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.Generic.IEnumerator%601.Current%2A&gt;</ph> devuelve el mismo objeto hasta que se llama a <ph id="ph2">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="308" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.SortedList`2.GetEnumerator">
          <source><ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> sets <ph id="ph2">&lt;xref:System.Collections.Generic.IEnumerator%601.Current%2A&gt;</ph> to the next element.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> establece <ph id="ph2">&lt;xref:System.Collections.Generic.IEnumerator%601.Current%2A&gt;</ph> en el siguiente elemento.</target>       </trans-unit>
        <trans-unit id="309" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.SortedList`2.GetEnumerator">
          <source>If <ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> passes the end of the collection, the enumerator is positioned after the last element in the collection and <ph id="ph2">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> returns <ph id="ph3">`false`</ph>.</source>
          <target state="translated">Si <ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> pasa el final de la colección, el enumerador se coloca después del último elemento de la colección y <ph id="ph2">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> devuelve <ph id="ph3">`false`</ph>.</target>       </trans-unit>
        <trans-unit id="310" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.SortedList`2.GetEnumerator">
          <source>When the enumerator is at this position, subsequent calls to <ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> return <ph id="ph2">`false`</ph>.</source>
          <target state="translated">Mientras el enumerador permanezca en esta posición, las llamadas subsiguientes a <ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> devolver <ph id="ph2">`false`</ph>.</target>       </trans-unit>
        <trans-unit id="311" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.SortedList`2.GetEnumerator">
          <source>If the last call to <ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> returned <ph id="ph2">`false`</ph>, <ph id="ph3">&lt;xref:System.Collections.Generic.IEnumerator%601.Current%2A&gt;</ph> is undefined.</source>
          <target state="translated">Si la última llamada a <ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> devuelve <ph id="ph2">`false`</ph>, <ph id="ph3">&lt;xref:System.Collections.Generic.IEnumerator%601.Current%2A&gt;</ph> no está definido.</target>       </trans-unit>
        <trans-unit id="312" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.SortedList`2.GetEnumerator">
          <source>You cannot set <ph id="ph1">&lt;xref:System.Collections.Generic.IEnumerator%601.Current%2A&gt;</ph> to the first element of the collection again; you must create a new enumerator instance instead.</source>
          <target state="translated">No puede volver a establecer la propiedad <ph id="ph1">&lt;xref:System.Collections.Generic.IEnumerator%601.Current%2A&gt;</ph> en el primer elemento de la colección, sino que debe crear una nueva instancia del enumerador.</target>       </trans-unit>
        <trans-unit id="313" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.SortedList`2.GetEnumerator">
          <source>An enumerator remains valid as long as the collection remains unchanged.</source>
          <target state="translated">Un enumerador es válido mientras la colección no cambie.</target>       </trans-unit>
        <trans-unit id="314" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.SortedList`2.GetEnumerator">
          <source>If changes are made to the collection, such as adding, modifying, or deleting elements, the enumerator is irrecoverably invalidated and its behavior is undefined.</source>
          <target state="translated">Si se hacen cambios en la colección (como agregar, modificar o eliminar elementos), el enumerador queda invalidado permanentemente y su comportamiento es indefinido.</target>       </trans-unit>
        <trans-unit id="315" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.SortedList`2.GetEnumerator">
          <source>The enumerator does not have exclusive access to the collection; therefore, enumerating through a collection is intrinsically not a thread-safe procedure.</source>
          <target state="translated">El enumerador no tiene acceso exclusivo a la colección y, por tanto, la enumeración en una colección no es intrínsicamente un procedimiento seguro para subprocesos.</target>       </trans-unit>
        <trans-unit id="316" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.SortedList`2.GetEnumerator">
          <source>To guarantee thread safety during enumeration, you can lock the collection during the entire enumeration.</source>
          <target state="translated">A fin de garantizar la seguridad de los subprocesos, se puede bloquear la colección durante toda la enumeración.</target>       </trans-unit>
        <trans-unit id="317" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.SortedList`2.GetEnumerator">
          <source>To allow the collection to be accessed by multiple threads for reading and writing, you must implement your own synchronization.</source>
          <target state="translated">Para permitir que varios subprocesos obtengan acceso de lectura y escritura a la colección, debe implementar su propia sincronización.</target>       </trans-unit>
        <trans-unit id="318" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.SortedList`2.GetEnumerator">
          <source>Default implementations of collections in <ph id="ph1">&lt;xref:System.Collections.Generic?displayProperty=nameWithType&gt;</ph> are not synchronized.</source>
          <target state="translated">Las implementaciones de las recopilaciones predeterminadas <ph id="ph1">&lt;xref:System.Collections.Generic?displayProperty=nameWithType&gt;</ph> no están sincronizadas.</target>       </trans-unit>
        <trans-unit id="319" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.SortedList`2.GetEnumerator">
          <source>This method is an O(1) operation.</source>
          <target state="translated">Este método es una operación o (1).</target>       </trans-unit>
        <trans-unit id="320" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.SortedList`2.IndexOfKey(`0)">
          <source>The key to locate in the <ph id="ph1">&lt;see cref="T:System.Collections.Generic.SortedList`2" /&gt;</ph>.</source>
          <target state="translated">Clave que se buscará en <ph id="ph1">&lt;see cref="T:System.Collections.Generic.SortedList`2" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="321" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.SortedList`2.IndexOfKey(`0)">
          <source>Searches for the specified key and returns the zero-based index within the entire <ph id="ph1">&lt;see cref="T:System.Collections.Generic.SortedList`2" /&gt;</ph>.</source>
          <target state="translated">Busca la clave especificada y devuelve el índice de base cero de la totalidad de <ph id="ph1">&lt;see cref="T:System.Collections.Generic.SortedList`2" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="322" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.SortedList`2.IndexOfKey(`0)">
          <source>The zero-based index of <ph id="ph1">&lt;paramref name="key" /&gt;</ph> within the entire <ph id="ph2">&lt;see cref="T:System.Collections.Generic.SortedList`2" /&gt;</ph>, if found; otherwise, -1.</source>
          <target state="translated">Índice de base cero de <ph id="ph1">&lt;paramref name="key" /&gt;</ph> de la totalidad de <ph id="ph2">&lt;see cref="T:System.Collections.Generic.SortedList`2" /&gt;</ph>, si se encuentra; en caso contrario, -1.</target>       </trans-unit>
        <trans-unit id="323" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.SortedList`2.IndexOfKey(`0)">
          <source>This method performs a binary search; therefore, this method is an O(log <ph id="ph1">`n`</ph>) operation, where <ph id="ph2">`n`</ph> is <ph id="ph3">&lt;xref:System.Collections.Generic.SortedList%602.Count%2A&gt;</ph>.</source>
          <target state="translated">Este método realiza una búsqueda binaria; por lo tanto, este método es una O (registro <ph id="ph1">`n`</ph>) operación, donde <ph id="ph2">`n`</ph> es <ph id="ph3">&lt;xref:System.Collections.Generic.SortedList%602.Count%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="324" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.SortedList`2.IndexOfKey(`0)">
          <source><ph id="ph1">&lt;paramref name="key" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="key" /&gt;</ph> es <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="325" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.SortedList`2.IndexOfValue(`1)">
          <source>The value to locate in the <ph id="ph1">&lt;see cref="T:System.Collections.Generic.SortedList`2" /&gt;</ph>.</source>
          <target state="translated">Valor que se va a buscar en la colección <ph id="ph1">&lt;see cref="T:System.Collections.Generic.SortedList`2" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="326" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.SortedList`2.IndexOfValue(`1)">
          <source>The value can be <ph id="ph1">&lt;see langword="null" /&gt;</ph> for reference types.</source>
          <target state="translated">El valor puede ser <ph id="ph1">&lt;see langword="null" /&gt;</ph> para los tipos de referencia.</target>       </trans-unit>
        <trans-unit id="327" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.SortedList`2.IndexOfValue(`1)">
          <source>Searches for the specified value and returns the zero-based index of the first occurrence within the entire <ph id="ph1">&lt;see cref="T:System.Collections.Generic.SortedList`2" /&gt;</ph>.</source>
          <target state="translated">Busca el valor especificado y devuelve el índice de base cero de la primera aparición de la totalidad de <ph id="ph1">&lt;see cref="T:System.Collections.Generic.SortedList`2" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="328" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.SortedList`2.IndexOfValue(`1)">
          <source>The zero-based index of the first occurrence of <ph id="ph1">&lt;paramref name="value" /&gt;</ph> within the entire <ph id="ph2">&lt;see cref="T:System.Collections.Generic.SortedList`2" /&gt;</ph>, if found; otherwise, -1.</source>
          <target state="translated">Índice de base cero de la primera aparición de <ph id="ph1">&lt;paramref name="value" /&gt;</ph> en la totalidad de <ph id="ph2">&lt;see cref="T:System.Collections.Generic.SortedList`2" /&gt;</ph>, si se encuentra; en caso contrario, -1.</target>       </trans-unit>
        <trans-unit id="329" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.SortedList`2.IndexOfValue(`1)">
          <source>This method determines equality using the default comparer <ph id="ph1">&lt;xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType&gt;</ph> for the value type <ph id="ph2">`TValue`</ph>.</source>
          <target state="translated">Este método determina la igualdad utilizando el comparador predeterminado <ph id="ph1">&lt;xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType&gt;</ph> para el tipo de valor <ph id="ph2">`TValue`</ph>.</target>       </trans-unit>
        <trans-unit id="330" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.SortedList`2.IndexOfValue(`1)">
          <source><ph id="ph1">&lt;xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType&gt;</ph> checks whether the value type <ph id="ph2">`TValue`</ph> implements <ph id="ph3">&lt;xref:System.IComparable%601?displayProperty=nameWithType&gt;</ph> and uses that implementation, if available.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType&gt;</ph> comprueba si el valor de tipo <ph id="ph2">`TValue`</ph> implementa <ph id="ph3">&lt;xref:System.IComparable%601?displayProperty=nameWithType&gt;</ph> y utiliza esa implementación, si está disponible.</target>       </trans-unit>
        <trans-unit id="331" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.SortedList`2.IndexOfValue(`1)">
          <source>If not, <ph id="ph1">&lt;xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType&gt;</ph> checks whether the value type <ph id="ph2">`TValue`</ph> implements <ph id="ph3">&lt;xref:System.IComparable?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">Si no es así, <ph id="ph1">&lt;xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType&gt;</ph> comprueba si el valor de tipo <ph id="ph2">`TValue`</ph> implementa <ph id="ph3">&lt;xref:System.IComparable?displayProperty=nameWithType&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="332" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.SortedList`2.IndexOfValue(`1)">
          <source>If the value type <ph id="ph1">`TValue`</ph> does not implement either interface, this method uses <ph id="ph2">&lt;xref:System.Object.Equals%2A?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">Si el tipo de valor <ph id="ph1">`TValue`</ph> implementa ninguna de estas interfaces, este método usa <ph id="ph2">&lt;xref:System.Object.Equals%2A?displayProperty=nameWithType&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="333" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.SortedList`2.IndexOfValue(`1)">
          <source>This method performs a linear search; therefore, the average execution time is proportional to <ph id="ph1">&lt;xref:System.Collections.Generic.SortedList%602.Count%2A&gt;</ph>.</source>
          <target state="translated">Este método realiza una búsqueda lineal; por lo tanto, el tiempo medio de ejecución es proporcional al <ph id="ph1">&lt;xref:System.Collections.Generic.SortedList%602.Count%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="334" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.SortedList`2.IndexOfValue(`1)">
          <source>That is, this method is an O(<ph id="ph1">`n`</ph>) operation, where <ph id="ph2">`n`</ph> is <ph id="ph3">&lt;xref:System.Collections.Generic.SortedList%602.Count%2A&gt;</ph>.</source>
          <target state="translated">Es decir, este método es una O (<ph id="ph1">`n`</ph>) operación, donde <ph id="ph2">`n`</ph> es <ph id="ph3">&lt;xref:System.Collections.Generic.SortedList%602.Count%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="335" translate="yes" xml:space="preserve" uid="P:System.Collections.Generic.SortedList`2.Item(`0)">
          <source>The key whose value to get or set.</source>
          <target state="translated">Clave cuyo valor se va a obtener o a establecer.</target>       </trans-unit>
        <trans-unit id="336" translate="yes" xml:space="preserve" uid="P:System.Collections.Generic.SortedList`2.Item(`0)">
          <source>Gets or sets the value associated with the specified key.</source>
          <target state="translated">Obtiene o establece el valor asociado a la clave especificada.</target>       </trans-unit>
        <trans-unit id="337" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.SortedList`2.Item(`0)">
          <source>The value associated with the specified key.</source>
          <target state="translated">Valor asociado a la clave especificada.</target>       </trans-unit>
        <trans-unit id="338" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.SortedList`2.Item(`0)">
          <source>If the specified key is not found, a get operation throws a <ph id="ph1">&lt;see cref="T:System.Collections.Generic.KeyNotFoundException" /&gt;</ph> and a set operation creates a new element using the specified key.</source>
          <target state="translated">Si no se encuentra la clave especificada, en el caso de una operación Get se producirá una excepción <ph id="ph1">&lt;see cref="T:System.Collections.Generic.KeyNotFoundException" /&gt;</ph>, y en el caso de una operación Set, se creará un nuevo elemento utilizando la clave especificada.</target>       </trans-unit>
        <trans-unit id="339" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.SortedList`2.Item(`0)">
          <source>This property provides the ability to access a specific element in the collection by using the following syntax: <ph id="ph1">`myCollection[key]`</ph>.</source>
          <target state="translated">Esta propiedad permite obtener acceso a un elemento específico de la colección utilizando la sintaxis siguiente: <ph id="ph1">`myCollection[key]`</ph>.</target>       </trans-unit>
        <trans-unit id="340" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.SortedList`2.Item(`0)">
          <source>A key cannot be <ph id="ph1">`null`</ph>, but a value can be, if the type of values in the list, <ph id="ph2">`TValue`</ph>, is a reference type.</source>
          <target state="translated">No puede ser una clave <ph id="ph1">`null`</ph>, pero un valor valor puede ser, si el tipo de valores en la lista, <ph id="ph2">`TValue`</ph>, es un tipo de referencia.</target>       </trans-unit>
        <trans-unit id="341" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.SortedList`2.Item(`0)">
          <source>If the key is not found when a value is being retrieved, <ph id="ph1">&lt;xref:System.Collections.Generic.KeyNotFoundException&gt;</ph> is thrown.</source>
          <target state="translated">Si no se encuentra la clave cuando se está recuperando un valor, <ph id="ph1">&lt;xref:System.Collections.Generic.KeyNotFoundException&gt;</ph> se produce.</target>       </trans-unit>
        <trans-unit id="342" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.SortedList`2.Item(`0)">
          <source>If the key is not found when a value is being set, the key and value are added.</source>
          <target state="translated">Si no se encuentra la clave cuando se establece un valor, se agregan la clave y valor.</target>       </trans-unit>
        <trans-unit id="343" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.SortedList`2.Item(`0)">
          <source>You can also use the <ph id="ph1">&lt;xref:System.Collections.Generic.SortedList%602.Item%2A&gt;</ph> property to add new elements by setting the value of a key that does not exist in the <ph id="ph2">&lt;xref:System.Collections.Generic.SortedList%602&gt;</ph>; for example, <ph id="ph3">`myCollection["myNonexistentKey"] = myValue`</ph>.</source>
          <target state="translated">También puede usar el <ph id="ph1">&lt;xref:System.Collections.Generic.SortedList%602.Item%2A&gt;</ph> propiedad para agregar nuevos elementos estableciendo el valor de una clave que no existe en el <ph id="ph2">&lt;xref:System.Collections.Generic.SortedList%602&gt;</ph>; por ejemplo, <ph id="ph3">`myCollection["myNonexistentKey"] = myValue`</ph>.</target>       </trans-unit>
        <trans-unit id="344" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.SortedList`2.Item(`0)">
          <source>However, if the specified key already exists in the <ph id="ph1">&lt;xref:System.Collections.Generic.SortedList%602&gt;</ph>, setting the <ph id="ph2">&lt;xref:System.Collections.Generic.SortedList%602.Item%2A&gt;</ph> property overwrites the old value.</source>
          <target state="translated">Sin embargo, si la clave especificada ya existe en el <ph id="ph1">&lt;xref:System.Collections.Generic.SortedList%602&gt;</ph>, y establece el <ph id="ph2">&lt;xref:System.Collections.Generic.SortedList%602.Item%2A&gt;</ph> propiedad sobrescribe el valor anterior.</target>       </trans-unit>
        <trans-unit id="345" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.SortedList`2.Item(`0)">
          <source>In contrast, the <ph id="ph1">&lt;xref:System.Collections.Generic.SortedList%602.Add%2A&gt;</ph> method does not modify existing elements.</source>
          <target state="translated">En cambio, la <ph id="ph1">&lt;xref:System.Collections.Generic.SortedList%602.Add%2A&gt;</ph> método no modifica los elementos existentes.</target>       </trans-unit>
        <trans-unit id="346" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.SortedList`2.Item(`0)">
          <source>The C# language uses the  keyword to define the indexers instead of implementing the <ph id="ph1">&lt;xref:System.Collections.Generic.SortedList%602.Item%2A&gt;</ph> property.</source>
          <target state="translated">El lenguaje C# utiliza la palabra clave para definir los indizadores en lugar de implementar la <ph id="ph1">&lt;xref:System.Collections.Generic.SortedList%602.Item%2A&gt;</ph> propiedad.</target>       </trans-unit>
        <trans-unit id="347" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.SortedList`2.Item(`0)">
          <source>Visual Basic implements <ph id="ph1">&lt;xref:System.Collections.Generic.SortedList%602.Item%2A&gt;</ph> as a default property, which provides the same indexing functionality.</source>
          <target state="translated">Visual Basic implementa <ph id="ph1">&lt;xref:System.Collections.Generic.SortedList%602.Item%2A&gt;</ph> como propiedad predeterminada, lo que proporciona la misma funcionalidad de indización.</target>       </trans-unit>
        <trans-unit id="348" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.SortedList`2.Item(`0)">
          <source>Retrieving the value of this property is an O(log <ph id="ph1">`n`</ph>) operation, where n is <ph id="ph2">&lt;xref:System.Collections.Generic.SortedList%602.Count%2A&gt;</ph>.</source>
          <target state="translated">Recuperación del valor de esta propiedad es una O (registro <ph id="ph1">`n`</ph>) operación, donde n es <ph id="ph2">&lt;xref:System.Collections.Generic.SortedList%602.Count%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="349" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.SortedList`2.Item(`0)">
          <source>Setting the property is an O(log <ph id="ph1">`n`</ph>) operation if the key is already in the <ph id="ph2">&lt;xref:System.Collections.Generic.SortedList%602&gt;</ph>.</source>
          <target state="translated">Establecer la propiedad es una O (registro <ph id="ph1">`n`</ph>) operación si la clave ya está en el <ph id="ph2">&lt;xref:System.Collections.Generic.SortedList%602&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="350" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.SortedList`2.Item(`0)">
          <source>If the key is not in the list, setting the property is an O(<ph id="ph1">`n`</ph>) operation for unsorted data, or O(log <ph id="ph2">`n`</ph>) if the new element is added at the end of the list.</source>
          <target state="translated">Si la clave no está en la lista, establecer la propiedad es una O (<ph id="ph1">`n`</ph>) operación para datos no ordenados, u O (registro <ph id="ph2">`n`</ph>) si el nuevo elemento se agrega al final de la lista.</target>       </trans-unit>
        <trans-unit id="351" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.SortedList`2.Item(`0)">
          <source>If insertion causes a resize, the operation is O(<ph id="ph1">`n`</ph>).</source>
          <target state="translated">Si la inserción provoca un cambio de tamaño, la operación es O (<ph id="ph1">`n`</ph>).</target>       </trans-unit>
        <trans-unit id="352" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.SortedList`2.Item(`0)">
          <source>The following code example uses the <ph id="ph1">&lt;xref:System.Collections.Generic.SortedList%602.Item%2A&gt;</ph> property (the indexer in C#) to retrieve values, demonstrating that a <ph id="ph2">&lt;xref:System.Collections.Generic.KeyNotFoundException&gt;</ph> is thrown when a requested key is not present, and showing that the value associated with a key can be replaced.</source>
          <target state="translated">El siguiente ejemplo de código utiliza el <ph id="ph1">&lt;xref:System.Collections.Generic.SortedList%602.Item%2A&gt;</ph> propiedad (el indizador en C#) para recuperar valores, lo que indica que un <ph id="ph2">&lt;xref:System.Collections.Generic.KeyNotFoundException&gt;</ph> se produce cuando una clave solicitada no está presente y que muestra que el valor asociado a una clave se puede reemplazar.</target>       </trans-unit>
        <trans-unit id="353" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.SortedList`2.Item(`0)">
          <source>The example also shows how to use the <ph id="ph1">&lt;xref:System.Collections.Generic.SortedList%602.TryGetValue%2A&gt;</ph> method as a more efficient way to retrieve values if a program often must try key values that are not in the sorted list.</source>
          <target state="translated">El ejemplo también muestra cómo utilizar el <ph id="ph1">&lt;xref:System.Collections.Generic.SortedList%602.TryGetValue%2A&gt;</ph> método como una forma más eficaz de recuperar valores si un programa debe probar con frecuencia valores de clave que no están en la lista ordenada.</target>       </trans-unit>
        <trans-unit id="354" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.SortedList`2.Item(`0)">
          <source>This code example is part of a larger example provided for the <ph id="ph1">&lt;xref:System.Collections.Generic.SortedList%602&gt;</ph> class.</source>
          <target state="translated">Este ejemplo de código forma parte de un ejemplo mayor proporcionado para el <ph id="ph1">&lt;xref:System.Collections.Generic.SortedList%602&gt;</ph> clase.</target>       </trans-unit>
        <trans-unit id="355" translate="yes" xml:space="preserve" uid="P:System.Collections.Generic.SortedList`2.Item(`0)">
          <source><ph id="ph1">&lt;paramref name="key" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="key" /&gt;</ph> es <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="356" translate="yes" xml:space="preserve" uid="P:System.Collections.Generic.SortedList`2.Item(`0)">
          <source>The property is retrieved and <ph id="ph1">&lt;paramref name="key" /&gt;</ph> does not exist in the collection.</source>
          <target state="translated">Se ha recuperado la propiedad y <ph id="ph1">&lt;paramref name="key" /&gt;</ph> no existe en la colección.</target>       </trans-unit>
        <trans-unit id="357" translate="yes" xml:space="preserve" uid="P:System.Collections.Generic.SortedList`2.Keys">
          <source>Gets a collection containing the keys in the <ph id="ph1">&lt;see cref="T:System.Collections.Generic.SortedList`2" /&gt;</ph>, in sorted order.</source>
          <target state="translated">Obtiene una colección que contiene las claves de <ph id="ph1">&lt;see cref="T:System.Collections.Generic.SortedList`2" /&gt;</ph>, de forma ordenada.</target>       </trans-unit>
        <trans-unit id="358" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.SortedList`2.Keys">
          <source>A <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IList`1" /&gt;</ph> containing the keys in the <ph id="ph2">&lt;see cref="T:System.Collections.Generic.SortedList`2" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Collections.Generic.IList`1" /&gt;</ph> que contiene las claves de <ph id="ph2">&lt;see cref="T:System.Collections.Generic.SortedList`2" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="359" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.SortedList`2.Keys">
          <source>The order of the keys in the <ph id="ph1">&lt;xref:System.Collections.Generic.IList%601&gt;</ph> is the same as the order in the <ph id="ph2">&lt;xref:System.Collections.Generic.SortedList%602&gt;</ph>.</source>
          <target state="translated">El orden de las claves de la <ph id="ph1">&lt;xref:System.Collections.Generic.IList%601&gt;</ph> es el mismo que el orden en el <ph id="ph2">&lt;xref:System.Collections.Generic.SortedList%602&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="360" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.SortedList`2.Keys">
          <source>The returned <ph id="ph1">&lt;xref:System.Collections.Generic.IList%601&gt;</ph> is not a static copy; instead, the <ph id="ph2">&lt;xref:System.Collections.Generic.IList%601&gt;</ph> refers back to the keys in the original <ph id="ph3">&lt;xref:System.Collections.Generic.SortedList%602&gt;</ph>.</source>
          <target state="translated">El valor devuelto <ph id="ph1">&lt;xref:System.Collections.Generic.IList%601&gt;</ph> no es una copia estática; en su lugar, el <ph id="ph2">&lt;xref:System.Collections.Generic.IList%601&gt;</ph> hace referencia a las claves de la versión original <ph id="ph3">&lt;xref:System.Collections.Generic.SortedList%602&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="361" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.SortedList`2.Keys">
          <source>Therefore, changes to the <ph id="ph1">&lt;xref:System.Collections.Generic.SortedList%602&gt;</ph> continue to be reflected in the <ph id="ph2">&lt;xref:System.Collections.Generic.IList%601&gt;</ph>.</source>
          <target state="translated">Por consiguiente, los cambios a la <ph id="ph1">&lt;xref:System.Collections.Generic.SortedList%602&gt;</ph> continuarán reflejarse en el <ph id="ph2">&lt;xref:System.Collections.Generic.IList%601&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="362" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.SortedList`2.Keys">
          <source>The collection returned by the <ph id="ph1">&lt;xref:System.Collections.Generic.SortedList%602.Keys%2A&gt;</ph> property provides an efficient way to retrieve keys by index.</source>
          <target state="translated">La colección devuelta por la <ph id="ph1">&lt;xref:System.Collections.Generic.SortedList%602.Keys%2A&gt;</ph> propiedad proporciona una manera eficaz de recuperar claves por índice.</target>       </trans-unit>
        <trans-unit id="363" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.SortedList`2.Keys">
          <source>It is not necessary to regenerate the list when the property is accessed, because the list is just a wrapper for the internal array of keys.</source>
          <target state="translated">No es necesario volver a generar la lista cuando se tiene acceso a la propiedad, porque la lista es simplemente un contenedor para la matriz interna de claves.</target>       </trans-unit>
        <trans-unit id="364" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.SortedList`2.Keys">
          <source>The following code shows the use of the <ph id="ph1">&lt;xref:System.Collections.Generic.SortedList%602.Keys%2A&gt;</ph> property for indexed retrieval of keys from a sorted list of elements with string keys:</source>
          <target state="translated">El código siguiente muestra el uso de la <ph id="ph1">&lt;xref:System.Collections.Generic.SortedList%602.Keys%2A&gt;</ph> propiedad para la recuperación indizada de claves de una lista ordenada de elementos con claves de cadena:</target>       </trans-unit>
        <trans-unit id="365" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.SortedList`2.Keys">
          <source>Retrieving the value of this property is an O(1) operation.</source>
          <target state="translated">La recuperación del valor de esta propiedad es una operación O(1).</target>       </trans-unit>
        <trans-unit id="366" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.SortedList`2.Keys">
          <source>The following code example shows how to enumerate the keys in the sorted list using the <ph id="ph1">&lt;xref:System.Collections.Generic.SortedList%602.Keys%2A&gt;</ph> property, and how to enumerate the keys and values in the sorted list.</source>
          <target state="translated">En el ejemplo de código siguiente se muestra cómo enumerar las claves de la lista ordenada utilizando la <ph id="ph1">&lt;xref:System.Collections.Generic.SortedList%602.Keys%2A&gt;</ph> propiedad y cómo enumerar las claves y valores en la lista ordenada.</target>       </trans-unit>
        <trans-unit id="367" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.SortedList`2.Keys">
          <source>The example also shows how to use the <ph id="ph1">&lt;xref:System.Collections.Generic.SortedList%602.Keys%2A&gt;</ph> property for efficient indexed retrieval of keys.</source>
          <target state="translated">El ejemplo también muestra cómo utilizar el <ph id="ph1">&lt;xref:System.Collections.Generic.SortedList%602.Keys%2A&gt;</ph> propiedad para la recuperación indizada eficaz de claves.</target>       </trans-unit>
        <trans-unit id="368" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.SortedList`2.Keys">
          <source>This code is part of a larger example that can be compiled and executed.</source>
          <target state="translated">Este código forma parte de un ejemplo más extenso que puede compilar y ejecutar.</target>       </trans-unit>
        <trans-unit id="369" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.SortedList`2.Keys">
          <source>See <ph id="ph1">&lt;xref:System.Collections.Generic.SortedList%602&gt;</ph>.</source>
          <target state="translated">Vea <ph id="ph1">&lt;xref:System.Collections.Generic.SortedList%602&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="370" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.SortedList`2.Remove(`0)">
          <source>The key of the element to remove.</source>
          <target state="translated">Clave del elemento que se va a quitar.</target>       </trans-unit>
        <trans-unit id="371" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.SortedList`2.Remove(`0)">
          <source>Removes the element with the specified key from the <ph id="ph1">&lt;see cref="T:System.Collections.Generic.SortedList`2" /&gt;</ph>.</source>
          <target state="translated">Quita el elemento con la clave especificada de <ph id="ph1">&lt;see cref="T:System.Collections.Generic.SortedList`2" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="372" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.SortedList`2.Remove(`0)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the element is successfully removed; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">Es <ph id="ph1">&lt;see langword="true" /&gt;</ph> si el elemento se quita correctamente; en caso contrario, es <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="373" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.SortedList`2.Remove(`0)">
          <source>This method also returns <ph id="ph1">&lt;see langword="false" /&gt;</ph> if <ph id="ph2">&lt;paramref name="key" /&gt;</ph> was not found in the original <ph id="ph3">&lt;see cref="T:System.Collections.Generic.SortedList`2" /&gt;</ph>.</source>
          <target state="translated">Este método también devuelve <ph id="ph1">&lt;see langword="false" /&gt;</ph> si no se encontró <ph id="ph2">&lt;paramref name="key" /&gt;</ph> en el <ph id="ph3">&lt;see cref="T:System.Collections.Generic.SortedList`2" /&gt;</ph> original.</target>       </trans-unit>
        <trans-unit id="374" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.SortedList`2.Remove(`0)">
          <source>This method performs a binary search; however, the elements are moved up to fill in the open spot, so this method is an O(<ph id="ph1">`n`</ph>) operation, where <ph id="ph2">`n`</ph> is <ph id="ph3">&lt;xref:System.Collections.Generic.SortedList%602.Count%2A&gt;</ph>.</source>
          <target state="translated">Este método realiza una búsqueda binaria; Sin embargo, los elementos se mueven para rellenar el espacio abierto, por lo que este método es una O (<ph id="ph1">`n`</ph>) operación, donde <ph id="ph2">`n`</ph> es <ph id="ph3">&lt;xref:System.Collections.Generic.SortedList%602.Count%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="375" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.SortedList`2.Remove(`0)">
          <source>The following code example shows how to remove a key/value pair from the sorted list using the <ph id="ph1">&lt;xref:System.Collections.Generic.SortedList%602.Remove%2A&gt;</ph> method.</source>
          <target state="translated">En el ejemplo de código siguiente se muestra cómo quitar un par clave/valor de la lista ordenada, utilizando la <ph id="ph1">&lt;xref:System.Collections.Generic.SortedList%602.Remove%2A&gt;</ph> método.</target>       </trans-unit>
        <trans-unit id="376" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.SortedList`2.Remove(`0)">
          <source>This code example is part of a larger example provided for the <ph id="ph1">&lt;xref:System.Collections.Generic.SortedList%602&gt;</ph> class.</source>
          <target state="translated">Este ejemplo de código forma parte de un ejemplo mayor proporcionado para el <ph id="ph1">&lt;xref:System.Collections.Generic.SortedList%602&gt;</ph> clase.</target>       </trans-unit>
        <trans-unit id="377" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.SortedList`2.Remove(`0)">
          <source><ph id="ph1">&lt;paramref name="key" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="key" /&gt;</ph> es <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="378" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.SortedList`2.RemoveAt(System.Int32)">
          <source>The zero-based index of the element to remove.</source>
          <target state="translated">Índice de base cero del elemento que se va a quitar.</target>       </trans-unit>
        <trans-unit id="379" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.SortedList`2.RemoveAt(System.Int32)">
          <source>Removes the element at the specified index of the <ph id="ph1">&lt;see cref="T:System.Collections.Generic.SortedList`2" /&gt;</ph>.</source>
          <target state="translated">Quita el elemento situado en el índice especificado de <ph id="ph1">&lt;see cref="T:System.Collections.Generic.SortedList`2" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="380" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.SortedList`2.RemoveAt(System.Int32)">
          <source>This method performs a binary search; however, the elements are moved up to fill in the open spot, so this method is an O(<ph id="ph1">`n`</ph>) operation, where <ph id="ph2">`n`</ph> is <ph id="ph3">&lt;xref:System.Collections.Generic.SortedList%602.Count%2A&gt;</ph>.</source>
          <target state="translated">Este método realiza una búsqueda binaria; Sin embargo, los elementos se mueven para rellenar el espacio abierto, por lo que este método es una O (<ph id="ph1">`n`</ph>) operación, donde <ph id="ph2">`n`</ph> es <ph id="ph3">&lt;xref:System.Collections.Generic.SortedList%602.Count%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="381" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.SortedList`2.RemoveAt(System.Int32)">
          <source><ph id="ph1">&lt;paramref name="index" /&gt;</ph> is less than zero.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="index" /&gt;</ph> es menor que cero.</target>       </trans-unit>
        <trans-unit id="382" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.SortedList`2.RemoveAt(System.Int32)">
          <source>-or-</source>
          <target state="translated">O bien</target>       </trans-unit>
        <trans-unit id="383" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.SortedList`2.RemoveAt(System.Int32)">
          <source><ph id="ph1">&lt;paramref name="index" /&gt;</ph> is equal to or greater than <ph id="ph2">&lt;see cref="P:System.Collections.Generic.SortedList`2.Count" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="index" /&gt;</ph> es igual o mayor que <ph id="ph2">&lt;see cref="P:System.Collections.Generic.SortedList`2.Count" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="384" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.SortedList`2.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
          <source>The one-dimensional <ph id="ph1">&lt;see cref="T:System.Array" /&gt;</ph> that is the destination of the elements copied from <ph id="ph2">&lt;see cref="T:System.Collections.ICollection" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Array" /&gt;</ph> unidimensional que constituye el destino de los elementos copiados de <ph id="ph2">&lt;see cref="T:System.Collections.ICollection" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="385" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.SortedList`2.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Array" /&gt;</ph> must have zero-based indexing.</source>
          <target state="translated">La matriz <ph id="ph1">&lt;see cref="T:System.Array" /&gt;</ph> debe tener una indización de base cero.</target>       </trans-unit>
        <trans-unit id="386" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.SortedList`2.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
          <source>The zero-based index in <bpt id="p1">&lt;c&gt;</bpt>array<ept id="p1">&lt;/c&gt;</ept> at which copying begins.</source>
          <target state="translated">Índice de base cero de <bpt id="p1">&lt;c&gt;</bpt>array<ept id="p1">&lt;/c&gt;</ept> donde comienza la copia.</target>       </trans-unit>
        <trans-unit id="387" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.SortedList`2.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
          <source>Copies the elements of the <ph id="ph1">&lt;see cref="T:System.Collections.ICollection" /&gt;</ph> to an <ph id="ph2">&lt;see cref="T:System.Array" /&gt;</ph>, starting at a particular <ph id="ph3">&lt;see cref="T:System.Array" /&gt;</ph> index.</source>
          <target state="translated">Copia los elementos de <ph id="ph1">&lt;see cref="T:System.Collections.ICollection" /&gt;</ph> en <ph id="ph2">&lt;see cref="T:System.Array" /&gt;</ph>, empezando por un índice determinado de <ph id="ph3">&lt;see cref="T:System.Array" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="388" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.SortedList`2.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
          <source>If the type of the source <ph id="ph1">&lt;xref:System.Collections.ICollection&gt;</ph> cannot be cast automatically to the type of the destination <ph id="ph2">`array`</ph>, the non-generic implementations of <ph id="ph3">&lt;xref:System.Collections.ICollection.CopyTo%2A?displayProperty=nameWithType&gt;</ph> throw <ph id="ph4">&lt;xref:System.InvalidCastException&gt;</ph>, whereas the generic implementations throw <ph id="ph5">&lt;xref:System.ArgumentException&gt;</ph>.</source>
          <target state="translated">Si el tipo del origen de <ph id="ph1">&lt;xref:System.Collections.ICollection&gt;</ph> no puede convertirse automáticamente al tipo del destino de <ph id="ph2">`array`</ph>, las implementaciones no genéricas de <ph id="ph3">&lt;xref:System.Collections.ICollection.CopyTo%2A?displayProperty=nameWithType&gt;</ph> throw <ph id="ph4">&lt;xref:System.InvalidCastException&gt;</ph>, mientras que las implementaciones genéricas inician <ph id="ph5">&lt;xref:System.ArgumentException&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="389" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.SortedList`2.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
          <source>This method is an O(<ph id="ph1">`n`</ph>) operation, where <ph id="ph2">`n`</ph> is <ph id="ph3">&lt;xref:System.Collections.Generic.SortedList%602.Count%2A&gt;</ph>.</source>
          <target state="translated">Este método es una O (<ph id="ph1">`n`</ph>) operación, donde <ph id="ph2">`n`</ph> es <ph id="ph3">&lt;xref:System.Collections.Generic.SortedList%602.Count%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="390" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.SortedList`2.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="array" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="array" /&gt;</ph> es <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="391" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.SortedList`2.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="arrayIndex" /&gt;</ph> is less than zero.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="arrayIndex" /&gt;</ph> es menor que cero.</target>       </trans-unit>
        <trans-unit id="392" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.SortedList`2.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="array" /&gt;</ph> is multidimensional.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="array" /&gt;</ph> es multidimensional.</target>       </trans-unit>
        <trans-unit id="393" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.SortedList`2.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
          <source>-or-</source>
          <target state="translated">O bien</target>       </trans-unit>
        <trans-unit id="394" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.SortedList`2.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="array" /&gt;</ph> does not have zero-based indexing.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="array" /&gt;</ph> no tiene índices de base cero.</target>       </trans-unit>
        <trans-unit id="395" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.SortedList`2.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
          <source>-or-</source>
          <target state="translated">O bien</target>       </trans-unit>
        <trans-unit id="396" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.SortedList`2.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
          <source>The number of elements in the source <ph id="ph1">&lt;see cref="T:System.Collections.ICollection" /&gt;</ph> is greater than the available space from <ph id="ph2">&lt;paramref name="arrayIndex" /&gt;</ph> to the end of the destination <ph id="ph3">&lt;paramref name="array" /&gt;</ph>.</source>
          <target state="translated">El número de elementos de la <ph id="ph1">&lt;see cref="T:System.Collections.ICollection" /&gt;</ph> de origen es mayor que el espacio disponible desde <ph id="ph2">&lt;paramref name="arrayIndex" /&gt;</ph> hasta el final de la <ph id="ph3">&lt;paramref name="array" /&gt;</ph> de destino.</target>       </trans-unit>
        <trans-unit id="397" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.SortedList`2.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
          <source>-or-</source>
          <target state="translated">O bien</target>       </trans-unit>
        <trans-unit id="398" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.SortedList`2.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
          <source>The type of the source <ph id="ph1">&lt;see cref="T:System.Collections.ICollection" /&gt;</ph> cannot be cast automatically to the type of the destination <ph id="ph2">&lt;paramref name="array" /&gt;</ph>.</source>
          <target state="translated">El tipo de la <ph id="ph1">&lt;see cref="T:System.Collections.ICollection" /&gt;</ph> de origen no puede convertirse automáticamente al tipo de la <ph id="ph2">&lt;paramref name="array" /&gt;</ph> de destino.</target>       </trans-unit>
        <trans-unit id="399" translate="yes" xml:space="preserve" uid="P:System.Collections.Generic.SortedList`2.System#Collections#ICollection#IsSynchronized">
          <source>Gets a value indicating whether access to the <ph id="ph1">&lt;see cref="T:System.Collections.ICollection" /&gt;</ph> is synchronized (thread safe).</source>
          <target state="translated">Obtiene un valor que indica si el acceso a la interfaz <ph id="ph1">&lt;see cref="T:System.Collections.ICollection" /&gt;</ph> está sincronizado (es seguro para subprocesos).</target>       </trans-unit>
        <trans-unit id="400" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.SortedList`2.System#Collections#ICollection#IsSynchronized">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if access to the <ph id="ph2">&lt;see cref="T:System.Collections.ICollection" /&gt;</ph> is synchronized (thread safe); otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">Es <ph id="ph1">&lt;see langword="true" /&gt;</ph> si el acceso a <ph id="ph2">&lt;see cref="T:System.Collections.ICollection" /&gt;</ph> está sincronizado (es seguro para subprocesos); de lo contrario, es <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="401" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.SortedList`2.System#Collections#ICollection#IsSynchronized">
          <source>In the default implementation of <ph id="ph1">&lt;see cref="T:System.Collections.Generic.SortedList`2" /&gt;</ph>, this property always returns <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">En la implementación predeterminada de <ph id="ph1">&lt;see cref="T:System.Collections.Generic.SortedList`2" /&gt;</ph>, esta propiedad siempre devuelve <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="402" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.SortedList`2.System#Collections#ICollection#IsSynchronized">
          <source>Default implementations of collections in <ph id="ph1">&lt;xref:System.Collections.Generic?displayProperty=nameWithType&gt;</ph> are not synchronized.</source>
          <target state="translated">Las implementaciones de las recopilaciones predeterminadas <ph id="ph1">&lt;xref:System.Collections.Generic?displayProperty=nameWithType&gt;</ph> no están sincronizadas.</target>       </trans-unit>
        <trans-unit id="403" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.SortedList`2.System#Collections#ICollection#IsSynchronized">
          <source>Enumerating through a collection is intrinsically not a thread-safe procedure.</source>
          <target state="translated">Enumerar una colección no es intrínsecamente un procedimiento seguro para subprocesos.</target>       </trans-unit>
        <trans-unit id="404" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.SortedList`2.System#Collections#ICollection#IsSynchronized">
          <source>To guarantee thread safety during enumeration, you can lock the collection during the entire enumeration.</source>
          <target state="translated">A fin de garantizar la seguridad de los subprocesos, se puede bloquear la colección durante toda la enumeración.</target>       </trans-unit>
        <trans-unit id="405" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.SortedList`2.System#Collections#ICollection#IsSynchronized">
          <source>To allow the collection to be accessed by multiple threads for reading and writing, you must implement your own synchronization.</source>
          <target state="translated">Para permitir que varios subprocesos obtengan acceso de lectura y escritura a la colección, debe implementar su propia sincronización.</target>       </trans-unit>
        <trans-unit id="406" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.SortedList`2.System#Collections#ICollection#IsSynchronized">
          <source>The <ph id="ph1">&lt;xref:System.Collections.ICollection.SyncRoot%2A&gt;</ph> property returns an object that can be used to synchronize access to the <ph id="ph2">&lt;xref:System.Collections.ICollection&gt;</ph>.</source>
          <target state="translated">El <ph id="ph1">&lt;xref:System.Collections.ICollection.SyncRoot%2A&gt;</ph> propiedad devuelve un objeto que puede utilizarse para sincronizar el acceso a la <ph id="ph2">&lt;xref:System.Collections.ICollection&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="407" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.SortedList`2.System#Collections#ICollection#IsSynchronized">
          <source>Synchronization is effective only if all threads lock this object before accessing the collection.</source>
          <target state="translated">La sincronización es efectiva sólo si todos los subprocesos bloquean este objeto antes de obtener acceso a la colección.</target>       </trans-unit>
        <trans-unit id="408" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.SortedList`2.System#Collections#ICollection#IsSynchronized">
          <source>Retrieving the value of this property is an O(1) operation.</source>
          <target state="translated">La recuperación del valor de esta propiedad es una operación O(1).</target>       </trans-unit>
        <trans-unit id="409" translate="yes" xml:space="preserve" uid="P:System.Collections.Generic.SortedList`2.System#Collections#ICollection#SyncRoot">
          <source>Gets an object that can be used to synchronize access to the <ph id="ph1">&lt;see cref="T:System.Collections.ICollection" /&gt;</ph>.</source>
          <target state="translated">Obtiene un objeto que se puede usar para sincronizar el acceso a <ph id="ph1">&lt;see cref="T:System.Collections.ICollection" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="410" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.SortedList`2.System#Collections#ICollection#SyncRoot">
          <source>An object that can be used to synchronize access to the <ph id="ph1">&lt;see cref="T:System.Collections.ICollection" /&gt;</ph>.</source>
          <target state="translated">Objeto que se puede usar para sincronizar el acceso a <ph id="ph1">&lt;see cref="T:System.Collections.ICollection" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="411" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.SortedList`2.System#Collections#ICollection#SyncRoot">
          <source>In the default implementation of <ph id="ph1">&lt;see cref="T:System.Collections.Generic.SortedList`2" /&gt;</ph>, this property always returns the current instance.</source>
          <target state="translated">En la implementación predeterminada de <ph id="ph1">&lt;see cref="T:System.Collections.Generic.SortedList`2" /&gt;</ph>, esta propiedad siempre devuelve la instancia actual.</target>       </trans-unit>
        <trans-unit id="412" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.SortedList`2.System#Collections#ICollection#SyncRoot">
          <source>Default implementations of collections in <ph id="ph1">&lt;xref:System.Collections.Generic?displayProperty=nameWithType&gt;</ph> are not synchronized.</source>
          <target state="translated">Las implementaciones de las recopilaciones predeterminadas <ph id="ph1">&lt;xref:System.Collections.Generic?displayProperty=nameWithType&gt;</ph> no están sincronizadas.</target>       </trans-unit>
        <trans-unit id="413" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.SortedList`2.System#Collections#ICollection#SyncRoot">
          <source>Enumerating through a collection is intrinsically not a thread-safe procedure.</source>
          <target state="translated">Enumerar una colección no es intrínsecamente un procedimiento seguro para subprocesos.</target>       </trans-unit>
        <trans-unit id="414" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.SortedList`2.System#Collections#ICollection#SyncRoot">
          <source>To guarantee thread safety during enumeration, you can lock the collection during the entire enumeration.</source>
          <target state="translated">A fin de garantizar la seguridad de los subprocesos, se puede bloquear la colección durante toda la enumeración.</target>       </trans-unit>
        <trans-unit id="415" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.SortedList`2.System#Collections#ICollection#SyncRoot">
          <source>To allow the collection to be accessed by multiple threads for reading and writing, you must implement your own synchronization.</source>
          <target state="translated">Para permitir que varios subprocesos obtengan acceso de lectura y escritura a la colección, debe implementar su propia sincronización.</target>       </trans-unit>
        <trans-unit id="416" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.SortedList`2.System#Collections#ICollection#SyncRoot">
          <source>The <ph id="ph1">&lt;xref:System.Collections.ICollection.SyncRoot%2A&gt;</ph> property returns an object that can be used to synchronize access to the <ph id="ph2">&lt;xref:System.Collections.ICollection&gt;</ph>.</source>
          <target state="translated">El <ph id="ph1">&lt;xref:System.Collections.ICollection.SyncRoot%2A&gt;</ph> propiedad devuelve un objeto que puede utilizarse para sincronizar el acceso a la <ph id="ph2">&lt;xref:System.Collections.ICollection&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="417" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.SortedList`2.System#Collections#ICollection#SyncRoot">
          <source>Synchronization is effective only if all threads lock this object before accessing the collection.</source>
          <target state="translated">La sincronización es efectiva sólo si todos los subprocesos bloquean este objeto antes de obtener acceso a la colección.</target>       </trans-unit>
        <trans-unit id="418" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.SortedList`2.System#Collections#ICollection#SyncRoot">
          <source>The following code shows the use of the <ph id="ph1">&lt;xref:System.Collections.ICollection.SyncRoot%2A&gt;</ph> property for C#, C++, and Visual Basic.</source>
          <target state="translated">El código siguiente muestra el uso de la <ph id="ph1">&lt;xref:System.Collections.ICollection.SyncRoot%2A&gt;</ph> propiedad para C#, C++ y Visual Basic.</target>       </trans-unit>
        <trans-unit id="419" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.SortedList`2.System#Collections#ICollection#SyncRoot">
          <source>Retrieving the value of this property is an O(1) operation.</source>
          <target state="translated">La recuperación del valor de esta propiedad es una operación O(1).</target>       </trans-unit>
        <trans-unit id="420" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.SortedList`2.System#Collections#IDictionary#Add(System.Object,System.Object)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Object" /&gt;</ph> to use as the key of the element to add.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Object" /&gt;</ph> que se va a utilizar como clave del elemento que se va a agregar.</target>       </trans-unit>
        <trans-unit id="421" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.SortedList`2.System#Collections#IDictionary#Add(System.Object,System.Object)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Object" /&gt;</ph> to use as the value of the element to add.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Object" /&gt;</ph> que se va a utilizar como valor del elemento que se va a agregar.</target>       </trans-unit>
        <trans-unit id="422" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.SortedList`2.System#Collections#IDictionary#Add(System.Object,System.Object)">
          <source>Adds an element with the provided key and value to the <ph id="ph1">&lt;see cref="T:System.Collections.IDictionary" /&gt;</ph>.</source>
          <target state="translated">Agrega un elemento con la clave y el valor proporcionados a <ph id="ph1">&lt;see cref="T:System.Collections.IDictionary" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="423" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.SortedList`2.System#Collections#IDictionary#Add(System.Object,System.Object)">
          <source>You can also use the <ph id="ph1">&lt;xref:System.Collections.IDictionary.Item%2A&gt;</ph> property to add new elements by setting the value of a key that does not exist in the dictionary; for example, <ph id="ph2">`myCollection["myNonexistentKey"] = myValue`</ph>.</source>
          <target state="translated">También puede usar el <ph id="ph1">&lt;xref:System.Collections.IDictionary.Item%2A&gt;</ph> propiedad para agregar nuevos elementos estableciendo el valor de una clave que no existe en el diccionario; por ejemplo, <ph id="ph2">`myCollection["myNonexistentKey"] = myValue`</ph>.</target>       </trans-unit>
        <trans-unit id="424" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.SortedList`2.System#Collections#IDictionary#Add(System.Object,System.Object)">
          <source>However, if the specified key already exists in the dictionary, setting the <ph id="ph1">&lt;xref:System.Collections.IDictionary.Item%2A&gt;</ph> property overwrites the old value.</source>
          <target state="translated">Sin embargo, si la clave especificada ya existe en el diccionario, al establecer el <ph id="ph1">&lt;xref:System.Collections.IDictionary.Item%2A&gt;</ph> propiedad sobrescribe el valor anterior.</target>       </trans-unit>
        <trans-unit id="425" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.SortedList`2.System#Collections#IDictionary#Add(System.Object,System.Object)">
          <source>In contrast, the <ph id="ph1">&lt;xref:System.Collections.IDictionary.Add%2A&gt;</ph> method does not modify existing elements.</source>
          <target state="translated">En cambio, la <ph id="ph1">&lt;xref:System.Collections.IDictionary.Add%2A&gt;</ph> método no modifica los elementos existentes.</target>       </trans-unit>
        <trans-unit id="426" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.SortedList`2.System#Collections#IDictionary#Add(System.Object,System.Object)">
          <source>This method is an O(<ph id="ph1">`n`</ph>) operation for unsorted data, where <ph id="ph2">`n`</ph> is <ph id="ph3">&lt;xref:System.Collections.Generic.SortedList%602.Count%2A&gt;</ph>.</source>
          <target state="translated">Este método es una O (<ph id="ph1">`n`</ph>) operación para datos sin ordenar, donde <ph id="ph2">`n`</ph> es <ph id="ph3">&lt;xref:System.Collections.Generic.SortedList%602.Count%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="427" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.SortedList`2.System#Collections#IDictionary#Add(System.Object,System.Object)">
          <source>It is an O(log <ph id="ph1">`n`</ph>) operation if the new element is added at the end of the list.</source>
          <target state="translated">Es una O (registro <ph id="ph1">`n`</ph>) operación si el nuevo elemento se agrega al final de la lista.</target>       </trans-unit>
        <trans-unit id="428" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.SortedList`2.System#Collections#IDictionary#Add(System.Object,System.Object)">
          <source>If insertion causes a resize, the operation is O(<ph id="ph1">`n`</ph>).</source>
          <target state="translated">Si la inserción provoca un cambio de tamaño, la operación es O (<ph id="ph1">`n`</ph>).</target>       </trans-unit>
        <trans-unit id="429" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.SortedList`2.System#Collections#IDictionary#Add(System.Object,System.Object)">
          <source>The following code example shows how to access the <ph id="ph1">&lt;xref:System.Collections.Generic.SortedList%602&gt;</ph> class through the <ph id="ph2">&lt;xref:System.Collections.IDictionary?displayProperty=nameWithType&gt;</ph> interface.</source>
          <target state="translated">En el ejemplo de código siguiente se muestra cómo obtener acceso a la <ph id="ph1">&lt;xref:System.Collections.Generic.SortedList%602&gt;</ph> clase a través de la <ph id="ph2">&lt;xref:System.Collections.IDictionary?displayProperty=nameWithType&gt;</ph> interfaz.</target>       </trans-unit>
        <trans-unit id="430" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.SortedList`2.System#Collections#IDictionary#Add(System.Object,System.Object)">
          <source>The code example creates an empty <ph id="ph1">&lt;xref:System.Collections.Generic.SortedList%602&gt;</ph> of strings with string keys and uses the <ph id="ph2">&lt;xref:System.Collections.Generic.SortedList%602.System%23Collections%23IDictionary%23Add%2A&gt;</ph> method to add some elements.</source>
          <target state="translated">El ejemplo de código crea vacío <ph id="ph1">&lt;xref:System.Collections.Generic.SortedList%602&gt;</ph> de cadenas con claves de cadena y usa el <ph id="ph2">&lt;xref:System.Collections.Generic.SortedList%602.System%23Collections%23IDictionary%23Add%2A&gt;</ph> método para agregar algunos elementos.</target>       </trans-unit>
        <trans-unit id="431" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.SortedList`2.System#Collections#IDictionary#Add(System.Object,System.Object)">
          <source>The example demonstrates that the <ph id="ph1">&lt;xref:System.Collections.Generic.SortedList%602.System%23Collections%23IDictionary%23Add%2A&gt;</ph> method throws an <ph id="ph2">&lt;xref:System.ArgumentException&gt;</ph> when attempting to add a duplicate key, or when a key or value of the wrong data type is supplied.</source>
          <target state="translated">El ejemplo muestra que la <ph id="ph1">&lt;xref:System.Collections.Generic.SortedList%602.System%23Collections%23IDictionary%23Add%2A&gt;</ph> método produce un <ph id="ph2">&lt;xref:System.ArgumentException&gt;</ph> al intentar agregar una clave duplicada o cuando se proporciona una clave o valor del tipo de datos incorrecto.</target>       </trans-unit>
        <trans-unit id="432" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.SortedList`2.System#Collections#IDictionary#Add(System.Object,System.Object)">
          <source>The code example demonstrates the use of several other members of the <ph id="ph1">&lt;xref:System.Collections.IDictionary?displayProperty=nameWithType&gt;</ph> interface.</source>
          <target state="translated">El ejemplo de código muestra el uso de otros miembros de la <ph id="ph1">&lt;xref:System.Collections.IDictionary?displayProperty=nameWithType&gt;</ph> interfaz.</target>       </trans-unit>
        <trans-unit id="433" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.SortedList`2.System#Collections#IDictionary#Add(System.Object,System.Object)">
          <source><ph id="ph1">&lt;paramref name="key" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="key" /&gt;</ph> es <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="434" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.SortedList`2.System#Collections#IDictionary#Add(System.Object,System.Object)">
          <source><ph id="ph1">&lt;paramref name="key" /&gt;</ph> is of a type that is not assignable to the key type <ph id="ph2">&lt;paramref name="TKey" /&gt;</ph> of the <ph id="ph3">&lt;see cref="T:System.Collections.IDictionary" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="key" /&gt;</ph> es de un tipo que no se puede asignar al tipo de clave <ph id="ph2">&lt;paramref name="TKey" /&gt;</ph> de la colección <ph id="ph3">&lt;see cref="T:System.Collections.IDictionary" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="435" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.SortedList`2.System#Collections#IDictionary#Add(System.Object,System.Object)">
          <source>-or-</source>
          <target state="translated">O bien</target>       </trans-unit>
        <trans-unit id="436" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.SortedList`2.System#Collections#IDictionary#Add(System.Object,System.Object)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> is of a type that is not assignable to the value type <ph id="ph2">&lt;paramref name="TValue" /&gt;</ph> of the <ph id="ph3">&lt;see cref="T:System.Collections.IDictionary" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> es de un tipo que no se puede asignar al tipo de valor <ph id="ph2">&lt;paramref name="TValue" /&gt;</ph> de la interfaz <ph id="ph3">&lt;see cref="T:System.Collections.IDictionary" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="437" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.SortedList`2.System#Collections#IDictionary#Add(System.Object,System.Object)">
          <source>-or-</source>
          <target state="translated">O bien</target>       </trans-unit>
        <trans-unit id="438" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.SortedList`2.System#Collections#IDictionary#Add(System.Object,System.Object)">
          <source>An element with the same key already exists in the <ph id="ph1">&lt;see cref="T:System.Collections.IDictionary" /&gt;</ph>.</source>
          <target state="translated">Ya existe un elemento con la misma clave en <ph id="ph1">&lt;see cref="T:System.Collections.IDictionary" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="439" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.SortedList`2.System#Collections#IDictionary#Contains(System.Object)">
          <source>The key to locate in the <ph id="ph1">&lt;see cref="T:System.Collections.IDictionary" /&gt;</ph>.</source>
          <target state="translated">Clave que se buscará en <ph id="ph1">&lt;see cref="T:System.Collections.IDictionary" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="440" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.SortedList`2.System#Collections#IDictionary#Contains(System.Object)">
          <source>Determines whether the <ph id="ph1">&lt;see cref="T:System.Collections.IDictionary" /&gt;</ph> contains an element with the specified key.</source>
          <target state="translated">Determina si <ph id="ph1">&lt;see cref="T:System.Collections.IDictionary" /&gt;</ph> contiene un elemento con la clave especificada.</target>       </trans-unit>
        <trans-unit id="441" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.SortedList`2.System#Collections#IDictionary#Contains(System.Object)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the <ph id="ph2">&lt;see cref="T:System.Collections.IDictionary" /&gt;</ph> contains an element with the key; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">Es <ph id="ph1">&lt;see langword="true" /&gt;</ph> si <ph id="ph2">&lt;see cref="T:System.Collections.IDictionary" /&gt;</ph> contiene un elemento con la clave; en caso contrario, es <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="442" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.SortedList`2.System#Collections#IDictionary#Contains(System.Object)">
          <source>This method returns <ph id="ph1">`false`</ph> if <ph id="ph2">`key`</ph> is of a type that is not assignable to the key type <ph id="ph3">`TKey`</ph> of the <ph id="ph4">&lt;xref:System.Collections.Generic.SortedList%602&gt;</ph>.</source>
          <target state="translated">Este método devuelve <ph id="ph1">`false`</ph> si <ph id="ph2">`key`</ph> es de un tipo no asignable al tipo de clave <ph id="ph3">`TKey`</ph> de la <ph id="ph4">&lt;xref:System.Collections.Generic.SortedList%602&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="443" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.SortedList`2.System#Collections#IDictionary#Contains(System.Object)">
          <source>This method is an O(log <ph id="ph1">`n`</ph>) operation, where <ph id="ph2">`n`</ph> is <ph id="ph3">&lt;xref:System.Collections.Generic.SortedList%602.Count%2A&gt;</ph>.</source>
          <target state="translated">Este método es una O (registro <ph id="ph1">`n`</ph>) operación, donde <ph id="ph2">`n`</ph> es <ph id="ph3">&lt;xref:System.Collections.Generic.SortedList%602.Count%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="444" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.SortedList`2.System#Collections#IDictionary#Contains(System.Object)">
          <source>The following code example shows how to use the <ph id="ph1">&lt;xref:System.Collections.Generic.SortedList%602.System%23Collections%23IDictionary%23Contains%2A&gt;</ph> method of the <ph id="ph2">&lt;xref:System.Collections.IDictionary?displayProperty=nameWithType&gt;</ph> interface with a <ph id="ph3">&lt;xref:System.Collections.Generic.SortedList%602&gt;</ph>.</source>
          <target state="translated">En el ejemplo de código siguiente se muestra cómo utilizar el <ph id="ph1">&lt;xref:System.Collections.Generic.SortedList%602.System%23Collections%23IDictionary%23Contains%2A&gt;</ph> método de la <ph id="ph2">&lt;xref:System.Collections.IDictionary?displayProperty=nameWithType&gt;</ph> interactuar con un <ph id="ph3">&lt;xref:System.Collections.Generic.SortedList%602&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="445" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.SortedList`2.System#Collections#IDictionary#Contains(System.Object)">
          <source>The example demonstrates that the method returns <ph id="ph1">`false`</ph> if a key of the wrong data type is supplied.</source>
          <target state="translated">En el ejemplo se muestra que el método devuelve <ph id="ph1">`false`</ph> si se proporciona una clave del tipo de datos incorrecto.</target>       </trans-unit>
        <trans-unit id="446" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.SortedList`2.System#Collections#IDictionary#Contains(System.Object)">
          <source>The code example is part of a larger example, including output, provided for the <ph id="ph1">&lt;xref:System.Collections.Generic.SortedList%602.System%23Collections%23IDictionary%23Add%2A&gt;</ph> method.</source>
          <target state="translated">El ejemplo de código forma parte de un ejemplo más extenso, con resultados, que se proporcionan para que el <ph id="ph1">&lt;xref:System.Collections.Generic.SortedList%602.System%23Collections%23IDictionary%23Add%2A&gt;</ph> método.</target>       </trans-unit>
        <trans-unit id="447" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.SortedList`2.System#Collections#IDictionary#Contains(System.Object)">
          <source><ph id="ph1">&lt;paramref name="key" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="key" /&gt;</ph> es <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="448" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.SortedList`2.System#Collections#IDictionary#GetEnumerator">
          <source>Returns an <ph id="ph1">&lt;see cref="T:System.Collections.IDictionaryEnumerator" /&gt;</ph> for the <ph id="ph2">&lt;see cref="T:System.Collections.IDictionary" /&gt;</ph>.</source>
          <target state="translated">Devuelve una interfaz <ph id="ph1">&lt;see cref="T:System.Collections.IDictionaryEnumerator" /&gt;</ph> para la interfaz <ph id="ph2">&lt;see cref="T:System.Collections.IDictionary" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="449" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.SortedList`2.System#Collections#IDictionary#GetEnumerator">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.IDictionaryEnumerator" /&gt;</ph> for the <ph id="ph2">&lt;see cref="T:System.Collections.IDictionary" /&gt;</ph>.</source>
          <target state="translated">Estructura <ph id="ph1">&lt;see cref="T:System.Collections.IDictionaryEnumerator" /&gt;</ph> para la colección <ph id="ph2">&lt;see cref="T:System.Collections.IDictionary" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="450" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.SortedList`2.System#Collections#IDictionary#GetEnumerator">
          <source>The <ph id="ph1">`foreach`</ph> statement of the C# language (<ph id="ph2">`for each`</ph> in C++, <ph id="ph3">`For Each`</ph> in Visual Basic) hides the complexity of the enumerators.</source>
          <target state="translated">El <ph id="ph1">`foreach`</ph> instrucción del lenguaje C# (<ph id="ph2">`for each`</ph> en C++, <ph id="ph3">`For Each`</ph> en Visual Basic) oculta la complejidad de los enumeradores.</target>       </trans-unit>
        <trans-unit id="451" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.SortedList`2.System#Collections#IDictionary#GetEnumerator">
          <source>Therefore, using <ph id="ph1">`foreach`</ph> is recommended, instead of directly manipulating the enumerator.</source>
          <target state="translated">Por lo tanto, se recomienda el uso de <ph id="ph1">`foreach`</ph>, en lugar de manipular directamente el enumerador.</target>       </trans-unit>
        <trans-unit id="452" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.SortedList`2.System#Collections#IDictionary#GetEnumerator">
          <source>Enumerators can be used to read the data in the collection, but they cannot be used to modify the underlying collection.</source>
          <target state="translated">Los enumeradores pueden usarse para leer los datos de la colección, pero no para modificar la colección subyacente.</target>       </trans-unit>
        <trans-unit id="453" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.SortedList`2.System#Collections#IDictionary#GetEnumerator">
          <source>Initially, the enumerator is positioned before the first element in the collection.</source>
          <target state="translated">En principio, el enumerador se coloca antes del primer elemento de la colección.</target>       </trans-unit>
        <trans-unit id="454" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.SortedList`2.System#Collections#IDictionary#GetEnumerator">
          <source><ph id="ph1">&lt;xref:System.Collections.IEnumerator.Reset%2A&gt;</ph> also brings the enumerator back to this position.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.IEnumerator.Reset%2A&gt;</ph> también devuelve el enumerador a esta posición.</target>       </trans-unit>
        <trans-unit id="455" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.SortedList`2.System#Collections#IDictionary#GetEnumerator">
          <source>At this position, <ph id="ph1">&lt;xref:System.Collections.IDictionaryEnumerator.Entry%2A&gt;</ph> is undefined.</source>
          <target state="translated">En esta posición, el valor de propiedad <ph id="ph1">&lt;xref:System.Collections.IDictionaryEnumerator.Entry%2A&gt;</ph> está sin definir.</target>       </trans-unit>
        <trans-unit id="456" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.SortedList`2.System#Collections#IDictionary#GetEnumerator">
          <source>Therefore, you must call <ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> to advance the enumerator to the first element of the collection before reading the value of <ph id="ph2">&lt;xref:System.Collections.IDictionaryEnumerator.Entry%2A&gt;</ph>.</source>
          <target state="translated">Por lo tanto, debe llamar a <ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> para adelantar el enumerador hasta el primer elemento de la colección antes de leer el valor de <ph id="ph2">&lt;xref:System.Collections.IDictionaryEnumerator.Entry%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="457" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.SortedList`2.System#Collections#IDictionary#GetEnumerator">
          <source><ph id="ph1">&lt;xref:System.Collections.IDictionaryEnumerator.Entry%2A&gt;</ph> returns the same object until either <ph id="ph2">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> or <ph id="ph3">&lt;xref:System.Collections.IEnumerator.Reset%2A&gt;</ph> is called.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.IDictionaryEnumerator.Entry%2A&gt;</ph> devuelve el mismo objeto hasta que se llama a <ph id="ph2">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> o a <ph id="ph3">&lt;xref:System.Collections.IEnumerator.Reset%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="458" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.SortedList`2.System#Collections#IDictionary#GetEnumerator">
          <source><ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> sets <ph id="ph2">&lt;xref:System.Collections.IDictionaryEnumerator.Entry%2A&gt;</ph> to the next element.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> establece <ph id="ph2">&lt;xref:System.Collections.IDictionaryEnumerator.Entry%2A&gt;</ph> en el siguiente elemento.</target>       </trans-unit>
        <trans-unit id="459" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.SortedList`2.System#Collections#IDictionary#GetEnumerator">
          <source>If <ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> passes the end of the collection, the enumerator is positioned after the last element in the collection and <ph id="ph2">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> returns <ph id="ph3">`false`</ph>.</source>
          <target state="translated">Si <ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> pasa el final de la colección, el enumerador se coloca después del último elemento de la colección y <ph id="ph2">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> devuelve <ph id="ph3">`false`</ph>.</target>       </trans-unit>
        <trans-unit id="460" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.SortedList`2.System#Collections#IDictionary#GetEnumerator">
          <source>When the enumerator is at this position, subsequent calls to <ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> also return <ph id="ph2">`false`</ph>.</source>
          <target state="translated">Mientras el enumerador permanezca en esta posición, las llamadas subsiguientes a <ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> también devolver <ph id="ph2">`false`</ph>.</target>       </trans-unit>
        <trans-unit id="461" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.SortedList`2.System#Collections#IDictionary#GetEnumerator">
          <source>If the last call to <ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> returned <ph id="ph2">`false`</ph>, <ph id="ph3">&lt;xref:System.Collections.IDictionaryEnumerator.Entry%2A&gt;</ph> is undefined.</source>
          <target state="translated">Si la última llamada a <ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> devuelve <ph id="ph2">`false`</ph>, <ph id="ph3">&lt;xref:System.Collections.IDictionaryEnumerator.Entry%2A&gt;</ph> no está definido.</target>       </trans-unit>
        <trans-unit id="462" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.SortedList`2.System#Collections#IDictionary#GetEnumerator">
          <source>To set <ph id="ph1">&lt;xref:System.Collections.IDictionaryEnumerator.Entry%2A&gt;</ph> to the first element of the collection again, you can call <ph id="ph2">&lt;xref:System.Collections.IEnumerator.Reset%2A&gt;</ph> followed by <ph id="ph3">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph>.</source>
          <target state="translated">Para volver a establecer el valor de <ph id="ph1">&lt;xref:System.Collections.IDictionaryEnumerator.Entry%2A&gt;</ph> en el primer elemento de la colección, se puede llamar primero a <ph id="ph2">&lt;xref:System.Collections.IEnumerator.Reset%2A&gt;</ph> y después a <ph id="ph3">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="463" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.SortedList`2.System#Collections#IDictionary#GetEnumerator">
          <source>An enumerator remains valid as long as the collection remains unchanged.</source>
          <target state="translated">Un enumerador es válido mientras la colección no cambie.</target>       </trans-unit>
        <trans-unit id="464" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.SortedList`2.System#Collections#IDictionary#GetEnumerator">
          <source>If changes are made to the collection, such as adding, modifying, or deleting elements, the enumerator is irrecoverably invalidated and its behavior is undefined.</source>
          <target state="translated">Si se hacen cambios en la colección (como agregar, modificar o eliminar elementos), el enumerador queda invalidado permanentemente y su comportamiento es indefinido.</target>       </trans-unit>
        <trans-unit id="465" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.SortedList`2.System#Collections#IDictionary#GetEnumerator">
          <source>The enumerator does not have exclusive access to the collection; therefore, enumerating through a collection is intrinsically not a thread-safe procedure.</source>
          <target state="translated">El enumerador no tiene acceso exclusivo a la colección y, por tanto, la enumeración en una colección no es intrínsicamente un procedimiento seguro para subprocesos.</target>       </trans-unit>
        <trans-unit id="466" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.SortedList`2.System#Collections#IDictionary#GetEnumerator">
          <source>To guarantee thread safety during enumeration, you can lock the collection during the entire enumeration.</source>
          <target state="translated">A fin de garantizar la seguridad de los subprocesos, se puede bloquear la colección durante toda la enumeración.</target>       </trans-unit>
        <trans-unit id="467" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.SortedList`2.System#Collections#IDictionary#GetEnumerator">
          <source>To allow the collection to be accessed by multiple threads for reading and writing, you must implement your own synchronization.</source>
          <target state="translated">Para permitir que varios subprocesos obtengan acceso de lectura y escritura a la colección, debe implementar su propia sincronización.</target>       </trans-unit>
        <trans-unit id="468" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.SortedList`2.System#Collections#IDictionary#GetEnumerator">
          <source>Default implementations of collections in <ph id="ph1">&lt;xref:System.Collections.Generic?displayProperty=nameWithType&gt;</ph> are not synchronized.</source>
          <target state="translated">Las implementaciones de las recopilaciones predeterminadas <ph id="ph1">&lt;xref:System.Collections.Generic?displayProperty=nameWithType&gt;</ph> no están sincronizadas.</target>       </trans-unit>
        <trans-unit id="469" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.SortedList`2.System#Collections#IDictionary#GetEnumerator">
          <source>This method is an O(1) operation.</source>
          <target state="translated">Este método es una operación o (1).</target>       </trans-unit>
        <trans-unit id="470" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.SortedList`2.System#Collections#IDictionary#GetEnumerator">
          <source>The following code example shows how to enumerate the key/value pairs in the sorted list by using the <ph id="ph1">`foreach`</ph> statement (<ph id="ph2">`For Each`</ph> in Visual Basic, <ph id="ph3">`for each`</ph> in C++), which hides the use of the enumerator.</source>
          <target state="translated">En el ejemplo de código siguiente se muestra cómo enumerar los pares clave/valor en la lista ordenada utilizando la <ph id="ph1">`foreach`</ph> instrucción (<ph id="ph2">`For Each`</ph> en Visual Basic, <ph id="ph3">`for each`</ph> en C++), que oculta el uso del enumerador.</target>       </trans-unit>
        <trans-unit id="471" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.SortedList`2.System#Collections#IDictionary#GetEnumerator">
          <source>In particular, note that the enumerator for the <ph id="ph1">&lt;xref:System.Collections.IDictionary?displayProperty=nameWithType&gt;</ph> interface returns <ph id="ph2">&lt;xref:System.Collections.DictionaryEntry&gt;</ph> objects rather than <ph id="ph3">&lt;xref:System.Collections.Generic.KeyValuePair%602&gt;</ph> objects.</source>
          <target state="translated">En concreto, tenga en cuenta que el enumerador de la <ph id="ph1">&lt;xref:System.Collections.IDictionary?displayProperty=nameWithType&gt;</ph> devuelve la interfaz <ph id="ph2">&lt;xref:System.Collections.DictionaryEntry&gt;</ph> objetos en lugar de <ph id="ph3">&lt;xref:System.Collections.Generic.KeyValuePair%602&gt;</ph> objetos.</target>       </trans-unit>
        <trans-unit id="472" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.SortedList`2.System#Collections#IDictionary#GetEnumerator">
          <source>The code example is part of a larger example, including output, provided for the <ph id="ph1">&lt;xref:System.Collections.Generic.SortedList%602.System%23Collections%23IDictionary%23Add%2A&gt;</ph> method.</source>
          <target state="translated">El ejemplo de código forma parte de un ejemplo más extenso, con resultados, que se proporcionan para que el <ph id="ph1">&lt;xref:System.Collections.Generic.SortedList%602.System%23Collections%23IDictionary%23Add%2A&gt;</ph> método.</target>       </trans-unit>
        <trans-unit id="473" translate="yes" xml:space="preserve" uid="P:System.Collections.Generic.SortedList`2.System#Collections#IDictionary#IsFixedSize">
          <source>Gets a value indicating whether the <ph id="ph1">&lt;see cref="T:System.Collections.IDictionary" /&gt;</ph> has a fixed size.</source>
          <target state="translated">Obtiene un valor que indica si la interfaz <ph id="ph1">&lt;see cref="T:System.Collections.IDictionary" /&gt;</ph> tiene un tamaño fijo.</target>       </trans-unit>
        <trans-unit id="474" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.SortedList`2.System#Collections#IDictionary#IsFixedSize">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the <ph id="ph2">&lt;see cref="T:System.Collections.IDictionary" /&gt;</ph> has a fixed size; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">Es <ph id="ph1">&lt;see langword="true" /&gt;</ph> si la interfaz <ph id="ph2">&lt;see cref="T:System.Collections.IDictionary" /&gt;</ph> tiene un tamaño fijo; de lo contrario, es <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="475" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.SortedList`2.System#Collections#IDictionary#IsFixedSize">
          <source>In the default implementation of <ph id="ph1">&lt;see cref="T:System.Collections.Generic.SortedList`2" /&gt;</ph>, this property always returns <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">En la implementación predeterminada de <ph id="ph1">&lt;see cref="T:System.Collections.Generic.SortedList`2" /&gt;</ph>, esta propiedad siempre devuelve <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="476" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.SortedList`2.System#Collections#IDictionary#IsFixedSize">
          <source>A collection with a fixed size does not allow the addition or removal of elements after the collection is created, but it allows the modification of existing elements.</source>
          <target state="translated">Una colección de tamaño fijo no permite agregar o quitar elementos una vez que se ha creado, pero sí permite modificar los elementos existentes.</target>       </trans-unit>
        <trans-unit id="477" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.SortedList`2.System#Collections#IDictionary#IsFixedSize">
          <source>A collection with a fixed size is simply a collection with a wrapper that prevents adding and removing elements; therefore, if changes are made to the underlying collection, including the addition or removal of elements, the fixed-size collection reflects those changes.</source>
          <target state="translated">Una colección con un tamaño fijo es simplemente una colección con un contenedor que impide agregar y quitar elementos; por lo tanto, si se realizan cambios en la colección subyacente, incluida la adición o eliminación de elementos, la colección de tamaño fijo refleja esos cambios.</target>       </trans-unit>
        <trans-unit id="478" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.SortedList`2.System#Collections#IDictionary#IsFixedSize">
          <source>Retrieving the value of this property is an O(1) operation.</source>
          <target state="translated">La recuperación del valor de esta propiedad es una operación O(1).</target>       </trans-unit>
        <trans-unit id="479" translate="yes" xml:space="preserve" uid="P:System.Collections.Generic.SortedList`2.System#Collections#IDictionary#IsReadOnly">
          <source>Gets a value indicating whether the <ph id="ph1">&lt;see cref="T:System.Collections.IDictionary" /&gt;</ph> is read-only.</source>
          <target state="translated">Obtiene un valor que indica si <ph id="ph1">&lt;see cref="T:System.Collections.IDictionary" /&gt;</ph> es de solo lectura.</target>       </trans-unit>
        <trans-unit id="480" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.SortedList`2.System#Collections#IDictionary#IsReadOnly">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the <ph id="ph2">&lt;see cref="T:System.Collections.IDictionary" /&gt;</ph> is read-only; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">Es <ph id="ph1">&lt;see langword="true" /&gt;</ph> si la interfaz <ph id="ph2">&lt;see cref="T:System.Collections.IDictionary" /&gt;</ph> es de solo lectura; de lo contrario, es <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="481" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.SortedList`2.System#Collections#IDictionary#IsReadOnly">
          <source>In the default implementation of <ph id="ph1">&lt;see cref="T:System.Collections.Generic.SortedList`2" /&gt;</ph>, this property always returns <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">En la implementación predeterminada de <ph id="ph1">&lt;see cref="T:System.Collections.Generic.SortedList`2" /&gt;</ph>, esta propiedad siempre devuelve <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="482" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.SortedList`2.System#Collections#IDictionary#IsReadOnly">
          <source>A collection that is read-only does not allow the addition, removal, or modification of elements after the collection is created.</source>
          <target state="translated">Una colección de solo lectura no permite que se agreguen, quiten o modifiquen elementos una vez que se ha creado.</target>       </trans-unit>
        <trans-unit id="483" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.SortedList`2.System#Collections#IDictionary#IsReadOnly">
          <source>A collection that is read-only is simply a collection with a wrapper that prevents modifying the collection; therefore, if changes are made to the underlying collection, the read-only collection reflects those changes.</source>
          <target state="translated">Una colección que es de solo lectura es simplemente una colección con un contenedor que impide modificar la colección; por lo tanto, si se realizan cambios en la colección subyacente, la colección de solo lectura refleja esos cambios.</target>       </trans-unit>
        <trans-unit id="484" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.SortedList`2.System#Collections#IDictionary#IsReadOnly">
          <source>Retrieving the value of this property is an O(1) operation.</source>
          <target state="translated">La recuperación del valor de esta propiedad es una operación O(1).</target>       </trans-unit>
        <trans-unit id="485" translate="yes" xml:space="preserve" uid="P:System.Collections.Generic.SortedList`2.System#Collections#IDictionary#Item(System.Object)">
          <source>The key of the element to get or set.</source>
          <target state="translated">La clave del elemento que se obtiene o establece.</target>       </trans-unit>
        <trans-unit id="486" translate="yes" xml:space="preserve" uid="P:System.Collections.Generic.SortedList`2.System#Collections#IDictionary#Item(System.Object)">
          <source>Gets or sets the element with the specified key.</source>
          <target state="translated">Obtiene o establece el elemento con la clave especificada.</target>       </trans-unit>
        <trans-unit id="487" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.SortedList`2.System#Collections#IDictionary#Item(System.Object)">
          <source>The element with the specified key, or <ph id="ph1">&lt;see langword="null" /&gt;</ph> if <ph id="ph2">&lt;paramref name="key" /&gt;</ph> is not in the dictionary or <ph id="ph3">&lt;paramref name="key" /&gt;</ph> is of a type that is not assignable to the key type <ph id="ph4">&lt;paramref name="TKey" /&gt;</ph> of the <ph id="ph5">&lt;see cref="T:System.Collections.Generic.SortedList`2" /&gt;</ph>.</source>
          <target state="translated">Elemento con la clave especificada, o <ph id="ph1">&lt;see langword="null" /&gt;</ph> si <ph id="ph2">&lt;paramref name="key" /&gt;</ph> no está en el diccionario o si <ph id="ph3">&lt;paramref name="key" /&gt;</ph> es de un tipo no asignable al tipo de clave <ph id="ph4">&lt;paramref name="TKey" /&gt;</ph> de <ph id="ph5">&lt;see cref="T:System.Collections.Generic.SortedList`2" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="488" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.SortedList`2.System#Collections#IDictionary#Item(System.Object)">
          <source>This property returns <ph id="ph1">`null`</ph> if <ph id="ph2">`key`</ph> is of a type that is not assignable to the key type <ph id="ph3">`TKey`</ph> of the <ph id="ph4">&lt;xref:System.Collections.Generic.SortedList%602&gt;</ph>.</source>
          <target state="translated">Esta propiedad devuelve <ph id="ph1">`null`</ph> si <ph id="ph2">`key`</ph> es de un tipo no asignable al tipo de clave <ph id="ph3">`TKey`</ph> de la <ph id="ph4">&lt;xref:System.Collections.Generic.SortedList%602&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="489" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.SortedList`2.System#Collections#IDictionary#Item(System.Object)">
          <source>This property provides the ability to access a specific element in the collection by using the following syntax: <ph id="ph1">`myCollection[key]`</ph>.</source>
          <target state="translated">Esta propiedad permite obtener acceso a un elemento específico de la colección utilizando la sintaxis siguiente: <ph id="ph1">`myCollection[key]`</ph>.</target>       </trans-unit>
        <trans-unit id="490" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.SortedList`2.System#Collections#IDictionary#Item(System.Object)">
          <source>You can also use the <ph id="ph1">&lt;xref:System.Collections.IDictionary.Item%2A&gt;</ph> property to add new elements by setting the value of a key that does not exist in the dictionary; for example, <ph id="ph2">`myCollection["myNonexistentKey"] = myValue`</ph>.</source>
          <target state="translated">También puede usar el <ph id="ph1">&lt;xref:System.Collections.IDictionary.Item%2A&gt;</ph> propiedad para agregar nuevos elementos estableciendo el valor de una clave que no existe en el diccionario; por ejemplo, <ph id="ph2">`myCollection["myNonexistentKey"] = myValue`</ph>.</target>       </trans-unit>
        <trans-unit id="491" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.SortedList`2.System#Collections#IDictionary#Item(System.Object)">
          <source>However, if the specified key already exists in the dictionary, setting the <ph id="ph1">&lt;xref:System.Collections.IDictionary.Item%2A&gt;</ph> property overwrites the old value.</source>
          <target state="translated">Sin embargo, si la clave especificada ya existe en el diccionario, al establecer el <ph id="ph1">&lt;xref:System.Collections.IDictionary.Item%2A&gt;</ph> propiedad sobrescribe el valor anterior.</target>       </trans-unit>
        <trans-unit id="492" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.SortedList`2.System#Collections#IDictionary#Item(System.Object)">
          <source>In contrast, the <ph id="ph1">&lt;xref:System.Collections.IDictionary.Add%2A&gt;</ph> method does not modify existing elements.</source>
          <target state="translated">En cambio, la <ph id="ph1">&lt;xref:System.Collections.IDictionary.Add%2A&gt;</ph> método no modifica los elementos existentes.</target>       </trans-unit>
        <trans-unit id="493" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.SortedList`2.System#Collections#IDictionary#Item(System.Object)">
          <source>The C# language uses the <bpt id="p1">[</bpt>this<ept id="p1">](~/docs/csharp/language-reference/keywords/this.md)</ept> keyword to define the indexers instead of implementing the <ph id="ph1">&lt;xref:System.Collections.Generic.SortedList%602.System%23Collections%23IDictionary%23Item%2A&gt;</ph> property.</source>
          <target state="translated">El lenguaje C# utiliza el <bpt id="p1">[</bpt>esto<ept id="p1">](~/docs/csharp/language-reference/keywords/this.md)</ept> palabra clave para definir los indizadores en lugar de implementar la <ph id="ph1">&lt;xref:System.Collections.Generic.SortedList%602.System%23Collections%23IDictionary%23Item%2A&gt;</ph> propiedad.</target>       </trans-unit>
        <trans-unit id="494" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.SortedList`2.System#Collections#IDictionary#Item(System.Object)">
          <source>Visual Basic implements <ph id="ph1">&lt;xref:System.Collections.Generic.SortedList%602.System%23Collections%23IDictionary%23Item%2A&gt;</ph> as a default property, which provides the same indexing functionality.</source>
          <target state="translated">Visual Basic implementa <ph id="ph1">&lt;xref:System.Collections.Generic.SortedList%602.System%23Collections%23IDictionary%23Item%2A&gt;</ph> como propiedad predeterminada, lo que proporciona la misma funcionalidad de indización.</target>       </trans-unit>
        <trans-unit id="495" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.SortedList`2.System#Collections#IDictionary#Item(System.Object)">
          <source>Retrieving the value of this property is an O(log <ph id="ph1">`n`</ph>) operation, where n is <ph id="ph2">&lt;xref:System.Collections.Generic.SortedList%602.Count%2A&gt;</ph>.</source>
          <target state="translated">Recuperación del valor de esta propiedad es una O (registro <ph id="ph1">`n`</ph>) operación, donde n es <ph id="ph2">&lt;xref:System.Collections.Generic.SortedList%602.Count%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="496" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.SortedList`2.System#Collections#IDictionary#Item(System.Object)">
          <source>Setting the property is an O(log <ph id="ph1">`n`</ph>) operation if the key is already in the <ph id="ph2">&lt;xref:System.Collections.Generic.SortedList%602&gt;</ph>.</source>
          <target state="translated">Establecer la propiedad es una O (registro <ph id="ph1">`n`</ph>) operación si la clave ya está en el <ph id="ph2">&lt;xref:System.Collections.Generic.SortedList%602&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="497" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.SortedList`2.System#Collections#IDictionary#Item(System.Object)">
          <source>If the key is not in the list, setting the property is an O(<ph id="ph1">`n`</ph>) operation for unsorted data, or O(log <ph id="ph2">`n`</ph>) if the new element is added at the end of the list.</source>
          <target state="translated">Si la clave no está en la lista, establecer la propiedad es una O (<ph id="ph1">`n`</ph>) operación para datos no ordenados, u O (registro <ph id="ph2">`n`</ph>) si el nuevo elemento se agrega al final de la lista.</target>       </trans-unit>
        <trans-unit id="498" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.SortedList`2.System#Collections#IDictionary#Item(System.Object)">
          <source>If insertion causes a resize, the operation is O(<ph id="ph1">`n`</ph>).</source>
          <target state="translated">Si la inserción provoca un cambio de tamaño, la operación es O (<ph id="ph1">`n`</ph>).</target>       </trans-unit>
        <trans-unit id="499" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.SortedList`2.System#Collections#IDictionary#Item(System.Object)">
          <source>The following code example shows how to use the <ph id="ph1">&lt;xref:System.Collections.Generic.SortedList%602.System%23Collections%23IDictionary%23Item%2A&gt;</ph> property (the indexer in C#) of the <ph id="ph2">&lt;xref:System.Collections.IDictionary?displayProperty=nameWithType&gt;</ph> interface with a <ph id="ph3">&lt;xref:System.Collections.Generic.SortedList%602&gt;</ph>, and ways the property differs from the <ph id="ph4">&lt;xref:System.Collections.Generic.SortedList%602.Item%2A?displayProperty=nameWithType&gt;</ph> property.</source>
          <target state="translated">En el ejemplo de código siguiente se muestra cómo utilizar el <ph id="ph1">&lt;xref:System.Collections.Generic.SortedList%602.System%23Collections%23IDictionary%23Item%2A&gt;</ph> propiedad (el indizador en C#) de la <ph id="ph2">&lt;xref:System.Collections.IDictionary?displayProperty=nameWithType&gt;</ph> interactuar con un <ph id="ph3">&lt;xref:System.Collections.Generic.SortedList%602&gt;</ph>y cómo difiere de la propiedad de la <ph id="ph4">&lt;xref:System.Collections.Generic.SortedList%602.Item%2A?displayProperty=nameWithType&gt;</ph> propiedad.</target>       </trans-unit>
        <trans-unit id="500" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.SortedList`2.System#Collections#IDictionary#Item(System.Object)">
          <source>The example shows that, like the <ph id="ph1">&lt;xref:System.Collections.Generic.SortedList%602.Item%2A?displayProperty=nameWithType&gt;</ph> property, the <ph id="ph2">&lt;xref:System.Collections.Generic.SortedList%602.System%23Collections%23IDictionary%23Item%2A?displayProperty=nameWithType&gt;</ph> property can change the value associated with an existing key and can be used to add a new key/value pair if the specified key is not in the sorted list.</source>
          <target state="translated">En el ejemplo se muestra que, al igual que el <ph id="ph1">&lt;xref:System.Collections.Generic.SortedList%602.Item%2A?displayProperty=nameWithType&gt;</ph> propiedad, el <ph id="ph2">&lt;xref:System.Collections.Generic.SortedList%602.System%23Collections%23IDictionary%23Item%2A?displayProperty=nameWithType&gt;</ph> propiedad puede cambiar el valor asociado a una clave existente y puede usarse para agregar un nuevo par clave/valor si la clave especificada no está en la lista ordenada.</target>       </trans-unit>
        <trans-unit id="501" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.SortedList`2.System#Collections#IDictionary#Item(System.Object)">
          <source>The example also shows that unlike the <ph id="ph1">&lt;xref:System.Collections.Generic.SortedList%602.Item%2A?displayProperty=nameWithType&gt;</ph> property, the <ph id="ph2">&lt;xref:System.Collections.Generic.SortedList%602.System%23Collections%23IDictionary%23Item%2A?displayProperty=nameWithType&gt;</ph> property does not throw an exception if <ph id="ph3">`key`</ph> is not in the sorted list, returning a null reference instead.</source>
          <target state="translated">El ejemplo también muestra que, a diferencia del <ph id="ph1">&lt;xref:System.Collections.Generic.SortedList%602.Item%2A?displayProperty=nameWithType&gt;</ph> propiedad, el <ph id="ph2">&lt;xref:System.Collections.Generic.SortedList%602.System%23Collections%23IDictionary%23Item%2A?displayProperty=nameWithType&gt;</ph> propiedad no produce una excepción si <ph id="ph3">`key`</ph> no está en la lista ordenada, devolviendo una referencia nula en su lugar.</target>       </trans-unit>
        <trans-unit id="502" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.SortedList`2.System#Collections#IDictionary#Item(System.Object)">
          <source>Finally, the example demonstrates that getting the <ph id="ph1">&lt;xref:System.Collections.Generic.SortedList%602.System%23Collections%23IDictionary%23Item%2A?displayProperty=nameWithType&gt;</ph> property returns a null reference if <ph id="ph2">`key`</ph> is not the correct data type, and that setting the property throws an exception if <ph id="ph3">`key`</ph> is not the correct data type.</source>
          <target state="translated">Por último, el ejemplo muestra que obtener la <ph id="ph1">&lt;xref:System.Collections.Generic.SortedList%602.System%23Collections%23IDictionary%23Item%2A?displayProperty=nameWithType&gt;</ph> propiedad devuelve una referencia nula si <ph id="ph2">`key`</ph> no es del tipo de datos correcto y que la configuración de la propiedad produce una excepción si <ph id="ph3">`key`</ph> no es del tipo de datos correcto.</target>       </trans-unit>
        <trans-unit id="503" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.SortedList`2.System#Collections#IDictionary#Item(System.Object)">
          <source>The code example is part of a larger example, including output, provided for the <ph id="ph1">&lt;xref:System.Collections.Generic.SortedList%602.System%23Collections%23IDictionary%23Add%2A&gt;</ph> method.</source>
          <target state="translated">El ejemplo de código forma parte de un ejemplo más extenso, con resultados, que se proporcionan para que el <ph id="ph1">&lt;xref:System.Collections.Generic.SortedList%602.System%23Collections%23IDictionary%23Add%2A&gt;</ph> método.</target>       </trans-unit>
        <trans-unit id="504" translate="yes" xml:space="preserve" uid="P:System.Collections.Generic.SortedList`2.System#Collections#IDictionary#Item(System.Object)">
          <source><ph id="ph1">&lt;paramref name="key" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="key" /&gt;</ph> es <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="505" translate="yes" xml:space="preserve" uid="P:System.Collections.Generic.SortedList`2.System#Collections#IDictionary#Item(System.Object)">
          <source>A value is being assigned, and <ph id="ph1">&lt;paramref name="key" /&gt;</ph> is of a type that is not assignable to the key type <ph id="ph2">&lt;paramref name="TKey" /&gt;</ph> of the <ph id="ph3">&lt;see cref="T:System.Collections.Generic.SortedList`2" /&gt;</ph>.</source>
          <target state="translated">Se está asignando un valor, pero <ph id="ph1">&lt;paramref name="key" /&gt;</ph> es de un tipo no asignable al tipo de clave <ph id="ph2">&lt;paramref name="TKey" /&gt;</ph> de <ph id="ph3">&lt;see cref="T:System.Collections.Generic.SortedList`2" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="506" translate="yes" xml:space="preserve" uid="P:System.Collections.Generic.SortedList`2.System#Collections#IDictionary#Item(System.Object)">
          <source>-or-</source>
          <target state="translated">O bien</target>       </trans-unit>
        <trans-unit id="507" translate="yes" xml:space="preserve" uid="P:System.Collections.Generic.SortedList`2.System#Collections#IDictionary#Item(System.Object)">
          <source>A value is being assigned, and <ph id="ph1">&lt;paramref name="value" /&gt;</ph> is of a type that is not assignable to the value type <ph id="ph2">&lt;paramref name="TValue" /&gt;</ph> of the <ph id="ph3">&lt;see cref="T:System.Collections.Generic.SortedList`2" /&gt;</ph>.</source>
          <target state="translated">Se está asignando un valor, pero <ph id="ph1">&lt;paramref name="value" /&gt;</ph> es de un tipo no asignable al tipo de valor <ph id="ph2">&lt;paramref name="TValue" /&gt;</ph> de <ph id="ph3">&lt;see cref="T:System.Collections.Generic.SortedList`2" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="508" translate="yes" xml:space="preserve" uid="P:System.Collections.Generic.SortedList`2.System#Collections#IDictionary#Keys">
          <source>Gets an <ph id="ph1">&lt;see cref="T:System.Collections.ICollection" /&gt;</ph> containing the keys of the <ph id="ph2">&lt;see cref="T:System.Collections.IDictionary" /&gt;</ph>.</source>
          <target state="translated">Obtiene una interfaz <ph id="ph1">&lt;see cref="T:System.Collections.ICollection" /&gt;</ph> que contiene las claves de la interfaz <ph id="ph2">&lt;see cref="T:System.Collections.IDictionary" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="509" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.SortedList`2.System#Collections#IDictionary#Keys">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.ICollection" /&gt;</ph> containing the keys of the <ph id="ph2">&lt;see cref="T:System.Collections.IDictionary" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Collections.ICollection" /&gt;</ph> que contiene las claves de <ph id="ph2">&lt;see cref="T:System.Collections.IDictionary" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="510" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.SortedList`2.System#Collections#IDictionary#Keys">
          <source>The order of the keys in the <ph id="ph1">&lt;xref:System.Collections.ICollection&gt;</ph> is the same as the order in the <ph id="ph2">&lt;xref:System.Collections.Generic.SortedList%602&gt;</ph>.</source>
          <target state="translated">El orden de las claves de la <ph id="ph1">&lt;xref:System.Collections.ICollection&gt;</ph> es el mismo que el orden en el <ph id="ph2">&lt;xref:System.Collections.Generic.SortedList%602&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="511" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.SortedList`2.System#Collections#IDictionary#Keys">
          <source>Retrieving the value of this property is an O(1) operation.</source>
          <target state="translated">La recuperación del valor de esta propiedad es una operación O(1).</target>       </trans-unit>
        <trans-unit id="512" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.SortedList`2.System#Collections#IDictionary#Keys">
          <source>The following code example shows how to use the <ph id="ph1">&lt;xref:System.Collections.IDictionary.Keys%2A&gt;</ph> property of the <ph id="ph2">&lt;xref:System.Collections.IDictionary?displayProperty=nameWithType&gt;</ph> interface with a <ph id="ph3">&lt;xref:System.Collections.Generic.SortedDictionary%602&gt;</ph>, to list the keys in the dictionary.</source>
          <target state="translated">En el ejemplo de código siguiente se muestra cómo utilizar el <ph id="ph1">&lt;xref:System.Collections.IDictionary.Keys%2A&gt;</ph> propiedad de la <ph id="ph2">&lt;xref:System.Collections.IDictionary?displayProperty=nameWithType&gt;</ph> interactuar con un <ph id="ph3">&lt;xref:System.Collections.Generic.SortedDictionary%602&gt;</ph>, para enumerar las claves del diccionario.</target>       </trans-unit>
        <trans-unit id="513" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.SortedList`2.System#Collections#IDictionary#Keys">
          <source>The example also shows how to enumerate the key/value pairs in the sorted list; note that the enumerator for the <ph id="ph1">&lt;xref:System.Collections.IDictionary?displayProperty=nameWithType&gt;</ph> interface returns <ph id="ph2">&lt;xref:System.Collections.DictionaryEntry&gt;</ph> objects rather than <ph id="ph3">&lt;xref:System.Collections.Generic.KeyValuePair%602&gt;</ph> objects.</source>
          <target state="translated">El ejemplo también muestra cómo enumerar los pares clave/valor en la lista ordenada; Tenga en cuenta que el enumerador de la <ph id="ph1">&lt;xref:System.Collections.IDictionary?displayProperty=nameWithType&gt;</ph> devuelve la interfaz <ph id="ph2">&lt;xref:System.Collections.DictionaryEntry&gt;</ph> objetos en lugar de <ph id="ph3">&lt;xref:System.Collections.Generic.KeyValuePair%602&gt;</ph> objetos.</target>       </trans-unit>
        <trans-unit id="514" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.SortedList`2.System#Collections#IDictionary#Keys">
          <source>The code example is part of a larger example, including output, provided for the <ph id="ph1">&lt;xref:System.Collections.Generic.SortedList%602.System%23Collections%23IDictionary%23Add%2A&gt;</ph> method.</source>
          <target state="translated">El ejemplo de código forma parte de un ejemplo más extenso, con resultados, que se proporcionan para que el <ph id="ph1">&lt;xref:System.Collections.Generic.SortedList%602.System%23Collections%23IDictionary%23Add%2A&gt;</ph> método.</target>       </trans-unit>
        <trans-unit id="515" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.SortedList`2.System#Collections#IDictionary#Remove(System.Object)">
          <source>The key of the element to remove.</source>
          <target state="translated">Clave del elemento que se va a quitar.</target>       </trans-unit>
        <trans-unit id="516" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.SortedList`2.System#Collections#IDictionary#Remove(System.Object)">
          <source>Removes the element with the specified key from the <ph id="ph1">&lt;see cref="T:System.Collections.IDictionary" /&gt;</ph>.</source>
          <target state="translated">Quita el elemento con la clave especificada de <ph id="ph1">&lt;see cref="T:System.Collections.IDictionary" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="517" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.SortedList`2.System#Collections#IDictionary#Remove(System.Object)">
          <source>This method performs a binary search; however, the elements are moved up to fill in the open spot, so this method is an O(<ph id="ph1">`n`</ph>) operation, where <ph id="ph2">`n`</ph> is <ph id="ph3">&lt;xref:System.Collections.Generic.SortedList%602.Count%2A&gt;</ph>.</source>
          <target state="translated">Este método realiza una búsqueda binaria; Sin embargo, los elementos se mueven para rellenar el espacio abierto, por lo que este método es una O (<ph id="ph1">`n`</ph>) operación, donde <ph id="ph2">`n`</ph> es <ph id="ph3">&lt;xref:System.Collections.Generic.SortedList%602.Count%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="518" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.SortedList`2.System#Collections#IDictionary#Remove(System.Object)">
          <source>The following code example shows how to use the <ph id="ph1">&lt;xref:System.Collections.Generic.SortedList%602.System%23Collections%23IDictionary%23Remove%2A&gt;</ph> of the <ph id="ph2">&lt;xref:System.Collections.IDictionary?displayProperty=nameWithType&gt;</ph> interface with a <ph id="ph3">&lt;xref:System.Collections.Generic.SortedList%602&gt;</ph>.</source>
          <target state="translated">En el ejemplo de código siguiente se muestra cómo utilizar el <ph id="ph1">&lt;xref:System.Collections.Generic.SortedList%602.System%23Collections%23IDictionary%23Remove%2A&gt;</ph> de la <ph id="ph2">&lt;xref:System.Collections.IDictionary?displayProperty=nameWithType&gt;</ph> interactuar con un <ph id="ph3">&lt;xref:System.Collections.Generic.SortedList%602&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="519" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.SortedList`2.System#Collections#IDictionary#Remove(System.Object)">
          <source>The code example is part of a larger example, including output, provided for the <ph id="ph1">&lt;xref:System.Collections.Generic.SortedList%602.System%23Collections%23IDictionary%23Add%2A&gt;</ph> method.</source>
          <target state="translated">El ejemplo de código forma parte de un ejemplo más extenso, con resultados, que se proporcionan para que el <ph id="ph1">&lt;xref:System.Collections.Generic.SortedList%602.System%23Collections%23IDictionary%23Add%2A&gt;</ph> método.</target>       </trans-unit>
        <trans-unit id="520" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.SortedList`2.System#Collections#IDictionary#Remove(System.Object)">
          <source><ph id="ph1">&lt;paramref name="key" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="key" /&gt;</ph> es <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="521" translate="yes" xml:space="preserve" uid="P:System.Collections.Generic.SortedList`2.System#Collections#IDictionary#Values">
          <source>Gets an <ph id="ph1">&lt;see cref="T:System.Collections.ICollection" /&gt;</ph> containing the values in the <ph id="ph2">&lt;see cref="T:System.Collections.IDictionary" /&gt;</ph>.</source>
          <target state="translated">Obtiene una interfaz <ph id="ph1">&lt;see cref="T:System.Collections.ICollection" /&gt;</ph> que contiene los valores de la interfaz <ph id="ph2">&lt;see cref="T:System.Collections.IDictionary" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="522" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.SortedList`2.System#Collections#IDictionary#Values">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.ICollection" /&gt;</ph> containing the values in the <ph id="ph2">&lt;see cref="T:System.Collections.IDictionary" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Collections.ICollection" /&gt;</ph> que contiene los valores de <ph id="ph2">&lt;see cref="T:System.Collections.IDictionary" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="523" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.SortedList`2.System#Collections#IDictionary#Values">
          <source>The order of the values in the <ph id="ph1">&lt;xref:System.Collections.ICollection&gt;</ph> is the same as the order in the <ph id="ph2">&lt;xref:System.Collections.Generic.SortedList%602&gt;</ph>.</source>
          <target state="translated">El orden de los valores de la <ph id="ph1">&lt;xref:System.Collections.ICollection&gt;</ph> es el mismo que el orden en el <ph id="ph2">&lt;xref:System.Collections.Generic.SortedList%602&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="524" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.SortedList`2.System#Collections#IDictionary#Values">
          <source>Retrieving the value of this property is an O(1) operation.</source>
          <target state="translated">La recuperación del valor de esta propiedad es una operación O(1).</target>       </trans-unit>
        <trans-unit id="525" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.SortedList`2.System#Collections#IDictionary#Values">
          <source>The following code example shows how to use the <ph id="ph1">&lt;xref:System.Collections.Generic.SortedList%602.System%23Collections%23IDictionary%23Values%2A&gt;</ph> property of the <ph id="ph2">&lt;xref:System.Collections.IDictionary?displayProperty=nameWithType&gt;</ph> interface with a <ph id="ph3">&lt;xref:System.Collections.Generic.SortedList%602&gt;</ph>, to list the values in the sorted list.</source>
          <target state="translated">En el ejemplo de código siguiente se muestra cómo utilizar el <ph id="ph1">&lt;xref:System.Collections.Generic.SortedList%602.System%23Collections%23IDictionary%23Values%2A&gt;</ph> propiedad de la <ph id="ph2">&lt;xref:System.Collections.IDictionary?displayProperty=nameWithType&gt;</ph> interactuar con un <ph id="ph3">&lt;xref:System.Collections.Generic.SortedList%602&gt;</ph>, para mostrar los valores en la lista ordenada.</target>       </trans-unit>
        <trans-unit id="526" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.SortedList`2.System#Collections#IDictionary#Values">
          <source>The example also shows how to enumerate the key/value pairs in the sorted list; note that the enumerator for the <ph id="ph1">&lt;xref:System.Collections.IDictionary?displayProperty=nameWithType&gt;</ph> interface returns <ph id="ph2">&lt;xref:System.Collections.DictionaryEntry&gt;</ph> objects rather than <ph id="ph3">&lt;xref:System.Collections.Generic.KeyValuePair%602&gt;</ph> objects.</source>
          <target state="translated">El ejemplo también muestra cómo enumerar los pares clave/valor en la lista ordenada; Tenga en cuenta que el enumerador de la <ph id="ph1">&lt;xref:System.Collections.IDictionary?displayProperty=nameWithType&gt;</ph> devuelve la interfaz <ph id="ph2">&lt;xref:System.Collections.DictionaryEntry&gt;</ph> objetos en lugar de <ph id="ph3">&lt;xref:System.Collections.Generic.KeyValuePair%602&gt;</ph> objetos.</target>       </trans-unit>
        <trans-unit id="527" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.SortedList`2.System#Collections#IDictionary#Values">
          <source>The code example is part of a larger example, including output, provided for the <ph id="ph1">&lt;xref:System.Collections.Generic.SortedList%602.System%23Collections%23IDictionary%23Add%2A&gt;</ph> method.</source>
          <target state="translated">El ejemplo de código forma parte de un ejemplo más extenso, con resultados, que se proporcionan para que el <ph id="ph1">&lt;xref:System.Collections.Generic.SortedList%602.System%23Collections%23IDictionary%23Add%2A&gt;</ph> método.</target>       </trans-unit>
        <trans-unit id="528" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.SortedList`2.System#Collections#IEnumerable#GetEnumerator">
          <source>Returns an enumerator that iterates through a collection.</source>
          <target state="translated">Devuelve un enumerador que recorre en iteración una colección.</target>       </trans-unit>
        <trans-unit id="529" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.SortedList`2.System#Collections#IEnumerable#GetEnumerator">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.IEnumerator" /&gt;</ph> that can be used to iterate through the collection.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Collections.IEnumerator" /&gt;</ph> que se puede utilizar para recorrer en iteración la colección.</target>       </trans-unit>
        <trans-unit id="530" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.SortedList`2.System#Collections#IEnumerable#GetEnumerator">
          <source>The <ph id="ph1">`foreach`</ph> statement of the C# language (<ph id="ph2">`for each`</ph> in C++, <ph id="ph3">`For Each`</ph> in Visual Basic) hides the complexity of the enumerators.</source>
          <target state="translated">El <ph id="ph1">`foreach`</ph> instrucción del lenguaje C# (<ph id="ph2">`for each`</ph> en C++, <ph id="ph3">`For Each`</ph> en Visual Basic) oculta la complejidad de los enumeradores.</target>       </trans-unit>
        <trans-unit id="531" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.SortedList`2.System#Collections#IEnumerable#GetEnumerator">
          <source>Therefore, using <ph id="ph1">`foreach`</ph> is recommended, instead of directly manipulating the enumerator.</source>
          <target state="translated">Por lo tanto, se recomienda el uso de <ph id="ph1">`foreach`</ph>, en lugar de manipular directamente el enumerador.</target>       </trans-unit>
        <trans-unit id="532" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.SortedList`2.System#Collections#IEnumerable#GetEnumerator">
          <source>Enumerators can be used to read the data in the collection, but they cannot be used to modify the underlying collection.</source>
          <target state="translated">Los enumeradores pueden usarse para leer los datos de la colección, pero no para modificar la colección subyacente.</target>       </trans-unit>
        <trans-unit id="533" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.SortedList`2.System#Collections#IEnumerable#GetEnumerator">
          <source>Initially, the enumerator is positioned before the first element in the collection.</source>
          <target state="translated">En principio, el enumerador se coloca antes del primer elemento de la colección.</target>       </trans-unit>
        <trans-unit id="534" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.SortedList`2.System#Collections#IEnumerable#GetEnumerator">
          <source><ph id="ph1">&lt;xref:System.Collections.IEnumerator.Reset%2A&gt;</ph> also brings the enumerator back to this position.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.IEnumerator.Reset%2A&gt;</ph> también devuelve el enumerador a esta posición.</target>       </trans-unit>
        <trans-unit id="535" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.SortedList`2.System#Collections#IEnumerable#GetEnumerator">
          <source>At this position, <ph id="ph1">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;</ph> is undefined.</source>
          <target state="translated">En esta posición, el valor de propiedad <ph id="ph1">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;</ph> está sin definir.</target>       </trans-unit>
        <trans-unit id="536" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.SortedList`2.System#Collections#IEnumerable#GetEnumerator">
          <source>Therefore, you must call <ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> to advance the enumerator to the first element of the collection before reading the value of <ph id="ph2">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;</ph>.</source>
          <target state="translated">Por lo tanto, debe llamar a <ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> para adelantar el enumerador hasta el primer elemento de la colección antes de leer el valor de <ph id="ph2">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="537" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.SortedList`2.System#Collections#IEnumerable#GetEnumerator">
          <source><ph id="ph1">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;</ph> returns the same object until either <ph id="ph2">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> or <ph id="ph3">&lt;xref:System.Collections.IEnumerator.Reset%2A&gt;</ph> is called.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;</ph> devuelve el mismo objeto hasta que se llama a <ph id="ph2">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> o a <ph id="ph3">&lt;xref:System.Collections.IEnumerator.Reset%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="538" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.SortedList`2.System#Collections#IEnumerable#GetEnumerator">
          <source><ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> sets <ph id="ph2">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;</ph> to the next element.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> establece <ph id="ph2">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;</ph> en el siguiente elemento.</target>       </trans-unit>
        <trans-unit id="539" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.SortedList`2.System#Collections#IEnumerable#GetEnumerator">
          <source>If <ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> passes the end of the collection, the enumerator is positioned after the last element in the collection and <ph id="ph2">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> returns <ph id="ph3">`false`</ph>.</source>
          <target state="translated">Si <ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> pasa el final de la colección, el enumerador se coloca después del último elemento de la colección y <ph id="ph2">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> devuelve <ph id="ph3">`false`</ph>.</target>       </trans-unit>
        <trans-unit id="540" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.SortedList`2.System#Collections#IEnumerable#GetEnumerator">
          <source>When the enumerator is at this position, subsequent calls to <ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> also return <ph id="ph2">`false`</ph>.</source>
          <target state="translated">Mientras el enumerador permanezca en esta posición, las llamadas subsiguientes a <ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> también devolver <ph id="ph2">`false`</ph>.</target>       </trans-unit>
        <trans-unit id="541" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.SortedList`2.System#Collections#IEnumerable#GetEnumerator">
          <source>If the last call to <ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> returned <ph id="ph2">`false`</ph>, <ph id="ph3">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;</ph> is undefined.</source>
          <target state="translated">Si la última llamada a <ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> devuelve <ph id="ph2">`false`</ph>, <ph id="ph3">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;</ph> no está definido.</target>       </trans-unit>
        <trans-unit id="542" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.SortedList`2.System#Collections#IEnumerable#GetEnumerator">
          <source>To set <ph id="ph1">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;</ph> to the first element of the collection again, you can call <ph id="ph2">&lt;xref:System.Collections.IEnumerator.Reset%2A&gt;</ph> followed by <ph id="ph3">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph>.</source>
          <target state="translated">Para volver a establecer el valor de <ph id="ph1">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;</ph> en el primer elemento de la colección, se puede llamar primero a <ph id="ph2">&lt;xref:System.Collections.IEnumerator.Reset%2A&gt;</ph> y después a <ph id="ph3">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="543" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.SortedList`2.System#Collections#IEnumerable#GetEnumerator">
          <source>An enumerator remains valid as long as the collection remains unchanged.</source>
          <target state="translated">Un enumerador es válido mientras la colección no cambie.</target>       </trans-unit>
        <trans-unit id="544" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.SortedList`2.System#Collections#IEnumerable#GetEnumerator">
          <source>If changes are made to the collection, such as adding, modifying, or deleting elements, the enumerator is irrecoverably invalidated and its behavior is undefined.</source>
          <target state="translated">Si se hacen cambios en la colección (como agregar, modificar o eliminar elementos), el enumerador queda invalidado permanentemente y su comportamiento es indefinido.</target>       </trans-unit>
        <trans-unit id="545" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.SortedList`2.System#Collections#IEnumerable#GetEnumerator">
          <source>The enumerator does not have exclusive access to the collection; therefore, enumerating through a collection is intrinsically not a thread-safe procedure.</source>
          <target state="translated">El enumerador no tiene acceso exclusivo a la colección y, por tanto, la enumeración en una colección no es intrínsicamente un procedimiento seguro para subprocesos.</target>       </trans-unit>
        <trans-unit id="546" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.SortedList`2.System#Collections#IEnumerable#GetEnumerator">
          <source>To guarantee thread safety during enumeration, you can lock the collection during the entire enumeration.</source>
          <target state="translated">A fin de garantizar la seguridad de los subprocesos, se puede bloquear la colección durante toda la enumeración.</target>       </trans-unit>
        <trans-unit id="547" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.SortedList`2.System#Collections#IEnumerable#GetEnumerator">
          <source>To allow the collection to be accessed by multiple threads for reading and writing, you must implement your own synchronization.</source>
          <target state="translated">Para permitir que varios subprocesos obtengan acceso de lectura y escritura a la colección, debe implementar su propia sincronización.</target>       </trans-unit>
        <trans-unit id="548" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.SortedList`2.System#Collections#IEnumerable#GetEnumerator">
          <source>Default implementations of collections in <ph id="ph1">&lt;xref:System.Collections.Generic?displayProperty=nameWithType&gt;</ph> are not synchronized.</source>
          <target state="translated">Las implementaciones de las recopilaciones predeterminadas <ph id="ph1">&lt;xref:System.Collections.Generic?displayProperty=nameWithType&gt;</ph> no están sincronizadas.</target>       </trans-unit>
        <trans-unit id="549" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.SortedList`2.System#Collections#IEnumerable#GetEnumerator">
          <source>This method is an O(1) operation.</source>
          <target state="translated">Este método es una operación o (1).</target>       </trans-unit>
        <trans-unit id="550" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.SortedList`2.TrimExcess">
          <source>Sets the capacity to the actual number of elements in the <ph id="ph1">&lt;see cref="T:System.Collections.Generic.SortedList`2" /&gt;</ph>, if that number is less than 90 percent of current capacity.</source>
          <target state="translated">Establece la capacidad en el número real de elementos en la colección <ph id="ph1">&lt;see cref="T:System.Collections.Generic.SortedList`2" /&gt;</ph>, si este número supone menos del 90 por ciento de la capacidad actual.</target>       </trans-unit>
        <trans-unit id="551" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.SortedList`2.TrimExcess">
          <source>This method can be used to minimize a collection's memory overhead if no new elements will be added to the collection.</source>
          <target state="translated">Este método se puede utilizar para minimizar la sobrecarga de memoria de la colección si ningún elemento nuevo se agregará a la colección.</target>       </trans-unit>
        <trans-unit id="552" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.SortedList`2.TrimExcess">
          <source>The cost of reallocating and copying a large <ph id="ph1">&lt;xref:System.Collections.Generic.SortedList%602&gt;</ph> can be considerable, however, so the <ph id="ph2">&lt;xref:System.Collections.Generic.SortedList%602.TrimExcess%2A&gt;</ph> method does nothing if the list is at more than 90 percent of capacity.</source>
          <target state="translated">El costo de reasignar y copiar una gran <ph id="ph1">&lt;xref:System.Collections.Generic.SortedList%602&gt;</ph> puede ser considerable, sin embargo, por lo que el <ph id="ph2">&lt;xref:System.Collections.Generic.SortedList%602.TrimExcess%2A&gt;</ph> método no hace nada si la lista está en más del 90 por ciento de capacidad.</target>       </trans-unit>
        <trans-unit id="553" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.SortedList`2.TrimExcess">
          <source>This avoids incurring a large reallocation cost for a relatively small gain.</source>
          <target state="translated">Esto evita incurrir en un gran costo de reasignación para lograr una mejora relativamente pequeño.</target>       </trans-unit>
        <trans-unit id="554" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.SortedList`2.TrimExcess">
          <source>This method is an O(<ph id="ph1">`n`</ph>) operation, where <ph id="ph2">`n`</ph> is <ph id="ph3">&lt;xref:System.Collections.Generic.SortedList%602.Count%2A&gt;</ph>.</source>
          <target state="translated">Este método es una O (<ph id="ph1">`n`</ph>) operación, donde <ph id="ph2">`n`</ph> es <ph id="ph3">&lt;xref:System.Collections.Generic.SortedList%602.Count%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="555" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.SortedList`2.TrimExcess">
          <source>To reset a <ph id="ph1">&lt;xref:System.Collections.Generic.SortedList%602&gt;</ph> to its initial state, call the <ph id="ph2">&lt;xref:System.Collections.Generic.SortedList%602.Clear%2A&gt;</ph> method before calling <ph id="ph3">&lt;xref:System.Collections.Generic.SortedList%602.TrimExcess%2A&gt;</ph> method.</source>
          <target state="translated">Para restablecer un <ph id="ph1">&lt;xref:System.Collections.Generic.SortedList%602&gt;</ph> a su estado inicial, llame a la <ph id="ph2">&lt;xref:System.Collections.Generic.SortedList%602.Clear%2A&gt;</ph> método antes de llamar a <ph id="ph3">&lt;xref:System.Collections.Generic.SortedList%602.TrimExcess%2A&gt;</ph> método.</target>       </trans-unit>
        <trans-unit id="556" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.SortedList`2.TrimExcess">
          <source>Trimming an empty <ph id="ph1">&lt;xref:System.Collections.Generic.SortedList%602&gt;</ph> sets the capacity of the <ph id="ph2">&lt;xref:System.Collections.Generic.SortedList%602&gt;</ph> to the default capacity.</source>
          <target state="translated">Recortar vacío <ph id="ph1">&lt;xref:System.Collections.Generic.SortedList%602&gt;</ph> establece la capacidad de la <ph id="ph2">&lt;xref:System.Collections.Generic.SortedList%602&gt;</ph> en la capacidad predeterminada.</target>       </trans-unit>
        <trans-unit id="557" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.SortedList`2.TrimExcess">
          <source>The capacity can also be set using the <ph id="ph1">&lt;xref:System.Collections.Generic.SortedList%602.Capacity%2A&gt;</ph> property.</source>
          <target state="translated">La capacidad también puede establecerse utilizando el <ph id="ph1">&lt;xref:System.Collections.Generic.SortedList%602.Capacity%2A&gt;</ph> propiedad.</target>       </trans-unit>
        <trans-unit id="558" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.SortedList`2.TryGetValue(`0,`1@)">
          <source>The key whose value to get.</source>
          <target state="translated">Clave cuyo valor se va a obtener.</target>       </trans-unit>
        <trans-unit id="559" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.SortedList`2.TryGetValue(`0,`1@)">
          <source>When this method returns, the value associated with the specified key, if the key is found; otherwise, the default value for the type of the <bpt id="p1">&lt;c&gt;</bpt>value<ept id="p1">&lt;/c&gt;</ept> parameter.</source>
          <target state="translated">Cuando este método finaliza, es el valor asociado a la clave especificada, si se encuentra la clave; de lo contrario, es el valor predeterminado para el tipo del parámetro <bpt id="p1">&lt;c&gt;</bpt>value<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="560" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.SortedList`2.TryGetValue(`0,`1@)">
          <source>This parameter is passed uninitialized.</source>
          <target state="translated">Este parámetro se pasa sin inicializar.</target>       </trans-unit>
        <trans-unit id="561" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.SortedList`2.TryGetValue(`0,`1@)">
          <source>Gets the value associated with the specified key.</source>
          <target state="translated">Obtiene el valor asociado a la clave especificada.</target>       </trans-unit>
        <trans-unit id="562" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.SortedList`2.TryGetValue(`0,`1@)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the <ph id="ph2">&lt;see cref="T:System.Collections.Generic.SortedList`2" /&gt;</ph> contains an element with the specified key; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> si la colección <ph id="ph2">&lt;see cref="T:System.Collections.Generic.SortedList`2" /&gt;</ph> contiene un elemento con la clave especificada; en caso contrario, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="563" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.SortedList`2.TryGetValue(`0,`1@)">
          <source>This method combines the functionality of the <ph id="ph1">&lt;xref:System.Collections.Generic.SortedList%602.ContainsKey%2A&gt;</ph> method and the <ph id="ph2">&lt;xref:System.Collections.Generic.SortedList%602.Item%2A&gt;</ph> property.</source>
          <target state="translated">Este método combina la funcionalidad de la <ph id="ph1">&lt;xref:System.Collections.Generic.SortedList%602.ContainsKey%2A&gt;</ph> método y <ph id="ph2">&lt;xref:System.Collections.Generic.SortedList%602.Item%2A&gt;</ph> propiedad.</target>       </trans-unit>
        <trans-unit id="564" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.SortedList`2.TryGetValue(`0,`1@)">
          <source>If the key is not found, then the <ph id="ph1">`value`</ph> parameter gets the appropriate default value for the value type <ph id="ph2">`TValue`</ph>; for example, zero (0) for integer types, <ph id="ph3">`false`</ph> for Boolean types, and <ph id="ph4">`null`</ph> for reference types.</source>
          <target state="translated">Si no se encuentra la clave, el <ph id="ph1">`value`</ph> parámetro Obtiene el valor predeterminado adecuado para el tipo de valor <ph id="ph2">`TValue`</ph>; por ejemplo, cero (0) para los tipos de enteros, <ph id="ph3">`false`</ph> para tipos booleanos, y <ph id="ph4">`null`</ph> para tipos de referencia.</target>       </trans-unit>
        <trans-unit id="565" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.SortedList`2.TryGetValue(`0,`1@)">
          <source>This method performs a binary search; therefore, this method is an O(log <ph id="ph1">`n`</ph>) operation, where <ph id="ph2">`n`</ph> is <ph id="ph3">&lt;xref:System.Collections.Generic.SortedList%602.Count%2A&gt;</ph>.</source>
          <target state="translated">Este método realiza una búsqueda binaria; por lo tanto, este método es una O (registro <ph id="ph1">`n`</ph>) operación, donde <ph id="ph2">`n`</ph> es <ph id="ph3">&lt;xref:System.Collections.Generic.SortedList%602.Count%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="566" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.SortedList`2.TryGetValue(`0,`1@)">
          <source>The example shows how to use the <ph id="ph1">&lt;xref:System.Collections.Generic.SortedList%602.TryGetValue%2A&gt;</ph> method as a more efficient way to retrieve values in a program that frequently tries keys that are not in the sorted list.</source>
          <target state="translated">En el ejemplo se muestra cómo utilizar el <ph id="ph1">&lt;xref:System.Collections.Generic.SortedList%602.TryGetValue%2A&gt;</ph> método como una forma más eficaz de recuperar valores en un programa que prueba con frecuencia claves que no están en la lista ordenada.</target>       </trans-unit>
        <trans-unit id="567" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.SortedList`2.TryGetValue(`0,`1@)">
          <source>For contrast, the example also shows how the <ph id="ph1">&lt;xref:System.Collections.Generic.SortedList%602.Item%2A&gt;</ph> property (the indexer in C#) throws exceptions when attempting to retrieve nonexistent keys.</source>
          <target state="translated">Por otra parte, el ejemplo también muestra cómo el <ph id="ph1">&lt;xref:System.Collections.Generic.SortedList%602.Item%2A&gt;</ph> propiedad (el indizador en C#) produce excepciones al intentar recuperar claves que no existen.</target>       </trans-unit>
        <trans-unit id="568" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.SortedList`2.TryGetValue(`0,`1@)">
          <source>This code example is part of a larger example provided for the <ph id="ph1">&lt;xref:System.Collections.Generic.SortedList%602&gt;</ph> class.</source>
          <target state="translated">Este ejemplo de código forma parte de un ejemplo mayor proporcionado para el <ph id="ph1">&lt;xref:System.Collections.Generic.SortedList%602&gt;</ph> clase.</target>       </trans-unit>
        <trans-unit id="569" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.SortedList`2.TryGetValue(`0,`1@)">
          <source><ph id="ph1">&lt;paramref name="key" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="key" /&gt;</ph> es <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="570" translate="yes" xml:space="preserve" uid="P:System.Collections.Generic.SortedList`2.Values">
          <source>Gets a collection containing the values in the <ph id="ph1">&lt;see cref="T:System.Collections.Generic.SortedList`2" /&gt;</ph>.</source>
          <target state="translated">Obtiene una colección que contiene los valores de <ph id="ph1">&lt;see cref="T:System.Collections.Generic.SortedList`2" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="571" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.SortedList`2.Values">
          <source>A <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IList`1" /&gt;</ph> containing the values in the <ph id="ph2">&lt;see cref="T:System.Collections.Generic.SortedList`2" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Collections.Generic.IList`1" /&gt;</ph> que contiene los valores de <ph id="ph2">&lt;see cref="T:System.Collections.Generic.SortedList`2" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="572" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.SortedList`2.Values">
          <source>The order of the values in the <ph id="ph1">&lt;xref:System.Collections.Generic.IList%601&gt;</ph> is the same as the order in the <ph id="ph2">&lt;xref:System.Collections.Generic.SortedList%602&gt;</ph>.</source>
          <target state="translated">El orden de los valores de la <ph id="ph1">&lt;xref:System.Collections.Generic.IList%601&gt;</ph> es el mismo que el orden en el <ph id="ph2">&lt;xref:System.Collections.Generic.SortedList%602&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="573" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.SortedList`2.Values">
          <source>The returned <ph id="ph1">&lt;xref:System.Collections.Generic.IList%601&gt;</ph> is not a static copy; instead, the <ph id="ph2">&lt;xref:System.Collections.Generic.IList%601&gt;</ph> refers back to the values in the original <ph id="ph3">&lt;xref:System.Collections.Generic.SortedList%602&gt;</ph>.</source>
          <target state="translated">El valor devuelto <ph id="ph1">&lt;xref:System.Collections.Generic.IList%601&gt;</ph> no es una copia estática; en su lugar, el <ph id="ph2">&lt;xref:System.Collections.Generic.IList%601&gt;</ph> hace referencia a los valores de la versión original <ph id="ph3">&lt;xref:System.Collections.Generic.SortedList%602&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="574" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.SortedList`2.Values">
          <source>Therefore, changes to the <ph id="ph1">&lt;xref:System.Collections.Generic.SortedList%602&gt;</ph> continue to be reflected in the <ph id="ph2">&lt;xref:System.Collections.Generic.IList%601&gt;</ph>.</source>
          <target state="translated">Por consiguiente, los cambios a la <ph id="ph1">&lt;xref:System.Collections.Generic.SortedList%602&gt;</ph> continuarán reflejarse en el <ph id="ph2">&lt;xref:System.Collections.Generic.IList%601&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="575" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.SortedList`2.Values">
          <source>The collection returned by the <ph id="ph1">&lt;xref:System.Collections.Generic.SortedList%602.Values%2A&gt;</ph> property provides an efficient way to retrieve values by index.</source>
          <target state="translated">La colección devuelta por la <ph id="ph1">&lt;xref:System.Collections.Generic.SortedList%602.Values%2A&gt;</ph> propiedad proporciona una manera eficaz de recuperar valores de índice.</target>       </trans-unit>
        <trans-unit id="576" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.SortedList`2.Values">
          <source>It is not necessary to regenerate the list when the property is accessed, because the list is just a wrapper for the internal array of values.</source>
          <target state="translated">No es necesario volver a generar la lista cuando se tiene acceso a la propiedad, porque la lista es simplemente un contenedor para la matriz interna de valores.</target>       </trans-unit>
        <trans-unit id="577" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.SortedList`2.Values">
          <source>The following code shows the use of the <ph id="ph1">&lt;xref:System.Collections.Generic.SortedList%602.Values%2A&gt;</ph> property for indexed retrieval of values from a sorted list of strings:</source>
          <target state="translated">El código siguiente muestra el uso de la <ph id="ph1">&lt;xref:System.Collections.Generic.SortedList%602.Values%2A&gt;</ph> propiedad para la recuperación indizada de valores de una lista ordenada de cadenas:</target>       </trans-unit>
        <trans-unit id="578" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.SortedList`2.Values">
          <source>Retrieving the value of this property is an O(1) operation.</source>
          <target state="translated">La recuperación del valor de esta propiedad es una operación O(1).</target>       </trans-unit>
        <trans-unit id="579" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.SortedList`2.Values">
          <source>This code example shows how to enumerate the values in the sorted list using the <ph id="ph1">&lt;xref:System.Collections.Generic.SortedList%602.Values%2A&gt;</ph> property, and how to enumerate the keys and values in the sorted list.</source>
          <target state="translated">Este ejemplo de código muestra cómo enumerar los valores en la lista ordenada utilizando la <ph id="ph1">&lt;xref:System.Collections.Generic.SortedList%602.Values%2A&gt;</ph> propiedad y cómo enumerar las claves y valores en la lista ordenada.</target>       </trans-unit>
        <trans-unit id="580" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.SortedList`2.Values">
          <source>The example also shows how to use the <ph id="ph1">&lt;xref:System.Collections.Generic.SortedList%602.Values%2A&gt;</ph> property for efficient indexed retrieval of values.</source>
          <target state="translated">El ejemplo también muestra cómo utilizar el <ph id="ph1">&lt;xref:System.Collections.Generic.SortedList%602.Values%2A&gt;</ph> propiedad para la recuperación indizada eficaz de valores.</target>       </trans-unit>
        <trans-unit id="581" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.SortedList`2.Values">
          <source>This code example is part of a larger example provided for the <ph id="ph1">&lt;xref:System.Collections.Generic.SortedList%602&gt;</ph> class.</source>
          <target state="translated">Este ejemplo de código forma parte de un ejemplo mayor proporcionado para el <ph id="ph1">&lt;xref:System.Collections.Generic.SortedList%602&gt;</ph> clase.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>