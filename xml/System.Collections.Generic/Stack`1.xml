<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="Stack`1.xml" source-language="en-US" target-language="es-ES">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-efd8310" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">037e736f-f76f-422a-bcb7-5d2d599f851d0d3cbe5b2e0bda1ffadfdb2cce2e45dedae79516.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">0d3cbe5b2e0bda1ffadfdb2cce2e45dedae79516</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">6fc53860cd2661bb7bde6e4b2858fcda4ec4c889</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">05/10/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-1.0,netcore-1.1,netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7.2,netframework-4.7,netstandard-1.0,netstandard-1.1,netstandard-1.2,netstandard-1.3,netstandard-1.4,netstandard-1.6,netstandard-2.0,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.Stack`1">
          <source>Specifies the type of elements in the stack.</source>
          <target state="translated">Especifica el tipo de elementos de la pila.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" uid="T:System.Collections.Generic.Stack`1">
          <source>Represents a variable size last-in-first-out (LIFO) collection of instances of the same specified type.</source>
          <target state="translated">Representa una colección último en entrar, primero en salir (LIFO) de tamaño variable con instancias del mismo tipo especificado.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.Stack`1">
          <source><ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601&gt;</ph> is implemented as an array.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601&gt;</ph> se implementa como una matriz.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.Stack`1">
          <source>Stacks and queues are useful when you need temporary storage for information; that is, when you might want to discard an element after retrieving its value.</source>
          <target state="translated">Pilas y las colas son útiles cuando se necesita almacenamiento temporal de información; es decir, cuando se desee descartar un elemento después de recuperar su valor.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.Stack`1">
          <source>Use <ph id="ph1">&lt;xref:System.Collections.Generic.Queue%601&gt;</ph> if you need to access the information in the same order that it is stored in the collection.</source>
          <target state="translated">Use <ph id="ph1">&lt;xref:System.Collections.Generic.Queue%601&gt;</ph> si necesita acceder a la información en el mismo orden que se almacena en la colección.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.Stack`1">
          <source>Use <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601?displayProperty=nameWithType&gt;</ph> if you need to access the information in reverse order.</source>
          <target state="translated">Use <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601?displayProperty=nameWithType&gt;</ph> si necesita acceder a la información en orden inverso.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.Stack`1">
          <source>Use the <ph id="ph1">&lt;xref:System.Collections.Concurrent.ConcurrentStack%601?displayProperty=nameWithType&gt;</ph> and <ph id="ph2">&lt;xref:System.Collections.Concurrent.ConcurrentQueue%601?displayProperty=nameWithType&gt;</ph> types when you need to access the collection from multiple threads concurrently.</source>
          <target state="translated">Use la <ph id="ph1">&lt;xref:System.Collections.Concurrent.ConcurrentStack%601?displayProperty=nameWithType&gt;</ph> y <ph id="ph2">&lt;xref:System.Collections.Concurrent.ConcurrentQueue%601?displayProperty=nameWithType&gt;</ph> tipos cuando necesite tener acceso a la colección desde varios subprocesos simultáneamente.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.Stack`1">
          <source>A common use for <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601?displayProperty=nameWithType&gt;</ph> is to preserve variable states during calls to other procedures.</source>
          <target state="translated">Un uso común de <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601?displayProperty=nameWithType&gt;</ph> consiste en conservar los Estados de las variables durante las llamadas a otros procedimientos.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.Stack`1">
          <source>Three main operations can be performed on a <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601?displayProperty=nameWithType&gt;</ph> and its elements:</source>
          <target state="translated">Pueden realizar tres operaciones principales en una <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601?displayProperty=nameWithType&gt;</ph> y sus elementos:</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.Stack`1">
          <source><ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Push%2A&gt;</ph> inserts an element at the top of the <ph id="ph2">&lt;xref:System.Collections.Stack&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Push%2A&gt;</ph> Inserta un elemento en la parte superior de la <ph id="ph2">&lt;xref:System.Collections.Stack&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.Stack`1">
          <source><ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Pop%2A&gt;</ph> removes an element from the top of the <ph id="ph2">&lt;xref:System.Collections.Generic.Stack%601&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Pop%2A&gt;</ph> Quita un elemento de la parte superior de la <ph id="ph2">&lt;xref:System.Collections.Generic.Stack%601&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.Stack`1">
          <source><ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Peek%2A&gt;</ph> returns an element that is at the top of the <ph id="ph2">&lt;xref:System.Collections.Generic.Stack%601&gt;</ph> but does not remove it from the <ph id="ph3">&lt;xref:System.Collections.Generic.Stack%601&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Peek%2A&gt;</ph> Devuelve un elemento que está en la parte superior de la <ph id="ph2">&lt;xref:System.Collections.Generic.Stack%601&gt;</ph> pero no se quita de la <ph id="ph3">&lt;xref:System.Collections.Generic.Stack%601&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.Stack`1">
          <source>The capacity of a <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601&gt;</ph> is the number of elements the <ph id="ph2">&lt;xref:System.Collections.Generic.Stack%601&gt;</ph> can hold.</source>
          <target state="translated">La capacidad de un <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601&gt;</ph> es el número de elementos de la <ph id="ph2">&lt;xref:System.Collections.Generic.Stack%601&gt;</ph> puede contener.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.Stack`1">
          <source>As elements are added to a <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601&gt;</ph>, the capacity is automatically increased as required by reallocating the internal array.</source>
          <target state="translated">Cuando se agregan elementos a un <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601&gt;</ph>, la capacidad aumenta automáticamente según sea necesario mediante la reasignación de la matriz interna.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.Stack`1">
          <source>The capacity can be decreased by calling <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.TrimExcess%2A&gt;</ph>.</source>
          <target state="translated">La capacidad puede reducirse mediante una llamada a <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.TrimExcess%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.Stack`1">
          <source>If <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Count%2A&gt;</ph> is less than the capacity of the stack, <ph id="ph2">&lt;xref:System.Collections.Generic.Stack%601.Push%2A&gt;</ph> is an O(1) operation.</source>
          <target state="translated">Si <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Count%2A&gt;</ph> es menor que la capacidad de la pila, <ph id="ph2">&lt;xref:System.Collections.Generic.Stack%601.Push%2A&gt;</ph> es una operación o (1).</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.Stack`1">
          <source>If the capacity needs to be increased to accommodate the new element, <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Push%2A&gt;</ph> becomes an O(<ph id="ph2">`n`</ph>) operation, where <ph id="ph3">`n`</ph> is <ph id="ph4">&lt;xref:System.Collections.Generic.Stack%601.Count%2A&gt;</ph>.</source>
          <target state="translated">Si la capacidad debe aumentarse para alojar el nuevo elemento, <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Push%2A&gt;</ph> se convierte en una O (<ph id="ph2">`n`</ph>) operación, donde <ph id="ph3">`n`</ph> es <ph id="ph4">&lt;xref:System.Collections.Generic.Stack%601.Count%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.Stack`1">
          <source><ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Pop%2A&gt;</ph> is an O(1) operation.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Pop%2A&gt;</ph> es una operación o (1).</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.Stack`1">
          <source><ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601&gt;</ph> accepts <ph id="ph2">`null`</ph> as a valid value for reference types and allows duplicate elements.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601&gt;</ph> acepta <ph id="ph2">`null`</ph> como un valor válido para la referencia de tipos y permite a los elementos duplicados.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.Stack`1">
          <source>The following code example demonstrates several methods of the <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601&gt;</ph> generic class.</source>
          <target state="translated">En el ejemplo de código siguiente se muestra varios métodos de la <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601&gt;</ph> clase genérica.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.Stack`1">
          <source>The code example creates a stack of strings with default capacity and uses the <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Push%2A&gt;</ph> method to push five strings onto the stack.</source>
          <target state="translated">El ejemplo de código crea una pila de cadenas con capacidad predeterminada y usa el <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Push%2A&gt;</ph> método para insertar cinco cadenas en la pila.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.Stack`1">
          <source>The elements of the stack are enumerated, which does not change the state of the stack.</source>
          <target state="translated">Se enumeran los elementos de la pila, que no cambia el estado de la pila.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.Stack`1">
          <source>The <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Pop%2A&gt;</ph> method is used to pop the first string off the stack.</source>
          <target state="translated">El <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Pop%2A&gt;</ph> método se usa para extraer la primera cadena de la pila.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.Stack`1">
          <source>The <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Peek%2A&gt;</ph> method is used to look at the next item on the stack, and then the <ph id="ph2">&lt;xref:System.Collections.Generic.Stack%601.Pop%2A&gt;</ph> method is used to pop it off.</source>
          <target state="translated">El <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Peek%2A&gt;</ph> método se utiliza para buscar en el siguiente elemento en la pila y, a continuación, el <ph id="ph2">&lt;xref:System.Collections.Generic.Stack%601.Pop%2A&gt;</ph> método se usa para extraer.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.Stack`1">
          <source>The <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.ToArray%2A&gt;</ph> method is used to create an array and copy the stack elements to it, then the array is passed to the <ph id="ph2">&lt;xref:System.Collections.Generic.Stack%601.%23ctor%2A&gt;</ph> constructor that takes <ph id="ph3">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph>, creating a copy of the stack with the order of the elements reversed.</source>
          <target state="translated">El <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.ToArray%2A&gt;</ph> método se usa para crear una matriz y copiar los elementos de la pila en él, a continuación, la matriz se pasa a la <ph id="ph2">&lt;xref:System.Collections.Generic.Stack%601.%23ctor%2A&gt;</ph> constructor que toma <ph id="ph3">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph>, crear una copia de la pila con el orden de los elementos invertidos.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.Stack`1">
          <source>The elements of the copy are displayed.</source>
          <target state="translated">Se muestran los elementos de la copia.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.Stack`1">
          <source>An array twice the size of the stack is created, and the <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.CopyTo%2A&gt;</ph> method is used to copy the array elements beginning at the middle of the array.</source>
          <target state="translated">Dos veces el tamaño de la pila se crea una matriz y la <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.CopyTo%2A&gt;</ph> método se usa para copiar los elementos de matriz, empezando por el centro de la matriz.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.Stack`1">
          <source>The <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.%23ctor%2A&gt;</ph> constructor is used again to create a copy of the stack with the order of elements reversed; thus, the three null elements are at the end.</source>
          <target state="translated">El <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.%23ctor%2A&gt;</ph> constructor se utiliza de nuevo para crear una copia de la pila con el orden de los elementos invertidos; por tanto, son los tres elementos null al final.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.Stack`1">
          <source>The <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Contains%2A&gt;</ph> method is used to show that the string "four" is in the first copy of the stack, after which the <ph id="ph2">&lt;xref:System.Collections.Generic.Stack%601.Clear%2A&gt;</ph> method clears the copy and the <ph id="ph3">&lt;xref:System.Collections.Generic.Stack%601.Count%2A&gt;</ph> property shows that the stack is empty.</source>
          <target state="translated">El <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Contains%2A&gt;</ph> método se usa para mostrar que la cadena "four" está en la primera copia de la pila, después del cual el <ph id="ph2">&lt;xref:System.Collections.Generic.Stack%601.Clear%2A&gt;</ph> método borra la copia y el <ph id="ph3">&lt;xref:System.Collections.Generic.Stack%601.Count%2A&gt;</ph> propiedad muestra que la pila está vacía.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.Stack`1">
          <source>Public static (<ph id="ph1">&lt;see langword="Shared" /&gt;</ph> in Visual Basic) members of this type are thread safe.</source>
          <target state="translated">Estático público (<ph id="ph1">&lt;see langword="Shared" /&gt;</ph> en Visual Basic) miembros de este tipo son seguros para subprocesos.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.Stack`1">
          <source>Any instance members are not guaranteed to be thread safe.</source>
          <target state="translated">No se garantiza que los miembros de instancias sean seguros para la ejecución de subprocesos.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.Stack`1">
          <source>A <ph id="ph1">&lt;see cref="T:System.Collections.Generic.Stack`1" /&gt;</ph> can support multiple readers concurrently, as long as the collection is not modified.</source>
          <target state="translated">Un <ph id="ph1">&lt;see cref="T:System.Collections.Generic.Stack`1" /&gt;</ph> puede admitir varios sistemas de lectura al mismo tiempo, siempre y cuando no se modifica la colección.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.Stack`1">
          <source>Even so, enumerating through a collection is intrinsically not a thread-safe procedure.</source>
          <target state="translated">Aun así, enumerar una colección no es intrínsecamente un procedimiento seguro para subprocesos.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.Stack`1">
          <source>To guarantee thread safety during enumeration, you can lock the collection during the entire enumeration.</source>
          <target state="translated">A fin de garantizar la seguridad de los subprocesos, se puede bloquear la colección durante toda la enumeración.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.Stack`1">
          <source>To allow the collection to be accessed by multiple threads for reading and writing, you must implement your own synchronization.</source>
          <target state="translated">Para permitir que varios subprocesos obtengan acceso de lectura y escritura a la colección, debe implementar su propia sincronización.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" uid="T:System.Collections.Generic.Stack`1">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Collections.Generic.Stack`1" /&gt;</ph> class.</source>
          <target state="translated">Inicializa una nueva instancia de la clase <ph id="ph1">&lt;see cref="T:System.Collections.Generic.Stack`1" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.Stack`1.#ctor">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Collections.Generic.Stack`1" /&gt;</ph> class that is empty and has the default initial capacity.</source>
          <target state="translated">Inicializa una nueva instancia de la clase <ph id="ph1">&lt;see cref="T:System.Collections.Generic.Stack`1" /&gt;</ph> que está vacía y tiene la capacidad inicial predeterminada.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.#ctor">
          <source>The capacity of a <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601&gt;</ph> is the number of elements that the <ph id="ph2">&lt;xref:System.Collections.Generic.Stack%601&gt;</ph> can hold.</source>
          <target state="translated">La capacidad de un <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601&gt;</ph> es el número de elementos que la <ph id="ph2">&lt;xref:System.Collections.Generic.Stack%601&gt;</ph> puede contener.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.#ctor">
          <source>As elements are added to a <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601&gt;</ph>, the capacity is automatically increased as required by reallocating the internal array.</source>
          <target state="translated">Cuando se agregan elementos a un <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601&gt;</ph>, la capacidad aumenta automáticamente según sea necesario mediante la reasignación de la matriz interna.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.#ctor">
          <source>If the size of the collection can be estimated, specifying the initial capacity eliminates the need to perform a number of resizing operations while adding elements to the <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601&gt;</ph>.</source>
          <target state="translated">Si se puede estimar el tamaño de la colección, al especificar la capacidad inicial elimina la necesidad de realizar una serie de operaciones de cambio de tamaño al agregar elementos a la <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.#ctor">
          <source>The capacity can be decreased by calling <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.TrimExcess%2A&gt;</ph>.</source>
          <target state="translated">La capacidad puede reducirse mediante una llamada a <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.TrimExcess%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.#ctor">
          <source>This constructor is an O(1) operation.</source>
          <target state="translated">Este constructor es una operación o (1).</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.#ctor">
          <source>The following code example demonstrates this constructor and several methods of the <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601&gt;</ph> generic class.</source>
          <target state="translated">En el ejemplo de código siguiente se muestra este constructor y varios métodos de la <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601&gt;</ph> clase genérica.</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.#ctor">
          <source>The code example creates a stack of strings with default capacity and uses the <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Push%2A&gt;</ph> method to push five strings onto the stack.</source>
          <target state="translated">El ejemplo de código crea una pila de cadenas con capacidad predeterminada y usa el <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Push%2A&gt;</ph> método para insertar cinco cadenas en la pila.</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.#ctor">
          <source>The elements of the stack are enumerated, which does not change the state of the stack.</source>
          <target state="translated">Se enumeran los elementos de la pila, que no cambia el estado de la pila.</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.#ctor">
          <source>The <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Pop%2A&gt;</ph> method is used to pop the first string off the stack.</source>
          <target state="translated">El <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Pop%2A&gt;</ph> método se usa para extraer la primera cadena de la pila.</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.#ctor">
          <source>The <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Peek%2A&gt;</ph> method is used to look at the next item on the stack, and then the <ph id="ph2">&lt;xref:System.Collections.Generic.Stack%601.Pop%2A&gt;</ph> method is used to pop it off.</source>
          <target state="translated">El <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Peek%2A&gt;</ph> método se utiliza para buscar en el siguiente elemento en la pila y, a continuación, el <ph id="ph2">&lt;xref:System.Collections.Generic.Stack%601.Pop%2A&gt;</ph> método se usa para extraer.</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.#ctor">
          <source>The <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.ToArray%2A&gt;</ph> method is used to create an array and copy the stack elements to it, then the array is passed to the <ph id="ph2">&lt;xref:System.Collections.Generic.Stack%601.%23ctor%2A&gt;</ph> constructor that takes <ph id="ph3">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph>, creating a copy of the stack with the order of the elements reversed.</source>
          <target state="translated">El <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.ToArray%2A&gt;</ph> método se usa para crear una matriz y copiar los elementos de la pila en él, a continuación, la matriz se pasa a la <ph id="ph2">&lt;xref:System.Collections.Generic.Stack%601.%23ctor%2A&gt;</ph> constructor que toma <ph id="ph3">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph>, crear una copia de la pila con el orden de los elementos invertidos.</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.#ctor">
          <source>The elements of the copy are displayed.</source>
          <target state="translated">Se muestran los elementos de la copia.</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.#ctor">
          <source>An array twice the size of the stack is created, and the <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.CopyTo%2A&gt;</ph> method is used to copy the array elements beginning at the middle of the array.</source>
          <target state="translated">Dos veces el tamaño de la pila se crea una matriz y la <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.CopyTo%2A&gt;</ph> método se usa para copiar los elementos de matriz, empezando por el centro de la matriz.</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.#ctor">
          <source>The <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.%23ctor%2A&gt;</ph> constructor is used again to create a copy of the stack with the order of elements reversed; thus, the three null elements are at the end.</source>
          <target state="translated">El <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.%23ctor%2A&gt;</ph> constructor se utiliza de nuevo para crear una copia de la pila con el orden de los elementos invertidos; por tanto, son los tres elementos null al final.</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.#ctor">
          <source>The <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Contains%2A&gt;</ph> method is used to show that the string "four" is in the first copy of the stack, after which the <ph id="ph2">&lt;xref:System.Collections.Generic.Stack%601.Clear%2A&gt;</ph> method clears the copy and the <ph id="ph3">&lt;xref:System.Collections.Generic.Stack%601.Count%2A&gt;</ph> property shows that the stack is empty.</source>
          <target state="translated">El <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Contains%2A&gt;</ph> método se usa para mostrar que la cadena "four" está en la primera copia de la pila, después del cual el <ph id="ph2">&lt;xref:System.Collections.Generic.Stack%601.Clear%2A&gt;</ph> método borra la copia y el <ph id="ph3">&lt;xref:System.Collections.Generic.Stack%601.Count%2A&gt;</ph> propiedad muestra que la pila está vacía.</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.Stack`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
          <source>The collection to copy elements from.</source>
          <target state="translated">Colección de la que se van a copiar los elementos.</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.Stack`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Collections.Generic.Stack`1" /&gt;</ph> class that contains elements copied from the specified collection and has sufficient capacity to accommodate the number of elements copied.</source>
          <target state="translated">Inicializa una nueva instancia de la clase <ph id="ph1">&lt;see cref="T:System.Collections.Generic.Stack`1" /&gt;</ph> que contiene elementos copiados de la colección especificada y tiene una capacidad suficiente para aceptar el número de elementos copiados.</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
          <source>The capacity of a <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601&gt;</ph> is the number of elements that the <ph id="ph2">&lt;xref:System.Collections.Generic.Stack%601&gt;</ph> can hold.</source>
          <target state="translated">La capacidad de un <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601&gt;</ph> es el número de elementos que la <ph id="ph2">&lt;xref:System.Collections.Generic.Stack%601&gt;</ph> puede contener.</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
          <source>As elements are added to a <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601&gt;</ph>, the capacity is automatically increased as required by reallocating the internal array.</source>
          <target state="translated">Cuando se agregan elementos a un <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601&gt;</ph>, la capacidad aumenta automáticamente según sea necesario mediante la reasignación de la matriz interna.</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
          <source>If the size of the collection can be estimated, specifying the initial capacity eliminates the need to perform a number of resizing operations while adding elements to the <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601&gt;</ph>.</source>
          <target state="translated">Si se puede estimar el tamaño de la colección, al especificar la capacidad inicial elimina la necesidad de realizar una serie de operaciones de cambio de tamaño al agregar elementos a la <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
          <source>The capacity can be decreased by calling <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.TrimExcess%2A&gt;</ph>.</source>
          <target state="translated">La capacidad puede reducirse mediante una llamada a <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.TrimExcess%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
          <source>The elements are copied onto the <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601&gt;</ph> in the same order they are read by the <ph id="ph2">&lt;xref:System.Collections.Generic.IEnumerator%601&gt;</ph> of the collection.</source>
          <target state="translated">Los elementos se copian en el <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601&gt;</ph> en el mismo orden que los lee la <ph id="ph2">&lt;xref:System.Collections.Generic.IEnumerator%601&gt;</ph> de la colección.</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
          <source>This constructor is an O(<ph id="ph1">`n`</ph>) operation, where <ph id="ph2">`n`</ph> is the number of elements in <ph id="ph3">`collection`</ph>.</source>
          <target state="translated">Este constructor es una O (<ph id="ph1">`n`</ph>) operación, donde <ph id="ph2">`n`</ph> es el número de elementos de <ph id="ph3">`collection`</ph>.</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
          <source>The following code example demonstrates this constructor and several methods of the <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601&gt;</ph> generic class.</source>
          <target state="translated">En el ejemplo de código siguiente se muestra este constructor y varios métodos de la <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601&gt;</ph> clase genérica.</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
          <source>The code example creates a stack of strings with default capacity and uses the <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Push%2A&gt;</ph> method to push five strings onto the stack.</source>
          <target state="translated">El ejemplo de código crea una pila de cadenas con capacidad predeterminada y usa el <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Push%2A&gt;</ph> método para insertar cinco cadenas en la pila.</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
          <source>The elements of the stack are enumerated, which does not change the state of the stack.</source>
          <target state="translated">Se enumeran los elementos de la pila, que no cambia el estado de la pila.</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
          <source>The <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Pop%2A&gt;</ph> method is used to pop the first string off the stack.</source>
          <target state="translated">El <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Pop%2A&gt;</ph> método se usa para extraer la primera cadena de la pila.</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
          <source>The <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Peek%2A&gt;</ph> method is used to look at the next item on the stack, and then the <ph id="ph2">&lt;xref:System.Collections.Generic.Stack%601.Pop%2A&gt;</ph> method is used to pop it off.</source>
          <target state="translated">El <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Peek%2A&gt;</ph> método se utiliza para buscar en el siguiente elemento en la pila y, a continuación, el <ph id="ph2">&lt;xref:System.Collections.Generic.Stack%601.Pop%2A&gt;</ph> método se usa para extraer.</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
          <source>The <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.ToArray%2A&gt;</ph> method is used to create an array and copy the stack elements to it, then the array is passed to the <ph id="ph2">&lt;xref:System.Collections.Generic.Stack%601.%23ctor%2A&gt;</ph> constructor that takes <ph id="ph3">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph>, creating a copy of the stack with the order of the elements reversed.</source>
          <target state="translated">El <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.ToArray%2A&gt;</ph> método se usa para crear una matriz y copiar los elementos de la pila en él, a continuación, la matriz se pasa a la <ph id="ph2">&lt;xref:System.Collections.Generic.Stack%601.%23ctor%2A&gt;</ph> constructor que toma <ph id="ph3">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph>, crear una copia de la pila con el orden de los elementos invertidos.</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
          <source>The elements of the copy are displayed.</source>
          <target state="translated">Se muestran los elementos de la copia.</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
          <source>An array twice the size of the stack is created, and the <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.CopyTo%2A&gt;</ph> method is used to copy the array elements beginning at the middle of the array.</source>
          <target state="translated">Dos veces el tamaño de la pila se crea una matriz y la <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.CopyTo%2A&gt;</ph> método se usa para copiar los elementos de matriz, empezando por el centro de la matriz.</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
          <source>The <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.%23ctor%2A&gt;</ph> constructor is used again to create a copy of the stack with the order of elements reversed; thus, the three null elements are at the end.</source>
          <target state="translated">El <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.%23ctor%2A&gt;</ph> constructor se utiliza de nuevo para crear una copia de la pila con el orden de los elementos invertidos; por tanto, son los tres elementos null al final.</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
          <source>The <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Contains%2A&gt;</ph> method is used to show that the string "four" is in the first copy of the stack, after which the <ph id="ph2">&lt;xref:System.Collections.Generic.Stack%601.Clear%2A&gt;</ph> method clears the copy and the <ph id="ph3">&lt;xref:System.Collections.Generic.Stack%601.Count%2A&gt;</ph> property shows that the stack is empty.</source>
          <target state="translated">El <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Contains%2A&gt;</ph> método se usa para mostrar que la cadena "four" está en la primera copia de la pila, después del cual el <ph id="ph2">&lt;xref:System.Collections.Generic.Stack%601.Clear%2A&gt;</ph> método borra la copia y el <ph id="ph3">&lt;xref:System.Collections.Generic.Stack%601.Count%2A&gt;</ph> propiedad muestra que la pila está vacía.</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.Stack`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
          <source><ph id="ph1">&lt;paramref name="collection" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="collection" /&gt;</ph> es <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.Stack`1.#ctor(System.Int32)">
          <source>The initial number of elements that the <ph id="ph1">&lt;see cref="T:System.Collections.Generic.Stack`1" /&gt;</ph> can contain.</source>
          <target state="translated">Número inicial de elementos que puede contener la colección <ph id="ph1">&lt;see cref="T:System.Collections.Generic.Stack`1" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.Stack`1.#ctor(System.Int32)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Collections.Generic.Stack`1" /&gt;</ph> class that is empty and has the specified initial capacity or the default initial capacity, whichever is greater.</source>
          <target state="translated">Inicializa una nueva instancia de la clase <ph id="ph1">&lt;see cref="T:System.Collections.Generic.Stack`1" /&gt;</ph> que está vacía y tiene la capacidad inicial especificada o la capacidad inicial predeterminada, la que sea mayor.</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.#ctor(System.Int32)">
          <source>The capacity of a <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601&gt;</ph> is the number of elements that the <ph id="ph2">&lt;xref:System.Collections.Generic.Stack%601&gt;</ph> can hold.</source>
          <target state="translated">La capacidad de un <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601&gt;</ph> es el número de elementos que la <ph id="ph2">&lt;xref:System.Collections.Generic.Stack%601&gt;</ph> puede contener.</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.#ctor(System.Int32)">
          <source>As elements are added to a <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601&gt;</ph>, the capacity is automatically increased as required by reallocating the internal array.</source>
          <target state="translated">Cuando se agregan elementos a un <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601&gt;</ph>, la capacidad aumenta automáticamente según sea necesario mediante la reasignación de la matriz interna.</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.#ctor(System.Int32)">
          <source>If the size of the collection can be estimated, specifying the initial capacity eliminates the need to perform a number of resizing operations while adding elements to the <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601&gt;</ph>.</source>
          <target state="translated">Si se puede estimar el tamaño de la colección, al especificar la capacidad inicial elimina la necesidad de realizar una serie de operaciones de cambio de tamaño al agregar elementos a la <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.#ctor(System.Int32)">
          <source>The capacity can be decreased by calling <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.TrimExcess%2A&gt;</ph>.</source>
          <target state="translated">La capacidad puede reducirse mediante una llamada a <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.TrimExcess%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.#ctor(System.Int32)">
          <source>This constructor is an O(<ph id="ph1">`n`</ph>) operation, where <ph id="ph2">`n`</ph> is <ph id="ph3">`capacity`</ph>.</source>
          <target state="translated">Este constructor es una O (<ph id="ph1">`n`</ph>) operación, donde <ph id="ph2">`n`</ph> es <ph id="ph3">`capacity`</ph>.</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.Stack`1.#ctor(System.Int32)">
          <source><ph id="ph1">&lt;paramref name="capacity" /&gt;</ph> is less than zero.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="capacity" /&gt;</ph> es menor que cero.</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.Stack`1.Clear">
          <source>Removes all objects from the <ph id="ph1">&lt;see cref="T:System.Collections.Generic.Stack`1" /&gt;</ph>.</source>
          <target state="translated">Quita todos los objetos de la colección <ph id="ph1">&lt;see cref="T:System.Collections.Generic.Stack`1" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.Clear">
          <source><ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Count%2A&gt;</ph> is set to zero, and references to other objects from elements of the collection are also released.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Count%2A&gt;</ph> está establecido en cero, y también se liberan las referencias a otros objetos desde los elementos de la colección.</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.Clear">
          <source>The capacity remains unchanged.</source>
          <target state="translated">La capacidad permanece sin cambios.</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.Clear">
          <source>To reset the capacity of the <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601&gt;</ph>, call <ph id="ph2">&lt;xref:System.Collections.Generic.Stack%601.TrimExcess%2A&gt;</ph>.</source>
          <target state="translated">Para restablecer la capacidad de la <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601&gt;</ph>, llame a <ph id="ph2">&lt;xref:System.Collections.Generic.Stack%601.TrimExcess%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.Clear">
          <source>Trimming an empty <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601&gt;</ph> sets the capacity of the <ph id="ph2">&lt;xref:System.Collections.Generic.Stack%601&gt;</ph> to the default capacity.</source>
          <target state="translated">Recortar vacío <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601&gt;</ph> establece la capacidad de la <ph id="ph2">&lt;xref:System.Collections.Generic.Stack%601&gt;</ph> en la capacidad predeterminada.</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.Clear">
          <source>This method is an O(<ph id="ph1">`n`</ph>) operation, where <ph id="ph2">`n`</ph> is <ph id="ph3">&lt;xref:System.Collections.Generic.Stack%601.Count%2A&gt;</ph>.</source>
          <target state="translated">Este método es una O (<ph id="ph1">`n`</ph>) operación, donde <ph id="ph2">`n`</ph> es <ph id="ph3">&lt;xref:System.Collections.Generic.Stack%601.Count%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.Clear">
          <source>The following code example demonstrates several methods of the <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601&gt;</ph> generic class, including the <ph id="ph2">&lt;xref:System.Collections.Generic.Stack%601.Clear%2A&gt;</ph> method.</source>
          <target state="translated">En el ejemplo de código siguiente se muestra varios métodos de la <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601&gt;</ph> clase genérica, incluida la <ph id="ph2">&lt;xref:System.Collections.Generic.Stack%601.Clear%2A&gt;</ph> método.</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.Clear">
          <source>The code example creates a stack of strings with default capacity and uses the <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Push%2A&gt;</ph> method to push five strings onto the stack.</source>
          <target state="translated">El ejemplo de código crea una pila de cadenas con capacidad predeterminada y usa el <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Push%2A&gt;</ph> método para insertar cinco cadenas en la pila.</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.Clear">
          <source>The elements of the stack are enumerated, which does not change the state of the stack.</source>
          <target state="translated">Se enumeran los elementos de la pila, que no cambia el estado de la pila.</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.Clear">
          <source>The <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Pop%2A&gt;</ph> method is used to pop the first string off the stack.</source>
          <target state="translated">El <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Pop%2A&gt;</ph> método se usa para extraer la primera cadena de la pila.</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.Clear">
          <source>The <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Peek%2A&gt;</ph> method is used to look at the next item on the stack, and then the <ph id="ph2">&lt;xref:System.Collections.Generic.Stack%601.Pop%2A&gt;</ph> method is used to pop it off.</source>
          <target state="translated">El <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Peek%2A&gt;</ph> método se utiliza para buscar en el siguiente elemento en la pila y, a continuación, el <ph id="ph2">&lt;xref:System.Collections.Generic.Stack%601.Pop%2A&gt;</ph> método se usa para extraer.</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.Clear">
          <source>The <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.ToArray%2A&gt;</ph> method is used to create an array and copy the stack elements to it, then the array is passed to the <ph id="ph2">&lt;xref:System.Collections.Generic.Stack%601.%23ctor%2A&gt;</ph> constructor that takes <ph id="ph3">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph>, creating a copy of the stack with the order of the elements reversed.</source>
          <target state="translated">El <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.ToArray%2A&gt;</ph> método se usa para crear una matriz y copiar los elementos de la pila en él, a continuación, la matriz se pasa a la <ph id="ph2">&lt;xref:System.Collections.Generic.Stack%601.%23ctor%2A&gt;</ph> constructor que toma <ph id="ph3">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph>, crear una copia de la pila con el orden de los elementos invertidos.</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.Clear">
          <source>The elements of the copy are displayed.</source>
          <target state="translated">Se muestran los elementos de la copia.</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.Clear">
          <source>An array twice the size of the stack is created, and the <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.CopyTo%2A&gt;</ph> method is used to copy the array elements beginning at the middle of the array.</source>
          <target state="translated">Dos veces el tamaño de la pila se crea una matriz y la <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.CopyTo%2A&gt;</ph> método se usa para copiar los elementos de matriz, empezando por el centro de la matriz.</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.Clear">
          <source>The <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.%23ctor%2A&gt;</ph> constructor is used again to create a copy of the stack with the order of elements reversed; thus, the three null elements are at the end.</source>
          <target state="translated">El <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.%23ctor%2A&gt;</ph> constructor se utiliza de nuevo para crear una copia de la pila con el orden de los elementos invertidos; por tanto, son los tres elementos null al final.</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.Clear">
          <source>The <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Contains%2A&gt;</ph> method is used to show that the string "four" is in the first copy of the stack, after which the <ph id="ph2">&lt;xref:System.Collections.Generic.Stack%601.Clear%2A&gt;</ph> method clears the copy and the <ph id="ph3">&lt;xref:System.Collections.Generic.Stack%601.Count%2A&gt;</ph> property shows that the stack is empty.</source>
          <target state="translated">El <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Contains%2A&gt;</ph> método se usa para mostrar que la cadena "four" está en la primera copia de la pila, después del cual el <ph id="ph2">&lt;xref:System.Collections.Generic.Stack%601.Clear%2A&gt;</ph> método borra la copia y el <ph id="ph3">&lt;xref:System.Collections.Generic.Stack%601.Count%2A&gt;</ph> propiedad muestra que la pila está vacía.</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.Stack`1.Contains(`0)">
          <source>The object to locate in the <ph id="ph1">&lt;see cref="T:System.Collections.Generic.Stack`1" /&gt;</ph>.</source>
          <target state="translated">Objeto que se va a buscar en <ph id="ph1">&lt;see cref="T:System.Collections.Generic.Stack`1" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.Stack`1.Contains(`0)">
          <source>The value can be <ph id="ph1">&lt;see langword="null" /&gt;</ph> for reference types.</source>
          <target state="translated">El valor puede ser <ph id="ph1">&lt;see langword="null" /&gt;</ph> para los tipos de referencia.</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.Stack`1.Contains(`0)">
          <source>Determines whether an element is in the <ph id="ph1">&lt;see cref="T:System.Collections.Generic.Stack`1" /&gt;</ph>.</source>
          <target state="translated">Determina si un elemento se encuentra en <ph id="ph1">&lt;see cref="T:System.Collections.Generic.Stack`1" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.Stack`1.Contains(`0)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if <ph id="ph2">&lt;paramref name="item" /&gt;</ph> is found in the <ph id="ph3">&lt;see cref="T:System.Collections.Generic.Stack`1" /&gt;</ph>; otherwise, <ph id="ph4">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> si <ph id="ph2">&lt;paramref name="item" /&gt;</ph> se encuentra en la matriz <ph id="ph3">&lt;see cref="T:System.Collections.Generic.Stack`1" /&gt;</ph>; en caso contrario, <ph id="ph4">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.Contains(`0)">
          <source>This method determines equality using the default equality comparer <ph id="ph1">&lt;xref:System.Collections.Generic.EqualityComparer%601.Default%2A?displayProperty=nameWithType&gt;</ph> for <ph id="ph2">`T`</ph>, the type of values in the list.</source>
          <target state="translated">Este método determina la igualdad utilizando el comparador de igualdad predeterminado <ph id="ph1">&lt;xref:System.Collections.Generic.EqualityComparer%601.Default%2A?displayProperty=nameWithType&gt;</ph> para <ph id="ph2">`T`</ph>, el tipo de valores de la lista.</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.Contains(`0)">
          <source>This method performs a linear search; therefore, this method is an O(<ph id="ph1">`n`</ph>) operation, where <ph id="ph2">`n`</ph> is <ph id="ph3">&lt;xref:System.Collections.Generic.Stack%601.Count%2A&gt;</ph>.</source>
          <target state="translated">Este método realiza una búsqueda lineal; por lo tanto, este método es una O (<ph id="ph1">`n`</ph>) operación, donde <ph id="ph2">`n`</ph> es <ph id="ph3">&lt;xref:System.Collections.Generic.Stack%601.Count%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.Contains(`0)">
          <source>The following code example demonstrates several methods of the <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601&gt;</ph> generic class, including the <ph id="ph2">&lt;xref:System.Collections.Generic.Stack%601.Contains%2A&gt;</ph> method.</source>
          <target state="translated">En el ejemplo de código siguiente se muestra varios métodos de la <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601&gt;</ph> clase genérica, incluida la <ph id="ph2">&lt;xref:System.Collections.Generic.Stack%601.Contains%2A&gt;</ph> método.</target>       </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.Contains(`0)">
          <source>The code example creates a stack of strings with default capacity and uses the <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Push%2A&gt;</ph> method to push five strings onto the stack.</source>
          <target state="translated">El ejemplo de código crea una pila de cadenas con capacidad predeterminada y usa el <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Push%2A&gt;</ph> método para insertar cinco cadenas en la pila.</target>       </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.Contains(`0)">
          <source>The elements of the stack are enumerated, which does not change the state of the stack.</source>
          <target state="translated">Se enumeran los elementos de la pila, que no cambia el estado de la pila.</target>       </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.Contains(`0)">
          <source>The <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Pop%2A&gt;</ph> method is used to pop the first string off the stack.</source>
          <target state="translated">El <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Pop%2A&gt;</ph> método se usa para extraer la primera cadena de la pila.</target>       </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.Contains(`0)">
          <source>The <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Peek%2A&gt;</ph> method is used to look at the next item on the stack, and then the <ph id="ph2">&lt;xref:System.Collections.Generic.Stack%601.Pop%2A&gt;</ph> method is used to pop it off.</source>
          <target state="translated">El <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Peek%2A&gt;</ph> método se utiliza para buscar en el siguiente elemento en la pila y, a continuación, el <ph id="ph2">&lt;xref:System.Collections.Generic.Stack%601.Pop%2A&gt;</ph> método se usa para extraer.</target>       </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.Contains(`0)">
          <source>The <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.ToArray%2A&gt;</ph> method is used to create an array and copy the stack elements to it, then the array is passed to the <ph id="ph2">&lt;xref:System.Collections.Generic.Stack%601.%23ctor%2A&gt;</ph> constructor that takes <ph id="ph3">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph>, creating a copy of the stack with the order of the elements reversed.</source>
          <target state="translated">El <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.ToArray%2A&gt;</ph> método se usa para crear una matriz y copiar los elementos de la pila en él, a continuación, la matriz se pasa a la <ph id="ph2">&lt;xref:System.Collections.Generic.Stack%601.%23ctor%2A&gt;</ph> constructor que toma <ph id="ph3">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph>, crear una copia de la pila con el orden de los elementos invertidos.</target>       </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.Contains(`0)">
          <source>The elements of the copy are displayed.</source>
          <target state="translated">Se muestran los elementos de la copia.</target>       </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.Contains(`0)">
          <source>An array twice the size of the stack is created, and the <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.CopyTo%2A&gt;</ph> method is used to copy the array elements beginning at the middle of the array.</source>
          <target state="translated">Dos veces el tamaño de la pila se crea una matriz y la <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.CopyTo%2A&gt;</ph> método se usa para copiar los elementos de matriz, empezando por el centro de la matriz.</target>       </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.Contains(`0)">
          <source>The <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.%23ctor%2A&gt;</ph> constructor is used again to create a copy of the stack with the order of elements reversed; thus, the three null elements are at the end.</source>
          <target state="translated">El <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.%23ctor%2A&gt;</ph> constructor se utiliza de nuevo para crear una copia de la pila con el orden de los elementos invertidos; por tanto, son los tres elementos null al final.</target>       </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.Contains(`0)">
          <source>The <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Contains%2A&gt;</ph> method is used to show that the string "four" is in the first copy of the stack, after which the <ph id="ph2">&lt;xref:System.Collections.Generic.Stack%601.Clear%2A&gt;</ph> method clears the copy and the <ph id="ph3">&lt;xref:System.Collections.Generic.Stack%601.Count%2A&gt;</ph> property shows that the stack is empty.</source>
          <target state="translated">El <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Contains%2A&gt;</ph> método se usa para mostrar que la cadena "four" está en la primera copia de la pila, después del cual el <ph id="ph2">&lt;xref:System.Collections.Generic.Stack%601.Clear%2A&gt;</ph> método borra la copia y el <ph id="ph3">&lt;xref:System.Collections.Generic.Stack%601.Count%2A&gt;</ph> propiedad muestra que la pila está vacía.</target>       </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.Stack`1.CopyTo(`0[],System.Int32)">
          <source>The one-dimensional <ph id="ph1">&lt;see cref="T:System.Array" /&gt;</ph> that is the destination of the elements copied from <ph id="ph2">&lt;see cref="T:System.Collections.Generic.Stack`1" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Array" /&gt;</ph> unidimensional que constituye el destino de los elementos copiados de <ph id="ph2">&lt;see cref="T:System.Collections.Generic.Stack`1" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.Stack`1.CopyTo(`0[],System.Int32)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Array" /&gt;</ph> must have zero-based indexing.</source>
          <target state="translated">La matriz <ph id="ph1">&lt;see cref="T:System.Array" /&gt;</ph> debe tener una indización de base cero.</target>       </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.Stack`1.CopyTo(`0[],System.Int32)">
          <source>The zero-based index in <bpt id="p1">&lt;c&gt;</bpt>array<ept id="p1">&lt;/c&gt;</ept> at which copying begins.</source>
          <target state="translated">Índice de base cero de <bpt id="p1">&lt;c&gt;</bpt>array<ept id="p1">&lt;/c&gt;</ept> donde comienza la copia.</target>       </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.Stack`1.CopyTo(`0[],System.Int32)">
          <source>Copies the <ph id="ph1">&lt;see cref="T:System.Collections.Generic.Stack`1" /&gt;</ph> to an existing one-dimensional <ph id="ph2">&lt;see cref="T:System.Array" /&gt;</ph>, starting at the specified array index.</source>
          <target state="translated">Copia <ph id="ph1">&lt;see cref="T:System.Collections.Generic.Stack`1" /&gt;</ph> en una <ph id="ph2">&lt;see cref="T:System.Array" /&gt;</ph> unidimensional existente, a partir del índice especificado de la matriz.</target>       </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.CopyTo(`0[],System.Int32)">
          <source>The elements are copied onto the array in last-in-first-out (LIFO) order, similar to the order of the elements returned by a succession of calls to <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Pop%2A&gt;</ph>.</source>
          <target state="translated">Los elementos se copian en la matriz en orden de último en primero en salir (LIFO), que equivale al orden de los elementos devueltos por una serie de llamadas a <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Pop%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.CopyTo(`0[],System.Int32)">
          <source>This method is an O(<ph id="ph1">`n`</ph>) operation, where <ph id="ph2">`n`</ph> is <ph id="ph3">&lt;xref:System.Collections.Generic.Stack%601.Count%2A&gt;</ph>.</source>
          <target state="translated">Este método es una O (<ph id="ph1">`n`</ph>) operación, donde <ph id="ph2">`n`</ph> es <ph id="ph3">&lt;xref:System.Collections.Generic.Stack%601.Count%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.CopyTo(`0[],System.Int32)">
          <source>The following code example demonstrates several methods of the <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601&gt;</ph> generic class, including the <ph id="ph2">&lt;xref:System.Collections.Generic.Stack%601.CopyTo%2A&gt;</ph> method.</source>
          <target state="translated">En el ejemplo de código siguiente se muestra varios métodos de la <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601&gt;</ph> clase genérica, incluida la <ph id="ph2">&lt;xref:System.Collections.Generic.Stack%601.CopyTo%2A&gt;</ph> método.</target>       </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.CopyTo(`0[],System.Int32)">
          <source>The code example creates a stack of strings with default capacity and uses the <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Push%2A&gt;</ph> method to push five strings onto the stack.</source>
          <target state="translated">El ejemplo de código crea una pila de cadenas con capacidad predeterminada y usa el <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Push%2A&gt;</ph> método para insertar cinco cadenas en la pila.</target>       </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.CopyTo(`0[],System.Int32)">
          <source>The elements of the stack are enumerated, which does not change the state of the stack.</source>
          <target state="translated">Se enumeran los elementos de la pila, que no cambia el estado de la pila.</target>       </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.CopyTo(`0[],System.Int32)">
          <source>The <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Pop%2A&gt;</ph> method is used to pop the first string off the stack.</source>
          <target state="translated">El <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Pop%2A&gt;</ph> método se usa para extraer la primera cadena de la pila.</target>       </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.CopyTo(`0[],System.Int32)">
          <source>The <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Peek%2A&gt;</ph> method is used to look at the next item on the stack, and then the <ph id="ph2">&lt;xref:System.Collections.Generic.Stack%601.Pop%2A&gt;</ph> method is used to pop it off.</source>
          <target state="translated">El <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Peek%2A&gt;</ph> método se utiliza para buscar en el siguiente elemento en la pila y, a continuación, el <ph id="ph2">&lt;xref:System.Collections.Generic.Stack%601.Pop%2A&gt;</ph> método se usa para extraer.</target>       </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.CopyTo(`0[],System.Int32)">
          <source>The <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.ToArray%2A&gt;</ph> method is used to create an array and copy the stack elements to it, then the array is passed to the <ph id="ph2">&lt;xref:System.Collections.Generic.Stack%601.%23ctor%2A&gt;</ph> constructor that takes <ph id="ph3">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph>, creating a copy of the stack with the order of the elements reversed.</source>
          <target state="translated">El <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.ToArray%2A&gt;</ph> método se usa para crear una matriz y copiar los elementos de la pila en él, a continuación, la matriz se pasa a la <ph id="ph2">&lt;xref:System.Collections.Generic.Stack%601.%23ctor%2A&gt;</ph> constructor que toma <ph id="ph3">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph>, crear una copia de la pila con el orden de los elementos invertidos.</target>       </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.CopyTo(`0[],System.Int32)">
          <source>The elements of the copy are displayed.</source>
          <target state="translated">Se muestran los elementos de la copia.</target>       </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.CopyTo(`0[],System.Int32)">
          <source>An array twice the size of the stack is created, and the <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.CopyTo%2A&gt;</ph> method is used to copy the array elements beginning at the middle of the array.</source>
          <target state="translated">Dos veces el tamaño de la pila se crea una matriz y la <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.CopyTo%2A&gt;</ph> método se usa para copiar los elementos de matriz, empezando por el centro de la matriz.</target>       </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.CopyTo(`0[],System.Int32)">
          <source>The <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.%23ctor%2A&gt;</ph> constructor is used again to create a copy of the stack with the order of elements reversed; thus, the three null elements are at the end.</source>
          <target state="translated">El <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.%23ctor%2A&gt;</ph> constructor se utiliza de nuevo para crear una copia de la pila con el orden de los elementos invertidos; por tanto, son los tres elementos null al final.</target>       </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.CopyTo(`0[],System.Int32)">
          <source>The <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Contains%2A&gt;</ph> method is used to show that the string "four" is in the first copy of the stack, after which the <ph id="ph2">&lt;xref:System.Collections.Generic.Stack%601.Clear%2A&gt;</ph> method clears the copy and the <ph id="ph3">&lt;xref:System.Collections.Generic.Stack%601.Count%2A&gt;</ph> property shows that the stack is empty.</source>
          <target state="translated">El <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Contains%2A&gt;</ph> método se usa para mostrar que la cadena "four" está en la primera copia de la pila, después del cual el <ph id="ph2">&lt;xref:System.Collections.Generic.Stack%601.Clear%2A&gt;</ph> método borra la copia y el <ph id="ph3">&lt;xref:System.Collections.Generic.Stack%601.Count%2A&gt;</ph> propiedad muestra que la pila está vacía.</target>       </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.Stack`1.CopyTo(`0[],System.Int32)">
          <source><ph id="ph1">&lt;paramref name="array" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="array" /&gt;</ph> es <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.Stack`1.CopyTo(`0[],System.Int32)">
          <source><ph id="ph1">&lt;paramref name="arrayIndex" /&gt;</ph> is less than zero.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="arrayIndex" /&gt;</ph> es menor que cero.</target>       </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.Stack`1.CopyTo(`0[],System.Int32)">
          <source>The number of elements in the source <ph id="ph1">&lt;see cref="T:System.Collections.Generic.Stack`1" /&gt;</ph> is greater than the available space from <ph id="ph2">&lt;paramref name="arrayIndex" /&gt;</ph> to the end of the destination <ph id="ph3">&lt;paramref name="array" /&gt;</ph>.</source>
          <target state="translated">El número de elementos de la <ph id="ph1">&lt;see cref="T:System.Collections.Generic.Stack`1" /&gt;</ph> de origen es mayor que el espacio disponible desde <ph id="ph2">&lt;paramref name="arrayIndex" /&gt;</ph> hasta el final de la <ph id="ph3">&lt;paramref name="array" /&gt;</ph> de destino.</target>       </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve" uid="P:System.Collections.Generic.Stack`1.Count">
          <source>Gets the number of elements contained in the <ph id="ph1">&lt;see cref="T:System.Collections.Generic.Stack`1" /&gt;</ph>.</source>
          <target state="translated">Obtiene el número de elementos incluidos en <ph id="ph1">&lt;see cref="T:System.Collections.Generic.Stack`1" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.Stack`1.Count">
          <source>The number of elements contained in the <ph id="ph1">&lt;see cref="T:System.Collections.Generic.Stack`1" /&gt;</ph>.</source>
          <target state="translated">Número de elementos contenidos en <ph id="ph1">&lt;see cref="T:System.Collections.Generic.Stack`1" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.Stack`1.Count">
          <source>The capacity of the <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601&gt;</ph> is the number of elements that the <ph id="ph2">&lt;xref:System.Collections.Generic.Stack%601&gt;</ph> can store.</source>
          <target state="translated">La capacidad de la <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601&gt;</ph> es el número de elementos que la <ph id="ph2">&lt;xref:System.Collections.Generic.Stack%601&gt;</ph> puede almacenar.</target>       </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.Stack`1.Count">
          <source><ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Count%2A&gt;</ph> is the number of elements that are actually in the <ph id="ph2">&lt;xref:System.Collections.Generic.Stack%601&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Count%2A&gt;</ph> es el número de elementos que están realmente en la <ph id="ph2">&lt;xref:System.Collections.Generic.Stack%601&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.Stack`1.Count">
          <source>The capacity is always greater than or equal to <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Count%2A&gt;</ph>.</source>
          <target state="translated">La capacidad siempre es mayor o igual que <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Count%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.Stack`1.Count">
          <source>If <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Count%2A&gt;</ph> exceeds the capacity while adding elements, the capacity is increased by automatically reallocating the internal array before copying the old elements and adding the new elements.</source>
          <target state="translated">Si <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Count%2A&gt;</ph> supera la capacidad al agregar elementos, se aumenta la capacidad reasignando automáticamente la matriz interna antes de copiar los elementos antiguos y agregar los nuevos elementos.</target>       </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.Stack`1.Count">
          <source>Retrieving the value of this property is an O(1) operation.</source>
          <target state="translated">La recuperación del valor de esta propiedad es una operación O(1).</target>       </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.Stack`1.Count">
          <source>The following code example demonstrates several properties and methods of the <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601&gt;</ph> generic class, including the <ph id="ph2">&lt;xref:System.Collections.Generic.Stack%601.Count%2A&gt;</ph> property.</source>
          <target state="translated">En el ejemplo de código siguiente se muestra varias propiedades y métodos de la <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601&gt;</ph> clase genérica, incluida la <ph id="ph2">&lt;xref:System.Collections.Generic.Stack%601.Count%2A&gt;</ph> propiedad.</target>       </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.Stack`1.Count">
          <source>The code example creates a stack of strings with default capacity and uses the <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Push%2A&gt;</ph> method to push five strings onto the stack.</source>
          <target state="translated">El ejemplo de código crea una pila de cadenas con capacidad predeterminada y usa el <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Push%2A&gt;</ph> método para insertar cinco cadenas en la pila.</target>       </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.Stack`1.Count">
          <source>The elements of the stack are enumerated, which does not change the state of the stack.</source>
          <target state="translated">Se enumeran los elementos de la pila, que no cambia el estado de la pila.</target>       </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.Stack`1.Count">
          <source>The <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Pop%2A&gt;</ph> method is used to pop the first string off the stack.</source>
          <target state="translated">El <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Pop%2A&gt;</ph> método se usa para extraer la primera cadena de la pila.</target>       </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.Stack`1.Count">
          <source>The <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Peek%2A&gt;</ph> method is used to look at the next item on the stack, and then the <ph id="ph2">&lt;xref:System.Collections.Generic.Stack%601.Pop%2A&gt;</ph> method is used to pop it off.</source>
          <target state="translated">El <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Peek%2A&gt;</ph> método se utiliza para buscar en el siguiente elemento en la pila y, a continuación, el <ph id="ph2">&lt;xref:System.Collections.Generic.Stack%601.Pop%2A&gt;</ph> método se usa para extraer.</target>       </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.Stack`1.Count">
          <source>The <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.ToArray%2A&gt;</ph> method is used to create an array and copy the stack elements to it, then the array is passed to the <ph id="ph2">&lt;xref:System.Collections.Generic.Stack%601.%23ctor%2A&gt;</ph> constructor that takes <ph id="ph3">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph>, creating a copy of the stack with the order of the elements reversed.</source>
          <target state="translated">El <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.ToArray%2A&gt;</ph> método se usa para crear una matriz y copiar los elementos de la pila en él, a continuación, la matriz se pasa a la <ph id="ph2">&lt;xref:System.Collections.Generic.Stack%601.%23ctor%2A&gt;</ph> constructor que toma <ph id="ph3">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph>, crear una copia de la pila con el orden de los elementos invertidos.</target>       </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.Stack`1.Count">
          <source>The elements of the copy are displayed.</source>
          <target state="translated">Se muestran los elementos de la copia.</target>       </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.Stack`1.Count">
          <source>An array twice the size of the stack is created, and the <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.CopyTo%2A&gt;</ph> method is used to copy the array elements beginning at the middle of the array.</source>
          <target state="translated">Dos veces el tamaño de la pila se crea una matriz y la <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.CopyTo%2A&gt;</ph> método se usa para copiar los elementos de matriz, empezando por el centro de la matriz.</target>       </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.Stack`1.Count">
          <source>The <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.%23ctor%2A&gt;</ph> constructor is used again to create a copy of the stack with the order of elements reversed; thus, the three null elements are at the end.</source>
          <target state="translated">El <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.%23ctor%2A&gt;</ph> constructor se utiliza de nuevo para crear una copia de la pila con el orden de los elementos invertidos; por tanto, son los tres elementos null al final.</target>       </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.Stack`1.Count">
          <source>The <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Contains%2A&gt;</ph> method is used to show that the string "four" is in the first copy of the stack, after which the <ph id="ph2">&lt;xref:System.Collections.Generic.Stack%601.Clear%2A&gt;</ph> method clears the copy and the <ph id="ph3">&lt;xref:System.Collections.Generic.Stack%601.Count%2A&gt;</ph> property shows that the stack is empty.</source>
          <target state="translated">El <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Contains%2A&gt;</ph> método se usa para mostrar que la cadena "four" está en la primera copia de la pila, después del cual el <ph id="ph2">&lt;xref:System.Collections.Generic.Stack%601.Clear%2A&gt;</ph> método borra la copia y el <ph id="ph3">&lt;xref:System.Collections.Generic.Stack%601.Count%2A&gt;</ph> propiedad muestra que la pila está vacía.</target>       </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.Stack`1.GetEnumerator">
          <source>Returns an enumerator for the <ph id="ph1">&lt;see cref="T:System.Collections.Generic.Stack`1" /&gt;</ph>.</source>
          <target state="translated">Devuelve un enumerador para la colección <ph id="ph1">&lt;see cref="T:System.Collections.Generic.Stack`1" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.Stack`1.GetEnumerator">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.Generic.Stack`1.Enumerator" /&gt;</ph> for the <ph id="ph2">&lt;see cref="T:System.Collections.Generic.Stack`1" /&gt;</ph>.</source>
          <target state="translated">Estructura <ph id="ph1">&lt;see cref="T:System.Collections.Generic.Stack`1.Enumerator" /&gt;</ph> para la colección <ph id="ph2">&lt;see cref="T:System.Collections.Generic.Stack`1" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.GetEnumerator">
          <source>The <ph id="ph1">`foreach`</ph> statement of the C# language (<ph id="ph2">`for each`</ph> in C++, <ph id="ph3">`For Each`</ph> in Visual Basic) hides the complexity of the enumerators.</source>
          <target state="translated">El <ph id="ph1">`foreach`</ph> instrucción del lenguaje C# (<ph id="ph2">`for each`</ph> en C++, <ph id="ph3">`For Each`</ph> en Visual Basic) oculta la complejidad de los enumeradores.</target>       </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.GetEnumerator">
          <source>Therefore, using <ph id="ph1">`foreach`</ph> is recommended, instead of directly manipulating the enumerator.</source>
          <target state="translated">Por lo tanto, se recomienda el uso de <ph id="ph1">`foreach`</ph>, en lugar de manipular directamente el enumerador.</target>       </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.GetEnumerator">
          <source>Enumerators can be used to read the data in the collection, but they cannot be used to modify the underlying collection.</source>
          <target state="translated">Los enumeradores pueden usarse para leer los datos de la colección, pero no para modificar la colección subyacente.</target>       </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.GetEnumerator">
          <source>Initially, the enumerator is positioned before the first element in the collection.</source>
          <target state="translated">En principio, el enumerador se coloca antes del primer elemento de la colección.</target>       </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.GetEnumerator">
          <source>At this position, <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Enumerator.Current%2A&gt;</ph> is undefined.</source>
          <target state="translated">En esta posición, el valor de propiedad <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Enumerator.Current%2A&gt;</ph> está sin definir.</target>       </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.GetEnumerator">
          <source>Therefore, you must call <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Enumerator.MoveNext%2A&gt;</ph> to advance the enumerator to the first element of the collection before reading the value of <ph id="ph2">&lt;xref:System.Collections.Generic.Stack%601.Enumerator.Current%2A&gt;</ph>.</source>
          <target state="translated">Por lo tanto, debe llamar a <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Enumerator.MoveNext%2A&gt;</ph> para adelantar el enumerador hasta el primer elemento de la colección antes de leer el valor de <ph id="ph2">&lt;xref:System.Collections.Generic.Stack%601.Enumerator.Current%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.GetEnumerator">
          <source><ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Enumerator.Current%2A&gt;</ph> returns the same object until <ph id="ph2">&lt;xref:System.Collections.Generic.Stack%601.Enumerator.MoveNext%2A&gt;</ph> is called.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Enumerator.Current%2A&gt;</ph> devuelve el mismo objeto hasta que se llama a <ph id="ph2">&lt;xref:System.Collections.Generic.Stack%601.Enumerator.MoveNext%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.GetEnumerator">
          <source><ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Enumerator.MoveNext%2A&gt;</ph> sets <ph id="ph2">&lt;xref:System.Collections.Generic.Stack%601.Enumerator.Current%2A&gt;</ph> to the next element.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Enumerator.MoveNext%2A&gt;</ph> establece <ph id="ph2">&lt;xref:System.Collections.Generic.Stack%601.Enumerator.Current%2A&gt;</ph> en el siguiente elemento.</target>       </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.GetEnumerator">
          <source>If <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Enumerator.MoveNext%2A&gt;</ph> passes the end of the collection, the enumerator is positioned after the last element in the collection and <ph id="ph2">&lt;xref:System.Collections.Generic.Stack%601.Enumerator.MoveNext%2A&gt;</ph> returns <ph id="ph3">`false`</ph>.</source>
          <target state="translated">Si <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Enumerator.MoveNext%2A&gt;</ph> pasa el final de la colección, el enumerador se coloca después del último elemento de la colección y <ph id="ph2">&lt;xref:System.Collections.Generic.Stack%601.Enumerator.MoveNext%2A&gt;</ph> devuelve <ph id="ph3">`false`</ph>.</target>       </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.GetEnumerator">
          <source>When the enumerator is at this position, subsequent calls to <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Enumerator.MoveNext%2A&gt;</ph> also return <ph id="ph2">`false`</ph>.</source>
          <target state="translated">Mientras el enumerador permanezca en esta posición, las llamadas subsiguientes a <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Enumerator.MoveNext%2A&gt;</ph> también devolver <ph id="ph2">`false`</ph>.</target>       </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.GetEnumerator">
          <source>If the last call to <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Enumerator.MoveNext%2A&gt;</ph> returned <ph id="ph2">`false`</ph>, <ph id="ph3">&lt;xref:System.Collections.Generic.Stack%601.Enumerator.Current%2A&gt;</ph> is undefined.</source>
          <target state="translated">Si la última llamada a <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Enumerator.MoveNext%2A&gt;</ph> devuelve <ph id="ph2">`false`</ph>, <ph id="ph3">&lt;xref:System.Collections.Generic.Stack%601.Enumerator.Current%2A&gt;</ph> no está definido.</target>       </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.GetEnumerator">
          <source>You cannot set <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Enumerator.Current%2A&gt;</ph> to the first element of the collection again; you must create a new enumerator instance instead.</source>
          <target state="translated">No puede volver a establecer la propiedad <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Enumerator.Current%2A&gt;</ph> en el primer elemento de la colección, sino que debe crear una nueva instancia del enumerador.</target>       </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.GetEnumerator">
          <source>An enumerator remains valid as long as the collection remains unchanged.</source>
          <target state="translated">Un enumerador es válido mientras la colección no cambie.</target>       </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.GetEnumerator">
          <source>If changes are made to the collection, such as adding, modifying, or deleting elements, the enumerator is irrecoverably invalidated and the next call to <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Enumerator.MoveNext%2A&gt;</ph> or <ph id="ph2">&lt;xref:System.Collections.Generic.Stack%601.Enumerator.System%23Collections%23IEnumerator%23Reset%2A&gt;</ph> throws an <ph id="ph3">&lt;xref:System.InvalidOperationException&gt;</ph>.</source>
          <target state="translated">Si se realizan cambios en la colección, como agregar, modificar, o eliminar elementos, el enumerador queda permanentemente invalidado y la siguiente llamada a <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Enumerator.MoveNext%2A&gt;</ph> o <ph id="ph2">&lt;xref:System.Collections.Generic.Stack%601.Enumerator.System%23Collections%23IEnumerator%23Reset%2A&gt;</ph> produce una <ph id="ph3">&lt;xref:System.InvalidOperationException&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.GetEnumerator">
          <source>If the collection is modified between calling <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Enumerator.MoveNext%2A&gt;</ph> method and obtaining the value of the <ph id="ph2">&lt;xref:System.Collections.Generic.Stack%601.Enumerator.Current%2A&gt;</ph> property, <ph id="ph3">&lt;xref:System.Collections.Generic.Stack%601.Enumerator.Current%2A&gt;</ph> returns the element that it is set to, even if the enumerator is already invalidated.</source>
          <target state="translated">Si la colección se modifica entre llamar a <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Enumerator.MoveNext%2A&gt;</ph> método y obtener el valor de la <ph id="ph2">&lt;xref:System.Collections.Generic.Stack%601.Enumerator.Current%2A&gt;</ph> propiedad, <ph id="ph3">&lt;xref:System.Collections.Generic.Stack%601.Enumerator.Current%2A&gt;</ph> devuelve el elemento que está establecido, aunque el enumerador ya haya quedado invalidado.</target>       </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.GetEnumerator">
          <source>The enumerator does not have exclusive access to the collection; therefore, enumerating through a collection is intrinsically not a thread-safe procedure.</source>
          <target state="translated">El enumerador no tiene acceso exclusivo a la colección y, por tanto, la enumeración en una colección no es intrínsicamente un procedimiento seguro para subprocesos.</target>       </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.GetEnumerator">
          <source>To guarantee thread safety during enumeration, you can lock the collection during the entire enumeration.</source>
          <target state="translated">A fin de garantizar la seguridad de los subprocesos, se puede bloquear la colección durante toda la enumeración.</target>       </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.GetEnumerator">
          <source>To allow the collection to be accessed by multiple threads for reading and writing, you must implement your own synchronization.</source>
          <target state="translated">Para permitir que varios subprocesos obtengan acceso de lectura y escritura a la colección, debe implementar su propia sincronización.</target>       </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.GetEnumerator">
          <source>Default implementations of collections in <ph id="ph1">&lt;xref:System.Collections.Generic?displayProperty=nameWithType&gt;</ph> are not synchronized.</source>
          <target state="translated">Las implementaciones de las recopilaciones predeterminadas <ph id="ph1">&lt;xref:System.Collections.Generic?displayProperty=nameWithType&gt;</ph> no están sincronizadas.</target>       </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.GetEnumerator">
          <source>This method is an O(1) operation.</source>
          <target state="translated">Este método es una operación o (1).</target>       </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.GetEnumerator">
          <source>The following code example demonstrates that the <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601&gt;</ph> generic class is enumerable.</source>
          <target state="translated">En el ejemplo de código siguiente se muestra que la <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601&gt;</ph> clase genérica es enumerable.</target>       </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.GetEnumerator">
          <source>The <ph id="ph1">`foreach`</ph> statement (<ph id="ph2">`For Each`</ph> in Visual Basic, <ph id="ph3">`for each`</ph> in C++) is used to enumerate the queue.</source>
          <target state="translated">El <ph id="ph1">`foreach`</ph> instrucción (<ph id="ph2">`For Each`</ph> en Visual Basic, <ph id="ph3">`for each`</ph> en C++) se utiliza para enumerar la cola.</target>       </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.GetEnumerator">
          <source>The code example creates a stack of strings with default capacity and uses the <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Push%2A&gt;</ph> method to push five strings onto the stack.</source>
          <target state="translated">El ejemplo de código crea una pila de cadenas con capacidad predeterminada y usa el <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Push%2A&gt;</ph> método para insertar cinco cadenas en la pila.</target>       </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.GetEnumerator">
          <source>The elements of the stack are enumerated, which does not change the state of the stack.</source>
          <target state="translated">Se enumeran los elementos de la pila, que no cambia el estado de la pila.</target>       </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.GetEnumerator">
          <source>The <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Pop%2A&gt;</ph> method is used to pop the first string off the stack.</source>
          <target state="translated">El <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Pop%2A&gt;</ph> método se usa para extraer la primera cadena de la pila.</target>       </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.GetEnumerator">
          <source>The <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Peek%2A&gt;</ph> method is used to look at the next item on the stack, and then the <ph id="ph2">&lt;xref:System.Collections.Generic.Stack%601.Pop%2A&gt;</ph> method is used to pop it off.</source>
          <target state="translated">El <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Peek%2A&gt;</ph> método se utiliza para buscar en el siguiente elemento en la pila y, a continuación, el <ph id="ph2">&lt;xref:System.Collections.Generic.Stack%601.Pop%2A&gt;</ph> método se usa para extraer.</target>       </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.GetEnumerator">
          <source>The <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.ToArray%2A&gt;</ph> method is used to create an array and copy the stack elements to it, then the array is passed to the <ph id="ph2">&lt;xref:System.Collections.Generic.Stack%601.%23ctor%2A&gt;</ph> constructor that takes <ph id="ph3">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph>, creating a copy of the stack with the order of the elements reversed.</source>
          <target state="translated">El <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.ToArray%2A&gt;</ph> método se usa para crear una matriz y copiar los elementos de la pila en él, a continuación, la matriz se pasa a la <ph id="ph2">&lt;xref:System.Collections.Generic.Stack%601.%23ctor%2A&gt;</ph> constructor que toma <ph id="ph3">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph>, crear una copia de la pila con el orden de los elementos invertidos.</target>       </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.GetEnumerator">
          <source>The elements of the copy are displayed.</source>
          <target state="translated">Se muestran los elementos de la copia.</target>       </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.GetEnumerator">
          <source>An array twice the size of the stack is created, and the <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.CopyTo%2A&gt;</ph> method is used to copy the array elements beginning at the middle of the array.</source>
          <target state="translated">Dos veces el tamaño de la pila se crea una matriz y la <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.CopyTo%2A&gt;</ph> método se usa para copiar los elementos de matriz, empezando por el centro de la matriz.</target>       </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.GetEnumerator">
          <source>The <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.%23ctor%2A&gt;</ph> constructor is used again to create a copy of the stack with the order of elements reversed; thus, the three null elements are at the end.</source>
          <target state="translated">El <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.%23ctor%2A&gt;</ph> constructor se utiliza de nuevo para crear una copia de la pila con el orden de los elementos invertidos; por tanto, son los tres elementos null al final.</target>       </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.GetEnumerator">
          <source>The <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Contains%2A&gt;</ph> method is used to show that the string "four" is in the first copy of the stack, after which the <ph id="ph2">&lt;xref:System.Collections.Generic.Stack%601.Clear%2A&gt;</ph> method clears the copy and the <ph id="ph3">&lt;xref:System.Collections.Generic.Stack%601.Count%2A&gt;</ph> property shows that the stack is empty.</source>
          <target state="translated">El <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Contains%2A&gt;</ph> método se usa para mostrar que la cadena "four" está en la primera copia de la pila, después del cual el <ph id="ph2">&lt;xref:System.Collections.Generic.Stack%601.Clear%2A&gt;</ph> método borra la copia y el <ph id="ph3">&lt;xref:System.Collections.Generic.Stack%601.Count%2A&gt;</ph> propiedad muestra que la pila está vacía.</target>       </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.Stack`1.Peek">
          <source>Returns the object at the top of the <ph id="ph1">&lt;see cref="T:System.Collections.Generic.Stack`1" /&gt;</ph> without removing it.</source>
          <target state="translated">Devuelve el objeto situado al principio de <ph id="ph1">&lt;see cref="T:System.Collections.Generic.Stack`1" /&gt;</ph> sin eliminarlo.</target>       </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.Stack`1.Peek">
          <source>The object at the top of the <ph id="ph1">&lt;see cref="T:System.Collections.Generic.Stack`1" /&gt;</ph>.</source>
          <target state="translated">Objeto situado al principio de la colección <ph id="ph1">&lt;see cref="T:System.Collections.Generic.Stack`1" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.Peek">
          <source>This method is similar to the <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Pop%2A&gt;</ph> method, but <ph id="ph2">&lt;xref:System.Collections.Generic.Stack%601.Peek%2A&gt;</ph> does not modify the <ph id="ph3">&lt;xref:System.Collections.Generic.Stack%601&gt;</ph>.</source>
          <target state="translated">Este método es similar al método <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Pop%2A&gt;</ph>, pero <ph id="ph2">&lt;xref:System.Collections.Generic.Stack%601.Peek%2A&gt;</ph> no modifica la colección <ph id="ph3">&lt;xref:System.Collections.Generic.Stack%601&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.Peek">
          <source>If type <ph id="ph1">`T`</ph> is a reference type, <ph id="ph2">`null`</ph> can be pushed onto the <ph id="ph3">&lt;xref:System.Collections.Generic.Stack%601&gt;</ph> as a placeholder, if needed.</source>
          <target state="translated">Si tipo <ph id="ph1">`T`</ph> es un tipo de referencia, <ph id="ph2">`null`</ph> puede forzarse la <ph id="ph3">&lt;xref:System.Collections.Generic.Stack%601&gt;</ph> como un marcador de posición, si es necesario.</target>       </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.Peek">
          <source>This method is an O(1) operation.</source>
          <target state="translated">Este método es una operación o (1).</target>       </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.Peek">
          <source>The following code example demonstrates several methods of the <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601&gt;</ph> generic class, including the <ph id="ph2">&lt;xref:System.Collections.Generic.Stack%601.Peek%2A&gt;</ph> method.</source>
          <target state="translated">En el ejemplo de código siguiente se muestra varios métodos de la <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601&gt;</ph> clase genérica, incluida la <ph id="ph2">&lt;xref:System.Collections.Generic.Stack%601.Peek%2A&gt;</ph> método.</target>       </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.Peek">
          <source>The code example creates a stack of strings with default capacity and uses the <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Push%2A&gt;</ph> method to push five strings onto the stack.</source>
          <target state="translated">El ejemplo de código crea una pila de cadenas con capacidad predeterminada y usa el <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Push%2A&gt;</ph> método para insertar cinco cadenas en la pila.</target>       </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.Peek">
          <source>The elements of the stack are enumerated, which does not change the state of the stack.</source>
          <target state="translated">Se enumeran los elementos de la pila, que no cambia el estado de la pila.</target>       </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.Peek">
          <source>The <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Pop%2A&gt;</ph> method is used to pop the first string off the stack.</source>
          <target state="translated">El <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Pop%2A&gt;</ph> método se usa para extraer la primera cadena de la pila.</target>       </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.Peek">
          <source>The <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Peek%2A&gt;</ph> method is used to look at the next item on the stack, and then the <ph id="ph2">&lt;xref:System.Collections.Generic.Stack%601.Pop%2A&gt;</ph> method is used to pop it off.</source>
          <target state="translated">El <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Peek%2A&gt;</ph> método se utiliza para buscar en el siguiente elemento en la pila y, a continuación, el <ph id="ph2">&lt;xref:System.Collections.Generic.Stack%601.Pop%2A&gt;</ph> método se usa para extraer.</target>       </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.Peek">
          <source>The <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.ToArray%2A&gt;</ph> method is used to create an array and copy the stack elements to it, then the array is passed to the <ph id="ph2">&lt;xref:System.Collections.Generic.Stack%601.%23ctor%2A&gt;</ph> constructor that takes <ph id="ph3">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph>, creating a copy of the stack with the order of the elements reversed.</source>
          <target state="translated">El <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.ToArray%2A&gt;</ph> método se usa para crear una matriz y copiar los elementos de la pila en él, a continuación, la matriz se pasa a la <ph id="ph2">&lt;xref:System.Collections.Generic.Stack%601.%23ctor%2A&gt;</ph> constructor que toma <ph id="ph3">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph>, crear una copia de la pila con el orden de los elementos invertidos.</target>       </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.Peek">
          <source>The elements of the copy are displayed.</source>
          <target state="translated">Se muestran los elementos de la copia.</target>       </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.Peek">
          <source>An array twice the size of the stack is created, and the <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.CopyTo%2A&gt;</ph> method is used to copy the array elements beginning at the middle of the array.</source>
          <target state="translated">Dos veces el tamaño de la pila se crea una matriz y la <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.CopyTo%2A&gt;</ph> método se usa para copiar los elementos de matriz, empezando por el centro de la matriz.</target>       </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.Peek">
          <source>The <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.%23ctor%2A&gt;</ph> constructor is used again to create a copy of the stack with the order of elements reversed; thus, the three null elements are at the end.</source>
          <target state="translated">El <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.%23ctor%2A&gt;</ph> constructor se utiliza de nuevo para crear una copia de la pila con el orden de los elementos invertidos; por tanto, son los tres elementos null al final.</target>       </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.Peek">
          <source>The <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Contains%2A&gt;</ph> method is used to show that the string "four" is in the first copy of the stack, after which the <ph id="ph2">&lt;xref:System.Collections.Generic.Stack%601.Clear%2A&gt;</ph> method clears the copy and the <ph id="ph3">&lt;xref:System.Collections.Generic.Stack%601.Count%2A&gt;</ph> property shows that the stack is empty.</source>
          <target state="translated">El <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Contains%2A&gt;</ph> método se usa para mostrar que la cadena "four" está en la primera copia de la pila, después del cual el <ph id="ph2">&lt;xref:System.Collections.Generic.Stack%601.Clear%2A&gt;</ph> método borra la copia y el <ph id="ph3">&lt;xref:System.Collections.Generic.Stack%601.Count%2A&gt;</ph> propiedad muestra que la pila está vacía.</target>       </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.Stack`1.Peek">
          <source>The <ph id="ph1">&lt;see cref="T:System.Collections.Generic.Stack`1" /&gt;</ph> is empty.</source>
          <target state="translated">La colección <ph id="ph1">&lt;see cref="T:System.Collections.Generic.Stack`1" /&gt;</ph> está vacía.</target>       </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.Stack`1.Pop">
          <source>Removes and returns the object at the top of the <ph id="ph1">&lt;see cref="T:System.Collections.Generic.Stack`1" /&gt;</ph>.</source>
          <target state="translated">Quita y devuelve el objeto situado al principio de <ph id="ph1">&lt;see cref="T:System.Collections.Generic.Stack`1" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.Stack`1.Pop">
          <source>The object removed from the top of the <ph id="ph1">&lt;see cref="T:System.Collections.Generic.Stack`1" /&gt;</ph>.</source>
          <target state="translated">Objeto eliminado del principio de la colección <ph id="ph1">&lt;see cref="T:System.Collections.Generic.Stack`1" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.Pop">
          <source>This method is similar to the <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Peek%2A&gt;</ph> method, but <ph id="ph2">&lt;xref:System.Collections.Generic.Stack%601.Peek%2A&gt;</ph> does not modify the <ph id="ph3">&lt;xref:System.Collections.Generic.Stack%601&gt;</ph>.</source>
          <target state="translated">Este método es similar al método <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Peek%2A&gt;</ph>, pero <ph id="ph2">&lt;xref:System.Collections.Generic.Stack%601.Peek%2A&gt;</ph> no modifica la colección <ph id="ph3">&lt;xref:System.Collections.Generic.Stack%601&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.Pop">
          <source>If type <ph id="ph1">`T`</ph> is a reference type, <ph id="ph2">`null`</ph> can be pushed onto the <ph id="ph3">&lt;xref:System.Collections.Generic.Stack%601&gt;</ph> as a placeholder, if needed.</source>
          <target state="translated">Si tipo <ph id="ph1">`T`</ph> es un tipo de referencia, <ph id="ph2">`null`</ph> puede forzarse la <ph id="ph3">&lt;xref:System.Collections.Generic.Stack%601&gt;</ph> como un marcador de posición, si es necesario.</target>       </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.Pop">
          <source><ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601&gt;</ph> is implemented as an array.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601&gt;</ph> se implementa como una matriz.</target>       </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.Pop">
          <source>This method is an O(1) operation.</source>
          <target state="translated">Este método es una operación o (1).</target>       </trans-unit>
        <trans-unit id="303" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.Pop">
          <source>The following code example demonstrates several methods of the <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601&gt;</ph> generic class, including the <ph id="ph2">&lt;xref:System.Collections.Generic.Stack%601.Pop%2A&gt;</ph> method.</source>
          <target state="translated">En el ejemplo de código siguiente se muestra varios métodos de la <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601&gt;</ph> clase genérica, incluida la <ph id="ph2">&lt;xref:System.Collections.Generic.Stack%601.Pop%2A&gt;</ph> método.</target>       </trans-unit>
        <trans-unit id="304" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.Pop">
          <source>The code example creates a stack of strings with default capacity and uses the <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Push%2A&gt;</ph> method to push five strings onto the stack.</source>
          <target state="translated">El ejemplo de código crea una pila de cadenas con capacidad predeterminada y usa el <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Push%2A&gt;</ph> método para insertar cinco cadenas en la pila.</target>       </trans-unit>
        <trans-unit id="305" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.Pop">
          <source>The elements of the stack are enumerated, which does not change the state of the stack.</source>
          <target state="translated">Se enumeran los elementos de la pila, que no cambia el estado de la pila.</target>       </trans-unit>
        <trans-unit id="306" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.Pop">
          <source>The <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Pop%2A&gt;</ph> method is used to pop the first string off the stack.</source>
          <target state="translated">El <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Pop%2A&gt;</ph> método se usa para extraer la primera cadena de la pila.</target>       </trans-unit>
        <trans-unit id="307" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.Pop">
          <source>The <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Peek%2A&gt;</ph> method is used to look at the next item on the stack, and then the <ph id="ph2">&lt;xref:System.Collections.Generic.Stack%601.Pop%2A&gt;</ph> method is used to pop it off.</source>
          <target state="translated">El <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Peek%2A&gt;</ph> método se utiliza para buscar en el siguiente elemento en la pila y, a continuación, el <ph id="ph2">&lt;xref:System.Collections.Generic.Stack%601.Pop%2A&gt;</ph> método se usa para extraer.</target>       </trans-unit>
        <trans-unit id="308" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.Pop">
          <source>The <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.ToArray%2A&gt;</ph> method is used to create an array and copy the stack elements to it, then the array is passed to the <ph id="ph2">&lt;xref:System.Collections.Generic.Stack%601.%23ctor%2A&gt;</ph> constructor that takes <ph id="ph3">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph>, creating a copy of the stack with the order of the elements reversed.</source>
          <target state="translated">El <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.ToArray%2A&gt;</ph> método se usa para crear una matriz y copiar los elementos de la pila en él, a continuación, la matriz se pasa a la <ph id="ph2">&lt;xref:System.Collections.Generic.Stack%601.%23ctor%2A&gt;</ph> constructor que toma <ph id="ph3">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph>, crear una copia de la pila con el orden de los elementos invertidos.</target>       </trans-unit>
        <trans-unit id="309" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.Pop">
          <source>The elements of the copy are displayed.</source>
          <target state="translated">Se muestran los elementos de la copia.</target>       </trans-unit>
        <trans-unit id="310" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.Pop">
          <source>An array twice the size of the stack is created, and the <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.CopyTo%2A&gt;</ph> method is used to copy the array elements beginning at the middle of the array.</source>
          <target state="translated">Dos veces el tamaño de la pila se crea una matriz y la <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.CopyTo%2A&gt;</ph> método se usa para copiar los elementos de matriz, empezando por el centro de la matriz.</target>       </trans-unit>
        <trans-unit id="311" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.Pop">
          <source>The <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.%23ctor%2A&gt;</ph> constructor is used again to create a copy of the stack with the order of elements reversed; thus, the three null elements are at the end.</source>
          <target state="translated">El <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.%23ctor%2A&gt;</ph> constructor se utiliza de nuevo para crear una copia de la pila con el orden de los elementos invertidos; por tanto, son los tres elementos null al final.</target>       </trans-unit>
        <trans-unit id="312" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.Pop">
          <source>The <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Contains%2A&gt;</ph> method is used to show that the string "four" is in the first copy of the stack, after which the <ph id="ph2">&lt;xref:System.Collections.Generic.Stack%601.Clear%2A&gt;</ph> method clears the copy and the <ph id="ph3">&lt;xref:System.Collections.Generic.Stack%601.Count%2A&gt;</ph> property shows that the stack is empty.</source>
          <target state="translated">El <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Contains%2A&gt;</ph> método se usa para mostrar que la cadena "four" está en la primera copia de la pila, después del cual el <ph id="ph2">&lt;xref:System.Collections.Generic.Stack%601.Clear%2A&gt;</ph> método borra la copia y el <ph id="ph3">&lt;xref:System.Collections.Generic.Stack%601.Count%2A&gt;</ph> propiedad muestra que la pila está vacía.</target>       </trans-unit>
        <trans-unit id="313" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.Stack`1.Pop">
          <source>The <ph id="ph1">&lt;see cref="T:System.Collections.Generic.Stack`1" /&gt;</ph> is empty.</source>
          <target state="translated">La colección <ph id="ph1">&lt;see cref="T:System.Collections.Generic.Stack`1" /&gt;</ph> está vacía.</target>       </trans-unit>
        <trans-unit id="314" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.Stack`1.Push(`0)">
          <source>The object to push onto the <ph id="ph1">&lt;see cref="T:System.Collections.Generic.Stack`1" /&gt;</ph>.</source>
          <target state="translated">Objeto que se va a insertar en la colección <ph id="ph1">&lt;see cref="T:System.Collections.Generic.Stack`1" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="315" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.Stack`1.Push(`0)">
          <source>The value can be <ph id="ph1">&lt;see langword="null" /&gt;</ph> for reference types.</source>
          <target state="translated">El valor puede ser <ph id="ph1">&lt;see langword="null" /&gt;</ph> para los tipos de referencia.</target>       </trans-unit>
        <trans-unit id="316" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.Stack`1.Push(`0)">
          <source>Inserts an object at the top of the <ph id="ph1">&lt;see cref="T:System.Collections.Generic.Stack`1" /&gt;</ph>.</source>
          <target state="translated">Inserta un objeto al principio de <ph id="ph1">&lt;see cref="T:System.Collections.Generic.Stack`1" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="317" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.Push(`0)">
          <source><ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601&gt;</ph> is implemented as an array.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601&gt;</ph> se implementa como una matriz.</target>       </trans-unit>
        <trans-unit id="318" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.Push(`0)">
          <source>If <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Count%2A&gt;</ph> already equals the capacity, the capacity of the <ph id="ph2">&lt;xref:System.Collections.Generic.Stack%601&gt;</ph> is increased by automatically reallocating the internal array, and the existing elements are copied to the new array before the new element is added.</source>
          <target state="translated">Si <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Count%2A&gt;</ph> ya es igual a la capacidad, la capacidad de la <ph id="ph2">&lt;xref:System.Collections.Generic.Stack%601&gt;</ph> se incrementa mediante la reasignación automática de la matriz interna, y se copian los elementos existentes en la nueva matriz antes de agrega el nuevo elemento.</target>       </trans-unit>
        <trans-unit id="319" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.Push(`0)">
          <source>If type <ph id="ph1">`T`</ph> is a reference type, <ph id="ph2">`null`</ph> can be pushed onto the <ph id="ph3">&lt;xref:System.Collections.Generic.Stack%601&gt;</ph> as a placeholder, if needed.</source>
          <target state="translated">Si tipo <ph id="ph1">`T`</ph> es un tipo de referencia, <ph id="ph2">`null`</ph> puede forzarse la <ph id="ph3">&lt;xref:System.Collections.Generic.Stack%601&gt;</ph> como un marcador de posición, si es necesario.</target>       </trans-unit>
        <trans-unit id="320" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.Push(`0)">
          <source>It occupies a slot in the stack and is treated like any object.</source>
          <target state="translated">Ocupa una posición en la pila y se tratan como cualquier objeto.</target>       </trans-unit>
        <trans-unit id="321" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.Push(`0)">
          <source>If <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Count%2A&gt;</ph> is less than the capacity of the stack, <ph id="ph2">&lt;xref:System.Collections.Generic.Stack%601.Push%2A&gt;</ph> is an O(1) operation.</source>
          <target state="translated">Si <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Count%2A&gt;</ph> es menor que la capacidad de la pila, <ph id="ph2">&lt;xref:System.Collections.Generic.Stack%601.Push%2A&gt;</ph> es una operación o (1).</target>       </trans-unit>
        <trans-unit id="322" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.Push(`0)">
          <source>If the capacity needs to be increased to accommodate the new element, <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Push%2A&gt;</ph> becomes an O(<ph id="ph2">`n`</ph>) operation, where <ph id="ph3">`n`</ph> is <ph id="ph4">&lt;xref:System.Collections.Generic.Stack%601.Count%2A&gt;</ph>.</source>
          <target state="translated">Si la capacidad debe aumentarse para alojar el nuevo elemento, <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Push%2A&gt;</ph> se convierte en una O (<ph id="ph2">`n`</ph>) operación, donde <ph id="ph3">`n`</ph> es <ph id="ph4">&lt;xref:System.Collections.Generic.Stack%601.Count%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="323" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.Push(`0)">
          <source>The following code example demonstrates several methods of the <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601&gt;</ph> generic class, including the <ph id="ph2">&lt;xref:System.Collections.Generic.Stack%601.Push%2A&gt;</ph> method.</source>
          <target state="translated">En el ejemplo de código siguiente se muestra varios métodos de la <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601&gt;</ph> clase genérica, incluida la <ph id="ph2">&lt;xref:System.Collections.Generic.Stack%601.Push%2A&gt;</ph> método.</target>       </trans-unit>
        <trans-unit id="324" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.Push(`0)">
          <source>The code example creates a stack of strings with default capacity and uses the <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Push%2A&gt;</ph> method to push five strings onto the stack.</source>
          <target state="translated">El ejemplo de código crea una pila de cadenas con capacidad predeterminada y usa el <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Push%2A&gt;</ph> método para insertar cinco cadenas en la pila.</target>       </trans-unit>
        <trans-unit id="325" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.Push(`0)">
          <source>The elements of the stack are enumerated, which does not change the state of the stack.</source>
          <target state="translated">Se enumeran los elementos de la pila, que no cambia el estado de la pila.</target>       </trans-unit>
        <trans-unit id="326" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.Push(`0)">
          <source>The <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Pop%2A&gt;</ph> method is used to pop the first string off the stack.</source>
          <target state="translated">El <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Pop%2A&gt;</ph> método se usa para extraer la primera cadena de la pila.</target>       </trans-unit>
        <trans-unit id="327" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.Push(`0)">
          <source>The <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Peek%2A&gt;</ph> method is used to look at the next item on the stack, and then the <ph id="ph2">&lt;xref:System.Collections.Generic.Stack%601.Pop%2A&gt;</ph> method is used to pop it off.</source>
          <target state="translated">El <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Peek%2A&gt;</ph> método se utiliza para buscar en el siguiente elemento en la pila y, a continuación, el <ph id="ph2">&lt;xref:System.Collections.Generic.Stack%601.Pop%2A&gt;</ph> método se usa para extraer.</target>       </trans-unit>
        <trans-unit id="328" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.Push(`0)">
          <source>The <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.ToArray%2A&gt;</ph> method is used to create an array and copy the stack elements to it, then the array is passed to the <ph id="ph2">&lt;xref:System.Collections.Generic.Stack%601.%23ctor%2A&gt;</ph> constructor that takes <ph id="ph3">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph>, creating a copy of the stack with the order of the elements reversed.</source>
          <target state="translated">El <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.ToArray%2A&gt;</ph> método se usa para crear una matriz y copiar los elementos de la pila en él, a continuación, la matriz se pasa a la <ph id="ph2">&lt;xref:System.Collections.Generic.Stack%601.%23ctor%2A&gt;</ph> constructor que toma <ph id="ph3">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph>, crear una copia de la pila con el orden de los elementos invertidos.</target>       </trans-unit>
        <trans-unit id="329" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.Push(`0)">
          <source>The elements of the copy are displayed.</source>
          <target state="translated">Se muestran los elementos de la copia.</target>       </trans-unit>
        <trans-unit id="330" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.Push(`0)">
          <source>An array twice the size of the stack is created, and the <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.CopyTo%2A&gt;</ph> method is used to copy the array elements beginning at the middle of the array.</source>
          <target state="translated">Dos veces el tamaño de la pila se crea una matriz y la <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.CopyTo%2A&gt;</ph> método se usa para copiar los elementos de matriz, empezando por el centro de la matriz.</target>       </trans-unit>
        <trans-unit id="331" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.Push(`0)">
          <source>The <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.%23ctor%2A&gt;</ph> constructor is used again to create a copy of the stack with the order of elements reversed; thus, the three null elements are at the end.</source>
          <target state="translated">El <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.%23ctor%2A&gt;</ph> constructor se utiliza de nuevo para crear una copia de la pila con el orden de los elementos invertidos; por tanto, son los tres elementos null al final.</target>       </trans-unit>
        <trans-unit id="332" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.Push(`0)">
          <source>The <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Contains%2A&gt;</ph> method is used to show that the string "four" is in the first copy of the stack, after which the <ph id="ph2">&lt;xref:System.Collections.Generic.Stack%601.Clear%2A&gt;</ph> method clears the copy and the <ph id="ph3">&lt;xref:System.Collections.Generic.Stack%601.Count%2A&gt;</ph> property shows that the stack is empty.</source>
          <target state="translated">El <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Contains%2A&gt;</ph> método se usa para mostrar que la cadena "four" está en la primera copia de la pila, después del cual el <ph id="ph2">&lt;xref:System.Collections.Generic.Stack%601.Clear%2A&gt;</ph> método borra la copia y el <ph id="ph3">&lt;xref:System.Collections.Generic.Stack%601.Count%2A&gt;</ph> propiedad muestra que la pila está vacía.</target>       </trans-unit>
        <trans-unit id="333" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.Stack`1.System#Collections#Generic#IEnumerable&amp;lt;T&amp;gt;#GetEnumerator">
          <source>Returns an enumerator that iterates through the collection.</source>
          <target state="translated">Devuelve un enumerador que procesa una iteración en la colección.</target>       </trans-unit>
        <trans-unit id="334" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.Stack`1.System#Collections#Generic#IEnumerable&amp;lt;T&amp;gt;#GetEnumerator">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerator`1" /&gt;</ph> that can be used to iterate through the collection.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerator`1" /&gt;</ph> que se puede utilizar para recorrer en iteración la colección.</target>       </trans-unit>
        <trans-unit id="335" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.System#Collections#Generic#IEnumerable&amp;lt;T&amp;gt;#GetEnumerator">
          <source>The <ph id="ph1">`foreach`</ph> statement of the C# language (<ph id="ph2">`for each`</ph> in C++, <ph id="ph3">`For Each`</ph> in Visual Basic) hides the complexity of the enumerators.</source>
          <target state="translated">El <ph id="ph1">`foreach`</ph> instrucción del lenguaje C# (<ph id="ph2">`for each`</ph> en C++, <ph id="ph3">`For Each`</ph> en Visual Basic) oculta la complejidad de los enumeradores.</target>       </trans-unit>
        <trans-unit id="336" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.System#Collections#Generic#IEnumerable&amp;lt;T&amp;gt;#GetEnumerator">
          <source>Therefore, using <ph id="ph1">`foreach`</ph> is recommended, instead of directly manipulating the enumerator.</source>
          <target state="translated">Por lo tanto, se recomienda el uso de <ph id="ph1">`foreach`</ph>, en lugar de manipular directamente el enumerador.</target>       </trans-unit>
        <trans-unit id="337" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.System#Collections#Generic#IEnumerable&amp;lt;T&amp;gt;#GetEnumerator">
          <source>Enumerators can be used to read the data in the collection, but they cannot be used to modify the underlying collection.</source>
          <target state="translated">Los enumeradores pueden usarse para leer los datos de la colección, pero no para modificar la colección subyacente.</target>       </trans-unit>
        <trans-unit id="338" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.System#Collections#Generic#IEnumerable&amp;lt;T&amp;gt;#GetEnumerator">
          <source>Initially, the enumerator is positioned before the first element in the collection.</source>
          <target state="translated">En principio, el enumerador se coloca antes del primer elemento de la colección.</target>       </trans-unit>
        <trans-unit id="339" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.System#Collections#Generic#IEnumerable&amp;lt;T&amp;gt;#GetEnumerator">
          <source>At this position, <ph id="ph1">&lt;xref:System.Collections.Generic.IEnumerator%601.Current%2A&gt;</ph> is undefined.</source>
          <target state="translated">En esta posición, el valor de propiedad <ph id="ph1">&lt;xref:System.Collections.Generic.IEnumerator%601.Current%2A&gt;</ph> está sin definir.</target>       </trans-unit>
        <trans-unit id="340" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.System#Collections#Generic#IEnumerable&amp;lt;T&amp;gt;#GetEnumerator">
          <source>Therefore, you must call <ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> to advance the enumerator to the first element of the collection before reading the value of <ph id="ph2">&lt;xref:System.Collections.Generic.IEnumerator%601.Current%2A&gt;</ph>.</source>
          <target state="translated">Por lo tanto, debe llamar a <ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> para adelantar el enumerador hasta el primer elemento de la colección antes de leer el valor de <ph id="ph2">&lt;xref:System.Collections.Generic.IEnumerator%601.Current%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="341" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.System#Collections#Generic#IEnumerable&amp;lt;T&amp;gt;#GetEnumerator">
          <source><ph id="ph1">&lt;xref:System.Collections.Generic.IEnumerator%601.Current%2A&gt;</ph> returns the same object until <ph id="ph2">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> is called.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.Generic.IEnumerator%601.Current%2A&gt;</ph> devuelve el mismo objeto hasta que se llama a <ph id="ph2">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="342" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.System#Collections#Generic#IEnumerable&amp;lt;T&amp;gt;#GetEnumerator">
          <source><ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> sets <ph id="ph2">&lt;xref:System.Collections.Generic.IEnumerator%601.Current%2A&gt;</ph> to the next element.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> establece <ph id="ph2">&lt;xref:System.Collections.Generic.IEnumerator%601.Current%2A&gt;</ph> en el siguiente elemento.</target>       </trans-unit>
        <trans-unit id="343" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.System#Collections#Generic#IEnumerable&amp;lt;T&amp;gt;#GetEnumerator">
          <source>If <ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> passes the end of the collection, the enumerator is positioned after the last element in the collection and <ph id="ph2">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> returns <ph id="ph3">`false`</ph>.</source>
          <target state="translated">Si <ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> pasa el final de la colección, el enumerador se coloca después del último elemento de la colección y <ph id="ph2">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> devuelve <ph id="ph3">`false`</ph>.</target>       </trans-unit>
        <trans-unit id="344" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.System#Collections#Generic#IEnumerable&amp;lt;T&amp;gt;#GetEnumerator">
          <source>When the enumerator is at this position, subsequent calls to <ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> also return <ph id="ph2">`false`</ph>.</source>
          <target state="translated">Mientras el enumerador permanezca en esta posición, las llamadas subsiguientes a <ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> también devolver <ph id="ph2">`false`</ph>.</target>       </trans-unit>
        <trans-unit id="345" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.System#Collections#Generic#IEnumerable&amp;lt;T&amp;gt;#GetEnumerator">
          <source>If the last call to <ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> returned <ph id="ph2">`false`</ph>, <ph id="ph3">&lt;xref:System.Collections.Generic.IEnumerator%601.Current%2A&gt;</ph> is undefined.</source>
          <target state="translated">Si la última llamada a <ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> devuelve <ph id="ph2">`false`</ph>, <ph id="ph3">&lt;xref:System.Collections.Generic.IEnumerator%601.Current%2A&gt;</ph> no está definido.</target>       </trans-unit>
        <trans-unit id="346" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.System#Collections#Generic#IEnumerable&amp;lt;T&amp;gt;#GetEnumerator">
          <source>You cannot set <ph id="ph1">&lt;xref:System.Collections.Generic.IEnumerator%601.Current%2A&gt;</ph> to the first element of the collection again; you must create a new enumerator instance instead.</source>
          <target state="translated">No puede volver a establecer la propiedad <ph id="ph1">&lt;xref:System.Collections.Generic.IEnumerator%601.Current%2A&gt;</ph> en el primer elemento de la colección, sino que debe crear una nueva instancia del enumerador.</target>       </trans-unit>
        <trans-unit id="347" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.System#Collections#Generic#IEnumerable&amp;lt;T&amp;gt;#GetEnumerator">
          <source>An enumerator remains valid as long as the collection remains unchanged.</source>
          <target state="translated">Un enumerador es válido mientras la colección no cambie.</target>       </trans-unit>
        <trans-unit id="348" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.System#Collections#Generic#IEnumerable&amp;lt;T&amp;gt;#GetEnumerator">
          <source>If changes are made to the collection, such as adding, modifying, or deleting elements, the enumerator is irrecoverably invalidated and the next call to <ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> or <ph id="ph2">&lt;xref:System.Collections.IEnumerator.Reset%2A&gt;</ph> throws an <ph id="ph3">&lt;xref:System.InvalidOperationException&gt;</ph>.</source>
          <target state="translated">Si se realizan cambios en la colección, como agregar, modificar, o eliminar elementos, el enumerador queda permanentemente invalidado y la siguiente llamada a <ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> o <ph id="ph2">&lt;xref:System.Collections.IEnumerator.Reset%2A&gt;</ph> produce una <ph id="ph3">&lt;xref:System.InvalidOperationException&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="349" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.System#Collections#Generic#IEnumerable&amp;lt;T&amp;gt;#GetEnumerator">
          <source>If the collection is modified between calling <ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> method and obtaining the value of the <ph id="ph2">&lt;xref:System.Collections.Generic.IEnumerator%601.Current%2A&gt;</ph> property, <ph id="ph3">&lt;xref:System.Collections.Generic.IEnumerator%601.Current%2A&gt;</ph> returns the element that it is set to, even if the enumerator is already invalidated.</source>
          <target state="translated">Si la colección se modifica entre llamar a <ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> método y obtener el valor de la <ph id="ph2">&lt;xref:System.Collections.Generic.IEnumerator%601.Current%2A&gt;</ph> propiedad, <ph id="ph3">&lt;xref:System.Collections.Generic.IEnumerator%601.Current%2A&gt;</ph> devuelve el elemento que está establecido, aunque el enumerador ya haya quedado invalidado.</target>       </trans-unit>
        <trans-unit id="350" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.System#Collections#Generic#IEnumerable&amp;lt;T&amp;gt;#GetEnumerator">
          <source>The enumerator does not have exclusive access to the collection; therefore, enumerating through a collection is intrinsically not a thread-safe procedure.</source>
          <target state="translated">El enumerador no tiene acceso exclusivo a la colección y, por tanto, la enumeración en una colección no es intrínsicamente un procedimiento seguro para subprocesos.</target>       </trans-unit>
        <trans-unit id="351" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.System#Collections#Generic#IEnumerable&amp;lt;T&amp;gt;#GetEnumerator">
          <source>To guarantee thread safety during enumeration, you can lock the collection during the entire enumeration.</source>
          <target state="translated">A fin de garantizar la seguridad de los subprocesos, se puede bloquear la colección durante toda la enumeración.</target>       </trans-unit>
        <trans-unit id="352" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.System#Collections#Generic#IEnumerable&amp;lt;T&amp;gt;#GetEnumerator">
          <source>To allow the collection to be accessed by multiple threads for reading and writing, you must implement your own synchronization.</source>
          <target state="translated">Para permitir que varios subprocesos obtengan acceso de lectura y escritura a la colección, debe implementar su propia sincronización.</target>       </trans-unit>
        <trans-unit id="353" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.System#Collections#Generic#IEnumerable&amp;lt;T&amp;gt;#GetEnumerator">
          <source>Default implementations of collections in <ph id="ph1">&lt;xref:System.Collections.Generic?displayProperty=nameWithType&gt;</ph> are not synchronized.</source>
          <target state="translated">Las implementaciones de las recopilaciones predeterminadas <ph id="ph1">&lt;xref:System.Collections.Generic?displayProperty=nameWithType&gt;</ph> no están sincronizadas.</target>       </trans-unit>
        <trans-unit id="354" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.System#Collections#Generic#IEnumerable&amp;lt;T&amp;gt;#GetEnumerator">
          <source>This method is an O(1) operation.</source>
          <target state="translated">Este método es una operación o (1).</target>       </trans-unit>
        <trans-unit id="355" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.Stack`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
          <source>The one-dimensional <ph id="ph1">&lt;see cref="T:System.Array" /&gt;</ph> that is the destination of the elements copied from <ph id="ph2">&lt;see cref="T:System.Collections.ICollection" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Array" /&gt;</ph> unidimensional que constituye el destino de los elementos copiados de <ph id="ph2">&lt;see cref="T:System.Collections.ICollection" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="356" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.Stack`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Array" /&gt;</ph> must have zero-based indexing.</source>
          <target state="translated">La matriz <ph id="ph1">&lt;see cref="T:System.Array" /&gt;</ph> debe tener una indización de base cero.</target>       </trans-unit>
        <trans-unit id="357" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.Stack`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
          <source>The zero-based index in <bpt id="p1">&lt;c&gt;</bpt>array<ept id="p1">&lt;/c&gt;</ept> at which copying begins.</source>
          <target state="translated">Índice de base cero de <bpt id="p1">&lt;c&gt;</bpt>array<ept id="p1">&lt;/c&gt;</ept> donde comienza la copia.</target>       </trans-unit>
        <trans-unit id="358" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.Stack`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
          <source>Copies the elements of the <ph id="ph1">&lt;see cref="T:System.Collections.ICollection" /&gt;</ph> to an <ph id="ph2">&lt;see cref="T:System.Array" /&gt;</ph>, starting at a particular <ph id="ph3">&lt;see cref="T:System.Array" /&gt;</ph> index.</source>
          <target state="translated">Copia los elementos de <ph id="ph1">&lt;see cref="T:System.Collections.ICollection" /&gt;</ph> en <ph id="ph2">&lt;see cref="T:System.Array" /&gt;</ph>, empezando por un índice determinado de <ph id="ph3">&lt;see cref="T:System.Array" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="359" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
          <source>If the type of the source <ph id="ph1">&lt;xref:System.Collections.ICollection&gt;</ph> cannot be cast automatically to the type of the destination <ph id="ph2">`array`</ph>, the non-generic implementations of <ph id="ph3">&lt;xref:System.Collections.ICollection.CopyTo%2A?displayProperty=nameWithType&gt;</ph> throw <ph id="ph4">&lt;xref:System.InvalidCastException&gt;</ph>, whereas the generic implementations throw <ph id="ph5">&lt;xref:System.ArgumentException&gt;</ph>.</source>
          <target state="translated">Si el tipo del origen de <ph id="ph1">&lt;xref:System.Collections.ICollection&gt;</ph> no puede convertirse automáticamente al tipo del destino de <ph id="ph2">`array`</ph>, las implementaciones no genéricas de <ph id="ph3">&lt;xref:System.Collections.ICollection.CopyTo%2A?displayProperty=nameWithType&gt;</ph> throw <ph id="ph4">&lt;xref:System.InvalidCastException&gt;</ph>, mientras que las implementaciones genéricas inician <ph id="ph5">&lt;xref:System.ArgumentException&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="360" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
          <source>This method is an O(<ph id="ph1">`n`</ph>) operation, where <ph id="ph2">`n`</ph> is <ph id="ph3">&lt;xref:System.Collections.Generic.Stack%601.Count%2A&gt;</ph>.</source>
          <target state="translated">Este método es una O (<ph id="ph1">`n`</ph>) operación, donde <ph id="ph2">`n`</ph> es <ph id="ph3">&lt;xref:System.Collections.Generic.Stack%601.Count%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="361" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.Stack`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="array" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="array" /&gt;</ph> es <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="362" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.Stack`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="arrayIndex" /&gt;</ph> is less than zero.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="arrayIndex" /&gt;</ph> es menor que cero.</target>       </trans-unit>
        <trans-unit id="363" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.Stack`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="array" /&gt;</ph> is multidimensional.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="array" /&gt;</ph> es multidimensional.</target>       </trans-unit>
        <trans-unit id="364" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.Stack`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
          <source>-or-</source>
          <target state="translated">O bien</target>       </trans-unit>
        <trans-unit id="365" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.Stack`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="array" /&gt;</ph> does not have zero-based indexing.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="array" /&gt;</ph> no tiene índices de base cero.</target>       </trans-unit>
        <trans-unit id="366" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.Stack`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
          <source>-or-</source>
          <target state="translated">O bien</target>       </trans-unit>
        <trans-unit id="367" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.Stack`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
          <source>The number of elements in the source <ph id="ph1">&lt;see cref="T:System.Collections.ICollection" /&gt;</ph> is greater than the available space from <ph id="ph2">&lt;paramref name="arrayIndex" /&gt;</ph> to the end of the destination <ph id="ph3">&lt;paramref name="array" /&gt;</ph>.</source>
          <target state="translated">El número de elementos de la <ph id="ph1">&lt;see cref="T:System.Collections.ICollection" /&gt;</ph> de origen es mayor que el espacio disponible desde <ph id="ph2">&lt;paramref name="arrayIndex" /&gt;</ph> hasta el final de la <ph id="ph3">&lt;paramref name="array" /&gt;</ph> de destino.</target>       </trans-unit>
        <trans-unit id="368" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.Stack`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
          <source>-or-</source>
          <target state="translated">O bien</target>       </trans-unit>
        <trans-unit id="369" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.Stack`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
          <source>The type of the source <ph id="ph1">&lt;see cref="T:System.Collections.ICollection" /&gt;</ph> cannot be cast automatically to the type of the destination <ph id="ph2">&lt;paramref name="array" /&gt;</ph>.</source>
          <target state="translated">El tipo de la <ph id="ph1">&lt;see cref="T:System.Collections.ICollection" /&gt;</ph> de origen no puede convertirse automáticamente al tipo de la <ph id="ph2">&lt;paramref name="array" /&gt;</ph> de destino.</target>       </trans-unit>
        <trans-unit id="370" translate="yes" xml:space="preserve" uid="P:System.Collections.Generic.Stack`1.System#Collections#ICollection#IsSynchronized">
          <source>Gets a value indicating whether access to the <ph id="ph1">&lt;see cref="T:System.Collections.ICollection" /&gt;</ph> is synchronized (thread safe).</source>
          <target state="translated">Obtiene un valor que indica si el acceso a la interfaz <ph id="ph1">&lt;see cref="T:System.Collections.ICollection" /&gt;</ph> está sincronizado (es seguro para subprocesos).</target>       </trans-unit>
        <trans-unit id="371" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.Stack`1.System#Collections#ICollection#IsSynchronized">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if access to the <ph id="ph2">&lt;see cref="T:System.Collections.ICollection" /&gt;</ph> is synchronized (thread safe); otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">Es <ph id="ph1">&lt;see langword="true" /&gt;</ph> si el acceso a <ph id="ph2">&lt;see cref="T:System.Collections.ICollection" /&gt;</ph> está sincronizado (es seguro para subprocesos); de lo contrario, es <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="372" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.Stack`1.System#Collections#ICollection#IsSynchronized">
          <source>In the default implementation of <ph id="ph1">&lt;see cref="T:System.Collections.Generic.Stack`1" /&gt;</ph>, this property always returns <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">En la implementación predeterminada de <ph id="ph1">&lt;see cref="T:System.Collections.Generic.Stack`1" /&gt;</ph>, esta propiedad siempre devuelve <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="373" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.Stack`1.System#Collections#ICollection#IsSynchronized">
          <source>Default implementations of collections in <ph id="ph1">&lt;xref:System.Collections.Generic?displayProperty=nameWithType&gt;</ph> are not synchronized.</source>
          <target state="translated">Las implementaciones de las recopilaciones predeterminadas <ph id="ph1">&lt;xref:System.Collections.Generic?displayProperty=nameWithType&gt;</ph> no están sincronizadas.</target>       </trans-unit>
        <trans-unit id="374" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.Stack`1.System#Collections#ICollection#IsSynchronized">
          <source>Enumerating through a collection is intrinsically not a thread-safe procedure.</source>
          <target state="translated">Enumerar una colección no es intrínsecamente un procedimiento seguro para subprocesos.</target>       </trans-unit>
        <trans-unit id="375" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.Stack`1.System#Collections#ICollection#IsSynchronized">
          <source>In the rare case where enumerations contend with write accesses, you must lock the collection during the entire enumeration.</source>
          <target state="translated">En el caso excepcional en enumeraciones compitan con accesos de escritura, se debe bloquear la colección durante toda la enumeración.</target>       </trans-unit>
        <trans-unit id="376" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.Stack`1.System#Collections#ICollection#IsSynchronized">
          <source>To allow the collection to be accessed by multiple threads for reading and writing, you must implement your own synchronization.</source>
          <target state="translated">Para permitir que varios subprocesos obtengan acceso de lectura y escritura a la colección, debe implementar su propia sincronización.</target>       </trans-unit>
        <trans-unit id="377" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.Stack`1.System#Collections#ICollection#IsSynchronized">
          <source><ph id="ph1">&lt;xref:System.Collections.ICollection.SyncRoot%2A&gt;</ph> returns an object that can be used to synchronize access to the <ph id="ph2">&lt;xref:System.Collections.ICollection&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.ICollection.SyncRoot%2A&gt;</ph> Devuelve un objeto que puede utilizarse para sincronizar el acceso a la <ph id="ph2">&lt;xref:System.Collections.ICollection&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="378" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.Stack`1.System#Collections#ICollection#IsSynchronized">
          <source>Synchronization is effective only if all threads lock this object before accessing the collection.</source>
          <target state="translated">La sincronización es efectiva sólo si todos los subprocesos bloquean este objeto antes de obtener acceso a la colección.</target>       </trans-unit>
        <trans-unit id="379" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.Stack`1.System#Collections#ICollection#IsSynchronized">
          <source>Retrieving the value of this property is an O(1) operation.</source>
          <target state="translated">La recuperación del valor de esta propiedad es una operación O(1).</target>       </trans-unit>
        <trans-unit id="380" translate="yes" xml:space="preserve" uid="P:System.Collections.Generic.Stack`1.System#Collections#ICollection#SyncRoot">
          <source>Gets an object that can be used to synchronize access to the <ph id="ph1">&lt;see cref="T:System.Collections.ICollection" /&gt;</ph>.</source>
          <target state="translated">Obtiene un objeto que se puede usar para sincronizar el acceso a <ph id="ph1">&lt;see cref="T:System.Collections.ICollection" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="381" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.Stack`1.System#Collections#ICollection#SyncRoot">
          <source>An object that can be used to synchronize access to the <ph id="ph1">&lt;see cref="T:System.Collections.ICollection" /&gt;</ph>.</source>
          <target state="translated">Objeto que se puede usar para sincronizar el acceso a <ph id="ph1">&lt;see cref="T:System.Collections.ICollection" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="382" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.Stack`1.System#Collections#ICollection#SyncRoot">
          <source>In the default implementation of <ph id="ph1">&lt;see cref="T:System.Collections.Generic.Stack`1" /&gt;</ph>, this property always returns the current instance.</source>
          <target state="translated">En la implementación predeterminada de <ph id="ph1">&lt;see cref="T:System.Collections.Generic.Stack`1" /&gt;</ph>, esta propiedad siempre devuelve la instancia actual.</target>       </trans-unit>
        <trans-unit id="383" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.Stack`1.System#Collections#ICollection#SyncRoot">
          <source>Default implementations of collections in <ph id="ph1">&lt;xref:System.Collections.Generic?displayProperty=nameWithType&gt;</ph> are not synchronized.</source>
          <target state="translated">Las implementaciones de las recopilaciones predeterminadas <ph id="ph1">&lt;xref:System.Collections.Generic?displayProperty=nameWithType&gt;</ph> no están sincronizadas.</target>       </trans-unit>
        <trans-unit id="384" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.Stack`1.System#Collections#ICollection#SyncRoot">
          <source>Enumerating through a collection is intrinsically not a thread-safe procedure.</source>
          <target state="translated">Enumerar una colección no es intrínsecamente un procedimiento seguro para subprocesos.</target>       </trans-unit>
        <trans-unit id="385" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.Stack`1.System#Collections#ICollection#SyncRoot">
          <source>To guarantee thread safety during enumeration, you can lock the collection during the entire enumeration.</source>
          <target state="translated">A fin de garantizar la seguridad de los subprocesos, se puede bloquear la colección durante toda la enumeración.</target>       </trans-unit>
        <trans-unit id="386" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.Stack`1.System#Collections#ICollection#SyncRoot">
          <source>To allow the collection to be accessed by multiple threads for reading and writing, you must implement your own synchronization.</source>
          <target state="translated">Para permitir que varios subprocesos obtengan acceso de lectura y escritura a la colección, debe implementar su propia sincronización.</target>       </trans-unit>
        <trans-unit id="387" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.Stack`1.System#Collections#ICollection#SyncRoot">
          <source><ph id="ph1">&lt;xref:System.Collections.ICollection.SyncRoot%2A&gt;</ph> returns an object that can be used to synchronize access to the <ph id="ph2">&lt;xref:System.Collections.ICollection&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.ICollection.SyncRoot%2A&gt;</ph> Devuelve un objeto que puede utilizarse para sincronizar el acceso a la <ph id="ph2">&lt;xref:System.Collections.ICollection&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="388" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.Stack`1.System#Collections#ICollection#SyncRoot">
          <source>Synchronization is effective only if all threads lock this object before accessing the collection.</source>
          <target state="translated">La sincronización es efectiva sólo si todos los subprocesos bloquean este objeto antes de obtener acceso a la colección.</target>       </trans-unit>
        <trans-unit id="389" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.Stack`1.System#Collections#ICollection#SyncRoot">
          <source>The following code shows the use of the <ph id="ph1">&lt;xref:System.Collections.ICollection.SyncRoot%2A&gt;</ph> property for C#, C++, and Visual Basic.</source>
          <target state="translated">El código siguiente muestra el uso de la <ph id="ph1">&lt;xref:System.Collections.ICollection.SyncRoot%2A&gt;</ph> propiedad para C#, C++ y Visual Basic.</target>       </trans-unit>
        <trans-unit id="390" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.Stack`1.System#Collections#ICollection#SyncRoot">
          <source>Retrieving the value of this property is an O(1) operation.</source>
          <target state="translated">La recuperación del valor de esta propiedad es una operación O(1).</target>       </trans-unit>
        <trans-unit id="391" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.Stack`1.System#Collections#IEnumerable#GetEnumerator">
          <source>Returns an enumerator that iterates through a collection.</source>
          <target state="translated">Devuelve un enumerador que recorre en iteración una colección.</target>       </trans-unit>
        <trans-unit id="392" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.Stack`1.System#Collections#IEnumerable#GetEnumerator">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.IEnumerator" /&gt;</ph> that can be used to iterate through the collection.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Collections.IEnumerator" /&gt;</ph> que se puede utilizar para recorrer en iteración la colección.</target>       </trans-unit>
        <trans-unit id="393" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.System#Collections#IEnumerable#GetEnumerator">
          <source>The <ph id="ph1">`foreach`</ph> statement of the C# language (<ph id="ph2">`for each`</ph> in C++, <ph id="ph3">`For Each`</ph> in Visual Basic) hides the complexity of the enumerators.</source>
          <target state="translated">El <ph id="ph1">`foreach`</ph> instrucción del lenguaje C# (<ph id="ph2">`for each`</ph> en C++, <ph id="ph3">`For Each`</ph> en Visual Basic) oculta la complejidad de los enumeradores.</target>       </trans-unit>
        <trans-unit id="394" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.System#Collections#IEnumerable#GetEnumerator">
          <source>Therefore, using <ph id="ph1">`foreach`</ph> is recommended, instead of directly manipulating the enumerator.</source>
          <target state="translated">Por lo tanto, se recomienda el uso de <ph id="ph1">`foreach`</ph>, en lugar de manipular directamente el enumerador.</target>       </trans-unit>
        <trans-unit id="395" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.System#Collections#IEnumerable#GetEnumerator">
          <source>Enumerators can be used to read the data in the collection, but they cannot be used to modify the underlying collection.</source>
          <target state="translated">Los enumeradores pueden usarse para leer los datos de la colección, pero no para modificar la colección subyacente.</target>       </trans-unit>
        <trans-unit id="396" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.System#Collections#IEnumerable#GetEnumerator">
          <source>Initially, the enumerator is positioned before the first element in the collection.</source>
          <target state="translated">En principio, el enumerador se coloca antes del primer elemento de la colección.</target>       </trans-unit>
        <trans-unit id="397" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.System#Collections#IEnumerable#GetEnumerator">
          <source><ph id="ph1">&lt;xref:System.Collections.IEnumerator.Reset%2A&gt;</ph> also brings the enumerator back to this position.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.IEnumerator.Reset%2A&gt;</ph> también devuelve el enumerador a esta posición.</target>       </trans-unit>
        <trans-unit id="398" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.System#Collections#IEnumerable#GetEnumerator">
          <source>At this position, <ph id="ph1">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;</ph> is undefined.</source>
          <target state="translated">En esta posición, el valor de propiedad <ph id="ph1">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;</ph> está sin definir.</target>       </trans-unit>
        <trans-unit id="399" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.System#Collections#IEnumerable#GetEnumerator">
          <source>Therefore, you must call <ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> to advance the enumerator to the first element of the collection before reading the value of <ph id="ph2">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;</ph>.</source>
          <target state="translated">Por lo tanto, debe llamar a <ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> para adelantar el enumerador hasta el primer elemento de la colección antes de leer el valor de <ph id="ph2">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="400" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.System#Collections#IEnumerable#GetEnumerator">
          <source><ph id="ph1">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;</ph> returns the same object until either <ph id="ph2">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> or <ph id="ph3">&lt;xref:System.Collections.IEnumerator.Reset%2A&gt;</ph> is called.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;</ph> devuelve el mismo objeto hasta que se llama a <ph id="ph2">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> o a <ph id="ph3">&lt;xref:System.Collections.IEnumerator.Reset%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="401" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.System#Collections#IEnumerable#GetEnumerator">
          <source><ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> sets <ph id="ph2">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;</ph> to the next element.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> establece <ph id="ph2">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;</ph> en el siguiente elemento.</target>       </trans-unit>
        <trans-unit id="402" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.System#Collections#IEnumerable#GetEnumerator">
          <source>If <ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> passes the end of the collection, the enumerator is positioned after the last element in the collection and <ph id="ph2">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> returns <ph id="ph3">`false`</ph>.</source>
          <target state="translated">Si <ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> pasa el final de la colección, el enumerador se coloca después del último elemento de la colección y <ph id="ph2">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> devuelve <ph id="ph3">`false`</ph>.</target>       </trans-unit>
        <trans-unit id="403" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.System#Collections#IEnumerable#GetEnumerator">
          <source>When the enumerator is at this position, subsequent calls to <ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> also return <ph id="ph2">`false`</ph>.</source>
          <target state="translated">Mientras el enumerador permanezca en esta posición, las llamadas subsiguientes a <ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> también devolver <ph id="ph2">`false`</ph>.</target>       </trans-unit>
        <trans-unit id="404" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.System#Collections#IEnumerable#GetEnumerator">
          <source>If the last call to <ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> returned <ph id="ph2">`false`</ph>, <ph id="ph3">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;</ph> is undefined.</source>
          <target state="translated">Si la última llamada a <ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> devuelve <ph id="ph2">`false`</ph>, <ph id="ph3">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;</ph> no está definido.</target>       </trans-unit>
        <trans-unit id="405" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.System#Collections#IEnumerable#GetEnumerator">
          <source>To set <ph id="ph1">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;</ph> to the first element of the collection again, you can call <ph id="ph2">&lt;xref:System.Collections.IEnumerator.Reset%2A&gt;</ph> followed by <ph id="ph3">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph>.</source>
          <target state="translated">Para volver a establecer el valor de <ph id="ph1">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;</ph> en el primer elemento de la colección, se puede llamar primero a <ph id="ph2">&lt;xref:System.Collections.IEnumerator.Reset%2A&gt;</ph> y después a <ph id="ph3">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="406" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.System#Collections#IEnumerable#GetEnumerator">
          <source>An enumerator remains valid as long as the collection remains unchanged.</source>
          <target state="translated">Un enumerador es válido mientras la colección no cambie.</target>       </trans-unit>
        <trans-unit id="407" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.System#Collections#IEnumerable#GetEnumerator">
          <source>If changes are made to the collection, such as adding, modifying, or deleting elements, the enumerator is irrecoverably invalidated and the next call to <ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> or <ph id="ph2">&lt;xref:System.Collections.IEnumerator.Reset%2A&gt;</ph> throws an <ph id="ph3">&lt;xref:System.InvalidOperationException&gt;</ph>.</source>
          <target state="translated">Si se realizan cambios en la colección, como agregar, modificar, o eliminar elementos, el enumerador queda permanentemente invalidado y la siguiente llamada a <ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> o <ph id="ph2">&lt;xref:System.Collections.IEnumerator.Reset%2A&gt;</ph> produce una <ph id="ph3">&lt;xref:System.InvalidOperationException&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="408" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.System#Collections#IEnumerable#GetEnumerator">
          <source>If the collection is modified between calling <ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> method and obtaining the value of the <ph id="ph2">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;</ph> property, <ph id="ph3">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;</ph> returns the element that it is set to, even if the enumerator is already invalidated.</source>
          <target state="translated">Si la colección se modifica entre llamar a <ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> método y obtener el valor de la <ph id="ph2">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;</ph> propiedad, <ph id="ph3">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;</ph> devuelve el elemento que está establecido, aunque el enumerador ya haya quedado invalidado.</target>       </trans-unit>
        <trans-unit id="409" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.System#Collections#IEnumerable#GetEnumerator">
          <source>The enumerator does not have exclusive access to the collection; therefore, enumerating through a collection is intrinsically not a thread-safe procedure.</source>
          <target state="translated">El enumerador no tiene acceso exclusivo a la colección y, por tanto, la enumeración en una colección no es intrínsicamente un procedimiento seguro para subprocesos.</target>       </trans-unit>
        <trans-unit id="410" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.System#Collections#IEnumerable#GetEnumerator">
          <source>To guarantee thread safety during enumeration, you can lock the collection during the entire enumeration.</source>
          <target state="translated">A fin de garantizar la seguridad de los subprocesos, se puede bloquear la colección durante toda la enumeración.</target>       </trans-unit>
        <trans-unit id="411" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.System#Collections#IEnumerable#GetEnumerator">
          <source>To allow the collection to be accessed by multiple threads for reading and writing, you must implement your own synchronization.</source>
          <target state="translated">Para permitir que varios subprocesos obtengan acceso de lectura y escritura a la colección, debe implementar su propia sincronización.</target>       </trans-unit>
        <trans-unit id="412" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.System#Collections#IEnumerable#GetEnumerator">
          <source>Default implementations of collections in <ph id="ph1">&lt;xref:System.Collections.Generic?displayProperty=nameWithType&gt;</ph> are not synchronized.</source>
          <target state="translated">Las implementaciones de las recopilaciones predeterminadas <ph id="ph1">&lt;xref:System.Collections.Generic?displayProperty=nameWithType&gt;</ph> no están sincronizadas.</target>       </trans-unit>
        <trans-unit id="413" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.System#Collections#IEnumerable#GetEnumerator">
          <source>This method is an O(1) operation.</source>
          <target state="translated">Este método es una operación o (1).</target>       </trans-unit>
        <trans-unit id="414" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.Stack`1.ToArray">
          <source>Copies the <ph id="ph1">&lt;see cref="T:System.Collections.Generic.Stack`1" /&gt;</ph> to a new array.</source>
          <target state="translated">Copia <ph id="ph1">&lt;see cref="T:System.Collections.Generic.Stack`1" /&gt;</ph> en una nueva matriz.</target>       </trans-unit>
        <trans-unit id="415" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.Stack`1.ToArray">
          <source>A new array containing copies of the elements of the <ph id="ph1">&lt;see cref="T:System.Collections.Generic.Stack`1" /&gt;</ph>.</source>
          <target state="translated">Nueva matriz que contiene copias de los elementos de <ph id="ph1">&lt;see cref="T:System.Collections.Generic.Stack`1" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="416" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.ToArray">
          <source>The elements are copied onto the array in last-in-first-out (LIFO) order, similar to the order of the elements returned by a succession of calls to <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Pop%2A&gt;</ph>.</source>
          <target state="translated">Los elementos se copian en la matriz en orden de último en primero en salir (LIFO), que equivale al orden de los elementos devueltos por una serie de llamadas a <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Pop%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="417" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.ToArray">
          <source>This method is an O(<ph id="ph1">`n`</ph>) operation, where <ph id="ph2">`n`</ph> is <ph id="ph3">&lt;xref:System.Collections.Generic.Stack%601.Count%2A&gt;</ph>.</source>
          <target state="translated">Este método es una O (<ph id="ph1">`n`</ph>) operación, donde <ph id="ph2">`n`</ph> es <ph id="ph3">&lt;xref:System.Collections.Generic.Stack%601.Count%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="418" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.ToArray">
          <source>The following code example demonstrates several methods of the <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601&gt;</ph> generic class, including the <ph id="ph2">&lt;xref:System.Collections.Generic.Stack%601.ToArray%2A&gt;</ph> method.</source>
          <target state="translated">En el ejemplo de código siguiente se muestra varios métodos de la <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601&gt;</ph> clase genérica, incluida la <ph id="ph2">&lt;xref:System.Collections.Generic.Stack%601.ToArray%2A&gt;</ph> método.</target>       </trans-unit>
        <trans-unit id="419" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.ToArray">
          <source>The code example creates a stack of strings with default capacity and uses the <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Push%2A&gt;</ph> method to push five strings onto the stack.</source>
          <target state="translated">El ejemplo de código crea una pila de cadenas con capacidad predeterminada y usa el <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Push%2A&gt;</ph> método para insertar cinco cadenas en la pila.</target>       </trans-unit>
        <trans-unit id="420" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.ToArray">
          <source>The elements of the stack are enumerated, which does not change the state of the stack.</source>
          <target state="translated">Se enumeran los elementos de la pila, que no cambia el estado de la pila.</target>       </trans-unit>
        <trans-unit id="421" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.ToArray">
          <source>The <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Pop%2A&gt;</ph> method is used to pop the first string off the stack.</source>
          <target state="translated">El <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Pop%2A&gt;</ph> método se usa para extraer la primera cadena de la pila.</target>       </trans-unit>
        <trans-unit id="422" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.ToArray">
          <source>The <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Peek%2A&gt;</ph> method is used to look at the next item on the stack, and then the <ph id="ph2">&lt;xref:System.Collections.Generic.Stack%601.Pop%2A&gt;</ph> method is used to pop it off.</source>
          <target state="translated">El <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Peek%2A&gt;</ph> método se utiliza para buscar en el siguiente elemento en la pila y, a continuación, el <ph id="ph2">&lt;xref:System.Collections.Generic.Stack%601.Pop%2A&gt;</ph> método se usa para extraer.</target>       </trans-unit>
        <trans-unit id="423" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.ToArray">
          <source>The <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.ToArray%2A&gt;</ph> method is used to create an array and copy the stack elements to it, then the array is passed to the <ph id="ph2">&lt;xref:System.Collections.Generic.Stack%601.%23ctor%2A&gt;</ph> constructor that takes <ph id="ph3">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph>, creating a copy of the stack with the order of the elements reversed.</source>
          <target state="translated">El <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.ToArray%2A&gt;</ph> método se usa para crear una matriz y copiar los elementos de la pila en él, a continuación, la matriz se pasa a la <ph id="ph2">&lt;xref:System.Collections.Generic.Stack%601.%23ctor%2A&gt;</ph> constructor que toma <ph id="ph3">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph>, crear una copia de la pila con el orden de los elementos invertidos.</target>       </trans-unit>
        <trans-unit id="424" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.ToArray">
          <source>The elements of the copy are displayed.</source>
          <target state="translated">Se muestran los elementos de la copia.</target>       </trans-unit>
        <trans-unit id="425" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.ToArray">
          <source>An array twice the size of the stack is created, and the <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.CopyTo%2A&gt;</ph> method is used to copy the array elements beginning at the middle of the array.</source>
          <target state="translated">Dos veces el tamaño de la pila se crea una matriz y la <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.CopyTo%2A&gt;</ph> método se usa para copiar los elementos de matriz, empezando por el centro de la matriz.</target>       </trans-unit>
        <trans-unit id="426" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.ToArray">
          <source>The <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.%23ctor%2A&gt;</ph> constructor is used again to create a copy of the stack with the order of elements reversed; thus, the three null elements are at the end.</source>
          <target state="translated">El <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.%23ctor%2A&gt;</ph> constructor se utiliza de nuevo para crear una copia de la pila con el orden de los elementos invertidos; por tanto, son los tres elementos null al final.</target>       </trans-unit>
        <trans-unit id="427" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.ToArray">
          <source>The <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Contains%2A&gt;</ph> method is used to show that the string "four" is in the first copy of the stack, after which the <ph id="ph2">&lt;xref:System.Collections.Generic.Stack%601.Clear%2A&gt;</ph> method clears the copy and the <ph id="ph3">&lt;xref:System.Collections.Generic.Stack%601.Count%2A&gt;</ph> property shows that the stack is empty.</source>
          <target state="translated">El <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Contains%2A&gt;</ph> método se usa para mostrar que la cadena "four" está en la primera copia de la pila, después del cual el <ph id="ph2">&lt;xref:System.Collections.Generic.Stack%601.Clear%2A&gt;</ph> método borra la copia y el <ph id="ph3">&lt;xref:System.Collections.Generic.Stack%601.Count%2A&gt;</ph> propiedad muestra que la pila está vacía.</target>       </trans-unit>
        <trans-unit id="428" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.Stack`1.TrimExcess">
          <source>Sets the capacity to the actual number of elements in the <ph id="ph1">&lt;see cref="T:System.Collections.Generic.Stack`1" /&gt;</ph>, if that number is less than 90 percent of current capacity.</source>
          <target state="translated">Establece la capacidad en el número real de elementos en la colección <ph id="ph1">&lt;see cref="T:System.Collections.Generic.Stack`1" /&gt;</ph>, si este número supone menos del 90 por ciento de la capacidad actual.</target>       </trans-unit>
        <trans-unit id="429" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.TrimExcess">
          <source>This method can be used to minimize a collection's memory overhead if no new elements will be added to the collection.</source>
          <target state="translated">Este método se puede utilizar para minimizar la sobrecarga de memoria de la colección si ningún elemento nuevo se agregará a la colección.</target>       </trans-unit>
        <trans-unit id="430" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.TrimExcess">
          <source>The cost of reallocating and copying a large <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601&gt;</ph> can be considerable, however, so the <ph id="ph2">&lt;xref:System.Collections.Generic.Stack%601.TrimExcess%2A&gt;</ph> method does nothing if the list is at more than 90 percent of capacity.</source>
          <target state="translated">El costo de reasignar y copiar una gran <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601&gt;</ph> puede ser considerable, sin embargo, por lo que el <ph id="ph2">&lt;xref:System.Collections.Generic.Stack%601.TrimExcess%2A&gt;</ph> método no hace nada si la lista está en más del 90 por ciento de capacidad.</target>       </trans-unit>
        <trans-unit id="431" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.TrimExcess">
          <source>This avoids incurring a large reallocation cost for a relatively small gain.</source>
          <target state="translated">Esto evita incurrir en un gran costo de reasignación para lograr una mejora relativamente pequeño.</target>       </trans-unit>
        <trans-unit id="432" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.TrimExcess">
          <source>This method is an O(<ph id="ph1">`n`</ph>) operation, where <ph id="ph2">`n`</ph> is <ph id="ph3">&lt;xref:System.Collections.Generic.Stack%601.Count%2A&gt;</ph>.</source>
          <target state="translated">Este método es una O (<ph id="ph1">`n`</ph>) operación, donde <ph id="ph2">`n`</ph> es <ph id="ph3">&lt;xref:System.Collections.Generic.Stack%601.Count%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="433" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.TrimExcess">
          <source>To reset a <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601&gt;</ph> to its initial state, call the <ph id="ph2">&lt;xref:System.Collections.Generic.Stack%601.Clear%2A&gt;</ph> method before calling <ph id="ph3">&lt;xref:System.Collections.Generic.Stack%601.TrimExcess%2A&gt;</ph> method.</source>
          <target state="translated">Para restablecer un <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601&gt;</ph> a su estado inicial, llame a la <ph id="ph2">&lt;xref:System.Collections.Generic.Stack%601.Clear%2A&gt;</ph> método antes de llamar a <ph id="ph3">&lt;xref:System.Collections.Generic.Stack%601.TrimExcess%2A&gt;</ph> método.</target>       </trans-unit>
        <trans-unit id="434" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.TrimExcess">
          <source>Trimming an empty <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601&gt;</ph> sets the capacity of the <ph id="ph2">&lt;xref:System.Collections.Generic.Stack%601&gt;</ph> to the default capacity.</source>
          <target state="translated">Recortar vacío <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601&gt;</ph> establece la capacidad de la <ph id="ph2">&lt;xref:System.Collections.Generic.Stack%601&gt;</ph> en la capacidad predeterminada.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>