<Type Name="IEnumerable&lt;T&gt;" FullName="System.Collections.Generic.IEnumerable&lt;T&gt;">
  <Metadata><Meta Name="ms.openlocfilehash" Value="67d8bd93d39deef2a4d4ae6f1198768fda753482" /><Meta Name="ms.sourcegitcommit" Value="a3e01ec36374fac54a55add0dcc1e754e394abeb" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="es-ES" /><Meta Name="ms.lasthandoff" Value="03/30/2019" /><Meta Name="ms.locfileid" Value="58745683" /></Metadata><TypeSignature Language="C#" Value="public interface IEnumerable&lt;out T&gt; : System.Collections.IEnumerable" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IEnumerable`1&lt;+ T&gt; implements class System.Collections.IEnumerable" />
  <TypeSignature Language="DocId" Value="T:System.Collections.Generic.IEnumerable`1" />
  <TypeSignature Language="VB.NET" Value="Public Interface IEnumerable(Of Out T)&#xA;Implements IEnumerable" />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename T&gt;&#xA;public interface class IEnumerable : System::Collections::IEnumerable" />
  <TypeSignature Language="F#" Value="type seq&lt;'T&gt; = interface&#xA;    interface IEnumerable" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="T">
      <Constraints>
        <ParameterAttribute>Covariant</ParameterAttribute>
      </Constraints>
    </TypeParameter>
  </TypeParameters>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Collections.IEnumerable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <typeparam name="T">Tipo de los objetos que se van a enumerar.</typeparam>
    <summary>Expone el enumerador, que admite una iteración simple en una colección de un tipo especificado.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Collections.Generic.IEnumerable%601> es la interfaz base para las colecciones en el <xref:System.Collections.Generic> espacio de nombres como <xref:System.Collections.Generic.List%601>, <xref:System.Collections.Generic.Dictionary%602>, y <xref:System.Collections.Generic.Stack%601> y otras colecciones genéricas como <xref:System.Collections.ObjectModel.ObservableCollection%601> y <xref:System.Collections.Concurrent.ConcurrentStack%601>. Las colecciones que implementan <xref:System.Collections.Generic.IEnumerable%601> se pueden enumerar mediante el uso de la `foreach` instrucción.  
  
 Para la versión no genérica de esta interfaz, vea <xref:System.Collections.IEnumerable?displayProperty=nameWithType>.  
  
 <xref:System.Collections.Generic.IEnumerable%601> contiene un único método que debe implementar al implementar esta interfaz; <xref:System.Collections.Generic.IEnumerable%601.GetEnumerator%2A>, que devuelve un <xref:System.Collections.Generic.IEnumerator%601> objeto. El valor devuelto <xref:System.Collections.Generic.IEnumerator%601> proporciona la capacidad de recorrer en iteración la colección mediante la exposición de un <xref:System.Collections.Generic.IEnumerator%601.Current%2A> propiedad.  
  
   
  
## Examples  
 En el ejemplo siguiente se muestra cómo implementar el <xref:System.Collections.Generic.IEnumerable%601> interfaz y cómo usar esa implementación para crear una consulta LINQ. Cuando se implementa <xref:System.Collections.Generic.IEnumerable%601>, también debe implementar <xref:System.Collections.Generic.IEnumerator%601> o solo en C#, puede usar el [yield](~/docs/csharp/language-reference/keywords/yield.md) palabra clave. Implementar <xref:System.Collections.Generic.IEnumerator%601> también requiere <xref:System.IDisposable> van a implementar, que verá en este ejemplo.  
  
 [!code-csharp[System.Collections.Generic.IEnumerableEx#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.collections.generic.ienumerableex/cs/program.cs#1)]
 [!code-vb[System.Collections.Generic.IEnumerableEx#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.collections.generic.ienumerableex/vb/module1.vb#1)]  
  
 Para obtener otro ejemplo C# que muestra cómo implementar la <xref:System.Collections.Generic.IEnumerable%601> interfaz, vea el [ejemplo Generics](https://code.msdn.microsoft.com/Generics-Sample-C-9b41a192/sourcecode?fileId=46476&pathId=1364935593). Este ejemplo se utiliza el `yield` palabra clave en lugar de implementar <xref:System.Collections.Generic.IEnumerator%601>.  
  
 ]]></format>
    </remarks>
    <block subset="none" type="overrides"><para>
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> se incluye por motivos de paridad con colecciones no genéricas; implementar <see cref="T:System.Collections.Generic.IEnumerable`1" /> permite una colección genérica que se pasará a un método que espera un <see cref="T:System.Collections.IEnumerable" /> objeto.</para></block>
    <altmember cref="T:System.Collections.Generic.IEnumerator`1" />
    <altmember cref="N:System.Collections" />
    <related type="Article" href="https://msdn.microsoft.com/library/c60d7589-51f2-4463-a2d5-22506bbc1554">Tutorial: Implementar IEnumerable(Of T) en Visual Basic</related>
    <related type="Article" href="https://msdn.microsoft.com/library/f45331db-d595-46ec-9142-551d3d1eb1a7">Iteradores (C# y Visual Basic)</related>
    <related type="ExternalDocumentation" href="https://code.msdn.microsoft.com/Generics-Sample-C-9b41a192/sourcecode?fileId=46476&amp;pathId=1364935593">Ejemplo de los genéricos</related>
  </Docs>
  <Members>
    <Member MemberName="GetEnumerator">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerator&lt;out T&gt; GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.Generic.IEnumerator`1&lt;!T&gt; GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.IEnumerable`1.GetEnumerator" />
      <MemberSignature Language="VB.NET" Value="Public Function GetEnumerator () As IEnumerator(Of Out T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Generic::IEnumerator&lt;T&gt; ^ GetEnumerator();" />
      <MemberSignature Language="F#" Value="abstract member GetEnumerator : unit -&gt; System.Collections.Generic.IEnumerator&lt;'T&gt;" Usage="seq.GetEnumerator " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerator&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Devuelve un enumerador que procesa una iteración en la colección.</summary>
        <returns>Enumerador que se puede utilizar para recorrer en iteración la colección.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El valor devuelto <xref:System.Collections.Generic.IEnumerator%601> proporciona la capacidad de recorrer en iteración la colección mediante la exposición de un <xref:System.Collections.Generic.IEnumerator%601.Current%2A> propiedad. Puede usar enumeradores para leer los datos en una colección, pero no para modificar la colección.  
  
 En principio, el enumerador se coloca antes del primer elemento de la colección. En esta posición, el valor de propiedad <xref:System.Collections.Generic.IEnumerator%601.Current%2A> está sin definir. Por lo tanto, debe llamar a la <xref:System.Collections.IEnumerator.MoveNext%2A> método para hacer avanzar el enumerador hasta el primer elemento de la colección antes de leer el valor de <xref:System.Collections.Generic.IEnumerator%601.Current%2A>.  
  
 <xref:System.Collections.Generic.IEnumerator%601.Current%2A> Devuelve el mismo objeto hasta que <xref:System.Collections.IEnumerator.MoveNext%2A> se vuelve a llamar como <xref:System.Collections.IEnumerator.MoveNext%2A> establece <xref:System.Collections.Generic.IEnumerator%601.Current%2A> hasta el siguiente elemento.  
  
 Si <xref:System.Collections.IEnumerator.MoveNext%2A> pasa el final de la colección, el enumerador se coloca después del último elemento de la colección y <xref:System.Collections.IEnumerator.MoveNext%2A> devuelve `false`. Cuando el enumerador está en esta posición, las llamadas subsiguientes a <xref:System.Collections.IEnumerator.MoveNext%2A> también devolver `false`. Si la última llamada a <xref:System.Collections.IEnumerator.MoveNext%2A> devuelve `false`, <xref:System.Collections.Generic.IEnumerator%601.Current%2A> es indefinido. No puede volver a establecer la propiedad <xref:System.Collections.Generic.IEnumerator%601.Current%2A> en el primer elemento de la colección, sino que debe crear una nueva instancia del enumerador.  

 Si se realizan cambios en la colección, como agregar, modificar o eliminar elementos, el comportamiento del enumerador es indefinido.  
  
 Un enumerador no tiene acceso exclusivo a la colección para que un enumerador es válido siempre y cuando se modifica la colección. Si se realizan cambios en la colección, como agregar, modificar o eliminar elementos, el enumerador queda invalidado y puede obtener resultados inesperados. Además, enumerar una colección no es un procedimiento seguro para subprocesos. Para garantizar la seguridad para subprocesos, debe bloquear la colección durante enumerador o implementar la sincronización en la colección.  
  
 Las implementaciones de colecciones en predeterminadas el <xref:System.Collections.Generic?displayProperty=nameWithType> espacio de nombres no están sincronizados.  
  
   
  
## Examples  
 En el ejemplo siguiente se muestra cómo implementar el <xref:System.Collections.Generic.IEnumerable%601> interfaz y utiliza esa implementación para crear una consulta LINQ. Cuando se implementa <xref:System.Collections.Generic.IEnumerable%601>, también debe implementar <xref:System.Collections.Generic.IEnumerator%601> o solo en C#, puede usar el [yield](~/docs/csharp/language-reference/keywords/yield.md) palabra clave. Implementar <xref:System.Collections.Generic.IEnumerator%601> también requiere <xref:System.IDisposable> van a implementar, que verá en este ejemplo.  
  
 [!code-csharp[System.Collections.Generic.IEnumerableEx#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.collections.generic.ienumerableex/cs/program.cs#1)]
 [!code-vb[System.Collections.Generic.IEnumerableEx#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.collections.generic.ienumerableex/vb/module1.vb#1)]  
  
 Para obtener otro ejemplo C# que muestra cómo implementar la <xref:System.Collections.Generic.IEnumerable%601> interfaz, vea el [ejemplo Generics](https://code.msdn.microsoft.com/Generics-Sample-C-9b41a192/sourcecode?fileId=46476&pathId=1364935593). Este ejemplo se usa de la `yield` palabra clave en lugar de implementar <xref:System.Collections.Generic.IEnumerator%601>.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Collections.Generic.IEnumerator`1" />
        <related type="Article" href="https://msdn.microsoft.com/library/c60d7589-51f2-4463-a2d5-22506bbc1554">Tutorial: Implementar IEnumerable(Of T) en Visual Basic</related>
        <related type="Article" href="https://msdn.microsoft.com/library/f45331db-d595-46ec-9142-551d3d1eb1a7">Iteradores (C# y Visual Basic)</related>
      </Docs>
    </Member>
  </Members>
</Type>