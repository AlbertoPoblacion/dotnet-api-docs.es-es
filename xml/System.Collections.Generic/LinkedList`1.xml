<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="LinkedList`1.xml" source-language="en-US" target-language="es-ES">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac5f4f915bbf25b5784d684d30fa9b51ea4c57557ac.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">f4f915bbf25b5784d684d30fa9b51ea4c57557ac</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-1.0,netcore-1.1,netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,netstandard-1.0,netstandard-1.1,netstandard-1.2,netstandard-1.3,netstandard-1.4,netstandard-1.6,netstandard-2.0,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.LinkedList`1">
          <source>Specifies the element type of the linked list.</source>
          <target state="translated">Especifica el tipo de elemento de la lista vinculada.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" uid="T:System.Collections.Generic.LinkedList`1">
          <source>Represents a doubly linked list.</source>
          <target state="translated">Representa una lista de doble vínculo.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.LinkedList`1">
          <source><ph id="ph1">&lt;xref:System.Collections.Generic.LinkedList%601&gt;</ph> is a general-purpose linked list.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.Generic.LinkedList%601&gt;</ph> es una lista vinculada de uso general.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.LinkedList`1">
          <source>It supports enumerators and implements the <ph id="ph1">&lt;xref:System.Collections.ICollection&gt;</ph> interface, consistent with other collection classes in the .NET Framework.</source>
          <target state="translated">Admite los enumeradores e implementa la <ph id="ph1">&lt;xref:System.Collections.ICollection&gt;</ph> interfaz, coherente con otras clases de colección de .NET Framework.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.LinkedList`1">
          <source><ph id="ph1">&lt;xref:System.Collections.Generic.LinkedList%601&gt;</ph> provides separate nodes of type <ph id="ph2">&lt;xref:System.Collections.Generic.LinkedListNode%601&gt;</ph>, so insertion and removal are O(1) operations.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.Generic.LinkedList%601&gt;</ph> proporciona nodos independientes de tipo <ph id="ph2">&lt;xref:System.Collections.Generic.LinkedListNode%601&gt;</ph>, por lo que la inserción y eliminación son operaciones o (1).</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.LinkedList`1">
          <source>You can remove nodes and reinsert them, either in the same list or in another list, which results in no additional objects allocated on the heap.</source>
          <target state="translated">Puede quitar nodos y volverlos a insertarlos en la misma lista o en otra lista, que da lugar a ningún objeto adicional que se asignan en el montón.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.LinkedList`1">
          <source>Because the list also maintains an internal count, getting the <ph id="ph1">&lt;xref:System.Collections.Generic.LinkedList%601.Count%2A&gt;</ph> property is an O(1) operation.</source>
          <target state="translated">Dado que la lista también mantiene un recuento interno, obtener el <ph id="ph1">&lt;xref:System.Collections.Generic.LinkedList%601.Count%2A&gt;</ph> propiedad es una operación o (1).</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.LinkedList`1">
          <source>Each node in a <ph id="ph1">&lt;xref:System.Collections.Generic.LinkedList%601&gt;</ph> object is of the type <ph id="ph2">&lt;xref:System.Collections.Generic.LinkedListNode%601&gt;</ph>.</source>
          <target state="translated">Cada nodo de un <ph id="ph1">&lt;xref:System.Collections.Generic.LinkedList%601&gt;</ph> objeto es del tipo <ph id="ph2">&lt;xref:System.Collections.Generic.LinkedListNode%601&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.LinkedList`1">
          <source>Because the <ph id="ph1">&lt;xref:System.Collections.Generic.LinkedList%601&gt;</ph> is doubly linked, each node points forward to the <ph id="ph2">&lt;xref:System.Collections.Generic.LinkedListNode%601.Next%2A&gt;</ph> node and backward to the <ph id="ph3">&lt;xref:System.Collections.Generic.LinkedListNode%601.Previous%2A&gt;</ph> node.</source>
          <target state="translated">Dado que la <ph id="ph1">&lt;xref:System.Collections.Generic.LinkedList%601&gt;</ph> está doblemente vinculada, cada nodo de destino al día el <ph id="ph2">&lt;xref:System.Collections.Generic.LinkedListNode%601.Next%2A&gt;</ph> nodo anteriores y posteriores a la <ph id="ph3">&lt;xref:System.Collections.Generic.LinkedListNode%601.Previous%2A&gt;</ph> nodo.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.LinkedList`1">
          <source>Lists that contain reference types perform better when a node and its value are created at the same time.</source>
          <target state="translated">Las listas que contienen tipos de referencia funcionan mejor cuando un nodo y su valor se crean al mismo tiempo.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.LinkedList`1">
          <source><ph id="ph1">&lt;xref:System.Collections.Generic.LinkedList%601&gt;</ph> accepts <ph id="ph2">`null`</ph> as a valid <ph id="ph3">&lt;xref:System.Collections.Generic.LinkedListNode%601.Value%2A&gt;</ph> property for reference types and allows duplicate values.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.Generic.LinkedList%601&gt;</ph> acepta <ph id="ph2">`null`</ph> como válido <ph id="ph3">&lt;xref:System.Collections.Generic.LinkedListNode%601.Value%2A&gt;</ph> tipos de propiedad de referencia y permite valores duplicados.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.LinkedList`1">
          <source>If the <ph id="ph1">&lt;xref:System.Collections.Generic.LinkedList%601&gt;</ph> is empty, the <ph id="ph2">&lt;xref:System.Collections.Generic.LinkedList%601.First%2A&gt;</ph> and <ph id="ph3">&lt;xref:System.Collections.Generic.LinkedList%601.Last%2A&gt;</ph> properties contain <ph id="ph4">`null`</ph>.</source>
          <target state="translated">Si el <ph id="ph1">&lt;xref:System.Collections.Generic.LinkedList%601&gt;</ph> está vacía, el <ph id="ph2">&lt;xref:System.Collections.Generic.LinkedList%601.First%2A&gt;</ph> y <ph id="ph3">&lt;xref:System.Collections.Generic.LinkedList%601.Last%2A&gt;</ph> contienen propiedades <ph id="ph4">`null`</ph>.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.LinkedList`1">
          <source>The <ph id="ph1">&lt;xref:System.Collections.Generic.LinkedList%601&gt;</ph> class does not support chaining, splitting, cycles, or other features that can leave the list in an inconsistent state.</source>
          <target state="translated">La <ph id="ph1">&lt;xref:System.Collections.Generic.LinkedList%601&gt;</ph> clase no admite el encadenamiento, división, ciclos u otras características que pueden dejar la lista en un estado incoherente.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.LinkedList`1">
          <source>The list remains consistent on a single thread.</source>
          <target state="translated">La lista sigue siendo coherente en un solo subproceso.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.LinkedList`1">
          <source>The only multithreaded scenario supported by <ph id="ph1">&lt;xref:System.Collections.Generic.LinkedList%601&gt;</ph> is multithreaded read operations.</source>
          <target state="translated">El único escenario multiproceso admitido <ph id="ph1">&lt;xref:System.Collections.Generic.LinkedList%601&gt;</ph> es multiproceso de las operaciones de lectura.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.LinkedList`1">
          <source>The following code example demonstrates many features of the <ph id="ph1">&lt;xref:System.Collections.Generic.LinkedList%601&gt;</ph> class.</source>
          <target state="translated">En el ejemplo de código siguiente se muestra muchas características de la <ph id="ph1">&lt;xref:System.Collections.Generic.LinkedList%601&gt;</ph> clase.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.LinkedList`1">
          <source>This type is not thread safe.</source>
          <target state="translated">Este tipo no es seguro para subprocesos.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.LinkedList`1">
          <source>If the <ph id="ph1">&lt;see cref="T:System.Collections.Generic.LinkedList`1" /&gt;</ph> needs to be accessed by multiple threads, you will need to implement their own synchronization mechanism.</source>
          <target state="translated">Si el <ph id="ph1">&lt;see cref="T:System.Collections.Generic.LinkedList`1" /&gt;</ph> debe tener acceso a varios subprocesos, debe implementar su propio mecanismo de sincronización.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.LinkedList`1">
          <source>A <ph id="ph1">&lt;see cref="T:System.Collections.Generic.LinkedList`1" /&gt;</ph> can support multiple readers concurrently, as long as the collection is not modified.</source>
          <target state="translated">Un <ph id="ph1">&lt;see cref="T:System.Collections.Generic.LinkedList`1" /&gt;</ph> puede admitir varios sistemas de lectura al mismo tiempo, siempre y cuando no se modifica la colección.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.LinkedList`1">
          <source>Even so, enumerating through a collection is intrinsically not a thread-safe procedure.</source>
          <target state="translated">Aun así, enumerar una colección no es intrínsecamente un procedimiento seguro para subprocesos.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.LinkedList`1">
          <source>In the rare case where an enumeration contends with write accesses, the collection must be locked during the entire enumeration.</source>
          <target state="translated">En el caso poco frecuente que una enumeración sostiene con accesos de escritura, se debe bloquear la colección durante toda la enumeración.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.LinkedList`1">
          <source>To allow the collection to be accessed by multiple threads for reading and writing, you must implement your own synchronization.</source>
          <target state="translated">Para permitir que varios subprocesos obtengan acceso de lectura y escritura a la colección, debe implementar su propia sincronización.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" uid="T:System.Collections.Generic.LinkedList`1">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Collections.Generic.LinkedList`1" /&gt;</ph> class.</source>
          <target state="translated">Inicializa una nueva instancia de la clase <ph id="ph1">&lt;see cref="T:System.Collections.Generic.LinkedList`1" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.LinkedList`1.#ctor">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Collections.Generic.LinkedList`1" /&gt;</ph> class that is empty.</source>
          <target state="translated">Inicializa una nueva instancia de la clase <ph id="ph1">&lt;see cref="T:System.Collections.Generic.LinkedList`1" /&gt;</ph> que está vacía.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.LinkedList`1.#ctor">
          <source><ph id="ph1">&lt;xref:System.Collections.Generic.LinkedList%601&gt;</ph> accepts <ph id="ph2">`null`</ph> as a valid <ph id="ph3">&lt;xref:System.Collections.Generic.LinkedListNode%601.Value%2A&gt;</ph> for reference types and allows duplicate values.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.Generic.LinkedList%601&gt;</ph> acepta <ph id="ph2">`null`</ph> como válido <ph id="ph3">&lt;xref:System.Collections.Generic.LinkedListNode%601.Value%2A&gt;</ph> para tipos de referencia y permite valores duplicados.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.LinkedList`1.#ctor">
          <source>If the <ph id="ph1">&lt;xref:System.Collections.Generic.LinkedList%601&gt;</ph> is empty, the <ph id="ph2">&lt;xref:System.Collections.Generic.LinkedList%601.First%2A&gt;</ph> and <ph id="ph3">&lt;xref:System.Collections.Generic.LinkedList%601.Last%2A&gt;</ph> properties contain <ph id="ph4">`null`</ph>.</source>
          <target state="translated">Si el <ph id="ph1">&lt;xref:System.Collections.Generic.LinkedList%601&gt;</ph> está vacía, el <ph id="ph2">&lt;xref:System.Collections.Generic.LinkedList%601.First%2A&gt;</ph> y <ph id="ph3">&lt;xref:System.Collections.Generic.LinkedList%601.Last%2A&gt;</ph> contienen propiedades <ph id="ph4">`null`</ph>.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.LinkedList`1.#ctor">
          <source>This constructor is an O(1) operation.</source>
          <target state="translated">Este constructor es una operación o (1).</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.LinkedList`1.#ctor">
          <source>The following code example creates and initializes a <ph id="ph1">&lt;xref:System.Collections.Generic.LinkedList%601&gt;</ph> of type <ph id="ph2">&lt;xref:System.String&gt;</ph>, adds several nodes, and then displays its contents.</source>
          <target state="translated">En el ejemplo de código siguiente se crea e inicializa un <ph id="ph1">&lt;xref:System.Collections.Generic.LinkedList%601&gt;</ph> de tipo <ph id="ph2">&lt;xref:System.String&gt;</ph>, agrega varios nodos y, a continuación, muestra su contenido.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.LinkedList`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
          <source>The <ph id="ph1">&lt;see cref="T:System.Collections.IEnumerable" /&gt;</ph> whose elements are copied to the new <ph id="ph2">&lt;see cref="T:System.Collections.Generic.LinkedList`1" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Collections.IEnumerable" /&gt;</ph> cuyos elementos se copian en el nuevo <ph id="ph2">&lt;see cref="T:System.Collections.Generic.LinkedList`1" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.LinkedList`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Collections.Generic.LinkedList`1" /&gt;</ph> class that contains elements copied from the specified <ph id="ph2">&lt;see cref="T:System.Collections.IEnumerable" /&gt;</ph> and has sufficient capacity to accommodate the number of elements copied.</source>
          <target state="translated">Inicializa una nueva instancia de la clase <ph id="ph1">&lt;see cref="T:System.Collections.Generic.LinkedList`1" /&gt;</ph> que contiene elementos copiados de la interfaz <ph id="ph2">&lt;see cref="T:System.Collections.IEnumerable" /&gt;</ph> especificada y tiene una capacidad suficiente para alojar el número de elementos copiados.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.LinkedList`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
          <source><ph id="ph1">&lt;xref:System.Collections.Generic.LinkedList%601&gt;</ph> accepts <ph id="ph2">`null`</ph> as a valid <ph id="ph3">&lt;xref:System.Collections.Generic.LinkedListNode%601.Value%2A&gt;</ph> for reference types and allows duplicate values.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.Generic.LinkedList%601&gt;</ph> acepta <ph id="ph2">`null`</ph> como válido <ph id="ph3">&lt;xref:System.Collections.Generic.LinkedListNode%601.Value%2A&gt;</ph> para tipos de referencia y permite valores duplicados.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.LinkedList`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
          <source>If <ph id="ph1">`collection`</ph> has no elements then the new <ph id="ph2">&lt;xref:System.Collections.Generic.LinkedList%601&gt;</ph> is empty, and the <ph id="ph3">&lt;xref:System.Collections.Generic.LinkedList%601.First%2A&gt;</ph> and <ph id="ph4">&lt;xref:System.Collections.Generic.LinkedList%601.Last%2A&gt;</ph> properties contain <ph id="ph5">`null`</ph>.</source>
          <target state="translated">Si <ph id="ph1">`collection`</ph> tiene ningún elemento, a continuación, la nueva <ph id="ph2">&lt;xref:System.Collections.Generic.LinkedList%601&gt;</ph> está vacía y el <ph id="ph3">&lt;xref:System.Collections.Generic.LinkedList%601.First%2A&gt;</ph> y <ph id="ph4">&lt;xref:System.Collections.Generic.LinkedList%601.Last%2A&gt;</ph> contienen propiedades <ph id="ph5">`null`</ph>.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.LinkedList`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
          <source>This constructor is an O(n) operation, where <ph id="ph1">`n`</ph> is the number of elements in <ph id="ph2">`collection`</ph>.</source>
          <target state="translated">Este constructor es una operación o (n), donde <ph id="ph1">`n`</ph> es el número de elementos de <ph id="ph2">`collection`</ph>.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.LinkedList`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
          <source>For an example that includes this constructor, see the <ph id="ph1">&lt;xref:System.Collections.Generic.LinkedList%601&gt;</ph> class.</source>
          <target state="translated">Para obtener un ejemplo que incluye este constructor, vea el <ph id="ph1">&lt;xref:System.Collections.Generic.LinkedList%601&gt;</ph> clase.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.LinkedList`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
          <source><ph id="ph1">&lt;paramref name="collection" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="collection" /&gt;</ph> es <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.LinkedList`1.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Runtime.Serialization.SerializationInfo" /&gt;</ph> object containing the information required to serialize the <ph id="ph2">&lt;see cref="T:System.Collections.Generic.LinkedList`1" /&gt;</ph>.</source>
          <target state="translated">Objeto <ph id="ph1">&lt;see cref="T:System.Runtime.Serialization.SerializationInfo" /&gt;</ph> que contiene la información necesaria para serializar el <ph id="ph2">&lt;see cref="T:System.Collections.Generic.LinkedList`1" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.LinkedList`1.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Runtime.Serialization.StreamingContext" /&gt;</ph> object containing the source and destination of the serialized stream associated with the <ph id="ph2">&lt;see cref="T:System.Collections.Generic.LinkedList`1" /&gt;</ph>.</source>
          <target state="translated">Objeto <ph id="ph1">&lt;see cref="T:System.Runtime.Serialization.StreamingContext" /&gt;</ph> que contiene el origen y el destino de la secuencia serializada asociada al <ph id="ph2">&lt;see cref="T:System.Collections.Generic.LinkedList`1" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.LinkedList`1.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Collections.Generic.LinkedList`1" /&gt;</ph> class that is serializable with the specified <ph id="ph2">&lt;see cref="T:System.Runtime.Serialization.SerializationInfo" /&gt;</ph> and <ph id="ph3">&lt;see cref="T:System.Runtime.Serialization.StreamingContext" /&gt;</ph>.</source>
          <target state="translated">Inicializa una nueva instancia de la clase <ph id="ph1">&lt;see cref="T:System.Collections.Generic.LinkedList`1" /&gt;</ph>, que se puede serializar con los objetos <ph id="ph2">&lt;see cref="T:System.Runtime.Serialization.SerializationInfo" /&gt;</ph> y <ph id="ph3">&lt;see cref="T:System.Runtime.Serialization.StreamingContext" /&gt;</ph> especificados.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.LinkedList`1.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
          <source><ph id="ph1">&lt;xref:System.Collections.Generic.LinkedList%601&gt;</ph> accepts <ph id="ph2">`null`</ph> as a valid <ph id="ph3">&lt;xref:System.Collections.Generic.LinkedListNode%601.Value%2A&gt;</ph> for reference types and allows duplicate values.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.Generic.LinkedList%601&gt;</ph> acepta <ph id="ph2">`null`</ph> como válido <ph id="ph3">&lt;xref:System.Collections.Generic.LinkedListNode%601.Value%2A&gt;</ph> para tipos de referencia y permite valores duplicados.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.LinkedList`1.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
          <source>If the <ph id="ph1">&lt;xref:System.Collections.Generic.LinkedList%601&gt;</ph> is empty, the <ph id="ph2">&lt;xref:System.Collections.Generic.LinkedList%601.First%2A&gt;</ph> and <ph id="ph3">&lt;xref:System.Collections.Generic.LinkedList%601.Last%2A&gt;</ph> properties contain <ph id="ph4">`null`</ph>.</source>
          <target state="translated">Si el <ph id="ph1">&lt;xref:System.Collections.Generic.LinkedList%601&gt;</ph> está vacía, el <ph id="ph2">&lt;xref:System.Collections.Generic.LinkedList%601.First%2A&gt;</ph> y <ph id="ph3">&lt;xref:System.Collections.Generic.LinkedList%601.Last%2A&gt;</ph> contienen propiedades <ph id="ph4">`null`</ph>.</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.LinkedList`1.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
          <source>This constructor is an O(n) operation.</source>
          <target state="translated">Este constructor es una operación o (n).</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" uid="T:System.Collections.Generic.LinkedList`1">
          <source>Adds a new node or value after an existing node in the <ph id="ph1">&lt;see cref="T:System.Collections.Generic.LinkedList`1" /&gt;</ph>.</source>
          <target state="translated">Agrega un nuevo nodo o valor detrás de un nodo existente en la colección <ph id="ph1">&lt;see cref="T:System.Collections.Generic.LinkedList`1" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.LinkedList`1.AddAfter(System.Collections.Generic.LinkedListNode{`0},System.Collections.Generic.LinkedListNode{`0})">
          <source>The <ph id="ph1">&lt;see cref="T:System.Collections.Generic.LinkedListNode`1" /&gt;</ph> after which to insert <bpt id="p1">&lt;c&gt;</bpt>newNode<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Collections.Generic.LinkedListNode`1" /&gt;</ph> después del cual se va a insertar <bpt id="p1">&lt;c&gt;</bpt>newNode<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.LinkedList`1.AddAfter(System.Collections.Generic.LinkedListNode{`0},System.Collections.Generic.LinkedListNode{`0})">
          <source>The new <ph id="ph1">&lt;see cref="T:System.Collections.Generic.LinkedListNode`1" /&gt;</ph> to add to the <ph id="ph2">&lt;see cref="T:System.Collections.Generic.LinkedList`1" /&gt;</ph>.</source>
          <target state="translated">Nuevo objeto <ph id="ph1">&lt;see cref="T:System.Collections.Generic.LinkedListNode`1" /&gt;</ph> que se va a agregar a la colección <ph id="ph2">&lt;see cref="T:System.Collections.Generic.LinkedList`1" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.LinkedList`1.AddAfter(System.Collections.Generic.LinkedListNode{`0},System.Collections.Generic.LinkedListNode{`0})">
          <source>Adds the specified new node after the specified existing node in the <ph id="ph1">&lt;see cref="T:System.Collections.Generic.LinkedList`1" /&gt;</ph>.</source>
          <target state="translated">Agrega el nuevo nodo especificado después del nodo existente que se haya concretado en la colección <ph id="ph1">&lt;see cref="T:System.Collections.Generic.LinkedList`1" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.LinkedList`1.AddAfter(System.Collections.Generic.LinkedListNode{`0},System.Collections.Generic.LinkedListNode{`0})">
          <source><ph id="ph1">&lt;xref:System.Collections.Generic.LinkedList%601&gt;</ph> accepts <ph id="ph2">`null`</ph> as a valid <ph id="ph3">&lt;xref:System.Collections.Generic.LinkedListNode%601.Value%2A&gt;</ph> for reference types and allows duplicate values.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.Generic.LinkedList%601&gt;</ph> acepta <ph id="ph2">`null`</ph> como válido <ph id="ph3">&lt;xref:System.Collections.Generic.LinkedListNode%601.Value%2A&gt;</ph> para tipos de referencia y permite valores duplicados.</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.LinkedList`1.AddAfter(System.Collections.Generic.LinkedListNode{`0},System.Collections.Generic.LinkedListNode{`0})">
          <source>This method is an O(1) operation.</source>
          <target state="translated">Este método es una operación o (1).</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.LinkedList`1.AddAfter(System.Collections.Generic.LinkedListNode{`0},System.Collections.Generic.LinkedListNode{`0})">
          <source>For an example that includes this method, see the <ph id="ph1">&lt;xref:System.Collections.Generic.LinkedList%601&gt;</ph> class.</source>
          <target state="translated">Para obtener un ejemplo que incluye este método, consulte la <ph id="ph1">&lt;xref:System.Collections.Generic.LinkedList%601&gt;</ph> clase.</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.LinkedList`1.AddAfter(System.Collections.Generic.LinkedListNode{`0},System.Collections.Generic.LinkedListNode{`0})">
          <source><ph id="ph1">&lt;paramref name="node" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="node" /&gt;</ph> es <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.LinkedList`1.AddAfter(System.Collections.Generic.LinkedListNode{`0},System.Collections.Generic.LinkedListNode{`0})">
          <source>-or-</source>
          <target state="translated">O bien</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.LinkedList`1.AddAfter(System.Collections.Generic.LinkedListNode{`0},System.Collections.Generic.LinkedListNode{`0})">
          <source><ph id="ph1">&lt;paramref name="newNode" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="newNode" /&gt;</ph> es <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.LinkedList`1.AddAfter(System.Collections.Generic.LinkedListNode{`0},System.Collections.Generic.LinkedListNode{`0})">
          <source><ph id="ph1">&lt;paramref name="node" /&gt;</ph> is not in the current <ph id="ph2">&lt;see cref="T:System.Collections.Generic.LinkedList`1" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="node" /&gt;</ph> no está en la colección <ph id="ph2">&lt;see cref="T:System.Collections.Generic.LinkedList`1" /&gt;</ph> actual.</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.LinkedList`1.AddAfter(System.Collections.Generic.LinkedListNode{`0},System.Collections.Generic.LinkedListNode{`0})">
          <source>-or-</source>
          <target state="translated">O bien</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.LinkedList`1.AddAfter(System.Collections.Generic.LinkedListNode{`0},System.Collections.Generic.LinkedListNode{`0})">
          <source><ph id="ph1">&lt;paramref name="newNode" /&gt;</ph> belongs to another <ph id="ph2">&lt;see cref="T:System.Collections.Generic.LinkedList`1" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="newNode" /&gt;</ph> pertenece a otra colección <ph id="ph2">&lt;see cref="T:System.Collections.Generic.LinkedList`1" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.LinkedList`1.AddAfter(System.Collections.Generic.LinkedListNode{`0},`0)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Collections.Generic.LinkedListNode`1" /&gt;</ph> after which to insert a new <ph id="ph2">&lt;see cref="T:System.Collections.Generic.LinkedListNode`1" /&gt;</ph> containing <bpt id="p1">&lt;c&gt;</bpt>value<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Collections.Generic.LinkedListNode`1" /&gt;</ph> después del cual se va a insertar un nuevo elemento <ph id="ph2">&lt;see cref="T:System.Collections.Generic.LinkedListNode`1" /&gt;</ph> que contiene <bpt id="p1">&lt;c&gt;</bpt>value<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.LinkedList`1.AddAfter(System.Collections.Generic.LinkedListNode{`0},`0)">
          <source>The value to add to the <ph id="ph1">&lt;see cref="T:System.Collections.Generic.LinkedList`1" /&gt;</ph>.</source>
          <target state="translated">Valor que se va a agregar a la colección <ph id="ph1">&lt;see cref="T:System.Collections.Generic.LinkedList`1" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.LinkedList`1.AddAfter(System.Collections.Generic.LinkedListNode{`0},`0)">
          <source>Adds a new node containing the specified value after the specified existing node in the <ph id="ph1">&lt;see cref="T:System.Collections.Generic.LinkedList`1" /&gt;</ph>.</source>
          <target state="translated">Agrega un nuevo nodo que contiene el valor especificado después del nodo existente que se haya concretado en la colección <ph id="ph1">&lt;see cref="T:System.Collections.Generic.LinkedList`1" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.LinkedList`1.AddAfter(System.Collections.Generic.LinkedListNode{`0},`0)">
          <source>The new <ph id="ph1">&lt;see cref="T:System.Collections.Generic.LinkedListNode`1" /&gt;</ph> containing <ph id="ph2">&lt;paramref name="value" /&gt;</ph>.</source>
          <target state="translated">Nuevo objeto <ph id="ph1">&lt;see cref="T:System.Collections.Generic.LinkedListNode`1" /&gt;</ph> que contiene <ph id="ph2">&lt;paramref name="value" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.LinkedList`1.AddAfter(System.Collections.Generic.LinkedListNode{`0},`0)">
          <source><ph id="ph1">&lt;xref:System.Collections.Generic.LinkedList%601&gt;</ph> accepts <ph id="ph2">`null`</ph> as a valid <ph id="ph3">&lt;xref:System.Collections.Generic.LinkedListNode%601.Value%2A&gt;</ph> for reference types and allows duplicate values.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.Generic.LinkedList%601&gt;</ph> acepta <ph id="ph2">`null`</ph> como válido <ph id="ph3">&lt;xref:System.Collections.Generic.LinkedListNode%601.Value%2A&gt;</ph> para tipos de referencia y permite valores duplicados.</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.LinkedList`1.AddAfter(System.Collections.Generic.LinkedListNode{`0},`0)">
          <source>This method is an O(1) operation.</source>
          <target state="translated">Este método es una operación o (1).</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.LinkedList`1.AddAfter(System.Collections.Generic.LinkedListNode{`0},`0)">
          <source>For an example that includes this method, see the <ph id="ph1">&lt;xref:System.Collections.Generic.LinkedList%601&gt;</ph> class.</source>
          <target state="translated">Para obtener un ejemplo que incluye este método, consulte la <ph id="ph1">&lt;xref:System.Collections.Generic.LinkedList%601&gt;</ph> clase.</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.LinkedList`1.AddAfter(System.Collections.Generic.LinkedListNode{`0},`0)">
          <source><ph id="ph1">&lt;paramref name="node" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="node" /&gt;</ph> es <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.LinkedList`1.AddAfter(System.Collections.Generic.LinkedListNode{`0},`0)">
          <source><ph id="ph1">&lt;paramref name="node" /&gt;</ph> is not in the current <ph id="ph2">&lt;see cref="T:System.Collections.Generic.LinkedList`1" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="node" /&gt;</ph> no está en la colección <ph id="ph2">&lt;see cref="T:System.Collections.Generic.LinkedList`1" /&gt;</ph> actual.</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" uid="T:System.Collections.Generic.LinkedList`1">
          <source>Adds a new node or value before an existing node in the <ph id="ph1">&lt;see cref="T:System.Collections.Generic.LinkedList`1" /&gt;</ph>.</source>
          <target state="translated">Agrega un nuevo nodo o valor antes de un nodo existente en la colección <ph id="ph1">&lt;see cref="T:System.Collections.Generic.LinkedList`1" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.LinkedList`1.AddBefore(System.Collections.Generic.LinkedListNode{`0},System.Collections.Generic.LinkedListNode{`0})">
          <source>The <ph id="ph1">&lt;see cref="T:System.Collections.Generic.LinkedListNode`1" /&gt;</ph> before which to insert <bpt id="p1">&lt;c&gt;</bpt>newNode<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Collections.Generic.LinkedListNode`1" /&gt;</ph> antes del cual se va a insertar <bpt id="p1">&lt;c&gt;</bpt>newNode<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.LinkedList`1.AddBefore(System.Collections.Generic.LinkedListNode{`0},System.Collections.Generic.LinkedListNode{`0})">
          <source>The new <ph id="ph1">&lt;see cref="T:System.Collections.Generic.LinkedListNode`1" /&gt;</ph> to add to the <ph id="ph2">&lt;see cref="T:System.Collections.Generic.LinkedList`1" /&gt;</ph>.</source>
          <target state="translated">Nuevo objeto <ph id="ph1">&lt;see cref="T:System.Collections.Generic.LinkedListNode`1" /&gt;</ph> que se va a agregar a la colección <ph id="ph2">&lt;see cref="T:System.Collections.Generic.LinkedList`1" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.LinkedList`1.AddBefore(System.Collections.Generic.LinkedListNode{`0},System.Collections.Generic.LinkedListNode{`0})">
          <source>Adds the specified new node before the specified existing node in the <ph id="ph1">&lt;see cref="T:System.Collections.Generic.LinkedList`1" /&gt;</ph>.</source>
          <target state="translated">Agrega el nuevo nodo especificado antes del nodo existente que se haya concretado en la colección <ph id="ph1">&lt;see cref="T:System.Collections.Generic.LinkedList`1" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.LinkedList`1.AddBefore(System.Collections.Generic.LinkedListNode{`0},System.Collections.Generic.LinkedListNode{`0})">
          <source><ph id="ph1">&lt;xref:System.Collections.Generic.LinkedList%601&gt;</ph> accepts <ph id="ph2">`null`</ph> as a valid <ph id="ph3">&lt;xref:System.Collections.Generic.LinkedListNode%601.Value%2A&gt;</ph> for reference types and allows duplicate values.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.Generic.LinkedList%601&gt;</ph> acepta <ph id="ph2">`null`</ph> como válido <ph id="ph3">&lt;xref:System.Collections.Generic.LinkedListNode%601.Value%2A&gt;</ph> para tipos de referencia y permite valores duplicados.</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.LinkedList`1.AddBefore(System.Collections.Generic.LinkedListNode{`0},System.Collections.Generic.LinkedListNode{`0})">
          <source>This method is an O(1) operation.</source>
          <target state="translated">Este método es una operación o (1).</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.LinkedList`1.AddBefore(System.Collections.Generic.LinkedListNode{`0},System.Collections.Generic.LinkedListNode{`0})">
          <source>For an example that includes this method, see the <ph id="ph1">&lt;xref:System.Collections.Generic.LinkedList%601&gt;</ph> class.</source>
          <target state="translated">Para obtener un ejemplo que incluye este método, consulte la <ph id="ph1">&lt;xref:System.Collections.Generic.LinkedList%601&gt;</ph> clase.</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.LinkedList`1.AddBefore(System.Collections.Generic.LinkedListNode{`0},System.Collections.Generic.LinkedListNode{`0})">
          <source><ph id="ph1">&lt;paramref name="node" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="node" /&gt;</ph> es <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.LinkedList`1.AddBefore(System.Collections.Generic.LinkedListNode{`0},System.Collections.Generic.LinkedListNode{`0})">
          <source>-or-</source>
          <target state="translated">O bien</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.LinkedList`1.AddBefore(System.Collections.Generic.LinkedListNode{`0},System.Collections.Generic.LinkedListNode{`0})">
          <source><ph id="ph1">&lt;paramref name="newNode" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="newNode" /&gt;</ph> es <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.LinkedList`1.AddBefore(System.Collections.Generic.LinkedListNode{`0},System.Collections.Generic.LinkedListNode{`0})">
          <source><ph id="ph1">&lt;paramref name="node" /&gt;</ph> is not in the current <ph id="ph2">&lt;see cref="T:System.Collections.Generic.LinkedList`1" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="node" /&gt;</ph> no está en la colección <ph id="ph2">&lt;see cref="T:System.Collections.Generic.LinkedList`1" /&gt;</ph> actual.</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.LinkedList`1.AddBefore(System.Collections.Generic.LinkedListNode{`0},System.Collections.Generic.LinkedListNode{`0})">
          <source>-or-</source>
          <target state="translated">O bien</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.LinkedList`1.AddBefore(System.Collections.Generic.LinkedListNode{`0},System.Collections.Generic.LinkedListNode{`0})">
          <source><ph id="ph1">&lt;paramref name="newNode" /&gt;</ph> belongs to another <ph id="ph2">&lt;see cref="T:System.Collections.Generic.LinkedList`1" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="newNode" /&gt;</ph> pertenece a otra colección <ph id="ph2">&lt;see cref="T:System.Collections.Generic.LinkedList`1" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.LinkedList`1.AddBefore(System.Collections.Generic.LinkedListNode{`0},`0)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Collections.Generic.LinkedListNode`1" /&gt;</ph> before which to insert a new <ph id="ph2">&lt;see cref="T:System.Collections.Generic.LinkedListNode`1" /&gt;</ph> containing <bpt id="p1">&lt;c&gt;</bpt>value<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Collections.Generic.LinkedListNode`1" /&gt;</ph> antes del cual se va a insertar un nuevo elemento <ph id="ph2">&lt;see cref="T:System.Collections.Generic.LinkedListNode`1" /&gt;</ph> que contiene <bpt id="p1">&lt;c&gt;</bpt>value<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.LinkedList`1.AddBefore(System.Collections.Generic.LinkedListNode{`0},`0)">
          <source>The value to add to the <ph id="ph1">&lt;see cref="T:System.Collections.Generic.LinkedList`1" /&gt;</ph>.</source>
          <target state="translated">Valor que se va a agregar a la colección <ph id="ph1">&lt;see cref="T:System.Collections.Generic.LinkedList`1" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.LinkedList`1.AddBefore(System.Collections.Generic.LinkedListNode{`0},`0)">
          <source>Adds a new node containing the specified value before the specified existing node in the <ph id="ph1">&lt;see cref="T:System.Collections.Generic.LinkedList`1" /&gt;</ph>.</source>
          <target state="translated">Agrega un nuevo nodo que contiene el valor especificado antes del nodo existente que se haya concretado en la colección <ph id="ph1">&lt;see cref="T:System.Collections.Generic.LinkedList`1" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.LinkedList`1.AddBefore(System.Collections.Generic.LinkedListNode{`0},`0)">
          <source>The new <ph id="ph1">&lt;see cref="T:System.Collections.Generic.LinkedListNode`1" /&gt;</ph> containing <ph id="ph2">&lt;paramref name="value" /&gt;</ph>.</source>
          <target state="translated">Nuevo objeto <ph id="ph1">&lt;see cref="T:System.Collections.Generic.LinkedListNode`1" /&gt;</ph> que contiene <ph id="ph2">&lt;paramref name="value" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.LinkedList`1.AddBefore(System.Collections.Generic.LinkedListNode{`0},`0)">
          <source><ph id="ph1">&lt;xref:System.Collections.Generic.LinkedList%601&gt;</ph> accepts <ph id="ph2">`null`</ph> as a valid <ph id="ph3">&lt;xref:System.Collections.Generic.LinkedListNode%601.Value%2A&gt;</ph> for reference types and allows duplicate values.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.Generic.LinkedList%601&gt;</ph> acepta <ph id="ph2">`null`</ph> como válido <ph id="ph3">&lt;xref:System.Collections.Generic.LinkedListNode%601.Value%2A&gt;</ph> para tipos de referencia y permite valores duplicados.</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.LinkedList`1.AddBefore(System.Collections.Generic.LinkedListNode{`0},`0)">
          <source>This method is an O(1) operation.</source>
          <target state="translated">Este método es una operación o (1).</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.LinkedList`1.AddBefore(System.Collections.Generic.LinkedListNode{`0},`0)">
          <source>For an example that includes this method, see the <ph id="ph1">&lt;xref:System.Collections.Generic.LinkedList%601&gt;</ph> class.</source>
          <target state="translated">Para obtener un ejemplo que incluye este método, consulte la <ph id="ph1">&lt;xref:System.Collections.Generic.LinkedList%601&gt;</ph> clase.</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.LinkedList`1.AddBefore(System.Collections.Generic.LinkedListNode{`0},`0)">
          <source><ph id="ph1">&lt;paramref name="node" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="node" /&gt;</ph> es <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.LinkedList`1.AddBefore(System.Collections.Generic.LinkedListNode{`0},`0)">
          <source><ph id="ph1">&lt;paramref name="node" /&gt;</ph> is not in the current <ph id="ph2">&lt;see cref="T:System.Collections.Generic.LinkedList`1" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="node" /&gt;</ph> no está en la colección <ph id="ph2">&lt;see cref="T:System.Collections.Generic.LinkedList`1" /&gt;</ph> actual.</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve" uid="T:System.Collections.Generic.LinkedList`1">
          <source>Adds a new node or value at the start of the <ph id="ph1">&lt;see cref="T:System.Collections.Generic.LinkedList`1" /&gt;</ph>.</source>
          <target state="translated">Agrega un nuevo nodo o valor al principio de la colección <ph id="ph1">&lt;see cref="T:System.Collections.Generic.LinkedList`1" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.LinkedList`1.AddFirst(System.Collections.Generic.LinkedListNode{`0})">
          <source>The new <ph id="ph1">&lt;see cref="T:System.Collections.Generic.LinkedListNode`1" /&gt;</ph> to add at the start of the <ph id="ph2">&lt;see cref="T:System.Collections.Generic.LinkedList`1" /&gt;</ph>.</source>
          <target state="translated">Nuevo <ph id="ph1">&lt;see cref="T:System.Collections.Generic.LinkedListNode`1" /&gt;</ph> que se va a agregar al principio de la colección <ph id="ph2">&lt;see cref="T:System.Collections.Generic.LinkedList`1" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.LinkedList`1.AddFirst(System.Collections.Generic.LinkedListNode{`0})">
          <source>Adds the specified new node at the start of the <ph id="ph1">&lt;see cref="T:System.Collections.Generic.LinkedList`1" /&gt;</ph>.</source>
          <target state="translated">Agrega el nuevo nodo especificado al principio de la colección <ph id="ph1">&lt;see cref="T:System.Collections.Generic.LinkedList`1" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.LinkedList`1.AddFirst(System.Collections.Generic.LinkedListNode{`0})">
          <source><ph id="ph1">&lt;xref:System.Collections.Generic.LinkedList%601&gt;</ph> accepts <ph id="ph2">`null`</ph> as a valid <ph id="ph3">&lt;xref:System.Collections.Generic.LinkedListNode%601.Value%2A&gt;</ph> for reference types and allows duplicate values.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.Generic.LinkedList%601&gt;</ph> acepta <ph id="ph2">`null`</ph> como válido <ph id="ph3">&lt;xref:System.Collections.Generic.LinkedListNode%601.Value%2A&gt;</ph> para tipos de referencia y permite valores duplicados.</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.LinkedList`1.AddFirst(System.Collections.Generic.LinkedListNode{`0})">
          <source>If the <ph id="ph1">&lt;xref:System.Collections.Generic.LinkedList%601&gt;</ph> is empty, the new node becomes the <ph id="ph2">&lt;xref:System.Collections.Generic.LinkedList%601.First%2A&gt;</ph> and the <ph id="ph3">&lt;xref:System.Collections.Generic.LinkedList%601.Last%2A&gt;</ph>.</source>
          <target state="translated">Si el <ph id="ph1">&lt;xref:System.Collections.Generic.LinkedList%601&gt;</ph> está vacía, el nuevo nodo deja de estar la <ph id="ph2">&lt;xref:System.Collections.Generic.LinkedList%601.First%2A&gt;</ph> y <ph id="ph3">&lt;xref:System.Collections.Generic.LinkedList%601.Last%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.LinkedList`1.AddFirst(System.Collections.Generic.LinkedListNode{`0})">
          <source>This method is an O(1) operation.</source>
          <target state="translated">Este método es una operación o (1).</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.LinkedList`1.AddFirst(System.Collections.Generic.LinkedListNode{`0})">
          <source>For an example that includes this method, see the <ph id="ph1">&lt;xref:System.Collections.Generic.LinkedList%601&gt;</ph> class.</source>
          <target state="translated">Para obtener un ejemplo que incluye este método, consulte la <ph id="ph1">&lt;xref:System.Collections.Generic.LinkedList%601&gt;</ph> clase.</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.LinkedList`1.AddFirst(System.Collections.Generic.LinkedListNode{`0})">
          <source><ph id="ph1">&lt;paramref name="node" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="node" /&gt;</ph> es <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.LinkedList`1.AddFirst(System.Collections.Generic.LinkedListNode{`0})">
          <source><ph id="ph1">&lt;paramref name="node" /&gt;</ph> belongs to another <ph id="ph2">&lt;see cref="T:System.Collections.Generic.LinkedList`1" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="node" /&gt;</ph> pertenece a otra colección <ph id="ph2">&lt;see cref="T:System.Collections.Generic.LinkedList`1" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.LinkedList`1.AddFirst(`0)">
          <source>The value to add at the start of the <ph id="ph1">&lt;see cref="T:System.Collections.Generic.LinkedList`1" /&gt;</ph>.</source>
          <target state="translated">Valor que se va a agregar al principio de la colección <ph id="ph1">&lt;see cref="T:System.Collections.Generic.LinkedList`1" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.LinkedList`1.AddFirst(`0)">
          <source>Adds a new node containing the specified value at the start of the <ph id="ph1">&lt;see cref="T:System.Collections.Generic.LinkedList`1" /&gt;</ph>.</source>
          <target state="translated">Agrega un nuevo nodo que contiene el valor especificado al principio de la colección <ph id="ph1">&lt;see cref="T:System.Collections.Generic.LinkedList`1" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.LinkedList`1.AddFirst(`0)">
          <source>The new <ph id="ph1">&lt;see cref="T:System.Collections.Generic.LinkedListNode`1" /&gt;</ph> containing <ph id="ph2">&lt;paramref name="value" /&gt;</ph>.</source>
          <target state="translated">Nuevo objeto <ph id="ph1">&lt;see cref="T:System.Collections.Generic.LinkedListNode`1" /&gt;</ph> que contiene <ph id="ph2">&lt;paramref name="value" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.LinkedList`1.AddFirst(`0)">
          <source><ph id="ph1">&lt;xref:System.Collections.Generic.LinkedList%601&gt;</ph> accepts <ph id="ph2">`null`</ph> as a valid <ph id="ph3">&lt;xref:System.Collections.Generic.LinkedListNode%601.Value%2A&gt;</ph> for reference types and allows duplicate values.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.Generic.LinkedList%601&gt;</ph> acepta <ph id="ph2">`null`</ph> como válido <ph id="ph3">&lt;xref:System.Collections.Generic.LinkedListNode%601.Value%2A&gt;</ph> para tipos de referencia y permite valores duplicados.</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.LinkedList`1.AddFirst(`0)">
          <source>If the <ph id="ph1">&lt;xref:System.Collections.Generic.LinkedList%601&gt;</ph> is empty, the new node becomes the <ph id="ph2">&lt;xref:System.Collections.Generic.LinkedList%601.First%2A&gt;</ph> and the <ph id="ph3">&lt;xref:System.Collections.Generic.LinkedList%601.Last%2A&gt;</ph>.</source>
          <target state="translated">Si el <ph id="ph1">&lt;xref:System.Collections.Generic.LinkedList%601&gt;</ph> está vacía, el nuevo nodo deja de estar la <ph id="ph2">&lt;xref:System.Collections.Generic.LinkedList%601.First%2A&gt;</ph> y <ph id="ph3">&lt;xref:System.Collections.Generic.LinkedList%601.Last%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.LinkedList`1.AddFirst(`0)">
          <source>This method is an O(1) operation.</source>
          <target state="translated">Este método es una operación o (1).</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.LinkedList`1.AddFirst(`0)">
          <source>For an example that includes this method, see the <ph id="ph1">&lt;xref:System.Collections.Generic.LinkedList%601&gt;</ph> class.</source>
          <target state="translated">Para obtener un ejemplo que incluye este método, consulte la <ph id="ph1">&lt;xref:System.Collections.Generic.LinkedList%601&gt;</ph> clase.</target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve" uid="T:System.Collections.Generic.LinkedList`1">
          <source>Adds a new node or value at the end of the <ph id="ph1">&lt;see cref="T:System.Collections.Generic.LinkedList`1" /&gt;</ph>.</source>
          <target state="translated">Agrega un nuevo nodo o valor al final de la colección <ph id="ph1">&lt;see cref="T:System.Collections.Generic.LinkedList`1" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.LinkedList`1.AddLast(System.Collections.Generic.LinkedListNode{`0})">
          <source>The new <ph id="ph1">&lt;see cref="T:System.Collections.Generic.LinkedListNode`1" /&gt;</ph> to add at the end of the <ph id="ph2">&lt;see cref="T:System.Collections.Generic.LinkedList`1" /&gt;</ph>.</source>
          <target state="translated">Nuevo <ph id="ph1">&lt;see cref="T:System.Collections.Generic.LinkedListNode`1" /&gt;</ph> que se va a agregar al final de la colección <ph id="ph2">&lt;see cref="T:System.Collections.Generic.LinkedList`1" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.LinkedList`1.AddLast(System.Collections.Generic.LinkedListNode{`0})">
          <source>Adds the specified new node at the end of the <ph id="ph1">&lt;see cref="T:System.Collections.Generic.LinkedList`1" /&gt;</ph>.</source>
          <target state="translated">Agrega el nuevo nodo especificado al final de la colección <ph id="ph1">&lt;see cref="T:System.Collections.Generic.LinkedList`1" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.LinkedList`1.AddLast(System.Collections.Generic.LinkedListNode{`0})">
          <source><ph id="ph1">&lt;xref:System.Collections.Generic.LinkedList%601&gt;</ph> accepts <ph id="ph2">`null`</ph> as a valid <ph id="ph3">&lt;xref:System.Collections.Generic.LinkedListNode%601.Value%2A&gt;</ph> for reference types and allows duplicate values.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.Generic.LinkedList%601&gt;</ph> acepta <ph id="ph2">`null`</ph> como válido <ph id="ph3">&lt;xref:System.Collections.Generic.LinkedListNode%601.Value%2A&gt;</ph> para tipos de referencia y permite valores duplicados.</target>       </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.LinkedList`1.AddLast(System.Collections.Generic.LinkedListNode{`0})">
          <source>If the <ph id="ph1">&lt;xref:System.Collections.Generic.LinkedList%601&gt;</ph> is empty, the new node becomes the <ph id="ph2">&lt;xref:System.Collections.Generic.LinkedList%601.First%2A&gt;</ph> and the <ph id="ph3">&lt;xref:System.Collections.Generic.LinkedList%601.Last%2A&gt;</ph>.</source>
          <target state="translated">Si el <ph id="ph1">&lt;xref:System.Collections.Generic.LinkedList%601&gt;</ph> está vacía, el nuevo nodo deja de estar la <ph id="ph2">&lt;xref:System.Collections.Generic.LinkedList%601.First%2A&gt;</ph> y <ph id="ph3">&lt;xref:System.Collections.Generic.LinkedList%601.Last%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.LinkedList`1.AddLast(System.Collections.Generic.LinkedListNode{`0})">
          <source>This method is an O(1) operation.</source>
          <target state="translated">Este método es una operación o (1).</target>       </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.LinkedList`1.AddLast(System.Collections.Generic.LinkedListNode{`0})">
          <source>For an example that includes this method, see the <ph id="ph1">&lt;xref:System.Collections.Generic.LinkedList%601&gt;</ph> class.</source>
          <target state="translated">Para obtener un ejemplo que incluye este método, consulte la <ph id="ph1">&lt;xref:System.Collections.Generic.LinkedList%601&gt;</ph> clase.</target>       </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.LinkedList`1.AddLast(System.Collections.Generic.LinkedListNode{`0})">
          <source><ph id="ph1">&lt;paramref name="node" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="node" /&gt;</ph> es <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.LinkedList`1.AddLast(System.Collections.Generic.LinkedListNode{`0})">
          <source><ph id="ph1">&lt;paramref name="node" /&gt;</ph> belongs to another <ph id="ph2">&lt;see cref="T:System.Collections.Generic.LinkedList`1" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="node" /&gt;</ph> pertenece a otra colección <ph id="ph2">&lt;see cref="T:System.Collections.Generic.LinkedList`1" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.LinkedList`1.AddLast(`0)">
          <source>The value to add at the end of the <ph id="ph1">&lt;see cref="T:System.Collections.Generic.LinkedList`1" /&gt;</ph>.</source>
          <target state="translated">Valor que se agrega al final de la colección <ph id="ph1">&lt;see cref="T:System.Collections.Generic.LinkedList`1" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.LinkedList`1.AddLast(`0)">
          <source>Adds a new node containing the specified value at the end of the <ph id="ph1">&lt;see cref="T:System.Collections.Generic.LinkedList`1" /&gt;</ph>.</source>
          <target state="translated">Agrega un nuevo nodo que contiene el valor especificado al final de la colección <ph id="ph1">&lt;see cref="T:System.Collections.Generic.LinkedList`1" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.LinkedList`1.AddLast(`0)">
          <source>The new <ph id="ph1">&lt;see cref="T:System.Collections.Generic.LinkedListNode`1" /&gt;</ph> containing <ph id="ph2">&lt;paramref name="value" /&gt;</ph>.</source>
          <target state="translated">Nuevo objeto <ph id="ph1">&lt;see cref="T:System.Collections.Generic.LinkedListNode`1" /&gt;</ph> que contiene <ph id="ph2">&lt;paramref name="value" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.LinkedList`1.AddLast(`0)">
          <source><ph id="ph1">&lt;xref:System.Collections.Generic.LinkedList%601&gt;</ph> accepts <ph id="ph2">`null`</ph> as a valid <ph id="ph3">&lt;xref:System.Collections.Generic.LinkedListNode%601.Value%2A&gt;</ph> for reference types and allows duplicate values.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.Generic.LinkedList%601&gt;</ph> acepta <ph id="ph2">`null`</ph> como válido <ph id="ph3">&lt;xref:System.Collections.Generic.LinkedListNode%601.Value%2A&gt;</ph> para tipos de referencia y permite valores duplicados.</target>       </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.LinkedList`1.AddLast(`0)">
          <source>If the <ph id="ph1">&lt;xref:System.Collections.Generic.LinkedList%601&gt;</ph> is empty, the new node becomes the <ph id="ph2">&lt;xref:System.Collections.Generic.LinkedList%601.First%2A&gt;</ph> and the <ph id="ph3">&lt;xref:System.Collections.Generic.LinkedList%601.Last%2A&gt;</ph>.</source>
          <target state="translated">Si el <ph id="ph1">&lt;xref:System.Collections.Generic.LinkedList%601&gt;</ph> está vacía, el nuevo nodo deja de estar la <ph id="ph2">&lt;xref:System.Collections.Generic.LinkedList%601.First%2A&gt;</ph> y <ph id="ph3">&lt;xref:System.Collections.Generic.LinkedList%601.Last%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.LinkedList`1.AddLast(`0)">
          <source>This method is an O(1) operation.</source>
          <target state="translated">Este método es una operación o (1).</target>       </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.LinkedList`1.AddLast(`0)">
          <source>For an example that includes this method, see the <ph id="ph1">&lt;xref:System.Collections.Generic.LinkedList%601&gt;</ph> class.</source>
          <target state="translated">Para obtener un ejemplo que incluye este método, consulte la <ph id="ph1">&lt;xref:System.Collections.Generic.LinkedList%601&gt;</ph> clase.</target>       </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.LinkedList`1.Clear">
          <source>Removes all nodes from the <ph id="ph1">&lt;see cref="T:System.Collections.Generic.LinkedList`1" /&gt;</ph>.</source>
          <target state="translated">Quita todos los nodos de la colección <ph id="ph1">&lt;see cref="T:System.Collections.Generic.LinkedList`1" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.LinkedList`1.Clear">
          <source><ph id="ph1">&lt;xref:System.Collections.Generic.LinkedList%601.Count%2A&gt;</ph> is set to zero, and references to other objects from elements of the collection are also released.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.Generic.LinkedList%601.Count%2A&gt;</ph> está establecido en cero, y también se liberan las referencias a otros objetos desde los elementos de la colección.</target>       </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.LinkedList`1.Clear">
          <source><ph id="ph1">&lt;xref:System.Collections.Generic.LinkedList%601.First%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Collections.Generic.LinkedList%601.Last%2A&gt;</ph> are set to <ph id="ph3">`null`</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.Generic.LinkedList%601.First%2A&gt;</ph> y <ph id="ph2">&lt;xref:System.Collections.Generic.LinkedList%601.Last%2A&gt;</ph> se establecen en <ph id="ph3">`null`</ph>.</target>       </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.LinkedList`1.Clear">
          <source>This method is an O(<ph id="ph1">`n`</ph>) operation, where <ph id="ph2">`n`</ph> is <ph id="ph3">&lt;xref:System.Collections.Generic.LinkedList%601.Count%2A&gt;</ph>.</source>
          <target state="translated">Este método es una O (<ph id="ph1">`n`</ph>) operación, donde <ph id="ph2">`n`</ph> es <ph id="ph3">&lt;xref:System.Collections.Generic.LinkedList%601.Count%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.LinkedList`1.Clear">
          <source>For an example that includes this method, see the <ph id="ph1">&lt;xref:System.Collections.Generic.LinkedList%601&gt;</ph> class.</source>
          <target state="translated">Para obtener un ejemplo que incluye este método, consulte la <ph id="ph1">&lt;xref:System.Collections.Generic.LinkedList%601&gt;</ph> clase.</target>       </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.LinkedList`1.Contains(`0)">
          <source>The value to locate in the <ph id="ph1">&lt;see cref="T:System.Collections.Generic.LinkedList`1" /&gt;</ph>.</source>
          <target state="translated">Valor que se va a buscar en la colección <ph id="ph1">&lt;see cref="T:System.Collections.Generic.LinkedList`1" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.LinkedList`1.Contains(`0)">
          <source>The value can be <ph id="ph1">&lt;see langword="null" /&gt;</ph> for reference types.</source>
          <target state="translated">El valor puede ser <ph id="ph1">&lt;see langword="null" /&gt;</ph> para los tipos de referencia.</target>       </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.LinkedList`1.Contains(`0)">
          <source>Determines whether a value is in the <ph id="ph1">&lt;see cref="T:System.Collections.Generic.LinkedList`1" /&gt;</ph>.</source>
          <target state="translated">Determina si un valor se encuentra en la colección <ph id="ph1">&lt;see cref="T:System.Collections.Generic.LinkedList`1" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.LinkedList`1.Contains(`0)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if <ph id="ph2">&lt;paramref name="value" /&gt;</ph> is found in the <ph id="ph3">&lt;see cref="T:System.Collections.Generic.LinkedList`1" /&gt;</ph>; otherwise, <ph id="ph4">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> si <ph id="ph2">&lt;paramref name="value" /&gt;</ph> se encuentra en la matriz <ph id="ph3">&lt;see cref="T:System.Collections.Generic.LinkedList`1" /&gt;</ph>; en caso contrario, <ph id="ph4">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.LinkedList`1.Contains(`0)">
          <source>This method performs a linear search; therefore, this method is an O(<ph id="ph1">`n`</ph>) operation, where <ph id="ph2">`n`</ph> is <ph id="ph3">&lt;xref:System.Collections.Generic.LinkedList%601.Count%2A&gt;</ph>.</source>
          <target state="translated">Este método realiza una búsqueda lineal; por lo tanto, este método es una O (<ph id="ph1">`n`</ph>) operación, donde <ph id="ph2">`n`</ph> es <ph id="ph3">&lt;xref:System.Collections.Generic.LinkedList%601.Count%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.LinkedList`1.Contains(`0)">
          <source>For an example that includes this method, see the <ph id="ph1">&lt;xref:System.Collections.Generic.LinkedList%601&gt;</ph> class.</source>
          <target state="translated">Para obtener un ejemplo que incluye este método, consulte la <ph id="ph1">&lt;xref:System.Collections.Generic.LinkedList%601&gt;</ph> clase.</target>       </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.LinkedList`1.CopyTo(`0[],System.Int32)">
          <source>The one-dimensional <ph id="ph1">&lt;see cref="T:System.Array" /&gt;</ph> that is the destination of the elements copied from <ph id="ph2">&lt;see cref="T:System.Collections.Generic.LinkedList`1" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Array" /&gt;</ph> unidimensional que constituye el destino de los elementos copiados de <ph id="ph2">&lt;see cref="T:System.Collections.Generic.LinkedList`1" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.LinkedList`1.CopyTo(`0[],System.Int32)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Array" /&gt;</ph> must have zero-based indexing.</source>
          <target state="translated">La matriz <ph id="ph1">&lt;see cref="T:System.Array" /&gt;</ph> debe tener una indización de base cero.</target>       </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.LinkedList`1.CopyTo(`0[],System.Int32)">
          <source>The zero-based index in <bpt id="p1">&lt;c&gt;</bpt>array<ept id="p1">&lt;/c&gt;</ept> at which copying begins.</source>
          <target state="translated">Índice de base cero de <bpt id="p1">&lt;c&gt;</bpt>array<ept id="p1">&lt;/c&gt;</ept> donde comienza la copia.</target>       </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.LinkedList`1.CopyTo(`0[],System.Int32)">
          <source>Copies the entire <ph id="ph1">&lt;see cref="T:System.Collections.Generic.LinkedList`1" /&gt;</ph> to a compatible one-dimensional <ph id="ph2">&lt;see cref="T:System.Array" /&gt;</ph>, starting at the specified index of the target array.</source>
          <target state="translated">Copia la totalidad de <ph id="ph1">&lt;see cref="T:System.Collections.Generic.LinkedList`1" /&gt;</ph> en una matriz <ph id="ph2">&lt;see cref="T:System.Array" /&gt;</ph> unidimensional compatible, comenzando en el índice especificado de la matriz de destino.</target>       </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.LinkedList`1.CopyTo(`0[],System.Int32)">
          <source>The elements are copied to the <ph id="ph1">&lt;xref:System.Array&gt;</ph> in the same order in which the enumerator iterates through the <ph id="ph2">&lt;xref:System.Collections.Generic.LinkedList%601&gt;</ph>.</source>
          <target state="translated">Los elementos se copian en el <ph id="ph1">&lt;xref:System.Array&gt;</ph> en el mismo orden en el que el enumerador recorre en iteración la <ph id="ph2">&lt;xref:System.Collections.Generic.LinkedList%601&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.LinkedList`1.CopyTo(`0[],System.Int32)">
          <source>This method is an O(<ph id="ph1">`n`</ph>) operation, where <ph id="ph2">`n`</ph> is <ph id="ph3">&lt;xref:System.Collections.Generic.LinkedList%601.Count%2A&gt;</ph>.</source>
          <target state="translated">Este método es una O (<ph id="ph1">`n`</ph>) operación, donde <ph id="ph2">`n`</ph> es <ph id="ph3">&lt;xref:System.Collections.Generic.LinkedList%601.Count%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.LinkedList`1.CopyTo(`0[],System.Int32)">
          <source>For an example that includes this method, see the <ph id="ph1">&lt;xref:System.Collections.Generic.LinkedList%601&gt;</ph> class.</source>
          <target state="translated">Para obtener un ejemplo que incluye este método, consulte la <ph id="ph1">&lt;xref:System.Collections.Generic.LinkedList%601&gt;</ph> clase.</target>       </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.LinkedList`1.CopyTo(`0[],System.Int32)">
          <source><ph id="ph1">&lt;paramref name="array" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="array" /&gt;</ph> es <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.LinkedList`1.CopyTo(`0[],System.Int32)">
          <source><ph id="ph1">&lt;paramref name="index" /&gt;</ph> is less than zero.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="index" /&gt;</ph> es menor que cero.</target>       </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.LinkedList`1.CopyTo(`0[],System.Int32)">
          <source>The number of elements in the source <ph id="ph1">&lt;see cref="T:System.Collections.Generic.LinkedList`1" /&gt;</ph> is greater than the available space from <ph id="ph2">&lt;paramref name="index" /&gt;</ph> to the end of the destination <ph id="ph3">&lt;paramref name="array" /&gt;</ph>.</source>
          <target state="translated">El número de elementos de la <ph id="ph1">&lt;see cref="T:System.Collections.Generic.LinkedList`1" /&gt;</ph> de origen es mayor que el espacio disponible desde <ph id="ph2">&lt;paramref name="index" /&gt;</ph> hasta el final de la <ph id="ph3">&lt;paramref name="array" /&gt;</ph> de destino.</target>       </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve" uid="P:System.Collections.Generic.LinkedList`1.Count">
          <source>Gets the number of nodes actually contained in the <ph id="ph1">&lt;see cref="T:System.Collections.Generic.LinkedList`1" /&gt;</ph>.</source>
          <target state="translated">Obtiene el número de nodos que ya están incluidos en la colección <ph id="ph1">&lt;see cref="T:System.Collections.Generic.LinkedList`1" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.LinkedList`1.Count">
          <source>The number of nodes actually contained in the <ph id="ph1">&lt;see cref="T:System.Collections.Generic.LinkedList`1" /&gt;</ph>.</source>
          <target state="translated">Número de nodos que ya están incluidos en la colección <ph id="ph1">&lt;see cref="T:System.Collections.Generic.LinkedList`1" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.LinkedList`1.Count">
          <source>Retrieving the value of this property is an O(1) operation.</source>
          <target state="translated">La recuperación del valor de esta propiedad es una operación O(1).</target>       </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.LinkedList`1.Count">
          <source>For an example that includes this property, see the <ph id="ph1">&lt;xref:System.Collections.Generic.LinkedList%601&gt;</ph> class.</source>
          <target state="translated">Para obtener un ejemplo que incluye esta propiedad, vea la <ph id="ph1">&lt;xref:System.Collections.Generic.LinkedList%601&gt;</ph> clase.</target>       </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.LinkedList`1.Find(`0)">
          <source>The value to locate in the <ph id="ph1">&lt;see cref="T:System.Collections.Generic.LinkedList`1" /&gt;</ph>.</source>
          <target state="translated">Valor que se va a buscar en la colección <ph id="ph1">&lt;see cref="T:System.Collections.Generic.LinkedList`1" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.LinkedList`1.Find(`0)">
          <source>Finds the first node that contains the specified value.</source>
          <target state="translated">Encuentra el primer nodo que contiene el valor especificado.</target>       </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.LinkedList`1.Find(`0)">
          <source>The first <ph id="ph1">&lt;see cref="T:System.Collections.Generic.LinkedListNode`1" /&gt;</ph> that contains the specified value, if found; otherwise, <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">Primer objeto <ph id="ph1">&lt;see cref="T:System.Collections.Generic.LinkedListNode`1" /&gt;</ph> que contiene el valor especificado, si se encuentra; de lo contrario, <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.LinkedList`1.Find(`0)">
          <source>The <ph id="ph1">&lt;xref:System.Collections.Generic.LinkedList%601&gt;</ph> is searched forward starting at <ph id="ph2">&lt;xref:System.Collections.Generic.LinkedList%601.First%2A&gt;</ph> and ending at <ph id="ph3">&lt;xref:System.Collections.Generic.LinkedList%601.Last%2A&gt;</ph>.</source>
          <target state="translated">El <ph id="ph1">&lt;xref:System.Collections.Generic.LinkedList%601&gt;</ph> se busca hacia delante, empezando en <ph id="ph2">&lt;xref:System.Collections.Generic.LinkedList%601.First%2A&gt;</ph> y terminando en <ph id="ph3">&lt;xref:System.Collections.Generic.LinkedList%601.Last%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.LinkedList`1.Find(`0)">
          <source>This method performs a linear search; therefore, this method is an O(<ph id="ph1">`n`</ph>) operation, where <ph id="ph2">`n`</ph> is <ph id="ph3">&lt;xref:System.Collections.Generic.LinkedList%601.Count%2A&gt;</ph>.</source>
          <target state="translated">Este método realiza una búsqueda lineal; por lo tanto, este método es una O (<ph id="ph1">`n`</ph>) operación, donde <ph id="ph2">`n`</ph> es <ph id="ph3">&lt;xref:System.Collections.Generic.LinkedList%601.Count%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.LinkedList`1.Find(`0)">
          <source>For an example that includes this method, see the <ph id="ph1">&lt;xref:System.Collections.Generic.LinkedList%601&gt;</ph> class.</source>
          <target state="translated">Para obtener un ejemplo que incluye este método, consulte la <ph id="ph1">&lt;xref:System.Collections.Generic.LinkedList%601&gt;</ph> clase.</target>       </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.LinkedList`1.FindLast(`0)">
          <source>The value to locate in the <ph id="ph1">&lt;see cref="T:System.Collections.Generic.LinkedList`1" /&gt;</ph>.</source>
          <target state="translated">Valor que se va a buscar en la colección <ph id="ph1">&lt;see cref="T:System.Collections.Generic.LinkedList`1" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.LinkedList`1.FindLast(`0)">
          <source>Finds the last node that contains the specified value.</source>
          <target state="translated">Encuentra el último nodo que contiene el valor especificado.</target>       </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.LinkedList`1.FindLast(`0)">
          <source>The last <ph id="ph1">&lt;see cref="T:System.Collections.Generic.LinkedListNode`1" /&gt;</ph> that contains the specified value, if found; otherwise, <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">Último objeto <ph id="ph1">&lt;see cref="T:System.Collections.Generic.LinkedListNode`1" /&gt;</ph> que contiene el valor especificado, si se encuentra; de lo contrario, <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.LinkedList`1.FindLast(`0)">
          <source>The <ph id="ph1">&lt;xref:System.Collections.Generic.LinkedList%601&gt;</ph> is searched backward starting at <ph id="ph2">&lt;xref:System.Collections.Generic.LinkedList%601.Last%2A&gt;</ph> and ending at <ph id="ph3">&lt;xref:System.Collections.Generic.LinkedList%601.First%2A&gt;</ph>.</source>
          <target state="translated">El <ph id="ph1">&lt;xref:System.Collections.Generic.LinkedList%601&gt;</ph> es la búsqueda hacia atrás, empezando en <ph id="ph2">&lt;xref:System.Collections.Generic.LinkedList%601.Last%2A&gt;</ph> y terminando en <ph id="ph3">&lt;xref:System.Collections.Generic.LinkedList%601.First%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.LinkedList`1.FindLast(`0)">
          <source>This method performs a linear search; therefore, this method is an O(<ph id="ph1">`n`</ph>) operation, where <ph id="ph2">`n`</ph> is <ph id="ph3">&lt;xref:System.Collections.Generic.LinkedList%601.Count%2A&gt;</ph>.</source>
          <target state="translated">Este método realiza una búsqueda lineal; por lo tanto, este método es una O (<ph id="ph1">`n`</ph>) operación, donde <ph id="ph2">`n`</ph> es <ph id="ph3">&lt;xref:System.Collections.Generic.LinkedList%601.Count%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.LinkedList`1.FindLast(`0)">
          <source>For an example that includes this method, see the <ph id="ph1">&lt;xref:System.Collections.Generic.LinkedList%601&gt;</ph> class.</source>
          <target state="translated">Para obtener un ejemplo que incluye este método, consulte la <ph id="ph1">&lt;xref:System.Collections.Generic.LinkedList%601&gt;</ph> clase.</target>       </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve" uid="P:System.Collections.Generic.LinkedList`1.First">
          <source>Gets the first node of the <ph id="ph1">&lt;see cref="T:System.Collections.Generic.LinkedList`1" /&gt;</ph>.</source>
          <target state="translated">Obtiene el primer nodo de la colección <ph id="ph1">&lt;see cref="T:System.Collections.Generic.LinkedList`1" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.LinkedList`1.First">
          <source>The first <ph id="ph1">&lt;see cref="T:System.Collections.Generic.LinkedListNode`1" /&gt;</ph> of the <ph id="ph2">&lt;see cref="T:System.Collections.Generic.LinkedList`1" /&gt;</ph>.</source>
          <target state="translated">Primer <ph id="ph1">&lt;see cref="T:System.Collections.Generic.LinkedListNode`1" /&gt;</ph> de la colección <ph id="ph2">&lt;see cref="T:System.Collections.Generic.LinkedList`1" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.LinkedList`1.First">
          <source><ph id="ph1">&lt;xref:System.Collections.Generic.LinkedList%601&gt;</ph> accepts <ph id="ph2">`null`</ph> as a valid <ph id="ph3">&lt;xref:System.Collections.Generic.LinkedListNode%601.Value%2A&gt;</ph> for reference types and allows duplicate values.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.Generic.LinkedList%601&gt;</ph> acepta <ph id="ph2">`null`</ph> como válido <ph id="ph3">&lt;xref:System.Collections.Generic.LinkedListNode%601.Value%2A&gt;</ph> para tipos de referencia y permite valores duplicados.</target>       </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.LinkedList`1.First">
          <source>If the <ph id="ph1">&lt;xref:System.Collections.Generic.LinkedList%601&gt;</ph> is empty, the <ph id="ph2">&lt;xref:System.Collections.Generic.LinkedList%601.First%2A&gt;</ph> and <ph id="ph3">&lt;xref:System.Collections.Generic.LinkedList%601.Last%2A&gt;</ph> properties contain <ph id="ph4">`null`</ph>.</source>
          <target state="translated">Si el <ph id="ph1">&lt;xref:System.Collections.Generic.LinkedList%601&gt;</ph> está vacía, el <ph id="ph2">&lt;xref:System.Collections.Generic.LinkedList%601.First%2A&gt;</ph> y <ph id="ph3">&lt;xref:System.Collections.Generic.LinkedList%601.Last%2A&gt;</ph> contienen propiedades <ph id="ph4">`null`</ph>.</target>       </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.LinkedList`1.First">
          <source>Retrieving the value of this property is an O(1) operation.</source>
          <target state="translated">La recuperación del valor de esta propiedad es una operación O(1).</target>       </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.LinkedList`1.First">
          <source>For an example that includes this property, see the <ph id="ph1">&lt;xref:System.Collections.Generic.LinkedList%601&gt;</ph> class.</source>
          <target state="translated">Para obtener un ejemplo que incluye esta propiedad, vea la <ph id="ph1">&lt;xref:System.Collections.Generic.LinkedList%601&gt;</ph> clase.</target>       </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.LinkedList`1.GetEnumerator">
          <source>Returns an enumerator that iterates through the <ph id="ph1">&lt;see cref="T:System.Collections.Generic.LinkedList`1" /&gt;</ph>.</source>
          <target state="translated">Devuelve un enumerador que recorre en iteración la colección <ph id="ph1">&lt;see cref="T:System.Collections.Generic.LinkedList`1" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.LinkedList`1.GetEnumerator">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.Generic.LinkedList`1.Enumerator" /&gt;</ph> for the <ph id="ph2">&lt;see cref="T:System.Collections.Generic.LinkedList`1" /&gt;</ph>.</source>
          <target state="translated">Estructura <ph id="ph1">&lt;see cref="T:System.Collections.Generic.LinkedList`1.Enumerator" /&gt;</ph> para la colección <ph id="ph2">&lt;see cref="T:System.Collections.Generic.LinkedList`1" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.LinkedList`1.GetEnumerator">
          <source>The <ph id="ph1">`foreach`</ph> statement of the C# language (<ph id="ph2">`for each`</ph> in C++, <ph id="ph3">`For Each`</ph> in Visual Basic) hides the complexity of the enumerators.</source>
          <target state="translated">El <ph id="ph1">`foreach`</ph> instrucción del lenguaje C# (<ph id="ph2">`for each`</ph> en C++, <ph id="ph3">`For Each`</ph> en Visual Basic) oculta la complejidad de los enumeradores.</target>       </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.LinkedList`1.GetEnumerator">
          <source>Therefore, using <ph id="ph1">`foreach`</ph> is recommended, instead of directly manipulating the enumerator.</source>
          <target state="translated">Por lo tanto, se recomienda el uso de <ph id="ph1">`foreach`</ph>, en lugar de manipular directamente el enumerador.</target>       </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.LinkedList`1.GetEnumerator">
          <source>Enumerators can be used to read the data in the collection, but they cannot be used to modify the underlying collection.</source>
          <target state="translated">Los enumeradores pueden usarse para leer los datos de la colección, pero no para modificar la colección subyacente.</target>       </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.LinkedList`1.GetEnumerator">
          <source>Initially, the enumerator is positioned before the first element in the collection.</source>
          <target state="translated">En principio, el enumerador se coloca antes del primer elemento de la colección.</target>       </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.LinkedList`1.GetEnumerator">
          <source>At this position, <ph id="ph1">&lt;xref:System.Collections.Generic.LinkedList%601.Enumerator.Current%2A&gt;</ph> is undefined.</source>
          <target state="translated">En esta posición, el valor de propiedad <ph id="ph1">&lt;xref:System.Collections.Generic.LinkedList%601.Enumerator.Current%2A&gt;</ph> está sin definir.</target>       </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.LinkedList`1.GetEnumerator">
          <source>Therefore, you must call <ph id="ph1">&lt;xref:System.Collections.Generic.LinkedList%601.Enumerator.MoveNext%2A&gt;</ph> to advance the enumerator to the first element of the collection before reading the value of <ph id="ph2">&lt;xref:System.Collections.Generic.LinkedList%601.Enumerator.Current%2A&gt;</ph>.</source>
          <target state="translated">Por lo tanto, debe llamar a <ph id="ph1">&lt;xref:System.Collections.Generic.LinkedList%601.Enumerator.MoveNext%2A&gt;</ph> para adelantar el enumerador hasta el primer elemento de la colección antes de leer el valor de <ph id="ph2">&lt;xref:System.Collections.Generic.LinkedList%601.Enumerator.Current%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.LinkedList`1.GetEnumerator">
          <source><ph id="ph1">&lt;xref:System.Collections.Generic.LinkedList%601.Enumerator.Current%2A&gt;</ph> returns the same object until <ph id="ph2">&lt;xref:System.Collections.Generic.LinkedList%601.Enumerator.MoveNext%2A&gt;</ph> is called.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.Generic.LinkedList%601.Enumerator.Current%2A&gt;</ph> devuelve el mismo objeto hasta que se llama a <ph id="ph2">&lt;xref:System.Collections.Generic.LinkedList%601.Enumerator.MoveNext%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.LinkedList`1.GetEnumerator">
          <source><ph id="ph1">&lt;xref:System.Collections.Generic.LinkedList%601.Enumerator.MoveNext%2A&gt;</ph> sets <ph id="ph2">&lt;xref:System.Collections.Generic.LinkedList%601.Enumerator.Current%2A&gt;</ph> to the next element.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.Generic.LinkedList%601.Enumerator.MoveNext%2A&gt;</ph> establece <ph id="ph2">&lt;xref:System.Collections.Generic.LinkedList%601.Enumerator.Current%2A&gt;</ph> en el siguiente elemento.</target>       </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.LinkedList`1.GetEnumerator">
          <source>If <ph id="ph1">&lt;xref:System.Collections.Generic.LinkedList%601.Enumerator.MoveNext%2A&gt;</ph> passes the end of the collection, the enumerator is positioned after the last element in the collection and <ph id="ph2">&lt;xref:System.Collections.Generic.LinkedList%601.Enumerator.MoveNext%2A&gt;</ph> returns <ph id="ph3">`false`</ph>.</source>
          <target state="translated">Si <ph id="ph1">&lt;xref:System.Collections.Generic.LinkedList%601.Enumerator.MoveNext%2A&gt;</ph> pasa el final de la colección, el enumerador se coloca después del último elemento de la colección y <ph id="ph2">&lt;xref:System.Collections.Generic.LinkedList%601.Enumerator.MoveNext%2A&gt;</ph> devuelve <ph id="ph3">`false`</ph>.</target>       </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.LinkedList`1.GetEnumerator">
          <source>When the enumerator is at this position, subsequent calls to <ph id="ph1">&lt;xref:System.Collections.Generic.LinkedList%601.Enumerator.MoveNext%2A&gt;</ph> also return <ph id="ph2">`false`</ph>.</source>
          <target state="translated">Mientras el enumerador permanezca en esta posición, las llamadas subsiguientes a <ph id="ph1">&lt;xref:System.Collections.Generic.LinkedList%601.Enumerator.MoveNext%2A&gt;</ph> también devolver <ph id="ph2">`false`</ph>.</target>       </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.LinkedList`1.GetEnumerator">
          <source>If the last call to <ph id="ph1">&lt;xref:System.Collections.Generic.LinkedList%601.Enumerator.MoveNext%2A&gt;</ph> returned <ph id="ph2">`false`</ph>, <ph id="ph3">&lt;xref:System.Collections.Generic.LinkedList%601.Enumerator.Current%2A&gt;</ph> is undefined.</source>
          <target state="translated">Si la última llamada a <ph id="ph1">&lt;xref:System.Collections.Generic.LinkedList%601.Enumerator.MoveNext%2A&gt;</ph> devuelve <ph id="ph2">`false`</ph>, <ph id="ph3">&lt;xref:System.Collections.Generic.LinkedList%601.Enumerator.Current%2A&gt;</ph> no está definido.</target>       </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.LinkedList`1.GetEnumerator">
          <source>You cannot set <ph id="ph1">&lt;xref:System.Collections.Generic.LinkedList%601.Enumerator.Current%2A&gt;</ph> to the first element of the collection again; you must create a new enumerator instance instead.</source>
          <target state="translated">No puede volver a establecer la propiedad <ph id="ph1">&lt;xref:System.Collections.Generic.LinkedList%601.Enumerator.Current%2A&gt;</ph> en el primer elemento de la colección, sino que debe crear una nueva instancia del enumerador.</target>       </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.LinkedList`1.GetEnumerator">
          <source>An enumerator remains valid as long as the collection remains unchanged.</source>
          <target state="translated">Un enumerador es válido mientras la colección no cambie.</target>       </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.LinkedList`1.GetEnumerator">
          <source>If changes are made to the collection, such as adding, modifying, or deleting elements, the enumerator is irrecoverably invalidated and its behavior is undefined.</source>
          <target state="translated">Si se hacen cambios en la colección (como agregar, modificar o eliminar elementos), el enumerador queda invalidado permanentemente y su comportamiento es indefinido.</target>       </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.LinkedList`1.GetEnumerator">
          <source>The enumerator does not have exclusive access to the collection; therefore, enumerating through a collection is intrinsically not a thread-safe procedure.</source>
          <target state="translated">El enumerador no tiene acceso exclusivo a la colección y, por tanto, la enumeración en una colección no es intrínsicamente un procedimiento seguro para subprocesos.</target>       </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.LinkedList`1.GetEnumerator">
          <source>To guarantee thread safety during enumeration, you can lock the collection during the entire enumeration.</source>
          <target state="translated">A fin de garantizar la seguridad de los subprocesos, se puede bloquear la colección durante toda la enumeración.</target>       </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.LinkedList`1.GetEnumerator">
          <source>To allow the collection to be accessed by multiple threads for reading and writing, you must implement your own synchronization.</source>
          <target state="translated">Para permitir que varios subprocesos obtengan acceso de lectura y escritura a la colección, debe implementar su propia sincronización.</target>       </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.LinkedList`1.GetEnumerator">
          <source>Default implementations of collections in <ph id="ph1">&lt;xref:System.Collections.Generic?displayProperty=nameWithType&gt;</ph> are not synchronized.</source>
          <target state="translated">Las implementaciones de las recopilaciones predeterminadas <ph id="ph1">&lt;xref:System.Collections.Generic?displayProperty=nameWithType&gt;</ph> no están sincronizadas.</target>       </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.LinkedList`1.GetEnumerator">
          <source>This method is an O(1) operation.</source>
          <target state="translated">Este método es una operación o (1).</target>       </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.LinkedList`1.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Runtime.Serialization.SerializationInfo" /&gt;</ph> object that contains the information required to serialize the <ph id="ph2">&lt;see cref="T:System.Collections.Generic.LinkedList`1" /&gt;</ph> instance.</source>
          <target state="translated">Objeto <ph id="ph1">&lt;see cref="T:System.Runtime.Serialization.SerializationInfo" /&gt;</ph> que contiene la información requerida para serializar la instancia de <ph id="ph2">&lt;see cref="T:System.Collections.Generic.LinkedList`1" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.LinkedList`1.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Runtime.Serialization.StreamingContext" /&gt;</ph> object that contains the source and destination of the serialized stream associated with the <ph id="ph2">&lt;see cref="T:System.Collections.Generic.LinkedList`1" /&gt;</ph> instance.</source>
          <target state="translated">Objeto <ph id="ph1">&lt;see cref="T:System.Runtime.Serialization.StreamingContext" /&gt;</ph> que contiene el origen y el destino de la secuencia serializada asociada a la instancia de la <ph id="ph2">&lt;see cref="T:System.Collections.Generic.LinkedList`1" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.LinkedList`1.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
          <source>Implements the <ph id="ph1">&lt;see cref="T:System.Runtime.Serialization.ISerializable" /&gt;</ph> interface and returns the data needed to serialize the <ph id="ph2">&lt;see cref="T:System.Collections.Generic.LinkedList`1" /&gt;</ph> instance.</source>
          <target state="translated">Implementa la interfaz de <ph id="ph1">&lt;see cref="T:System.Runtime.Serialization.ISerializable" /&gt;</ph> y devuelve los datos necesarios para serializar la instancia de <ph id="ph2">&lt;see cref="T:System.Collections.Generic.LinkedList`1" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.LinkedList`1.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
          <source>This method is an O(<ph id="ph1">`n`</ph>) operation, where <ph id="ph2">`n`</ph> is <ph id="ph3">&lt;xref:System.Collections.Generic.LinkedList%601.Count%2A&gt;</ph>.</source>
          <target state="translated">Este método es una O (<ph id="ph1">`n`</ph>) operación, donde <ph id="ph2">`n`</ph> es <ph id="ph3">&lt;xref:System.Collections.Generic.LinkedList%601.Count%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.LinkedList`1.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
          <source><ph id="ph1">&lt;paramref name="info" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="info" /&gt;</ph> es <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.LinkedList`1.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
          <source>for providing serialization services.</source>
          <target state="translated">para proporcionar servicios de serialización.</target>       </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.LinkedList`1.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
          <source>Associated enumeration:   <ph id="ph1">&lt;see cref="F:System.Security.Permissions.SecurityPermissionFlag.SerializationFormatter" /&gt;</ph> Security action: <ph id="ph2">&lt;see cref="F:System.Security.Permissions.SecurityAction.LinkDemand" /&gt;</ph></source>
          <target state="translated">Enumeración asociada: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.SecurityPermissionFlag.SerializationFormatter" /&gt;</ph> acción de seguridad: <ph id="ph2">&lt;see cref="F:System.Security.Permissions.SecurityAction.LinkDemand" /&gt;</ph></target>       </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve" uid="P:System.Collections.Generic.LinkedList`1.Last">
          <source>Gets the last node of the <ph id="ph1">&lt;see cref="T:System.Collections.Generic.LinkedList`1" /&gt;</ph>.</source>
          <target state="translated">Obtiene el último nodo de la colección <ph id="ph1">&lt;see cref="T:System.Collections.Generic.LinkedList`1" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.LinkedList`1.Last">
          <source>The last <ph id="ph1">&lt;see cref="T:System.Collections.Generic.LinkedListNode`1" /&gt;</ph> of the <ph id="ph2">&lt;see cref="T:System.Collections.Generic.LinkedList`1" /&gt;</ph>.</source>
          <target state="translated">Último <ph id="ph1">&lt;see cref="T:System.Collections.Generic.LinkedListNode`1" /&gt;</ph> de la colección <ph id="ph2">&lt;see cref="T:System.Collections.Generic.LinkedList`1" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.LinkedList`1.Last">
          <source><ph id="ph1">&lt;xref:System.Collections.Generic.LinkedList%601&gt;</ph> accepts <ph id="ph2">`null`</ph> as a valid <ph id="ph3">&lt;xref:System.Collections.Generic.LinkedListNode%601.Value%2A&gt;</ph> for reference types and allows duplicate values.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.Generic.LinkedList%601&gt;</ph> acepta <ph id="ph2">`null`</ph> como válido <ph id="ph3">&lt;xref:System.Collections.Generic.LinkedListNode%601.Value%2A&gt;</ph> para tipos de referencia y permite valores duplicados.</target>       </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.LinkedList`1.Last">
          <source>If the <ph id="ph1">&lt;xref:System.Collections.Generic.LinkedList%601&gt;</ph> is empty, the <ph id="ph2">&lt;xref:System.Collections.Generic.LinkedList%601.First%2A&gt;</ph> and <ph id="ph3">&lt;xref:System.Collections.Generic.LinkedList%601.Last%2A&gt;</ph> properties contain <ph id="ph4">`null`</ph>.</source>
          <target state="translated">Si el <ph id="ph1">&lt;xref:System.Collections.Generic.LinkedList%601&gt;</ph> está vacía, el <ph id="ph2">&lt;xref:System.Collections.Generic.LinkedList%601.First%2A&gt;</ph> y <ph id="ph3">&lt;xref:System.Collections.Generic.LinkedList%601.Last%2A&gt;</ph> contienen propiedades <ph id="ph4">`null`</ph>.</target>       </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.LinkedList`1.Last">
          <source>Retrieving the value of this property is an O(1) operation.</source>
          <target state="translated">La recuperación del valor de esta propiedad es una operación O(1).</target>       </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.LinkedList`1.Last">
          <source>For an example that includes this property, see the <ph id="ph1">&lt;xref:System.Collections.Generic.LinkedList%601&gt;</ph> class.</source>
          <target state="translated">Para obtener un ejemplo que incluye esta propiedad, vea la <ph id="ph1">&lt;xref:System.Collections.Generic.LinkedList%601&gt;</ph> clase.</target>       </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.LinkedList`1.OnDeserialization(System.Object)">
          <source>The source of the deserialization event.</source>
          <target state="translated">Origen del evento de deserialización.</target>       </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.LinkedList`1.OnDeserialization(System.Object)">
          <source>Implements the <ph id="ph1">&lt;see cref="T:System.Runtime.Serialization.ISerializable" /&gt;</ph> interface and raises the deserialization event when the deserialization is complete.</source>
          <target state="translated">Implementa la interfaz <ph id="ph1">&lt;see cref="T:System.Runtime.Serialization.ISerializable" /&gt;</ph> y genera el evento de deserialización cuando esta ha finalizado.</target>       </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.LinkedList`1.OnDeserialization(System.Object)">
          <source>This method is an O(<ph id="ph1">`n`</ph>) operation, where <ph id="ph2">`n`</ph> is <ph id="ph3">&lt;xref:System.Collections.Generic.LinkedList%601.Count%2A&gt;</ph>.</source>
          <target state="translated">Este método es una O (<ph id="ph1">`n`</ph>) operación, donde <ph id="ph2">`n`</ph> es <ph id="ph3">&lt;xref:System.Collections.Generic.LinkedList%601.Count%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.LinkedList`1.OnDeserialization(System.Object)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Runtime.Serialization.SerializationInfo" /&gt;</ph> object associated with the current <ph id="ph2">&lt;see cref="T:System.Collections.Generic.LinkedList`1" /&gt;</ph> instance is invalid.</source>
          <target state="translated">El objeto <ph id="ph1">&lt;see cref="T:System.Runtime.Serialization.SerializationInfo" /&gt;</ph> asociado a la instancia de <ph id="ph2">&lt;see cref="T:System.Collections.Generic.LinkedList`1" /&gt;</ph> actual no es válido.</target>       </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve" uid="T:System.Collections.Generic.LinkedList`1">
          <source>Removes the first occurrence of a node or value from the <ph id="ph1">&lt;see cref="T:System.Collections.Generic.LinkedList`1" /&gt;</ph>.</source>
          <target state="translated">Quita la primera aparición de un nodo o valor de la colección <ph id="ph1">&lt;see cref="T:System.Collections.Generic.LinkedList`1" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.LinkedList`1.Remove(System.Collections.Generic.LinkedListNode{`0})">
          <source>The <ph id="ph1">&lt;see cref="T:System.Collections.Generic.LinkedListNode`1" /&gt;</ph> to remove from the <ph id="ph2">&lt;see cref="T:System.Collections.Generic.LinkedList`1" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Collections.Generic.LinkedListNode`1" /&gt;</ph> que se va a quitar de <ph id="ph2">&lt;see cref="T:System.Collections.Generic.LinkedList`1" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.LinkedList`1.Remove(System.Collections.Generic.LinkedListNode{`0})">
          <source>Removes the specified node from the <ph id="ph1">&lt;see cref="T:System.Collections.Generic.LinkedList`1" /&gt;</ph>.</source>
          <target state="translated">Quita el nodo especificado de <ph id="ph1">&lt;see cref="T:System.Collections.Generic.LinkedList`1" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.LinkedList`1.Remove(System.Collections.Generic.LinkedListNode{`0})">
          <source>This method is an O(1) operation.</source>
          <target state="translated">Este método es una operación o (1).</target>       </trans-unit>
        <trans-unit id="303" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.LinkedList`1.Remove(System.Collections.Generic.LinkedListNode{`0})">
          <source>For an example that includes this method, see the <ph id="ph1">&lt;xref:System.Collections.Generic.LinkedList%601&gt;</ph> class.</source>
          <target state="translated">Para obtener un ejemplo que incluye este método, consulte la <ph id="ph1">&lt;xref:System.Collections.Generic.LinkedList%601&gt;</ph> clase.</target>       </trans-unit>
        <trans-unit id="304" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.LinkedList`1.Remove(System.Collections.Generic.LinkedListNode{`0})">
          <source><ph id="ph1">&lt;paramref name="node" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="node" /&gt;</ph> es <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="305" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.LinkedList`1.Remove(System.Collections.Generic.LinkedListNode{`0})">
          <source><ph id="ph1">&lt;paramref name="node" /&gt;</ph> is not in the current <ph id="ph2">&lt;see cref="T:System.Collections.Generic.LinkedList`1" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="node" /&gt;</ph> no está en la colección <ph id="ph2">&lt;see cref="T:System.Collections.Generic.LinkedList`1" /&gt;</ph> actual.</target>       </trans-unit>
        <trans-unit id="306" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.LinkedList`1.Remove(`0)">
          <source>The value to remove from the <ph id="ph1">&lt;see cref="T:System.Collections.Generic.LinkedList`1" /&gt;</ph>.</source>
          <target state="translated">Valor que se va a quitar de la colección <ph id="ph1">&lt;see cref="T:System.Collections.Generic.LinkedList`1" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="307" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.LinkedList`1.Remove(`0)">
          <source>Removes the first occurrence of the specified value from the <ph id="ph1">&lt;see cref="T:System.Collections.Generic.LinkedList`1" /&gt;</ph>.</source>
          <target state="translated">Quita la primera aparición del valor especificado de la colección <ph id="ph1">&lt;see cref="T:System.Collections.Generic.LinkedList`1" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="308" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.LinkedList`1.Remove(`0)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the element containing <ph id="ph2">&lt;paramref name="value" /&gt;</ph> is successfully removed; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> si el elemento que contiene <ph id="ph2">&lt;paramref name="value" /&gt;</ph> se quita correctamente; en caso contrario, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="309" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.LinkedList`1.Remove(`0)">
          <source>This method also returns <ph id="ph1">&lt;see langword="false" /&gt;</ph> if <ph id="ph2">&lt;paramref name="value" /&gt;</ph> was not found in the original <ph id="ph3">&lt;see cref="T:System.Collections.Generic.LinkedList`1" /&gt;</ph>.</source>
          <target state="translated">Este método también devuelve <ph id="ph1">&lt;see langword="false" /&gt;</ph> si no se encontró <ph id="ph2">&lt;paramref name="value" /&gt;</ph> en el <ph id="ph3">&lt;see cref="T:System.Collections.Generic.LinkedList`1" /&gt;</ph> original.</target>       </trans-unit>
        <trans-unit id="310" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.LinkedList`1.Remove(`0)">
          <source>This method performs a linear search; therefore, this method is an O(<ph id="ph1">`n`</ph>) operation, where <ph id="ph2">`n`</ph> is <ph id="ph3">&lt;xref:System.Collections.Generic.LinkedList%601.Count%2A&gt;</ph>.</source>
          <target state="translated">Este método realiza una búsqueda lineal; por lo tanto, este método es una O (<ph id="ph1">`n`</ph>) operación, donde <ph id="ph2">`n`</ph> es <ph id="ph3">&lt;xref:System.Collections.Generic.LinkedList%601.Count%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="311" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.LinkedList`1.Remove(`0)">
          <source>For an example that includes this method, see the <ph id="ph1">&lt;xref:System.Collections.Generic.LinkedList%601&gt;</ph> class.</source>
          <target state="translated">Para obtener un ejemplo que incluye este método, consulte la <ph id="ph1">&lt;xref:System.Collections.Generic.LinkedList%601&gt;</ph> clase.</target>       </trans-unit>
        <trans-unit id="312" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.LinkedList`1.RemoveFirst">
          <source>Removes the node at the start of the <ph id="ph1">&lt;see cref="T:System.Collections.Generic.LinkedList`1" /&gt;</ph>.</source>
          <target state="translated">Quita el nodo del principio de la colección <ph id="ph1">&lt;see cref="T:System.Collections.Generic.LinkedList`1" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="313" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.LinkedList`1.RemoveFirst">
          <source>This method is an O(1) operation.</source>
          <target state="translated">Este método es una operación o (1).</target>       </trans-unit>
        <trans-unit id="314" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.LinkedList`1.RemoveFirst">
          <source>For an example that includes this method, see the <ph id="ph1">&lt;xref:System.Collections.Generic.LinkedList%601&gt;</ph> class.</source>
          <target state="translated">Para obtener un ejemplo que incluye este método, consulte la <ph id="ph1">&lt;xref:System.Collections.Generic.LinkedList%601&gt;</ph> clase.</target>       </trans-unit>
        <trans-unit id="315" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.LinkedList`1.RemoveFirst">
          <source>The <ph id="ph1">&lt;see cref="T:System.Collections.Generic.LinkedList`1" /&gt;</ph> is empty.</source>
          <target state="translated">La colección <ph id="ph1">&lt;see cref="T:System.Collections.Generic.LinkedList`1" /&gt;</ph> está vacía.</target>       </trans-unit>
        <trans-unit id="316" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.LinkedList`1.RemoveLast">
          <source>Removes the node at the end of the <ph id="ph1">&lt;see cref="T:System.Collections.Generic.LinkedList`1" /&gt;</ph>.</source>
          <target state="translated">Quita el nodo del final de la colección <ph id="ph1">&lt;see cref="T:System.Collections.Generic.LinkedList`1" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="317" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.LinkedList`1.RemoveLast">
          <source>This method is an O(1) operation.</source>
          <target state="translated">Este método es una operación o (1).</target>       </trans-unit>
        <trans-unit id="318" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.LinkedList`1.RemoveLast">
          <source>For an example that includes this method, see the <ph id="ph1">&lt;xref:System.Collections.Generic.LinkedList%601&gt;</ph> class.</source>
          <target state="translated">Para obtener un ejemplo que incluye este método, consulte la <ph id="ph1">&lt;xref:System.Collections.Generic.LinkedList%601&gt;</ph> clase.</target>       </trans-unit>
        <trans-unit id="319" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.LinkedList`1.RemoveLast">
          <source>The <ph id="ph1">&lt;see cref="T:System.Collections.Generic.LinkedList`1" /&gt;</ph> is empty.</source>
          <target state="translated">La colección <ph id="ph1">&lt;see cref="T:System.Collections.Generic.LinkedList`1" /&gt;</ph> está vacía.</target>       </trans-unit>
        <trans-unit id="320" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.LinkedList`1.System#Collections#Generic#ICollection&amp;lt;T&amp;gt;#Add(`0)">
          <source>The value to add at the end of the <ph id="ph1">&lt;see cref="T:System.Collections.Generic.ICollection`1" /&gt;</ph>.</source>
          <target state="translated">Valor que se agrega al final de la colección <ph id="ph1">&lt;see cref="T:System.Collections.Generic.ICollection`1" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="321" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.LinkedList`1.System#Collections#Generic#ICollection&amp;lt;T&amp;gt;#Add(`0)">
          <source>Adds an item at the end of the <ph id="ph1">&lt;see cref="T:System.Collections.Generic.ICollection`1" /&gt;</ph>.</source>
          <target state="translated">Agrega un elemento al final de la interfaz <ph id="ph1">&lt;see cref="T:System.Collections.Generic.ICollection`1" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="322" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.LinkedList`1.System#Collections#Generic#ICollection&amp;lt;T&amp;gt;#Add(`0)">
          <source><ph id="ph1">&lt;xref:System.Collections.Generic.LinkedList%601&gt;</ph> accepts <ph id="ph2">`null`</ph> as a valid <ph id="ph3">&lt;xref:System.Collections.Generic.LinkedListNode%601.Value%2A&gt;</ph> for reference types and allows duplicate values.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.Generic.LinkedList%601&gt;</ph> acepta <ph id="ph2">`null`</ph> como válido <ph id="ph3">&lt;xref:System.Collections.Generic.LinkedListNode%601.Value%2A&gt;</ph> para tipos de referencia y permite valores duplicados.</target>       </trans-unit>
        <trans-unit id="323" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.LinkedList`1.System#Collections#Generic#ICollection&amp;lt;T&amp;gt;#Add(`0)">
          <source>If the <ph id="ph1">&lt;xref:System.Collections.Generic.LinkedList%601&gt;</ph> is empty, the new node becomes the <ph id="ph2">&lt;xref:System.Collections.Generic.LinkedList%601.First%2A&gt;</ph> and the <ph id="ph3">&lt;xref:System.Collections.Generic.LinkedList%601.Last%2A&gt;</ph>.</source>
          <target state="translated">Si el <ph id="ph1">&lt;xref:System.Collections.Generic.LinkedList%601&gt;</ph> está vacía, el nuevo nodo deja de estar la <ph id="ph2">&lt;xref:System.Collections.Generic.LinkedList%601.First%2A&gt;</ph> y <ph id="ph3">&lt;xref:System.Collections.Generic.LinkedList%601.Last%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="324" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.LinkedList`1.System#Collections#Generic#ICollection&amp;lt;T&amp;gt;#Add(`0)">
          <source>This method is an O(1) operation.</source>
          <target state="translated">Este método es una operación o (1).</target>       </trans-unit>
        <trans-unit id="325" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.LinkedList`1.System#Collections#Generic#ICollection&amp;lt;T&amp;gt;#Add(`0)">
          <source>For an example that includes this method, see the <ph id="ph1">&lt;xref:System.Collections.Generic.LinkedList%601&gt;</ph> class.</source>
          <target state="translated">Para obtener un ejemplo que incluye este método, consulte la <ph id="ph1">&lt;xref:System.Collections.Generic.LinkedList%601&gt;</ph> clase.</target>       </trans-unit>
        <trans-unit id="326" translate="yes" xml:space="preserve" uid="P:System.Collections.Generic.LinkedList`1.System#Collections#Generic#ICollection&amp;lt;T&amp;gt;#IsReadOnly">
          <source>Gets a value indicating whether the <ph id="ph1">&lt;see cref="T:System.Collections.Generic.ICollection`1" /&gt;</ph> is read-only.</source>
          <target state="translated">Obtiene un valor que indica si <ph id="ph1">&lt;see cref="T:System.Collections.Generic.ICollection`1" /&gt;</ph> es de solo lectura.</target>       </trans-unit>
        <trans-unit id="327" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.LinkedList`1.System#Collections#Generic#ICollection&amp;lt;T&amp;gt;#IsReadOnly">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the <ph id="ph2">&lt;see cref="T:System.Collections.Generic.ICollection`1" /&gt;</ph> is read-only; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">Es <ph id="ph1">&lt;see langword="true" /&gt;</ph> si la interfaz <ph id="ph2">&lt;see cref="T:System.Collections.Generic.ICollection`1" /&gt;</ph> es de solo lectura; de lo contrario, es <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="328" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.LinkedList`1.System#Collections#Generic#ICollection&amp;lt;T&amp;gt;#IsReadOnly">
          <source>In the default implementation of <ph id="ph1">&lt;see cref="T:System.Collections.Generic.LinkedList`1" /&gt;</ph>, this property always returns <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">En la implementación predeterminada de <ph id="ph1">&lt;see cref="T:System.Collections.Generic.LinkedList`1" /&gt;</ph>, esta propiedad siempre devuelve <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="329" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.LinkedList`1.System#Collections#Generic#ICollection&amp;lt;T&amp;gt;#IsReadOnly">
          <source>A collection that is read-only does not allow the addition, removal, or modification of elements after the collection is created.</source>
          <target state="translated">Una colección de solo lectura no permite que se agreguen, quiten o modifiquen elementos una vez que se ha creado.</target>       </trans-unit>
        <trans-unit id="330" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.LinkedList`1.System#Collections#Generic#ICollection&amp;lt;T&amp;gt;#IsReadOnly">
          <source>A collection that is read-only is simply a collection with a wrapper that prevents modifying the collection; therefore, if changes are made to the underlying collection, the read-only collection reflects those changes.</source>
          <target state="translated">Una colección que es de solo lectura es simplemente una colección con un contenedor que impide modificar la colección; por lo tanto, si se realizan cambios en la colección subyacente, la colección de solo lectura refleja esos cambios.</target>       </trans-unit>
        <trans-unit id="331" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.LinkedList`1.System#Collections#Generic#ICollection&amp;lt;T&amp;gt;#IsReadOnly">
          <source>Retrieving the value of this property is an O(1) operation.</source>
          <target state="translated">La recuperación del valor de esta propiedad es una operación O(1).</target>       </trans-unit>
        <trans-unit id="332" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.LinkedList`1.System#Collections#Generic#IEnumerable&amp;lt;T&amp;gt;#GetEnumerator">
          <source>Returns an enumerator that iterates through a collection.</source>
          <target state="translated">Devuelve un enumerador que recorre en iteración una colección.</target>       </trans-unit>
        <trans-unit id="333" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.LinkedList`1.System#Collections#Generic#IEnumerable&amp;lt;T&amp;gt;#GetEnumerator">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerator`1" /&gt;</ph> that can be used to iterate through the collection.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerator`1" /&gt;</ph> que se puede utilizar para recorrer en iteración la colección.</target>       </trans-unit>
        <trans-unit id="334" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.LinkedList`1.System#Collections#Generic#IEnumerable&amp;lt;T&amp;gt;#GetEnumerator">
          <source>The <ph id="ph1">`foreach`</ph> statement of the C# language (<ph id="ph2">`for each`</ph> in C++, <ph id="ph3">`For Each`</ph> in Visual Basic) hides the complexity of the enumerators.</source>
          <target state="translated">El <ph id="ph1">`foreach`</ph> instrucción del lenguaje C# (<ph id="ph2">`for each`</ph> en C++, <ph id="ph3">`For Each`</ph> en Visual Basic) oculta la complejidad de los enumeradores.</target>       </trans-unit>
        <trans-unit id="335" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.LinkedList`1.System#Collections#Generic#IEnumerable&amp;lt;T&amp;gt;#GetEnumerator">
          <source>Therefore, using <ph id="ph1">`foreach`</ph> is recommended, instead of directly manipulating the enumerator.</source>
          <target state="translated">Por lo tanto, se recomienda el uso de <ph id="ph1">`foreach`</ph>, en lugar de manipular directamente el enumerador.</target>       </trans-unit>
        <trans-unit id="336" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.LinkedList`1.System#Collections#Generic#IEnumerable&amp;lt;T&amp;gt;#GetEnumerator">
          <source>Enumerators can be used to read the data in the collection, but they cannot be used to modify the underlying collection.</source>
          <target state="translated">Los enumeradores pueden usarse para leer los datos de la colección, pero no para modificar la colección subyacente.</target>       </trans-unit>
        <trans-unit id="337" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.LinkedList`1.System#Collections#Generic#IEnumerable&amp;lt;T&amp;gt;#GetEnumerator">
          <source>Initially, the enumerator is positioned before the first element in the collection.</source>
          <target state="translated">En principio, el enumerador se coloca antes del primer elemento de la colección.</target>       </trans-unit>
        <trans-unit id="338" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.LinkedList`1.System#Collections#Generic#IEnumerable&amp;lt;T&amp;gt;#GetEnumerator">
          <source>At this position, <ph id="ph1">&lt;xref:System.Collections.Generic.IEnumerator%601.Current%2A&gt;</ph> is undefined.</source>
          <target state="translated">En esta posición, el valor de propiedad <ph id="ph1">&lt;xref:System.Collections.Generic.IEnumerator%601.Current%2A&gt;</ph> está sin definir.</target>       </trans-unit>
        <trans-unit id="339" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.LinkedList`1.System#Collections#Generic#IEnumerable&amp;lt;T&amp;gt;#GetEnumerator">
          <source>Therefore, you must call <ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> to advance the enumerator to the first element of the collection before reading the value of <ph id="ph2">&lt;xref:System.Collections.Generic.IEnumerator%601.Current%2A&gt;</ph>.</source>
          <target state="translated">Por lo tanto, debe llamar a <ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> para adelantar el enumerador hasta el primer elemento de la colección antes de leer el valor de <ph id="ph2">&lt;xref:System.Collections.Generic.IEnumerator%601.Current%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="340" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.LinkedList`1.System#Collections#Generic#IEnumerable&amp;lt;T&amp;gt;#GetEnumerator">
          <source><ph id="ph1">&lt;xref:System.Collections.Generic.IEnumerator%601.Current%2A&gt;</ph> returns the same object until <ph id="ph2">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> is called.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.Generic.IEnumerator%601.Current%2A&gt;</ph> devuelve el mismo objeto hasta que se llama a <ph id="ph2">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="341" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.LinkedList`1.System#Collections#Generic#IEnumerable&amp;lt;T&amp;gt;#GetEnumerator">
          <source><ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> sets <ph id="ph2">&lt;xref:System.Collections.Generic.IEnumerator%601.Current%2A&gt;</ph> to the next element.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> establece <ph id="ph2">&lt;xref:System.Collections.Generic.IEnumerator%601.Current%2A&gt;</ph> en el siguiente elemento.</target>       </trans-unit>
        <trans-unit id="342" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.LinkedList`1.System#Collections#Generic#IEnumerable&amp;lt;T&amp;gt;#GetEnumerator">
          <source>If <ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> passes the end of the collection, the enumerator is positioned after the last element in the collection and <ph id="ph2">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> returns <ph id="ph3">`false`</ph>.</source>
          <target state="translated">Si <ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> pasa el final de la colección, el enumerador se coloca después del último elemento de la colección y <ph id="ph2">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> devuelve <ph id="ph3">`false`</ph>.</target>       </trans-unit>
        <trans-unit id="343" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.LinkedList`1.System#Collections#Generic#IEnumerable&amp;lt;T&amp;gt;#GetEnumerator">
          <source>When the enumerator is at this position, subsequent calls to <ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> also return <ph id="ph2">`false`</ph>.</source>
          <target state="translated">Mientras el enumerador permanezca en esta posición, las llamadas subsiguientes a <ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> también devolver <ph id="ph2">`false`</ph>.</target>       </trans-unit>
        <trans-unit id="344" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.LinkedList`1.System#Collections#Generic#IEnumerable&amp;lt;T&amp;gt;#GetEnumerator">
          <source>If the last call to <ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> returned <ph id="ph2">`false`</ph>, <ph id="ph3">&lt;xref:System.Collections.Generic.IEnumerator%601.Current%2A&gt;</ph> is undefined.</source>
          <target state="translated">Si la última llamada a <ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> devuelve <ph id="ph2">`false`</ph>, <ph id="ph3">&lt;xref:System.Collections.Generic.IEnumerator%601.Current%2A&gt;</ph> no está definido.</target>       </trans-unit>
        <trans-unit id="345" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.LinkedList`1.System#Collections#Generic#IEnumerable&amp;lt;T&amp;gt;#GetEnumerator">
          <source>You cannot set <ph id="ph1">&lt;xref:System.Collections.Generic.IEnumerator%601.Current%2A&gt;</ph> to the first element of the collection again; you must create a new enumerator instance instead.</source>
          <target state="translated">No puede volver a establecer la propiedad <ph id="ph1">&lt;xref:System.Collections.Generic.IEnumerator%601.Current%2A&gt;</ph> en el primer elemento de la colección, sino que debe crear una nueva instancia del enumerador.</target>       </trans-unit>
        <trans-unit id="346" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.LinkedList`1.System#Collections#Generic#IEnumerable&amp;lt;T&amp;gt;#GetEnumerator">
          <source>An enumerator remains valid as long as the collection remains unchanged.</source>
          <target state="translated">Un enumerador es válido mientras la colección no cambie.</target>       </trans-unit>
        <trans-unit id="347" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.LinkedList`1.System#Collections#Generic#IEnumerable&amp;lt;T&amp;gt;#GetEnumerator">
          <source>If changes are made to the collection, such as adding, modifying, or deleting elements, the enumerator is irrecoverably invalidated and its behavior is undefined.</source>
          <target state="translated">Si se hacen cambios en la colección (como agregar, modificar o eliminar elementos), el enumerador queda invalidado permanentemente y su comportamiento es indefinido.</target>       </trans-unit>
        <trans-unit id="348" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.LinkedList`1.System#Collections#Generic#IEnumerable&amp;lt;T&amp;gt;#GetEnumerator">
          <source>The enumerator does not have exclusive access to the collection; therefore, enumerating through a collection is intrinsically not a thread-safe procedure.</source>
          <target state="translated">El enumerador no tiene acceso exclusivo a la colección y, por tanto, la enumeración en una colección no es intrínsicamente un procedimiento seguro para subprocesos.</target>       </trans-unit>
        <trans-unit id="349" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.LinkedList`1.System#Collections#Generic#IEnumerable&amp;lt;T&amp;gt;#GetEnumerator">
          <source>To guarantee thread safety during enumeration, you can lock the collection during the entire enumeration.</source>
          <target state="translated">A fin de garantizar la seguridad de los subprocesos, se puede bloquear la colección durante toda la enumeración.</target>       </trans-unit>
        <trans-unit id="350" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.LinkedList`1.System#Collections#Generic#IEnumerable&amp;lt;T&amp;gt;#GetEnumerator">
          <source>To allow the collection to be accessed by multiple threads for reading and writing, you must implement your own synchronization.</source>
          <target state="translated">Para permitir que varios subprocesos obtengan acceso de lectura y escritura a la colección, debe implementar su propia sincronización.</target>       </trans-unit>
        <trans-unit id="351" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.LinkedList`1.System#Collections#Generic#IEnumerable&amp;lt;T&amp;gt;#GetEnumerator">
          <source>Default implementations of collections in <ph id="ph1">&lt;xref:System.Collections.Generic?displayProperty=nameWithType&gt;</ph> are not synchronized.</source>
          <target state="translated">Las implementaciones de las recopilaciones predeterminadas <ph id="ph1">&lt;xref:System.Collections.Generic?displayProperty=nameWithType&gt;</ph> no están sincronizadas.</target>       </trans-unit>
        <trans-unit id="352" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.LinkedList`1.System#Collections#Generic#IEnumerable&amp;lt;T&amp;gt;#GetEnumerator">
          <source>This method is an O(1) operation.</source>
          <target state="translated">Este método es una operación o (1).</target>       </trans-unit>
        <trans-unit id="353" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.LinkedList`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
          <source>The one-dimensional <ph id="ph1">&lt;see cref="T:System.Array" /&gt;</ph> that is the destination of the elements copied from <ph id="ph2">&lt;see cref="T:System.Collections.ICollection" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Array" /&gt;</ph> unidimensional que constituye el destino de los elementos copiados de <ph id="ph2">&lt;see cref="T:System.Collections.ICollection" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="354" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.LinkedList`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Array" /&gt;</ph> must have zero-based indexing.</source>
          <target state="translated">La matriz <ph id="ph1">&lt;see cref="T:System.Array" /&gt;</ph> debe tener una indización de base cero.</target>       </trans-unit>
        <trans-unit id="355" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.LinkedList`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
          <source>The zero-based index in <bpt id="p1">&lt;c&gt;</bpt>array<ept id="p1">&lt;/c&gt;</ept> at which copying begins.</source>
          <target state="translated">Índice de base cero de <bpt id="p1">&lt;c&gt;</bpt>array<ept id="p1">&lt;/c&gt;</ept> donde comienza la copia.</target>       </trans-unit>
        <trans-unit id="356" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.LinkedList`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
          <source>Copies the elements of the <ph id="ph1">&lt;see cref="T:System.Collections.ICollection" /&gt;</ph> to an <ph id="ph2">&lt;see cref="T:System.Array" /&gt;</ph>, starting at a particular <ph id="ph3">&lt;see cref="T:System.Array" /&gt;</ph> index.</source>
          <target state="translated">Copia los elementos de <ph id="ph1">&lt;see cref="T:System.Collections.ICollection" /&gt;</ph> en <ph id="ph2">&lt;see cref="T:System.Array" /&gt;</ph>, empezando por un índice determinado de <ph id="ph3">&lt;see cref="T:System.Array" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="357" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.LinkedList`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
          <source>If the type of the source <ph id="ph1">&lt;xref:System.Collections.ICollection&gt;</ph> cannot be cast automatically to the type of the destination <ph id="ph2">`array`</ph>, the non-generic implementations of <ph id="ph3">&lt;xref:System.Collections.ICollection.CopyTo%2A?displayProperty=nameWithType&gt;</ph> throw <ph id="ph4">&lt;xref:System.InvalidCastException&gt;</ph>, whereas the generic implementations throw <ph id="ph5">&lt;xref:System.ArgumentException&gt;</ph>.</source>
          <target state="translated">Si el tipo del origen de <ph id="ph1">&lt;xref:System.Collections.ICollection&gt;</ph> no puede convertirse automáticamente al tipo del destino de <ph id="ph2">`array`</ph>, las implementaciones no genéricas de <ph id="ph3">&lt;xref:System.Collections.ICollection.CopyTo%2A?displayProperty=nameWithType&gt;</ph> throw <ph id="ph4">&lt;xref:System.InvalidCastException&gt;</ph>, mientras que las implementaciones genéricas inician <ph id="ph5">&lt;xref:System.ArgumentException&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="358" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.LinkedList`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
          <source>This method is an O(<ph id="ph1">`n`</ph>) operation, where <ph id="ph2">`n`</ph> is <ph id="ph3">&lt;xref:System.Collections.Generic.LinkedList%601.Count%2A&gt;</ph>.</source>
          <target state="translated">Este método es una O (<ph id="ph1">`n`</ph>) operación, donde <ph id="ph2">`n`</ph> es <ph id="ph3">&lt;xref:System.Collections.Generic.LinkedList%601.Count%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="359" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.LinkedList`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="array" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="array" /&gt;</ph> es <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="360" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.LinkedList`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="index" /&gt;</ph> is less than zero.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="index" /&gt;</ph> es menor que cero.</target>       </trans-unit>
        <trans-unit id="361" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.LinkedList`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="array" /&gt;</ph> is multidimensional.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="array" /&gt;</ph> es multidimensional.</target>       </trans-unit>
        <trans-unit id="362" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.LinkedList`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
          <source>-or-</source>
          <target state="translated">O bien</target>       </trans-unit>
        <trans-unit id="363" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.LinkedList`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="array" /&gt;</ph> does not have zero-based indexing.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="array" /&gt;</ph> no tiene índices de base cero.</target>       </trans-unit>
        <trans-unit id="364" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.LinkedList`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
          <source>-or-</source>
          <target state="translated">O bien</target>       </trans-unit>
        <trans-unit id="365" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.LinkedList`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
          <source>The number of elements in the source <ph id="ph1">&lt;see cref="T:System.Collections.ICollection" /&gt;</ph> is greater than the available space from <ph id="ph2">&lt;paramref name="index" /&gt;</ph> to the end of the destination <ph id="ph3">&lt;paramref name="array" /&gt;</ph>.</source>
          <target state="translated">El número de elementos de la <ph id="ph1">&lt;see cref="T:System.Collections.ICollection" /&gt;</ph> de origen es mayor que el espacio disponible desde <ph id="ph2">&lt;paramref name="index" /&gt;</ph> hasta el final de la <ph id="ph3">&lt;paramref name="array" /&gt;</ph> de destino.</target>       </trans-unit>
        <trans-unit id="366" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.LinkedList`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
          <source>-or-</source>
          <target state="translated">O bien</target>       </trans-unit>
        <trans-unit id="367" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.LinkedList`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
          <source>The type of the source <ph id="ph1">&lt;see cref="T:System.Collections.ICollection" /&gt;</ph> cannot be cast automatically to the type of the destination <ph id="ph2">&lt;paramref name="array" /&gt;</ph>.</source>
          <target state="translated">El tipo de la <ph id="ph1">&lt;see cref="T:System.Collections.ICollection" /&gt;</ph> de origen no puede convertirse automáticamente al tipo de la <ph id="ph2">&lt;paramref name="array" /&gt;</ph> de destino.</target>       </trans-unit>
        <trans-unit id="368" translate="yes" xml:space="preserve" uid="P:System.Collections.Generic.LinkedList`1.System#Collections#ICollection#IsSynchronized">
          <source>Gets a value indicating whether access to the <ph id="ph1">&lt;see cref="T:System.Collections.ICollection" /&gt;</ph> is synchronized (thread safe).</source>
          <target state="translated">Obtiene un valor que indica si el acceso a la interfaz <ph id="ph1">&lt;see cref="T:System.Collections.ICollection" /&gt;</ph> está sincronizado (es seguro para subprocesos).</target>       </trans-unit>
        <trans-unit id="369" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.LinkedList`1.System#Collections#ICollection#IsSynchronized">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if access to the <ph id="ph2">&lt;see cref="T:System.Collections.ICollection" /&gt;</ph> is synchronized (thread safe); otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">Es <ph id="ph1">&lt;see langword="true" /&gt;</ph> si el acceso a <ph id="ph2">&lt;see cref="T:System.Collections.ICollection" /&gt;</ph> está sincronizado (es seguro para subprocesos); de lo contrario, es <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="370" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.LinkedList`1.System#Collections#ICollection#IsSynchronized">
          <source>In the default implementation of <ph id="ph1">&lt;see cref="T:System.Collections.Generic.LinkedList`1" /&gt;</ph>, this property always returns <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">En la implementación predeterminada de <ph id="ph1">&lt;see cref="T:System.Collections.Generic.LinkedList`1" /&gt;</ph>, esta propiedad siempre devuelve <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="371" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.LinkedList`1.System#Collections#ICollection#IsSynchronized">
          <source>Default implementations of collections in <ph id="ph1">&lt;xref:System.Collections.Generic?displayProperty=nameWithType&gt;</ph> are not synchronized.</source>
          <target state="translated">Las implementaciones de las recopilaciones predeterminadas <ph id="ph1">&lt;xref:System.Collections.Generic?displayProperty=nameWithType&gt;</ph> no están sincronizadas.</target>       </trans-unit>
        <trans-unit id="372" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.LinkedList`1.System#Collections#ICollection#IsSynchronized">
          <source>Enumerating through a collection is intrinsically not a thread-safe procedure.</source>
          <target state="translated">Enumerar una colección no es intrínsecamente un procedimiento seguro para subprocesos.</target>       </trans-unit>
        <trans-unit id="373" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.LinkedList`1.System#Collections#ICollection#IsSynchronized">
          <source>To guarantee thread safety during enumeration, you can lock the collection during the entire enumeration.</source>
          <target state="translated">A fin de garantizar la seguridad de los subprocesos, se puede bloquear la colección durante toda la enumeración.</target>       </trans-unit>
        <trans-unit id="374" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.LinkedList`1.System#Collections#ICollection#IsSynchronized">
          <source>To allow the collection to be accessed by multiple threads for reading and writing, you must implement your own synchronization.</source>
          <target state="translated">Para permitir que varios subprocesos obtengan acceso de lectura y escritura a la colección, debe implementar su propia sincronización.</target>       </trans-unit>
        <trans-unit id="375" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.LinkedList`1.System#Collections#ICollection#IsSynchronized">
          <source><ph id="ph1">&lt;xref:System.Collections.ICollection.SyncRoot%2A&gt;</ph> returns an object that can be used to synchronize access to the <ph id="ph2">&lt;xref:System.Collections.ICollection&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.ICollection.SyncRoot%2A&gt;</ph> Devuelve un objeto que puede utilizarse para sincronizar el acceso a la <ph id="ph2">&lt;xref:System.Collections.ICollection&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="376" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.LinkedList`1.System#Collections#ICollection#IsSynchronized">
          <source>Synchronization is effective only if all threads lock this object before accessing the collection.</source>
          <target state="translated">La sincronización es efectiva sólo si todos los subprocesos bloquean este objeto antes de obtener acceso a la colección.</target>       </trans-unit>
        <trans-unit id="377" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.LinkedList`1.System#Collections#ICollection#IsSynchronized">
          <source>Retrieving the value of this property is an O(1) operation.</source>
          <target state="translated">La recuperación del valor de esta propiedad es una operación O(1).</target>       </trans-unit>
        <trans-unit id="378" translate="yes" xml:space="preserve" uid="P:System.Collections.Generic.LinkedList`1.System#Collections#ICollection#SyncRoot">
          <source>Gets an object that can be used to synchronize access to the <ph id="ph1">&lt;see cref="T:System.Collections.ICollection" /&gt;</ph>.</source>
          <target state="translated">Obtiene un objeto que se puede usar para sincronizar el acceso a <ph id="ph1">&lt;see cref="T:System.Collections.ICollection" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="379" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.LinkedList`1.System#Collections#ICollection#SyncRoot">
          <source>An object that can be used to synchronize access to the <ph id="ph1">&lt;see cref="T:System.Collections.ICollection" /&gt;</ph>.</source>
          <target state="translated">Objeto que se puede usar para sincronizar el acceso a <ph id="ph1">&lt;see cref="T:System.Collections.ICollection" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="380" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.LinkedList`1.System#Collections#ICollection#SyncRoot">
          <source>In the default implementation of <ph id="ph1">&lt;see cref="T:System.Collections.Generic.LinkedList`1" /&gt;</ph>, this property always returns the current instance.</source>
          <target state="translated">En la implementación predeterminada de <ph id="ph1">&lt;see cref="T:System.Collections.Generic.LinkedList`1" /&gt;</ph>, esta propiedad siempre devuelve la instancia actual.</target>       </trans-unit>
        <trans-unit id="381" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.LinkedList`1.System#Collections#ICollection#SyncRoot">
          <source>Default implementations of collections in <ph id="ph1">&lt;xref:System.Collections.Generic?displayProperty=nameWithType&gt;</ph> are not synchronized.</source>
          <target state="translated">Las implementaciones de las recopilaciones predeterminadas <ph id="ph1">&lt;xref:System.Collections.Generic?displayProperty=nameWithType&gt;</ph> no están sincronizadas.</target>       </trans-unit>
        <trans-unit id="382" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.LinkedList`1.System#Collections#ICollection#SyncRoot">
          <source>Enumerating through a collection is intrinsically not a thread-safe procedure.</source>
          <target state="translated">Enumerar una colección no es intrínsecamente un procedimiento seguro para subprocesos.</target>       </trans-unit>
        <trans-unit id="383" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.LinkedList`1.System#Collections#ICollection#SyncRoot">
          <source>To guarantee thread safety during enumeration, you can lock the collection during the entire enumeration.</source>
          <target state="translated">A fin de garantizar la seguridad de los subprocesos, se puede bloquear la colección durante toda la enumeración.</target>       </trans-unit>
        <trans-unit id="384" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.LinkedList`1.System#Collections#ICollection#SyncRoot">
          <source>To allow the collection to be accessed by multiple threads for reading and writing, you must implement your own synchronization.</source>
          <target state="translated">Para permitir que varios subprocesos obtengan acceso de lectura y escritura a la colección, debe implementar su propia sincronización.</target>       </trans-unit>
        <trans-unit id="385" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.LinkedList`1.System#Collections#ICollection#SyncRoot">
          <source><ph id="ph1">&lt;xref:System.Collections.ICollection.SyncRoot%2A&gt;</ph> returns an object that can be used to synchronize access to the <ph id="ph2">&lt;xref:System.Collections.ICollection&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.ICollection.SyncRoot%2A&gt;</ph> Devuelve un objeto que puede utilizarse para sincronizar el acceso a la <ph id="ph2">&lt;xref:System.Collections.ICollection&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="386" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.LinkedList`1.System#Collections#ICollection#SyncRoot">
          <source>Synchronization is effective only if all threads lock this object before accessing the collection.</source>
          <target state="translated">La sincronización es efectiva sólo si todos los subprocesos bloquean este objeto antes de obtener acceso a la colección.</target>       </trans-unit>
        <trans-unit id="387" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.LinkedList`1.System#Collections#ICollection#SyncRoot">
          <source>The following code shows the use of the <ph id="ph1">&lt;xref:System.Collections.ICollection.SyncRoot%2A&gt;</ph> property for C#, C++, and Visual Basic.</source>
          <target state="translated">El código siguiente muestra el uso de la <ph id="ph1">&lt;xref:System.Collections.ICollection.SyncRoot%2A&gt;</ph> propiedad para C#, C++ y Visual Basic.</target>       </trans-unit>
        <trans-unit id="388" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.LinkedList`1.System#Collections#ICollection#SyncRoot">
          <source>Retrieving the value of this property is an O(1) operation.</source>
          <target state="translated">La recuperación del valor de esta propiedad es una operación O(1).</target>       </trans-unit>
        <trans-unit id="389" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.LinkedList`1.System#Collections#IEnumerable#GetEnumerator">
          <source>Returns an enumerator that iterates through the linked list as a collection.</source>
          <target state="translated">Devuelve un enumerador que recorre en iteración la lista vinculada como colección.</target>       </trans-unit>
        <trans-unit id="390" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.LinkedList`1.System#Collections#IEnumerable#GetEnumerator">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.IEnumerator" /&gt;</ph> that can be used to iterate through the linked list as a collection.</source>
          <target state="translated">Interfaz <ph id="ph1">&lt;see cref="T:System.Collections.IEnumerator" /&gt;</ph> que se puede utilizar para recorrer la lista vinculada como colección.</target>       </trans-unit>
        <trans-unit id="391" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.LinkedList`1.System#Collections#IEnumerable#GetEnumerator">
          <source>The <ph id="ph1">`foreach`</ph> statement of the C# language (<ph id="ph2">`for each`</ph> in C++, <ph id="ph3">`For Each`</ph> in Visual Basic) hides the complexity of the enumerators.</source>
          <target state="translated">El <ph id="ph1">`foreach`</ph> instrucción del lenguaje C# (<ph id="ph2">`for each`</ph> en C++, <ph id="ph3">`For Each`</ph> en Visual Basic) oculta la complejidad de los enumeradores.</target>       </trans-unit>
        <trans-unit id="392" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.LinkedList`1.System#Collections#IEnumerable#GetEnumerator">
          <source>Therefore, using <ph id="ph1">`foreach`</ph> is recommended, instead of directly manipulating the enumerator.</source>
          <target state="translated">Por lo tanto, se recomienda el uso de <ph id="ph1">`foreach`</ph>, en lugar de manipular directamente el enumerador.</target>       </trans-unit>
        <trans-unit id="393" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.LinkedList`1.System#Collections#IEnumerable#GetEnumerator">
          <source>Enumerators can be used to read the data in the collection, but they cannot be used to modify the underlying collection.</source>
          <target state="translated">Los enumeradores pueden usarse para leer los datos de la colección, pero no para modificar la colección subyacente.</target>       </trans-unit>
        <trans-unit id="394" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.LinkedList`1.System#Collections#IEnumerable#GetEnumerator">
          <source>Initially, the enumerator is positioned before the first element in the collection.</source>
          <target state="translated">En principio, el enumerador se coloca antes del primer elemento de la colección.</target>       </trans-unit>
        <trans-unit id="395" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.LinkedList`1.System#Collections#IEnumerable#GetEnumerator">
          <source><ph id="ph1">&lt;xref:System.Collections.IEnumerator.Reset%2A&gt;</ph> also brings the enumerator back to this position.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.IEnumerator.Reset%2A&gt;</ph> también devuelve el enumerador a esta posición.</target>       </trans-unit>
        <trans-unit id="396" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.LinkedList`1.System#Collections#IEnumerable#GetEnumerator">
          <source>At this position, <ph id="ph1">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;</ph> is undefined.</source>
          <target state="translated">En esta posición, el valor de propiedad <ph id="ph1">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;</ph> está sin definir.</target>       </trans-unit>
        <trans-unit id="397" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.LinkedList`1.System#Collections#IEnumerable#GetEnumerator">
          <source>Therefore, you must call <ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> to advance the enumerator to the first element of the collection before reading the value of <ph id="ph2">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;</ph>.</source>
          <target state="translated">Por lo tanto, debe llamar a <ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> para adelantar el enumerador hasta el primer elemento de la colección antes de leer el valor de <ph id="ph2">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="398" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.LinkedList`1.System#Collections#IEnumerable#GetEnumerator">
          <source><ph id="ph1">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;</ph> returns the same object until either <ph id="ph2">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> or <ph id="ph3">&lt;xref:System.Collections.IEnumerator.Reset%2A&gt;</ph> is called.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;</ph> devuelve el mismo objeto hasta que se llama a <ph id="ph2">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> o a <ph id="ph3">&lt;xref:System.Collections.IEnumerator.Reset%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="399" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.LinkedList`1.System#Collections#IEnumerable#GetEnumerator">
          <source><ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> sets <ph id="ph2">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;</ph> to the next element.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> establece <ph id="ph2">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;</ph> en el siguiente elemento.</target>       </trans-unit>
        <trans-unit id="400" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.LinkedList`1.System#Collections#IEnumerable#GetEnumerator">
          <source>If <ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> passes the end of the collection, the enumerator is positioned after the last element in the collection and <ph id="ph2">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> returns <ph id="ph3">`false`</ph>.</source>
          <target state="translated">Si <ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> pasa el final de la colección, el enumerador se coloca después del último elemento de la colección y <ph id="ph2">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> devuelve <ph id="ph3">`false`</ph>.</target>       </trans-unit>
        <trans-unit id="401" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.LinkedList`1.System#Collections#IEnumerable#GetEnumerator">
          <source>When the enumerator is at this position, subsequent calls to <ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> also return <ph id="ph2">`false`</ph>.</source>
          <target state="translated">Mientras el enumerador permanezca en esta posición, las llamadas subsiguientes a <ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> también devolver <ph id="ph2">`false`</ph>.</target>       </trans-unit>
        <trans-unit id="402" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.LinkedList`1.System#Collections#IEnumerable#GetEnumerator">
          <source>If the last call to <ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> returned <ph id="ph2">`false`</ph>, <ph id="ph3">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;</ph> is undefined.</source>
          <target state="translated">Si la última llamada a <ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> devuelve <ph id="ph2">`false`</ph>, <ph id="ph3">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;</ph> no está definido.</target>       </trans-unit>
        <trans-unit id="403" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.LinkedList`1.System#Collections#IEnumerable#GetEnumerator">
          <source>To set <ph id="ph1">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;</ph> to the first element of the collection again, you can call <ph id="ph2">&lt;xref:System.Collections.IEnumerator.Reset%2A&gt;</ph> followed by <ph id="ph3">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph>.</source>
          <target state="translated">Para volver a establecer el valor de <ph id="ph1">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;</ph> en el primer elemento de la colección, se puede llamar primero a <ph id="ph2">&lt;xref:System.Collections.IEnumerator.Reset%2A&gt;</ph> y después a <ph id="ph3">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="404" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.LinkedList`1.System#Collections#IEnumerable#GetEnumerator">
          <source>An enumerator remains valid as long as the collection remains unchanged.</source>
          <target state="translated">Un enumerador es válido mientras la colección no cambie.</target>       </trans-unit>
        <trans-unit id="405" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.LinkedList`1.System#Collections#IEnumerable#GetEnumerator">
          <source>If changes are made to the collection, such as adding, modifying, or deleting elements, the enumerator is irrecoverably invalidated and its behavior is undefined.</source>
          <target state="translated">Si se hacen cambios en la colección (como agregar, modificar o eliminar elementos), el enumerador queda invalidado permanentemente y su comportamiento es indefinido.</target>       </trans-unit>
        <trans-unit id="406" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.LinkedList`1.System#Collections#IEnumerable#GetEnumerator">
          <source>The enumerator does not have exclusive access to the collection; therefore, enumerating through a collection is intrinsically not a thread-safe procedure.</source>
          <target state="translated">El enumerador no tiene acceso exclusivo a la colección y, por tanto, la enumeración en una colección no es intrínsicamente un procedimiento seguro para subprocesos.</target>       </trans-unit>
        <trans-unit id="407" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.LinkedList`1.System#Collections#IEnumerable#GetEnumerator">
          <source>To guarantee thread safety during enumeration, you can lock the collection during the entire enumeration.</source>
          <target state="translated">A fin de garantizar la seguridad de los subprocesos, se puede bloquear la colección durante toda la enumeración.</target>       </trans-unit>
        <trans-unit id="408" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.LinkedList`1.System#Collections#IEnumerable#GetEnumerator">
          <source>To allow the collection to be accessed by multiple threads for reading and writing, you must implement your own synchronization.</source>
          <target state="translated">Para permitir que varios subprocesos obtengan acceso de lectura y escritura a la colección, debe implementar su propia sincronización.</target>       </trans-unit>
        <trans-unit id="409" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.LinkedList`1.System#Collections#IEnumerable#GetEnumerator">
          <source>Default implementations of collections in <ph id="ph1">&lt;xref:System.Collections.Generic?displayProperty=nameWithType&gt;</ph> are not synchronized.</source>
          <target state="translated">Las implementaciones de las recopilaciones predeterminadas <ph id="ph1">&lt;xref:System.Collections.Generic?displayProperty=nameWithType&gt;</ph> no están sincronizadas.</target>       </trans-unit>
        <trans-unit id="410" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.LinkedList`1.System#Collections#IEnumerable#GetEnumerator">
          <source>This method is an O(1) operation.</source>
          <target state="translated">Este método es una operación o (1).</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>