<Type Name="CompositeDesignerTheme" FullName="System.Workflow.ComponentModel.Design.CompositeDesignerTheme">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="16ee469cb9d273206b495ae5a8df5652d011361d" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="es-ES" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36451028" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class CompositeDesignerTheme : System.Workflow.ComponentModel.Design.ActivityDesignerTheme" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit CompositeDesignerTheme extends System.Workflow.ComponentModel.Design.ActivityDesignerTheme" />
  <TypeSignature Language="DocId" Value="T:System.Workflow.ComponentModel.Design.CompositeDesignerTheme" />
  <TypeSignature Language="VB.NET" Value="Public Class CompositeDesignerTheme&#xA;Inherits ActivityDesignerTheme" />
  <TypeSignature Language="C++ CLI" Value="public ref class CompositeDesignerTheme : System::Workflow::ComponentModel::Design::ActivityDesignerTheme" />
  <TypeSignature Language="F#" Value="type CompositeDesignerTheme = class&#xA;    inherit ActivityDesignerTheme" />
  <AssemblyInfo>
    <AssemblyName>System.Workflow.ComponentModel</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Workflow.ComponentModel.Design.ActivityDesignerTheme</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Obsolete("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Proporciona los valores de tema a los objetos <see cref="T:System.Workflow.ComponentModel.Design.CompositeActivityDesigner" />.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  [!INCLUDE[DeprecatedContent](~/includes/deprecatedcontent-md.md)]  
  
 La clase <xref:System.Workflow.ComponentModel.Design.CompositeDesignerTheme> controla la apariencia y funcionamiento de un objeto <xref:System.Workflow.ComponentModel.Design.CompositeActivityDesigner> en una superficie de diseño de flujo de trabajo.  
  
   
  
## Examples  
 El ejemplo siguiente muestra cómo crear un <xref:System.Workflow.ComponentModel.Design.CompositeDesignerTheme> personalizado derivando de la clase <xref:System.Workflow.ComponentModel.Design.CompositeDesignerTheme> y estableciendo las propiedades adecuadas para el nuevo tema.  
  
 [!code-csharp[WF_Samples#30](~/samples/snippets/csharp/VS_Snippets_CFX/wf_samples/cs/snippets.cs#30)]
 [!code-vb[WF_Samples#30](~/samples/snippets/visualbasic/VS_Snippets_CFX/wf_samples/vb/snippets.vb#30)]  
  
 Para utilizar el tema en <xref:System.Workflow.ComponentModel.Design.CompositeActivityDesigner>, aplique <xref:System.Workflow.ComponentModel.Design.ActivityDesignerThemeAttribute> a la clase <xref:System.Workflow.ComponentModel.Design.CompositeActivityDesigner>.  
  
 [!code-csharp[WF_Samples#24](~/samples/snippets/csharp/VS_Snippets_CFX/wf_samples/cs/snippets.cs#24)]
 [!code-vb[WF_Samples#24](~/samples/snippets/visualbasic/VS_Snippets_CFX/wf_samples/vb/snippets.vb#24)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CompositeDesignerTheme (System.Workflow.ComponentModel.Design.WorkflowTheme theme);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Workflow.ComponentModel.Design.WorkflowTheme theme) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.ComponentModel.Design.CompositeDesignerTheme.#ctor(System.Workflow.ComponentModel.Design.WorkflowTheme)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (theme As WorkflowTheme)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; CompositeDesignerTheme(System::Workflow::ComponentModel::Design::WorkflowTheme ^ theme);" />
      <MemberSignature Language="F#" Value="new System.Workflow.ComponentModel.Design.CompositeDesignerTheme : System.Workflow.ComponentModel.Design.WorkflowTheme -&gt; System.Workflow.ComponentModel.Design.CompositeDesignerTheme" Usage="new System.Workflow.ComponentModel.Design.CompositeDesignerTheme theme" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.ComponentModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="theme" Type="System.Workflow.ComponentModel.Design.WorkflowTheme" />
      </Parameters>
      <Docs>
        <param name="theme">
          <see cref="T:System.Workflow.ComponentModel.Design.WorkflowTheme" /> para asociar con el tema de diseñador compuesto.</param>
        <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Workflow.ComponentModel.Design.CompositeDesignerTheme" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 El ejemplo siguiente muestra cómo crear un <xref:System.Workflow.ComponentModel.Design.CompositeDesignerTheme> personalizado derivando de la clase <xref:System.Workflow.ComponentModel.Design.CompositeDesignerTheme> y estableciendo las propiedades adecuadas para el nuevo tema.  
  
 [!code-csharp[WF_Samples#30](~/samples/snippets/csharp/VS_Snippets_CFX/wf_samples/cs/snippets.cs#30)]
 [!code-vb[WF_Samples#30](~/samples/snippets/visualbasic/VS_Snippets_CFX/wf_samples/vb/snippets.vb#30)]  
  
 Para utilizar el tema en <xref:System.Workflow.ComponentModel.Design.CompositeActivityDesigner>, aplique <xref:System.Workflow.ComponentModel.Design.ActivityDesignerThemeAttribute> a la clase <xref:System.Workflow.ComponentModel.Design.CompositeActivityDesigner>.  
  
 [!code-csharp[WF_Samples#24](~/samples/snippets/csharp/VS_Snippets_CFX/wf_samples/cs/snippets.cs#24)]
 [!code-vb[WF_Samples#24](~/samples/snippets/visualbasic/VS_Snippets_CFX/wf_samples/vb/snippets.vb#24)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ConnectorEndCap">
      <MemberSignature Language="C#" Value="public virtual System.Workflow.ComponentModel.Design.LineAnchor ConnectorEndCap { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Workflow.ComponentModel.Design.LineAnchor ConnectorEndCap" />
      <MemberSignature Language="DocId" Value="P:System.Workflow.ComponentModel.Design.CompositeDesignerTheme.ConnectorEndCap" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property ConnectorEndCap As LineAnchor" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Workflow::ComponentModel::Design::LineAnchor ConnectorEndCap { System::Workflow::ComponentModel::Design::LineAnchor get(); void set(System::Workflow::ComponentModel::Design::LineAnchor value); };" />
      <MemberSignature Language="F#" Value="member this.ConnectorEndCap : System.Workflow.ComponentModel.Design.LineAnchor with get, set" Usage="System.Workflow.ComponentModel.Design.CompositeDesignerTheme.ConnectorEndCap" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.ComponentModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(12)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Workflow.ComponentModel.Design.LineAnchor</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene o establece un valor que determina la forma que aparece en el extremo de un conector.</summary>
        <value>Un valor de enumeración <see cref="T:System.Workflow.ComponentModel.Design.LineAnchor" /> que define la forma que aparece en el extremo del conector. El valor predeterminado es <see cref="F:System.Workflow.ComponentModel.Design.LineAnchor.ArrowAnchor" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 El ejemplo siguiente muestra cómo crear un <xref:System.Workflow.ComponentModel.Design.CompositeDesignerTheme> personalizado derivando de la clase <xref:System.Workflow.ComponentModel.Design.CompositeDesignerTheme> y estableciendo las propiedades adecuadas para el nuevo tema.  
  
 [!code-csharp[WF_Samples#30](~/samples/snippets/csharp/VS_Snippets_CFX/wf_samples/cs/snippets.cs#30)]
 [!code-vb[WF_Samples#30](~/samples/snippets/visualbasic/VS_Snippets_CFX/wf_samples/vb/snippets.vb#30)]  
  
 Para utilizar el tema en <xref:System.Workflow.ComponentModel.Design.CompositeActivityDesigner>, aplique <xref:System.Workflow.ComponentModel.Design.ActivityDesignerThemeAttribute> a la clase <xref:System.Workflow.ComponentModel.Design.CompositeActivityDesigner>.  
  
 [!code-csharp[WF_Samples#24](~/samples/snippets/csharp/VS_Snippets_CFX/wf_samples/cs/snippets.cs#24)]
 [!code-vb[WF_Samples#24](~/samples/snippets/visualbasic/VS_Snippets_CFX/wf_samples/vb/snippets.vb#24)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ConnectorSize">
      <MemberSignature Language="C#" Value="public virtual System.Drawing.Size ConnectorSize { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.Size ConnectorSize" />
      <MemberSignature Language="DocId" Value="P:System.Workflow.ComponentModel.Design.CompositeDesignerTheme.ConnectorSize" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property ConnectorSize As Size" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Drawing::Size ConnectorSize { System::Drawing::Size get(); };" />
      <MemberSignature Language="F#" Value="member this.ConnectorSize : System.Drawing.Size" Usage="System.Workflow.ComponentModel.Design.CompositeDesignerTheme.ConnectorSize" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.ComponentModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Drawing.Size</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene <see cref="T:System.Drawing.Size" /> del conector.</summary>
        <value>Un objeto <see cref="T:System.Drawing.Size" /> que contiene información sobre el alto y ancho del conector.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ConnectorStartCap">
      <MemberSignature Language="C#" Value="public virtual System.Workflow.ComponentModel.Design.LineAnchor ConnectorStartCap { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Workflow.ComponentModel.Design.LineAnchor ConnectorStartCap" />
      <MemberSignature Language="DocId" Value="P:System.Workflow.ComponentModel.Design.CompositeDesignerTheme.ConnectorStartCap" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property ConnectorStartCap As LineAnchor" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Workflow::ComponentModel::Design::LineAnchor ConnectorStartCap { System::Workflow::ComponentModel::Design::LineAnchor get(); void set(System::Workflow::ComponentModel::Design::LineAnchor value); };" />
      <MemberSignature Language="F#" Value="member this.ConnectorStartCap : System.Workflow.ComponentModel.Design.LineAnchor with get, set" Usage="System.Workflow.ComponentModel.Design.CompositeDesignerTheme.ConnectorStartCap" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.ComponentModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(11)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Workflow.ComponentModel.Design.LineAnchor</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene o establece un valor que determina la forma que aparece al principio de un conector.</summary>
        <value>Un valor de enumeración <see cref="T:System.Workflow.ComponentModel.Design.LineAnchor" /> que define la forma que aparece al principio del conector. El valor predeterminado es <see cref="F:System.Workflow.ComponentModel.Design.LineAnchor.None" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 El ejemplo siguiente muestra cómo crear un <xref:System.Workflow.ComponentModel.Design.CompositeDesignerTheme> personalizado derivando de la clase <xref:System.Workflow.ComponentModel.Design.CompositeDesignerTheme> y estableciendo las propiedades adecuadas para el nuevo tema.  
  
 [!code-csharp[WF_Samples#30](~/samples/snippets/csharp/VS_Snippets_CFX/wf_samples/cs/snippets.cs#30)]
 [!code-vb[WF_Samples#30](~/samples/snippets/visualbasic/VS_Snippets_CFX/wf_samples/vb/snippets.vb#30)]  
  
 Para utilizar el tema en <xref:System.Workflow.ComponentModel.Design.CompositeActivityDesigner>, aplique <xref:System.Workflow.ComponentModel.Design.ActivityDesignerThemeAttribute> a la clase <xref:System.Workflow.ComponentModel.Design.CompositeActivityDesigner>.  
  
 [!code-csharp[WF_Samples#24](~/samples/snippets/csharp/VS_Snippets_CFX/wf_samples/cs/snippets.cs#24)]
 [!code-vb[WF_Samples#24](~/samples/snippets/visualbasic/VS_Snippets_CFX/wf_samples/vb/snippets.vb#24)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected override void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.ComponentModel.Design.CompositeDesignerTheme.Dispose(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub Dispose (disposing As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void Dispose(bool disposing);" />
      <MemberSignature Language="F#" Value="override this.Dispose : bool -&gt; unit" Usage="compositeDesignerTheme.Dispose disposing" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.ComponentModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing">Es <see langword="true" /> para liberar tanto recursos administrados como no administrados; es <see langword="false" /> para liberar únicamente recursos no administrados.</param>
        <summary>Libera los recursos no administrados que utiliza <see cref="T:System.Workflow.ComponentModel.Design.CompositeDesignerTheme" /> y libera los recursos administrados de forma opcional.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ExpandButtonSize">
      <MemberSignature Language="C#" Value="public virtual System.Drawing.Size ExpandButtonSize { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.Size ExpandButtonSize" />
      <MemberSignature Language="DocId" Value="P:System.Workflow.ComponentModel.Design.CompositeDesignerTheme.ExpandButtonSize" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property ExpandButtonSize As Size" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Drawing::Size ExpandButtonSize { System::Drawing::Size get(); };" />
      <MemberSignature Language="F#" Value="member this.ExpandButtonSize : System.Drawing.Size" Usage="System.Workflow.ComponentModel.Design.CompositeDesignerTheme.ExpandButtonSize" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.ComponentModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Drawing.Size</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene <see cref="T:System.Drawing.Size" /> del botón de expansión en el diseñador de la actividad compuesta.</summary>
        <value>Un objeto <see cref="T:System.Drawing.Size" /> que contiene información sobre el alto y ancho del botón de expansión en <see cref="T:System.Workflow.ComponentModel.Design.CompositeActivityDesigner" />.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetExpandButtonBackgroundBrush">
      <MemberSignature Language="C#" Value="public System.Drawing.Brush GetExpandButtonBackgroundBrush (System.Drawing.Rectangle rectangle);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Drawing.Brush GetExpandButtonBackgroundBrush(valuetype System.Drawing.Rectangle rectangle) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.ComponentModel.Design.CompositeDesignerTheme.GetExpandButtonBackgroundBrush(System.Drawing.Rectangle)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Drawing::Brush ^ GetExpandButtonBackgroundBrush(System::Drawing::Rectangle rectangle);" />
      <MemberSignature Language="F#" Value="member this.GetExpandButtonBackgroundBrush : System.Drawing.Rectangle -&gt; System.Drawing.Brush" Usage="compositeDesignerTheme.GetExpandButtonBackgroundBrush rectangle" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.ComponentModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Brush</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rectangle" Type="System.Drawing.Rectangle" />
      </Parameters>
      <Docs>
        <param name="rectangle">
          <see cref="T:System.Drawing.Rectangle" /> que define los límites del botón de expansión en <see cref="T:System.Workflow.ComponentModel.Design.CompositeActivityDesigner" />.</param>
        <summary>Recupera un pincel que define las propiedades de presentación de fondo del botón de expansión en el diseñador de la actividad compuesta.</summary>
        <returns>Un objeto <see cref="T:System.Drawing.Drawing2D.LinearGradientBrush" /> que utiliza el parámetro <paramref name="rectangle" /> para definir el área de botón donde el pincel aplica dos colores en un degradado lineal desde la esquina superior izquierda a la esquina inferior derecha del botón de expansión.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si el pincel del fondo para el botón de expansión no está establecido en `null` (`Nothing` en Visual Basic) antes de que se llame <xref:System.Workflow.ComponentModel.Design.CompositeDesignerTheme.GetExpandButtonBackgroundBrush%2A>, el método elimina el pincel anterior y crea uno nuevo.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Initialize">
      <MemberSignature Language="C#" Value="public override void Initialize ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Initialize() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.ComponentModel.Design.CompositeDesignerTheme.Initialize" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Initialize ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Initialize();" />
      <MemberSignature Language="F#" Value="override this.Initialize : unit -&gt; unit" Usage="compositeDesignerTheme.Initialize " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.ComponentModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Realiza más tareas de inicialización más allá de aquellas proporcionadas por <see cref="M:System.Workflow.ComponentModel.Design.CompositeDesignerTheme.#ctor(System.Workflow.ComponentModel.Design.WorkflowTheme)" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si la propiedad <xref:System.Workflow.ComponentModel.Design.AmbientTheme.UseOperatingSystemSettings%2A> está establecida en `true`, el método <xref:System.Workflow.ComponentModel.Design.CompositeDesignerTheme.Initialize%2A> obtiene los valores para el objeto <xref:System.Workflow.ComponentModel.Design.CompositeDesignerTheme> del sistema operativo.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnAmbientPropertyChanged">
      <MemberSignature Language="C#" Value="public override void OnAmbientPropertyChanged (System.Workflow.ComponentModel.Design.AmbientProperty ambientProperty);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void OnAmbientPropertyChanged(valuetype System.Workflow.ComponentModel.Design.AmbientProperty ambientProperty) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.ComponentModel.Design.CompositeDesignerTheme.OnAmbientPropertyChanged(System.Workflow.ComponentModel.Design.AmbientProperty)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void OnAmbientPropertyChanged(System::Workflow::ComponentModel::Design::AmbientProperty ambientProperty);" />
      <MemberSignature Language="F#" Value="override this.OnAmbientPropertyChanged : System.Workflow.ComponentModel.Design.AmbientProperty -&gt; unit" Usage="compositeDesignerTheme.OnAmbientPropertyChanged ambientProperty" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.ComponentModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ambientProperty" Type="System.Workflow.ComponentModel.Design.AmbientProperty" />
      </Parameters>
      <Docs>
        <param name="ambientProperty">El valor de enumeración <see cref="T:System.Workflow.ComponentModel.Design.AmbientProperty" /> que el tema del diseñador compuesto debería utilizar ahora.</param>
        <summary>Notifica al objeto <see cref="T:System.Workflow.ComponentModel.Design.CompositeDesignerTheme" /> que los valores de propiedad de ambiente para el diseñador han cambiado.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cuando se llama a este método establece <xref:System.Workflow.ComponentModel.Design.ActivityDesignerTheme.BackColorStart%2A> y las propiedades <xref:System.Workflow.ComponentModel.Design.ActivityDesignerTheme.BackColorEnd%2A> en <xref:System.Drawing.Color.Empty>.  
  
 La enumeración <xref:System.Workflow.ComponentModel.Design.AmbientProperty> determina de dónde un tema del diseñador obtiene sus valores de propiedad de ambiente. Si se establece el valor <xref:System.Workflow.ComponentModel.Design.AmbientProperty.DesignerSize>, la clase de tema de diseñador obtiene sus valores de ambiente de la propiedad <xref:System.Workflow.ComponentModel.Design.WorkflowTheme.AmbientTheme%2A>. Si se establece el valor <xref:System.Workflow.ComponentModel.Design.AmbientProperty.DesignerSize>, la clase de tema de diseñador obtiene sus valores de ambiente del sistema operativo en el que se instala el diseñador.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ShowDropShadow">
      <MemberSignature Language="C#" Value="public virtual bool ShowDropShadow { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ShowDropShadow" />
      <MemberSignature Language="DocId" Value="P:System.Workflow.ComponentModel.Design.CompositeDesignerTheme.ShowDropShadow" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property ShowDropShadow As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool ShowDropShadow { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.ShowDropShadow : bool with get, set" Usage="System.Workflow.ComponentModel.Design.CompositeDesignerTheme.ShowDropShadow" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.ComponentModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(10)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene o establece un valor que indica si el tema del diseñador compuesto mostrará las sombras paralelas alrededor del diseñador de la actividad compuesta.</summary>
        <value>
          <see langword="true" /> si <see cref="T:System.Workflow.ComponentModel.Design.CompositeDesignerTheme" /> muestra las sombras paralelas alrededor de <see cref="T:System.Workflow.ComponentModel.Design.CompositeActivityDesigner" />; de lo contrario, <see langword="false" />. El valor predeterminado es <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 El ejemplo siguiente muestra cómo crear un <xref:System.Workflow.ComponentModel.Design.CompositeDesignerTheme> personalizado derivando de la clase <xref:System.Workflow.ComponentModel.Design.CompositeDesignerTheme> y estableciendo las propiedades adecuadas para el nuevo tema.  
  
 [!code-csharp[WF_Samples#30](~/samples/snippets/csharp/VS_Snippets_CFX/wf_samples/cs/snippets.cs#30)]
 [!code-vb[WF_Samples#30](~/samples/snippets/visualbasic/VS_Snippets_CFX/wf_samples/vb/snippets.vb#30)]  
  
 Para utilizar el tema en <xref:System.Workflow.ComponentModel.Design.CompositeActivityDesigner>, aplique <xref:System.Workflow.ComponentModel.Design.ActivityDesignerThemeAttribute> a la clase <xref:System.Workflow.ComponentModel.Design.CompositeActivityDesigner>.  
  
 [!code-csharp[WF_Samples#24](~/samples/snippets/csharp/VS_Snippets_CFX/wf_samples/cs/snippets.cs#24)]
 [!code-vb[WF_Samples#24](~/samples/snippets/visualbasic/VS_Snippets_CFX/wf_samples/vb/snippets.vb#24)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WatermarkAlignment">
      <MemberSignature Language="C#" Value="public virtual System.Workflow.ComponentModel.Design.DesignerContentAlignment WatermarkAlignment { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Workflow.ComponentModel.Design.DesignerContentAlignment WatermarkAlignment" />
      <MemberSignature Language="DocId" Value="P:System.Workflow.ComponentModel.Design.CompositeDesignerTheme.WatermarkAlignment" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property WatermarkAlignment As DesignerContentAlignment" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Workflow::ComponentModel::Design::DesignerContentAlignment WatermarkAlignment { System::Workflow::ComponentModel::Design::DesignerContentAlignment get(); void set(System::Workflow::ComponentModel::Design::DesignerContentAlignment value); };" />
      <MemberSignature Language="F#" Value="member this.WatermarkAlignment : System.Workflow.ComponentModel.Design.DesignerContentAlignment with get, set" Usage="System.Workflow.ComponentModel.Design.CompositeDesignerTheme.WatermarkAlignment" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.ComponentModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(9)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Workflow.ComponentModel.Design.DesignerContentAlignment</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene o establece la alineación de la marca de agua en <see cref="T:System.Workflow.ComponentModel.Design.CompositeActivityDesigner" />.</summary>
        <value>Un valor de enumeración <see cref="T:System.Workflow.ComponentModel.Design.DesignerContentAlignment" /> que indica donde en <see cref="T:System.Workflow.ComponentModel.Design.CompositeActivityDesigner" /> se colocará la marca de agua. El valor predeterminado es <see cref="F:System.Workflow.ComponentModel.Design.DesignerContentAlignment.BottomRight" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 El ejemplo siguiente muestra cómo crear un <xref:System.Workflow.ComponentModel.Design.CompositeDesignerTheme> personalizado derivando de la clase <xref:System.Workflow.ComponentModel.Design.CompositeDesignerTheme> y estableciendo las propiedades adecuadas para el nuevo tema.  
  
 [!code-csharp[WF_Samples#30](~/samples/snippets/csharp/VS_Snippets_CFX/wf_samples/cs/snippets.cs#30)]
 [!code-vb[WF_Samples#30](~/samples/snippets/visualbasic/VS_Snippets_CFX/wf_samples/vb/snippets.vb#30)]  
  
 Para utilizar el tema en <xref:System.Workflow.ComponentModel.Design.CompositeActivityDesigner>, aplique <xref:System.Workflow.ComponentModel.Design.ActivityDesignerThemeAttribute> a la clase <xref:System.Workflow.ComponentModel.Design.CompositeActivityDesigner>.  
  
 [!code-csharp[WF_Samples#24](~/samples/snippets/csharp/VS_Snippets_CFX/wf_samples/cs/snippets.cs#24)]
 [!code-vb[WF_Samples#24](~/samples/snippets/visualbasic/VS_Snippets_CFX/wf_samples/vb/snippets.vb#24)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WatermarkImage">
      <MemberSignature Language="C#" Value="public System.Drawing.Image WatermarkImage { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Drawing.Image WatermarkImage" />
      <MemberSignature Language="DocId" Value="P:System.Workflow.ComponentModel.Design.CompositeDesignerTheme.WatermarkImage" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property WatermarkImage As Image" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Drawing::Image ^ WatermarkImage { System::Drawing::Image ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.WatermarkImage : System.Drawing.Image" Usage="System.Workflow.ComponentModel.Design.CompositeDesignerTheme.WatermarkImage" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.ComponentModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Drawing.Image</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene la marca de agua para utilizar en el diseñador de la actividad compuesta.</summary>
        <value>El objeto <see cref="T:System.Drawing.Image" /> para utilizar como marca de agua para <see cref="T:System.Workflow.ComponentModel.Design.CompositeActivityDesigner" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si el valor de la propiedad <xref:System.Workflow.ComponentModel.Design.CompositeDesignerTheme.WatermarkImagePath%2A> es `null` (`Nothing` en Visual Basic), esta propiedad proporcionará la imagen para la marca de agua. Si la propiedad <xref:System.Workflow.ComponentModel.Design.CompositeDesignerTheme.WatermarkImagePath%2A> está establecida en un valor válido, esta propiedad está establecida en `null` (`Nothing`).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WatermarkImagePath">
      <MemberSignature Language="C#" Value="public virtual string WatermarkImagePath { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string WatermarkImagePath" />
      <MemberSignature Language="DocId" Value="P:System.Workflow.ComponentModel.Design.CompositeDesignerTheme.WatermarkImagePath" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property WatermarkImagePath As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ WatermarkImagePath { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.WatermarkImagePath : string with get, set" Usage="System.Workflow.ComponentModel.Design.CompositeDesignerTheme.WatermarkImagePath" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.ComponentModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Editor(typeof(System.Workflow.ComponentModel.Design.ImageBrowserEditor), typeof(System.Drawing.Design.UITypeEditor))</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(8)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene o establece la ruta de acceso relativa a la marca de agua que se va a usar en el diseñador de la actividad compuesta.</summary>
        <value>Un valor de cadena que representa la ruta de acceso relativa a la marca de agua para utilizar en <see cref="T:System.Workflow.ComponentModel.Design.CompositeActivityDesigner" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 El ejemplo siguiente muestra cómo crear un <xref:System.Workflow.ComponentModel.Design.CompositeDesignerTheme> personalizado derivando de la clase <xref:System.Workflow.ComponentModel.Design.CompositeDesignerTheme> y estableciendo las propiedades adecuadas para el nuevo tema.  
  
 [!code-csharp[WF_Samples#24](~/samples/snippets/csharp/VS_Snippets_CFX/wf_samples/cs/snippets.cs#24)]
 [!code-vb[WF_Samples#24](~/samples/snippets/visualbasic/VS_Snippets_CFX/wf_samples/vb/snippets.vb#24)]  
  
 Para utilizar el tema en <xref:System.Workflow.ComponentModel.Design.CompositeActivityDesigner>, aplique <xref:System.Workflow.ComponentModel.Design.ActivityDesignerThemeAttribute> a la clase <xref:System.Workflow.ComponentModel.Design.CompositeActivityDesigner>.  
  
 [!code-csharp[WF_Samples#24](~/samples/snippets/csharp/VS_Snippets_CFX/wf_samples/cs/snippets.cs#24)]
 [!code-vb[WF_Samples#24](~/samples/snippets/visualbasic/VS_Snippets_CFX/wf_samples/vb/snippets.vb#24)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>