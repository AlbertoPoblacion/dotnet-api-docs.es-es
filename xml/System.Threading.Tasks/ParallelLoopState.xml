<Type Name="ParallelLoopState" FullName="System.Threading.Tasks.ParallelLoopState">
  <Metadata><Meta Name="ms.openlocfilehash" Value="9f0237c0ab6a5df247c24cc0cab4d856a2a5ef27" /><Meta Name="ms.sourcegitcommit" Value="a3e01ec36374fac54a55add0dcc1e754e394abeb" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="es-ES" /><Meta Name="ms.lasthandoff" Value="03/30/2019" /><Meta Name="ms.locfileid" Value="58690532" /></Metadata><TypeSignature Language="C#" Value="public class ParallelLoopState" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit ParallelLoopState extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Threading.Tasks.ParallelLoopState" />
  <TypeSignature Language="VB.NET" Value="Public Class ParallelLoopState" />
  <TypeSignature Language="C++ CLI" Value="public ref class ParallelLoopState" />
  <TypeSignature Language="F#" Value="type ParallelLoopState = class" />
  <AssemblyInfo>
    <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.3.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Diagnostics.DebuggerDisplay("ShouldExitCurrentIteration = {ShouldExitCurrentIteration}")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Permite las iteraciones de bucles paralelos para interactuar con otras iteraciones. La clase <see cref="T:System.Threading.Tasks.Parallel" /> proporciona una instancia de esta clase a cada bucle; no se pueden crear instancias en el código.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Tenga en cuenta que no se puede crear una instancia de una instancia de esta clase. Se genera automáticamente el compilador como un argumento en una llamada a la <xref:System.Threading.Tasks.Parallel.For%2A?displayProperty=nameWithType> o <xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=nameWithType> método. En este ejemplo se ilustra.  
  
 Construcciones como `for` y `foreach` (en C#) y `For` y `For Each` (en Visual Basic) ejecutar secuencialmente desde el índice más bajo al más alto o desde el primer objeto de un conjunto a la última. En cambio, el <xref:System.Threading.Tasks.Parallel.For%2A?displayProperty=nameWithType> y <xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=nameWithType> métodos no lo hacen. Dado que las iteraciones individuales del bucle se ejecutan en paralelo, puede empezar y terminar en cualquier orden. La <xref:System.Threading.Tasks.ParallelLoopState> clase permite que las iteraciones individuales de bucles paralelos para interactuar entre sí. La <xref:System.Threading.Tasks.ParallelLoopState> clase le permite:  
  
-   Salir de la iteración actual y evitar cualquier iteraciones adicionales inicien mediante una llamada a la <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> método. Esto no afecta a las iteraciones que ya han empezado a la ejecución.  
  
-   Evitar que se ejecute mediante una llamada a las iteraciones con un índice mayor que el índice actual el <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> método. Esto no afecta a las iteraciones que ya han empezado a la ejecución.  
  
-   Determinar si se ha producido una excepción en cualquier iteración del bucle, recupere el valor de la <xref:System.Threading.Tasks.ParallelLoopState.IsExceptional%2A> propiedad.  
  
-   Determinar si cualquier iteración del bucle ha llamado el <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> método recuperando el valor de la <xref:System.Threading.Tasks.ParallelLoopState.IsStopped%2A> propiedad. Puede utilizar esta propiedad para devolver de iteraciones del bucle que se inició antes de llamar a la <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> método pero todavía se está ejecutando.  
  
-   Determinar si cualquier iteración del bucle ha llamado el <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> o <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> método o se ha producido una excepción al recuperar el valor de la <xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A> propiedad.  
  
-   Salida de una iteración de ejecución prolongada, cuyo índice es mayor que el índice de una iteración en la que se llamó a Break, recupere el valor de la <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> propiedad.  
  
   
  
## Examples  
 El ejemplo siguiente ejecuta hasta 100 iteraciones de un bucle en paralelo. Cada iteración se pausa durante un intervalo aleatorio entre 1 y 1000 milisegundos. Un valor generado aleatoriamente que se determina en qué iteración del bucle el <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> se llama al método. Como la salida muestra el ejemplo, no hay iteraciones cuyo índice es mayor que el <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> inicio del valor de propiedad después de llamar a la <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> método.  
  
 [!code-csharp[System.Threading.Tasks.ParallelLoopState#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.parallelloopstate/cs/break1.cs#2)]
 [!code-vb[System.Threading.Tasks.ParallelLoopState#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.parallelloopstate/vb/break1.vb#2)]  
  
 Porque todavía es posible que se ejecuta cuando las iteraciones del bucle el <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> se llama al método, las llamadas de cada iteración del <xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A> propiedad para comprobar si se llama otra iteración el <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> método. Si el valor de propiedad es `true`, la iteración comprueba el valor de la <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> propiedad y, si es mayor que el valor de índice de la iteración actual, se devuelve inmediatamente.  
  
 ]]></format>
    </remarks>
    <threadsafe>Un <see cref="T:System.Threading.Tasks.ParallelLoopState" /> instancia está pensada para usarse únicamente dentro del cuerpo del bucle a la que se ha proporcionado una instancia.  No es seguro utilizar una proporcionada <see cref="T:System.Threading.Tasks.ParallelLoopState" /> instancia después del bucle asociado finaliza, ni es seguro entregarla explícitamente a otros subprocesos y tener esos subprocesos acceder a él en cualquier momento.  Otro <see cref="T:System.Threading.Tasks.ParallelLoopState" /> instancia se proporcionará a cada subproceso implicado en un bucle.</threadsafe>
    <related type="Article" href="~/docs/standard/parallel-programming/data-parallelism-task-parallel-library.md">Paralelismo de datos (biblioteca TPL)</related>
  </Docs>
  <Members>
    <Member MemberName="Break">
      <MemberSignature Language="C#" Value="public void Break ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Break() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.ParallelLoopState.Break" />
      <MemberSignature Language="VB.NET" Value="Public Sub Break ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Break();" />
      <MemberSignature Language="F#" Value="member this.Break : unit -&gt; unit" Usage="parallelLoopState.Break " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Comunica que, en cuanto pueda el sistema, el bucle <see cref="T:System.Threading.Tasks.Parallel" /> debe cesar la ejecución de iteraciones después de la iteración actual.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> indica que no se deben ejecutar iteraciones después de la iteración actual. Eficazmente cancela cualquier adicionales iteraciones del bucle. Sin embargo, no impide que las iteraciones que ya han empezado a la ejecución. Por ejemplo, si <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> se llama desde la iteración número 100 de un bucle paralelo recorrer en iteración de 0 a 1000, todas las iteraciones menos de 100 deben seguir ejecutándose, pero las iteraciones de 101 a 1000 que aún no ha iniciado no son ejecutarse.  
  
 Para las iteraciones de ejecución prolongada que ya se estén ejecutando, <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> establece la <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> propiedad en índice de la iteración actual si el índice actual es menor que el valor actual de <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A>. Para detener las iteraciones cuyo índice es mayor que la iteración más baja de interrupción de la ejecución de la competencia, debe hacer lo siguiente:  
  
1.  Compruebe si el <xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A> propiedad es `true`.  
  
2.  Salir de la iteración si su índice es mayor que el <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> valor de propiedad.  
  
 En este ejemplo se ilustra.  
  
 <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> se suele utilizar en algoritmos de búsqueda donde una ordenación está presente en el origen de datos.  
  
   
  
## Examples  
 El ejemplo siguiente ejecuta hasta 100 iteraciones de un bucle en paralelo. Cada iteración se pausa durante un intervalo aleatorio entre 1 y 1000 milisegundos. Un valor generado aleatoriamente que se determina en qué iteración del bucle el <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> se llama al método. Como la salida muestra el ejemplo, no hay iteraciones cuyo índice es mayor que el <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> inicio del valor de propiedad después de llamar a la <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> método.  
  
 [!code-csharp[System.Threading.Tasks.ParallelLoopState#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.parallelloopstate/cs/break1.cs#2)]
 [!code-vb[System.Threading.Tasks.ParallelLoopState#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.parallelloopstate/vb/break1.vb#2)]  
  
 Porque todavía es posible que se ejecuta cuando las iteraciones del bucle el <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> se llama al método, las llamadas de cada iteración del <xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A> propiedad para comprobar si se llama otra iteración el <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> método. Si el valor de propiedad es `true`, la iteración comprueba el valor de la <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> propiedad y, si es mayor que el valor de índice de la iteración actual, se devuelve inmediatamente.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">El método <see cref="M:System.Threading.Tasks.ParallelLoopState.Stop" /> se definió previamente. Las iteraciones del mismo bucle no pueden utilizar <see cref="M:System.Threading.Tasks.ParallelLoopState.Break" /> y <see cref="M:System.Threading.Tasks.ParallelLoopState.Stop" /> en combinación.</exception>
        <altmember cref="P:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration" />
        <altmember cref="P:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration" />
        <related type="Article" href="~/docs/standard/parallel-programming/data-parallelism-task-parallel-library.md">Paralelismo de datos (biblioteca TPL)</related>
      </Docs>
    </Member>
    <Member MemberName="IsExceptional">
      <MemberSignature Language="C#" Value="public bool IsExceptional { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsExceptional" />
      <MemberSignature Language="DocId" Value="P:System.Threading.Tasks.ParallelLoopState.IsExceptional" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsExceptional As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsExceptional { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsExceptional : bool" Usage="System.Threading.Tasks.ParallelLoopState.IsExceptional" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene si alguna iteración del bucle ha producido una excepción que la iteración no controló.</summary>
        <value><see langword="true" /> si se produjo una excepción no controlada; en caso contrario, <see langword="false" />.</value>
        <remarks>To be added.</remarks>
        <related type="Article" href="~/docs/standard/parallel-programming/data-parallelism-task-parallel-library.md">Paralelismo de datos (biblioteca TPL)</related>
      </Docs>
    </Member>
    <Member MemberName="IsStopped">
      <MemberSignature Language="C#" Value="public bool IsStopped { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsStopped" />
      <MemberSignature Language="DocId" Value="P:System.Threading.Tasks.ParallelLoopState.IsStopped" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsStopped As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsStopped { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsStopped : bool" Usage="System.Threading.Tasks.ParallelLoopState.IsStopped" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene si alguna iteración del bucle llamó al método <see cref="M:System.Threading.Tasks.ParallelLoopState.Stop" />.</summary>
        <value><see langword="true" /> si cualquier iteración detuvo el bucle llamando al método <see cref="M:System.Threading.Tasks.ParallelLoopState.Stop" />; en caso contrario, <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Para las iteraciones de larga ejecución del bucle, puede recuperar el valor de la <xref:System.Threading.Tasks.ParallelLoopState.IsStopped%2A> propiedad para determinar si las iteraciones del bucle que comenzó su ejecución antes de llamar a la <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> método todavía se está ejecutando. A continuación, puede usar el valor de la <xref:System.Threading.Tasks.ParallelLoopState.IsStopped%2A> propiedad para determinar si deben devolver de inmediato o ejecutar con normalidad.  
  
   
  
## Examples  
 El ejemplo siguiente ejecuta hasta 10 000 iteraciones de un bucle en paralelo. Cada iteración se pausa durante un intervalo aleatorio entre 1 y 1000 milisegundos. Un valor generado aleatoriamente que se determina en qué iteración del bucle el <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> se llama al método. Porque todavía es posible que se ejecuta cuando las iteraciones del bucle el <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> llama el método, la expresión lambda llama el <xref:System.Threading.Tasks.ParallelLoopState.IsStopped%2A> método para comprobar si se llama otra iteración el <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> método. Si devuelve `true`, la iteración se devuelve inmediatamente.  
  
 [!code-csharp[System.Threading.Tasks.ParallelLoopState#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.parallelloopstate/cs/stop1.cs#1)]
 [!code-vb[System.Threading.Tasks.ParallelLoopState#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.parallelloopstate/vb/stop1.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/standard/parallel-programming/data-parallelism-task-parallel-library.md">Paralelismo de datos (biblioteca TPL)</related>
      </Docs>
    </Member>
    <Member MemberName="LowestBreakIteration">
      <MemberSignature Language="C#" Value="public Nullable&lt;long&gt; LowestBreakIteration { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Nullable`1&lt;int64&gt; LowestBreakIteration" />
      <MemberSignature Language="DocId" Value="P:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property LowestBreakIteration As Nullable(Of Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Nullable&lt;long&gt; LowestBreakIteration { Nullable&lt;long&gt; get(); };" />
      <MemberSignature Language="F#" Value="member this.LowestBreakIteration : Nullable&lt;int64&gt;" Usage="System.Threading.Tasks.ParallelLoopState.LowestBreakIteration" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Int64&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene la iteración más baja del bucle desde el que se llamó a <see cref="M:System.Threading.Tasks.ParallelLoopState.Break" />.</summary>
        <value>Iteración más baja desde la que se llamó a <see cref="M:System.Threading.Tasks.ParallelLoopState.Break" />. En el caso de un bucle <see cref="M:System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Concurrent.Partitioner{``0},System.Action{``0})" />, el valor está basado en un índice generado internamente.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Es posible que varias iteraciones de un bucle paralelo para llamar a la <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> método. Si es así, este valor es el índice más pequeño de una iteración en la que llama <xref:System.Threading.Tasks.ParallelLoopState.Break%2A>. Si llama ninguna iteración del bucle <xref:System.Threading.Tasks.ParallelLoopState.Break%2A>, esta propiedad devuelve `null`. Tenga en cuenta que el valor de propiedad se ve afectado por las llamadas a la <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> método.  
  
 En iteraciones de ejecución prolongada en el que todas las iteraciones después de la iteración que llama a la <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> no es preciso ejecutar el método, el <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> propiedad se usa para finalizar las iteraciones que comenzó su ejecución antes de llamar a la <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> método. Para detener las iteraciones cuyo índice es mayor que la iteración más baja de interrupción de la ejecución de la competencia, debe hacer lo siguiente:  
  
1.  Compruebe si el <xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A> propiedad es `true`.  
  
2.  Salir de la iteración si su índice es mayor que el <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> valor de propiedad.  
  
 En este ejemplo se ilustra.  
  
   
  
## Examples  
 El ejemplo siguiente ejecuta hasta 100 iteraciones de un bucle en paralelo. Cada iteración se pausa durante un intervalo aleatorio entre 1 y 1000 milisegundos. Un valor generado aleatoriamente que se determina en qué iteración del bucle el <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> se llama al método. Esto evita que las iteraciones cuyo índice es mayor que el <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> valor de propiedad de inicio después de la llamada a la <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> método, pero no afecta a las iteraciones que ya han empezado a ejecutar. Para evitar que estos se completen, llama cada iteración del <xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A> método para comprobar si se llama otra iteración el <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> método. Si es así, la iteración comprueba el valor de la <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> propiedad y, si es mayor que el valor de índice de la iteración actual, se devuelve inmediatamente.  
  
 [!code-csharp[System.Threading.Tasks.ParallelLoopState#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.parallelloopstate/cs/break1.cs#2)]
 [!code-vb[System.Threading.Tasks.ParallelLoopState#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.parallelloopstate/vb/break1.vb#2)]  
  
 Tenga en cuenta que, dado el <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> valor está fuera del ámbito fuera del bucle paralelo, debe asignarla a una variable que está visible fuera del bucle si desea conservar su valor.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration" />
        <altmember cref="M:System.Threading.Tasks.ParallelLoopState.Break" />
        <related type="Article" href="~/docs/standard/parallel-programming/data-parallelism-task-parallel-library.md">Paralelismo de datos (biblioteca TPL)</related>
      </Docs>
    </Member>
    <Member MemberName="ShouldExitCurrentIteration">
      <MemberSignature Language="C#" Value="public bool ShouldExitCurrentIteration { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ShouldExitCurrentIteration" />
      <MemberSignature Language="DocId" Value="P:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ShouldExitCurrentIteration As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool ShouldExitCurrentIteration { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.ShouldExitCurrentIteration : bool" Usage="System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene si la iteración actual del bucle debe salir basándose en las solicitudes realizadas por esta u otras iteraciones.</summary>
        <value><see langword="true" /> si la iteración actual debería terminar; en caso contrario, <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A> propiedad está establecida en `true` en cualquiera de las condiciones siguientes:  
  
-   Una iteración de las llamadas de bucle <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> o <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A>.  
  
-   Una iteración del bucle produce una excepción.  
  
-   El bucle se ha cancelado.  
  
 Cuando esta propiedad es `true`, el <xref:System.Threading.Tasks.Parallel> clase proactivamente intenta impedir que las iteraciones adicionales del bucle iniciando la ejecución. Sin embargo, puede haber casos donde es puede evitar que se inicien iteraciones adicionales.  
  
 También puede ser el caso de que una iteración de larga ejecución ya ha comenzado la ejecución. En tales casos, pueden comprobar de forma explícita las iteraciones del <xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A> propiedad y dejará de ejecución si la propiedad devuelve `true`.  
  
   
  
## Examples  
 El ejemplo siguiente ejecuta hasta 100 iteraciones de un bucle en paralelo. Cada iteración se pausa durante un intervalo aleatorio entre 1 y 1000 milisegundos. Un valor generado aleatoriamente que se determina en qué iteración del bucle el <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> se llama al método. Esto evita que las iteraciones cuyo índice es mayor que el <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> valor de propiedad de inicio después de la llamada a la <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> método, pero no afecta a las iteraciones que ya han empezado a ejecutar. Para evitar que estos se completen, llama cada iteración del <xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A> método para comprobar si se llama otra iteración el <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> método. Si es así, la iteración comprueba el valor de la <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> propiedad y, si es mayor que el valor de índice de la iteración actual, se devuelve inmediatamente.  
  
 [!code-csharp[System.Threading.Tasks.ParallelLoopState#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.parallelloopstate/cs/break1.cs#2)]
 [!code-vb[System.Threading.Tasks.ParallelLoopState#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.parallelloopstate/vb/break1.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration" />
        <altmember cref="M:System.Threading.Tasks.ParallelLoopState.Break" />
        <altmember cref="M:System.Threading.Tasks.ParallelLoopState.Stop" />
        <related type="Article" href="~/docs/standard/parallel-programming/data-parallelism-task-parallel-library.md">Paralelismo de datos (biblioteca TPL)</related>
      </Docs>
    </Member>
    <Member MemberName="Stop">
      <MemberSignature Language="C#" Value="public void Stop ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Stop() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.ParallelLoopState.Stop" />
      <MemberSignature Language="VB.NET" Value="Public Sub Stop ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Stop();" />
      <MemberSignature Language="F#" Value="member this.Stop : unit -&gt; unit" Usage="parallelLoopState.Stop " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Comunica que el bucle <see cref="T:System.Threading.Tasks.Parallel" /> debe cesar la ejecución cuanto antes pueda hacerlo el sistema.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Una llamada a la <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> método indica que no se necesitan ejecutar las iteraciones del bucle que no haya iniciado todavía. Eficazmente cancela cualquier adicionales iteraciones del bucle. Sin embargo, no impide que las iteraciones que ya han empezado a la ejecución.  
  
 Una llamada a la <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> método causas el <xref:System.Threading.Tasks.ParallelLoopState.IsStopped%2A> propiedad para devolver `true` para cualquier iteración del bucle que todavía se está ejecutando. Esto es especialmente útil para las iteraciones de ejecución prolongada, que pueden comprobar el <xref:System.Threading.Tasks.ParallelLoopState.IsStopped%2A> propiedad y salir pronto si su valor es `true`.  
  
 <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> Normalmente se emplea en los algoritmos en función de búsqueda, donde una vez que es un resultado de iteraciones se encuentra, ninguna otras se deben ejecutar.  
  
   
  
## Examples  
 El ejemplo siguiente ejecuta hasta 10 000 iteraciones de un bucle en paralelo. Cada iteración se pausa durante un intervalo aleatorio entre 1 y 1000 milisegundos. Un valor generado aleatoriamente que se determina en qué iteración del bucle el <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> se llama al método. Como se muestra el resultado del ejemplo, no las iteraciones se ejecutan después de llamar a la <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> método.  
  
 [!code-csharp[System.Threading.Tasks.ParallelLoopState#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.parallelloopstate/cs/stop1.cs#1)]
 [!code-vb[System.Threading.Tasks.ParallelLoopState#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.parallelloopstate/vb/stop1.vb#1)]  
  
 Dado que las iteraciones del bucle son aún más probables que se ejecuta cuando el <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> se llama al método, las llamadas de cada iteración el <xref:System.Threading.Tasks.ParallelLoopState.IsStopped%2A> método para comprobar si se llama otra iteración el <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> método. Si devuelve `true`, la iteración se devuelve inmediatamente.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Se ha llamado anteriormente al método <see cref="M:System.Threading.Tasks.ParallelLoopState.Break" />. Las iteraciones del mismo bucle no pueden utilizar <see cref="M:System.Threading.Tasks.ParallelLoopState.Break" /> y <see cref="M:System.Threading.Tasks.ParallelLoopState.Stop" /> en combinación.</exception>
        <altmember cref="P:System.Threading.Tasks.ParallelLoopState.IsStopped" />
        <related type="Article" href="~/docs/standard/parallel-programming/data-parallelism-task-parallel-library.md">Paralelismo de datos (biblioteca TPL)</related>
      </Docs>
    </Member>
  </Members>
</Type>