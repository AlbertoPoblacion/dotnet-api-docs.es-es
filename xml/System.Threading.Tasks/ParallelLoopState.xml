<Type Name="ParallelLoopState" FullName="System.Threading.Tasks.ParallelLoopState">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="3e4244160069333f5d930b81c7b54173c2ad6d6a" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="es-ES" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30530219" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class ParallelLoopState" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit ParallelLoopState extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Threading.Tasks.ParallelLoopState" />
  <TypeSignature Language="VB.NET" Value="Public Class ParallelLoopState" />
  <TypeSignature Language="C++ CLI" Value="public ref class ParallelLoopState" />
  <AssemblyInfo>
    <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.3.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Diagnostics.DebuggerDisplay("ShouldExitCurrentIteration = {ShouldExitCurrentIteration}")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <span data-ttu-id="c62aa-101">Habilita iteraciones de bucles paralelos para interactuar con otras iteraciones.</span>
      <span class="sxs-lookup">
        <span data-stu-id="c62aa-101">Enables iterations of parallel loops to interact with other iterations.</span>
      </span>
      <span data-ttu-id="c62aa-102">La clase <see cref="T:System.Threading.Tasks.Parallel" /> proporciona una instancia de esta clase a cada bucle; no se pueden crear instancias en el código.</span>
      <span class="sxs-lookup">
        <span data-stu-id="c62aa-102">An instance of this class is provided by the <see cref="T:System.Threading.Tasks.Parallel" /> class to each loop; you can not create instances in your code.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c62aa-103">Tenga en cuenta que no se puede crear una instancia de esta clase.</span><span class="sxs-lookup"><span data-stu-id="c62aa-103">Note that you cannot instantiate an instance of this class.</span></span> <span data-ttu-id="c62aa-104">Se genera automáticamente el compilador como un argumento en una llamada a la <xref:System.Threading.Tasks.Parallel.For%2A?displayProperty=nameWithType> o <xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=nameWithType> método.</span><span class="sxs-lookup"><span data-stu-id="c62aa-104">It is automatically generated by the compiler as an argument in a call to the <xref:System.Threading.Tasks.Parallel.For%2A?displayProperty=nameWithType> or <xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="c62aa-105">En este ejemplo se ilustra.</span><span class="sxs-lookup"><span data-stu-id="c62aa-105">The example provides an illustration.</span></span>  
  
 <span data-ttu-id="c62aa-106">Construye como `for` y `foreach` (en C#) y `For` y `For Each` (en Visual Basic) se ejecutan secuencialmente desde el índice más bajo al más alto o desde el primer objeto de un conjunto a la última.</span><span class="sxs-lookup"><span data-stu-id="c62aa-106">Constructs such as `for` and `foreach` (in C#) and `For` and `For Each` (in Visual Basic) execute sequentially from the lowest index to the highest or from the first object in a set to the last.</span></span> <span data-ttu-id="c62aa-107">En cambio, el <xref:System.Threading.Tasks.Parallel.For%2A?displayProperty=nameWithType> y <xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=nameWithType> métodos no lo hace.</span><span class="sxs-lookup"><span data-stu-id="c62aa-107">In contrast, the <xref:System.Threading.Tasks.Parallel.For%2A?displayProperty=nameWithType> and <xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=nameWithType> methods do not.</span></span> <span data-ttu-id="c62aa-108">Como individuales iteraciones del bucle se ejecutan en paralelo, pueden comenzar y terminar en cualquier orden.</span><span class="sxs-lookup"><span data-stu-id="c62aa-108">Because individual iterations of the loop run in parallel, they can begin and end in any order.</span></span> <span data-ttu-id="c62aa-109">La <xref:System.Threading.Tasks.ParallelLoopState> clase permite individuales iteraciones de bucles paralelos para interactuar entre sí.</span><span class="sxs-lookup"><span data-stu-id="c62aa-109">The <xref:System.Threading.Tasks.ParallelLoopState> class allows individual iterations of parallel loops to interact with one another.</span></span> <span data-ttu-id="c62aa-110">La <xref:System.Threading.Tasks.ParallelLoopState> clase le permite:</span><span class="sxs-lookup"><span data-stu-id="c62aa-110">The <xref:System.Threading.Tasks.ParallelLoopState> class allows you to:</span></span>  
  
-   <span data-ttu-id="c62aa-111">Salir de la iteración actual y evitar cualquier iteraciones adicionales se inicie mediante una llamada a la <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> método.</span><span class="sxs-lookup"><span data-stu-id="c62aa-111">Exit the current iteration and prevent any additional iterations from starting by calling the <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> method.</span></span> <span data-ttu-id="c62aa-112">Esto no afecta a las iteraciones que ya se han comenzado la ejecución.</span><span class="sxs-lookup"><span data-stu-id="c62aa-112">This does not affect iterations that have already begun execution.</span></span>  
  
-   <span data-ttu-id="c62aa-113">Evitar que se ejecuten mediante una llamada a las iteraciones con un índice mayor que el índice actual el <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> método.</span><span class="sxs-lookup"><span data-stu-id="c62aa-113">Prevent any iterations with an index greater than the current index from executing by calling the <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> method.</span></span> <span data-ttu-id="c62aa-114">Esto no afecta a las iteraciones que ya se han comenzado la ejecución.</span><span class="sxs-lookup"><span data-stu-id="c62aa-114">This does not affect iterations that have already begun execution.</span></span>  
  
-   <span data-ttu-id="c62aa-115">Determinar si se produjo una excepción en cualquier iteración del bucle al recuperar el valor de la <xref:System.Threading.Tasks.ParallelLoopState.IsExceptional%2A> propiedad.</span><span class="sxs-lookup"><span data-stu-id="c62aa-115">Determine whether an exception has occurred in any loop iteration by retrieving the value of the <xref:System.Threading.Tasks.ParallelLoopState.IsExceptional%2A> property.</span></span>  
  
-   <span data-ttu-id="c62aa-116">Determinar si alguna iteración del bucle llamó el <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> método al recuperar el valor de la <xref:System.Threading.Tasks.ParallelLoopState.IsStopped%2A> propiedad.</span><span class="sxs-lookup"><span data-stu-id="c62aa-116">Determine whether any iteration of the loop has called the <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> method by retrieving the value of the <xref:System.Threading.Tasks.ParallelLoopState.IsStopped%2A> property.</span></span> <span data-ttu-id="c62aa-117">Puede usar esta propiedad para devolver las iteraciones del bucle que se inició antes de llamar a la <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> método pero todavía se está ejecutando.</span><span class="sxs-lookup"><span data-stu-id="c62aa-117">You can use this property to return from iterations of the loop that started before the call to the <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> method but are still executing.</span></span>  
  
-   <span data-ttu-id="c62aa-118">Determinar si alguna iteración del bucle llamó el <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> o <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> método o ha producido una excepción al recuperar el valor de la <xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A> propiedad.</span><span class="sxs-lookup"><span data-stu-id="c62aa-118">Determine whether any iteration of the loop has called the <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> or <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> method or has thrown an exception by retrieving the value of the <xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A> property.</span></span>  
  
-   <span data-ttu-id="c62aa-119">Salida de una iteración de ejecución prolongada cuyo índice es mayor que el índice de una iteración en la que se llamó a Break al recuperar el valor de la <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> propiedad.</span><span class="sxs-lookup"><span data-stu-id="c62aa-119">Exit from a long-running iteration whose index is greater than the index of an iteration in which Break was called by retrieving the value of the <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> property.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c62aa-120">En el ejemplo siguiente se ejecuta hasta 100 iteraciones de un bucle en paralelo.</span><span class="sxs-lookup"><span data-stu-id="c62aa-120">The following example executes up to 100 iterations of a loop in parallel.</span></span> <span data-ttu-id="c62aa-121">Se hace una pausa en cada iteración para un intervalo aleatorio entre 1 y 1000 milisegundos.</span><span class="sxs-lookup"><span data-stu-id="c62aa-121">Each iteration pauses for a random interval from 1 to 1,000 milliseconds.</span></span> <span data-ttu-id="c62aa-122">Un valor generado aleatoriamente que se determina en qué iteración del bucle el <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> se llama al método.</span><span class="sxs-lookup"><span data-stu-id="c62aa-122">A randomly generated value determines on which iteration of the loop the <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> method is called.</span></span> <span data-ttu-id="c62aa-123">Como la salida de muestra en el ejemplo, no existen iteraciones cuyo índice es mayor que el <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> inicio de valor de propiedad después de llamar a la <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> método.</span><span class="sxs-lookup"><span data-stu-id="c62aa-123">As the output from the example shows, no iterations whose index is greater than the <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> property value start after the call to the <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> method.</span></span>  
  
 [!code-csharp[System.Threading.Tasks.ParallelLoopState#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.parallelloopstate/cs/break1.cs#2)]
 [!code-vb[System.Threading.Tasks.ParallelLoopState#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.parallelloopstate/vb/break1.vb#2)]  
  
 <span data-ttu-id="c62aa-124">Dado que las iteraciones del bucle son probablemente se estén ejecutando cuando el <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> se llama al método, las llamadas de cada iteración el <xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A> propiedad para comprobar si se llama a otra iteración el <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> (método).</span><span class="sxs-lookup"><span data-stu-id="c62aa-124">Because iterations of the loop are still likely to be executing when the <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> method is called, each iteration calls the <xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A> property to check whether another iteration has called the <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> method.</span></span> <span data-ttu-id="c62aa-125">Si el valor de propiedad es `true`, la iteración comprueba el valor de la <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> propiedad y, si es mayor que el valor de índice de la iteración actual, se devuelve inmediatamente.</span><span class="sxs-lookup"><span data-stu-id="c62aa-125">If  the property value is `true`, the iteration checks the value of the <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> property and, if it is greater than the current iteration's index value, returns immediately.</span></span>  
  
 ]]></format>
    </remarks>
    <threadsafe>
      <span data-ttu-id="c62aa-126">Un <see cref="T:System.Threading.Tasks.ParallelLoopState" /> instancia está pensada para usarse solo en el cuerpo del bucle a la que se proporcionó una instancia.</span>
      <span class="sxs-lookup">
        <span data-stu-id="c62aa-126">A <see cref="T:System.Threading.Tasks.ParallelLoopState" /> instance is meant to be used only within the body of the loop to which an instance was provided.</span>
      </span>
      <span data-ttu-id="c62aa-127">No es seguro utilizar proporcionado <see cref="T:System.Threading.Tasks.ParallelLoopState" /> instancia después del bucle asociado finaliza, ni es seguro entregarla explícitamente a otros subprocesos y permitir que esos subprocesos acceso a él en cualquier momento.</span>
      <span class="sxs-lookup">
        <span data-stu-id="c62aa-127">It is not safe to use a provided <see cref="T:System.Threading.Tasks.ParallelLoopState" /> instance after the associated loop ends, nor is it safe to explicitly hand it off to other threads and have those threads access it at any time.</span>
      </span>
      <span data-ttu-id="c62aa-128">Otra <see cref="T:System.Threading.Tasks.ParallelLoopState" /> instancia se proporcionará a cada subproceso implicado en un bucle.</span>
      <span class="sxs-lookup">
        <span data-stu-id="c62aa-128">A different <see cref="T:System.Threading.Tasks.ParallelLoopState" /> instance will be provided to each thread involved in a loop.</span>
      </span>
    </threadsafe>
  </Docs>
  <Members>
    <Member MemberName="Break">
      <MemberSignature Language="C#" Value="public void Break ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Break() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.ParallelLoopState.Break" />
      <MemberSignature Language="VB.NET" Value="Public Sub Break ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Break();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="c62aa-129">Comunica que el bucle <see cref="T:System.Threading.Tasks.Parallel" /> debe cesar la ejecución de iteraciones después de la iteración actual en cuanto pueda el sistema.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c62aa-129">Communicates that the <see cref="T:System.Threading.Tasks.Parallel" /> loop should cease execution of iterations beyond the current iteration at the system's earliest convenience.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c62aa-130"><xref:System.Threading.Tasks.ParallelLoopState.Break%2A> indica que no se deben ejecutar iteraciones después de la iteración actual.</span><span class="sxs-lookup"><span data-stu-id="c62aa-130"><xref:System.Threading.Tasks.ParallelLoopState.Break%2A> indicates that no iterations after the current iteration should be run.</span></span> <span data-ttu-id="c62aa-131">Eficazmente cancela cualquier iteraciones adicionales del bucle.</span><span class="sxs-lookup"><span data-stu-id="c62aa-131">It effectively cancels any additional iterations of the loop.</span></span> <span data-ttu-id="c62aa-132">Sin embargo, no impide que las iteraciones que ya se han comenzado la ejecución.</span><span class="sxs-lookup"><span data-stu-id="c62aa-132">However, it does not stop any iterations that have already begun execution.</span></span> <span data-ttu-id="c62aa-133">Por ejemplo, si <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> se llama desde la iteración número 100 de un bucle paralelo iterando desde 0 a 1.000, todas las iteraciones inferior a 100 deben seguir ejecutándose, pero las iteraciones de 101 a 1000 que aún no ha iniciado no son ejecutarse.</span><span class="sxs-lookup"><span data-stu-id="c62aa-133">For example, if <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> is called from the 100th iteration of a parallel loop iterating from 0 to 1,000, all iterations less than 100 should still be run, but the iterations from 101 through to 1000 that have not yet started are not executed.</span></span>  
  
 <span data-ttu-id="c62aa-134">Para las iteraciones de ejecución prolongada que ya se estén ejecutando, <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> establece la <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> propiedad al índice del iteración actual si el índice actual es menor que el valor actual de <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A>.</span><span class="sxs-lookup"><span data-stu-id="c62aa-134">For long-running iterations that may already be executing, <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> sets the <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> property to the current iteration's index if the current index is less than the current value of <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A>.</span></span> <span data-ttu-id="c62aa-135">Para dejar de iteraciones cuyo índice es mayor que la iteración más baja de interrupción de ejecución de la competencia, debe hacer lo siguiente:</span><span class="sxs-lookup"><span data-stu-id="c62aa-135">To stop iterations whose index is greater than the lowest break iteration from competing execution, you should do the following:</span></span>  
  
1.  <span data-ttu-id="c62aa-136">Compruebe si el <xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A> propiedad es `true`.</span><span class="sxs-lookup"><span data-stu-id="c62aa-136">Check whether the <xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A> property is `true`.</span></span>  
  
2.  <span data-ttu-id="c62aa-137">Salir de la iteración si el índice es mayor que la <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> valor de propiedad.</span><span class="sxs-lookup"><span data-stu-id="c62aa-137">Exit from the iteration if its index is greater than the <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> property value.</span></span>  
  
 <span data-ttu-id="c62aa-138">En este ejemplo se ilustra.</span><span class="sxs-lookup"><span data-stu-id="c62aa-138">The example provides an illustration.</span></span>  
  
 <span data-ttu-id="c62aa-139"><xref:System.Threading.Tasks.ParallelLoopState.Break%2A> se emplea normalmente en algoritmos basados en búsquedas donde una ordenación está presente en el origen de datos.</span><span class="sxs-lookup"><span data-stu-id="c62aa-139"><xref:System.Threading.Tasks.ParallelLoopState.Break%2A> is typically employed in search-based algorithms where an ordering is present in the data source.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c62aa-140">En el ejemplo siguiente se ejecuta hasta 100 iteraciones de un bucle en paralelo.</span><span class="sxs-lookup"><span data-stu-id="c62aa-140">The following example executes up to 100 iterations of a loop in parallel.</span></span> <span data-ttu-id="c62aa-141">Se hace una pausa en cada iteración para un intervalo aleatorio entre 1 y 1000 milisegundos.</span><span class="sxs-lookup"><span data-stu-id="c62aa-141">Each iteration pauses for a random interval from 1 to 1,000 milliseconds.</span></span> <span data-ttu-id="c62aa-142">Un valor generado aleatoriamente que se determina en qué iteración del bucle el <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> se llama al método.</span><span class="sxs-lookup"><span data-stu-id="c62aa-142">A randomly generated value determines on which iteration of the loop the <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> method is called.</span></span> <span data-ttu-id="c62aa-143">Como la salida de muestra en el ejemplo, no existen iteraciones cuyo índice es mayor que el <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> inicio de valor de propiedad después de llamar a la <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> método.</span><span class="sxs-lookup"><span data-stu-id="c62aa-143">As the output from the example shows, no iterations whose index is greater than the <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> property value start after the call to the <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> method.</span></span>  
  
 [!code-csharp[System.Threading.Tasks.ParallelLoopState#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.parallelloopstate/cs/break1.cs#2)]
 [!code-vb[System.Threading.Tasks.ParallelLoopState#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.parallelloopstate/vb/break1.vb#2)]  
  
 <span data-ttu-id="c62aa-144">Dado que las iteraciones del bucle son probablemente se estén ejecutando cuando el <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> se llama al método, las llamadas de cada iteración el <xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A> propiedad para comprobar si se llama a otra iteración el <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> (método).</span><span class="sxs-lookup"><span data-stu-id="c62aa-144">Because iterations of the loop are still likely to be executing when the <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> method is called, each iteration calls the <xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A> property to check whether another iteration has called the <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> method.</span></span> <span data-ttu-id="c62aa-145">Si el valor de propiedad es `true`, la iteración comprueba el valor de la <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> propiedad y, si es mayor que el valor de índice de la iteración actual, se devuelve inmediatamente.</span><span class="sxs-lookup"><span data-stu-id="c62aa-145">If  the property value is `true`, the iteration checks the value of the <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> property and, if it is greater than the current iteration's index value, returns immediately.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="c62aa-146">El método <see cref="M:System.Threading.Tasks.ParallelLoopState.Stop" /> se definió previamente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c62aa-146">The <see cref="M:System.Threading.Tasks.ParallelLoopState.Stop" /> method was previously called.</span>
          </span>
          <span data-ttu-id="c62aa-147">Las iteraciones del mismo bucle no pueden utilizar <see cref="M:System.Threading.Tasks.ParallelLoopState.Break" /> y <see cref="M:System.Threading.Tasks.ParallelLoopState.Stop" /> en combinación.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c62aa-147">
              <see cref="M:System.Threading.Tasks.ParallelLoopState.Break" /> and <see cref="M:System.Threading.Tasks.ParallelLoopState.Stop" /> may not be used in combination by iterations of the same loop.</span>
          </span>
        </exception>
        <altmember cref="P:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration" />
        <altmember cref="P:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration" />
      </Docs>
    </Member>
    <Member MemberName="IsExceptional">
      <MemberSignature Language="C#" Value="public bool IsExceptional { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsExceptional" />
      <MemberSignature Language="DocId" Value="P:System.Threading.Tasks.ParallelLoopState.IsExceptional" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsExceptional As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsExceptional { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="c62aa-148">Obtiene si alguna iteración del bucle causó una excepción que la iteración no controló.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c62aa-148">Gets whether any iteration of the loop has thrown an exception that went unhandled by that iteration.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="c62aa-149">
            <see langword="true" /> si se produjo una excepción no controlada; en caso contrario, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c62aa-149">
              <see langword="true" /> if an unhandled exception was thrown; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsStopped">
      <MemberSignature Language="C#" Value="public bool IsStopped { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsStopped" />
      <MemberSignature Language="DocId" Value="P:System.Threading.Tasks.ParallelLoopState.IsStopped" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsStopped As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsStopped { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="c62aa-150">Obtiene si alguna iteración del bucle llamó al método <see cref="M:System.Threading.Tasks.ParallelLoopState.Stop" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c62aa-150">Gets whether any iteration of the loop has called the <see cref="M:System.Threading.Tasks.ParallelLoopState.Stop" /> method.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="c62aa-151">
            <see langword="true" /> si cualquier iteración detuvo el bucle llamando al método <see cref="M:System.Threading.Tasks.ParallelLoopState.Stop" />; en caso contrario, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c62aa-151">
              <see langword="true" /> if any iteration has stopped the loop by calling the <see cref="M:System.Threading.Tasks.ParallelLoopState.Stop" /> method; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c62aa-152">Para las iteraciones de ejecución prolongada del bucle, puede recuperar el valor de la <xref:System.Threading.Tasks.ParallelLoopState.IsStopped%2A> propiedad para determinar si las iteraciones del bucle que comenzó su ejecución antes de llamar a la <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> método todavía se está ejecutando.</span><span class="sxs-lookup"><span data-stu-id="c62aa-152">For long-running iterations of the loop, you can retrieve the value of the <xref:System.Threading.Tasks.ParallelLoopState.IsStopped%2A> property to determine whether any iterations of the loop that began execution before the call to the <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> method are still executing.</span></span> <span data-ttu-id="c62aa-153">A continuación, puede utilizar el valor de la <xref:System.Threading.Tasks.ParallelLoopState.IsStopped%2A> propiedad para determinar si deben devolver inmediatamente o se ejecutan normalmente.</span><span class="sxs-lookup"><span data-stu-id="c62aa-153">You can then use the value of the <xref:System.Threading.Tasks.ParallelLoopState.IsStopped%2A> property to determine whether they should return immediately or execute normally.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c62aa-154">En el ejemplo siguiente se ejecuta hasta 10 000 iteraciones de un bucle en paralelo.</span><span class="sxs-lookup"><span data-stu-id="c62aa-154">The following example executes up to 10,000 iterations of a loop in parallel.</span></span> <span data-ttu-id="c62aa-155">Se hace una pausa en cada iteración para un intervalo aleatorio entre 1 y 1000 milisegundos.</span><span class="sxs-lookup"><span data-stu-id="c62aa-155">Each iteration pauses for a random interval from 1 to 1,000 milliseconds.</span></span> <span data-ttu-id="c62aa-156">Un valor generado aleatoriamente que se determina en qué iteración del bucle el <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> se llama al método.</span><span class="sxs-lookup"><span data-stu-id="c62aa-156">A randomly generated value determines on which iteration of the loop the <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> method is called.</span></span> <span data-ttu-id="c62aa-157">Dado que las iteraciones del bucle son probablemente se estén ejecutando cuando el <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> llama el método, la expresión lambda llama el <xref:System.Threading.Tasks.ParallelLoopState.IsStopped%2A> método para comprobar si se llama a otra iteración el <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> (método).</span><span class="sxs-lookup"><span data-stu-id="c62aa-157">Because iterations of the loop are still likely to be executing when the <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> method is called, the lambda expression calls the <xref:System.Threading.Tasks.ParallelLoopState.IsStopped%2A> method to check whether another iteration has called the <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> method.</span></span> <span data-ttu-id="c62aa-158">Si devuelve `true`, la iteración se devuelve inmediatamente.</span><span class="sxs-lookup"><span data-stu-id="c62aa-158">If it returns `true`, the iteration returns immediately.</span></span>  
  
 [!code-csharp[System.Threading.Tasks.ParallelLoopState#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.parallelloopstate/cs/stop1.cs#1)]
 [!code-vb[System.Threading.Tasks.ParallelLoopState#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.parallelloopstate/vb/stop1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LowestBreakIteration">
      <MemberSignature Language="C#" Value="public Nullable&lt;long&gt; LowestBreakIteration { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Nullable`1&lt;int64&gt; LowestBreakIteration" />
      <MemberSignature Language="DocId" Value="P:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property LowestBreakIteration As Nullable(Of Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Nullable&lt;long&gt; LowestBreakIteration { Nullable&lt;long&gt; get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Int64&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="c62aa-159">Obtiene la iteración más baja del bucle desde el que se llamó a <see cref="M:System.Threading.Tasks.ParallelLoopState.Break" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c62aa-159">Gets the lowest iteration of the loop from which <see cref="M:System.Threading.Tasks.ParallelLoopState.Break" /> was called.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="c62aa-160">Iteración más baja desde la que se llamó a <see cref="M:System.Threading.Tasks.ParallelLoopState.Break" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c62aa-160">The lowest iteration from which <see cref="M:System.Threading.Tasks.ParallelLoopState.Break" /> was called.</span>
          </span>
          <span data-ttu-id="c62aa-161">En el caso de un bucle <see cref="M:System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Concurrent.Partitioner{``0},System.Action{``0})" />, el valor está basado en un índice generado internamente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c62aa-161">In the case of a <see cref="M:System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Concurrent.Partitioner{``0},System.Action{``0})" /> loop, the value is based on an internally-generated index.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c62aa-162">Es posible que varias iteraciones de un bucle paralelo para llamar a la <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> método.</span><span class="sxs-lookup"><span data-stu-id="c62aa-162">It is possible for multiple iterations of a parallel loop to call the <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> method.</span></span> <span data-ttu-id="c62aa-163">Si es así, este valor es el índice más pequeño de una iteración en la que llama <xref:System.Threading.Tasks.ParallelLoopState.Break%2A>.</span><span class="sxs-lookup"><span data-stu-id="c62aa-163">If they do, this value is the smallest index of an iteration that called <xref:System.Threading.Tasks.ParallelLoopState.Break%2A>.</span></span> <span data-ttu-id="c62aa-164">Si ninguna iteración del bucle llamó <xref:System.Threading.Tasks.ParallelLoopState.Break%2A>, esta propiedad devuelve `null`.</span><span class="sxs-lookup"><span data-stu-id="c62aa-164">If no iteration of the loop called <xref:System.Threading.Tasks.ParallelLoopState.Break%2A>, this property returns `null`.</span></span> <span data-ttu-id="c62aa-165">Tenga en cuenta que el valor de propiedad no se ve afectado por las llamadas a la <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> método.</span><span class="sxs-lookup"><span data-stu-id="c62aa-165">Note that the property value is unaffected by calls to the <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> method.</span></span>  
  
 <span data-ttu-id="c62aa-166">En las iteraciones de ejecución prolongada en que todas las iteraciones después de la iteración que llama el <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> no necesita ejecutar el método, el <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> propiedad se usa para finalizar las iteraciones que comenzó su ejecución antes de llamar a la <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> método.</span><span class="sxs-lookup"><span data-stu-id="c62aa-166">In long-running iterations in which all iterations after the iteration that calls the <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> method need not run, the <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> property is used to terminate iterations that began execution before the call to the <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> method.</span></span> <span data-ttu-id="c62aa-167">Para dejar de iteraciones cuyo índice es mayor que la iteración más baja de interrupción de ejecución de la competencia, debe hacer lo siguiente:</span><span class="sxs-lookup"><span data-stu-id="c62aa-167">To stop iterations whose index is greater than the lowest break iteration from competing execution, you should do the following:</span></span>  
  
1.  <span data-ttu-id="c62aa-168">Compruebe si el <xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A> propiedad es `true`.</span><span class="sxs-lookup"><span data-stu-id="c62aa-168">Check whether the <xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A> property is `true`.</span></span>  
  
2.  <span data-ttu-id="c62aa-169">Salir de la iteración si el índice es mayor que la <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> valor de propiedad.</span><span class="sxs-lookup"><span data-stu-id="c62aa-169">Exit from the iteration if its index is greater than the <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> property value.</span></span>  
  
 <span data-ttu-id="c62aa-170">En este ejemplo se ilustra.</span><span class="sxs-lookup"><span data-stu-id="c62aa-170">The example provides an illustration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c62aa-171">En el ejemplo siguiente se ejecuta hasta 100 iteraciones de un bucle en paralelo.</span><span class="sxs-lookup"><span data-stu-id="c62aa-171">The following example executes up to 100 iterations of a loop in parallel.</span></span> <span data-ttu-id="c62aa-172">Se hace una pausa en cada iteración para un intervalo aleatorio entre 1 y 1000 milisegundos.</span><span class="sxs-lookup"><span data-stu-id="c62aa-172">Each iteration pauses for a random interval from 1 to 1,000 milliseconds.</span></span> <span data-ttu-id="c62aa-173">Un valor generado aleatoriamente que se determina en qué iteración del bucle el <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> se llama al método.</span><span class="sxs-lookup"><span data-stu-id="c62aa-173">A randomly generated value determines on which iteration of the loop the <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> method is called.</span></span> <span data-ttu-id="c62aa-174">Esto evita que las iteraciones cuyo índice es mayor que el <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> valor de la propiedad de inicio después de la llamada a la <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> método, pero no afecta a las iteraciones que ya han empezado a ejecutar.</span><span class="sxs-lookup"><span data-stu-id="c62aa-174">This prevents iterations whose index is greater than the <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> property value from starting after the call to the <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> method, but it does not affect any iterations that have already begun executing.</span></span> <span data-ttu-id="c62aa-175">Para evitar que se complete, llama a cada iteración del <xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A> método para comprobar si se llama a otra iteración el <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> método.</span><span class="sxs-lookup"><span data-stu-id="c62aa-175">To prevent these from completing, each iteration calls the <xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A> method to check whether another iteration has called the <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> method.</span></span> <span data-ttu-id="c62aa-176">Si es así, la iteración comprueba el valor de la <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> propiedad y, si es mayor que el valor de índice de la iteración actual, se devuelve inmediatamente.</span><span class="sxs-lookup"><span data-stu-id="c62aa-176">If so, the iteration checks the value of the <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> property and, if it is greater than the current iteration's index value, returns immediately.</span></span>  
  
 [!code-csharp[System.Threading.Tasks.ParallelLoopState#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.parallelloopstate/cs/break1.cs#2)]
 [!code-vb[System.Threading.Tasks.ParallelLoopState#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.parallelloopstate/vb/break1.vb#2)]  
  
 <span data-ttu-id="c62aa-177">Tenga en cuenta que, dado el <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> valor está fuera del ámbito fuera del bucle paralelo, debe asignarlo a una variable que es visible fuera del bucle si desea conservar su valor.</span><span class="sxs-lookup"><span data-stu-id="c62aa-177">Note that, because the <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> value is out of scope outside of the parallel loop, you must assign it to a variable that is visible outside of the loop if you want to preserve its value.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration" />
        <altmember cref="M:System.Threading.Tasks.ParallelLoopState.Break" />
      </Docs>
    </Member>
    <Member MemberName="ShouldExitCurrentIteration">
      <MemberSignature Language="C#" Value="public bool ShouldExitCurrentIteration { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ShouldExitCurrentIteration" />
      <MemberSignature Language="DocId" Value="P:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ShouldExitCurrentIteration As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool ShouldExitCurrentIteration { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="c62aa-178">Obtiene si la iteración actual del bucle debe salir basándose en las solicitudes realizadas por esta u otras iteraciones.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c62aa-178">Gets whether the current iteration of the loop should exit based on requests made by this or other iterations.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="c62aa-179">
            <see langword="true" /> si la iteración actual debería terminar; en caso contrario, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c62aa-179">
              <see langword="true" /> if the current iteration should exit; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c62aa-180">El <xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A> propiedad está establecida en `true` en cualquiera de las condiciones siguientes:</span><span class="sxs-lookup"><span data-stu-id="c62aa-180">The <xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A> property is set to `true` under any of the following conditions:</span></span>  
  
-   <span data-ttu-id="c62aa-181">Una iteración de las llamadas de bucle <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> o <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A>.</span><span class="sxs-lookup"><span data-stu-id="c62aa-181">An iteration of the loop calls <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> or <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A>.</span></span>  
  
-   <span data-ttu-id="c62aa-182">Una iteración del bucle produce una excepción.</span><span class="sxs-lookup"><span data-stu-id="c62aa-182">An iteration of the loop throws an exception.</span></span>  
  
-   <span data-ttu-id="c62aa-183">Se ha cancelado el bucle.</span><span class="sxs-lookup"><span data-stu-id="c62aa-183">The loop is canceled.</span></span>  
  
 <span data-ttu-id="c62aa-184">Cuando esta propiedad es `true`, la <xref:System.Threading.Tasks.Parallel> clase proactivamente intentará prohibir iteraciones adicionales del bucle inicien la ejecución.</span><span class="sxs-lookup"><span data-stu-id="c62aa-184">When this property is `true`, the <xref:System.Threading.Tasks.Parallel> class will proactively attempt to prohibit additional iterations of the loop from starting execution.</span></span> <span data-ttu-id="c62aa-185">Sin embargo, puede haber casos donde es puede evitar que se inicien iteraciones adicionales.</span><span class="sxs-lookup"><span data-stu-id="c62aa-185">However, there may be cases where it is unable to prevent additional iterations from starting.</span></span>  
  
 <span data-ttu-id="c62aa-186">También puede ser el caso de que una iteración de ejecución prolongada ya ha comenzado la ejecución.</span><span class="sxs-lookup"><span data-stu-id="c62aa-186">It may also be the case that a long-running iteration has already begun execution.</span></span> <span data-ttu-id="c62aa-187">En tales casos, pueden comprobar explícitamente iteraciones el <xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A> propiedad y dejará de ejecución si la propiedad devuelve `true`.</span><span class="sxs-lookup"><span data-stu-id="c62aa-187">In such cases, iterations may explicitly check the <xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A> property and cease execution if the property returns `true`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c62aa-188">En el ejemplo siguiente se ejecuta hasta 100 iteraciones de un bucle en paralelo.</span><span class="sxs-lookup"><span data-stu-id="c62aa-188">The following example executes up to 100 iterations of a loop in parallel.</span></span> <span data-ttu-id="c62aa-189">Se hace una pausa en cada iteración para un intervalo aleatorio entre 1 y 1000 milisegundos.</span><span class="sxs-lookup"><span data-stu-id="c62aa-189">Each iteration pauses for a random interval from 1 to 1,000 milliseconds.</span></span> <span data-ttu-id="c62aa-190">Un valor generado aleatoriamente que se determina en qué iteración del bucle el <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> se llama al método.</span><span class="sxs-lookup"><span data-stu-id="c62aa-190">A randomly generated value determines on which iteration of the loop the <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> method is called.</span></span> <span data-ttu-id="c62aa-191">Esto evita que las iteraciones cuyo índice es mayor que el <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> valor de la propiedad de inicio después de la llamada a la <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> método, pero no afecta a las iteraciones que ya han empezado a ejecutar.</span><span class="sxs-lookup"><span data-stu-id="c62aa-191">This prevents iterations whose index is greater than the <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> property value from starting after the call to the <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> method, but it does not affect any iterations that have already begun executing.</span></span> <span data-ttu-id="c62aa-192">Para evitar que se complete, llama a cada iteración del <xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A> método para comprobar si se llama a otra iteración el <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> método.</span><span class="sxs-lookup"><span data-stu-id="c62aa-192">To prevent these from completing, each iteration calls the <xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A> method to check whether another iteration has called the <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> method.</span></span> <span data-ttu-id="c62aa-193">Si es así, la iteración comprueba el valor de la <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> propiedad y, si es mayor que el valor de índice de la iteración actual, se devuelve inmediatamente.</span><span class="sxs-lookup"><span data-stu-id="c62aa-193">If so, the iteration checks the value of the <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> property and, if it is greater than the current iteration's index value, returns immediately.</span></span>  
  
 [!code-csharp[System.Threading.Tasks.ParallelLoopState#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.parallelloopstate/cs/break1.cs#2)]
 [!code-vb[System.Threading.Tasks.ParallelLoopState#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.parallelloopstate/vb/break1.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration" />
        <altmember cref="M:System.Threading.Tasks.ParallelLoopState.Break" />
        <altmember cref="M:System.Threading.Tasks.ParallelLoopState.Stop" />
      </Docs>
    </Member>
    <Member MemberName="Stop">
      <MemberSignature Language="C#" Value="public void Stop ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Stop() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.ParallelLoopState.Stop" />
      <MemberSignature Language="VB.NET" Value="Public Sub Stop ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Stop();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="c62aa-194">Comunica que el bucle <see cref="T:System.Threading.Tasks.Parallel" /> debe cesar la ejecución en cuanto pueda el sistema.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c62aa-194">Communicates that the <see cref="T:System.Threading.Tasks.Parallel" /> loop should cease execution at the system's earliest convenience.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c62aa-195">Llamar a la <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> método indica que no se necesitan ejecutar las iteraciones del bucle que no haya iniciado todavía.</span><span class="sxs-lookup"><span data-stu-id="c62aa-195">Calling the <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> method indicates that any iterations of the loop that have not yet started need not be run.</span></span> <span data-ttu-id="c62aa-196">Eficazmente cancela cualquier iteraciones adicionales del bucle.</span><span class="sxs-lookup"><span data-stu-id="c62aa-196">It effectively cancels any additional iterations of the loop.</span></span> <span data-ttu-id="c62aa-197">Sin embargo, no impide que las iteraciones que ya se han comenzado la ejecución.</span><span class="sxs-lookup"><span data-stu-id="c62aa-197">However, it does not stop any iterations that have already begun execution.</span></span>  
  
 <span data-ttu-id="c62aa-198">Llamar a la <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> método hace la <xref:System.Threading.Tasks.ParallelLoopState.IsStopped%2A> propiedad para devolver `true` para alguna iteración del bucle que todavía se está ejecutando.</span><span class="sxs-lookup"><span data-stu-id="c62aa-198">Calling the <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> method causes the <xref:System.Threading.Tasks.ParallelLoopState.IsStopped%2A> property to return `true` for any iteration of the loop that is still executing.</span></span> <span data-ttu-id="c62aa-199">Esto es especialmente útil para las iteraciones de ejecución prolongada, que pueden comprobar la <xref:System.Threading.Tasks.ParallelLoopState.IsStopped%2A> propiedad y salir pronto si su valor es `true`.</span><span class="sxs-lookup"><span data-stu-id="c62aa-199">This is particularly useful for long-running iterations, which can check the <xref:System.Threading.Tasks.ParallelLoopState.IsStopped%2A> property and exit early if its value is `true`.</span></span>  
  
 <span data-ttu-id="c62aa-200"><xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> se emplea normalmente en algoritmos basados en búsqueda, donde una vez un resultado de iteraciones se encuentra, ningún otras se necesitan ejecutar.</span><span class="sxs-lookup"><span data-stu-id="c62aa-200"><xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> is typically employed in search-based algorithms, where once a result is found, no other iterations need be executed.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c62aa-201">En el ejemplo siguiente se ejecuta hasta 10 000 iteraciones de un bucle en paralelo.</span><span class="sxs-lookup"><span data-stu-id="c62aa-201">The following example executes up to 10,000 iterations of a loop in parallel.</span></span> <span data-ttu-id="c62aa-202">Se hace una pausa en cada iteración para un intervalo aleatorio entre 1 y 1000 milisegundos.</span><span class="sxs-lookup"><span data-stu-id="c62aa-202">Each iteration pauses for a random interval from 1 to 1,000 milliseconds.</span></span> <span data-ttu-id="c62aa-203">Un valor generado aleatoriamente que se determina en qué iteración del bucle el <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> se llama al método.</span><span class="sxs-lookup"><span data-stu-id="c62aa-203">A randomly generated value determines on which iteration of the loop the <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> method is called.</span></span> <span data-ttu-id="c62aa-204">Como se muestra en el resultado del ejemplo, no existen iteraciones ejecutarán después de llamar a la <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> método.</span><span class="sxs-lookup"><span data-stu-id="c62aa-204">As the output from the example shows, no iterations execute after the call to the <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> method.</span></span>  
  
 [!code-csharp[System.Threading.Tasks.ParallelLoopState#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.parallelloopstate/cs/stop1.cs#1)]
 [!code-vb[System.Threading.Tasks.ParallelLoopState#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.parallelloopstate/vb/stop1.vb#1)]  
  
 <span data-ttu-id="c62aa-205">Dado que las iteraciones del bucle son probablemente se estén ejecutando cuando el <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> se llama al método, las llamadas de cada iteración el <xref:System.Threading.Tasks.ParallelLoopState.IsStopped%2A> método para comprobar si se llama a otra iteración el <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> método.</span><span class="sxs-lookup"><span data-stu-id="c62aa-205">Because iterations of the loop are still likely to be executing when the <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> method is called, each iteration calls the <xref:System.Threading.Tasks.ParallelLoopState.IsStopped%2A> method to check whether another iteration has called the <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> method.</span></span> <span data-ttu-id="c62aa-206">Si devuelve `true`, la iteración se devuelve inmediatamente.</span><span class="sxs-lookup"><span data-stu-id="c62aa-206">If it returns `true`, the iteration returns immediately.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="c62aa-207">Se ha llamado anteriormente al método <see cref="M:System.Threading.Tasks.ParallelLoopState.Break" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c62aa-207">The <see cref="M:System.Threading.Tasks.ParallelLoopState.Break" /> method was called previously.</span>
          </span>
          <span data-ttu-id="c62aa-208">Las iteraciones del mismo bucle no pueden utilizar <see cref="M:System.Threading.Tasks.ParallelLoopState.Break" /> y <see cref="M:System.Threading.Tasks.ParallelLoopState.Stop" /> en combinación.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c62aa-208">
              <see cref="M:System.Threading.Tasks.ParallelLoopState.Break" /> and <see cref="M:System.Threading.Tasks.ParallelLoopState.Stop" /> may not be used in combination by iterations of the same loop.</span>
          </span>
        </exception>
        <altmember cref="P:System.Threading.Tasks.ParallelLoopState.IsStopped" />
      </Docs>
    </Member>
  </Members>
</Type>