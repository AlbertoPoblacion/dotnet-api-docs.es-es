<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="TaskContinuationOptions.xml" source-language="en-US" target-language="es-ES">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac5a1c7a235951de4ea0250e610e035f8451c659154.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">a1c7a235951de4ea0250e610e035f8451c659154</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-1.0,netcore-1.1,netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,netstandard-1.0,netstandard-1.1,netstandard-1.2,netstandard-1.3,netstandard-1.4,netstandard-1.6,netstandard-2.0,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.Threading.Tasks.TaskContinuationOptions">
          <source>Specifies the behavior for a task that is created by using the <ph id="ph1">&lt;see cref="M:System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)" /&gt;</ph> or <ph id="ph2">&lt;see cref="M:System.Threading.Tasks.Task`1.ContinueWith(System.Action{System.Threading.Tasks.Task{`0}},System.Threading.Tasks.TaskContinuationOptions)" /&gt;</ph> method.</source>
          <target state="translated">Especifica el comportamiento de una tarea que se crea mediante el método <ph id="ph1">&lt;see cref="M:System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)" /&gt;</ph> o <ph id="ph2">&lt;see cref="M:System.Threading.Tasks.Task`1.ContinueWith(System.Action{System.Threading.Tasks.Task{`0}},System.Threading.Tasks.TaskContinuationOptions)" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" uid="F:System.Threading.Tasks.TaskContinuationOptions.AttachedToParent">
          <source>Specifies that the continuation, if it is a child task, is attached to a parent in the task hierarchy.</source>
          <target state="translated">Especifica que la continuación, si es una tarea secundaria, se adjunta a un elemento primario en la jerarquía de tareas.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" uid="F:System.Threading.Tasks.TaskContinuationOptions.AttachedToParent">
          <source>The continuation can be a child task only if its antecedent is also a child task.</source>
          <target state="translated">La continuación puede ser una tarea secundaria solo si su antecedente también es una tarea secundaria.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" uid="F:System.Threading.Tasks.TaskContinuationOptions.AttachedToParent">
          <source>By default, a child task (that is, an inner task created by an outer task) executes independently of its parent.</source>
          <target state="translated">De forma predeterminada, una tarea secundaria (es decir, una tarea interna creada por una tarea externa) se ejecuta de forma independiente de la tarea principal.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" uid="F:System.Threading.Tasks.TaskContinuationOptions.AttachedToParent">
          <source>You can use the <ph id="ph1">&lt;see cref="F:System.Threading.Tasks.TaskContinuationOptions.AttachedToParent" /&gt;</ph> option so that the parent and child tasks are synchronized.</source>
          <target state="translated">La opción <ph id="ph1">&lt;see cref="F:System.Threading.Tasks.TaskContinuationOptions.AttachedToParent" /&gt;</ph> permite sincronizar las tareas primarias y secundarias.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" uid="F:System.Threading.Tasks.TaskContinuationOptions.AttachedToParent">
          <source>Note that if a parent task is configured with the <ph id="ph1">&lt;see cref="F:System.Threading.Tasks.TaskCreationOptions.DenyChildAttach" /&gt;</ph> option, the <ph id="ph2">&lt;see cref="F:System.Threading.Tasks.TaskCreationOptions.AttachedToParent" /&gt;</ph> option in the child task has no effect, and the child task will execute as a detached child task.</source>
          <target state="translated">Tenga en cuenta que, si una tarea primaria se configura con la opción <ph id="ph1">&lt;see cref="F:System.Threading.Tasks.TaskCreationOptions.DenyChildAttach" /&gt;</ph>, la opción <ph id="ph2">&lt;see cref="F:System.Threading.Tasks.TaskCreationOptions.AttachedToParent" /&gt;</ph> no tiene ningún efecto en la tarea secundaria y ésta se ejecutará como una tarea secundaria desasociada.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" uid="F:System.Threading.Tasks.TaskContinuationOptions.AttachedToParent">
          <source>For more information, see <bpt id="p1">[</bpt>Attached and Detached Child Tasks<ept id="p1">](~/docs/standard/parallel-programming/attached-and-detached-child-tasks.md)</ept>.</source>
          <target state="translated">Para más información, consulte <bpt id="p1">[</bpt>Attached and Detached Child Tasks<ept id="p1">](~/docs/standard/parallel-programming/attached-and-detached-child-tasks.md)</ept> (Tareas secundarias asociadas y desasociadas).</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" uid="F:System.Threading.Tasks.TaskContinuationOptions.DenyChildAttach">
          <source>Specifies that any child task (that is, any nested inner task created by this continuation) that is created with the <ph id="ph1">&lt;see cref="F:System.Threading.Tasks.TaskCreationOptions.AttachedToParent" /&gt;</ph> option and attempts to execute as an attached child task will not be able to attach to the parent task and will execute instead as a detached child task.</source>
          <target state="translated">Especifica que cualquier tarea secundaria (es decir, toda tarea interna anidada creada por su continuación) que se cree con la opción <ph id="ph1">&lt;see cref="F:System.Threading.Tasks.TaskCreationOptions.AttachedToParent" /&gt;</ph> e intente ejecutarse como una tarea secundaria asociada no pueda adjuntar la tarea primaria y se ejecute como una tarea secundaria desasociada.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" uid="F:System.Threading.Tasks.TaskContinuationOptions.DenyChildAttach">
          <source>For more information, see <bpt id="p1">[</bpt>Attached and Detached Child Tasks<ept id="p1">](~/docs/standard/parallel-programming/attached-and-detached-child-tasks.md)</ept>.</source>
          <target state="translated">Para más información, consulte <bpt id="p1">[</bpt>Attached and Detached Child Tasks<ept id="p1">](~/docs/standard/parallel-programming/attached-and-detached-child-tasks.md)</ept> (Tareas secundarias asociadas y desasociadas).</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" uid="F:System.Threading.Tasks.TaskContinuationOptions.ExecuteSynchronously">
          <source>Specifies that the continuation task should be executed synchronously.</source>
          <target state="translated">Especifica que la tarea de continuación debe ejecutarse sincrónicamente.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" uid="F:System.Threading.Tasks.TaskContinuationOptions.ExecuteSynchronously">
          <source>With this option specified, the continuation runs on the same thread that causes the antecedent task to transition into its final state.</source>
          <target state="translated">Si se especifica esta opción, la continuación se ejecuta en el mismo subproceso que causa la transición de la tarea anterior a su estado final.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" uid="F:System.Threading.Tasks.TaskContinuationOptions.ExecuteSynchronously">
          <source>If the antecedent is already complete when the continuation is created, the continuation will run on the thread that creates the continuation.</source>
          <target state="translated">Si la tarea anterior ya se completó al crear la continuación, esta se ejecutará en el subproceso que crea la continuación.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" uid="F:System.Threading.Tasks.TaskContinuationOptions.ExecuteSynchronously">
          <source>If the antecedent's <ph id="ph1">&lt;see cref="T:System.Threading.CancellationTokenSource" /&gt;</ph> is disposed in a <ph id="ph2">&lt;see langword="finally" /&gt;</ph> block (<ph id="ph3">&lt;see langword="Finally" /&gt;</ph> in Visual Basic), a continuation with this option will run in that <ph id="ph4">&lt;see langword="finally" /&gt;</ph> block.</source>
          <target state="translated">Si se desecha <ph id="ph1">&lt;see cref="T:System.Threading.CancellationTokenSource" /&gt;</ph> del antecedente en un bloque <ph id="ph2">&lt;see langword="finally" /&gt;</ph> (<ph id="ph3">&lt;see langword="Finally" /&gt;</ph> en Visual Basic), se ejecutará una continuación con esta opción en ese bloque <ph id="ph4">&lt;see langword="finally" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" uid="F:System.Threading.Tasks.TaskContinuationOptions.ExecuteSynchronously">
          <source>Only very short-running continuations should be executed synchronously.</source>
          <target state="translated">Solo deben ejecutarse sincrónicamente las continuaciones de duración muy breve.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" uid="F:System.Threading.Tasks.TaskContinuationOptions.ExecuteSynchronously">
          <source>Because the task executes synchronously, there is no need to call a method such as <ph id="ph1">&lt;see cref="M:System.Threading.Tasks.Task.Wait" /&gt;</ph> to ensure that the calling thread waits for the task to complete.</source>
          <target state="translated">Dado que la tarea se ejecuta de forma sincrónica, no es necesario llamar a un método como <ph id="ph1">&lt;see cref="M:System.Threading.Tasks.Task.Wait" /&gt;</ph> para asegurarse de que el subproceso llamado espera a que se complete la tarea.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" uid="F:System.Threading.Tasks.TaskContinuationOptions.HideScheduler">
          <source>Specifies that tasks created by the continuation by calling methods such as <ph id="ph1">&lt;see cref="M:System.Threading.Tasks.Task.Run(System.Action)" /&gt;</ph> or <ph id="ph2">&lt;see cref="M:System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task})" /&gt;</ph> see the default scheduler (<ph id="ph3">&lt;see cref="P:System.Threading.Tasks.TaskScheduler.Default" /&gt;</ph>) rather than the scheduler on which this continuation is running as the current scheduler.</source>
          <target state="translated">Especifica que las tareas creadas por la continuación llamando a métodos como <ph id="ph1">&lt;see cref="M:System.Threading.Tasks.Task.Run(System.Action)" /&gt;</ph> o <ph id="ph2">&lt;see cref="M:System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task})" /&gt;</ph> vean el programador predeterminado (<ph id="ph3">&lt;see cref="P:System.Threading.Tasks.TaskScheduler.Default" /&gt;</ph>) en lugar del programador en el que esta continuación se ejecuta como el programador actual.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" uid="F:System.Threading.Tasks.TaskContinuationOptions.LazyCancellation">
          <source>In the case of continuation cancellation, prevents completion of the continuation until the antecedent has completed.</source>
          <target state="translated">En el caso de cancelación de continuación, evita la finalización de la continuación hasta que el antecedente se haya completado.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" uid="F:System.Threading.Tasks.TaskContinuationOptions.LongRunning">
          <source>Specifies that a continuation will be a long-running, course-grained operation.</source>
          <target state="translated">Especifica que una continuación será una operación general de larga duración.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" uid="F:System.Threading.Tasks.TaskContinuationOptions.LongRunning">
          <source>It provides a hint to the <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.TaskScheduler" /&gt;</ph> that oversubscription may be warranted.</source>
          <target state="translated">Proporciona una sugerencia al <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.TaskScheduler" /&gt;</ph> de que se puede garantizar la sobresuscripción.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" uid="F:System.Threading.Tasks.TaskContinuationOptions.None">
          <source>When no continuation options are specified, specifies that default behavior should be used when executing a continuation.</source>
          <target state="translated">Cuando no se indica ninguna opción de continuación, especifica que se debe usar el comportamiento predeterminado cuando se ejecuta una continuación.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" uid="F:System.Threading.Tasks.TaskContinuationOptions.None">
          <source>The continuation runs asynchronously when the antecedent task completes, regardless of the antecedent's final <ph id="ph1">&lt;see cref="P:System.Threading.Tasks.Task.Status" /&gt;</ph> property value.</source>
          <target state="translated">La continuación se ejecuta de forma asincrónica cuando se complete la tarea anterior, independientemente valor de propiedad de <ph id="ph1">&lt;see cref="P:System.Threading.Tasks.Task.Status" /&gt;</ph> final del antecedente.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" uid="F:System.Threading.Tasks.TaskContinuationOptions.None">
          <source>It the continuation is a child task, it is created as a detached nested task.</source>
          <target state="translated">Si la continuación es una tarea secundaria, se crea como una tarea anidada desasociada.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" uid="F:System.Threading.Tasks.TaskContinuationOptions.NotOnCanceled">
          <source>Specifies that the continuation task should not be scheduled if its antecedent was canceled.</source>
          <target state="translated">Especifica que no se programe la tarea de continuación si se cancela la tarea anterior.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" uid="F:System.Threading.Tasks.TaskContinuationOptions.NotOnCanceled">
          <source>An antecedent is canceled if its <ph id="ph1">&lt;see cref="P:System.Threading.Tasks.Task.Status" /&gt;</ph> property upon completion is <ph id="ph2">&lt;see cref="F:System.Threading.Tasks.TaskStatus.Canceled" /&gt;</ph>.</source>
          <target state="translated">Un antecedente se cancela si su propiedad <ph id="ph1">&lt;see cref="P:System.Threading.Tasks.Task.Status" /&gt;</ph> al finalizar es <ph id="ph2">&lt;see cref="F:System.Threading.Tasks.TaskStatus.Canceled" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" uid="F:System.Threading.Tasks.TaskContinuationOptions.NotOnCanceled">
          <source>This option is not valid for multi-task continuations.</source>
          <target state="translated">Esta opción no es válida para las continuaciones de varias tareas.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" uid="F:System.Threading.Tasks.TaskContinuationOptions.NotOnFaulted">
          <source>Specifies that the continuation task should not be scheduled if its antecedent threw an unhandled exception.</source>
          <target state="translated">Especifica que no se debe programar la tarea de continuación si su antecedente produjo una excepción no controlada.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" uid="F:System.Threading.Tasks.TaskContinuationOptions.NotOnFaulted">
          <source>An antecedent throws an unhandled exception if its <ph id="ph1">&lt;see cref="P:System.Threading.Tasks.Task.Status" /&gt;</ph> property upon completion is <ph id="ph2">&lt;see cref="F:System.Threading.Tasks.TaskStatus.Faulted" /&gt;</ph>.</source>
          <target state="translated">Un antecedente produce una excepción no controlada si su propiedad <ph id="ph1">&lt;see cref="P:System.Threading.Tasks.Task.Status" /&gt;</ph> al finalizar es <ph id="ph2">&lt;see cref="F:System.Threading.Tasks.TaskStatus.Faulted" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" uid="F:System.Threading.Tasks.TaskContinuationOptions.NotOnFaulted">
          <source>This option is not valid for multi-task continuations.</source>
          <target state="translated">Esta opción no es válida para las continuaciones de varias tareas.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" uid="F:System.Threading.Tasks.TaskContinuationOptions.NotOnRanToCompletion">
          <source>Specifies that the continuation task should not be scheduled if its antecedent ran to completion.</source>
          <target state="translated">Especifica que no se debe programar la tarea de continuación si su antecedente se ejecuta completamente.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" uid="F:System.Threading.Tasks.TaskContinuationOptions.NotOnRanToCompletion">
          <source>An antecedent runs to completion if its <ph id="ph1">&lt;see cref="P:System.Threading.Tasks.Task.Status" /&gt;</ph> property upon completion is <ph id="ph2">&lt;see cref="F:System.Threading.Tasks.TaskStatus.RanToCompletion" /&gt;</ph>.</source>
          <target state="translated">Un antecedente se ejecuta por completo si su propiedad <ph id="ph1">&lt;see cref="P:System.Threading.Tasks.Task.Status" /&gt;</ph> al finalizar es <ph id="ph2">&lt;see cref="F:System.Threading.Tasks.TaskStatus.RanToCompletion" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" uid="F:System.Threading.Tasks.TaskContinuationOptions.NotOnRanToCompletion">
          <source>This option is not valid for multi-task continuations.</source>
          <target state="translated">Esta opción no es válida para las continuaciones de varias tareas.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" uid="F:System.Threading.Tasks.TaskContinuationOptions.OnlyOnCanceled">
          <source>Specifies that the continuation should be scheduled only if its antecedent was canceled.</source>
          <target state="translated">Especifica que la continuación debe programarse únicamente si se cancela su antecedente.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" uid="F:System.Threading.Tasks.TaskContinuationOptions.OnlyOnCanceled">
          <source>An antecedent is canceled if its <ph id="ph1">&lt;see cref="P:System.Threading.Tasks.Task.Status" /&gt;</ph> property upon completion is <ph id="ph2">&lt;see cref="F:System.Threading.Tasks.TaskStatus.Canceled" /&gt;</ph>.</source>
          <target state="translated">Un antecedente se cancela si su propiedad <ph id="ph1">&lt;see cref="P:System.Threading.Tasks.Task.Status" /&gt;</ph> al finalizar es <ph id="ph2">&lt;see cref="F:System.Threading.Tasks.TaskStatus.Canceled" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" uid="F:System.Threading.Tasks.TaskContinuationOptions.OnlyOnCanceled">
          <source>This option is not valid for multi-task continuations.</source>
          <target state="translated">Esta opción no es válida para las continuaciones de varias tareas.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" uid="F:System.Threading.Tasks.TaskContinuationOptions.OnlyOnFaulted">
          <source>Specifies that the continuation task should be scheduled only if its antecedent threw an unhandled exception.</source>
          <target state="translated">Especifica que la tarea de continuación solo se debe programar si su antecedente produjo una excepción no controlada.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" uid="F:System.Threading.Tasks.TaskContinuationOptions.OnlyOnFaulted">
          <source>An antecedent throws an unhandled exception if its <ph id="ph1">&lt;see cref="P:System.Threading.Tasks.Task.Status" /&gt;</ph> property upon completion is <ph id="ph2">&lt;see cref="F:System.Threading.Tasks.TaskStatus.Faulted" /&gt;</ph>.</source>
          <target state="translated">Un antecedente produce una excepción no controlada si su propiedad <ph id="ph1">&lt;see cref="P:System.Threading.Tasks.Task.Status" /&gt;</ph> al finalizar es <ph id="ph2">&lt;see cref="F:System.Threading.Tasks.TaskStatus.Faulted" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" uid="F:System.Threading.Tasks.TaskContinuationOptions.OnlyOnFaulted">
          <source>The <ph id="ph1">&lt;see cref="F:System.Threading.Tasks.TaskContinuationOptions.OnlyOnFaulted" /&gt;</ph> option guarantees that the <ph id="ph2">&lt;see cref="P:System.Threading.Tasks.Task.Exception" /&gt;</ph> property in the antecedent is not <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">La opción <ph id="ph1">&lt;see cref="F:System.Threading.Tasks.TaskContinuationOptions.OnlyOnFaulted" /&gt;</ph> garantiza que la propiedad <ph id="ph2">&lt;see cref="P:System.Threading.Tasks.Task.Exception" /&gt;</ph> del antecedente no es <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" uid="F:System.Threading.Tasks.TaskContinuationOptions.OnlyOnFaulted">
          <source>You can use that property to catch the exception and see which exception caused the task to fault.</source>
          <target state="translated">Puede usar esa propiedad para detectar la excepción y ver qué excepción provocó el error de la tarea.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" uid="F:System.Threading.Tasks.TaskContinuationOptions.OnlyOnFaulted">
          <source>If you do not access the <ph id="ph1">&lt;see cref="P:System.Threading.Tasks.Task.Exception" /&gt;</ph> property, the exception is unhandled.</source>
          <target state="translated">Si no tiene acceso a la propiedad <ph id="ph1">&lt;see cref="P:System.Threading.Tasks.Task.Exception" /&gt;</ph>, no se controla la excepción.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" uid="F:System.Threading.Tasks.TaskContinuationOptions.OnlyOnFaulted">
          <source>Also, if you attempt to access the <ph id="ph1">&lt;see cref="P:System.Threading.Tasks.Task`1.Result" /&gt;</ph> property of a task that has been canceled or has faulted, a new exception is thrown.</source>
          <target state="translated">Asimismo, si intenta tener acceso a la propiedad <ph id="ph1">&lt;see cref="P:System.Threading.Tasks.Task`1.Result" /&gt;</ph> de una tarea cancelada o con errores, se producirá una nueva excepción.</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" uid="F:System.Threading.Tasks.TaskContinuationOptions.OnlyOnFaulted">
          <source>This option is not valid for multi-task continuations.</source>
          <target state="translated">Esta opción no es válida para las continuaciones de varias tareas.</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" uid="F:System.Threading.Tasks.TaskContinuationOptions.OnlyOnRanToCompletion">
          <source>Specifies that the continuation should be scheduled only if its antecedent ran to completion.</source>
          <target state="translated">Especifica que la continuación debe programarse únicamente si su antecedente se ejecuta completamente.</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" uid="F:System.Threading.Tasks.TaskContinuationOptions.OnlyOnRanToCompletion">
          <source>An antecedent runs to completion if its <ph id="ph1">&lt;see cref="P:System.Threading.Tasks.Task.Status" /&gt;</ph> property upon completion is <ph id="ph2">&lt;see cref="F:System.Threading.Tasks.TaskStatus.RanToCompletion" /&gt;</ph>.</source>
          <target state="translated">Un antecedente se ejecuta por completo si su propiedad <ph id="ph1">&lt;see cref="P:System.Threading.Tasks.Task.Status" /&gt;</ph> al finalizar es <ph id="ph2">&lt;see cref="F:System.Threading.Tasks.TaskStatus.RanToCompletion" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" uid="F:System.Threading.Tasks.TaskContinuationOptions.OnlyOnRanToCompletion">
          <source>This option is not valid for multi-task continuations.</source>
          <target state="translated">Esta opción no es válida para las continuaciones de varias tareas.</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" uid="F:System.Threading.Tasks.TaskContinuationOptions.PreferFairness">
          <source>A hint to a <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.TaskScheduler" /&gt;</ph> to schedule task in the order in which they were scheduled, so that tasks scheduled sooner are more likely to run sooner, and tasks scheduled later are more likely to run later.</source>
          <target state="translated">Sugerencia a un objeto <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.TaskScheduler" /&gt;</ph> para que programe las tareas en el orden en el que se programaron, de manera que haya más probabilidades de que las tareas programadas antes se ejecuten en primer lugar y las tareas programadas más tarde se ejecuten después.</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" uid="F:System.Threading.Tasks.TaskContinuationOptions.RunContinuationsAsynchronously">
          <source>Specifies that the continuation task should be run asynchronously.</source>
          <target state="translated">Especifica que la tarea de continuación debe ejecutarse asincrónicamente.</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" uid="F:System.Threading.Tasks.TaskContinuationOptions.RunContinuationsAsynchronously">
          <source>This option has precedence over <ph id="ph1">&lt;see cref="F:System.Threading.Tasks.TaskContinuationOptions.ExecuteSynchronously" /&gt;</ph>.</source>
          <target state="translated">Esta opción tiene precedencia sobre <ph id="ph1">&lt;see cref="F:System.Threading.Tasks.TaskContinuationOptions.ExecuteSynchronously" /&gt;</ph>.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>