<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="ValueTask`1.xml" source-language="en-US" target-language="es-ES">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-81070f4" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1e344e59-9d8e-481b-978a-09f2e01be86c946e9ceec2676cfbc1b9aed30223dbac578baafd.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">946e9ceec2676cfbc1b9aed30223dbac578baafd</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">f9e3295b6cc303a611a73a84c4b27f9da792ad0d</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/26/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-1.0,netcore-1.1,netcore-2.0,netcore-2.1</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Tasks.ValueTask`1">
          <source>The result.</source>
          <target state="translated">Resultado.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" uid="T:System.Threading.Tasks.ValueTask`1">
          <source>Provides a value type that wraps a <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph> and a <ph id="ph2">&lt;typeparamref name="TResult" /&gt;</ph>, only one of which is used.</source>
          <target state="translated">Proporciona un tipo de valor que encapsula un <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph> y un <ph id="ph2">&lt;typeparamref name="TResult" /&gt;</ph>(solo se usa uno de ellos).</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Tasks.ValueTask`1">
          <source>A method may return an instance of this value type when it's likely that the result of its operation will be available synchronously, and when it's expected to be invoked so frequently that the cost of allocating a new <ph id="ph1">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph> for each call will be prohibitive.</source>
          <target state="translated">Un método puede devolver una instancia de este tipo de valor si es probable que el resultado de la operación estará disponible sincrónicamente y, cuando se espera que invoca con tanta frecuencia que el costo de asignar un nuevo <ph id="ph1">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph> cada llamada pasarán a ser prohibitivo.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Tasks.ValueTask`1">
          <source>There are tradeoffs to using a <ph id="ph1">&lt;xref:System.Threading.Tasks.ValueTask%601&gt;</ph> instead of a <ph id="ph2">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph>.</source>
          <target state="translated">Hay compromisos que debe usar un <ph id="ph1">&lt;xref:System.Threading.Tasks.ValueTask%601&gt;</ph> en lugar de un <ph id="ph2">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Tasks.ValueTask`1">
          <source>For example, while a <ph id="ph1">&lt;xref:System.Threading.Tasks.ValueTask%601&gt;</ph> can help avoid an allocation in the case where the successful result is available synchronously, it also contains two fields, whereas a <ph id="ph2">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph> as a reference type is a single field.</source>
          <target state="translated">Por ejemplo, mientras un <ph id="ph1">&lt;xref:System.Threading.Tasks.ValueTask%601&gt;</ph> puede ayudar a evitar una asignación en el caso donde el resultado correcto está disponible sincrónicamente, también contiene dos campos, mientras que un <ph id="ph2">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph> como una referencia de tipo es un campo único.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Tasks.ValueTask`1">
          <source>This means that a method call returns two fields worth of data instead of one, which is more data to copy.</source>
          <target state="translated">Esto significa que una llamada al método devuelve dos campos que vale la pena de datos en lugar de uno, que es más datos para copiar.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Tasks.ValueTask`1">
          <source>It also means, that if a method that returns a <ph id="ph1">&lt;xref:System.Threading.Tasks.ValueTask%601&gt;</ph> is awaited within an async method, the state machine for that async method will be larger, because it must store a struct containing two fields instead of a single reference.</source>
          <target state="translated">También significa que si un método que devuelva un <ph id="ph1">&lt;xref:System.Threading.Tasks.ValueTask%601&gt;</ph> es "awaited" dentro de un método asincrónico, la máquina de Estados para ese método asincrónico serán más grande, ya que debe almacenar una estructura que contiene dos campos en lugar de una única referencia.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Tasks.ValueTask`1">
          <source>For uses other than consuming the result of an asynchronous operation using await, <ph id="ph1">&lt;xref:System.Threading.Tasks.ValueTask%601&gt;</ph> can lead to a more convoluted programming model that requires more allocations.</source>
          <target state="translated">Para usos distintos consumiendo el resultado de una operación asincrónica usando await, <ph id="ph1">&lt;xref:System.Threading.Tasks.ValueTask%601&gt;</ph> puede dar lugar a un modelo de programación más complicado que requiere más de las asignaciones.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Tasks.ValueTask`1">
          <source>For example, consider a method that could return either a <ph id="ph1">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph> with a cached task as a common result or a <ph id="ph2">&lt;xref:System.Threading.Tasks.ValueTask%601&gt;</ph>.</source>
          <target state="translated">Por ejemplo, considere un método que puede devolver un <ph id="ph1">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph> con una tarea almacenada en caché como consecuencia común o un <ph id="ph2">&lt;xref:System.Threading.Tasks.ValueTask%601&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Tasks.ValueTask`1">
          <source>If the consumer of the result wants to use it as a <ph id="ph1">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph> in a method like <ph id="ph2">&lt;xref:System.Threading.Tasks.Task.WhenAll%2A&gt;</ph> or <ph id="ph3">&lt;xref:System.Threading.Tasks.Task.WhenAny%2A&gt;</ph>, the <ph id="ph4">&lt;xref:System.Threading.Tasks.ValueTask%601&gt;</ph> must first be converted to a <ph id="ph5">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph> using <ph id="ph6">&lt;xref:System.Threading.Tasks.ValueTask%601.AsTask%2A&gt;</ph>, leading to an allocation that would have been avoided if a cached <ph id="ph7">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph> had been used in the first place.</source>
          <target state="translated">Si el consumidor del resultado desea volver a utilizarlo como una <ph id="ph1">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph> en un método como <ph id="ph2">&lt;xref:System.Threading.Tasks.Task.WhenAll%2A&gt;</ph> o <ph id="ph3">&lt;xref:System.Threading.Tasks.Task.WhenAny%2A&gt;</ph>, el <ph id="ph4">&lt;xref:System.Threading.Tasks.ValueTask%601&gt;</ph> debe convertirse primero a un <ph id="ph5">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph> con <ph id="ph6">&lt;xref:System.Threading.Tasks.ValueTask%601.AsTask%2A&gt;</ph>, provocando una asignación que podrían haberse evitada si un almacenado en caché <ph id="ph7">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph> hubiese utilizado en primer lugar.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Tasks.ValueTask`1">
          <source>As such, the default choice for any asynchronous method should be to return a <ph id="ph1">&lt;xref:System.Threading.Tasks.Task&gt;</ph> or <ph id="ph2">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph>.</source>
          <target state="translated">Por lo tanto, debe ser la opción predeterminada para cualquier método asincrónico devolver un <ph id="ph1">&lt;xref:System.Threading.Tasks.Task&gt;</ph> o <ph id="ph2">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Tasks.ValueTask`1">
          <source>Only if performance analysis proves it worthwhile should a <ph id="ph1">&lt;xref:System.Threading.Tasks.ValueTask%601&gt;</ph> be used instead of a <ph id="ph2">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph>.</source>
          <target state="translated">Solo si el análisis de rendimiento demuestre que merece la pena debe un <ph id="ph1">&lt;xref:System.Threading.Tasks.ValueTask%601&gt;</ph> usarse en lugar de un <ph id="ph2">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Tasks.ValueTask`1">
          <source>There is no non-generic version of <ph id="ph1">&lt;xref:System.Threading.Tasks.ValueTask%601&gt;</ph>, as the <ph id="ph2">&lt;xref:System.Threading.Tasks.Task.CompletedTask&gt;</ph> property may be used to hand back a successfully completed singleton in the case where a method returning a <ph id="ph3">&lt;xref:System.Threading.Tasks.Task&gt;</ph> completes synchronously and successfully.</source>
          <target state="translated">No hay ninguna versión no genérica de <ph id="ph1">&lt;xref:System.Threading.Tasks.ValueTask%601&gt;</ph>, como el <ph id="ph2">&lt;xref:System.Threading.Tasks.Task.CompletedTask&gt;</ph> propiedad puede utilizarse para pasar un singleton se completó correctamente en el caso de que un método que devuelve un <ph id="ph3">&lt;xref:System.Threading.Tasks.Task&gt;</ph> finaliza de forma sincrónica y correctamente.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Tasks.ValueTask`1">
          <source>The use of the <ph id="ph1">&lt;xref:System.Threading.Tasks.ValueTask%601&gt;</ph> type is supported starting with C# 7, and is not supported by any version of Visual Basic.</source>
          <target state="translated">El uso de la <ph id="ph1">&lt;xref:System.Threading.Tasks.ValueTask%601&gt;</ph> tipo se admite a partir de C# 7 y no es compatible con cualquier versión de Visual Basic.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.ValueTask`1.#ctor(System.Threading.Tasks.Task{`0})">
          <source>The task.</source>
          <target state="translated">Tarea.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.ValueTask`1.#ctor(System.Threading.Tasks.Task{`0})">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.ValueTask`1" /&gt;</ph> class using the supplied task that represents the operation.</source>
          <target state="translated">Inicializa una nueva instancia de la clase <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.ValueTask`1" /&gt;</ph> usando la tarea suministrada que representa la operación.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.ValueTask`1.#ctor(System.Threading.Tasks.Task{`0})">
          <source>The <ph id="ph1">&lt;paramref name="task" /&gt;</ph> argument is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">El argumento <ph id="ph1">&lt;paramref name="task" /&gt;</ph> es <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.ValueTask`1.#ctor(`0)">
          <source>The result.</source>
          <target state="translated">Resultado.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.ValueTask`1.#ctor(`0)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.ValueTask`1" /&gt;</ph> class using the supplied result of a successful operation.</source>
          <target state="translated">Inicializa una nueva instancia de la clase <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.ValueTask`1" /&gt;</ph> usando el resultado suministrado de una operación realizada correctamente.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.ValueTask`1.AsTask">
          <source>Retrieves a <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph> object that represents this <ph id="ph2">&lt;see cref="T:System.Threading.Tasks.ValueTask`1" /&gt;</ph>.</source>
          <target state="translated">Recupera un objeto <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph> que representa este <ph id="ph2">&lt;see cref="T:System.Threading.Tasks.ValueTask`1" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.ValueTask`1.AsTask">
          <source>The <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph> object that is wrapped in this <ph id="ph2">&lt;see cref="T:System.Threading.Tasks.ValueTask`1" /&gt;</ph> if one exists, or a new <ph id="ph3">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph> object that represents the result.</source>
          <target state="translated">El objeto <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph> que se encapsula en este <ph id="ph2">&lt;see cref="T:System.Threading.Tasks.ValueTask`1" /&gt;</ph>, si existe, o un nuevo objeto <ph id="ph3">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph> que representa el resultado.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.ValueTask`1.ConfigureAwait(System.Boolean)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> to attempt to marshal the continuation back to the captured context; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> para intentar serializar la continuación hasta el contexto capturado; en caso contrario, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.ValueTask`1.ConfigureAwait(System.Boolean)">
          <source>Configures an awaiter for this value.</source>
          <target state="translated">Configura un elemento que ejecuta await para este valor.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.ValueTask`1.ConfigureAwait(System.Boolean)">
          <source>The configured awaiter.</source>
          <target state="translated">Elemento que ejecuta await configurado.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.ValueTask`1.CreateAsyncMethodBuilder">
          <source>Creates a method builder for use with an async method.</source>
          <target state="translated">Crea un generador de método para usarlo con un método asincrónico.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.ValueTask`1.CreateAsyncMethodBuilder">
          <source>The created builder.</source>
          <target state="translated">El generador creado.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.ValueTask`1.Equals(System.Object)">
          <source>The object to compare with the current object.</source>
          <target state="translated">Objeto que se va a comparar con el objeto actual.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.ValueTask`1.Equals(System.Object)">
          <source>Determines whether the specified object is equal to the current object.</source>
          <target state="translated">Determina si el objeto especificado es igual al objeto actual.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.ValueTask`1.Equals(System.Object)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the specified object is equal to the current object; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> si el objeto especificado es igual al objeto actual; en caso contrario, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.ValueTask`1.Equals(System.Threading.Tasks.ValueTask{`0})">
          <source>The object to compare with the current object.</source>
          <target state="translated">Objeto que se va a comparar con el objeto actual.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.ValueTask`1.Equals(System.Threading.Tasks.ValueTask{`0})">
          <source>Determines whether the specified <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.ValueTask`1" /&gt;</ph> object is equal to the current <ph id="ph2">&lt;see cref="T:System.Threading.Tasks.ValueTask`1" /&gt;</ph> object.</source>
          <target state="translated">Determina si el objeto <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.ValueTask`1" /&gt;</ph> especificado es igual al objeto <ph id="ph2">&lt;see cref="T:System.Threading.Tasks.ValueTask`1" /&gt;</ph> actual.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.ValueTask`1.Equals(System.Threading.Tasks.ValueTask{`0})">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the specified object is equal to the current object; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> si el objeto especificado es igual al objeto actual; en caso contrario, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.ValueTask`1.GetAwaiter">
          <source>Creates an awaiter for this value.</source>
          <target state="translated">Crea un objeto que ejecuta await para este objeto awaitable.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.ValueTask`1.GetAwaiter">
          <source>The awaiter.</source>
          <target state="translated">Awaiter.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.ValueTask`1.GetHashCode">
          <source>Returns the hash code for this instance.</source>
          <target state="translated">Devuelve el código hash de esta instancia.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.ValueTask`1.GetHashCode">
          <source>The hash code for the current object.</source>
          <target state="translated">Código hash del objeto actual.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" uid="P:System.Threading.Tasks.ValueTask`1.IsCanceled">
          <source>Gets a value that indicates whether this object represents a canceled operation.</source>
          <target state="translated">Obtiene un valor que indica si este objeto representa una operación cancelada.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.Tasks.ValueTask`1.IsCanceled">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if this object represents a canceled operation; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> Si este objeto representa una operación cancelada; en caso contrario, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" uid="P:System.Threading.Tasks.ValueTask`1.IsCompleted">
          <source>Gets a value that indicates whether this object represents a completed operation.</source>
          <target state="translated">Obtiene un valor que indica si este objeto representa una operación completada.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.Tasks.ValueTask`1.IsCompleted">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if this object represents a completed operation; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> Si este objeto representa una operación completada; en caso contrario, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" uid="P:System.Threading.Tasks.ValueTask`1.IsCompletedSuccessfully">
          <source>Gets a value that indicates whether this object represents a successfully completed operation.</source>
          <target state="translated">Obtiene un valor que indica si este objeto representa una operación completada correctamente.</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.Tasks.ValueTask`1.IsCompletedSuccessfully">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if this object represents a successfully completed operation; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> Si este objeto representa una operación completada correctamente; en caso contrario, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" uid="P:System.Threading.Tasks.ValueTask`1.IsFaulted">
          <source>Gets a value that indicates whether this object represents a failed operation.</source>
          <target state="translated">Obtiene un valor que indica si este objeto representa una operación con error.</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.Tasks.ValueTask`1.IsFaulted">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if this object represents a failed operation; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> Si este objeto representa una operación con errores; en caso contrario, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.ValueTask`1.op_Equality(System.Threading.Tasks.ValueTask{`0},System.Threading.Tasks.ValueTask{`0})">
          <source>The first value to compare.</source>
          <target state="translated">Primer valor que se va a comparar.</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.ValueTask`1.op_Equality(System.Threading.Tasks.ValueTask{`0},System.Threading.Tasks.ValueTask{`0})">
          <source>The second value to compare.</source>
          <target state="translated">Segundo valor que se va a comparar.</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.ValueTask`1.op_Equality(System.Threading.Tasks.ValueTask{`0},System.Threading.Tasks.ValueTask{`0})">
          <source>Compares two values for equality.</source>
          <target state="translated">Compara dos valores para determinar si son iguales.</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.ValueTask`1.op_Equality(System.Threading.Tasks.ValueTask{`0},System.Threading.Tasks.ValueTask{`0})">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the two <ph id="ph2">&lt;see cref="T:System.Threading.Tasks.ValueTask`1" /&gt;</ph> values are equal; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> si los dos valores <ph id="ph2">&lt;see cref="T:System.Threading.Tasks.ValueTask`1" /&gt;</ph> son iguales; en caso contrario, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.ValueTask`1.op_Inequality(System.Threading.Tasks.ValueTask{`0},System.Threading.Tasks.ValueTask{`0})">
          <source>The first value to compare.</source>
          <target state="translated">Primer valor que se va a comparar.</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.ValueTask`1.op_Inequality(System.Threading.Tasks.ValueTask{`0},System.Threading.Tasks.ValueTask{`0})">
          <source>The seconed value to compare.</source>
          <target state="translated">Segundo valor que se va a comparar.</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.ValueTask`1.op_Inequality(System.Threading.Tasks.ValueTask{`0},System.Threading.Tasks.ValueTask{`0})">
          <source>Determines whether two <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.ValueTask`1" /&gt;</ph> values are unequal.</source>
          <target state="translated">Determina si dos valores <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.ValueTask`1" /&gt;</ph> son desiguales.</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.ValueTask`1.op_Inequality(System.Threading.Tasks.ValueTask{`0},System.Threading.Tasks.ValueTask{`0})">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the two <ph id="ph2">&lt;see cref="T:System.Threading.Tasks.ValueTask`1" /&gt;</ph> values are not equal; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> si los dos valores <ph id="ph2">&lt;see cref="T:System.Threading.Tasks.ValueTask`1" /&gt;</ph> no son iguales; en caso contrario, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" uid="P:System.Threading.Tasks.ValueTask`1.Result">
          <source>Gets the result.</source>
          <target state="translated">Obtiene el resultado.</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.Tasks.ValueTask`1.Result">
          <source>The result.</source>
          <target state="translated">Resultado.</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.Tasks.ValueTask`1.Result">
          <source>If this <ph id="ph1">&lt;xref:System.Threading.Tasks.ValueTask%601&gt;</ph> wraps a successful result, this property returns it directly.</source>
          <target state="translated">Si este <ph id="ph1">&lt;xref:System.Threading.Tasks.ValueTask%601&gt;</ph> contiene un resultado correcto, esta propiedad devuelve directamente.</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.Tasks.ValueTask`1.Result">
          <source>If it wraps a <ph id="ph1">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph>, the behavior of <ph id="ph2">&lt;xref:System.Threading.Tasks.ValueTask%601.Result%2A&gt;</ph> is similar to the behavior of accessing <ph id="ph3">&lt;xref:System.Threading.Tasks.Task%601.Result%2A&gt;</ph> on the wrapped task: if the task hasn't completed, accessing the property blocks the calling thread until it completes; if the task has completed successfully, the property returns the result; if the task has faulted or was cancellecd, accessing the property throws an exception.</source>
          <target state="translated">Si se ajusta un <ph id="ph1">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph>, el comportamiento de <ph id="ph2">&lt;xref:System.Threading.Tasks.ValueTask%601.Result%2A&gt;</ph> es similar al comportamiento de acceso a <ph id="ph3">&lt;xref:System.Threading.Tasks.Task%601.Result%2A&gt;</ph> en la tarea ajustada: si la tarea no se ha completado, acceso a la propiedad bloquea el subproceso que realiza la llamada hasta que se completa; si se ha completado la tarea correctamente, la propiedad devuelve el resultado; Si la tarea ha producido un error o cancellecd, acceso a la propiedad produce una excepción.</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.Tasks.ValueTask`1.Result">
          <source>The thrown exception is not wrapped in an <ph id="ph1">&lt;xref:System.AggregateException&gt;</ph>, which is different from the behavior of <ph id="ph2">&lt;xref:System.Threading.Tasks.Task%601.Result%2A&gt;</ph> in the same situation.</source>
          <target state="translated">La excepción no se ajusta en un <ph id="ph1">&lt;xref:System.AggregateException&gt;</ph>, que es diferente del comportamiento de <ph id="ph2">&lt;xref:System.Threading.Tasks.Task%601.Result%2A&gt;</ph> en la misma situación.</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.ValueTask`1.ToString">
          <source>Returns a string that represents the current object.</source>
          <target state="translated">Devuelve una cadena que representa el objeto actual.</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.ValueTask`1.ToString">
          <source>A string that represents the current object.</source>
          <target state="translated">Una cadena que representa el objeto actual.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>