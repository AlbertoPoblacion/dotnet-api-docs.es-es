<Type Name="FileSystem" FullName="Microsoft.VisualBasic.FileSystem">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="698d4c7779138119bfe452e95602b55a06711e5b" />
    <Meta Name="ms.sourcegitcommit" Value="5a49536d99d2d0b54e4cb7280870903e043272df" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="es-ES" />
    <Meta Name="ms.lasthandoff" Value="07/03/2018" />
    <Meta Name="ms.locfileid" Value="37712149" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class FileSystem" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit FileSystem extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.VisualBasic.FileSystem" />
  <TypeSignature Language="VB.NET" Value="Public Module FileSystem" />
  <TypeSignature Language="C++ CLI" Value="public ref class FileSystem sealed" />
  <TypeSignature Language="F#" Value="type FileSystem = class" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.VisualBasic</AssemblyName>
    <AssemblyVersion>7.0.5000.0</AssemblyVersion>
    <AssemblyVersion>8.0.0.0</AssemblyVersion>
    <AssemblyVersion>10.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>Microsoft.VisualBasic.CompilerServices.StandardModule</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Security.SecurityCritical</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <span data-ttu-id="02db3-101">The <see langword="FileSystem" /> module contains the procedures that are used to perform file, directory or folder, and system operations.</span>
      <span class="sxs-lookup">
        <span data-stu-id="02db3-101">The <see langword="FileSystem" /> module contains the procedures that are used to perform file, directory or folder, and system operations.</span>
      </span>
      <span data-ttu-id="02db3-102">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than using the <see langword="FileSystem" /> module.</span>
      <span class="sxs-lookup">
        <span data-stu-id="02db3-102">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than using the <see langword="FileSystem" /> module.</span>
      </span>
      <span data-ttu-id="02db3-103">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
      <span class="sxs-lookup">
        <span data-stu-id="02db3-103">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="02db3-104">Este módulo admite las palabras clave del lenguaje Visual Basic y miembros de la biblioteca de tiempo de ejecución que tienen acceso a archivos y carpetas.</span><span class="sxs-lookup"><span data-stu-id="02db3-104">This module supports the Visual Basic language keywords and run-time library members that access files and folders.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="02db3-105">Este ejemplo se usa el `GetAttr` función para determinar los atributos de un archivo, directorio o carpeta.</span><span class="sxs-lookup"><span data-stu-id="02db3-105">This example uses the `GetAttr` function to determine the attributes of a file and directory or folder.</span></span>  
  
 [!code-vb[VbVbalrCatRef#25](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#25)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="ChDir">
      <MemberSignature Language="C#" Value="public static void ChDir (string Path);" />
      <MemberSignature Language="ILAsm" Value=".method public static void ChDir(string Path) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.ChDir(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ChDir (Path As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void ChDir(System::String ^ Path);" />
      <MemberSignature Language="F#" Value="static member ChDir : string -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.ChDir Path" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="Path">
          <span data-ttu-id="02db3-106">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-106">Required.</span>
          </span>
          <span data-ttu-id="02db3-107">A <see langword="String" /> expression that identifies which directory or folder becomes the new default directory or folder.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-107">A <see langword="String" /> expression that identifies which directory or folder becomes the new default directory or folder.</span>
          </span>
          <span data-ttu-id="02db3-108">
            <c>Path</c> may include the drive.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-108">
              <c>Path</c> may include the drive.</span>
          </span>
          <span data-ttu-id="02db3-109">If no drive is specified, <see langword="ChDir" /> changes the default directory or folder on the current drive.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-109">If no drive is specified, <see langword="ChDir" /> changes the default directory or folder on the current drive.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="02db3-110">Changes the current directory or folder.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-110">Changes the current directory or folder.</span>
          </span>
          <span data-ttu-id="02db3-111">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than the <see langword="ChDir" /> function.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-111">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than the <see langword="ChDir" /> function.</span>
          </span>
          <span data-ttu-id="02db3-112">For more information, see <see cref="P:Microsoft.VisualBasic.FileIO.FileSystem.CurrentDirectory" /> .</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-112">For more information, see <see cref="P:Microsoft.VisualBasic.FileIO.FileSystem.CurrentDirectory" /> .</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="02db3-113">El `ChDir` función cambia el directorio predeterminado, pero no la unidad predeterminada.</span><span class="sxs-lookup"><span data-stu-id="02db3-113">The `ChDir` function changes the default directory, but not the default drive.</span></span> <span data-ttu-id="02db3-114">Por ejemplo, si la unidad predeterminada es C, la instrucción siguiente cambia el directorio predeterminado en la unidad D, pero C sigue siendo la unidad predeterminada:</span><span class="sxs-lookup"><span data-stu-id="02db3-114">For example, if the default drive is C, the following statement changes the default directory on drive D, but C remains the default drive:</span></span>  
  
 [!code-vb[VbVbalrCatRef#39](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#39)]  
  
 <span data-ttu-id="02db3-115">Puede convertir en relativo es cambios de directorio, escriba dos puntos, como se indica a continuación:</span><span class="sxs-lookup"><span data-stu-id="02db3-115">You can make relative directory changes is by typing two periods, as follows:</span></span>  
  
 [!code-vb[VbVbalrCatRef#40](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#40)]  
  
> [!IMPORTANT]
>  <span data-ttu-id="02db3-116">El `ChDir` función requiere el permiso de código no administrado, lo que puede afectar a su ejecución en situaciones de confianza parcial.</span><span class="sxs-lookup"><span data-stu-id="02db3-116">The `ChDir` function requires unmanaged code permission, which may affect its execution in partial-trust situations.</span></span> <span data-ttu-id="02db3-117">Para obtener más información, consulte <xref:System.Security.Permissions.SecurityPermission> y.</span><span class="sxs-lookup"><span data-stu-id="02db3-117">For more information, see <xref:System.Security.Permissions.SecurityPermission> and .</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="02db3-118">Este ejemplo se usa el `ChDir` función puede cambiar el directorio actual o la carpeta.</span><span class="sxs-lookup"><span data-stu-id="02db3-118">This example uses the `ChDir` function to change the current directory or folder.</span></span>  
  
 [!code-vb[VbVbalrCatRef#41](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#41)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="02db3-119">
            <paramref name="Path" /> is empty.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-119">
              <paramref name="Path" /> is empty.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.FileNotFoundException">
          <span data-ttu-id="02db3-120">Invalid drive is specified, or drive is unavailable.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-120">Invalid drive is specified, or drive is unavailable.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.ChDrive" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.CurDir" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Dir" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.MkDir(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.RmDir(System.String)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.FileNotFoundException" />
      </Docs>
    </Member>
    <MemberGroup MemberName="ChDrive">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="02db3-121">Changes the current drive.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-121">Changes the current drive.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ChDrive">
      <MemberSignature Language="C#" Value="public static void ChDrive (char Drive);" />
      <MemberSignature Language="ILAsm" Value=".method public static void ChDrive(char Drive) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.ChDrive(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ChDrive (Drive As Char)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void ChDrive(char Drive);" />
      <MemberSignature Language="F#" Value="static member ChDrive : char -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.ChDrive Drive" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Drive" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="Drive">
          <span data-ttu-id="02db3-122">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-122">Required.</span>
          </span>
          <span data-ttu-id="02db3-123">String expression that specifies an existing drive.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-123">String expression that specifies an existing drive.</span>
          </span>
          <span data-ttu-id="02db3-124">If you supply a zero-length string (""), the current drive does not change.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-124">If you supply a zero-length string (""), the current drive does not change.</span>
          </span>
          <span data-ttu-id="02db3-125">If the <c>Drive</c> argument is a multiple-character string, <see langword="ChDrive" /> uses only the first letter.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-125">If the <c>Drive</c> argument is a multiple-character string, <see langword="ChDrive" /> uses only the first letter.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="02db3-126">Changes the current drive.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-126">Changes the current drive.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="02db3-127">El `ChDrive` función requiere el permiso de código no administrado, lo que puede afectar a su ejecución en situaciones de confianza parcial.</span><span class="sxs-lookup"><span data-stu-id="02db3-127">The `ChDrive` function requires unmanaged-code permission, which may affect its execution in partial-trust situations.</span></span> <span data-ttu-id="02db3-128">Para obtener más información, consulte <xref:System.Security.Permissions.SecurityPermission> y [permisos de acceso del código](http://msdn.microsoft.com/library/e5ae402f-6dda-4732-bbe8-77296630f675).</span><span class="sxs-lookup"><span data-stu-id="02db3-128">For more information, see <xref:System.Security.Permissions.SecurityPermission> and [Code Access Permissions](http://msdn.microsoft.com/library/e5ae402f-6dda-4732-bbe8-77296630f675).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="02db3-129">Este ejemplo se usa el `ChDrive` función puede cambiar la unidad actual.</span><span class="sxs-lookup"><span data-stu-id="02db3-129">This example uses the `ChDrive` function to change the current drive.</span></span> <span data-ttu-id="02db3-130">La función produce una excepción si la unidad no existe.</span><span class="sxs-lookup"><span data-stu-id="02db3-130">The function throws an exception if the drive does not exist.</span></span>  
  
 [!code-vb[VbVbalrCatRef#32](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#32)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="02db3-131">Invalid drive is specified, or drive is unavailable.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-131">Invalid drive is specified, or drive is unavailable.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.ChDir(System.String)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.CurDir" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Dir" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.MkDir(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.RmDir(System.String)" />
        <altmember cref="T:System.IO.IOException" />
      </Docs>
    </Member>
    <Member MemberName="ChDrive">
      <MemberSignature Language="C#" Value="public static void ChDrive (string Drive);" />
      <MemberSignature Language="ILAsm" Value=".method public static void ChDrive(string Drive) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.ChDrive(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ChDrive (Drive As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void ChDrive(System::String ^ Drive);" />
      <MemberSignature Language="F#" Value="static member ChDrive : string -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.ChDrive Drive" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Drive" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="Drive">
          <span data-ttu-id="02db3-132">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-132">Required.</span>
          </span>
          <span data-ttu-id="02db3-133">String expression that specifies an existing drive.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-133">String expression that specifies an existing drive.</span>
          </span>
          <span data-ttu-id="02db3-134">If you supply a zero-length string (""), the current drive does not change.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-134">If you supply a zero-length string (""), the current drive does not change.</span>
          </span>
          <span data-ttu-id="02db3-135">If the <c>Drive</c> argument is a multiple-character string, <see langword="ChDrive" /> uses only the first letter.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-135">If the <c>Drive</c> argument is a multiple-character string, <see langword="ChDrive" /> uses only the first letter.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="02db3-136">Changes the current drive.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-136">Changes the current drive.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="02db3-137">El `ChDrive` función requiere el permiso de código no administrado, lo que puede afectar a su ejecución en situaciones de confianza parcial.</span><span class="sxs-lookup"><span data-stu-id="02db3-137">The `ChDrive` function requires unmanaged-code permission, which may affect its execution in partial-trust situations.</span></span> <span data-ttu-id="02db3-138">Para obtener más información, consulte <xref:System.Security.Permissions.SecurityPermission> y [permisos de acceso del código](http://msdn.microsoft.com/library/e5ae402f-6dda-4732-bbe8-77296630f675).</span><span class="sxs-lookup"><span data-stu-id="02db3-138">For more information, see <xref:System.Security.Permissions.SecurityPermission> and [Code Access Permissions](http://msdn.microsoft.com/library/e5ae402f-6dda-4732-bbe8-77296630f675).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="02db3-139">Este ejemplo se usa el `ChDrive` función puede cambiar la unidad actual.</span><span class="sxs-lookup"><span data-stu-id="02db3-139">This example uses the `ChDrive` function to change the current drive.</span></span> <span data-ttu-id="02db3-140">La función produce una excepción si la unidad no existe.</span><span class="sxs-lookup"><span data-stu-id="02db3-140">The function throws an exception if the drive does not exist.</span></span>  
  
 [!code-vb[VbVbalrCatRef#32](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#32)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="02db3-141">Invalid drive is specified, or drive is unavailable.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-141">Invalid drive is specified, or drive is unavailable.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.ChDir(System.String)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.CurDir" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Dir" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.MkDir(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.RmDir(System.String)" />
        <altmember cref="T:System.IO.IOException" />
      </Docs>
    </Member>
    <MemberGroup MemberName="CurDir">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="02db3-142">Returns a string representing the current path.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-142">Returns a string representing the current path.</span>
          </span>
          <span data-ttu-id="02db3-143">The <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> gives you better productivity and performance in file I/O operations than <see langword="CurDir" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-143">The <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> gives you better productivity and performance in file I/O operations than <see langword="CurDir" />.</span>
          </span>
          <span data-ttu-id="02db3-144">For more information, see <see cref="P:Microsoft.VisualBasic.FileIO.FileSystem.CurrentDirectory" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-144">For more information, see <see cref="P:Microsoft.VisualBasic.FileIO.FileSystem.CurrentDirectory" />.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="CurDir">
      <MemberSignature Language="C#" Value="public static string CurDir ();" />
      <MemberSignature Language="ILAsm" Value=".method public static string CurDir() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.CurDir" />
      <MemberSignature Language="VB.NET" Value="Public Function CurDir () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ CurDir();" />
      <MemberSignature Language="F#" Value="static member CurDir : unit -&gt; string" Usage="Microsoft.VisualBasic.FileSystem.CurDir " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="02db3-145">Returns a string representing the current path.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-145">Returns a string representing the current path.</span>
          </span>
          <span data-ttu-id="02db3-146">The <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> gives you better productivity and performance in file I/O operations than <see langword="CurDir" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-146">The <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> gives you better productivity and performance in file I/O operations than <see langword="CurDir" />.</span>
          </span>
          <span data-ttu-id="02db3-147">For more information, see <see cref="P:Microsoft.VisualBasic.FileIO.FileSystem.CurrentDirectory" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-147">For more information, see <see cref="P:Microsoft.VisualBasic.FileIO.FileSystem.CurrentDirectory" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="02db3-148">A string representing the current path.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-148">A string representing the current path.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="02db3-149">Este ejemplo se usa el `CurDir` función para devolver la ruta de acceso actual.</span><span class="sxs-lookup"><span data-stu-id="02db3-149">This example uses the `CurDir` function to return the current path.</span></span>  
  
 [!code-vb[VbVbalrCatRef#65](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#65)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.ChDrive" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.ChDir(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.MkDir(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.RmDir(System.String)" />
        <altmember cref="T:System.IO.IOException" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <Member MemberName="CurDir">
      <MemberSignature Language="C#" Value="public static string CurDir (char Drive);" />
      <MemberSignature Language="ILAsm" Value=".method public static string CurDir(char Drive) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.CurDir(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Function CurDir (Drive As Char) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ CurDir(char Drive);" />
      <MemberSignature Language="F#" Value="static member CurDir : char -&gt; string" Usage="Microsoft.VisualBasic.FileSystem.CurDir Drive" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Drive" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="Drive">
          <span data-ttu-id="02db3-150">Optional.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-150">Optional.</span>
          </span>
          <span data-ttu-id="02db3-151">
            <see langword="Char" /> expression that specifies an existing drive.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-151">
              <see langword="Char" /> expression that specifies an existing drive.</span>
          </span>
          <span data-ttu-id="02db3-152">If no drive is specified, or if <c>Drive</c> is a zero-length string (""), <see langword="CurDir" /> returns the path for the current drive.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-152">If no drive is specified, or if <c>Drive</c> is a zero-length string (""), <see langword="CurDir" /> returns the path for the current drive.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="02db3-153">Returns a string representing the current path.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-153">Returns a string representing the current path.</span>
          </span>
          <span data-ttu-id="02db3-154">The <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> gives you better productivity and performance in file I/O operations than <see langword="CurDir" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-154">The <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> gives you better productivity and performance in file I/O operations than <see langword="CurDir" />.</span>
          </span>
          <span data-ttu-id="02db3-155">For more information, see <see cref="P:Microsoft.VisualBasic.FileIO.FileSystem.CurrentDirectory" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-155">For more information, see <see cref="P:Microsoft.VisualBasic.FileIO.FileSystem.CurrentDirectory" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="02db3-156">A string representing the current path.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-156">A string representing the current path.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="02db3-157">Este ejemplo se usa el `CurDir` función para devolver la ruta de acceso actual.</span><span class="sxs-lookup"><span data-stu-id="02db3-157">This example uses the `CurDir` function to return the current path.</span></span>  
  
 [!code-vb[VbVbalrCatRef#65](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#65)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.ChDrive" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.ChDir(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.MkDir(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.RmDir(System.String)" />
        <altmember cref="T:System.IO.IOException" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Dir">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="02db3-158">Returns a string representing the name of a file, directory, or folder that matches a specified pattern or file attribute, or the volume label of a drive.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-158">Returns a string representing the name of a file, directory, or folder that matches a specified pattern or file attribute, or the volume label of a drive.</span>
          </span>
          <span data-ttu-id="02db3-159">The <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> gives you better productivity and performance in file I/O operations than the <see langword="Dir" /> function.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-159">The <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> gives you better productivity and performance in file I/O operations than the <see langword="Dir" /> function.</span>
          </span>
          <span data-ttu-id="02db3-160">See <see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.GetDirectoryInfo(System.String)" /> for more information.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-160">See <see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.GetDirectoryInfo(System.String)" /> for more information.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Dir">
      <MemberSignature Language="C#" Value="public static string Dir ();" />
      <MemberSignature Language="ILAsm" Value=".method public static string Dir() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Dir" />
      <MemberSignature Language="VB.NET" Value="Public Function Dir () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Dir();" />
      <MemberSignature Language="F#" Value="static member Dir : unit -&gt; string" Usage="Microsoft.VisualBasic.FileSystem.Dir " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="02db3-161">Returns a string representing the name of a file, directory, or folder that matches a specified pattern or file attribute, or the volume label of a drive.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-161">Returns a string representing the name of a file, directory, or folder that matches a specified pattern or file attribute, or the volume label of a drive.</span>
          </span>
          <span data-ttu-id="02db3-162">The <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> gives you better productivity and performance in file I/O operations than the <see langword="Dir" /> function.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-162">The <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> gives you better productivity and performance in file I/O operations than the <see langword="Dir" /> function.</span>
          </span>
          <span data-ttu-id="02db3-163">See <see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.GetDirectoryInfo(System.String)" /> for more information.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-163">See <see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.GetDirectoryInfo(System.String)" /> for more information.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="02db3-164">A string representing the name of a file, directory, or folder that matches a specified pattern or file attribute, or the volume label of a drive.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-164">A string representing the name of a file, directory, or folder that matches a specified pattern or file attribute, or the volume label of a drive.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="02db3-165">El `Dir` función admite el uso de varios caracteres (`*`) ni un único carácter (`?`) los caracteres comodín para especificar varios archivos.</span><span class="sxs-lookup"><span data-stu-id="02db3-165">The `Dir` function supports the use of multiple-character (`*`) and single-character (`?`) wildcards to specify multiple files.</span></span>  
  
 <span data-ttu-id="02db3-166">`VbVolume` Devuelve la etiqueta de volumen para la unidad en lugar de un nombre de archivo específico.</span><span class="sxs-lookup"><span data-stu-id="02db3-166">`VbVolume` returns the volume label for the drive instead of a specific file name.</span></span>  
  
 <span data-ttu-id="02db3-167">Debe proporcionar un `PathName` la primera vez que se llama a la `Dir` función.</span><span class="sxs-lookup"><span data-stu-id="02db3-167">You must supply a `PathName` the first time that you call the `Dir` function.</span></span> <span data-ttu-id="02db3-168">Para recuperar el elemento siguiente, puede realizar las llamadas posteriores a la `Dir` función sin parámetros.</span><span class="sxs-lookup"><span data-stu-id="02db3-168">To retrieve the next item, you can make subsequent calls to the `Dir` function without parameters.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="02db3-169">Para ejecutar correctamente, el `Dir` función requiere el <xref:System.Security.Permissions.FileIOPermissionAccess.Read> y <xref:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery> marcas de <xref:System.Security.Permissions.FileIOPermission> concederá al código de ejecución.</span><span class="sxs-lookup"><span data-stu-id="02db3-169">To run correctly, the `Dir` function requires the <xref:System.Security.Permissions.FileIOPermissionAccess.Read> and <xref:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery> flags of <xref:System.Security.Permissions.FileIOPermission> to be granted to the executing code.</span></span> <span data-ttu-id="02db3-170">Para obtener más información, consulte <xref:System.Security.Permissions.FileIOPermission>, <xref:System.Security.SecurityException>, y [permisos de acceso del código](http://msdn.microsoft.com/library/e5ae402f-6dda-4732-bbe8-77296630f675).</span><span class="sxs-lookup"><span data-stu-id="02db3-170">For more information, see <xref:System.Security.Permissions.FileIOPermission>, <xref:System.Security.SecurityException>, and [Code Access Permissions](http://msdn.microsoft.com/library/e5ae402f-6dda-4732-bbe8-77296630f675).</span></span>  
  
 <span data-ttu-id="02db3-171">El `Attributes` valores de enumeración del argumento son los siguientes:</span><span class="sxs-lookup"><span data-stu-id="02db3-171">The `Attributes` argument enumeration values are as follows:</span></span>  
  
|<span data-ttu-id="02db3-172">Valor</span><span class="sxs-lookup"><span data-stu-id="02db3-172">Value</span></span>|<span data-ttu-id="02db3-173">Constante</span><span class="sxs-lookup"><span data-stu-id="02db3-173">Constant</span></span>|<span data-ttu-id="02db3-174">Descripción</span><span class="sxs-lookup"><span data-stu-id="02db3-174">Description</span></span>|  
|-|-|-|  
|`Normal`|`vbnormal`|<span data-ttu-id="02db3-175">Predeterminado</span><span class="sxs-lookup"><span data-stu-id="02db3-175">Default.</span></span> <span data-ttu-id="02db3-176">Especifica los archivos sin atributos.</span><span class="sxs-lookup"><span data-stu-id="02db3-176">Specifies files without attributes.</span></span>|  
|`ReadOnly`|`vbReadOnly`|<span data-ttu-id="02db3-177">Especifica los archivos de solo lectura y también los archivos sin atributos.</span><span class="sxs-lookup"><span data-stu-id="02db3-177">Specifies read-only files, and also files without attributes.</span></span>|  
|`Hidden`|`vbHidden`|<span data-ttu-id="02db3-178">Especifica los archivos ocultos y también archivos sin atributos.</span><span class="sxs-lookup"><span data-stu-id="02db3-178">Specifies hidden files, and also files without attributes.</span></span>|  
|`System`|`vbSystem`|<span data-ttu-id="02db3-179">Especifica los archivos del sistema y también los archivos sin atributos.</span><span class="sxs-lookup"><span data-stu-id="02db3-179">Specifies system files, and also files without attributes.</span></span>|  
|`Volume`|`vbVolume`|<span data-ttu-id="02db3-180">Especifica la etiqueta de volumen. Si se especifica cualquier otro atributo, `vbVolume` se omite.</span><span class="sxs-lookup"><span data-stu-id="02db3-180">Specifies volume label; if any other attribute is specified, `vbVolume` is ignored.</span></span>|  
|`Directory`|`vbDirectory`|<span data-ttu-id="02db3-181">Especifica los directorios o carpetas y también los archivos sin atributos.</span><span class="sxs-lookup"><span data-stu-id="02db3-181">Specifies directories or folders, and also files without attributes.</span></span>|  
|`Archive`|`vbArchive`|<span data-ttu-id="02db3-182">Archivo ha cambiado desde la última copia de seguridad.</span><span class="sxs-lookup"><span data-stu-id="02db3-182">File has changed since last backup.</span></span>|  
|`Alias`|`vbAlias`|<span data-ttu-id="02db3-183">Archivo tiene un nombre diferente.</span><span class="sxs-lookup"><span data-stu-id="02db3-183">File has a different name.</span></span>|  
  
> [!NOTE]
>  <span data-ttu-id="02db3-184">Estas enumeraciones se especifican mediante el lenguaje Visual Basic y pueden utilizarse en cualquier parte del código en lugar de los valores reales.</span><span class="sxs-lookup"><span data-stu-id="02db3-184">These enumerations are specified by the Visual Basic language and can be used anywhere in your code instead of the actual values.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="02db3-185">Este ejemplo se usa el `Dir` función para comprobar si existen determinados archivos y directorios.</span><span class="sxs-lookup"><span data-stu-id="02db3-185">This example uses the `Dir` function to check if certain files and directories exist.</span></span>  
  
 [!code-vb[VbVbalrCatRef#3](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.ChDir(System.String)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.ChDrive" />
        <altmember cref="T:Microsoft.VisualBasic.FileAttribute" />
      </Docs>
    </Member>
    <Member MemberName="Dir">
      <MemberSignature Language="C#" Value="public static string Dir (string Pathname, Microsoft.VisualBasic.FileAttribute Attributes = Microsoft.VisualBasic.FileAttribute.Normal);" FrameworkAlternate="netframework-1.1" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string Dir(string Pathname, valuetype Microsoft.VisualBasic.FileAttribute Attributes) cil managed" FrameworkAlternate="netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Dir(System.String,Microsoft.VisualBasic.FileAttribute)" FrameworkAlternate="netframework-1.1;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2" />
      <MemberSignature Language="VB.NET" Value="Public Function Dir (Pathname As String, Optional Attributes As FileAttribute = Microsoft.VisualBasic.FileAttribute.Normal) As String" FrameworkAlternate="netframework-1.1" />
      <MemberSignature Language="F#" Value="static member Dir : string * Microsoft.VisualBasic.FileAttribute -&gt; string" Usage="Microsoft.VisualBasic.FileSystem.Dir (Pathname, Attributes)" FrameworkAlternate="netframework-1.1;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2" />
      <MemberSignature Language="C#" Value="public static string Dir (string PathName, Microsoft.VisualBasic.FileAttribute Attributes = Microsoft.VisualBasic.FileAttribute.Normal);" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2" />
      <MemberSignature Language="ILAsm" Value=".method public static string Dir(string PathName, valuetype Microsoft.VisualBasic.FileAttribute Attributes) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Dir(System.String,Microsoft.VisualBasic.FileAttribute)" FrameworkAlternate="netframework-2.0" />
      <MemberSignature Language="VB.NET" Value="Public Function Dir (PathName As String, Optional Attributes As FileAttribute = Microsoft.VisualBasic.FileAttribute.Normal) As String" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2" />
      <MemberSignature Language="F#" Value="static member Dir : string * Microsoft.VisualBasic.FileAttribute -&gt; string" Usage="Microsoft.VisualBasic.FileSystem.Dir (PathName, Attributes)" FrameworkAlternate="netframework-2.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Pathname" Type="System.String" Index="0" FrameworkAlternate="netframework-1.1" />
        <Parameter Name="PathName" Type="System.String" Index="0" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2" />
        <Parameter Name="Attributes" Type="Microsoft.VisualBasic.FileAttribute" Index="1" />
      </Parameters>
      <Docs>
        <param name="PathName">
          <span data-ttu-id="02db3-186">Optional.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-186">Optional.</span>
          </span>
          <span data-ttu-id="02db3-187">
            <see langword="String" /> expression that specifies a file name, directory or folder name, or drive volume label.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-187">
              <see langword="String" /> expression that specifies a file name, directory or folder name, or drive volume label.</span>
          </span>
          <span data-ttu-id="02db3-188">A zero-length string (<see langword="&quot;&quot;" />) is returned if <c>PathName</c> is not found.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-188">A zero-length string (<see langword="&quot;&quot;" />) is returned if <c>PathName</c> is not found.</span>
          </span>
        </param>
        <param name="Pathname">To be added.</param>
        <param name="Attributes">
          <span data-ttu-id="02db3-189">Optional.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-189">Optional.</span>
          </span>
          <span data-ttu-id="02db3-190">Enumeration or numeric expression whose value specifies file attributes.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-190">Enumeration or numeric expression whose value specifies file attributes.</span>
          </span>
          <span data-ttu-id="02db3-191">If omitted, <see langword="Dir" /> returns files that match <c>PathName</c> but have no attributes.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-191">If omitted, <see langword="Dir" /> returns files that match <c>PathName</c> but have no attributes.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="02db3-192">Returns a string representing the name of a file, directory, or folder that matches a specified pattern or file attribute, or the volume label of a drive.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-192">Returns a string representing the name of a file, directory, or folder that matches a specified pattern or file attribute, or the volume label of a drive.</span>
          </span>
          <span data-ttu-id="02db3-193">The <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> gives you better productivity and performance in file I/O operations than the <see langword="Dir" /> function.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-193">The <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> gives you better productivity and performance in file I/O operations than the <see langword="Dir" /> function.</span>
          </span>
          <span data-ttu-id="02db3-194">See <see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.GetDirectoryInfo(System.String)" /> for more information.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-194">See <see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.GetDirectoryInfo(System.String)" /> for more information.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="02db3-195">A string representing the name of a file, directory, or folder that matches a specified pattern or file attribute, or the volume label of a drive.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-195">A string representing the name of a file, directory, or folder that matches a specified pattern or file attribute, or the volume label of a drive.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="02db3-196">El `Dir` función admite el uso de varios caracteres (`*`) ni un único carácter (`?`) los caracteres comodín para especificar varios archivos.</span><span class="sxs-lookup"><span data-stu-id="02db3-196">The `Dir` function supports the use of multiple-character (`*`) and single-character (`?`) wildcards to specify multiple files.</span></span>  
  
 <span data-ttu-id="02db3-197">`VbVolume` Devuelve la etiqueta de volumen para la unidad en lugar de un nombre de archivo específico.</span><span class="sxs-lookup"><span data-stu-id="02db3-197">`VbVolume` returns the volume label for the drive instead of a specific file name.</span></span>  
  
 <span data-ttu-id="02db3-198">Debe proporcionar un `PathName` la primera vez que se llama a la `Dir` función.</span><span class="sxs-lookup"><span data-stu-id="02db3-198">You must supply a `PathName` the first time that you call the `Dir` function.</span></span> <span data-ttu-id="02db3-199">Para recuperar el elemento siguiente, puede realizar las llamadas posteriores a la `Dir` función sin parámetros.</span><span class="sxs-lookup"><span data-stu-id="02db3-199">To retrieve the next item, you can make subsequent calls to the `Dir` function with no parameters.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="02db3-200">Para ejecutar correctamente, el `Dir` función requiere el <xref:System.Security.Permissions.FileIOPermissionAccess.Read> y <xref:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery> marcas de <xref:System.Security.Permissions.FileIOPermission> concederá al código de ejecución.</span><span class="sxs-lookup"><span data-stu-id="02db3-200">To run correctly, the `Dir` function requires the <xref:System.Security.Permissions.FileIOPermissionAccess.Read> and <xref:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery> flags of <xref:System.Security.Permissions.FileIOPermission> to be granted to the executing code.</span></span> <span data-ttu-id="02db3-201">Para obtener más información, consulte <xref:System.Security.Permissions.FileIOPermission>, <xref:System.Security.SecurityException>, y [permisos de acceso del código](http://msdn.microsoft.com/library/e5ae402f-6dda-4732-bbe8-77296630f675).</span><span class="sxs-lookup"><span data-stu-id="02db3-201">For more information, see <xref:System.Security.Permissions.FileIOPermission>, <xref:System.Security.SecurityException>, and [Code Access Permissions](http://msdn.microsoft.com/library/e5ae402f-6dda-4732-bbe8-77296630f675).</span></span>  
  
 <span data-ttu-id="02db3-202">El `Attributes` valores de enumeración del argumento son los siguientes:</span><span class="sxs-lookup"><span data-stu-id="02db3-202">The `Attributes` argument enumeration values are as follows:</span></span>  
  
|<span data-ttu-id="02db3-203">Valor</span><span class="sxs-lookup"><span data-stu-id="02db3-203">Value</span></span>|<span data-ttu-id="02db3-204">Constante</span><span class="sxs-lookup"><span data-stu-id="02db3-204">Constant</span></span>|<span data-ttu-id="02db3-205">Descripción</span><span class="sxs-lookup"><span data-stu-id="02db3-205">Description</span></span>|  
|-|-|-|  
|`Normal`|`vbnormal`|<span data-ttu-id="02db3-206">Predeterminado</span><span class="sxs-lookup"><span data-stu-id="02db3-206">Default.</span></span> <span data-ttu-id="02db3-207">Especifica los archivos que no tienen atributos.</span><span class="sxs-lookup"><span data-stu-id="02db3-207">Specifies files that have no attributes.</span></span>|  
|`ReadOnly`|`vbReadOnly`|<span data-ttu-id="02db3-208">Especifica los archivos de solo lectura, además de los archivos que no tienen atributos.</span><span class="sxs-lookup"><span data-stu-id="02db3-208">Specifies read-only files, in addition to files that have no attributes.</span></span>|  
|`Hidden`|`vbHidden`|<span data-ttu-id="02db3-209">Especifica los archivos ocultos, además de los archivos que no tienen atributos.</span><span class="sxs-lookup"><span data-stu-id="02db3-209">Specifies hidden files, in addition to files that have no attributes.</span></span>|  
|`System`|`vbSystem`|<span data-ttu-id="02db3-210">Especifica los archivos del sistema, además de los archivos que no tienen atributos.</span><span class="sxs-lookup"><span data-stu-id="02db3-210">Specifies system files, in addition to files that have no attributes.</span></span>|  
|`Volume`|`vbVolume`|<span data-ttu-id="02db3-211">Especifica la etiqueta de volumen. Si se especifica cualquier otro atributo, `vbVolume` se omite.</span><span class="sxs-lookup"><span data-stu-id="02db3-211">Specifies volume label; if any other attribute is specified, `vbVolume` is ignored.</span></span>|  
|`Directory`|`vbDirectory`|<span data-ttu-id="02db3-212">Especifica los directorios o carpetas, además de los archivos que no tienen atributos.</span><span class="sxs-lookup"><span data-stu-id="02db3-212">Specifies directories or folders, in addition to files that have no attributes.</span></span>|  
|`Archive`|`vbArchive`|<span data-ttu-id="02db3-213">Archivo ha cambiado desde la última copia de seguridad.</span><span class="sxs-lookup"><span data-stu-id="02db3-213">File has changed since last backup.</span></span>|  
|`Alias`|`vbAlias`|<span data-ttu-id="02db3-214">Archivo tiene un nombre diferente.</span><span class="sxs-lookup"><span data-stu-id="02db3-214">File has a different name.</span></span>|  
  
> [!NOTE]
>  <span data-ttu-id="02db3-215">Estas enumeraciones se especifican mediante el lenguaje Visual Basic y pueden utilizarse en cualquier parte del código en lugar de los valores reales.</span><span class="sxs-lookup"><span data-stu-id="02db3-215">These enumerations are specified by the Visual Basic language and can be used anywhere in your code in place of the actual values.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="02db3-216">Este ejemplo se usa el `Dir` función para comprobar si existen determinados archivos y directorios.</span><span class="sxs-lookup"><span data-stu-id="02db3-216">This example uses the `Dir` function to check if certain files and directories exist.</span></span>  
  
 [!code-vb[VbVbalrCatRef#3](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.ChDir(System.String)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.ChDrive" />
        <altmember cref="T:Microsoft.VisualBasic.FileAttribute" />
      </Docs>
    </Member>
    <Member MemberName="EOF">
      <MemberSignature Language="C#" Value="public static bool EOF (int FileNumber);" />
      <MemberSignature Language="ILAsm" Value=".method public static bool EOF(int32 FileNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.EOF(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function EOF (FileNumber As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool EOF(int FileNumber);" />
      <MemberSignature Language="F#" Value="static member EOF : int -&gt; bool" Usage="Microsoft.VisualBasic.FileSystem.EOF FileNumber" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="02db3-217">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-217">Required.</span>
          </span>
          <span data-ttu-id="02db3-218">An <see langword="Integer" /> that contains any valid file number.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-218">An <see langword="Integer" /> that contains any valid file number.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="02db3-219">Returns a Boolean value <see langword="True" /> when the end of a file opened for <see langword="Random" /> or sequential <see langword="Input" /> has been reached.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-219">Returns a Boolean value <see langword="True" /> when the end of a file opened for <see langword="Random" /> or sequential <see langword="Input" /> has been reached.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="02db3-220">Returns a Boolean value <see langword="True" /> when the end of a file opened for <see langword="Random" /> or sequential <see langword="Input" /> has been reached.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-220">Returns a Boolean value <see langword="True" /> when the end of a file opened for <see langword="Random" /> or sequential <see langword="Input" /> has been reached.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="02db3-221">Use `EOF` para evitar el error generado al intentar obtener datos más allá del final de un archivo.</span><span class="sxs-lookup"><span data-stu-id="02db3-221">Use `EOF` to avoid the error generated by attempting to get input past the end of a file.</span></span>  
  
 <span data-ttu-id="02db3-222">El `EOF` función devuelve `False` hasta que se alcanzó el final del archivo.</span><span class="sxs-lookup"><span data-stu-id="02db3-222">The `EOF` function returns `False` until the end of the file has been reached.</span></span> <span data-ttu-id="02db3-223">Con los archivos abiertos para `Random` o `Binary` acceso, `EOF` devuelve `False` hasta que ejecute la última `FileGet` función no puede leer un registro completo.</span><span class="sxs-lookup"><span data-stu-id="02db3-223">With files opened for `Random` or `Binary` access, `EOF` returns `False` until the last executed `FileGet` function is unable to read a whole record.</span></span>  
  
 <span data-ttu-id="02db3-224">Con los archivos abiertos para `Binary` tener acceso a un intento de leer el archivo mediante el `Input` función hasta `EOF` devuelve `True` genera un error.</span><span class="sxs-lookup"><span data-stu-id="02db3-224">With files opened for `Binary` access, an attempt to read through the file using the `Input` function until `EOF` returns `True` generates an error.</span></span> <span data-ttu-id="02db3-225">Utilice la `LOF` y `Loc` funciones en lugar de `EOF` al leer archivos binarios con `Input`, o use `Get` cuando se usa el `EOF` función.</span><span class="sxs-lookup"><span data-stu-id="02db3-225">Use the `LOF` and `Loc` functions instead of `EOF` when reading binary files with `Input`, or use `Get` when using the `EOF` function.</span></span> <span data-ttu-id="02db3-226">Con los archivos abiertos para `Output`, `EOF` siempre devuelve `True`.</span><span class="sxs-lookup"><span data-stu-id="02db3-226">With files opened for `Output`, `EOF` always returns `True`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="02db3-227">Este ejemplo se usa el `EOF` función para detectar el final de un archivo.</span><span class="sxs-lookup"><span data-stu-id="02db3-227">This example uses the `EOF` function to detect the end of a file.</span></span> <span data-ttu-id="02db3-228">En este ejemplo se da por supuesto que `Testfile` es un archivo de texto que contiene varias líneas de texto.</span><span class="sxs-lookup"><span data-stu-id="02db3-228">This example assumes that `Testfile` is a text file that contains several lines of text.</span></span>  
  
 [!code-vb[VbVbalrCatRef#62](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#62)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="02db3-229">File mode is invalid.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-229">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Loc(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.LOF(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="T:System.IO.IOException" />
      </Docs>
    </Member>
    <Member MemberName="FileAttr">
      <MemberSignature Language="C#" Value="public static Microsoft.VisualBasic.OpenMode FileAttr (int FileNumber);" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype Microsoft.VisualBasic.OpenMode FileAttr(int32 FileNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileAttr(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function FileAttr (FileNumber As Integer) As OpenMode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::VisualBasic::OpenMode FileAttr(int FileNumber);" />
      <MemberSignature Language="F#" Value="static member FileAttr : int -&gt; Microsoft.VisualBasic.OpenMode" Usage="Microsoft.VisualBasic.FileSystem.FileAttr FileNumber" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.VisualBasic.OpenMode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="02db3-230">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-230">Required.</span>
          </span>
          <span data-ttu-id="02db3-231">
            <see langword="Integer" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-231">
              <see langword="Integer" />.</span>
          </span>
          <span data-ttu-id="02db3-232">Any valid file number.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-232">Any valid file number.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="02db3-233">Returns an enumeration representing the file mode for files opened using the <see langword="FileOpen" /> function.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-233">Returns an enumeration representing the file mode for files opened using the <see langword="FileOpen" /> function.</span>
          </span>
          <span data-ttu-id="02db3-234">The <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> gives you better productivity and performance in file I/O operations than the <see langword="FileAttr" /> function.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-234">The <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> gives you better productivity and performance in file I/O operations than the <see langword="FileAttr" /> function.</span>
          </span>
          <span data-ttu-id="02db3-235">See <see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.GetFileInfo(System.String)" /> for more information.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-235">See <see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.GetFileInfo(System.String)" /> for more information.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="02db3-236">The following enumeration values indicate the file access mode:  <list type="table"><item><term> Value  </term><description> Mode  </description></item><item><term> 1  </term><description><see langword="OpenMode.Input" /></description></item><item><term> 2  </term><description><see langword="OpenMode.Output" /></description></item><item><term> 4  </term><description><see langword="OpenMode.Random" /></description></item><item><term> 8  </term><description><see langword="OpenMode.Append" /></description></item><item><term> 32  </term><description><see langword="OpenMode.Binary" /></description></item></list></span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-236">The following enumeration values indicate the file access mode:  <list type="table"><item><term> Value  </term><description> Mode  </description></item><item><term> 1  </term><description><see langword="OpenMode.Input" /></description></item><item><term> 2  </term><description><see langword="OpenMode.Output" /></description></item><item><term> 4  </term><description><see langword="OpenMode.Random" /></description></item><item><term> 8  </term><description><see langword="OpenMode.Append" /></description></item><item><term> 32  </term><description><see langword="OpenMode.Binary" /></description></item></list></span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="02db3-237">Esta función devuelve una enumeración que representa el modo de archivo para los archivos abiertos con el `FileOpen` función.</span><span class="sxs-lookup"><span data-stu-id="02db3-237">This function returns an enumeration representing the file mode for files opened using the `FileOpen` function.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="02db3-238">Este ejemplo se usa el `FileAttr` función para devolver el modo de archivo de un archivo abierto.</span><span class="sxs-lookup"><span data-stu-id="02db3-238">This example uses the `FileAttr` function to return the file mode of an open file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#46](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#46)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.GetAttr(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.SetAttr(System.String,Microsoft.VisualBasic.FileAttribute)" />
        <altmember cref="T:System.IO.IOException" />
      </Docs>
    </Member>
    <Member MemberName="FileClose">
      <MemberSignature Language="C#" Value="public static void FileClose (params int[] FileNumbers);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileClose(int32[] FileNumbers) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileClose(System.Int32[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileClose (ParamArray FileNumbers As Integer())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void FileClose(... cli::array &lt;int&gt; ^ FileNumbers);" />
      <MemberSignature Language="F#" Value="static member FileClose : int[] -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileClose FileNumbers" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumbers" Type="System.Int32[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="FileNumbers">
          <span data-ttu-id="02db3-239">Optional.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-239">Optional.</span>
          </span>
          <span data-ttu-id="02db3-240">Parameter array of 0 or more channels to be closed.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-240">Parameter array of 0 or more channels to be closed.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="02db3-241">Concludes input/output (I/O) to a file opened using the <see langword="FileOpen" /> function.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-241">Concludes input/output (I/O) to a file opened using the <see langword="FileOpen" /> function.</span>
          </span>
          <span data-ttu-id="02db3-242">
            <see langword="My" /> gives you better productivity and performance in file I/O operations.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-242">
              <see langword="My" /> gives you better productivity and performance in file I/O operations.</span>
          </span>
          <span data-ttu-id="02db3-243">See <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> for more information.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-243">See <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> for more information.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="02db3-244">El `FileClose` función se proporciona por compatibilidad con versiones anteriores y puede afectar al rendimiento.</span><span class="sxs-lookup"><span data-stu-id="02db3-244">The `FileClose` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="02db3-245">Para las aplicaciones que no es heredado, el `My.Computer.FileSystem` objeto proporciona un mejor rendimiento.</span><span class="sxs-lookup"><span data-stu-id="02db3-245">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="02db3-246">Para obtener más información, consulte [Cómo: leer texto de archivos con StreamReader](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-text-from-files-with-a-streamreader.md),[Cómo: escribir texto en archivos con StreamReader](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files-with-a-streamwriter.md), y [Tutorial: manipular archivos y directorios en Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/walkthrough-manipulating-files-and-directories.md).</span><span class="sxs-lookup"><span data-stu-id="02db3-246">For more information, see [How to: Read Text from Files with a StreamReader](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-text-from-files-with-a-streamreader.md),[How to: Write Text to Files with a StreamWriter](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files-with-a-streamwriter.md), and [Walkthrough: Manipulating Files and Directories in Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/walkthrough-manipulating-files-and-directories.md).</span></span>  
  
 <span data-ttu-id="02db3-247">Si se omite `FileNumbers`, todos los archivos activos abiertos por el `FileOpen` función están cerrados.</span><span class="sxs-lookup"><span data-stu-id="02db3-247">If you omit `FileNumbers`, all active files opened by the `FileOpen` function are closed.</span></span>  
  
 <span data-ttu-id="02db3-248">Al cerrar los archivos que se abrieron para `Output` o `Append`, el último búfer de salida se escribe en el búfer del sistema operativo de ese archivo.</span><span class="sxs-lookup"><span data-stu-id="02db3-248">When you close files that were opened for `Output` or `Append`, the final buffer of output is written to the operating system buffer for that file.</span></span> <span data-ttu-id="02db3-249">Todos los asociados cerrado de espacio en búfer se libera el archivo.</span><span class="sxs-lookup"><span data-stu-id="02db3-249">All buffer space associated with the closed file is released.</span></span>  
  
 <span data-ttu-id="02db3-250">Cuando el `FileClose` se ejecuta la función, la asociación de un archivo con su archivo de número de extremos.</span><span class="sxs-lookup"><span data-stu-id="02db3-250">When the `FileClose` function is executed, the association of a file with its file number ends.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="02db3-251">Este ejemplo se usa el `FileClose` función para cerrar un archivo abierto para `Input`.</span><span class="sxs-lookup"><span data-stu-id="02db3-251">This example uses the `FileClose` function to close a file opened for `Input`.</span></span>  
  
 [!code-vb[VbVbalrCatRef#69](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#69)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="02db3-252">
            <paramref name="FileNumber" /> does not exist.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-252">
              <paramref name="FileNumber" /> does not exist.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Reset" />
      </Docs>
    </Member>
    <Member MemberName="FileCopy">
      <MemberSignature Language="C#" Value="public static void FileCopy (string Source, string Destination);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileCopy(string Source, string Destination) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileCopy(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileCopy (Source As String, Destination As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void FileCopy(System::String ^ Source, System::String ^ Destination);" />
      <MemberSignature Language="F#" Value="static member FileCopy : string * string -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileCopy (Source, Destination)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Source" Type="System.String" />
        <Parameter Name="Destination" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="Source">
          <span data-ttu-id="02db3-253">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-253">Required.</span>
          </span>
          <span data-ttu-id="02db3-254">
            <see langword="String" /> expression that specifies the name of the file to be copied.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-254">
              <see langword="String" /> expression that specifies the name of the file to be copied.</span>
          </span>
          <span data-ttu-id="02db3-255">
            <c>Source</c> may include the directory or folder, and drive, of the source file.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-255">
              <c>Source</c> may include the directory or folder, and drive, of the source file.</span>
          </span>
        </param>
        <param name="Destination">
          <span data-ttu-id="02db3-256">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-256">Required.</span>
          </span>
          <span data-ttu-id="02db3-257">
            <see langword="String" /> expression that specifies the destination file name.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-257">
              <see langword="String" /> expression that specifies the destination file name.</span>
          </span>
          <span data-ttu-id="02db3-258">
            <c>Destination</c> may include the directory or folder, and drive, of the destination file.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-258">
              <c>Destination</c> may include the directory or folder, and drive, of the destination file.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="02db3-259">Copies a file.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-259">Copies a file.</span>
          </span>
          <span data-ttu-id="02db3-260">The <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> gives you better productivity and performance in file I/O operations than <see langword="FileCopy" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-260">The <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> gives you better productivity and performance in file I/O operations than <see langword="FileCopy" />.</span>
          </span>
          <span data-ttu-id="02db3-261">See <see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.CopyFile(System.String,System.String)" /> for more information.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-261">See <see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.CopyFile(System.String,System.String)" /> for more information.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="02db3-262">Si intenta usar el `FileCopy` funcionan en un archivo abierto actualmente, se produce un error.</span><span class="sxs-lookup"><span data-stu-id="02db3-262">If you try to use the `FileCopy` function on a currently open file, an error occurs.</span></span>  
  
 <span data-ttu-id="02db3-263">`FileCopy` requiere plena confianza para que funcione en la unidad local.</span><span class="sxs-lookup"><span data-stu-id="02db3-263">`FileCopy` requires full trust to work on the local drive.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="02db3-264">Este ejemplo se usa el `FileCopy` función para copiar un archivo a otro.</span><span class="sxs-lookup"><span data-stu-id="02db3-264">This example uses the `FileCopy` function to copy one file to another.</span></span> <span data-ttu-id="02db3-265">Para fines de este ejemplo, suponga que `SrcFile` es un archivo que contiene los datos.</span><span class="sxs-lookup"><span data-stu-id="02db3-265">For purposes of this example, assume that `SrcFile` is a file that contains data.</span></span>  
  
 [!code-vb[VbVbalrCatRef#2](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="02db3-266">
            <paramref name="Source" /> or <paramref name="Destination" /> is invalid or not specified.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-266">
              <paramref name="Source" /> or <paramref name="Destination" /> is invalid or not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="02db3-267">File is already open.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-267">File is already open.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.FileNotFoundException">
          <span data-ttu-id="02db3-268">File does not exist.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-268">File does not exist.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Kill(System.String)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
        <altmember cref="T:System.IO.FileNotFoundException" />
      </Docs>
    </Member>
    <Member MemberName="FileDateTime">
      <MemberSignature Language="C#" Value="public static DateTime FileDateTime (string PathName);" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype System.DateTime FileDateTime(string PathName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileDateTime(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function FileDateTime (PathName As String) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTime FileDateTime(System::String ^ PathName);" />
      <MemberSignature Language="F#" Value="static member FileDateTime : string -&gt; DateTime" Usage="Microsoft.VisualBasic.FileSystem.FileDateTime PathName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="PathName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="PathName">
          <span data-ttu-id="02db3-269">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-269">Required.</span>
          </span>
          <span data-ttu-id="02db3-270">
            <see langword="String" /> expression that specifies a file name.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-270">
              <see langword="String" /> expression that specifies a file name.</span>
          </span>
          <span data-ttu-id="02db3-271">
            <c>PathName</c> may include the directory or folder, and the drive.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-271">
              <c>PathName</c> may include the directory or folder, and the drive.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="02db3-272">Returns a <see langword="Date" /> value that indicates the date and time a file was written to.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-272">Returns a <see langword="Date" /> value that indicates the date and time a file was written to.</span>
          </span>
          <span data-ttu-id="02db3-273">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileDateTime" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-273">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileDateTime" />.</span>
          </span>
          <span data-ttu-id="02db3-274">For more information, see <see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.GetFileInfo(System.String)" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-274">For more information, see <see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.GetFileInfo(System.String)" /></span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="02db3-275">
            <see langword="Date" /> value that indicates the date and time a file was created or last modified.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-275">
              <see langword="Date" /> value that indicates the date and time a file was created or last modified.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="02db3-276">Este ejemplo se usa el `FileDateTime` función para determinar la fecha y la hora de un archivo se creó o modificó por última vez.</span><span class="sxs-lookup"><span data-stu-id="02db3-276">This example uses the `FileDateTime` function to determine the date and time a file was created or last modified.</span></span> <span data-ttu-id="02db3-277">El formato de fecha y hora que se muestra se basa en la configuración regional del sistema.</span><span class="sxs-lookup"><span data-stu-id="02db3-277">The format of the date and time displayed is based on the locale settings of the system.</span></span>  
  
 [!code-vb[VbVbalrCatRef#34](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#34)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="02db3-278">
            <paramref name="PathName" /> is invalid or contains wildcards.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-278">
              <paramref name="PathName" /> is invalid or contains wildcards.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.FileNotFoundException">
          <span data-ttu-id="02db3-279">Target file does not exist.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-279">Target file does not exist.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileLen(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.GetAttr(System.String)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.FileNotFoundException" />
      </Docs>
    </Member>
    <MemberGroup MemberName="FileGet">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="02db3-280">Reads data from an open disk file into a variable.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-280">Reads data from an open disk file into a variable.</span>
          </span>
          <span data-ttu-id="02db3-281">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-281">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span>
          </span>
          <span data-ttu-id="02db3-282">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-282">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="FileGet">
      <MemberSignature Language="C#" Value="public static void FileGet (int FileNumber, ref bool Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileGet(int32 FileNumber, bool&amp; Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.Boolean@,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileGet (FileNumber As Integer, ByRef Value As Boolean, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FileGet : int *  * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileGet (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Boolean&amp;" RefType="ref" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="02db3-283">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-283">Required.</span>
          </span>
          <span data-ttu-id="02db3-284">Any valid file number.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-284">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="02db3-285">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-285">Required.</span>
          </span>
          <span data-ttu-id="02db3-286">Valid variable name into which data is read.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-286">Valid variable name into which data is read.</span>
          </span>
        </param>
        <param name="RecordNumber">
          <span data-ttu-id="02db3-287">Optional.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-287">Optional.</span>
          </span>
          <span data-ttu-id="02db3-288">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-288">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="02db3-289">Reads data from an open disk file into a variable.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-289">Reads data from an open disk file into a variable.</span>
          </span>
          <span data-ttu-id="02db3-290">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-290">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span>
          </span>
          <span data-ttu-id="02db3-291">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-291">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /></span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="02db3-292">`FileGet` solo es válido en `Random` y `Binary` modo.</span><span class="sxs-lookup"><span data-stu-id="02db3-292">`FileGet` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="02db3-293">Los datos leídos con `FileGet` se escriben normalmente en un archivo con `FilePut`.</span><span class="sxs-lookup"><span data-stu-id="02db3-293">Data read with `FileGet` is usually written to a file with `FilePut`.</span></span>  
  
 <span data-ttu-id="02db3-294">El primer registro o byte de un archivo está en la posición 1, el segundo registro o byte en la posición 2 y así sucesivamente.</span><span class="sxs-lookup"><span data-stu-id="02db3-294">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="02db3-295">Si se omite `RecordNumber`, el siguiente registro o byte que sigue a la última `FileGet` o `FilePut` función (o apunta a la última `Seek` función) se lee.</span><span class="sxs-lookup"><span data-stu-id="02db3-295">If you omit `RecordNumber`, the next record or byte following the last `FileGet` or `FilePut` function (or pointed to by the last `Seek` function) is read.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="02db3-296">Al leer de archivos, no realice ninguna decisión sobre el contenido de un archivo basado en la extensión de nombre de archivo.</span><span class="sxs-lookup"><span data-stu-id="02db3-296">When reading from files, do not make decisions about the contents of a file based on the file name extension.</span></span> <span data-ttu-id="02db3-297">Por ejemplo, un archivo denominado Form1.vb no puede ser un archivo de código fuente de Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="02db3-297">For example, a file that is named Form1.vb may not be a Visual Basic source file.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="02db3-298">Modo aleatorio</span><span class="sxs-lookup"><span data-stu-id="02db3-298">Random Mode</span></span>  
 <span data-ttu-id="02db3-299">De los archivos abiertos en `Random` modo, se aplican las reglas siguientes:</span><span class="sxs-lookup"><span data-stu-id="02db3-299">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="02db3-300">Si la longitud de los datos que se está leyendo es menor que la longitud especificada en el `RecordLength` cláusula de la `FileOpen` función, `FileGet` leerá los registros posteriores en los límites de longitud de registro.</span><span class="sxs-lookup"><span data-stu-id="02db3-300">If the length of the data being read is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FileGet` reads subsequent records on record-length boundaries.</span></span> <span data-ttu-id="02db3-301">El espacio entre el final de un registro y el inicio del siguiente registro se rellena con el contenido existente del búfer del archivo.</span><span class="sxs-lookup"><span data-stu-id="02db3-301">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="02db3-302">Como la cantidad de datos de relleno no se puede determinar con certeza, suele ser una buena idea tener la longitud del registro coincide con la longitud de los datos que se va a leer.</span><span class="sxs-lookup"><span data-stu-id="02db3-302">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being read.</span></span>  
  
-   <span data-ttu-id="02db3-303">De forma predeterminada, si la variable que se está leyendo es una cadena, `FileGet` lee un descriptor de dos bytes que contiene la longitud de cadena y, a continuación, lee los datos que entrarán en la variable.</span><span class="sxs-lookup"><span data-stu-id="02db3-303">By default, if the variable being read into is a string, `FileGet` reads a two-byte descriptor that contains the string length and then reads the data that goes into the variable.</span></span> <span data-ttu-id="02db3-304">Por lo tanto, la longitud de registro especificada por el `RecordLength` cláusula de la `FileOpen` función debe ser mayor que la longitud real de la cadena de al menos dos bytes.</span><span class="sxs-lookup"><span data-stu-id="02db3-304">Therefore, the record length specified by the `RecordLength` clause of the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span> <span data-ttu-id="02db3-305">Visual Basic 6.0 y versiones anteriores admiten cadenas de longitud fija; Cuando se coloca en un archivo, no se escribe el descriptor de longitud.</span><span class="sxs-lookup"><span data-stu-id="02db3-305">Visual Basic 6.0 and earlier versions support fixed-length strings; when put to a file, the length descriptor is not written.</span></span> <span data-ttu-id="02db3-306">Si desea leer una cadena sin el descriptor, debería pasar `True` a la `StringIsFixedLength` parámetro y la cadena que lea debe tener la longitud correcta.</span><span class="sxs-lookup"><span data-stu-id="02db3-306">If you want to read a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="02db3-307">Si la variable que se está leyendo es una matriz, puede elegir si desea leer un descriptor para el tamaño y la dimensión de la matriz.</span><span class="sxs-lookup"><span data-stu-id="02db3-307">If the variable being read into is an array, you can choose whether to read a descriptor for the size and dimension of the array.</span></span> <span data-ttu-id="02db3-308">Para escribir el descriptor, establezca el `ArrayIsDynamic` parámetro `True`.</span><span class="sxs-lookup"><span data-stu-id="02db3-308">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="02db3-309">Al leer la matriz, se tiene que coincidir con la forma en que se escribió la matriz.</span><span class="sxs-lookup"><span data-stu-id="02db3-309">When reading the array, you have to match the way the array was written.</span></span> <span data-ttu-id="02db3-310">Si se escribió con el descriptor, debe leer el descriptor.</span><span class="sxs-lookup"><span data-stu-id="02db3-310">If it was written with the descriptor, you have to read the descriptor.</span></span> <span data-ttu-id="02db3-311">Si no se utiliza el descriptor, el tamaño y los límites de la matriz se pasan a `FileGet` determinar lo que debe leer.</span><span class="sxs-lookup"><span data-stu-id="02db3-311">If the descriptor is not used, the size and bounds of the array passed into `FileGet` determine what to read.</span></span>  
  
     <span data-ttu-id="02db3-312">El descriptor especifica el rango de la matriz, el tamaño y los límites inferiores de cada rango.</span><span class="sxs-lookup"><span data-stu-id="02db3-312">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="02db3-313">Su longitud es igual a 2 más 8 veces el número de dimensiones: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="02db3-313">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="02db3-314">La longitud de registro especificada por el `RecordLength` parámetro en el `FileOpen` función debe ser mayor o igual a la suma de todos los bytes necesarios para escribir los datos de matriz y el descriptor de matriz.</span><span class="sxs-lookup"><span data-stu-id="02db3-314">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="02db3-315">Por ejemplo, la siguiente declaración de matriz requiere 218 bytes cuando se escribe la matriz en el disco.</span><span class="sxs-lookup"><span data-stu-id="02db3-315">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#21)]  
  
     <span data-ttu-id="02db3-316">Los bytes 218 se distribuyen como sigue:</span><span class="sxs-lookup"><span data-stu-id="02db3-316">The 218 bytes are distributed as follows:</span></span>  
  
    -   <span data-ttu-id="02db3-317">18 bytes para el descriptor: (2 + 8 \* 2)</span><span class="sxs-lookup"><span data-stu-id="02db3-317">18 bytes for the descriptor: (2 + 8 \* 2)</span></span>  
  
    -   <span data-ttu-id="02db3-318">200 bytes para los datos: (10 * 5 * 4).</span><span class="sxs-lookup"><span data-stu-id="02db3-318">200 bytes for the data: (5 * 10 * 4).</span></span>  
  
-   <span data-ttu-id="02db3-319">Si la variable que se está leyendo es cualquier otro tipo de variable (no una cadena de longitud variable o un objeto), `FileGet` lee sólo los datos de la variable.</span><span class="sxs-lookup"><span data-stu-id="02db3-319">If the variable being read into is any other type of variable (not a variable-length string or an object), `FileGet` reads only the variable data.</span></span> <span data-ttu-id="02db3-320">La longitud de registro especificada por el `RecordLength` cláusula en la `FileOpen` función debe ser mayor o igual que la longitud de los datos que se va a leer.</span><span class="sxs-lookup"><span data-stu-id="02db3-320">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being read.</span></span>  
  
-   <span data-ttu-id="02db3-321">`FileGet` lee elementos de estructuras como si cada una se que se leyeron individualmente, salvo que no hay ningún relleno entre los elementos.</span><span class="sxs-lookup"><span data-stu-id="02db3-321">`FileGet` reads elements of structures as if each were being read individually, except that there is no padding between elements.</span></span> <span data-ttu-id="02db3-322">En el disco, una dinámica de matriz en un tipo definido por el usuario (escritas con `FilePut`) viene precedida por un descriptor cuya longitud es igual a 2 más 8 veces el número de dimensiones: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="02db3-322">On disk, a dynamic array in a user-defined type (written with `FilePut`) is prefixed by a descriptor whose length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="02db3-323">La longitud de registro especificada por el `RecordLength` cláusula en la `FileOpen` función debe ser mayor o igual a la suma de todos los bytes necesarios para leer los elementos individuales.</span><span class="sxs-lookup"><span data-stu-id="02db3-323">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to read the individual elements.</span></span> <span data-ttu-id="02db3-324">Esto incluye las matrices y sus descriptores.</span><span class="sxs-lookup"><span data-stu-id="02db3-324">This includes any arrays and their descriptors.</span></span> <span data-ttu-id="02db3-325">El `VBFixedString` atributo puede aplicarse a campos de cadena de las estructuras para indicar el tamaño de una cadena cuando se escribe en el disco.</span><span class="sxs-lookup"><span data-stu-id="02db3-325">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of a string when written to disk.</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="02db3-326">Modo binario</span><span class="sxs-lookup"><span data-stu-id="02db3-326">Binary Mode</span></span>  
 <span data-ttu-id="02db3-327">De los archivos abiertos en `Binary` modo, la mayoría de los `Random` se aplican las reglas de modo, con algunas excepciones.</span><span class="sxs-lookup"><span data-stu-id="02db3-327">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="02db3-328">Las siguientes reglas para los archivos abiertos en `Binary` modo difieren de las reglas para `Random` modo:</span><span class="sxs-lookup"><span data-stu-id="02db3-328">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="02db3-329">El `RecordLength` cláusula en la `FileOpen` función no tiene ningún efecto.</span><span class="sxs-lookup"><span data-stu-id="02db3-329">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="02db3-330">`FileGet` lee todas las variables del disco de forma contigua; es decir, sin relleno entre los registros.</span><span class="sxs-lookup"><span data-stu-id="02db3-330">`FileGet` reads all variables from disk contiguously; that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="02db3-331">Para cualquier matriz que no sea una matriz en una estructura, `FileGet` lee sólo los datos.</span><span class="sxs-lookup"><span data-stu-id="02db3-331">For any array other than an array in a structure, `FileGet` reads only the data.</span></span> <span data-ttu-id="02db3-332">No se lee ningún descriptor.</span><span class="sxs-lookup"><span data-stu-id="02db3-332">No descriptor is read.</span></span>  
  
-   <span data-ttu-id="02db3-333">`FileGet` lee las cadenas de longitud variable que no sean elementos de estructuras sin esperar el descriptor de longitud de dos bytes.</span><span class="sxs-lookup"><span data-stu-id="02db3-333">`FileGet` reads variable-length strings that are not elements of structures without expecting the two-byte length descriptor.</span></span> <span data-ttu-id="02db3-334">El número de bytes leídos es igual al número de caracteres de la cadena.</span><span class="sxs-lookup"><span data-stu-id="02db3-334">The number of bytes read equals the number of characters already in the string.</span></span>  
  
    > [!IMPORTANT]
    >  <span data-ttu-id="02db3-335">Leer un archivo mediante el uso de la`FileGet` función requiere `Read` acceso desde el <xref:System.Security.Permissions.FileIOPermissionAccess> enumeración.</span><span class="sxs-lookup"><span data-stu-id="02db3-335">Reading from a file by using the`FileGet` function requires `Read` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="02db3-336">
            <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-336">
              <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="02db3-337">File mode is invalid.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-337">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
      </Docs>
    </Member>
    <Member MemberName="FileGet">
      <MemberSignature Language="C#" Value="public static void FileGet (int FileNumber, ref byte Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileGet(int32 FileNumber, unsigned int8&amp; Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.Byte@,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileGet (FileNumber As Integer, ByRef Value As Byte, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FileGet : int *  * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileGet (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Byte&amp;" RefType="ref" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="02db3-338">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-338">Required.</span>
          </span>
          <span data-ttu-id="02db3-339">Any valid file number.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-339">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="02db3-340">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-340">Required.</span>
          </span>
          <span data-ttu-id="02db3-341">Valid variable name into which data is read.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-341">Valid variable name into which data is read.</span>
          </span>
        </param>
        <param name="RecordNumber">
          <span data-ttu-id="02db3-342">Optional.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-342">Optional.</span>
          </span>
          <span data-ttu-id="02db3-343">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-343">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="02db3-344">Reads data from an open disk file into a variable.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-344">Reads data from an open disk file into a variable.</span>
          </span>
          <span data-ttu-id="02db3-345">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-345">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span>
          </span>
          <span data-ttu-id="02db3-346">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-346">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="02db3-347">`FileGet` solo es válido en `Random` y `Binary` modo.</span><span class="sxs-lookup"><span data-stu-id="02db3-347">`FileGet` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="02db3-348">Los datos leídos con `FileGet` se escriben normalmente en un archivo con `FilePut`.</span><span class="sxs-lookup"><span data-stu-id="02db3-348">Data read with `FileGet` is usually written to a file with `FilePut`.</span></span>  
  
 <span data-ttu-id="02db3-349">El primer registro o byte de un archivo está en la posición 1, el segundo registro o byte en la posición 2 y así sucesivamente.</span><span class="sxs-lookup"><span data-stu-id="02db3-349">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="02db3-350">Si se omite `RecordNumber`, el siguiente registro o byte que sigue a la última `FileGet` o `FilePut` función (o apunta a la última `Seek` función) se lee.</span><span class="sxs-lookup"><span data-stu-id="02db3-350">If you omit `RecordNumber`, the next record or byte following the last `FileGet` or `FilePut` function (or pointed to by the last `Seek` function) is read.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="02db3-351">Al leer de archivos, no realice ninguna decisión sobre el contenido de un archivo basado en la extensión de nombre de archivo.</span><span class="sxs-lookup"><span data-stu-id="02db3-351">When reading from files, do not make decisions about the contents of a file based on the file name extension.</span></span> <span data-ttu-id="02db3-352">Por ejemplo, un archivo denominado Form1.vb no puede ser un archivo de código fuente de Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="02db3-352">For example, a file that is named Form1.vb may not be a Visual Basic source file.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="02db3-353">Modo aleatorio</span><span class="sxs-lookup"><span data-stu-id="02db3-353">Random Mode</span></span>  
 <span data-ttu-id="02db3-354">De los archivos abiertos en `Random` modo, se aplican las reglas siguientes:</span><span class="sxs-lookup"><span data-stu-id="02db3-354">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="02db3-355">Si la longitud de los datos que se está leyendo es menor que la longitud especificada en el `RecordLength` cláusula de la `FileOpen` función, `FileGet` leerá los registros posteriores en los límites de longitud de registro.</span><span class="sxs-lookup"><span data-stu-id="02db3-355">If the length of the data being read is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FileGet` reads subsequent records on record-length boundaries.</span></span> <span data-ttu-id="02db3-356">El espacio entre el final de un registro y el inicio del siguiente registro se rellena con el contenido existente del búfer del archivo.</span><span class="sxs-lookup"><span data-stu-id="02db3-356">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="02db3-357">Como la cantidad de datos de relleno no se puede determinar con certeza, suele ser una buena idea tener la longitud del registro coincide con la longitud de los datos que se va a leer.</span><span class="sxs-lookup"><span data-stu-id="02db3-357">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being read.</span></span>  
  
-   <span data-ttu-id="02db3-358">De forma predeterminada, si la variable que se está leyendo es una cadena, `FileGet` lee un descriptor de dos bytes que contiene la longitud de cadena y, a continuación, lee los datos que entrarán en la variable.</span><span class="sxs-lookup"><span data-stu-id="02db3-358">By default, if the variable being read into is a string, `FileGet` reads a two-byte descriptor that contains the string length and then reads the data that goes into the variable.</span></span> <span data-ttu-id="02db3-359">Por lo tanto, la longitud de registro especificada por el `RecordLength` cláusula de la `FileOpen` función debe ser mayor que la longitud real de la cadena de al menos dos bytes.</span><span class="sxs-lookup"><span data-stu-id="02db3-359">Therefore, the record length specified by the `RecordLength` clause of the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span> <span data-ttu-id="02db3-360">Visual Basic 6.0 y versiones anteriores admiten cadenas de longitud fija; Cuando se coloca en un archivo, no se escribe el descriptor de longitud.</span><span class="sxs-lookup"><span data-stu-id="02db3-360">Visual Basic 6.0 and earlier versions support fixed-length strings; when put to a file, the length descriptor is not written.</span></span> <span data-ttu-id="02db3-361">Si desea leer una cadena sin el descriptor, debería pasar `True` a la `StringIsFixedLength` parámetro y la cadena que lea debe tener la longitud correcta.</span><span class="sxs-lookup"><span data-stu-id="02db3-361">If you want to read a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="02db3-362">Si la variable que se está leyendo es una matriz, puede elegir si desea leer un descriptor para el tamaño y la dimensión de la matriz.</span><span class="sxs-lookup"><span data-stu-id="02db3-362">If the variable being read into is an array, you can choose whether to read a descriptor for the size and dimension of the array.</span></span> <span data-ttu-id="02db3-363">Para escribir el descriptor, establezca el `ArrayIsDynamic` parámetro `True`.</span><span class="sxs-lookup"><span data-stu-id="02db3-363">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="02db3-364">Al leer la matriz, se tiene que coincidir con la forma en que se escribió la matriz.</span><span class="sxs-lookup"><span data-stu-id="02db3-364">When reading the array, you have to match the way the array was written.</span></span> <span data-ttu-id="02db3-365">Si se escribió con el descriptor, debe leer el descriptor.</span><span class="sxs-lookup"><span data-stu-id="02db3-365">If it was written with the descriptor, you have to read the descriptor.</span></span> <span data-ttu-id="02db3-366">Si no se utiliza el descriptor.</span><span class="sxs-lookup"><span data-stu-id="02db3-366">If the descriptor is not used.</span></span> <span data-ttu-id="02db3-367">El tamaño y los límites de la matriz que se pasó a `FileGet` determinar lo que debe leer.</span><span class="sxs-lookup"><span data-stu-id="02db3-367">Then the size and bounds of the array passed into `FileGet` determine what to read.</span></span>  
  
     <span data-ttu-id="02db3-368">El descriptor especifica el rango de la matriz, el tamaño y los límites inferiores de cada rango.</span><span class="sxs-lookup"><span data-stu-id="02db3-368">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="02db3-369">Su longitud es igual a 2 más 8 veces el número de dimensiones: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="02db3-369">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="02db3-370">La longitud de registro especificada por el `RecordLength` parámetro en el `FileOpen` función debe ser mayor o igual a la suma de todos los bytes necesarios para escribir los datos de matriz y el descriptor de matriz.</span><span class="sxs-lookup"><span data-stu-id="02db3-370">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="02db3-371">Por ejemplo, la siguiente declaración de matriz requiere 218 bytes cuando se escribe la matriz en el disco.</span><span class="sxs-lookup"><span data-stu-id="02db3-371">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#21)]  
  
     <span data-ttu-id="02db3-372">Los bytes 218 se distribuyen como sigue:</span><span class="sxs-lookup"><span data-stu-id="02db3-372">The 218 bytes are distributed as follows:</span></span>  
  
    -   <span data-ttu-id="02db3-373">18 bytes para el descriptor: (2 + 8 \* 2)</span><span class="sxs-lookup"><span data-stu-id="02db3-373">18 bytes for the descriptor: (2 + 8 \* 2)</span></span>  
  
    -   <span data-ttu-id="02db3-374">200 bytes para los datos: (10 * 5 * 4).</span><span class="sxs-lookup"><span data-stu-id="02db3-374">200 bytes for the data: (5 * 10 * 4).</span></span>  
  
-   <span data-ttu-id="02db3-375">Si la variable que se está leyendo es cualquier otro tipo de variable (no una cadena de longitud variable o un objeto), `FileGet` lee sólo los datos de la variable.</span><span class="sxs-lookup"><span data-stu-id="02db3-375">If the variable being read into is any other type of variable (not a variable-length string or an object), `FileGet` reads only the variable data.</span></span> <span data-ttu-id="02db3-376">La longitud de registro especificada por el `RecordLength` cláusula en la `FileOpen` función debe ser mayor o igual que la longitud de los datos que se va a leer.</span><span class="sxs-lookup"><span data-stu-id="02db3-376">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being read.</span></span>  
  
-   <span data-ttu-id="02db3-377">`FileGet` lee elementos de estructuras como si cada una se que se leyeron individualmente, salvo que no hay ningún relleno entre los elementos.</span><span class="sxs-lookup"><span data-stu-id="02db3-377">`FileGet` reads elements of structures as if each were being read individually, except that there is no padding between elements.</span></span> <span data-ttu-id="02db3-378">En el disco, una dinámica de matriz en un tipo definido por el usuario (escritas con `FilePut`) viene precedida por un descriptor cuya longitud es igual a 2 más 8 veces el número de dimensiones: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="02db3-378">On disk, a dynamic array in a user-defined type (written with `FilePut`) is prefixed by a descriptor whose length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="02db3-379">La longitud de registro especificada por el `RecordLength` cláusula en la `FileOpen` función debe ser mayor o igual a la suma de todos los bytes necesarios para leer los elementos individuales.</span><span class="sxs-lookup"><span data-stu-id="02db3-379">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to read the individual elements.</span></span> <span data-ttu-id="02db3-380">Esto incluye las matrices y sus descriptores.</span><span class="sxs-lookup"><span data-stu-id="02db3-380">This includes any arrays and their descriptors.</span></span> <span data-ttu-id="02db3-381">El `VBFixedString` atributo puede aplicarse a campos de cadena de las estructuras para indicar el tamaño de una cadena cuando se escribe en el disco.</span><span class="sxs-lookup"><span data-stu-id="02db3-381">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of a string when written to disk.</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="02db3-382">Modo binario</span><span class="sxs-lookup"><span data-stu-id="02db3-382">Binary Mode</span></span>  
 <span data-ttu-id="02db3-383">De los archivos abiertos en `Binary` modo, la mayoría de los `Random` se aplican las reglas de modo, con algunas excepciones.</span><span class="sxs-lookup"><span data-stu-id="02db3-383">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="02db3-384">Las siguientes reglas para los archivos abiertos en `Binary` modo difieren de las reglas para `Random` modo:</span><span class="sxs-lookup"><span data-stu-id="02db3-384">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="02db3-385">El `RecordLength` cláusula en la `FileOpen` función no tiene ningún efecto.</span><span class="sxs-lookup"><span data-stu-id="02db3-385">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="02db3-386">`FileGet` lee todas las variables del disco de forma contigua; es decir, sin relleno entre los registros.</span><span class="sxs-lookup"><span data-stu-id="02db3-386">`FileGet` reads all variables from disk contiguously; that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="02db3-387">Para cualquier matriz que no sea una matriz en una estructura, `FileGet` lee sólo los datos.</span><span class="sxs-lookup"><span data-stu-id="02db3-387">For any array other than an array in a structure, `FileGet` reads only the data.</span></span> <span data-ttu-id="02db3-388">No se lee ningún descriptor.</span><span class="sxs-lookup"><span data-stu-id="02db3-388">No descriptor is read.</span></span>  
  
-   <span data-ttu-id="02db3-389">`FileGet` lee las cadenas de longitud variable que no sean elementos de estructuras sin esperar el descriptor de longitud de dos bytes.</span><span class="sxs-lookup"><span data-stu-id="02db3-389">`FileGet` reads variable-length strings that are not elements of structures without expecting the two-byte length descriptor.</span></span> <span data-ttu-id="02db3-390">El número de bytes leídos es igual al número de caracteres de la cadena.</span><span class="sxs-lookup"><span data-stu-id="02db3-390">The number of bytes read equals the number of characters already in the string.</span></span>  
  
    > [!IMPORTANT]
    >  <span data-ttu-id="02db3-391">Leer un archivo mediante el uso de la `FileGet` función requiere `Read` acceso desde el <xref:System.Security.Permissions.FileIOPermissionAccess> enumeración.</span><span class="sxs-lookup"><span data-stu-id="02db3-391">Reading from a file by using the `FileGet` function requires `Read` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="02db3-392">
            <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-392">
              <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="02db3-393">File mode is invalid.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-393">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
      </Docs>
    </Member>
    <Member MemberName="FileGet">
      <MemberSignature Language="C#" Value="public static void FileGet (int FileNumber, ref char Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileGet(int32 FileNumber, char&amp; Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.Char@,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileGet (FileNumber As Integer, ByRef Value As Char, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FileGet : int *  * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileGet (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Char&amp;" RefType="ref" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="02db3-394">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-394">Required.</span>
          </span>
          <span data-ttu-id="02db3-395">Any valid file number.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-395">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="02db3-396">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-396">Required.</span>
          </span>
          <span data-ttu-id="02db3-397">Valid variable name into which data is read.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-397">Valid variable name into which data is read.</span>
          </span>
        </param>
        <param name="RecordNumber">
          <span data-ttu-id="02db3-398">Optional.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-398">Optional.</span>
          </span>
          <span data-ttu-id="02db3-399">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-399">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="02db3-400">Reads data from an open disk file into a variable.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-400">Reads data from an open disk file into a variable.</span>
          </span>
          <span data-ttu-id="02db3-401">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-401">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span>
          </span>
          <span data-ttu-id="02db3-402">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-402">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="02db3-403">`FileGet` solo es válido en `Random` y `Binary` modo.</span><span class="sxs-lookup"><span data-stu-id="02db3-403">`FileGet` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="02db3-404">Los datos leídos con `FileGet` se escriben normalmente en un archivo con `FilePut`.</span><span class="sxs-lookup"><span data-stu-id="02db3-404">Data read with `FileGet` is usually written to a file with `FilePut`.</span></span>  
  
 <span data-ttu-id="02db3-405">El primer registro o byte de un archivo está en la posición 1, el segundo registro o byte en la posición 2 y así sucesivamente.</span><span class="sxs-lookup"><span data-stu-id="02db3-405">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="02db3-406">Si se omite `RecordNumber`, el siguiente registro o byte que sigue a la última `FileGet` o `FilePut` función (o apunta a la última `Seek` función) se lee.</span><span class="sxs-lookup"><span data-stu-id="02db3-406">If you omit `RecordNumber`, the next record or byte following the last `FileGet` or `FilePut` function (or pointed to by the last `Seek` function) is read.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="02db3-407">Al leer de archivos, no realice ninguna decisión sobre el contenido de un archivo basado en la extensión de nombre de archivo.</span><span class="sxs-lookup"><span data-stu-id="02db3-407">When reading from files, do not make decisions about the contents of a file based on the file name extension.</span></span> <span data-ttu-id="02db3-408">Por ejemplo, un archivo denominado Form1.vb no puede ser un archivo de código fuente de Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="02db3-408">For example, a file that is named Form1.vb may not be a Visual Basic source file.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="02db3-409">Modo aleatorio</span><span class="sxs-lookup"><span data-stu-id="02db3-409">Random Mode</span></span>  
 <span data-ttu-id="02db3-410">De los archivos abiertos en `Random` modo, se aplican las reglas siguientes:</span><span class="sxs-lookup"><span data-stu-id="02db3-410">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="02db3-411">Si la longitud de los datos que se está leyendo es menor que la longitud especificada en el `RecordLength` cláusula de la `FileOpen` función, `FileGet` leerá los registros posteriores en los límites de longitud de registro.</span><span class="sxs-lookup"><span data-stu-id="02db3-411">If the length of the data being read is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FileGet` reads subsequent records on record-length boundaries.</span></span> <span data-ttu-id="02db3-412">El espacio entre el final de un registro y el inicio del siguiente registro se rellena con el contenido existente del búfer del archivo.</span><span class="sxs-lookup"><span data-stu-id="02db3-412">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="02db3-413">Como la cantidad de datos de relleno no se puede determinar con certeza, suele ser una buena idea tener la longitud del registro coincide con la longitud de los datos que se va a leer.</span><span class="sxs-lookup"><span data-stu-id="02db3-413">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being read.</span></span>  
  
-   <span data-ttu-id="02db3-414">De forma predeterminada, si la variable que se está leyendo es una cadena, `FileGet` lee un descriptor de dos bytes que contiene la longitud de cadena y, a continuación, lee los datos que entrarán en la variable.</span><span class="sxs-lookup"><span data-stu-id="02db3-414">By default, if the variable being read into is a string, `FileGet` reads a two-byte descriptor that contains the string length and then reads the data that goes into the variable.</span></span> <span data-ttu-id="02db3-415">Por lo tanto, la longitud de registro especificada por el `RecordLength` cláusula de la `FileOpen` función debe ser mayor que la longitud real de la cadena de al menos dos bytes.</span><span class="sxs-lookup"><span data-stu-id="02db3-415">Therefore, the record length specified by the `RecordLength` clause of the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span> <span data-ttu-id="02db3-416">Visual Basic 6.0 y versiones anteriores admiten cadenas de longitud fija; Cuando se coloca en un archivo, no se escribe el descriptor de longitud.</span><span class="sxs-lookup"><span data-stu-id="02db3-416">Visual Basic 6.0 and earlier versions support fixed-length strings; when put to a file, the length descriptor is not written.</span></span> <span data-ttu-id="02db3-417">Si desea leer una cadena sin el descriptor, debería pasar `True` a la `StringIsFixedLength` parámetro y la cadena que lea debe tener la longitud correcta.</span><span class="sxs-lookup"><span data-stu-id="02db3-417">If you want to read a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="02db3-418">Si la variable que se está leyendo es una matriz, puede elegir si desea leer un descriptor para el tamaño y la dimensión de la matriz.</span><span class="sxs-lookup"><span data-stu-id="02db3-418">If the variable being read into is an array, you can choose whether to read a descriptor for the size and dimension of the array.</span></span> <span data-ttu-id="02db3-419">Para escribir el descriptor, establezca el `ArrayIsDynamic` parámetro `True`.</span><span class="sxs-lookup"><span data-stu-id="02db3-419">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="02db3-420">Al leer la matriz, se tiene que coincidir con la forma en que se escribió la matriz.</span><span class="sxs-lookup"><span data-stu-id="02db3-420">When reading the array, you have to match the way the array was written.</span></span> <span data-ttu-id="02db3-421">Si se escribió con el descriptor, debe leer el descriptor.</span><span class="sxs-lookup"><span data-stu-id="02db3-421">If it was written with the descriptor, you have to read the descriptor.</span></span> <span data-ttu-id="02db3-422">Si no se utiliza el descriptor, el tamaño y los límites de la matriz se pasan a `FileGet` determinar lo que debe leer.</span><span class="sxs-lookup"><span data-stu-id="02db3-422">If the descriptor is not used, the size and bounds of the array passed into `FileGet` determine what to read.</span></span>  
  
     <span data-ttu-id="02db3-423">El descriptor especifica el rango de la matriz, el tamaño y los límites inferiores de cada rango.</span><span class="sxs-lookup"><span data-stu-id="02db3-423">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="02db3-424">Su longitud es igual a 2 más 8 veces el número de dimensiones: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="02db3-424">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="02db3-425">La longitud de registro especificada por el `RecordLength` parámetro en el `FileOpen` función debe ser mayor o igual a la suma de todos los bytes necesarios para escribir los datos de matriz y el descriptor de matriz.</span><span class="sxs-lookup"><span data-stu-id="02db3-425">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="02db3-426">Por ejemplo, la siguiente declaración de matriz requiere 218 bytes cuando se escribe la matriz en el disco.</span><span class="sxs-lookup"><span data-stu-id="02db3-426">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#21)]  
  
     <span data-ttu-id="02db3-427">Los bytes 218 se distribuyen como sigue:</span><span class="sxs-lookup"><span data-stu-id="02db3-427">The 218 bytes are distributed as follows:</span></span>  
  
    -   <span data-ttu-id="02db3-428">18 bytes para el descriptor: (2 + 8 \* 2)</span><span class="sxs-lookup"><span data-stu-id="02db3-428">18 bytes for the descriptor: (2 + 8 \* 2)</span></span>  
  
    -   <span data-ttu-id="02db3-429">200 bytes para los datos: (10 * 5 * 4).</span><span class="sxs-lookup"><span data-stu-id="02db3-429">200 bytes for the data: (5 * 10 * 4).</span></span>  
  
-   <span data-ttu-id="02db3-430">Si la variable que se está leyendo es cualquier otro tipo de variable (no una cadena de longitud variable o un objeto), `FileGet` lee sólo los datos de la variable.</span><span class="sxs-lookup"><span data-stu-id="02db3-430">If the variable being read into is any other type of variable (not a variable-length string or an object), `FileGet` reads only the variable data.</span></span> <span data-ttu-id="02db3-431">La longitud de registro especificada por el `RecordLength` cláusula en la `FileOpen` función debe ser mayor o igual que la longitud de los datos que se va a leer.</span><span class="sxs-lookup"><span data-stu-id="02db3-431">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being read.</span></span>  
  
-   <span data-ttu-id="02db3-432">`FileGet` lee elementos de estructuras como si cada una se que se leyeron individualmente, salvo que no hay ningún relleno entre los elementos.</span><span class="sxs-lookup"><span data-stu-id="02db3-432">`FileGet` reads elements of structures as if each were being read individually, except that there is no padding between elements.</span></span> <span data-ttu-id="02db3-433">En el disco, una dinámica de matriz en un tipo definido por el usuario (escritas con `FilePut`) viene precedida por un descriptor cuya longitud es igual a 2 más 8 veces el número de dimensiones: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="02db3-433">On disk, a dynamic array in a user-defined type (written with `FilePut`) is prefixed by a descriptor whose length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="02db3-434">La longitud de registro especificada por el `RecordLength` cláusula en la `FileOpen` función debe ser mayor o igual a la suma de todos los bytes necesarios para leer los elementos individuales.</span><span class="sxs-lookup"><span data-stu-id="02db3-434">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to read the individual elements.</span></span> <span data-ttu-id="02db3-435">Esto incluye las matrices y sus descriptores.</span><span class="sxs-lookup"><span data-stu-id="02db3-435">This includes any arrays and their descriptors.</span></span> <span data-ttu-id="02db3-436">El `VBFixedString` atributo puede aplicarse a campos de cadena de las estructuras para indicar el tamaño de una cadena cuando se escribe en el disco.</span><span class="sxs-lookup"><span data-stu-id="02db3-436">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of a string when written to disk.</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="02db3-437">Modo binario</span><span class="sxs-lookup"><span data-stu-id="02db3-437">Binary Mode</span></span>  
 <span data-ttu-id="02db3-438">De los archivos abiertos en `Binary` modo, la mayoría de los `Random` se aplican las reglas de modo, con algunas excepciones.</span><span class="sxs-lookup"><span data-stu-id="02db3-438">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="02db3-439">Las siguientes reglas para los archivos abiertos en `Binary` modo difieren de las reglas para `Random` modo:</span><span class="sxs-lookup"><span data-stu-id="02db3-439">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="02db3-440">El `RecordLength` cláusula en la `FileOpen` función no tiene ningún efecto.</span><span class="sxs-lookup"><span data-stu-id="02db3-440">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="02db3-441">`FileGet` lee todas las variables del disco de forma contigua; es decir, sin relleno entre los registros.</span><span class="sxs-lookup"><span data-stu-id="02db3-441">`FileGet` reads all variables from disk contiguously; that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="02db3-442">Para cualquier matriz que no sea una matriz en una estructura, `FileGet` lee sólo los datos.</span><span class="sxs-lookup"><span data-stu-id="02db3-442">For any array other than an array in a structure, `FileGet` reads only the data.</span></span> <span data-ttu-id="02db3-443">No se lee ningún descriptor.</span><span class="sxs-lookup"><span data-stu-id="02db3-443">No descriptor is read.</span></span>  
  
-   <span data-ttu-id="02db3-444">`FileGet` lee las cadenas de longitud variable que no sean elementos de estructuras sin esperar el descriptor de longitud de dos bytes.</span><span class="sxs-lookup"><span data-stu-id="02db3-444">`FileGet` reads variable-length strings that are not elements of structures without expecting the two-byte length descriptor.</span></span> <span data-ttu-id="02db3-445">El número de bytes leídos es igual al número de caracteres de la cadena.</span><span class="sxs-lookup"><span data-stu-id="02db3-445">The number of bytes read equals the number of characters already in the string.</span></span>  
  
    > [!IMPORTANT]
    >  <span data-ttu-id="02db3-446">Leer un archivo mediante el uso de la `FileGet` función requiere `Read` acceso desde el <xref:System.Security.Permissions.FileIOPermissionAccess> enumeración.</span><span class="sxs-lookup"><span data-stu-id="02db3-446">Reading from a file by using the `FileGet` function requires `Read` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="02db3-447">
            <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-447">
              <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="02db3-448">File mode is invalid.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-448">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
      </Docs>
    </Member>
    <Member MemberName="FileGet">
      <MemberSignature Language="C#" Value="public static void FileGet (int FileNumber, ref DateTime Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileGet(int32 FileNumber, valuetype System.DateTime&amp; Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.DateTime@,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileGet (FileNumber As Integer, ByRef Value As DateTime, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FileGet : int *  * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileGet (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.DateTime&amp;" RefType="ref" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="02db3-449">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-449">Required.</span>
          </span>
          <span data-ttu-id="02db3-450">Any valid file number.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-450">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="02db3-451">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-451">Required.</span>
          </span>
          <span data-ttu-id="02db3-452">Valid variable name into which data is read.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-452">Valid variable name into which data is read.</span>
          </span>
        </param>
        <param name="RecordNumber">
          <span data-ttu-id="02db3-453">Optional.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-453">Optional.</span>
          </span>
          <span data-ttu-id="02db3-454">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-454">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="02db3-455">Reads data from an open disk file into a variable.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-455">Reads data from an open disk file into a variable.</span>
          </span>
          <span data-ttu-id="02db3-456">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-456">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span>
          </span>
          <span data-ttu-id="02db3-457">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-457">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="02db3-458">`FileGet` solo es válido en `Random` y `Binary` modo.</span><span class="sxs-lookup"><span data-stu-id="02db3-458">`FileGet` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="02db3-459">Los datos leídos con `FileGet` se escriben normalmente en un archivo con `FilePut`.</span><span class="sxs-lookup"><span data-stu-id="02db3-459">Data read with `FileGet` is usually written to a file with `FilePut`.</span></span>  
  
 <span data-ttu-id="02db3-460">El primer registro o byte de un archivo está en la posición 1, el segundo registro o byte en la posición 2 y así sucesivamente.</span><span class="sxs-lookup"><span data-stu-id="02db3-460">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="02db3-461">Si se omite `RecordNumber`, el siguiente registro o byte que sigue a la última `FileGet` o `FilePut` función (o apunta a la última `Seek` función) se lee.</span><span class="sxs-lookup"><span data-stu-id="02db3-461">If you omit `RecordNumber`, the next record or byte following the last `FileGet` or `FilePut` function (or pointed to by the last `Seek` function) is read.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="02db3-462">Al leer de archivos, no realice ninguna decisión sobre el contenido de un archivo basado en la extensión de nombre de archivo.</span><span class="sxs-lookup"><span data-stu-id="02db3-462">When reading from files, do not make decisions about the contents of a file based on the file name extension.</span></span> <span data-ttu-id="02db3-463">Por ejemplo, un archivo denominado Form1.vb no puede ser un archivo de código fuente de Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="02db3-463">For example, a file that is named Form1.vb may not be a Visual Basic source file.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="02db3-464">Modo aleatorio</span><span class="sxs-lookup"><span data-stu-id="02db3-464">Random Mode</span></span>  
 <span data-ttu-id="02db3-465">De los archivos abiertos en `Random` modo, se aplican las reglas siguientes:</span><span class="sxs-lookup"><span data-stu-id="02db3-465">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="02db3-466">Si la longitud de los datos que se está leyendo es menor que la longitud especificada en el `RecordLength` cláusula de la `FileOpen` función,`FileGet` leerá los registros posteriores en los límites de longitud de registro.</span><span class="sxs-lookup"><span data-stu-id="02db3-466">If the length of the data being read is less than the length specified in the `RecordLength` clause of the `FileOpen` function,`FileGet` reads subsequent records on record-length boundaries.</span></span> <span data-ttu-id="02db3-467">El espacio entre el final de un registro y el inicio del siguiente registro se rellena con el contenido existente del búfer del archivo.</span><span class="sxs-lookup"><span data-stu-id="02db3-467">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="02db3-468">Como la cantidad de datos de relleno no se puede determinar con certeza, suele ser una buena idea tener la longitud del registro coincide con la longitud de los datos que se va a leer.</span><span class="sxs-lookup"><span data-stu-id="02db3-468">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being read.</span></span>  
  
-   <span data-ttu-id="02db3-469">De forma predeterminada, si la variable que se está leyendo es una cadena, `FileGet` lee un descriptor de dos bytes que contiene la longitud de cadena y, a continuación, lee los datos que entrarán en la variable.</span><span class="sxs-lookup"><span data-stu-id="02db3-469">By default, if the variable being read into is a string, `FileGet` reads a two-byte descriptor that contains the string length and then reads the data that goes into the variable.</span></span> <span data-ttu-id="02db3-470">Por lo tanto, la longitud de registro especificada por el `RecordLength` cláusula de la `FileOpen` función debe ser mayor que la longitud real de la cadena de al menos dos bytes.</span><span class="sxs-lookup"><span data-stu-id="02db3-470">Therefore, the record length specified by the `RecordLength` clause of the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span> <span data-ttu-id="02db3-471">Visual Basic 6.0 y versiones anteriores admiten cadenas de longitud fija; Cuando se coloca en un archivo, no se escribe el descriptor de longitud.</span><span class="sxs-lookup"><span data-stu-id="02db3-471">Visual Basic 6.0 and earlier versions support fixed-length strings; when put to a file, the length descriptor is not written.</span></span> <span data-ttu-id="02db3-472">Si desea leer una cadena sin el descriptor, debería pasar `True` a la `StringIsFixedLength` parámetro y la cadena que lea debe tener la longitud correcta.</span><span class="sxs-lookup"><span data-stu-id="02db3-472">If you want to read a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="02db3-473">Si la variable que se está leyendo es una matriz, puede elegir si desea leer un descriptor para el tamaño y la dimensión de la matriz.</span><span class="sxs-lookup"><span data-stu-id="02db3-473">If the variable being read into is an array, you can choose whether to read a descriptor for the size and dimension of the array.</span></span> <span data-ttu-id="02db3-474">Para escribir el descriptor, establezca el `ArrayIsDynamic` parámetro `True`.</span><span class="sxs-lookup"><span data-stu-id="02db3-474">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="02db3-475">Al leer la matriz, se tiene que coincidir con la forma en que se escribió la matriz.</span><span class="sxs-lookup"><span data-stu-id="02db3-475">When reading the array, you have to match the way the array was written.</span></span> <span data-ttu-id="02db3-476">Si se escribió con el descriptor, debe leer el descriptor.</span><span class="sxs-lookup"><span data-stu-id="02db3-476">If it was written with the descriptor, you have to read the descriptor.</span></span> <span data-ttu-id="02db3-477">Si no se utiliza el descriptor, el tamaño y los límites de la matriz se pasan a `FileGet` determinar lo que debe leer.</span><span class="sxs-lookup"><span data-stu-id="02db3-477">If the descriptor is not used, the size and bounds of the array passed into `FileGet` determine what to read.</span></span>  
  
     <span data-ttu-id="02db3-478">El descriptor especifica el rango de la matriz, el tamaño y los límites inferiores de cada rango.</span><span class="sxs-lookup"><span data-stu-id="02db3-478">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="02db3-479">Su longitud es igual a 2 más 8 veces el número de dimensiones: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="02db3-479">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="02db3-480">La longitud de registro especificada por el `RecordLength` parámetro en el `FileOpen` función debe ser mayor o igual a la suma de todos los bytes necesarios para escribir los datos de matriz y el descriptor de matriz.</span><span class="sxs-lookup"><span data-stu-id="02db3-480">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="02db3-481">Por ejemplo, la siguiente declaración de matriz requiere 218 bytes cuando se escribe la matriz en el disco.</span><span class="sxs-lookup"><span data-stu-id="02db3-481">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#21)]  
  
     <span data-ttu-id="02db3-482">Los bytes 218 se distribuyen como sigue:</span><span class="sxs-lookup"><span data-stu-id="02db3-482">The 218 bytes are distributed as follows:</span></span>  
  
    -   <span data-ttu-id="02db3-483">18 bytes para el descriptor: (2 + 8 \* 2)</span><span class="sxs-lookup"><span data-stu-id="02db3-483">18 bytes for the descriptor: (2 + 8 \* 2)</span></span>  
  
    -   <span data-ttu-id="02db3-484">200 bytes para los datos: (10 * 5 * 4).</span><span class="sxs-lookup"><span data-stu-id="02db3-484">200 bytes for the data: (5 * 10 * 4).</span></span>  
  
-   <span data-ttu-id="02db3-485">Si la variable que se está leyendo es cualquier otro tipo de variable (no una cadena de longitud variable o un objeto), `FileGet` lee sólo los datos de la variable.</span><span class="sxs-lookup"><span data-stu-id="02db3-485">If the variable being read into is any other type of variable (not a variable-length string or an object), `FileGet` reads only the variable data.</span></span> <span data-ttu-id="02db3-486">La longitud de registro especificada por el `RecordLength` cláusula en la `FileOpen` función debe ser mayor o igual que la longitud de los datos que se va a leer.</span><span class="sxs-lookup"><span data-stu-id="02db3-486">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being read.</span></span>  
  
-   <span data-ttu-id="02db3-487">`FileGet` lee elementos de estructuras como si cada una se que se leyeron individualmente, salvo que no hay ningún relleno entre los elementos.</span><span class="sxs-lookup"><span data-stu-id="02db3-487">`FileGet` reads elements of structures as if each were being read individually, except that there is no padding between elements.</span></span> <span data-ttu-id="02db3-488">En el disco, una dinámica de matriz en un tipo definido por el usuario (escritas con `FilePut`) viene precedida por un descriptor cuya longitud es igual a 2 más 8 veces el número de dimensiones: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="02db3-488">On disk, a dynamic array in a user-defined type (written with `FilePut`) is prefixed by a descriptor whose length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="02db3-489">La longitud de registro especificada por el `RecordLength` cláusula en la `FileOpen` función debe ser mayor o igual a la suma de todos los bytes necesarios para leer los elementos individuales.</span><span class="sxs-lookup"><span data-stu-id="02db3-489">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to read the individual elements.</span></span> <span data-ttu-id="02db3-490">Esto incluye las matrices y sus descriptores.</span><span class="sxs-lookup"><span data-stu-id="02db3-490">This includes any arrays and their descriptors.</span></span> <span data-ttu-id="02db3-491">El `VBFixedString` atributo puede aplicarse a campos de cadena de las estructuras para indicar el tamaño de una cadena cuando se escribe en el disco.</span><span class="sxs-lookup"><span data-stu-id="02db3-491">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of a string when written to disk.</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="02db3-492">Modo binario</span><span class="sxs-lookup"><span data-stu-id="02db3-492">Binary Mode</span></span>  
 <span data-ttu-id="02db3-493">De los archivos abiertos en `Binary` modo, la mayoría de los `Random` se aplican las reglas de modo, con algunas excepciones.</span><span class="sxs-lookup"><span data-stu-id="02db3-493">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="02db3-494">Las siguientes reglas para los archivos abiertos en `Binary` modo difieren de las reglas para `Random` modo:</span><span class="sxs-lookup"><span data-stu-id="02db3-494">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="02db3-495">El `RecordLength` cláusula en la `FileOpen` función no tiene ningún efecto.</span><span class="sxs-lookup"><span data-stu-id="02db3-495">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="02db3-496">`FileGet` lee todas las variables del disco de forma contigua; es decir, sin relleno entre los registros.</span><span class="sxs-lookup"><span data-stu-id="02db3-496">`FileGet` reads all variables from disk contiguously; that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="02db3-497">Para cualquier matriz que no sea una matriz en una estructura, `FileGet` lee sólo los datos.</span><span class="sxs-lookup"><span data-stu-id="02db3-497">For any array other than an array in a structure, `FileGet` reads only the data.</span></span> <span data-ttu-id="02db3-498">No se lee ningún descriptor.</span><span class="sxs-lookup"><span data-stu-id="02db3-498">No descriptor is read.</span></span>  
  
-   <span data-ttu-id="02db3-499">`FileGet` lee las cadenas de longitud variable que no sean elementos de estructuras sin esperar el descriptor de longitud de dos bytes.</span><span class="sxs-lookup"><span data-stu-id="02db3-499">`FileGet` reads variable-length strings that are not elements of structures without expecting the two-byte length descriptor.</span></span> <span data-ttu-id="02db3-500">El número de bytes leídos es igual al número de caracteres de la cadena.</span><span class="sxs-lookup"><span data-stu-id="02db3-500">The number of bytes read equals the number of characters already in the string.</span></span>  
  
    > [!IMPORTANT]
    >  <span data-ttu-id="02db3-501">Leer un archivo mediante el uso de la `FileGet` función requiere `Read` acceso desde el <xref:System.Security.Permissions.FileIOPermissionAccess> enumeración.</span><span class="sxs-lookup"><span data-stu-id="02db3-501">Reading from a file by using the `FileGet` function requires `Read` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="02db3-502">
            <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-502">
              <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="02db3-503">File mode is invalid.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-503">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
      </Docs>
    </Member>
    <Member MemberName="FileGet">
      <MemberSignature Language="C#" Value="public static void FileGet (int FileNumber, ref decimal Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileGet(int32 FileNumber, valuetype System.Decimal&amp; Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.Decimal@,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileGet (FileNumber As Integer, ByRef Value As Decimal, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FileGet : int *  * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileGet (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Decimal&amp;" RefType="ref" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="02db3-504">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-504">Required.</span>
          </span>
          <span data-ttu-id="02db3-505">Any valid file number.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-505">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="02db3-506">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-506">Required.</span>
          </span>
          <span data-ttu-id="02db3-507">Valid variable name into which data is read.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-507">Valid variable name into which data is read.</span>
          </span>
        </param>
        <param name="RecordNumber">
          <span data-ttu-id="02db3-508">Optional.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-508">Optional.</span>
          </span>
          <span data-ttu-id="02db3-509">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-509">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="02db3-510">Reads data from an open disk file into a variable.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-510">Reads data from an open disk file into a variable.</span>
          </span>
          <span data-ttu-id="02db3-511">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-511">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span>
          </span>
          <span data-ttu-id="02db3-512">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-512">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="02db3-513">`FileGet` solo es válido en `Random` y `Binary` modo.</span><span class="sxs-lookup"><span data-stu-id="02db3-513">`FileGet` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="02db3-514">Los datos leídos con `FileGet` se escriben normalmente en un archivo mediante el uso de `FilePut`.</span><span class="sxs-lookup"><span data-stu-id="02db3-514">Data read with `FileGet` is usually written to a file by using `FilePut`.</span></span>  
  
 <span data-ttu-id="02db3-515">El primer registro o byte de un archivo está en la posición 1, el segundo registro o byte en la posición 2 y así sucesivamente.</span><span class="sxs-lookup"><span data-stu-id="02db3-515">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="02db3-516">Si se omite `RecordNumber`, el siguiente registro o byte que sigue a la última `FileGet` o `FilePut` función (o apunta a la última `Seek` función) se lee.</span><span class="sxs-lookup"><span data-stu-id="02db3-516">If you omit `RecordNumber`, the next record or byte following the last `FileGet` or `FilePut` function (or pointed to by the last `Seek` function) is read.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="02db3-517">Al leer de archivos, no realice ninguna decisión sobre el contenido de un archivo basado en la extensión de nombre de archivo.</span><span class="sxs-lookup"><span data-stu-id="02db3-517">When reading from files, do not make decisions about the contents of a file based on the file name extension.</span></span> <span data-ttu-id="02db3-518">Por ejemplo, un archivo denominado Form1.vb no puede ser un archivo de código fuente de Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="02db3-518">For example, a file that is named Form1.vb may not be a Visual Basic source file.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="02db3-519">Modo aleatorio</span><span class="sxs-lookup"><span data-stu-id="02db3-519">Random Mode</span></span>  
 <span data-ttu-id="02db3-520">De los archivos abiertos en `Random` modo, se aplican las reglas siguientes:</span><span class="sxs-lookup"><span data-stu-id="02db3-520">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="02db3-521">Si la longitud de los datos que se está leyendo es menor que la longitud especificada en el `RecordLength` cláusula de la `FileOpen` función, `FileGet` leerá los registros posteriores en los límites de longitud de registro.</span><span class="sxs-lookup"><span data-stu-id="02db3-521">If the length of the data being read is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FileGet` reads subsequent records on record-length boundaries.</span></span> <span data-ttu-id="02db3-522">El espacio entre el final de un registro y el inicio del siguiente registro se rellena con el contenido existente del búfer del archivo.</span><span class="sxs-lookup"><span data-stu-id="02db3-522">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="02db3-523">Como la cantidad de datos de relleno no se puede determinar con certeza, suele ser una buena idea tener la longitud del registro coincide con la longitud de los datos que se va a leer.</span><span class="sxs-lookup"><span data-stu-id="02db3-523">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being read.</span></span>  
  
-   <span data-ttu-id="02db3-524">De forma predeterminada, si la variable que se está leyendo es una cadena, `FileGet` lee un descriptor de dos bytes que contiene la longitud de cadena y, a continuación, lee los datos que entrarán en la variable.</span><span class="sxs-lookup"><span data-stu-id="02db3-524">By default, if the variable being read into is a string, `FileGet` reads a two-byte descriptor that contains the string length and then reads the data that goes into the variable.</span></span> <span data-ttu-id="02db3-525">Por lo tanto, la longitud de registro especificada por el `RecordLength` cláusula de la `FileOpen` función debe ser mayor que la longitud real de la cadena de al menos dos bytes.</span><span class="sxs-lookup"><span data-stu-id="02db3-525">Therefore, the record length specified by the `RecordLength` clause of the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span> <span data-ttu-id="02db3-526">Visual Basic 6.0 y versiones anteriores admiten cadenas de longitud fija; Cuando se coloca en un archivo, no se escribe el descriptor de longitud.</span><span class="sxs-lookup"><span data-stu-id="02db3-526">Visual Basic 6.0 and earlier versions support fixed-length strings; when put to a file, the length descriptor is not written.</span></span> <span data-ttu-id="02db3-527">Si desea leer una cadena sin el descriptor, debería pasar `True` a la `StringIsFixedLength` parámetro y la cadena que lea debe tener la longitud correcta.</span><span class="sxs-lookup"><span data-stu-id="02db3-527">If you want to read a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="02db3-528">Si la variable que se está leyendo es una matriz, puede elegir si desea leer un descriptor para el tamaño y la dimensión de la matriz.</span><span class="sxs-lookup"><span data-stu-id="02db3-528">If the variable being read into is an array, you can choose whether to read a descriptor for the size and dimension of the array.</span></span> <span data-ttu-id="02db3-529">Para escribir el descriptor, establezca el `ArrayIsDynamic` parámetro `True`.</span><span class="sxs-lookup"><span data-stu-id="02db3-529">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="02db3-530">Al leer la matriz, se tiene que coincidir con la forma en que se escribió la matriz.</span><span class="sxs-lookup"><span data-stu-id="02db3-530">When reading the array, you have to match the way the array was written.</span></span> <span data-ttu-id="02db3-531">Si se escribió con el descriptor, debe leer el descriptor.</span><span class="sxs-lookup"><span data-stu-id="02db3-531">If it was written with the descriptor, you have to read the descriptor.</span></span> <span data-ttu-id="02db3-532">Si no se utiliza el descriptor, el tamaño y los límites de la matriz se pasan a `FileGet` determinar lo que debe leer.</span><span class="sxs-lookup"><span data-stu-id="02db3-532">If the descriptor is not used, the size and bounds of the array passed into `FileGet` determine what to read.</span></span>  
  
     <span data-ttu-id="02db3-533">El descriptor especifica el rango de la matriz, el tamaño y los límites inferiores de cada rango.</span><span class="sxs-lookup"><span data-stu-id="02db3-533">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="02db3-534">Su longitud es igual a 2 más 8 veces el número de dimensiones: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="02db3-534">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="02db3-535">La longitud de registro especificada por el `RecordLength` parámetro en el `FileOpen` función debe ser mayor o igual a la suma de todos los bytes necesarios para escribir los datos de matriz y el descriptor de matriz.</span><span class="sxs-lookup"><span data-stu-id="02db3-535">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="02db3-536">Por ejemplo, la siguiente declaración de matriz requiere 218 bytes cuando se escribe la matriz en el disco.</span><span class="sxs-lookup"><span data-stu-id="02db3-536">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#21)]  
  
     <span data-ttu-id="02db3-537">Los bytes 218 se distribuyen como sigue:</span><span class="sxs-lookup"><span data-stu-id="02db3-537">The 218 bytes are distributed as follows:</span></span>  
  
    -   <span data-ttu-id="02db3-538">18 bytes para el descriptor: (2 + 8 \* 2)</span><span class="sxs-lookup"><span data-stu-id="02db3-538">18 bytes for the descriptor: (2 + 8 \* 2)</span></span>  
  
    -   <span data-ttu-id="02db3-539">200 bytes para los datos: (10 * 5 * 4).</span><span class="sxs-lookup"><span data-stu-id="02db3-539">200 bytes for the data: (5 * 10 * 4).</span></span>  
  
-   <span data-ttu-id="02db3-540">Si la variable que se está leyendo es cualquier otro tipo de variable (no una cadena de longitud variable o un objeto), `FileGet` lee sólo los datos de la variable.</span><span class="sxs-lookup"><span data-stu-id="02db3-540">If the variable being read into is any other type of variable (not a variable-length string or an object), `FileGet` reads only the variable data.</span></span> <span data-ttu-id="02db3-541">La longitud de registro especificada por el `RecordLength` cláusula en la `FileOpen` función debe ser mayor o igual que la longitud de los datos que se va a leer.</span><span class="sxs-lookup"><span data-stu-id="02db3-541">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being read.</span></span>  
  
-   <span data-ttu-id="02db3-542">`FileGet` lee elementos de estructuras como si cada una se que se leyeron individualmente, salvo que no hay ningún relleno entre los elementos.</span><span class="sxs-lookup"><span data-stu-id="02db3-542">`FileGet` reads elements of structures as if each were being read individually, except that there is no padding between elements.</span></span> <span data-ttu-id="02db3-543">En el disco, una dinámica de matriz en un tipo definido por el usuario (escritas con `FilePut`) viene precedida por un descriptor cuya longitud es igual a 2 más 8 veces el número de dimensiones: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="02db3-543">On disk, a dynamic array in a user-defined type (written with `FilePut`) is prefixed by a descriptor whose length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="02db3-544">La longitud de registro especificada por el `RecordLength` cláusula en la `FileOpen` función debe ser mayor o igual a la suma de todos los bytes necesarios para leer los elementos individuales.</span><span class="sxs-lookup"><span data-stu-id="02db3-544">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to read the individual elements.</span></span> <span data-ttu-id="02db3-545">Esto incluye las matrices y sus descriptores.</span><span class="sxs-lookup"><span data-stu-id="02db3-545">This includes any arrays and their descriptors.</span></span> <span data-ttu-id="02db3-546">El `VBFixedString` atributo puede aplicarse a campos de cadena de las estructuras para indicar el tamaño de una cadena cuando se escribe en el disco.</span><span class="sxs-lookup"><span data-stu-id="02db3-546">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of a string when written to disk.</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="02db3-547">Modo binario</span><span class="sxs-lookup"><span data-stu-id="02db3-547">Binary Mode</span></span>  
 <span data-ttu-id="02db3-548">De los archivos abiertos en `Binary` modo, la mayoría de los `Random` se aplican las reglas de modo, con algunas excepciones.</span><span class="sxs-lookup"><span data-stu-id="02db3-548">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="02db3-549">Las siguientes reglas para los archivos abiertos en `Binary` modo difieren de las reglas para `Random` modo:</span><span class="sxs-lookup"><span data-stu-id="02db3-549">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="02db3-550">El `RecordLength` cláusula en la `FileOpen` función no tiene ningún efecto.</span><span class="sxs-lookup"><span data-stu-id="02db3-550">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="02db3-551">`FileGet` lee todas las variables del disco de forma contigua; es decir, sin relleno entre los registros.</span><span class="sxs-lookup"><span data-stu-id="02db3-551">`FileGet` reads all variables from disk contiguously; that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="02db3-552">Para cualquier matriz que no sea una matriz en una estructura, `FileGet` lee sólo los datos.</span><span class="sxs-lookup"><span data-stu-id="02db3-552">For any array other than an array in a structure, `FileGet` reads only the data.</span></span> <span data-ttu-id="02db3-553">No se lee ningún descriptor.</span><span class="sxs-lookup"><span data-stu-id="02db3-553">No descriptor is read.</span></span>  
  
-   <span data-ttu-id="02db3-554">`FileGet` lee las cadenas de longitud variable que no sean elementos de estructuras sin esperar el descriptor de longitud de dos bytes.</span><span class="sxs-lookup"><span data-stu-id="02db3-554">`FileGet` reads variable-length strings that are not elements of structures without expecting the two-byte length descriptor.</span></span> <span data-ttu-id="02db3-555">El número de bytes leídos es igual al número de caracteres de la cadena.</span><span class="sxs-lookup"><span data-stu-id="02db3-555">The number of bytes read equals the number of characters already in the string.</span></span>  
  
    > [!IMPORTANT]
    >  <span data-ttu-id="02db3-556">Leer un archivo mediante el uso de la `FileGet` función requiere `Read` acceso desde el <xref:System.Security.Permissions.FileIOPermissionAccess> enumeración.</span><span class="sxs-lookup"><span data-stu-id="02db3-556">Reading from a file by using the `FileGet` function requires `Read` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="02db3-557">
            <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-557">
              <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="02db3-558">File mode is invalid.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-558">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
      </Docs>
    </Member>
    <Member MemberName="FileGet">
      <MemberSignature Language="C#" Value="public static void FileGet (int FileNumber, ref double Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileGet(int32 FileNumber, float64&amp; Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.Double@,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileGet (FileNumber As Integer, ByRef Value As Double, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FileGet : int *  * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileGet (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Double&amp;" RefType="ref" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="02db3-559">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-559">Required.</span>
          </span>
          <span data-ttu-id="02db3-560">Any valid file number.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-560">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="02db3-561">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-561">Required.</span>
          </span>
          <span data-ttu-id="02db3-562">Valid variable name into which data is read.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-562">Valid variable name into which data is read.</span>
          </span>
        </param>
        <param name="RecordNumber">
          <span data-ttu-id="02db3-563">Optional.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-563">Optional.</span>
          </span>
          <span data-ttu-id="02db3-564">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-564">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="02db3-565">Reads data from an open disk file into a variable.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-565">Reads data from an open disk file into a variable.</span>
          </span>
          <span data-ttu-id="02db3-566">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-566">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span>
          </span>
          <span data-ttu-id="02db3-567">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-567">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="02db3-568">`FileGet` solo es válido en `Random` y `Binary` modo.</span><span class="sxs-lookup"><span data-stu-id="02db3-568">`FileGet` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="02db3-569">Los datos leídos con `FileGet` se escriben normalmente en un archivo mediante el uso de `FilePut`.</span><span class="sxs-lookup"><span data-stu-id="02db3-569">Data read with `FileGet` is usually written to a file by using `FilePut`.</span></span>  
  
 <span data-ttu-id="02db3-570">El primer registro o byte de un archivo está en la posición 1, el segundo registro o byte en la posición 2 y así sucesivamente.</span><span class="sxs-lookup"><span data-stu-id="02db3-570">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="02db3-571">Si se omite `RecordNumber`, el siguiente registro o byte que sigue a la última `FileGet` o `FilePut` función (o apunta a la última `Seek` función) se lee.</span><span class="sxs-lookup"><span data-stu-id="02db3-571">If you omit `RecordNumber`, the next record or byte following the last `FileGet` or `FilePut` function (or pointed to by the last `Seek` function) is read.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="02db3-572">Al leer de archivos, no realice ninguna decisión sobre el contenido de un archivo basado en la extensión de nombre de archivo.</span><span class="sxs-lookup"><span data-stu-id="02db3-572">When reading from files, do not make decisions about the contents of a file based on the file name extension.</span></span> <span data-ttu-id="02db3-573">Por ejemplo, un archivo denominado Form1.vb no puede ser un archivo de código fuente de Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="02db3-573">For example, a file that is named Form1.vb may not be a Visual Basic source file.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="02db3-574">Modo aleatorio</span><span class="sxs-lookup"><span data-stu-id="02db3-574">Random Mode</span></span>  
 <span data-ttu-id="02db3-575">De los archivos abiertos en `Random` modo, se aplican las reglas siguientes:</span><span class="sxs-lookup"><span data-stu-id="02db3-575">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="02db3-576">Si la longitud de los datos que se está leyendo es menor que la longitud especificada en el `RecordLength` cláusula de la `FileOpen` función, `FileGet` leerá los registros posteriores en los límites de longitud de registro.</span><span class="sxs-lookup"><span data-stu-id="02db3-576">If the length of the data being read is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FileGet` reads subsequent records on record-length boundaries.</span></span> <span data-ttu-id="02db3-577">El espacio entre el final de un registro y el inicio del siguiente registro se rellena con el contenido existente del búfer del archivo.</span><span class="sxs-lookup"><span data-stu-id="02db3-577">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="02db3-578">Como la cantidad de datos de relleno no se puede determinar con certeza, suele ser una buena idea tener la longitud del registro coincide con la longitud de los datos que se va a leer.</span><span class="sxs-lookup"><span data-stu-id="02db3-578">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being read.</span></span>  
  
-   <span data-ttu-id="02db3-579">De forma predeterminada, si la variable que se está leyendo es una cadena, `FileGet` lee un descriptor de dos bytes que contiene la longitud de cadena y, a continuación, lee los datos que entrarán en la variable.</span><span class="sxs-lookup"><span data-stu-id="02db3-579">By default, if the variable being read into is a string, `FileGet` reads a two-byte descriptor that contains the string length and then reads the data that goes into the variable.</span></span> <span data-ttu-id="02db3-580">Por lo tanto, la longitud de registro especificada por el `RecordLength` cláusula de la `FileOpen` función debe ser mayor que la longitud real de la cadena de al menos dos bytes.</span><span class="sxs-lookup"><span data-stu-id="02db3-580">Therefore, the record length specified by the `RecordLength` clause of the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span> <span data-ttu-id="02db3-581">Visual Basic 6.0 y versiones anteriores admiten cadenas de longitud fija; Cuando se coloca en un archivo, no se escribe el descriptor de longitud.</span><span class="sxs-lookup"><span data-stu-id="02db3-581">Visual Basic 6.0 and earlier versions support fixed-length strings; when put to a file, the length descriptor is not written.</span></span> <span data-ttu-id="02db3-582">Si desea leer una cadena sin el descriptor, debería pasar `True` a la `StringIsFixedLength` parámetro y la cadena que lea debe tener la longitud correcta.</span><span class="sxs-lookup"><span data-stu-id="02db3-582">If you want to read a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="02db3-583">Si la variable que se está leyendo es una matriz, puede elegir si desea leer un descriptor para el tamaño y la dimensión de la matriz.</span><span class="sxs-lookup"><span data-stu-id="02db3-583">If the variable being read into is an array, you can choose whether to read a descriptor for the size and dimension of the array.</span></span> <span data-ttu-id="02db3-584">Para escribir el descriptor, establezca el `ArrayIsDynamic` parámetro `True`.</span><span class="sxs-lookup"><span data-stu-id="02db3-584">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="02db3-585">Al leer la matriz, se tiene que coincidir con la forma en que se escribió la matriz.</span><span class="sxs-lookup"><span data-stu-id="02db3-585">When reading the array, you have to match the way the array was written.</span></span> <span data-ttu-id="02db3-586">Si se escribió con el descriptor, debe leer el descriptor.</span><span class="sxs-lookup"><span data-stu-id="02db3-586">If it was written with the descriptor, you have to read the descriptor.</span></span> <span data-ttu-id="02db3-587">Si no se utiliza el descriptor, el tamaño y los límites de la matriz se pasan a `FileGet` determinar lo que debe leer.</span><span class="sxs-lookup"><span data-stu-id="02db3-587">If the descriptor is not used, the size and bounds of the array passed into `FileGet` determine what to read.</span></span>  
  
     <span data-ttu-id="02db3-588">El descriptor especifica el rango de la matriz, el tamaño y los límites inferiores de cada rango.</span><span class="sxs-lookup"><span data-stu-id="02db3-588">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="02db3-589">Su longitud es igual a 2 más 8 veces el número de dimensiones: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="02db3-589">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="02db3-590">La longitud de registro especificada por el `RecordLength` parámetro en el `FileOpen` función debe ser mayor o igual a la suma de todos los bytes necesarios para escribir los datos de matriz y el descriptor de matriz.</span><span class="sxs-lookup"><span data-stu-id="02db3-590">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="02db3-591">Por ejemplo, la siguiente declaración de matriz requiere 218 bytes cuando se escribe la matriz en el disco.</span><span class="sxs-lookup"><span data-stu-id="02db3-591">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#21)]  
  
     <span data-ttu-id="02db3-592">Los bytes 218 se distribuyen como sigue:</span><span class="sxs-lookup"><span data-stu-id="02db3-592">The 218 bytes are distributed as follows:</span></span>  
  
    -   <span data-ttu-id="02db3-593">18 bytes para el descriptor: (2 + 8 \* 2)</span><span class="sxs-lookup"><span data-stu-id="02db3-593">18 bytes for the descriptor: (2 + 8 \* 2)</span></span>  
  
    -   <span data-ttu-id="02db3-594">200 bytes para los datos: (10 * 5 * 4).</span><span class="sxs-lookup"><span data-stu-id="02db3-594">200 bytes for the data: (5 * 10 * 4).</span></span>  
  
-   <span data-ttu-id="02db3-595">Si la variable que se está leyendo es cualquier otro tipo de variable (no una cadena de longitud variable o un objeto), `FileGet` lee sólo los datos de la variable.</span><span class="sxs-lookup"><span data-stu-id="02db3-595">If the variable being read into is any other type of variable (not a variable-length string or an object), `FileGet` reads only the variable data.</span></span> <span data-ttu-id="02db3-596">La longitud de registro especificada por el `RecordLength` cláusula en la `FileOpen` función debe ser mayor o igual que la longitud de los datos que se va a leer.</span><span class="sxs-lookup"><span data-stu-id="02db3-596">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being read.</span></span>  
  
-   <span data-ttu-id="02db3-597">`FileGet` lee elementos de estructuras como si cada una se que se leyeron individualmente, salvo que no hay ningún relleno entre los elementos.</span><span class="sxs-lookup"><span data-stu-id="02db3-597">`FileGet` reads elements of structures as if each were being read individually, except that there is no padding between elements.</span></span> <span data-ttu-id="02db3-598">En el disco, una dinámica de matriz en un tipo definido por el usuario (escritas con `FilePut`) viene precedida por un descriptor cuya longitud es igual a 2 más 8 veces el número de dimensiones: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="02db3-598">On disk, a dynamic array in a user-defined type (written with `FilePut`) is prefixed by a descriptor whose length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="02db3-599">La longitud de registro especificada por el `RecordLength` cláusula en la `FileOpen` función debe ser mayor o igual a la suma de todos los bytes necesarios para leer los elementos individuales.</span><span class="sxs-lookup"><span data-stu-id="02db3-599">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to read the individual elements.</span></span> <span data-ttu-id="02db3-600">Esto incluye las matrices y sus descriptores.</span><span class="sxs-lookup"><span data-stu-id="02db3-600">This includes any arrays and their descriptors.</span></span> <span data-ttu-id="02db3-601">El `VBFixedString` atributo puede aplicarse a campos de cadena de las estructuras para indicar el tamaño de una cadena cuando se escribe en el disco.</span><span class="sxs-lookup"><span data-stu-id="02db3-601">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of a string when written to disk.</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="02db3-602">Modo binario</span><span class="sxs-lookup"><span data-stu-id="02db3-602">Binary Mode</span></span>  
 <span data-ttu-id="02db3-603">De los archivos abiertos en `Binary` modo, la mayoría de los `Random` se aplican las reglas de modo, con algunas excepciones.</span><span class="sxs-lookup"><span data-stu-id="02db3-603">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="02db3-604">Las siguientes reglas para los archivos abiertos en `Binary` modo difieren de las reglas para `Random` modo:</span><span class="sxs-lookup"><span data-stu-id="02db3-604">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="02db3-605">El `RecordLength` cláusula en la `FileOpen` función no tiene ningún efecto.</span><span class="sxs-lookup"><span data-stu-id="02db3-605">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="02db3-606">`FileGet` lee todas las variables del disco de forma contigua; es decir, sin relleno entre los registros.</span><span class="sxs-lookup"><span data-stu-id="02db3-606">`FileGet` reads all variables from disk contiguously; that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="02db3-607">Para cualquier matriz que no sea una matriz en una estructura, `FileGet` lee sólo los datos.</span><span class="sxs-lookup"><span data-stu-id="02db3-607">For any array other than an array in a structure, `FileGet` reads only the data.</span></span> <span data-ttu-id="02db3-608">No se lee ningún descriptor.</span><span class="sxs-lookup"><span data-stu-id="02db3-608">No descriptor is read.</span></span>  
  
-   <span data-ttu-id="02db3-609">`FileGet` lee las cadenas de longitud variable que no sean elementos de estructuras sin esperar el descriptor de longitud de dos bytes.</span><span class="sxs-lookup"><span data-stu-id="02db3-609">`FileGet` reads variable-length strings that are not elements of structures without expecting the two-byte length descriptor.</span></span> <span data-ttu-id="02db3-610">El número de bytes leídos es igual al número de caracteres de la cadena.</span><span class="sxs-lookup"><span data-stu-id="02db3-610">The number of bytes read equals the number of characters already in the string.</span></span>  
  
    > [!IMPORTANT]
    >  <span data-ttu-id="02db3-611">Leer un archivo mediante el uso de la`FileGet` función requiere `Read` acceso desde el <xref:System.Security.Permissions.FileIOPermissionAccess> enumeración.</span><span class="sxs-lookup"><span data-stu-id="02db3-611">Reading from a file by using the`FileGet` function requires `Read` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="02db3-612">
            <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-612">
              <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="02db3-613">File mode is invalid.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-613">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
      </Docs>
    </Member>
    <Member MemberName="FileGet">
      <MemberSignature Language="C#" Value="public static void FileGet (int FileNumber, ref short Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileGet(int32 FileNumber, int16&amp; Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.Int16@,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileGet (FileNumber As Integer, ByRef Value As Short, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FileGet : int *  * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileGet (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Int16&amp;" RefType="ref" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="02db3-614">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-614">Required.</span>
          </span>
          <span data-ttu-id="02db3-615">Any valid file number.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-615">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="02db3-616">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-616">Required.</span>
          </span>
          <span data-ttu-id="02db3-617">Valid variable name into which data is read.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-617">Valid variable name into which data is read.</span>
          </span>
        </param>
        <param name="RecordNumber">
          <span data-ttu-id="02db3-618">Optional.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-618">Optional.</span>
          </span>
          <span data-ttu-id="02db3-619">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-619">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="02db3-620">Reads data from an open disk file into a variable.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-620">Reads data from an open disk file into a variable.</span>
          </span>
          <span data-ttu-id="02db3-621">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-621">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span>
          </span>
          <span data-ttu-id="02db3-622">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-622">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="02db3-623">`FileGet` solo es válido en `Random` y `Binary` modo.</span><span class="sxs-lookup"><span data-stu-id="02db3-623">`FileGet` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="02db3-624">Los datos leídos con `FileGet` se escriben normalmente en un archivo mediante el uso de `FilePut`.</span><span class="sxs-lookup"><span data-stu-id="02db3-624">Data read with `FileGet` is usually written to a file by using `FilePut`.</span></span>  
  
 <span data-ttu-id="02db3-625">El primer registro o byte de un archivo está en la posición 1, el segundo registro o byte en la posición 2 y así sucesivamente.</span><span class="sxs-lookup"><span data-stu-id="02db3-625">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="02db3-626">Si se omite `RecordNumber`, el siguiente registro o byte que sigue a la última `FileGet` o `FilePut` función (o apunta a la última `Seek` función) se lee.</span><span class="sxs-lookup"><span data-stu-id="02db3-626">If you omit `RecordNumber`, the next record or byte following the last `FileGet` or `FilePut` function (or pointed to by the last `Seek` function) is read.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="02db3-627">Al leer de archivos, no realice ninguna decisión sobre el contenido de un archivo basado en la extensión de nombre de archivo.</span><span class="sxs-lookup"><span data-stu-id="02db3-627">When reading from files, do not make decisions about the contents of a file based on the file name extension.</span></span> <span data-ttu-id="02db3-628">Por ejemplo, un archivo denominado Form1.vb no puede ser un archivo de código fuente de Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="02db3-628">For example, a file that is named Form1.vb may not be a Visual Basic source file.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="02db3-629">Modo aleatorio</span><span class="sxs-lookup"><span data-stu-id="02db3-629">Random Mode</span></span>  
 <span data-ttu-id="02db3-630">De los archivos abiertos en `Random` modo, se aplican las reglas siguientes:</span><span class="sxs-lookup"><span data-stu-id="02db3-630">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="02db3-631">Si la longitud de los datos que se está leyendo es menor que la longitud especificada en el `RecordLength` cláusula de la `FileOpen` función, `FileGet` leerá los registros posteriores en los límites de longitud de registro.</span><span class="sxs-lookup"><span data-stu-id="02db3-631">If the length of the data being read is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FileGet` reads subsequent records on record-length boundaries.</span></span> <span data-ttu-id="02db3-632">El espacio entre el final de un registro y el inicio del siguiente registro se rellena con el contenido existente del búfer del archivo.</span><span class="sxs-lookup"><span data-stu-id="02db3-632">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="02db3-633">Como la cantidad de datos de relleno no se puede determinar con certeza, suele ser una buena idea tener la longitud del registro coincide con la longitud de los datos que se va a leer.</span><span class="sxs-lookup"><span data-stu-id="02db3-633">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being read.</span></span>  
  
-   <span data-ttu-id="02db3-634">De forma predeterminada, si la variable que se está leyendo es una cadena, `FileGet` lee un descriptor de dos bytes que contiene la longitud de cadena y, a continuación, lee los datos que entrarán en la variable.</span><span class="sxs-lookup"><span data-stu-id="02db3-634">By default, if the variable being read into is a string, `FileGet` reads a two-byte descriptor that contains the string length and then reads the data that goes into the variable.</span></span> <span data-ttu-id="02db3-635">Por lo tanto, la longitud de registro especificada por el `RecordLength` cláusula de la `FileOpen` función debe ser mayor que la longitud real de la cadena de al menos dos bytes.</span><span class="sxs-lookup"><span data-stu-id="02db3-635">Therefore, the record length specified by the `RecordLength` clause of the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span> <span data-ttu-id="02db3-636">Visual Basic 6.0 y versiones anteriores admiten cadenas de longitud fija; Cuando se coloca en un archivo, no se escribe el descriptor de longitud.</span><span class="sxs-lookup"><span data-stu-id="02db3-636">Visual Basic 6.0 and earlier versions support fixed-length strings; when put to a file, the length descriptor is not written.</span></span> <span data-ttu-id="02db3-637">Si desea leer una cadena sin el descriptor, debería pasar `True` a la `StringIsFixedLength` parámetro y la cadena que lea debe tener la longitud correcta.</span><span class="sxs-lookup"><span data-stu-id="02db3-637">If you want to read a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="02db3-638">Si la variable que se está leyendo es una matriz, puede elegir si desea leer un descriptor para el tamaño y la dimensión de la matriz.</span><span class="sxs-lookup"><span data-stu-id="02db3-638">If the variable being read into is an array, you can choose whether to read a descriptor for the size and dimension of the array.</span></span> <span data-ttu-id="02db3-639">Para escribir el descriptor, establezca el `ArrayIsDynamic` parámetro `True`.</span><span class="sxs-lookup"><span data-stu-id="02db3-639">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="02db3-640">Al leer la matriz, se tiene que coincidir con la forma en que se escribió la matriz.</span><span class="sxs-lookup"><span data-stu-id="02db3-640">When reading the array, you have to match the way the array was written.</span></span> <span data-ttu-id="02db3-641">Si se escribió con el descriptor, debe leer el descriptor.</span><span class="sxs-lookup"><span data-stu-id="02db3-641">If it was written with the descriptor, you have to read the descriptor.</span></span> <span data-ttu-id="02db3-642">Si no se utiliza el descriptor, el tamaño y los límites de la matriz se pasan a `FileGet` determinar lo que debe leer.</span><span class="sxs-lookup"><span data-stu-id="02db3-642">If the descriptor is not used, the size and bounds of the array passed into `FileGet` determine what to read.</span></span>  
  
     <span data-ttu-id="02db3-643">El descriptor especifica el rango de la matriz, el tamaño y los límites inferiores de cada rango.</span><span class="sxs-lookup"><span data-stu-id="02db3-643">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="02db3-644">Su longitud es igual a 2 más 8 veces el número de dimensiones: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="02db3-644">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="02db3-645">La longitud de registro especificada por el `RecordLength` parámetro en el `FileOpen` función debe ser mayor o igual a la suma de todos los bytes necesarios para escribir los datos de matriz y el descriptor de matriz.</span><span class="sxs-lookup"><span data-stu-id="02db3-645">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="02db3-646">Por ejemplo, la siguiente declaración de matriz requiere 218 bytes cuando se escribe la matriz en el disco.</span><span class="sxs-lookup"><span data-stu-id="02db3-646">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#21)]  
  
     <span data-ttu-id="02db3-647">Los bytes 218 se distribuyen como sigue:</span><span class="sxs-lookup"><span data-stu-id="02db3-647">The 218 bytes are distributed as follows:</span></span>  
  
    -   <span data-ttu-id="02db3-648">18 bytes para el descriptor: (2 + 8 \* 2)</span><span class="sxs-lookup"><span data-stu-id="02db3-648">18 bytes for the descriptor: (2 + 8 \* 2)</span></span>  
  
    -   <span data-ttu-id="02db3-649">200 bytes para los datos: (10 * 5 * 4).</span><span class="sxs-lookup"><span data-stu-id="02db3-649">200 bytes for the data: (5 * 10 * 4).</span></span>  
  
-   <span data-ttu-id="02db3-650">Si la variable que se está leyendo es cualquier otro tipo de variable (no una cadena de longitud variable o un objeto), `FileGet` lee sólo los datos de la variable.</span><span class="sxs-lookup"><span data-stu-id="02db3-650">If the variable being read into is any other type of variable (not a variable-length string or an object), `FileGet` reads only the variable data.</span></span> <span data-ttu-id="02db3-651">La longitud de registro especificada por el `RecordLength` cláusula en la `FileOpen` función debe ser mayor o igual que la longitud de los datos que se va a leer.</span><span class="sxs-lookup"><span data-stu-id="02db3-651">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being read.</span></span>  
  
-   <span data-ttu-id="02db3-652">`FileGet` lee elementos de estructuras como si cada una se que se leyeron individualmente, salvo que no hay ningún relleno entre los elementos.</span><span class="sxs-lookup"><span data-stu-id="02db3-652">`FileGet` reads elements of structures as if each were being read individually, except that there is no padding between elements.</span></span> <span data-ttu-id="02db3-653">En el disco, una dinámica de matriz en un tipo definido por el usuario (escritas con `FilePut`) viene precedida por un descriptor cuya longitud es igual a 2 más 8 veces el número de dimensiones: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="02db3-653">On disk, a dynamic array in a user-defined type (written with `FilePut`) is prefixed by a descriptor whose length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="02db3-654">La longitud de registro especificada por el `RecordLength` cláusula en la `FileOpen` función debe ser mayor o igual a la suma de todos los bytes necesarios para leer los elementos individuales.</span><span class="sxs-lookup"><span data-stu-id="02db3-654">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to read the individual elements.</span></span> <span data-ttu-id="02db3-655">Esto incluye las matrices y sus descriptores.</span><span class="sxs-lookup"><span data-stu-id="02db3-655">This includes any arrays and their descriptors.</span></span> <span data-ttu-id="02db3-656">El `VBFixedString` atributo puede aplicarse a campos de cadena de las estructuras para indicar el tamaño de una cadena cuando se escribe en el disco.</span><span class="sxs-lookup"><span data-stu-id="02db3-656">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of a string when written to disk.</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="02db3-657">Modo binario</span><span class="sxs-lookup"><span data-stu-id="02db3-657">Binary Mode</span></span>  
 <span data-ttu-id="02db3-658">De los archivos abiertos en `Binary` modo, la mayoría de los `Random` se aplican las reglas de modo, con algunas excepciones.</span><span class="sxs-lookup"><span data-stu-id="02db3-658">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="02db3-659">Las siguientes reglas para los archivos abiertos en `Binary` modo difieren de las reglas para `Random` modo:</span><span class="sxs-lookup"><span data-stu-id="02db3-659">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="02db3-660">El `RecordLength` cláusula en la `FileOpen` función no tiene ningún efecto.</span><span class="sxs-lookup"><span data-stu-id="02db3-660">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="02db3-661">`FileGet` lee todas las variables del disco de forma contigua; es decir, sin relleno entre los registros.</span><span class="sxs-lookup"><span data-stu-id="02db3-661">`FileGet` reads all variables from disk contiguously; that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="02db3-662">Para cualquier matriz que no sea una matriz en una estructura, `FileGet` lee sólo los datos.</span><span class="sxs-lookup"><span data-stu-id="02db3-662">For any array other than an array in a structure, `FileGet` reads only the data.</span></span> <span data-ttu-id="02db3-663">No se lee ningún descriptor.</span><span class="sxs-lookup"><span data-stu-id="02db3-663">No descriptor is read.</span></span>  
  
-   <span data-ttu-id="02db3-664">`FileGet` lee las cadenas de longitud variable que no sean elementos de estructuras sin esperar el descriptor de longitud de dos bytes.</span><span class="sxs-lookup"><span data-stu-id="02db3-664">`FileGet` reads variable-length strings that are not elements of structures without expecting the two-byte length descriptor.</span></span> <span data-ttu-id="02db3-665">El número de bytes leídos es igual al número de caracteres de la cadena.</span><span class="sxs-lookup"><span data-stu-id="02db3-665">The number of bytes read equals the number of characters already in the string.</span></span>  
  
    > [!IMPORTANT]
    >  <span data-ttu-id="02db3-666">Leer un archivo mediante el uso de la `FileGet` función requiere `Read` acceso desde el <xref:System.Security.Permissions.FileIOPermissionAccess> enumeración.</span><span class="sxs-lookup"><span data-stu-id="02db3-666">Reading from a file by using the `FileGet` function requires `Read` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="02db3-667">
            <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-667">
              <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="02db3-668">File mode is invalid.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-668">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
      </Docs>
    </Member>
    <Member MemberName="FileGet">
      <MemberSignature Language="C#" Value="public static void FileGet (int FileNumber, ref int Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileGet(int32 FileNumber, int32&amp; Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.Int32@,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileGet (FileNumber As Integer, ByRef Value As Integer, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FileGet : int *  * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileGet (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Int32&amp;" RefType="ref" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="02db3-669">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-669">Required.</span>
          </span>
          <span data-ttu-id="02db3-670">Any valid file number.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-670">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="02db3-671">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-671">Required.</span>
          </span>
          <span data-ttu-id="02db3-672">Valid variable name into which data is read.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-672">Valid variable name into which data is read.</span>
          </span>
        </param>
        <param name="RecordNumber">
          <span data-ttu-id="02db3-673">Optional.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-673">Optional.</span>
          </span>
          <span data-ttu-id="02db3-674">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-674">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="02db3-675">Reads data from an open disk file into a variable.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-675">Reads data from an open disk file into a variable.</span>
          </span>
          <span data-ttu-id="02db3-676">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-676">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span>
          </span>
          <span data-ttu-id="02db3-677">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-677">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="02db3-678">`FileGet` solo es válido en `Random` y `Binary` modo.</span><span class="sxs-lookup"><span data-stu-id="02db3-678">`FileGet` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="02db3-679">Los datos leídos con `FileGet` se escriben normalmente en un archivo mediante el uso de `FilePut`.</span><span class="sxs-lookup"><span data-stu-id="02db3-679">Data read with `FileGet` is usually written to a file by using `FilePut`.</span></span>  
  
 <span data-ttu-id="02db3-680">El primer registro o byte de un archivo está en la posición 1, el segundo registro o byte en la posición 2 y así sucesivamente.</span><span class="sxs-lookup"><span data-stu-id="02db3-680">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="02db3-681">Si se omite `RecordNumber`, el siguiente registro o byte que sigue a la última `FileGet` o `FilePut` función (o apunta a la última `Seek` función) se lee.</span><span class="sxs-lookup"><span data-stu-id="02db3-681">If you omit `RecordNumber`, the next record or byte following the last `FileGet` or `FilePut` function (or pointed to by the last `Seek` function) is read.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="02db3-682">Al leer de archivos, no realice ninguna decisión sobre el contenido de un archivo basado en la extensión de nombre de archivo.</span><span class="sxs-lookup"><span data-stu-id="02db3-682">When reading from files, do not make decisions about the contents of a file based on the file name extension.</span></span> <span data-ttu-id="02db3-683">Por ejemplo, un archivo denominado Form1.vb no puede ser un archivo de código fuente de Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="02db3-683">For example, a file that is named Form1.vb may not be a Visual Basic source file.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="02db3-684">Modo aleatorio</span><span class="sxs-lookup"><span data-stu-id="02db3-684">Random Mode</span></span>  
 <span data-ttu-id="02db3-685">De los archivos abiertos en `Random` modo, se aplican las reglas siguientes:</span><span class="sxs-lookup"><span data-stu-id="02db3-685">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="02db3-686">Si la longitud de los datos que se está leyendo es menor que la longitud especificada en el `RecordLength` cláusula de la `FileOpen` función, `FileGet` leerá los registros posteriores en los límites de longitud de registro.</span><span class="sxs-lookup"><span data-stu-id="02db3-686">If the length of the data being read is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FileGet` reads subsequent records on record-length boundaries.</span></span> <span data-ttu-id="02db3-687">El espacio entre el final de un registro y el inicio del siguiente registro se rellena con el contenido existente del búfer del archivo.</span><span class="sxs-lookup"><span data-stu-id="02db3-687">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="02db3-688">Como la cantidad de datos de relleno no se puede determinar con certeza, suele ser una buena idea tener la longitud del registro coincide con la longitud de los datos que se va a leer.</span><span class="sxs-lookup"><span data-stu-id="02db3-688">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being read.</span></span>  
  
-   <span data-ttu-id="02db3-689">De forma predeterminada, si la variable que se está leyendo es una cadena, `FileGet` lee un descriptor de dos bytes que contiene la longitud de cadena y, a continuación, lee los datos que entrarán en la variable.</span><span class="sxs-lookup"><span data-stu-id="02db3-689">By default, if the variable being read into is a string, `FileGet` reads a two-byte descriptor that contains the string length and then reads the data that goes into the variable.</span></span> <span data-ttu-id="02db3-690">Por lo tanto, la longitud de registro especificada por el `RecordLength` cláusula de la `FileOpen` función debe ser mayor que la longitud real de la cadena de al menos dos bytes.</span><span class="sxs-lookup"><span data-stu-id="02db3-690">Therefore, the record length specified by the `RecordLength` clause of the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span> <span data-ttu-id="02db3-691">Visual Basic 6.0 y versiones anteriores admiten cadenas de longitud fija; Cuando se coloca en un archivo, no se escribe el descriptor de longitud.</span><span class="sxs-lookup"><span data-stu-id="02db3-691">Visual Basic 6.0 and earlier versions support fixed-length strings; when put to a file, the length descriptor is not written.</span></span> <span data-ttu-id="02db3-692">Si desea leer una cadena sin el descriptor, debería pasar `True` a la `StringIsFixedLength` parámetro y la cadena que lea debe tener la longitud correcta.</span><span class="sxs-lookup"><span data-stu-id="02db3-692">If you want to read a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="02db3-693">Si la variable que se está leyendo es una matriz, puede elegir si desea leer un descriptor para el tamaño y la dimensión de la matriz.</span><span class="sxs-lookup"><span data-stu-id="02db3-693">If the variable being read into is an array, you can choose whether to read a descriptor for the size and dimension of the array.</span></span> <span data-ttu-id="02db3-694">Para escribir el descriptor, establezca el `ArrayIsDynamic` parámetro `True`.</span><span class="sxs-lookup"><span data-stu-id="02db3-694">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="02db3-695">Al leer la matriz, se tiene que coincidir con la forma en que se escribió la matriz.</span><span class="sxs-lookup"><span data-stu-id="02db3-695">When reading the array, you have to match the way the array was written.</span></span> <span data-ttu-id="02db3-696">Si se escribió con el descriptor, debe leer el descriptor.</span><span class="sxs-lookup"><span data-stu-id="02db3-696">If it was written with the descriptor, you have to read the descriptor.</span></span> <span data-ttu-id="02db3-697">Si no se utiliza el descriptor, el tamaño y los límites de la matriz se pasan a `FileGet` determinar lo que debe leer.</span><span class="sxs-lookup"><span data-stu-id="02db3-697">If the descriptor is not used, the size and bounds of the array passed into `FileGet` determine what to read.</span></span>  
  
     <span data-ttu-id="02db3-698">El descriptor especifica el rango de la matriz, el tamaño y los límites inferiores de cada rango.</span><span class="sxs-lookup"><span data-stu-id="02db3-698">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="02db3-699">Su longitud es igual a 2 más 8 veces el número de dimensiones: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="02db3-699">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="02db3-700">La longitud de registro especificada por el `RecordLength` parámetro en el `FileOpen` función debe ser mayor o igual a la suma de todos los bytes necesarios para escribir los datos de matriz y el descriptor de matriz.</span><span class="sxs-lookup"><span data-stu-id="02db3-700">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="02db3-701">Por ejemplo, la siguiente declaración de matriz requiere 218 bytes cuando se escribe la matriz en el disco.</span><span class="sxs-lookup"><span data-stu-id="02db3-701">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#21)]  
  
     <span data-ttu-id="02db3-702">Los bytes 218 se distribuyen como sigue:</span><span class="sxs-lookup"><span data-stu-id="02db3-702">The 218 bytes are distributed as follows:</span></span>  
  
    -   <span data-ttu-id="02db3-703">18 bytes para el descriptor: (2 + 8 \* 2)</span><span class="sxs-lookup"><span data-stu-id="02db3-703">18 bytes for the descriptor: (2 + 8 \* 2)</span></span>  
  
    -   <span data-ttu-id="02db3-704">200 bytes para los datos: (10 * 5 * 4).</span><span class="sxs-lookup"><span data-stu-id="02db3-704">200 bytes for the data: (5 * 10 * 4).</span></span>  
  
-   <span data-ttu-id="02db3-705">Si la variable que se está leyendo es cualquier otro tipo de variable (no una cadena de longitud variable o un objeto), `FileGet` lee sólo los datos de la variable.</span><span class="sxs-lookup"><span data-stu-id="02db3-705">If the variable being read into is any other type of variable (not a variable-length string or an object), `FileGet` reads only the variable data.</span></span> <span data-ttu-id="02db3-706">La longitud de registro especificada por el `RecordLength` cláusula en la `FileOpen` función debe ser mayor o igual que la longitud de los datos que se va a leer.</span><span class="sxs-lookup"><span data-stu-id="02db3-706">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being read.</span></span>  
  
-   <span data-ttu-id="02db3-707">`FileGet` lee elementos de estructuras como si cada una se que se leyeron individualmente, salvo que no hay ningún relleno entre los elementos.</span><span class="sxs-lookup"><span data-stu-id="02db3-707">`FileGet` reads elements of structures as if each were being read individually, except that there is no padding between elements.</span></span> <span data-ttu-id="02db3-708">En el disco, una dinámica de matriz en un tipo definido por el usuario (escritas con `FilePut`) viene precedida por un descriptor cuya longitud es igual a 2 más 8 veces el número de dimensiones: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="02db3-708">On disk, a dynamic array in a user-defined type (written with `FilePut`) is prefixed by a descriptor whose length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="02db3-709">La longitud de registro especificada por el `RecordLength` cláusula en la `FileOpen` función debe ser mayor o igual a la suma de todos los bytes necesarios para leer los elementos individuales.</span><span class="sxs-lookup"><span data-stu-id="02db3-709">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to read the individual elements.</span></span> <span data-ttu-id="02db3-710">Esto incluye las matrices y sus descriptores.</span><span class="sxs-lookup"><span data-stu-id="02db3-710">This includes any arrays and their descriptors.</span></span> <span data-ttu-id="02db3-711">El `VBFixedString` atributo puede aplicarse a campos de cadena de las estructuras para indicar el tamaño de una cadena cuando se escribe en el disco.</span><span class="sxs-lookup"><span data-stu-id="02db3-711">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of a string when written to disk.</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="02db3-712">Modo binario</span><span class="sxs-lookup"><span data-stu-id="02db3-712">Binary Mode</span></span>  
 <span data-ttu-id="02db3-713">De los archivos abiertos en `Binary` modo, la mayoría de los `Random` se aplican las reglas de modo, con algunas excepciones.</span><span class="sxs-lookup"><span data-stu-id="02db3-713">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="02db3-714">Las siguientes reglas para los archivos abiertos en `Binary` modo difieren de las reglas para `Random` modo:</span><span class="sxs-lookup"><span data-stu-id="02db3-714">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="02db3-715">El `RecordLength` cláusula en la `FileOpen` función no tiene ningún efecto.</span><span class="sxs-lookup"><span data-stu-id="02db3-715">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="02db3-716">`FileGet` lee todas las variables del disco de forma contigua; es decir, sin relleno entre los registros.</span><span class="sxs-lookup"><span data-stu-id="02db3-716">`FileGet` reads all variables from disk contiguously; that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="02db3-717">Para cualquier matriz que no sea una matriz en una estructura, `FileGet` lee sólo los datos.</span><span class="sxs-lookup"><span data-stu-id="02db3-717">For any array other than an array in a structure, `FileGet` reads only the data.</span></span> <span data-ttu-id="02db3-718">No se lee ningún descriptor.</span><span class="sxs-lookup"><span data-stu-id="02db3-718">No descriptor is read.</span></span>  
  
-   <span data-ttu-id="02db3-719">`FileGet` lee las cadenas de longitud variable que no sean elementos de estructuras sin esperar el descriptor de longitud de dos bytes.</span><span class="sxs-lookup"><span data-stu-id="02db3-719">`FileGet` reads variable-length strings that are not elements of structures without expecting the two-byte length descriptor.</span></span> <span data-ttu-id="02db3-720">El número de bytes leídos es igual al número de caracteres de la cadena.</span><span class="sxs-lookup"><span data-stu-id="02db3-720">The number of bytes read equals the number of characters already in the string.</span></span>  
  
    > [!IMPORTANT]
    >  <span data-ttu-id="02db3-721">Leer un archivo mediante el uso de la `FileGet` función requiere `Read` acceso desde el <xref:System.Security.Permissions.FileIOPermissionAccess> enumeración.</span><span class="sxs-lookup"><span data-stu-id="02db3-721">Reading from a file by using the `FileGet` function requires `Read` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="02db3-722">
            <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-722">
              <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="02db3-723">File mode is invalid.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-723">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
      </Docs>
    </Member>
    <Member MemberName="FileGet">
      <MemberSignature Language="C#" Value="public static void FileGet (int FileNumber, ref long Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileGet(int32 FileNumber, int64&amp; Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.Int64@,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileGet (FileNumber As Integer, ByRef Value As Long, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FileGet : int *  * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileGet (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Int64&amp;" RefType="ref" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="02db3-724">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-724">Required.</span>
          </span>
          <span data-ttu-id="02db3-725">Any valid file number.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-725">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="02db3-726">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-726">Required.</span>
          </span>
          <span data-ttu-id="02db3-727">Valid variable name into which data is read.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-727">Valid variable name into which data is read.</span>
          </span>
        </param>
        <param name="RecordNumber">
          <span data-ttu-id="02db3-728">Optional.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-728">Optional.</span>
          </span>
          <span data-ttu-id="02db3-729">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-729">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="02db3-730">Reads data from an open disk file into a variable.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-730">Reads data from an open disk file into a variable.</span>
          </span>
          <span data-ttu-id="02db3-731">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-731">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span>
          </span>
          <span data-ttu-id="02db3-732">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-732">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="02db3-733">`FileGet` solo es válido en `Random` y `Binary` modo.</span><span class="sxs-lookup"><span data-stu-id="02db3-733">`FileGet` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="02db3-734">Los datos leídos con `FileGet` se escriben normalmente en un archivo mediante el uso de `FilePut`.</span><span class="sxs-lookup"><span data-stu-id="02db3-734">Data read with `FileGet` is usually written to a file by using `FilePut`.</span></span>  
  
 <span data-ttu-id="02db3-735">El primer registro o byte de un archivo está en la posición 1, el segundo registro o byte en la posición 2 y así sucesivamente.</span><span class="sxs-lookup"><span data-stu-id="02db3-735">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="02db3-736">Si se omite `RecordNumber`, el siguiente registro o byte que sigue a la última `FileGet` o `FilePut` función (o apunta a la última `Seek` función) se lee.</span><span class="sxs-lookup"><span data-stu-id="02db3-736">If you omit `RecordNumber`, the next record or byte following the last `FileGet` or `FilePut` function (or pointed to by the last `Seek` function) is read.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="02db3-737">Al leer de archivos, no realice ninguna decisión sobre el contenido de un archivo basado en la extensión de nombre de archivo.</span><span class="sxs-lookup"><span data-stu-id="02db3-737">When reading from files, do not make decisions about the contents of a file based on the file name extension.</span></span> <span data-ttu-id="02db3-738">Por ejemplo, un archivo denominado Form1.vb no puede ser un archivo de código fuente de Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="02db3-738">For example, a file that is named Form1.vb may not be a Visual Basic source file.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="02db3-739">Modo aleatorio</span><span class="sxs-lookup"><span data-stu-id="02db3-739">Random Mode</span></span>  
 <span data-ttu-id="02db3-740">De los archivos abiertos en `Random` modo, se aplican las reglas siguientes:</span><span class="sxs-lookup"><span data-stu-id="02db3-740">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="02db3-741">Si la longitud de los datos que se está leyendo es menor que la longitud especificada en el `RecordLength` cláusula de la `FileOpen` función, `FileGet` leerá los registros posteriores en los límites de longitud de registro.</span><span class="sxs-lookup"><span data-stu-id="02db3-741">If the length of the data being read is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FileGet` reads subsequent records on record-length boundaries.</span></span> <span data-ttu-id="02db3-742">El espacio entre el final de un registro y el inicio del siguiente registro se rellena con el contenido existente del búfer del archivo.</span><span class="sxs-lookup"><span data-stu-id="02db3-742">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="02db3-743">Como la cantidad de datos de relleno no se puede determinar con certeza, suele ser una buena idea tener la longitud del registro coincide con la longitud de los datos que se va a leer.</span><span class="sxs-lookup"><span data-stu-id="02db3-743">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being read.</span></span>  
  
-   <span data-ttu-id="02db3-744">De forma predeterminada, si la variable que se está leyendo es una cadena, `FileGet` lee un descriptor de dos bytes que contiene la longitud de cadena y, a continuación, lee los datos que entrarán en la variable.</span><span class="sxs-lookup"><span data-stu-id="02db3-744">By default, if the variable being read into is a string, `FileGet` reads a two-byte descriptor that contains the string length and then reads the data that goes into the variable.</span></span> <span data-ttu-id="02db3-745">Por lo tanto, la longitud de registro especificada por el `RecordLength` cláusula de la `FileOpen` función debe ser mayor que la longitud real de la cadena de al menos dos bytes.</span><span class="sxs-lookup"><span data-stu-id="02db3-745">Therefore, the record length specified by the `RecordLength` clause of the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span> <span data-ttu-id="02db3-746">Visual Basic 6.0 y versiones anteriores admiten cadenas de longitud fija; Cuando se coloca en un archivo, no se escribe el descriptor de longitud.</span><span class="sxs-lookup"><span data-stu-id="02db3-746">Visual Basic 6.0 and earlier versions support fixed-length strings; when put to a file, the length descriptor is not written.</span></span> <span data-ttu-id="02db3-747">Si desea leer una cadena sin el descriptor, debería pasar `True` a la `StringIsFixedLength` parámetro y la cadena que lea debe tener la longitud correcta.</span><span class="sxs-lookup"><span data-stu-id="02db3-747">If you want to read a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="02db3-748">Si la variable que se está leyendo es una matriz, puede elegir si desea leer un descriptor para el tamaño y la dimensión de la matriz.</span><span class="sxs-lookup"><span data-stu-id="02db3-748">If the variable being read into is an array, you can choose whether to read a descriptor for the size and dimension of the array.</span></span> <span data-ttu-id="02db3-749">Para escribir el descriptor, establezca el `ArrayIsDynamic` parámetro `True`.</span><span class="sxs-lookup"><span data-stu-id="02db3-749">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="02db3-750">Al leer la matriz, se tiene que coincidir con la forma en que se escribió la matriz.</span><span class="sxs-lookup"><span data-stu-id="02db3-750">When reading the array, you have to match the way the array was written.</span></span> <span data-ttu-id="02db3-751">Si se escribió con el descriptor, debe leer el descriptor.</span><span class="sxs-lookup"><span data-stu-id="02db3-751">If it was written with the descriptor, you have to read the descriptor.</span></span> <span data-ttu-id="02db3-752">Si no se utiliza el descriptor, el tamaño y los límites de la matriz se pasan a `FileGet` determinar lo que debe leer.</span><span class="sxs-lookup"><span data-stu-id="02db3-752">If the descriptor is not used, the size and bounds of the array passed into `FileGet` determine what to read.</span></span>  
  
     <span data-ttu-id="02db3-753">El descriptor especifica el rango de la matriz, el tamaño y los límites inferiores de cada rango.</span><span class="sxs-lookup"><span data-stu-id="02db3-753">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="02db3-754">Su longitud es igual a 2 más 8 veces el número de dimensiones: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="02db3-754">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="02db3-755">La longitud de registro especificada por el `RecordLength` parámetro en el `FileOpen` función debe ser mayor o igual a la suma de todos los bytes necesarios para escribir los datos de matriz y el descriptor de matriz.</span><span class="sxs-lookup"><span data-stu-id="02db3-755">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="02db3-756">Por ejemplo, la siguiente declaración de matriz requiere 218 bytes cuando se escribe la matriz en el disco.</span><span class="sxs-lookup"><span data-stu-id="02db3-756">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#21)]  
  
     <span data-ttu-id="02db3-757">Los bytes 218 se distribuyen como sigue:</span><span class="sxs-lookup"><span data-stu-id="02db3-757">The 218 bytes are distributed as follows:</span></span>  
  
    -   <span data-ttu-id="02db3-758">18 bytes para el descriptor: (2 + 8 \* 2)</span><span class="sxs-lookup"><span data-stu-id="02db3-758">18 bytes for the descriptor: (2 + 8 \* 2)</span></span>  
  
    -   <span data-ttu-id="02db3-759">200 bytes para los datos: (10 * 5 * 4).</span><span class="sxs-lookup"><span data-stu-id="02db3-759">200 bytes for the data: (5 * 10 * 4).</span></span>  
  
-   <span data-ttu-id="02db3-760">Si la variable que se está leyendo es cualquier otro tipo de variable (no una cadena de longitud variable o un objeto), `FileGet` lee sólo los datos de la variable.</span><span class="sxs-lookup"><span data-stu-id="02db3-760">If the variable being read into is any other type of variable (not a variable-length string or an object), `FileGet` reads only the variable data.</span></span> <span data-ttu-id="02db3-761">La longitud de registro especificada por el `RecordLength` cláusula en la `FileOpen` función debe ser mayor o igual que la longitud de los datos que se va a leer.</span><span class="sxs-lookup"><span data-stu-id="02db3-761">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being read.</span></span>  
  
-   <span data-ttu-id="02db3-762">`FileGet` lee elementos de estructuras como si cada una se que se leyeron individualmente, salvo que no hay ningún relleno entre los elementos.</span><span class="sxs-lookup"><span data-stu-id="02db3-762">`FileGet` reads elements of structures as if each were being read individually, except that there is no padding between elements.</span></span> <span data-ttu-id="02db3-763">En el disco, una dinámica de matriz en un tipo definido por el usuario (escritas con `FilePut`) viene precedida por un descriptor cuya longitud es igual a 2 más 8 veces el número de dimensiones: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="02db3-763">On disk, a dynamic array in a user-defined type (written with `FilePut`) is prefixed by a descriptor whose length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="02db3-764">La longitud de registro especificada por el `RecordLength` cláusula en la `FileOpen` función debe ser mayor o igual a la suma de todos los bytes necesarios para leer los elementos individuales.</span><span class="sxs-lookup"><span data-stu-id="02db3-764">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to read the individual elements.</span></span> <span data-ttu-id="02db3-765">Esto incluye las matrices y sus descriptores.</span><span class="sxs-lookup"><span data-stu-id="02db3-765">This includes any arrays and their descriptors.</span></span> <span data-ttu-id="02db3-766">El `VBFixedString` atributo puede aplicarse a campos de cadena de las estructuras para indicar el tamaño de una cadena cuando se escribe en el disco.</span><span class="sxs-lookup"><span data-stu-id="02db3-766">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of a string when written to disk.</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="02db3-767">Modo binario</span><span class="sxs-lookup"><span data-stu-id="02db3-767">Binary Mode</span></span>  
 <span data-ttu-id="02db3-768">De los archivos abiertos en `Binary` modo, la mayoría de los `Random` se aplican las reglas de modo, con algunas excepciones.</span><span class="sxs-lookup"><span data-stu-id="02db3-768">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="02db3-769">Las siguientes reglas para los archivos abiertos en `Binary` modo difieren de las reglas para `Random` modo:</span><span class="sxs-lookup"><span data-stu-id="02db3-769">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="02db3-770">El `RecordLength` cláusula en la `FileOpen` función no tiene ningún efecto.</span><span class="sxs-lookup"><span data-stu-id="02db3-770">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="02db3-771">`FileGet` lee todas las variables del disco de forma contigua; es decir, sin relleno entre los registros.</span><span class="sxs-lookup"><span data-stu-id="02db3-771">`FileGet` reads all variables from disk contiguously; that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="02db3-772">Para cualquier matriz que no sea una matriz en una estructura, `FileGet` lee sólo los datos.</span><span class="sxs-lookup"><span data-stu-id="02db3-772">For any array other than an array in a structure, `FileGet` reads only the data.</span></span> <span data-ttu-id="02db3-773">No se lee ningún descriptor.</span><span class="sxs-lookup"><span data-stu-id="02db3-773">No descriptor is read.</span></span>  
  
-   <span data-ttu-id="02db3-774">`FileGet` lee las cadenas de longitud variable que no sean elementos de estructuras sin esperar el descriptor de longitud de dos bytes.</span><span class="sxs-lookup"><span data-stu-id="02db3-774">`FileGet` reads variable-length strings that are not elements of structures without expecting the two-byte length descriptor.</span></span> <span data-ttu-id="02db3-775">El número de bytes leídos es igual al número de caracteres de la cadena.</span><span class="sxs-lookup"><span data-stu-id="02db3-775">The number of bytes read equals the number of characters already in the string.</span></span>  
  
    > [!IMPORTANT]
    >  <span data-ttu-id="02db3-776">Leer un archivo mediante el uso de la `FileGet` función requiere `Read` acceso desde el <xref:System.Security.Permissions.FileIOPermissionAccess> enumeración.</span><span class="sxs-lookup"><span data-stu-id="02db3-776">Reading from a file by using the `FileGet` function requires `Read` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="02db3-777">
            <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-777">
              <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="02db3-778">File mode is invalid.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-778">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
      </Docs>
    </Member>
    <Member MemberName="FileGet">
      <MemberSignature Language="C#" Value="public static void FileGet (int FileNumber, ref float Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileGet(int32 FileNumber, float32&amp; Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.Single@,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileGet (FileNumber As Integer, ByRef Value As Single, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FileGet : int *  * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileGet (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Single&amp;" RefType="ref" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="02db3-779">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-779">Required.</span>
          </span>
          <span data-ttu-id="02db3-780">Any valid file number.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-780">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="02db3-781">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-781">Required.</span>
          </span>
          <span data-ttu-id="02db3-782">Valid variable name into which data is read.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-782">Valid variable name into which data is read.</span>
          </span>
        </param>
        <param name="RecordNumber">
          <span data-ttu-id="02db3-783">Optional.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-783">Optional.</span>
          </span>
          <span data-ttu-id="02db3-784">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-784">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="02db3-785">Reads data from an open disk file into a variable.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-785">Reads data from an open disk file into a variable.</span>
          </span>
          <span data-ttu-id="02db3-786">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-786">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span>
          </span>
          <span data-ttu-id="02db3-787">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-787">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="02db3-788">`FileGet` solo es válido en `Random` y `Binary` modo.</span><span class="sxs-lookup"><span data-stu-id="02db3-788">`FileGet` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="02db3-789">Los datos leídos con `FileGet` se escriben normalmente en un archivo mediante el uso de `FilePut`.</span><span class="sxs-lookup"><span data-stu-id="02db3-789">Data read with `FileGet` is usually written to a file by using `FilePut`.</span></span>  
  
 <span data-ttu-id="02db3-790">El primer registro o byte de un archivo está en la posición 1, el segundo registro o byte en la posición 2 y así sucesivamente.</span><span class="sxs-lookup"><span data-stu-id="02db3-790">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="02db3-791">Si se omite `RecordNumber`, el siguiente registro o byte que sigue a la última `FileGet` o `FilePut` función (o apunta a la última `Seek` función) se lee.</span><span class="sxs-lookup"><span data-stu-id="02db3-791">If you omit `RecordNumber`, the next record or byte following the last `FileGet` or `FilePut` function (or pointed to by the last `Seek` function) is read.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="02db3-792">Al leer de archivos, no realice ninguna decisión sobre el contenido de un archivo basado en la extensión de nombre de archivo.</span><span class="sxs-lookup"><span data-stu-id="02db3-792">When reading from files, do not make decisions about the contents of a file based on the file name extension.</span></span> <span data-ttu-id="02db3-793">Por ejemplo, un archivo denominado Form1.vb no puede ser un archivo de código fuente de Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="02db3-793">For example, a file that is named Form1.vb may not be a Visual Basic source file.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="02db3-794">Modo aleatorio</span><span class="sxs-lookup"><span data-stu-id="02db3-794">Random Mode</span></span>  
 <span data-ttu-id="02db3-795">De los archivos abiertos en `Random` modo, se aplican las reglas siguientes:</span><span class="sxs-lookup"><span data-stu-id="02db3-795">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="02db3-796">Si la longitud de los datos que se está leyendo es menor que la longitud especificada en el `RecordLength` cláusula de la `FileOpen` función, `FileGet` leerá los registros posteriores en los límites de longitud de registro.</span><span class="sxs-lookup"><span data-stu-id="02db3-796">If the length of the data being read is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FileGet` reads subsequent records on record-length boundaries.</span></span> <span data-ttu-id="02db3-797">El espacio entre el final de un registro y el inicio del siguiente registro se rellena con el contenido existente del búfer del archivo.</span><span class="sxs-lookup"><span data-stu-id="02db3-797">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="02db3-798">Como la cantidad de datos de relleno no se puede determinar con certeza, suele ser una buena idea tener la longitud del registro coincide con la longitud de los datos que se va a leer.</span><span class="sxs-lookup"><span data-stu-id="02db3-798">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being read.</span></span>  
  
-   <span data-ttu-id="02db3-799">De forma predeterminada, si la variable que se está leyendo es una cadena, `FileGet` lee un descriptor de dos bytes que contiene la longitud de cadena y, a continuación, lee los datos que entrarán en la variable.</span><span class="sxs-lookup"><span data-stu-id="02db3-799">By default, if the variable being read into is a string, `FileGet` reads a two-byte descriptor that contains the string length and then reads the data that goes into the variable.</span></span> <span data-ttu-id="02db3-800">Por lo tanto, la longitud de registro especificada por el `RecordLength` cláusula de la `FileOpen` función debe ser mayor que la longitud real de la cadena de al menos dos bytes.</span><span class="sxs-lookup"><span data-stu-id="02db3-800">Therefore, the record length specified by the `RecordLength` clause of the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span> <span data-ttu-id="02db3-801">Visual Basic 6.0 y versiones anteriores admiten cadenas de longitud fija; Cuando se coloca en un archivo, no se escribe el descriptor de longitud.</span><span class="sxs-lookup"><span data-stu-id="02db3-801">Visual Basic 6.0 and earlier versions support fixed-length strings; when put to a file, the length descriptor is not written.</span></span> <span data-ttu-id="02db3-802">Si desea leer una cadena sin el descriptor, debería pasar `True` a la `StringIsFixedLength` parámetro y la cadena que lea debe tener la longitud correcta.</span><span class="sxs-lookup"><span data-stu-id="02db3-802">If you want to read a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="02db3-803">Si la variable que se está leyendo es una matriz, puede elegir si desea leer un descriptor para el tamaño y la dimensión de la matriz.</span><span class="sxs-lookup"><span data-stu-id="02db3-803">If the variable being read into is an array, you can choose whether to read a descriptor for the size and dimension of the array.</span></span> <span data-ttu-id="02db3-804">Para escribir el descriptor, establezca el `ArrayIsDynamic` parámetro `True`.</span><span class="sxs-lookup"><span data-stu-id="02db3-804">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="02db3-805">Al leer la matriz, se tiene que coincidir con la forma en que se escribió la matriz.</span><span class="sxs-lookup"><span data-stu-id="02db3-805">When reading the array, you have to match the way the array was written.</span></span> <span data-ttu-id="02db3-806">Si se escribió con el descriptor, debe leer el descriptor.</span><span class="sxs-lookup"><span data-stu-id="02db3-806">If it was written with the descriptor, you have to read the descriptor.</span></span> <span data-ttu-id="02db3-807">Si no se utiliza el descriptor, el tamaño y los límites de la matriz se pasan a `FileGet` determinar lo que debe leer.</span><span class="sxs-lookup"><span data-stu-id="02db3-807">If the descriptor is not used, the size and bounds of the array passed into `FileGet` determine what to read.</span></span>  
  
     <span data-ttu-id="02db3-808">El descriptor especifica el rango de la matriz, el tamaño y los límites inferiores de cada rango.</span><span class="sxs-lookup"><span data-stu-id="02db3-808">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="02db3-809">Su longitud es igual a 2 más 8 veces el número de dimensiones: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="02db3-809">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="02db3-810">La longitud de registro especificada por el `RecordLength` parámetro en el `FileOpen` función debe ser mayor o igual a la suma de todos los bytes necesarios para escribir los datos de matriz y el descriptor de matriz.</span><span class="sxs-lookup"><span data-stu-id="02db3-810">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="02db3-811">Por ejemplo, la siguiente declaración de matriz requiere 218 bytes cuando se escribe la matriz en el disco.</span><span class="sxs-lookup"><span data-stu-id="02db3-811">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#21)]  
  
     <span data-ttu-id="02db3-812">Los bytes 218 se distribuyen como sigue:</span><span class="sxs-lookup"><span data-stu-id="02db3-812">The 218 bytes are distributed as follows:</span></span>  
  
    -   <span data-ttu-id="02db3-813">18 bytes para el descriptor: (2 + 8 \* 2)</span><span class="sxs-lookup"><span data-stu-id="02db3-813">18 bytes for the descriptor: (2 + 8 \* 2)</span></span>  
  
    -   <span data-ttu-id="02db3-814">200 bytes para los datos: (10 * 5 * 4).</span><span class="sxs-lookup"><span data-stu-id="02db3-814">200 bytes for the data: (5 * 10 * 4).</span></span>  
  
-   <span data-ttu-id="02db3-815">Si la variable que se está leyendo es cualquier otro tipo de variable (no una cadena de longitud variable o un objeto), `FileGet` lee sólo los datos de la variable.</span><span class="sxs-lookup"><span data-stu-id="02db3-815">If the variable being read into is any other type of variable (not a variable-length string or an object), `FileGet` reads only the variable data.</span></span> <span data-ttu-id="02db3-816">La longitud de registro especificada por el `RecordLength` cláusula en la `FileOpen` función debe ser mayor o igual que la longitud de los datos que se va a leer.</span><span class="sxs-lookup"><span data-stu-id="02db3-816">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being read.</span></span>  
  
-   <span data-ttu-id="02db3-817">`FileGet` lee elementos de estructuras como si cada una se que se leyeron individualmente, salvo que no hay ningún relleno entre los elementos.</span><span class="sxs-lookup"><span data-stu-id="02db3-817">`FileGet` reads elements of structures as if each were being read individually, except that there is no padding between elements.</span></span> <span data-ttu-id="02db3-818">En el disco, una dinámica de matriz en un tipo definido por el usuario (escritas con `FilePut`) viene precedida por un descriptor cuya longitud es igual a 2 más 8 veces el número de dimensiones: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="02db3-818">On disk, a dynamic array in a user-defined type (written with `FilePut`) is prefixed by a descriptor whose length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="02db3-819">La longitud de registro especificada por el `RecordLength` cláusula en la `FileOpen` función debe ser mayor o igual a la suma de todos los bytes necesarios para leer los elementos individuales.</span><span class="sxs-lookup"><span data-stu-id="02db3-819">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to read the individual elements.</span></span> <span data-ttu-id="02db3-820">Esto incluye las matrices y sus descriptores.</span><span class="sxs-lookup"><span data-stu-id="02db3-820">This includes any arrays and their descriptors.</span></span> <span data-ttu-id="02db3-821">El `VBFixedString` atributo puede aplicarse a campos de cadena de las estructuras para indicar el tamaño de una cadena cuando se escribe en el disco.</span><span class="sxs-lookup"><span data-stu-id="02db3-821">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of a string when written to disk.</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="02db3-822">Modo binario</span><span class="sxs-lookup"><span data-stu-id="02db3-822">Binary Mode</span></span>  
 <span data-ttu-id="02db3-823">De los archivos abiertos en `Binary` modo, la mayoría de los `Random` se aplican las reglas de modo, con algunas excepciones.</span><span class="sxs-lookup"><span data-stu-id="02db3-823">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="02db3-824">Las siguientes reglas para los archivos abiertos en `Binary` modo difieren de las reglas para `Random` modo:</span><span class="sxs-lookup"><span data-stu-id="02db3-824">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="02db3-825">El `RecordLength` cláusula en la `FileOpen` función no tiene ningún efecto.</span><span class="sxs-lookup"><span data-stu-id="02db3-825">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="02db3-826">`FileGet` lee todas las variables del disco de forma contigua; es decir, sin relleno entre los registros.</span><span class="sxs-lookup"><span data-stu-id="02db3-826">`FileGet` reads all variables from disk contiguously; that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="02db3-827">Para cualquier matriz que no sea una matriz en una estructura, `FileGet` lee sólo los datos.</span><span class="sxs-lookup"><span data-stu-id="02db3-827">For any array other than an array in a structure, `FileGet` reads only the data.</span></span> <span data-ttu-id="02db3-828">No se lee ningún descriptor.</span><span class="sxs-lookup"><span data-stu-id="02db3-828">No descriptor is read.</span></span>  
  
-   <span data-ttu-id="02db3-829">`FileGet` lee las cadenas de longitud variable que no sean elementos de estructuras sin esperar el descriptor de longitud de dos bytes.</span><span class="sxs-lookup"><span data-stu-id="02db3-829">`FileGet` reads variable-length strings that are not elements of structures without expecting the two-byte length descriptor.</span></span> <span data-ttu-id="02db3-830">El número de bytes leídos es igual al número de caracteres de la cadena.</span><span class="sxs-lookup"><span data-stu-id="02db3-830">The number of bytes read equals the number of characters already in the string.</span></span>  
  
    > [!IMPORTANT]
    >  <span data-ttu-id="02db3-831">Leer un archivo mediante el uso de la `FileGet` función requiere `Read` acceso desde el <xref:System.Security.Permissions.FileIOPermissionAccess> enumeración.</span><span class="sxs-lookup"><span data-stu-id="02db3-831">Reading from a file by using the `FileGet` function requires `Read` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="02db3-832">
            <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-832">
              <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="02db3-833">File mode is invalid.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-833">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
      </Docs>
    </Member>
    <Member MemberName="FileGet">
      <MemberSignature Language="C#" Value="public static void FileGet (int FileNumber, ref ValueType Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileGet(int32 FileNumber, class System.ValueType&amp; Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.ValueType@,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileGet (FileNumber As Integer, ByRef Value As ValueType, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FileGet : int *  * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileGet (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.ValueType&amp;" RefType="ref" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="02db3-834">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-834">Required.</span>
          </span>
          <span data-ttu-id="02db3-835">Any valid file number.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-835">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="02db3-836">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-836">Required.</span>
          </span>
          <span data-ttu-id="02db3-837">Valid variable name into which data is read.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-837">Valid variable name into which data is read.</span>
          </span>
        </param>
        <param name="RecordNumber">
          <span data-ttu-id="02db3-838">Optional.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-838">Optional.</span>
          </span>
          <span data-ttu-id="02db3-839">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-839">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="02db3-840">Reads data from an open disk file into a variable.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-840">Reads data from an open disk file into a variable.</span>
          </span>
          <span data-ttu-id="02db3-841">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-841">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span>
          </span>
          <span data-ttu-id="02db3-842">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-842">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="02db3-843">`FileGet` solo es válido en `Random` y `Binary` modo.</span><span class="sxs-lookup"><span data-stu-id="02db3-843">`FileGet` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="02db3-844">Los datos leídos con `FileGet` se escriben normalmente en un archivo mediante el uso de `FilePut`.</span><span class="sxs-lookup"><span data-stu-id="02db3-844">Data read with `FileGet` is usually written to a file by using `FilePut`.</span></span>  
  
 <span data-ttu-id="02db3-845">El primer registro o byte de un archivo está en la posición 1, el segundo registro o byte en la posición 2 y así sucesivamente.</span><span class="sxs-lookup"><span data-stu-id="02db3-845">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="02db3-846">Si se omite `RecordNumber`, el siguiente registro o byte que sigue a la última `FileGet` o `FilePut` función (o apunta a la última `Seek` función) se lee.</span><span class="sxs-lookup"><span data-stu-id="02db3-846">If you omit `RecordNumber`, the next record or byte following the last `FileGet` or `FilePut` function (or pointed to by the last `Seek` function) is read.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="02db3-847">Al leer de archivos, no realice ninguna decisión sobre el contenido de un archivo basado en la extensión de nombre de archivo.</span><span class="sxs-lookup"><span data-stu-id="02db3-847">When reading from files, do not make decisions about the contents of a file based on the file name extension.</span></span> <span data-ttu-id="02db3-848">Por ejemplo, un archivo denominado Form1.vb no puede ser un archivo de código fuente de Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="02db3-848">For example, a file that is named Form1.vb may not be a Visual Basic source file.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="02db3-849">Modo aleatorio</span><span class="sxs-lookup"><span data-stu-id="02db3-849">Random Mode</span></span>  
 <span data-ttu-id="02db3-850">De los archivos abiertos en `Random` modo, se aplican las reglas siguientes:</span><span class="sxs-lookup"><span data-stu-id="02db3-850">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="02db3-851">Si la longitud de los datos que se está leyendo es menor que la longitud especificada en el `RecordLength` cláusula de la `FileOpen` función, `FileGet` leerá los registros posteriores en los límites de longitud de registro.</span><span class="sxs-lookup"><span data-stu-id="02db3-851">If the length of the data being read is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FileGet` reads subsequent records on record-length boundaries.</span></span> <span data-ttu-id="02db3-852">El espacio entre el final de un registro y el inicio del siguiente registro se rellena con el contenido existente del búfer del archivo.</span><span class="sxs-lookup"><span data-stu-id="02db3-852">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="02db3-853">Como la cantidad de datos de relleno no se puede determinar con certeza, suele ser una buena idea tener la longitud del registro coincide con la longitud de los datos que se va a leer.</span><span class="sxs-lookup"><span data-stu-id="02db3-853">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being read.</span></span>  
  
-   <span data-ttu-id="02db3-854">De forma predeterminada, si la variable que se está leyendo es una cadena, `FileGet` lee un descriptor de dos bytes que contiene la longitud de cadena y, a continuación, lee los datos que entrarán en la variable.</span><span class="sxs-lookup"><span data-stu-id="02db3-854">By default, if the variable being read into is a string, `FileGet` reads a two-byte descriptor that contains the string length and then reads the data that goes into the variable.</span></span> <span data-ttu-id="02db3-855">Por lo tanto, la longitud de registro especificada por el `RecordLength` cláusula de la `FileOpen` función debe ser mayor que la longitud real de la cadena de al menos dos bytes.</span><span class="sxs-lookup"><span data-stu-id="02db3-855">Therefore, the record length specified by the `RecordLength` clause of the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span> <span data-ttu-id="02db3-856">Visual Basic 6.0 y versiones anteriores admiten cadenas de longitud fija; Cuando se coloca en un archivo, no se escribe el descriptor de longitud.</span><span class="sxs-lookup"><span data-stu-id="02db3-856">Visual Basic 6.0 and earlier versions support fixed-length strings; when put to a file, the length descriptor is not written.</span></span> <span data-ttu-id="02db3-857">Si desea leer una cadena sin el descriptor, debería pasar `True` a la `StringIsFixedLength` parámetro y la cadena que lea debe tener la longitud correcta.</span><span class="sxs-lookup"><span data-stu-id="02db3-857">If you want to read a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="02db3-858">Si la variable que se está leyendo es una matriz, puede elegir si desea leer un descriptor para el tamaño y la dimensión de la matriz.</span><span class="sxs-lookup"><span data-stu-id="02db3-858">If the variable being read into is an array, you can choose whether to read a descriptor for the size and dimension of the array.</span></span> <span data-ttu-id="02db3-859">Para escribir el descriptor, establezca el `ArrayIsDynamic` parámetro `True`.</span><span class="sxs-lookup"><span data-stu-id="02db3-859">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="02db3-860">Al leer la matriz, se tiene que coincidir con la forma en que se escribió la matriz.</span><span class="sxs-lookup"><span data-stu-id="02db3-860">When reading the array, you have to match the way the array was written.</span></span> <span data-ttu-id="02db3-861">Si se escribió con el descriptor, debe leer el descriptor.</span><span class="sxs-lookup"><span data-stu-id="02db3-861">If it was written with the descriptor, you have to read the descriptor.</span></span> <span data-ttu-id="02db3-862">Si no se utiliza el descriptor, el tamaño y los límites de la matriz se pasan a `FileGet` determinar lo que debe leer.</span><span class="sxs-lookup"><span data-stu-id="02db3-862">If the descriptor is not used, the size and bounds of the array passed into `FileGet` determine what to read.</span></span>  
  
     <span data-ttu-id="02db3-863">El descriptor especifica el rango de la matriz, el tamaño y los límites inferiores de cada rango.</span><span class="sxs-lookup"><span data-stu-id="02db3-863">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="02db3-864">Su longitud es igual a 2 más 8 veces el número de dimensiones: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="02db3-864">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="02db3-865">La longitud de registro especificada por el `RecordLength` parámetro en el `FileOpen` función debe ser mayor o igual a la suma de todos los bytes necesarios para escribir los datos de matriz y el descriptor de matriz.</span><span class="sxs-lookup"><span data-stu-id="02db3-865">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="02db3-866">Por ejemplo, la siguiente declaración de matriz requiere 218 bytes cuando se escribe la matriz en el disco.</span><span class="sxs-lookup"><span data-stu-id="02db3-866">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#21)]  
  
     <span data-ttu-id="02db3-867">Los bytes 218 se distribuyen como sigue:</span><span class="sxs-lookup"><span data-stu-id="02db3-867">The 218 bytes are distributed as follows:</span></span>  
  
    -   <span data-ttu-id="02db3-868">18 bytes para el descriptor: (2 + 8 \* 2)</span><span class="sxs-lookup"><span data-stu-id="02db3-868">18 bytes for the descriptor: (2 + 8 \* 2)</span></span>  
  
    -   <span data-ttu-id="02db3-869">200 bytes para los datos: (10 * 5 * 4).</span><span class="sxs-lookup"><span data-stu-id="02db3-869">200 bytes for the data: (5 * 10 * 4).</span></span>  
  
-   <span data-ttu-id="02db3-870">Si la variable que se está leyendo es cualquier otro tipo de variable (no una cadena de longitud variable o un objeto), `FileGet` lee sólo los datos de la variable.</span><span class="sxs-lookup"><span data-stu-id="02db3-870">If the variable being read into is any other type of variable (not a variable-length string or an object), `FileGet` reads only the variable data.</span></span> <span data-ttu-id="02db3-871">La longitud de registro especificada por el `RecordLength` cláusula en la `FileOpen` función debe ser mayor o igual que la longitud de los datos que se va a leer.</span><span class="sxs-lookup"><span data-stu-id="02db3-871">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being read.</span></span>  
  
-   <span data-ttu-id="02db3-872">`FileGet` lee elementos de estructuras como si cada una se que se leyeron individualmente, salvo que no hay ningún relleno entre los elementos.</span><span class="sxs-lookup"><span data-stu-id="02db3-872">`FileGet` reads elements of structures as if each were being read individually, except that there is no padding between elements.</span></span> <span data-ttu-id="02db3-873">En el disco, una dinámica de matriz en un tipo definido por el usuario (escritas con `FilePut`) viene precedida por un descriptor cuya longitud es igual a 2 más 8 veces el número de dimensiones: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="02db3-873">On disk, a dynamic array in a user-defined type (written with `FilePut`) is prefixed by a descriptor whose length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="02db3-874">La longitud de registro especificada por el `RecordLength` cláusula en la `FileOpen` función debe ser mayor o igual a la suma de todos los bytes necesarios para leer los elementos individuales.</span><span class="sxs-lookup"><span data-stu-id="02db3-874">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to read the individual elements.</span></span> <span data-ttu-id="02db3-875">Esto incluye las matrices y sus descriptores.</span><span class="sxs-lookup"><span data-stu-id="02db3-875">This includes any arrays and their descriptors.</span></span> <span data-ttu-id="02db3-876">El `VBFixedString` atributo puede aplicarse a campos de cadena de las estructuras para indicar el tamaño de una cadena cuando se escribe en el disco.</span><span class="sxs-lookup"><span data-stu-id="02db3-876">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of a string when written to disk.</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="02db3-877">Modo binario</span><span class="sxs-lookup"><span data-stu-id="02db3-877">Binary Mode</span></span>  
 <span data-ttu-id="02db3-878">De los archivos abiertos en `Binary` modo, la mayoría de los `Random` se aplican las reglas de modo, con algunas excepciones.</span><span class="sxs-lookup"><span data-stu-id="02db3-878">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="02db3-879">Las siguientes reglas para los archivos abiertos en `Binary` modo difieren de las reglas para `Random` modo:</span><span class="sxs-lookup"><span data-stu-id="02db3-879">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="02db3-880">El `RecordLength` cláusula en la `FileOpen` función no tiene ningún efecto.</span><span class="sxs-lookup"><span data-stu-id="02db3-880">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="02db3-881">`FileGet` lee todas las variables del disco de forma contigua; es decir, sin relleno entre los registros.</span><span class="sxs-lookup"><span data-stu-id="02db3-881">`FileGet` reads all variables from disk contiguously; that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="02db3-882">Para cualquier matriz que no sea una matriz en una estructura, `FileGet` lee sólo los datos.</span><span class="sxs-lookup"><span data-stu-id="02db3-882">For any array other than an array in a structure, `FileGet` reads only the data.</span></span> <span data-ttu-id="02db3-883">No se lee ningún descriptor.</span><span class="sxs-lookup"><span data-stu-id="02db3-883">No descriptor is read.</span></span>  
  
-   <span data-ttu-id="02db3-884">`FileGet` lee las cadenas de longitud variable que no sean elementos de estructuras sin esperar el descriptor de longitud de dos bytes.</span><span class="sxs-lookup"><span data-stu-id="02db3-884">`FileGet` reads variable-length strings that are not elements of structures without expecting the two-byte length descriptor.</span></span> <span data-ttu-id="02db3-885">El número de bytes leídos es igual al número de caracteres de la cadena.</span><span class="sxs-lookup"><span data-stu-id="02db3-885">The number of bytes read equals the number of characters already in the string.</span></span>  
  
    > [!IMPORTANT]
    >  <span data-ttu-id="02db3-886">Leer un archivo mediante el uso de la `FileGet` función requiere `Read` acceso desde el <xref:System.Security.Permissions.FileIOPermissionAccess> enumeración.</span><span class="sxs-lookup"><span data-stu-id="02db3-886">Reading from a file by using the `FileGet` function requires `Read` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="02db3-887">
            <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-887">
              <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="02db3-888">File mode is invalid.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-888">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
      </Docs>
    </Member>
    <Member MemberName="FileGet">
      <MemberSignature Language="C#" Value="public static void FileGet (int FileNumber, ref string Value, long RecordNumber = -1, bool StringIsFixedLength = false);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileGet(int32 FileNumber, string&amp; Value, int64 RecordNumber, bool StringIsFixedLength) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.String@,System.Int64,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileGet (FileNumber As Integer, ByRef Value As String, Optional RecordNumber As Long = -1, Optional StringIsFixedLength As Boolean = false)" />
      <MemberSignature Language="F#" Value="static member FileGet : int *  * int64 * bool -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileGet (FileNumber, Value, RecordNumber, StringIsFixedLength)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.String&amp;" RefType="ref" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
        <Parameter Name="StringIsFixedLength" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="02db3-889">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-889">Required.</span>
          </span>
          <span data-ttu-id="02db3-890">Any valid file number.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-890">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="02db3-891">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-891">Required.</span>
          </span>
          <span data-ttu-id="02db3-892">Valid variable name into which data is read.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-892">Valid variable name into which data is read.</span>
          </span>
        </param>
        <param name="RecordNumber">
          <span data-ttu-id="02db3-893">Optional.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-893">Optional.</span>
          </span>
          <span data-ttu-id="02db3-894">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-894">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span>
          </span>
        </param>
        <param name="StringIsFixedLength">
          <span data-ttu-id="02db3-895">Optional.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-895">Optional.</span>
          </span>
          <span data-ttu-id="02db3-896">Applies only when writing a string.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-896">Applies only when writing a string.</span>
          </span>
          <span data-ttu-id="02db3-897">Specifies whether to write a two-byte descriptor for the string that describes the length.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-897">Specifies whether to write a two-byte descriptor for the string that describes the length.</span>
          </span>
          <span data-ttu-id="02db3-898">The default is <see langword="False" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-898">The default is <see langword="False" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="02db3-899">Reads data from an open disk file into a variable.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-899">Reads data from an open disk file into a variable.</span>
          </span>
          <span data-ttu-id="02db3-900">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-900">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span>
          </span>
          <span data-ttu-id="02db3-901">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-901">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="02db3-902">`FileGet` solo es válido en `Random` y `Binary` modo.</span><span class="sxs-lookup"><span data-stu-id="02db3-902">`FileGet` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="02db3-903">Los datos leídos con `FileGet` se escriben normalmente en un archivo mediante el uso de `FilePut`.</span><span class="sxs-lookup"><span data-stu-id="02db3-903">Data read with `FileGet` is usually written to a file by using `FilePut`.</span></span>  
  
 <span data-ttu-id="02db3-904">El primer registro o byte de un archivo está en la posición 1, el segundo registro o byte en la posición 2 y así sucesivamente.</span><span class="sxs-lookup"><span data-stu-id="02db3-904">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="02db3-905">Si se omite `RecordNumber`, el siguiente registro o byte que sigue a la última `FileGet` o `FilePut` función (o apunta a la última `Seek` función) se lee.</span><span class="sxs-lookup"><span data-stu-id="02db3-905">If you omit `RecordNumber`, the next record or byte following the last `FileGet` or `FilePut` function (or pointed to by the last `Seek` function) is read.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="02db3-906">Al leer de archivos, no realice ninguna decisión sobre el contenido de un archivo basado en la extensión de nombre de archivo.</span><span class="sxs-lookup"><span data-stu-id="02db3-906">When reading from files, do not make decisions about the contents of a file based on the file name extension.</span></span> <span data-ttu-id="02db3-907">Por ejemplo, un archivo denominado Form1.vb no puede ser un archivo de código fuente de Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="02db3-907">For example, a file that is named Form1.vb may not be a Visual Basic source file.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="02db3-908">Modo aleatorio</span><span class="sxs-lookup"><span data-stu-id="02db3-908">Random Mode</span></span>  
 <span data-ttu-id="02db3-909">De los archivos abiertos en `Random` modo, se aplican las reglas siguientes:</span><span class="sxs-lookup"><span data-stu-id="02db3-909">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="02db3-910">Si la longitud de los datos que se está leyendo es menor que la longitud especificada en el `RecordLength` cláusula de la `FileOpen` función, `FileGet` leerá los registros posteriores en los límites de longitud de registro.</span><span class="sxs-lookup"><span data-stu-id="02db3-910">If the length of the data being read is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FileGet` reads subsequent records on record-length boundaries.</span></span> <span data-ttu-id="02db3-911">El espacio entre el final de un registro y el inicio del siguiente registro se rellena con el contenido existente del búfer del archivo.</span><span class="sxs-lookup"><span data-stu-id="02db3-911">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="02db3-912">Como la cantidad de datos de relleno no se puede determinar con certeza, suele ser una buena idea tener la longitud del registro coincide con la longitud de los datos que se va a leer.</span><span class="sxs-lookup"><span data-stu-id="02db3-912">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being read.</span></span>  
  
-   <span data-ttu-id="02db3-913">De forma predeterminada, si la variable que se está leyendo es una cadena, `FileGet` lee un descriptor de dos bytes que contiene la longitud de cadena y, a continuación, lee los datos que entrarán en la variable.</span><span class="sxs-lookup"><span data-stu-id="02db3-913">By default, if the variable being read into is a string, `FileGet` reads a two-byte descriptor that contains the string length and then reads the data that goes into the variable.</span></span> <span data-ttu-id="02db3-914">Por lo tanto, la longitud de registro especificada por el `RecordLength` cláusula de la `FileOpen` función debe ser mayor que la longitud real de la cadena de al menos dos bytes.</span><span class="sxs-lookup"><span data-stu-id="02db3-914">Therefore, the record length specified by the `RecordLength` clause of the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span> <span data-ttu-id="02db3-915">Visual Basic 6.0 y versiones anteriores admiten cadenas de longitud fija; Cuando se coloca en un archivo, no se escribe el descriptor de longitud.</span><span class="sxs-lookup"><span data-stu-id="02db3-915">Visual Basic 6.0 and earlier versions support fixed-length strings; when put to a file, the length descriptor is not written.</span></span> <span data-ttu-id="02db3-916">Si desea leer una cadena sin el descriptor, debería pasar `True` a la `StringIsFixedLength` parámetro y la cadena que lea debe tener la longitud correcta.</span><span class="sxs-lookup"><span data-stu-id="02db3-916">If you want to read a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="02db3-917">Si la variable que se está leyendo es una matriz, puede elegir si desea leer un descriptor para el tamaño y la dimensión de la matriz.</span><span class="sxs-lookup"><span data-stu-id="02db3-917">If the variable being read into is an array, you can choose whether to read a descriptor for the size and dimension of the array.</span></span> <span data-ttu-id="02db3-918">Para escribir el descriptor, establezca el `ArrayIsDynamic` parámetro `True`.</span><span class="sxs-lookup"><span data-stu-id="02db3-918">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="02db3-919">Al leer la matriz, se tiene que coincidir con la forma en que se escribió la matriz.</span><span class="sxs-lookup"><span data-stu-id="02db3-919">When reading the array, you have to match the way the array was written.</span></span> <span data-ttu-id="02db3-920">Si se escribió con el descriptor, debe leer el descriptor.</span><span class="sxs-lookup"><span data-stu-id="02db3-920">If it was written with the descriptor, you have to read the descriptor.</span></span> <span data-ttu-id="02db3-921">Si no se utiliza el descriptor, el tamaño y los límites de la matriz se pasan a `FileGet` determinar lo que debe leer.</span><span class="sxs-lookup"><span data-stu-id="02db3-921">If the descriptor is not used, the size and bounds of the array passed into `FileGet` determine what to read.</span></span>  
  
     <span data-ttu-id="02db3-922">El descriptor especifica el rango de la matriz, el tamaño y los límites inferiores de cada rango.</span><span class="sxs-lookup"><span data-stu-id="02db3-922">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="02db3-923">Su longitud es igual a 2 más 8 veces el número de dimensiones: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="02db3-923">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="02db3-924">La longitud de registro especificada por el `RecordLength` parámetro en el `FileOpen` función debe ser mayor o igual a la suma de todos los bytes necesarios para escribir los datos de matriz y el descriptor de matriz.</span><span class="sxs-lookup"><span data-stu-id="02db3-924">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="02db3-925">Por ejemplo, la siguiente declaración de matriz requiere 218 bytes cuando se escribe la matriz en el disco.</span><span class="sxs-lookup"><span data-stu-id="02db3-925">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#21)]  
  
     <span data-ttu-id="02db3-926">Los bytes 218 se distribuyen como sigue:</span><span class="sxs-lookup"><span data-stu-id="02db3-926">The 218 bytes are distributed as follows:</span></span>  
  
    -   <span data-ttu-id="02db3-927">18 bytes para el descriptor: (2 + 8 \* 2)</span><span class="sxs-lookup"><span data-stu-id="02db3-927">18 bytes for the descriptor: (2 + 8 \* 2)</span></span>  
  
    -   <span data-ttu-id="02db3-928">200 bytes para los datos: (10 * 5 * 4).</span><span class="sxs-lookup"><span data-stu-id="02db3-928">200 bytes for the data: (5 * 10 * 4).</span></span>  
  
-   <span data-ttu-id="02db3-929">Si la variable que se está leyendo es cualquier otro tipo de variable (no una cadena de longitud variable o un objeto), `FileGet` lee sólo los datos de la variable.</span><span class="sxs-lookup"><span data-stu-id="02db3-929">If the variable being read into is any other type of variable (not a variable-length string or an object), `FileGet` reads only the variable data.</span></span> <span data-ttu-id="02db3-930">La longitud de registro especificada por el `RecordLength` cláusula en la `FileOpen` función debe ser mayor o igual que la longitud de los datos que se va a leer.</span><span class="sxs-lookup"><span data-stu-id="02db3-930">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being read.</span></span>  
  
-   <span data-ttu-id="02db3-931">`FileGet` lee elementos de estructuras como si cada una se que se leyeron individualmente, salvo que no hay ningún relleno entre los elementos.</span><span class="sxs-lookup"><span data-stu-id="02db3-931">`FileGet` reads elements of structures as if each were being read individually, except that there is no padding between elements.</span></span> <span data-ttu-id="02db3-932">En el disco, una dinámica de matriz en un tipo definido por el usuario (escritas con `FilePut`) viene precedida por un descriptor cuya longitud es igual a 2 más 8 veces el número de dimensiones: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="02db3-932">On disk, a dynamic array in a user-defined type (written with `FilePut`) is prefixed by a descriptor whose length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="02db3-933">La longitud de registro especificada por el `RecordLength` cláusula en la `FileOpen` función debe ser mayor o igual a la suma de todos los bytes necesarios para leer los elementos individuales.</span><span class="sxs-lookup"><span data-stu-id="02db3-933">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to read the individual elements.</span></span> <span data-ttu-id="02db3-934">Esto incluye las matrices y sus descriptores.</span><span class="sxs-lookup"><span data-stu-id="02db3-934">This includes any arrays and their descriptors.</span></span> <span data-ttu-id="02db3-935">El `VBFixedString` atributo puede aplicarse a campos de cadena de las estructuras para indicar el tamaño de una cadena cuando se escribe en el disco.</span><span class="sxs-lookup"><span data-stu-id="02db3-935">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of a string when written to disk.</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="02db3-936">Modo binario</span><span class="sxs-lookup"><span data-stu-id="02db3-936">Binary Mode</span></span>  
 <span data-ttu-id="02db3-937">De los archivos abiertos en `Binary` modo, la mayoría de los `Random` se aplican las reglas de modo, con algunas excepciones.</span><span class="sxs-lookup"><span data-stu-id="02db3-937">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="02db3-938">Las siguientes reglas para los archivos abiertos en `Binary` modo difieren de las reglas para `Random` modo:</span><span class="sxs-lookup"><span data-stu-id="02db3-938">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="02db3-939">El `RecordLength` cláusula en la `FileOpen` función no tiene ningún efecto.</span><span class="sxs-lookup"><span data-stu-id="02db3-939">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="02db3-940">`FileGet` lee todas las variables del disco de forma contigua; es decir, sin relleno entre los registros.</span><span class="sxs-lookup"><span data-stu-id="02db3-940">`FileGet` reads all variables from disk contiguously; that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="02db3-941">Para cualquier matriz que no sea una matriz en una estructura, `FileGet` lee sólo los datos.</span><span class="sxs-lookup"><span data-stu-id="02db3-941">For any array other than an array in a structure, `FileGet` reads only the data.</span></span> <span data-ttu-id="02db3-942">No se lee ningún descriptor.</span><span class="sxs-lookup"><span data-stu-id="02db3-942">No descriptor is read.</span></span>  
  
-   <span data-ttu-id="02db3-943">`FileGet` lee las cadenas de longitud variable que no sean elementos de estructuras sin esperar el descriptor de longitud de dos bytes.</span><span class="sxs-lookup"><span data-stu-id="02db3-943">`FileGet` reads variable-length strings that are not elements of structures without expecting the two-byte length descriptor.</span></span> <span data-ttu-id="02db3-944">El número de bytes leídos es igual al número de caracteres de la cadena.</span><span class="sxs-lookup"><span data-stu-id="02db3-944">The number of bytes read equals the number of characters already in the string.</span></span>  
  
    > [!IMPORTANT]
    >  <span data-ttu-id="02db3-945">Leer un archivo mediante el uso de la `FileGet` función requiere `Read` acceso desde el <xref:System.Security.Permissions.FileIOPermissionAccess> enumeración.</span><span class="sxs-lookup"><span data-stu-id="02db3-945">Reading from a file by using the `FileGet` function requires `Read` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="02db3-946">
            <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-946">
              <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="02db3-947">File mode is invalid.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-947">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
      </Docs>
    </Member>
    <Member MemberName="FileGet">
      <MemberSignature Language="C#" Value="public static void FileGet (int FileNumber, ref Array Value, long RecordNumber = -1, bool ArrayIsDynamic = false, bool StringIsFixedLength = false);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileGet(int32 FileNumber, class System.Array&amp; Value, int64 RecordNumber, bool ArrayIsDynamic, bool StringIsFixedLength) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.Array@,System.Int64,System.Boolean,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileGet (FileNumber As Integer, ByRef Value As Array, Optional RecordNumber As Long = -1, Optional ArrayIsDynamic As Boolean = false, Optional StringIsFixedLength As Boolean = false)" />
      <MemberSignature Language="F#" Value="static member FileGet : int *  * int64 * bool * bool -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileGet (FileNumber, Value, RecordNumber, ArrayIsDynamic, StringIsFixedLength)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Array&amp;" RefType="ref" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
        <Parameter Name="ArrayIsDynamic" Type="System.Boolean" />
        <Parameter Name="StringIsFixedLength" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="02db3-948">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-948">Required.</span>
          </span>
          <span data-ttu-id="02db3-949">Any valid file number.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-949">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="02db3-950">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-950">Required.</span>
          </span>
          <span data-ttu-id="02db3-951">Valid variable name into which data is read.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-951">Valid variable name into which data is read.</span>
          </span>
        </param>
        <param name="RecordNumber">
          <span data-ttu-id="02db3-952">Optional.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-952">Optional.</span>
          </span>
          <span data-ttu-id="02db3-953">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-953">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span>
          </span>
        </param>
        <param name="ArrayIsDynamic">
          <span data-ttu-id="02db3-954">Optional.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-954">Optional.</span>
          </span>
          <span data-ttu-id="02db3-955">Applies only when writing an array.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-955">Applies only when writing an array.</span>
          </span>
          <span data-ttu-id="02db3-956">Specifies whether the array is to be treated as dynamic and whether an array descriptor describing the size and bounds of the array is necessary.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-956">Specifies whether the array is to be treated as dynamic and whether an array descriptor describing the size and bounds of the array is necessary.</span>
          </span>
        </param>
        <param name="StringIsFixedLength">
          <span data-ttu-id="02db3-957">Optional.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-957">Optional.</span>
          </span>
          <span data-ttu-id="02db3-958">Applies only when writing a string.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-958">Applies only when writing a string.</span>
          </span>
          <span data-ttu-id="02db3-959">Specifies whether to write a two-byte descriptor for the string that describes the length.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-959">Specifies whether to write a two-byte descriptor for the string that describes the length.</span>
          </span>
          <span data-ttu-id="02db3-960">The default is <see langword="False" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-960">The default is <see langword="False" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="02db3-961">Reads data from an open disk file into a variable.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-961">Reads data from an open disk file into a variable.</span>
          </span>
          <span data-ttu-id="02db3-962">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-962">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span>
          </span>
          <span data-ttu-id="02db3-963">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-963">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="02db3-964">`FileGet` solo es válido en `Random` y `Binary` modo.</span><span class="sxs-lookup"><span data-stu-id="02db3-964">`FileGet` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="02db3-965">Los datos leídos con `FileGet` se escriben normalmente en un archivo mediante el uso de `FilePut`.</span><span class="sxs-lookup"><span data-stu-id="02db3-965">Data read with `FileGet` is usually written to a file by using `FilePut`.</span></span>  
  
 <span data-ttu-id="02db3-966">El primer registro o byte de un archivo está en la posición 1, el segundo registro o byte en la posición 2 y así sucesivamente.</span><span class="sxs-lookup"><span data-stu-id="02db3-966">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="02db3-967">Si se omite `RecordNumber`, el siguiente registro o byte que sigue a la última `FileGet` o `FilePut` función (o apunta a la última `Seek` función) se lee.</span><span class="sxs-lookup"><span data-stu-id="02db3-967">If you omit `RecordNumber`, the next record or byte following the last `FileGet` or `FilePut` function (or pointed to by the last `Seek` function) is read.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="02db3-968">Al leer de archivos, no realice ninguna decisión sobre el contenido de un archivo basado en la extensión de nombre de archivo.</span><span class="sxs-lookup"><span data-stu-id="02db3-968">When reading from files, do not make decisions about the contents of a file based on the file name extension.</span></span> <span data-ttu-id="02db3-969">Por ejemplo, un archivo denominado Form1.vb no puede ser un archivo de código fuente de Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="02db3-969">For example, a file that is named Form1.vb may not be a Visual Basic source file.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="02db3-970">Modo aleatorio</span><span class="sxs-lookup"><span data-stu-id="02db3-970">Random Mode</span></span>  
 <span data-ttu-id="02db3-971">De los archivos abiertos en `Random` modo, se aplican las reglas siguientes:</span><span class="sxs-lookup"><span data-stu-id="02db3-971">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="02db3-972">Si la longitud de los datos que se está leyendo es menor que la longitud especificada en el `RecordLength` cláusula de la `FileOpen` función, `FileGet` leerá los registros posteriores en los límites de longitud de registro.</span><span class="sxs-lookup"><span data-stu-id="02db3-972">If the length of the data being read is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FileGet` reads subsequent records on record-length boundaries.</span></span> <span data-ttu-id="02db3-973">El espacio entre el final de un registro y el inicio del registro siguiente se rellena con el contenido existente del búfer del archivo.</span><span class="sxs-lookup"><span data-stu-id="02db3-973">The space between the end of one record and the starting of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="02db3-974">Como la cantidad de datos de relleno no se puede determinar con certeza, suele ser una buena idea tener la longitud del registro coincide con la longitud de los datos que se va a leer.</span><span class="sxs-lookup"><span data-stu-id="02db3-974">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being read.</span></span>  
  
-   <span data-ttu-id="02db3-975">De forma predeterminada, si la variable que se está leyendo es una cadena, `FileGet` lee un descriptor de dos bytes que contiene la longitud de cadena y, a continuación, lee los datos que entrarán en la variable.</span><span class="sxs-lookup"><span data-stu-id="02db3-975">By default, if the variable being read into is a string, `FileGet` reads a two-byte descriptor that contains the string length and then reads the data that goes into the variable.</span></span> <span data-ttu-id="02db3-976">Por lo tanto, la longitud de registro especificada por el `RecordLength` cláusula de la `FileOpen` función debe ser mayor que la longitud real de la cadena de al menos dos bytes.</span><span class="sxs-lookup"><span data-stu-id="02db3-976">Therefore, the record length specified by the `RecordLength` clause of the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span> <span data-ttu-id="02db3-977">Visual Basic 6.0 y versiones anteriores admiten cadenas de longitud fija; Cuando se coloca en un archivo, no se escribe el descriptor de longitud.</span><span class="sxs-lookup"><span data-stu-id="02db3-977">Visual Basic 6.0 and earlier versions support fixed-length strings; when put to a file, the length descriptor is not written.</span></span> <span data-ttu-id="02db3-978">Si desea leer una cadena sin el descriptor, debería pasar `True` a la `StringIsFixedLength` parámetro y la cadena que lea debe tener la longitud correcta.</span><span class="sxs-lookup"><span data-stu-id="02db3-978">If you want to read a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="02db3-979">Si la variable que se está leyendo es una matriz, puede elegir si desea leer un descriptor para el tamaño y la dimensión de la matriz.</span><span class="sxs-lookup"><span data-stu-id="02db3-979">If the variable being read into is an array, you can choose whether to read a descriptor for the size and dimension of the array.</span></span> <span data-ttu-id="02db3-980">Para escribir el descriptor, establezca el `ArrayIsDynamic` parámetro `True`.</span><span class="sxs-lookup"><span data-stu-id="02db3-980">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="02db3-981">Al leer la matriz, se tiene que coincidir con la forma en que se escribió la matriz.</span><span class="sxs-lookup"><span data-stu-id="02db3-981">When reading the array, you have to match the way the array was written.</span></span> <span data-ttu-id="02db3-982">Si se escribió con el descriptor, debe leer el descriptor.</span><span class="sxs-lookup"><span data-stu-id="02db3-982">If it was written with the descriptor, you have to read the descriptor.</span></span> <span data-ttu-id="02db3-983">Si no se utiliza el descriptor, el tamaño y los límites de la matriz se pasan a `FileGet` determinar lo que debe leer.</span><span class="sxs-lookup"><span data-stu-id="02db3-983">If the descriptor is not used, the size and bounds of the array passed into `FileGet` determine what to read.</span></span>  
  
     <span data-ttu-id="02db3-984">El descriptor especifica el rango de la matriz, el tamaño y los límites inferiores de cada rango.</span><span class="sxs-lookup"><span data-stu-id="02db3-984">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="02db3-985">Su longitud es igual a 2 más 8 veces el número de dimensiones: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="02db3-985">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="02db3-986">La longitud de registro especificada por el `RecordLength` parámetro en el `FileOpen` función debe ser mayor o igual a la suma de todos los bytes necesarios para escribir los datos de matriz y el descriptor de matriz.</span><span class="sxs-lookup"><span data-stu-id="02db3-986">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="02db3-987">Por ejemplo, la siguiente declaración de matriz requiere 218 bytes cuando se escribe la matriz en el disco.</span><span class="sxs-lookup"><span data-stu-id="02db3-987">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#21)]  
  
     <span data-ttu-id="02db3-988">Los bytes 218 se distribuyen como sigue:</span><span class="sxs-lookup"><span data-stu-id="02db3-988">The 218 bytes are distributed as follows:</span></span>  
  
    -   <span data-ttu-id="02db3-989">18 bytes para el descriptor: (2 + 8 \* 2)</span><span class="sxs-lookup"><span data-stu-id="02db3-989">18 bytes for the descriptor: (2 + 8 \* 2)</span></span>  
  
    -   <span data-ttu-id="02db3-990">200 bytes para los datos: (10 * 5 * 4).</span><span class="sxs-lookup"><span data-stu-id="02db3-990">200 bytes for the data: (5 * 10 * 4).</span></span>  
  
-   <span data-ttu-id="02db3-991">Si la variable que se está leyendo es cualquier otro tipo de variable (no una cadena de longitud variable o un objeto), `FileGet` lee sólo los datos de la variable.</span><span class="sxs-lookup"><span data-stu-id="02db3-991">If the variable being read into is any other type of variable (not a variable-length string or an object), `FileGet` reads only the variable data.</span></span> <span data-ttu-id="02db3-992">La longitud de registro especificada por el `RecordLength` cláusula en la `FileOpen` función debe ser mayor o igual que la longitud de los datos que se va a leer.</span><span class="sxs-lookup"><span data-stu-id="02db3-992">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being read.</span></span>  
  
-   <span data-ttu-id="02db3-993">`FileGet` lee elementos de estructuras como si cada una se que se leyeron individualmente, salvo que no hay ningún relleno entre los elementos.</span><span class="sxs-lookup"><span data-stu-id="02db3-993">`FileGet` reads elements of structures as if each were being read individually, except that there is no padding between elements.</span></span> <span data-ttu-id="02db3-994">En el disco, una dinámica de matriz en un tipo definido por el usuario (escritas con `FilePut`) viene precedida por un descriptor cuya longitud es igual a 2 más 8 veces el número de dimensiones: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="02db3-994">On disk, a dynamic array in a user-defined type (written with `FilePut`) is prefixed by a descriptor whose length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="02db3-995">La longitud de registro especificada por el `RecordLength` cláusula en la `FileOpen` función debe ser mayor o igual a la suma de todos los bytes necesarios para leer los elementos individuales.</span><span class="sxs-lookup"><span data-stu-id="02db3-995">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to read the individual elements.</span></span> <span data-ttu-id="02db3-996">Esto incluye las matrices y sus descriptores.</span><span class="sxs-lookup"><span data-stu-id="02db3-996">This includes any arrays and their descriptors.</span></span> <span data-ttu-id="02db3-997">El `VBFixedString` atributo puede aplicarse a campos de cadena de las estructuras para indicar el tamaño de una cadena cuando se escribe en el disco.</span><span class="sxs-lookup"><span data-stu-id="02db3-997">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of a string when written to disk.</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="02db3-998">Modo binario</span><span class="sxs-lookup"><span data-stu-id="02db3-998">Binary Mode</span></span>  
 <span data-ttu-id="02db3-999">De los archivos abiertos en `Binary` modo, la mayoría de los `Random` se aplican las reglas de modo, con algunas excepciones.</span><span class="sxs-lookup"><span data-stu-id="02db3-999">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="02db3-1000">Las siguientes reglas para los archivos abiertos en `Binary` modo difieren de las reglas para `Random` modo:</span><span class="sxs-lookup"><span data-stu-id="02db3-1000">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="02db3-1001">El `RecordLength` cláusula en la `FileOpen` función no tiene ningún efecto.</span><span class="sxs-lookup"><span data-stu-id="02db3-1001">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="02db3-1002">`FileGet` lee todas las variables del disco de forma contigua; es decir, sin relleno entre los registros.</span><span class="sxs-lookup"><span data-stu-id="02db3-1002">`FileGet` reads all variables from disk contiguously; that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="02db3-1003">Para cualquier matriz que no sea una matriz en una estructura, `FileGet` lee sólo los datos.</span><span class="sxs-lookup"><span data-stu-id="02db3-1003">For any array other than an array in a structure, `FileGet` reads only the data.</span></span> <span data-ttu-id="02db3-1004">No se lee ningún descriptor.</span><span class="sxs-lookup"><span data-stu-id="02db3-1004">No descriptor is read.</span></span>  
  
-   <span data-ttu-id="02db3-1005">`FileGet` lee las cadenas de longitud variable que no sean elementos de estructuras sin esperar el descriptor de longitud de dos bytes.</span><span class="sxs-lookup"><span data-stu-id="02db3-1005">`FileGet` reads variable-length strings that are not elements of structures without expecting the two-byte length descriptor.</span></span> <span data-ttu-id="02db3-1006">El número de bytes leídos es igual al número de caracteres de la cadena.</span><span class="sxs-lookup"><span data-stu-id="02db3-1006">The number of bytes read equals the number of characters already in the string.</span></span>  
  
    > [!IMPORTANT]
    >  <span data-ttu-id="02db3-1007">Leer un archivo mediante el uso de la `FileGet` función requiere `Read` acceso desde el <xref:System.Security.Permissions.FileIOPermissionAccess> enumeración.</span><span class="sxs-lookup"><span data-stu-id="02db3-1007">Reading from a file by using the `FileGet` function requires `Read` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="02db3-1008">
            <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-1008">
              <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="02db3-1009">File mode is invalid.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-1009">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
      </Docs>
    </Member>
    <Member MemberName="FileGetObject">
      <MemberSignature Language="C#" Value="public static void FileGetObject (int FileNumber, ref object Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileGetObject(int32 FileNumber, object&amp; Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileGetObject (FileNumber As Integer, ByRef Value As Object, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FileGetObject : int *  * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileGetObject (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Object&amp;" RefType="ref" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="02db3-1010">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-1010">Required.</span>
          </span>
          <span data-ttu-id="02db3-1011">Any valid file number.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-1011">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="02db3-1012">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-1012">Required.</span>
          </span>
          <span data-ttu-id="02db3-1013">Valid variable name into which data is read.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-1013">Valid variable name into which data is read.</span>
          </span>
        </param>
        <param name="RecordNumber">
          <span data-ttu-id="02db3-1014">Optional.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-1014">Optional.</span>
          </span>
          <span data-ttu-id="02db3-1015">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-1015">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="02db3-1016">Reads data from an open disk file into a variable.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-1016">Reads data from an open disk file into a variable.</span>
          </span>
          <span data-ttu-id="02db3-1017">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGetObject" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-1017">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGetObject" />.</span>
          </span>
          <span data-ttu-id="02db3-1018">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-1018">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="02db3-1019">El `FileGetObject` función se utiliza en lugar de `FileGet` para evitar ambigüedades en tiempo de compilación si tipo `Object` se devuelve en lugar de otro tipo, como `Integer`, `Long`, `Short`, y así sucesivamente.</span><span class="sxs-lookup"><span data-stu-id="02db3-1019">The `FileGetObject` function is used instead of `FileGet` to avoid ambiguities at compile time if type `Object` is returned instead of another type, such as `Integer`, `Long`, `Short`, and so forth.</span></span>  
  
 <span data-ttu-id="02db3-1020">Si va a escribir el `Variant` tipo, `FileGetObject` es necesario.</span><span class="sxs-lookup"><span data-stu-id="02db3-1020">If you intend to write out the `Variant` type, `FileGetObject` is required.</span></span> <span data-ttu-id="02db3-1021">En caso de duda, si está utilizando un objeto para el segundo parámetro, se recomienda siempre que utilice `FilePutObject` y `FileGetObject`.</span><span class="sxs-lookup"><span data-stu-id="02db3-1021">When in doubt, if you are using an object for the second parameter, it is always suggested that you use `FilePutObject` and `FileGetObject`.</span></span>  
  
 <span data-ttu-id="02db3-1022">`FileGetObject` solo es válido en `Random` y `Binary` modo.</span><span class="sxs-lookup"><span data-stu-id="02db3-1022">`FileGetObject` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="02db3-1023">Los datos leídos con `FileGetObject` normalmente se escriben con `FilePutObject`.</span><span class="sxs-lookup"><span data-stu-id="02db3-1023">Data read with `FileGetObject` is usually written with `FilePutObject`.</span></span>  
  
 <span data-ttu-id="02db3-1024">El primer registro o byte de un archivo está en la posición 1, el segundo registro o byte en la posición 2 y así sucesivamente.</span><span class="sxs-lookup"><span data-stu-id="02db3-1024">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="02db3-1025">Si se omite `RecordNumber`, `FileGetObject` lee el registro o byte después del último `FileGetObject` o `FilePutObject` función (o apunta a la última `Seek` función).</span><span class="sxs-lookup"><span data-stu-id="02db3-1025">If you omit `RecordNumber`, `FileGetObject` reads the record or byte after the last `FileGetObject` or `FilePutObject` function (or pointed to by the last `Seek` function).</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="02db3-1026">Modo aleatorio</span><span class="sxs-lookup"><span data-stu-id="02db3-1026">Random Mode</span></span>  
 <span data-ttu-id="02db3-1027">De los archivos abiertos en `Random` modo, se aplican las reglas siguientes:</span><span class="sxs-lookup"><span data-stu-id="02db3-1027">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="02db3-1028">Si la longitud de los datos que se está leyendo es menor que la longitud especificada en el `RecordLength` cláusula de la `FileOpen` función, `FileGetObject` leerá los registros posteriores en los límites de longitud de registro.</span><span class="sxs-lookup"><span data-stu-id="02db3-1028">If the length of the data being read is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FileGetObject` reads subsequent records on record-length boundaries.</span></span> <span data-ttu-id="02db3-1029">El espacio entre el final de un registro y el principio del siguiente registro se rellena con el contenido existente del búfer del archivo.</span><span class="sxs-lookup"><span data-stu-id="02db3-1029">The space between the end of one record and the beginning of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="02db3-1030">Dado que no se puede determinar con exactitud la cantidad de datos de relleno, es una buena idea tener la longitud del registro coincide con la longitud de los datos que se va a leer.</span><span class="sxs-lookup"><span data-stu-id="02db3-1030">Because the amount of padding data cannot be precisely determined, it is a good idea to have the record length match the length of the data being read.</span></span>  
  
-   <span data-ttu-id="02db3-1031">Si la variable que se está leyendo es una cadena, de forma predeterminada `FileGetObject` lee un descriptor de dos bytes que contiene la longitud de cadena y, a continuación, lee los datos que entrarán en la variable.</span><span class="sxs-lookup"><span data-stu-id="02db3-1031">If the variable being read into is a string, by default `FileGetObject` reads a two-byte descriptor containing the string length and then reads the data that goes into the variable.</span></span> <span data-ttu-id="02db3-1032">Por lo tanto, la longitud de registro especificada por el `RecordLength` cláusula de la `FileOpen` función debe ser mayor que la longitud real de la cadena de al menos dos bytes.</span><span class="sxs-lookup"><span data-stu-id="02db3-1032">Therefore, the record length specified by the `RecordLength` clause of the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span> <span data-ttu-id="02db3-1033">Visual Basic 6.0 y versiones anteriores admiten cadenas de longitud fija y cuando se leen en un archivo, el descriptor de longitud no se escribe.</span><span class="sxs-lookup"><span data-stu-id="02db3-1033">Visual Basic 6.0 and earlier versions support fixed-length strings and when read to a file, the length descriptor is not written.</span></span> <span data-ttu-id="02db3-1034">Si desea leer una cadena sin el descriptor, debería pasar `True` a la `StringIsFixedLength` parámetro y la cadena que lea debe tener la longitud correcta.</span><span class="sxs-lookup"><span data-stu-id="02db3-1034">If you want to read a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="02db3-1035">Si la variable que se va a leer en es una matriz y, a continuación, la longitud de registro especificado por el `RecordLength` parámetro en el `FileOpen` función debe ser mayor o igual a la suma de todos los bytes necesarios para escribir los datos de matriz y el descriptor de matriz.</span><span class="sxs-lookup"><span data-stu-id="02db3-1035">If the variable being read into is an array, then the record length specified by the `RecordLength` parameter in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="02db3-1036">El descriptor especifica el rango de la matriz, el tamaño y los límites inferiores de cada rango.</span><span class="sxs-lookup"><span data-stu-id="02db3-1036">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="02db3-1037">Su longitud es igual a 2 más 8 veces el número de dimensiones: 2 + 8 \* NumberOfDimensions.</span><span class="sxs-lookup"><span data-stu-id="02db3-1037">Its length equals 2 plus 8 times the number of dimensions: 2 + 8 \* NumberOfDimensions.</span></span>  
  
     <span data-ttu-id="02db3-1038">Por ejemplo, la siguiente declaración de matriz requiere 218 bytes cuando se escribe la matriz en el disco:</span><span class="sxs-lookup"><span data-stu-id="02db3-1038">For example, the following array declaration requires 218 bytes when the array is written to disk:</span></span>  
  
     [!code-vb[VbVbalrCatRef#27](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#27)]  
  
     <span data-ttu-id="02db3-1039">Los bytes 218 se distribuyen como sigue: 18 bytes para el descriptor (2 + 8 \* 2) y 100 bytes para los datos (5 \* 10 \* 4).</span><span class="sxs-lookup"><span data-stu-id="02db3-1039">The 218 bytes are distributed as follows: 18 bytes for the descriptor (2 + 8 \* 2), and 100 bytes for the data (5 \* 10 \* 4).</span></span>  
  
-   <span data-ttu-id="02db3-1040">`FileGetObject` lee elementos de estructuras como si cada una se que se leyeron individualmente, salvo que no hay ningún relleno entre los elementos.</span><span class="sxs-lookup"><span data-stu-id="02db3-1040">`FileGetObject` reads elements of structures as if each were being read individually, except that there is no padding between elements.</span></span> <span data-ttu-id="02db3-1041">En el disco, una dinámica de matriz en un tipo definido por el usuario (escritas con `FilePutObject`) viene precedida por un descriptor cuya longitud es igual a 2 más 8 veces el número de dimensiones: 2 + 8 \* NumberOfDimensions.</span><span class="sxs-lookup"><span data-stu-id="02db3-1041">On disk, a dynamic array in a user-defined type (written with `FilePutObject`) is prefixed by a descriptor whose length equals 2 plus 8 times the number of dimensions: 2 + 8 \* NumberOfDimensions.</span></span> <span data-ttu-id="02db3-1042">La longitud de registro especificada por el `RecordLength` cláusula en la `FileOpen` función debe ser mayor o igual a la suma de todos los bytes necesarios para leer los elementos individuales, incluidas las matrices y sus descriptores.</span><span class="sxs-lookup"><span data-stu-id="02db3-1042">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to read the individual elements, including any arrays and their descriptors.</span></span> <span data-ttu-id="02db3-1043">La <xref:Microsoft.VisualBasic.VBFixedStringAttribute> clase puede aplicarse a campos de cadena de las estructuras para indicar el tamaño de la cadena cuando se escribe en el disco.</span><span class="sxs-lookup"><span data-stu-id="02db3-1043">The <xref:Microsoft.VisualBasic.VBFixedStringAttribute> class can be applied to string fields in the structures to indicate the size of string when written to disk.</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="02db3-1044">Modo binario</span><span class="sxs-lookup"><span data-stu-id="02db3-1044">Binary Mode</span></span>  
 <span data-ttu-id="02db3-1045">De los archivos abiertos en `Binary` modo, todos los `Random` reglas se aplican, con las siguientes excepciones:</span><span class="sxs-lookup"><span data-stu-id="02db3-1045">For files opened in `Binary` mode, all of the `Random` rules apply, with these exceptions:</span></span>  
  
-   <span data-ttu-id="02db3-1046">El `RecordLength` cláusula en la `FileOpen` función no tiene ningún efecto.</span><span class="sxs-lookup"><span data-stu-id="02db3-1046">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="02db3-1047">`FileGetObject` lee todas las variables desde el disco de forma contigua, es decir, sin relleno entre los registros.</span><span class="sxs-lookup"><span data-stu-id="02db3-1047">`FileGetObject` reads all variables from disk contiguously, that is, with no padding between records.</span></span>  
  
-   <span data-ttu-id="02db3-1048">Para cualquier matriz que no sea una matriz en una estructura, `FileGetObject` lee sólo los datos.</span><span class="sxs-lookup"><span data-stu-id="02db3-1048">For any array other than an array in a structure, `FileGetObject` reads only the data.</span></span> <span data-ttu-id="02db3-1049">No se lee ningún descriptor.</span><span class="sxs-lookup"><span data-stu-id="02db3-1049">No descriptor is read.</span></span>  
  
 <span data-ttu-id="02db3-1050">`FileGetObject` lee las cadenas de longitud variable que no sean elementos de estructuras sin esperar el descriptor de longitud de dos bytes.</span><span class="sxs-lookup"><span data-stu-id="02db3-1050">`FileGetObject` reads variable-length strings that are not elements of structures without expecting the two-byte length descriptor.</span></span> <span data-ttu-id="02db3-1051">El número de bytes leídos es igual al número de caracteres de la cadena.</span><span class="sxs-lookup"><span data-stu-id="02db3-1051">The number of bytes read equals the number of characters already in the string.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="02db3-1052">Al leer de archivos, no realice ninguna decisión sobre el contenido de un archivo basado en la extensión de nombre de archivo.</span><span class="sxs-lookup"><span data-stu-id="02db3-1052">When reading from files, do not make decisions about the contents of a file based on the file name extension.</span></span> <span data-ttu-id="02db3-1053">Por ejemplo, un archivo denominado Form1.vb no puede ser un archivo de código fuente de Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="02db3-1053">For example, a file named Form1.vb may not be a Visual Basic source file.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="02db3-1054">El ejemplo siguiente lee un registro en un archivo de prueba y, a continuación, lo recupera.</span><span class="sxs-lookup"><span data-stu-id="02db3-1054">The following example reads a record into a test file and then retrieves it.</span></span>  
  
 [!code-vb[VbVbalrCatRef#26](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#26)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
      </Docs>
    </Member>
    <Member MemberName="FileLen">
      <MemberSignature Language="C#" Value="public static long FileLen (string PathName);" />
      <MemberSignature Language="ILAsm" Value=".method public static int64 FileLen(string PathName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileLen(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function FileLen (PathName As String) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static long FileLen(System::String ^ PathName);" />
      <MemberSignature Language="F#" Value="static member FileLen : string -&gt; int64" Usage="Microsoft.VisualBasic.FileSystem.FileLen PathName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="PathName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="PathName">
          <span data-ttu-id="02db3-1055">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-1055">Required.</span>
          </span>
          <span data-ttu-id="02db3-1056">
            <see langword="String" /> expression that specifies a file.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-1056">
              <see langword="String" /> expression that specifies a file.</span>
          </span>
          <span data-ttu-id="02db3-1057">
            <c>PathName</c> may include the directory or folder, and the drive.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-1057">
              <c>PathName</c> may include the directory or folder, and the drive.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="02db3-1058">Returns a <see langword="Long" /> value that specifies the length of a file in bytes.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-1058">Returns a <see langword="Long" /> value that specifies the length of a file in bytes.</span>
          </span>
          <span data-ttu-id="02db3-1059">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileLen" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-1059">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileLen" />.</span>
          </span>
          <span data-ttu-id="02db3-1060">For more information, see <see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.GetFileInfo(System.String)" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-1060">For more information, see <see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.GetFileInfo(System.String)" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="02db3-1061">
            <see langword="Long" /> value that specifies the length of a file in bytes.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-1061">
              <see langword="Long" /> value that specifies the length of a file in bytes.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="02db3-1062">Si el archivo especificado está abierto cuando el `FileLen` se llama a la función, el valor devuelto representa el tamaño del archivo en el momento en que se abrió.</span><span class="sxs-lookup"><span data-stu-id="02db3-1062">If the specified file is open when the `FileLen` function is called, the value returned represents the size of the file at the time it was opened.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="02db3-1063">Para obtener la longitud actual de un archivo abierto, use el `LOF` función.</span><span class="sxs-lookup"><span data-stu-id="02db3-1063">To obtain the current length of an open file, use the `LOF` function.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="02db3-1064">Este ejemplo se usa el `FileLen` función para devolver la longitud de un archivo en bytes.</span><span class="sxs-lookup"><span data-stu-id="02db3-1064">This example uses the `FileLen` function to return the length of a file in bytes.</span></span> <span data-ttu-id="02db3-1065">Para fines de este ejemplo, suponga que `TestFile` es un archivo que contiene algunos datos.</span><span class="sxs-lookup"><span data-stu-id="02db3-1065">For purposes of this example, assume that `TestFile` is a file that contains some data.</span></span>  
  
 [!code-vb[VbVbalrCatRef#1](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.FileNotFoundException">
          <span data-ttu-id="02db3-1066">File does not exist.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-1066">File does not exist.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileDateTime(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.GetAttr(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.LOF(System.Int32)" />
        <altmember cref="T:System.IO.FileNotFoundException" />
      </Docs>
    </Member>
    <Member MemberName="FileOpen">
      <MemberSignature Language="C#" Value="public static void FileOpen (int FileNumber, string FileName, Microsoft.VisualBasic.OpenMode Mode, Microsoft.VisualBasic.OpenAccess Access = Microsoft.VisualBasic.OpenAccess.Default, Microsoft.VisualBasic.OpenShare Share = Microsoft.VisualBasic.OpenShare.Default, int RecordLength = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileOpen(int32 FileNumber, string FileName, valuetype Microsoft.VisualBasic.OpenMode Mode, valuetype Microsoft.VisualBasic.OpenAccess Access, valuetype Microsoft.VisualBasic.OpenShare Share, int32 RecordLength) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileOpen (FileNumber As Integer, FileName As String, Mode As OpenMode, Optional Access As OpenAccess = Microsoft.VisualBasic.OpenAccess.Default, Optional Share As OpenShare = Microsoft.VisualBasic.OpenShare.Default, Optional RecordLength As Integer = -1)" />
      <MemberSignature Language="F#" Value="static member FileOpen : int * string * Microsoft.VisualBasic.OpenMode * Microsoft.VisualBasic.OpenAccess * Microsoft.VisualBasic.OpenShare * int -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileOpen (FileNumber, FileName, Mode, Access, Share, RecordLength)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="FileName" Type="System.String" />
        <Parameter Name="Mode" Type="Microsoft.VisualBasic.OpenMode" />
        <Parameter Name="Access" Type="Microsoft.VisualBasic.OpenAccess" />
        <Parameter Name="Share" Type="Microsoft.VisualBasic.OpenShare" />
        <Parameter Name="RecordLength" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="02db3-1067">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-1067">Required.</span>
          </span>
          <span data-ttu-id="02db3-1068">Any valid file number.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-1068">Any valid file number.</span>
          </span>
          <span data-ttu-id="02db3-1069">Use the <see langword="FreeFile" /> function to obtain the next available file number.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-1069">Use the <see langword="FreeFile" /> function to obtain the next available file number.</span>
          </span>
        </param>
        <param name="FileName">
          <span data-ttu-id="02db3-1070">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-1070">Required.</span>
          </span>
          <span data-ttu-id="02db3-1071">
            <see langword="String" /> expression that specifies a file name—may include directory or folder, and drive.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-1071">
              <see langword="String" /> expression that specifies a file name—may include directory or folder, and drive.</span>
          </span>
        </param>
        <param name="Mode">
          <span data-ttu-id="02db3-1072">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-1072">Required.</span>
          </span>
          <span data-ttu-id="02db3-1073">Enumeration specifying the file mode: <see langword="Append" />, <see langword="Binary" />, <see langword="Input" />, <see langword="Output" />, or <see langword="Random" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-1073">Enumeration specifying the file mode: <see langword="Append" />, <see langword="Binary" />, <see langword="Input" />, <see langword="Output" />, or <see langword="Random" />.</span>
          </span>
          <span data-ttu-id="02db3-1074">For more information, see <see cref="T:Microsoft.VisualBasic.OpenMode" /> .</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-1074">For more information, see <see cref="T:Microsoft.VisualBasic.OpenMode" /> .</span>
          </span>
        </param>
        <param name="Access">
          <span data-ttu-id="02db3-1075">Optional.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-1075">Optional.</span>
          </span>
          <span data-ttu-id="02db3-1076">Enumeration specifying the operations permitted on the open file: <see langword="Read" />, <see langword="Write" />, or <see langword="ReadWrite" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-1076">Enumeration specifying the operations permitted on the open file: <see langword="Read" />, <see langword="Write" />, or <see langword="ReadWrite" />.</span>
          </span>
          <span data-ttu-id="02db3-1077">Defaults to <see langword="ReadWrite" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-1077">Defaults to <see langword="ReadWrite" />.</span>
          </span>
          <span data-ttu-id="02db3-1078">For more information, see <see cref="T:Microsoft.VisualBasic.OpenAccess" /> .</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-1078">For more information, see <see cref="T:Microsoft.VisualBasic.OpenAccess" /> .</span>
          </span>
        </param>
        <param name="Share">
          <span data-ttu-id="02db3-1079">Optional.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-1079">Optional.</span>
          </span>
          <span data-ttu-id="02db3-1080">Enumeration specifying the operations not permitted on the open file by other processes: <see langword="Shared" />, <see langword="Lock Read" />, <see langword="Lock Write" />, and <see langword="Lock Read Write" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-1080">Enumeration specifying the operations not permitted on the open file by other processes: <see langword="Shared" />, <see langword="Lock Read" />, <see langword="Lock Write" />, and <see langword="Lock Read Write" />.</span>
          </span>
          <span data-ttu-id="02db3-1081">Defaults to <see langword="Lock Read Write" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-1081">Defaults to <see langword="Lock Read Write" />.</span>
          </span>
          <span data-ttu-id="02db3-1082">For more information, see <see cref="T:Microsoft.VisualBasic.OpenShare" /> .</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-1082">For more information, see <see cref="T:Microsoft.VisualBasic.OpenShare" /> .</span>
          </span>
        </param>
        <param name="RecordLength">
          <span data-ttu-id="02db3-1083">Optional.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-1083">Optional.</span>
          </span>
          <span data-ttu-id="02db3-1084">Number less than or equal to 32,767 (bytes).</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-1084">Number less than or equal to 32,767 (bytes).</span>
          </span>
          <span data-ttu-id="02db3-1085">For files opened for random access, this value is the record length.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-1085">For files opened for random access, this value is the record length.</span>
          </span>
          <span data-ttu-id="02db3-1086">For sequential files, this value is the number of characters buffered.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-1086">For sequential files, this value is the number of characters buffered.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="02db3-1087">Opens a file for input or output.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-1087">Opens a file for input or output.</span>
          </span>
          <span data-ttu-id="02db3-1088">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileOpen" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-1088">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileOpen" />.</span>
          </span>
          <span data-ttu-id="02db3-1089">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-1089">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="02db3-1090">El `FileOpen` función se proporciona por compatibilidad con versiones anteriores y puede afectar al rendimiento.</span><span class="sxs-lookup"><span data-stu-id="02db3-1090">The `FileOpen` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="02db3-1091">Para las aplicaciones que no es heredado, el `My.Computer.FileSystem` objeto proporciona un mejor rendimiento.</span><span class="sxs-lookup"><span data-stu-id="02db3-1091">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="02db3-1092">Para obtener más información, consulte [acceso a archivos con Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span><span class="sxs-lookup"><span data-stu-id="02db3-1092">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="02db3-1093">Debe abrir un archivo antes de poder realizar cualquier operación de E/S en él.</span><span class="sxs-lookup"><span data-stu-id="02db3-1093">You must open a file before any I/O operation can be performed on it.</span></span> <span data-ttu-id="02db3-1094">`FileOpen` asigna un búfer de E/S al archivo y determina el modo de acceso para usar con el búfer.</span><span class="sxs-lookup"><span data-stu-id="02db3-1094">`FileOpen` allocates a buffer for I/O to the file and determines the mode of access to use with the buffer.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="02db3-1095">Al escribir en un archivo, puede tener una aplicación crear un archivo, si no existe el archivo al que está intentando escribir.</span><span class="sxs-lookup"><span data-stu-id="02db3-1095">When writing to a file, an application may have to create a file, if the file to which it is trying to write does not exist.</span></span> <span data-ttu-id="02db3-1096">Para ello, necesita permiso para el directorio en el que se creará el archivo.</span><span class="sxs-lookup"><span data-stu-id="02db3-1096">To do so, it needs permission for the directory in which the file is to be created.</span></span> <span data-ttu-id="02db3-1097">Sin embargo, si el archivo especificado por `FileName` existe, la aplicación necesita `Write` permiso solo para el propio archivo.</span><span class="sxs-lookup"><span data-stu-id="02db3-1097">However, if the file specified by `FileName` does exist, the application needs `Write` permission only to the file itself.</span></span> <span data-ttu-id="02db3-1098">Siempre que sea posible, para ayudar a mejorar la seguridad, crear el archivo durante la implementación y conceder `Write` permiso a dicho archivo únicamente, en lugar de a todo el directorio.</span><span class="sxs-lookup"><span data-stu-id="02db3-1098">Wherever possible, to help improve security, create the file during deployment and grant `Write` permission to that file only, instead of to the whole directory.</span></span> <span data-ttu-id="02db3-1099">Para ayudar a mejorar la seguridad, escribir datos en los directorios de usuario en lugar de en el directorio raíz o el directorio de archivos de programa.</span><span class="sxs-lookup"><span data-stu-id="02db3-1099">To help improve security, write data to user directories instead of to the root directory or the Program Files directory.</span></span>  
  
 <span data-ttu-id="02db3-1100">Puede encontrar el canal para abrir mediante el `FreeFile()` función.</span><span class="sxs-lookup"><span data-stu-id="02db3-1100">The channel to open can be found by using the `FreeFile()` function.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="02db3-1101">El `FileOpen` función requiere `Read` acceso desde el `FileIOPermissionAccess` enumeración, que puede afectar a su ejecución en situaciones de confianza parcial.</span><span class="sxs-lookup"><span data-stu-id="02db3-1101">The `FileOpen` function requires `Read` access from the `FileIOPermissionAccess` enumeration, which may affect its execution in partial trust situations.</span></span> <span data-ttu-id="02db3-1102">Para obtener más información, consulte <xref:System.Security.Permissions.FileIOPermissionAccess> enumeración.</span><span class="sxs-lookup"><span data-stu-id="02db3-1102">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="02db3-1103">En este ejemplo se muestra varios usos de la `FileOpen` función para habilitar la entrada y salida a un archivo.</span><span class="sxs-lookup"><span data-stu-id="02db3-1103">This example illustrates various uses of the `FileOpen` function to enable input and output to a file.</span></span>  
  
 <span data-ttu-id="02db3-1104">El código siguiente abre el archivo `TestFile` en `Input` modo.</span><span class="sxs-lookup"><span data-stu-id="02db3-1104">The following code opens the file `TestFile` in `Input` mode.</span></span>  
  
 [!code-vb[VbVbalrCatRef#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#5)]  
  
 <span data-ttu-id="02db3-1105">Este ejemplo abre el archivo en `Binary` modo para solo operaciones de escritura.</span><span class="sxs-lookup"><span data-stu-id="02db3-1105">This example opens the file in `Binary` mode for writing operations only.</span></span>  
  
 [!code-vb[VbVbalrCatRef#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#6)]  
  
 <span data-ttu-id="02db3-1106">El ejemplo siguiente abre el archivo en `Random` modo.</span><span class="sxs-lookup"><span data-stu-id="02db3-1106">The following example opens the file in `Random` mode.</span></span> <span data-ttu-id="02db3-1107">El archivo contiene registros de la estructura `Person`.</span><span class="sxs-lookup"><span data-stu-id="02db3-1107">The file contains records of the structure `Person`.</span></span>  
  
 [!code-vb[VbVbalrCatRef#7](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#7)]  
  
 <span data-ttu-id="02db3-1108">Este ejemplo de código abre el archivo en `Output` modo; cualquier proceso puede leer o escribir en el archivo.</span><span class="sxs-lookup"><span data-stu-id="02db3-1108">This code example opens the file in `Output` mode; any process can read or write to file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#8](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#8)]  
  
 <span data-ttu-id="02db3-1109">Este ejemplo de código abre el archivo en `Binary` modo para lectura; otros procesos no pueden leer el archivo.</span><span class="sxs-lookup"><span data-stu-id="02db3-1109">This code example opens the file in `Binary` mode for reading; other processes cannot read file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#9](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#9)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="02db3-1110">Record length is negative (and not equal to -1).</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-1110">Record length is negative (and not equal to -1).</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="02db3-1111">
            <paramref name="FileName" /> is already open, or <paramref name="FileName" /> is invalid.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-1111">
              <paramref name="FileName" /> is already open, or <paramref name="FileName" /> is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileClose(System.Int32[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FreeFile" />
      </Docs>
    </Member>
    <MemberGroup MemberName="FilePut">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="02db3-1112">Writes data from a variable to a disk file.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-1112">Writes data from a variable to a disk file.</span>
          </span>
          <span data-ttu-id="02db3-1113">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-1113">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span>
          </span>
          <span data-ttu-id="02db3-1114">F For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-1114">F For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="FilePut">
      <MemberSignature Language="C#" Value="public static void FilePut (int FileNumber, bool Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FilePut(int32 FileNumber, bool Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.Boolean,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FilePut (FileNumber As Integer, Value As Boolean, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FilePut : int * bool * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FilePut (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Boolean" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="02db3-1115">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-1115">Required.</span>
          </span>
          <span data-ttu-id="02db3-1116">Any valid file number.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-1116">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="02db3-1117">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-1117">Required.</span>
          </span>
          <span data-ttu-id="02db3-1118">Valid variable name that contains data written to disk.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-1118">Valid variable name that contains data written to disk.</span>
          </span>
        </param>
        <param name="RecordNumber">
          <span data-ttu-id="02db3-1119">Optional.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-1119">Optional.</span>
          </span>
          <span data-ttu-id="02db3-1120">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-1120">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="02db3-1121">Writes data from a variable to a disk file.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-1121">Writes data from a variable to a disk file.</span>
          </span>
          <span data-ttu-id="02db3-1122">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-1122">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span>
          </span>
          <span data-ttu-id="02db3-1123">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-1123">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="02db3-1124">`FilePut` solo es válido en `Random` y `Binary` modo.</span><span class="sxs-lookup"><span data-stu-id="02db3-1124">`FilePut` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="02db3-1125">Los datos escritos con `FilePut` normalmente se leen desde un archivo mediante `FileGet`.</span><span class="sxs-lookup"><span data-stu-id="02db3-1125">Data written with `FilePut` is usually read from a file by using `FileGet`.</span></span>  
  
 <span data-ttu-id="02db3-1126">El primer registro o byte de un archivo está en la posición 1, el segundo registro o byte en la posición 2 y así sucesivamente.</span><span class="sxs-lookup"><span data-stu-id="02db3-1126">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="02db3-1127">Si se omite `RecordNumber`, el siguiente registro o byte después del último `FileGet` o `FilePut` función o apunta a la última `Seek` se escribe la función.</span><span class="sxs-lookup"><span data-stu-id="02db3-1127">If you omit `RecordNumber`, the next record or byte after the last `FileGet` or `FilePut` function or pointed to by the last `Seek` function is written.</span></span>  
  
 <span data-ttu-id="02db3-1128">El `StringIsFixedLength` argumento controla si la función interpreta las cadenas como longitud fija o variable.</span><span class="sxs-lookup"><span data-stu-id="02db3-1128">The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length.</span></span> <span data-ttu-id="02db3-1129">`FilePut` no escribe el descriptor de longitud cuando el argumento es `True`.</span><span class="sxs-lookup"><span data-stu-id="02db3-1129">`FilePut` does not write the length descriptor when the argument is `True`.</span></span> <span data-ttu-id="02db3-1130">Si usas `StringIsFixedLength`  =  `True` con `FilePut`, tendrá que hacer lo mismo con `FileGet`, y tiene que asegurarse de que la cadena se inicializa con la longitud esperada.</span><span class="sxs-lookup"><span data-stu-id="02db3-1130">If you use `StringIsFixedLength` = `True` with `FilePut`, you have to do the same with `FileGet`, and you have to make sure that the string is initialized to the length expected.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="02db3-1131">Modo aleatorio</span><span class="sxs-lookup"><span data-stu-id="02db3-1131">Random Mode</span></span>  
 <span data-ttu-id="02db3-1132">De los archivos abiertos en `Random` modo, se aplican las reglas siguientes:</span><span class="sxs-lookup"><span data-stu-id="02db3-1132">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="02db3-1133">Si la longitud de los datos que se va a escribir es menor que la longitud especificada en el `RecordLength` cláusula de la `FileOpen` función, `FilePut` escribirá los registros posteriores en los límites de longitud de registro.</span><span class="sxs-lookup"><span data-stu-id="02db3-1133">If the length of the data being written is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FilePut` writes subsequent records on record-length boundaries.</span></span> <span data-ttu-id="02db3-1134">El espacio entre el final de un registro y el inicio del siguiente registro se rellena con el contenido existente del búfer del archivo.</span><span class="sxs-lookup"><span data-stu-id="02db3-1134">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="02db3-1135">Como la cantidad de datos de relleno no se puede determinar con certeza, suele ser una buena idea tener la longitud del registro coincide con la longitud de los datos que se va a escribir.</span><span class="sxs-lookup"><span data-stu-id="02db3-1135">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being written.</span></span> <span data-ttu-id="02db3-1136">Si la longitud de los datos que se va a escribir es mayor que la longitud especificada en el `RecordLength` cláusula de la `FileOpen` función, se producirá una excepción.</span><span class="sxs-lookup"><span data-stu-id="02db3-1136">If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception will be thrown.</span></span>  
  
-   <span data-ttu-id="02db3-1137">Si la variable que se está escribiendo es una cadena, `FilePut` escribe un descriptor de dos bytes que contiene la longitud de cadena y, a continuación, escribe los datos que entrarán en la variable.</span><span class="sxs-lookup"><span data-stu-id="02db3-1137">If the variable being written is a string, `FilePut` writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable.</span></span> <span data-ttu-id="02db3-1138">Por lo tanto, la longitud de registro especificada por el `RecordLength` cláusula en la `FileOpen` función debe ser mayor que la longitud real de la cadena de al menos dos bytes.</span><span class="sxs-lookup"><span data-stu-id="02db3-1138">Therefore, the record length specified by the `RecordLength` clause in the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span>  
  
-   <span data-ttu-id="02db3-1139">Si la variable que se está escribiendo es un objeto que contiene un tipo numérico, `FilePut` escribe dos bytes para identificar el `VarType` del objeto y, a continuación, escribe la variable.</span><span class="sxs-lookup"><span data-stu-id="02db3-1139">If the variable being written is an object that contains a numeric type, `FilePut` writes two bytes identifying the `VarType` of the object and then writes the variable.</span></span> <span data-ttu-id="02db3-1140">Por ejemplo, al escribir un objeto que contiene un entero, `FilePut` escribe seis bytes: dos bytes que identifican el objeto como `VarType(3)` (`Integer`) y cuatro bytes que contienen los datos.</span><span class="sxs-lookup"><span data-stu-id="02db3-1140">For example, when writing an object that contains an integer, `FilePut` writes six bytes: two bytes that identify the object as `VarType(3)` (`Integer`) and four bytes that contain the data.</span></span> <span data-ttu-id="02db3-1141">La longitud de registro especificada por el `RecordLength` parámetro en el `FileOpen` función debe ser mayor que el número real de bytes necesarios para almacenar la variable al menos dos bytes.</span><span class="sxs-lookup"><span data-stu-id="02db3-1141">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.</span></span>  
  
-   <span data-ttu-id="02db3-1142">Si la variable que se está escribiendo es un objeto que contiene una cadena, `FilePut` escribe un descriptor de dos bytes que identifica el `VarType(8)` del objeto, un descriptor de dos bytes que indica la longitud de la cadena y, a continuación, escribe los datos de cadena.</span><span class="sxs-lookup"><span data-stu-id="02db3-1142">If the variable being written is an object that contains a string, `FilePut` writes a two byte descriptor identifying the `VarType(8)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data.</span></span> <span data-ttu-id="02db3-1143">La longitud de registro especificada por el `RecordLength` parámetro en el `FileOpen` función debe ser mayor que la longitud real de la cadena de al menos cuatro bytes.</span><span class="sxs-lookup"><span data-stu-id="02db3-1143">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string.</span></span> <span data-ttu-id="02db3-1144">Si desea escribir una cadena sin el descriptor, debería pasar `True` a la `StringIsFixedLength` parámetro y la cadena que lea debe tener la longitud correcta.</span><span class="sxs-lookup"><span data-stu-id="02db3-1144">If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="02db3-1145">Si la variable que se escribe es una matriz, tendrá la opción si desea escribir un descriptor para el tamaño y las dimensiones de la matriz o no.</span><span class="sxs-lookup"><span data-stu-id="02db3-1145">If the variable being written is an array, you have a choice as to whether or not to write a descriptor for the size and dimensions of the array.</span></span> <span data-ttu-id="02db3-1146">Visual Basic 6.0 y versiones anteriores escriben el descriptor de archivo para una matriz dinámica pero no para una matriz de tamaño fijo.</span><span class="sxs-lookup"><span data-stu-id="02db3-1146">Visual Basic 6.0 and earlier versions write the file descriptor for a dynamic array but not for a fixed-size array.</span></span> <span data-ttu-id="02db3-1147">De forma predeterminada, Visual Basic 2005 no escribe el descriptor.</span><span class="sxs-lookup"><span data-stu-id="02db3-1147">Visual Basic 2005 defaults to not writing the descriptor.</span></span> <span data-ttu-id="02db3-1148">Para escribir el descriptor, establezca el `ArrayIsDynamic` parámetro `True`.</span><span class="sxs-lookup"><span data-stu-id="02db3-1148">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="02db3-1149">Al escribir la matriz, se tiene que coincidir con la forma en que se leerá la matriz; Si se va a leer con el descriptor, tendrá que escribir el descriptor.</span><span class="sxs-lookup"><span data-stu-id="02db3-1149">When writing the array, you have to match the way the array will be read; if it will be read with the descriptor, you have to write the descriptor.</span></span> <span data-ttu-id="02db3-1150">El descriptor especifica el rango de la matriz, el tamaño y los límites inferiores de cada rango.</span><span class="sxs-lookup"><span data-stu-id="02db3-1150">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="02db3-1151">Su longitud es igual a 2 más 8 veces el número de dimensiones: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="02db3-1151">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="02db3-1152">La longitud de registro especificada por el `RecordLength` cláusula en la `FileOpen` función debe ser mayor o igual a la suma de todos los bytes necesarios para escribir los datos de matriz y el descriptor de matriz.</span><span class="sxs-lookup"><span data-stu-id="02db3-1152">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="02db3-1153">Por ejemplo, la siguiente declaración de matriz requiere 218 bytes cuando se escribe la matriz en el disco.</span><span class="sxs-lookup"><span data-stu-id="02db3-1153">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#43](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#43)]  
  
-   <span data-ttu-id="02db3-1154">Si la variable que se escribe es cualquier otro tipo de variable (no una cadena de longitud variable o un objeto), `FilePut` escribe sólo los datos de la variable.</span><span class="sxs-lookup"><span data-stu-id="02db3-1154">If the variable being written is any other type of variable (not a variable-length string or an object), `FilePut` writes only the variable data.</span></span> <span data-ttu-id="02db3-1155">La longitud de registro especificada por el `RecordLength` cláusula en la `FileOpen` función debe ser mayor o igual que la longitud de los datos que se va a escribir.</span><span class="sxs-lookup"><span data-stu-id="02db3-1155">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being written.</span></span>  
  
-   <span data-ttu-id="02db3-1156">`FilePut` escribe elementos de estructuras como si cada uno se escribieron individualmente, excepto que no hay ningún relleno entre los elementos.</span><span class="sxs-lookup"><span data-stu-id="02db3-1156">`FilePut` writes elements of structures as if each were written individually, except there is no padding between elements.</span></span> <span data-ttu-id="02db3-1157">El `VBFixedString` atributo puede aplicarse a campos de cadena de las estructuras para indicar el tamaño de la cadena cuando se escribe en el disco.</span><span class="sxs-lookup"><span data-stu-id="02db3-1157">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of the string when written to disk.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="02db3-1158">Cadena de los campos que tienen más bytes que el especificado por el `VBFixedString` atributo se truncan cuando se escribe en el disco,</span><span class="sxs-lookup"><span data-stu-id="02db3-1158">String fields that have more bytes than specified by the `VBFixedString` attribute are truncated when written to disk,</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="02db3-1159">Modo binario</span><span class="sxs-lookup"><span data-stu-id="02db3-1159">Binary Mode</span></span>  
 <span data-ttu-id="02db3-1160">De los archivos abiertos en `Binary` modo, la mayoría de los `Random` se aplican las reglas de modo, con algunas excepciones.</span><span class="sxs-lookup"><span data-stu-id="02db3-1160">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="02db3-1161">Las siguientes reglas para los archivos abiertos en `Binary` modo difieren de las reglas para `Random` modo:</span><span class="sxs-lookup"><span data-stu-id="02db3-1161">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="02db3-1162">El `RecordLength` cláusula en la `FileOpen` función no tiene ningún efecto.</span><span class="sxs-lookup"><span data-stu-id="02db3-1162">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="02db3-1163">`FilePut` escribe todas las variables en el disco de forma contigua, es decir, sin relleno entre los registros.</span><span class="sxs-lookup"><span data-stu-id="02db3-1163">`FilePut` writes all variables to disk contiguously, that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="02db3-1164">Para cualquier matriz que no sea una matriz en una estructura, `FilePut` escribe sólo los datos.</span><span class="sxs-lookup"><span data-stu-id="02db3-1164">For any array other than an array in a structure, `FilePut` writes only the data.</span></span> <span data-ttu-id="02db3-1165">No se escribe ningún descriptor.</span><span class="sxs-lookup"><span data-stu-id="02db3-1165">No descriptor is written.</span></span>  
  
-   <span data-ttu-id="02db3-1166">`FilePut` Escribe cadenas de longitud variable que no sean elementos de estructuras sin el descriptor de longitud de dos bytes.</span><span class="sxs-lookup"><span data-stu-id="02db3-1166">`FilePut` writes variable-length strings that are not elements of structures without the two-byte length descriptor.</span></span> <span data-ttu-id="02db3-1167">El número de bytes escritos es igual al número de caracteres de la cadena.</span><span class="sxs-lookup"><span data-stu-id="02db3-1167">The number of bytes written equals the number of characters in the string.</span></span> <span data-ttu-id="02db3-1168">Por ejemplo, las siguientes instrucciones escriben 11 bytes en el archivo número 1:</span><span class="sxs-lookup"><span data-stu-id="02db3-1168">For example, the following statements write 11 bytes to file number 1:</span></span>  
  
     [!code-vb[VbVbalrCatRef#44](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#44)]  
  
-   <span data-ttu-id="02db3-1169">Escribir en un archivo mediante el uso de la `FilePut` función requiere `Write` acceso desde el <xref:System.Security.Permissions.FileIOPermissionAccess> enumeración.</span><span class="sxs-lookup"><span data-stu-id="02db3-1169">Writing to a file by using the `FilePut` function requires `Write` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="02db3-1170">Este ejemplo se usa el `FilePut` función para escribir datos en un archivo.</span><span class="sxs-lookup"><span data-stu-id="02db3-1170">This example uses the `FilePut` function to write data to a file.</span></span> <span data-ttu-id="02db3-1171">Cinco registros de la estructura `Person` se escriben en el archivo.</span><span class="sxs-lookup"><span data-stu-id="02db3-1171">Five records of the structure `Person` are written to the file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#42](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#42)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="02db3-1172">
            <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-1172">
              <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="02db3-1173">File mode is invalid.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-1173">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Len(System.UInt16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
      </Docs>
    </Member>
    <Member MemberName="FilePut">
      <MemberSignature Language="C#" Value="public static void FilePut (int FileNumber, byte Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FilePut(int32 FileNumber, unsigned int8 Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.Byte,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FilePut (FileNumber As Integer, Value As Byte, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FilePut : int * byte * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FilePut (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Byte" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="02db3-1174">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-1174">Required.</span>
          </span>
          <span data-ttu-id="02db3-1175">Any valid file number.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-1175">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="02db3-1176">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-1176">Required.</span>
          </span>
          <span data-ttu-id="02db3-1177">Valid variable name that contains data written to disk.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-1177">Valid variable name that contains data written to disk.</span>
          </span>
        </param>
        <param name="RecordNumber">
          <span data-ttu-id="02db3-1178">Optional.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-1178">Optional.</span>
          </span>
          <span data-ttu-id="02db3-1179">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-1179">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="02db3-1180">Writes data from a variable to a disk file.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-1180">Writes data from a variable to a disk file.</span>
          </span>
          <span data-ttu-id="02db3-1181">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-1181">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span>
          </span>
          <span data-ttu-id="02db3-1182">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-1182">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="02db3-1183">`FilePut` solo es válido en `Random` y `Binary` modo.</span><span class="sxs-lookup"><span data-stu-id="02db3-1183">`FilePut` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="02db3-1184">Los datos escritos con `FilePut` normalmente se leen desde un archivo mediante `FileGet`.</span><span class="sxs-lookup"><span data-stu-id="02db3-1184">Data written with `FilePut` is usually read from a file by using `FileGet`.</span></span>  
  
 <span data-ttu-id="02db3-1185">El primer registro o byte de un archivo está en la posición 1, el segundo registro o byte en la posición 2 y así sucesivamente.</span><span class="sxs-lookup"><span data-stu-id="02db3-1185">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="02db3-1186">Si se omite `RecordNumber`, el siguiente registro o byte después del último `FileGet` o `FilePut` función o apunta a la última `Seek` se escribe la función.</span><span class="sxs-lookup"><span data-stu-id="02db3-1186">If you omit `RecordNumber`, the next record or byte after the last `FileGet` or `FilePut` function or pointed to by the last `Seek` function is written.</span></span>  
  
 <span data-ttu-id="02db3-1187">El `StringIsFixedLength` argumento controla si la función interpreta las cadenas como longitud fija o variable.</span><span class="sxs-lookup"><span data-stu-id="02db3-1187">The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length.</span></span> <span data-ttu-id="02db3-1188">`FilePut` no escribe el descriptor de longitud cuando el argumento es `True`.</span><span class="sxs-lookup"><span data-stu-id="02db3-1188">`FilePut` does not write the length descriptor when the argument is `True`.</span></span> <span data-ttu-id="02db3-1189">Si usas `StringIsFixedLength`  =  `True` con `FilePut`, tendrá que hacer lo mismo con `FileGet`, y tiene que asegurarse de que la cadena se inicializa con la longitud esperada.</span><span class="sxs-lookup"><span data-stu-id="02db3-1189">If you use `StringIsFixedLength` = `True` with `FilePut`, you have to do the same with `FileGet`, and you have to make sure that the string is initialized to the length expected.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="02db3-1190">Modo aleatorio</span><span class="sxs-lookup"><span data-stu-id="02db3-1190">Random Mode</span></span>  
 <span data-ttu-id="02db3-1191">De los archivos abiertos en `Random` modo, se aplican las reglas siguientes:</span><span class="sxs-lookup"><span data-stu-id="02db3-1191">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="02db3-1192">Si la longitud de los datos que se va a escribir es menor que la longitud especificada en el `RecordLength` cláusula de la `FileOpen` función, `FilePut` escribirá los registros posteriores en los límites de longitud de registro.</span><span class="sxs-lookup"><span data-stu-id="02db3-1192">If the length of the data being written is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FilePut` writes subsequent records on record-length boundaries.</span></span> <span data-ttu-id="02db3-1193">El espacio entre el final de un registro y el inicio del siguiente registro se rellena con el contenido existente del búfer del archivo.</span><span class="sxs-lookup"><span data-stu-id="02db3-1193">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="02db3-1194">Como la cantidad de datos de relleno no se puede determinar con certeza, suele ser una buena idea tener la longitud del registro coincide con la longitud de los datos que se va a escribir.</span><span class="sxs-lookup"><span data-stu-id="02db3-1194">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being written.</span></span> <span data-ttu-id="02db3-1195">Si la longitud de los datos que se va a escribir es mayor que la longitud especificada en el `RecordLength` cláusula de la `FileOpen` función, se producirá una excepción.</span><span class="sxs-lookup"><span data-stu-id="02db3-1195">If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception will be thrown.</span></span>  
  
-   <span data-ttu-id="02db3-1196">Si la variable que se está escribiendo es una cadena, `FilePut` escribe un descriptor de dos bytes que contiene la longitud de cadena y, a continuación, escribe los datos que entrarán en la variable.</span><span class="sxs-lookup"><span data-stu-id="02db3-1196">If the variable being written is a string, `FilePut` writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable.</span></span> <span data-ttu-id="02db3-1197">Por lo tanto, la longitud de registro especificada por el `RecordLength` cláusula en la `FileOpen` función debe ser mayor que la longitud real de la cadena de al menos dos bytes.</span><span class="sxs-lookup"><span data-stu-id="02db3-1197">Therefore, the record length specified by the `RecordLength` clause in the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span>  
  
-   <span data-ttu-id="02db3-1198">Si la variable que se está escribiendo es un objeto que contiene un tipo numérico, `FilePut` escribe dos bytes para identificar el `VarType` del objeto y, a continuación, escribe la variable.</span><span class="sxs-lookup"><span data-stu-id="02db3-1198">If the variable being written is an object that contains a numeric type, `FilePut` writes two bytes identifying the `VarType` of the object and then writes the variable.</span></span> <span data-ttu-id="02db3-1199">Por ejemplo, al escribir un objeto que contiene un entero, `FilePut` escribe seis bytes: dos bytes que identifican el objeto como `VarType(3)` (`Integer`) y cuatro bytes que contienen los datos.</span><span class="sxs-lookup"><span data-stu-id="02db3-1199">For example, when writing an object that contains an integer, `FilePut` writes six bytes: two bytes that identify the object as `VarType(3)` (`Integer`) and four bytes that contain the data.</span></span> <span data-ttu-id="02db3-1200">La longitud de registro especificada por el `RecordLength` parámetro en el `FileOpen` función debe ser mayor que el número real de bytes necesarios para almacenar la variable al menos dos bytes.</span><span class="sxs-lookup"><span data-stu-id="02db3-1200">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.</span></span>  
  
-   <span data-ttu-id="02db3-1201">Si la variable que se está escribiendo es un objeto que contiene una cadena, `FilePut` escribe un descriptor de dos bytes que identifica el `VarType(8)` del objeto, un descriptor de dos bytes que indica la longitud de la cadena y, a continuación, escribe los datos de cadena.</span><span class="sxs-lookup"><span data-stu-id="02db3-1201">If the variable being written is an object that contains a string, `FilePut` writes a two byte descriptor identifying the `VarType(8)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data.</span></span> <span data-ttu-id="02db3-1202">La longitud de registro especificada por el `RecordLength` parámetro en el `FileOpen` función debe ser mayor que la longitud real de la cadena de al menos cuatro bytes.</span><span class="sxs-lookup"><span data-stu-id="02db3-1202">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string.</span></span> <span data-ttu-id="02db3-1203">Si desea escribir una cadena sin el descriptor, debería pasar `True` a la `StringIsFixedLength` parámetro y la cadena que lea debe tener la longitud correcta.</span><span class="sxs-lookup"><span data-stu-id="02db3-1203">If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="02db3-1204">Si la variable que se escribe es una matriz, tendrá la opción si desea escribir un descriptor para el tamaño y las dimensiones de la matriz o no.</span><span class="sxs-lookup"><span data-stu-id="02db3-1204">If the variable being written is an array, you have a choice as to whether or not to write a descriptor for the size and dimensions of the array.</span></span> <span data-ttu-id="02db3-1205">Visual Basic 6.0 y versiones anteriores escriben el descriptor de archivo para una matriz dinámica pero no para una matriz de tamaño fijo.</span><span class="sxs-lookup"><span data-stu-id="02db3-1205">Visual Basic 6.0 and earlier versions write the file descriptor for a dynamic array but not for a fixed-size array.</span></span> <span data-ttu-id="02db3-1206">De forma predeterminada, Visual Basic 2005 no escribe el descriptor.</span><span class="sxs-lookup"><span data-stu-id="02db3-1206">Visual Basic 2005 defaults to not writing the descriptor.</span></span> <span data-ttu-id="02db3-1207">Para escribir el descriptor, establezca el `ArrayIsDynamic` parámetro `True`.</span><span class="sxs-lookup"><span data-stu-id="02db3-1207">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="02db3-1208">Al escribir la matriz, se tiene que coincidir con la forma en que se leerá la matriz; Si se va a leer con el descriptor, tendrá que escribir el descriptor.</span><span class="sxs-lookup"><span data-stu-id="02db3-1208">When writing the array, you have to match the way the array will be read; if it will be read with the descriptor, you have to write the descriptor.</span></span> <span data-ttu-id="02db3-1209">El descriptor especifica el rango de la matriz, el tamaño y los límites inferiores de cada rango.</span><span class="sxs-lookup"><span data-stu-id="02db3-1209">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="02db3-1210">Su longitud es igual a 2 más 8 veces el número de dimensiones: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="02db3-1210">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="02db3-1211">La longitud de registro especificada por el `RecordLength` cláusula en la `FileOpen` función debe ser mayor o igual a la suma de todos los bytes necesarios para escribir los datos de matriz y el descriptor de matriz.</span><span class="sxs-lookup"><span data-stu-id="02db3-1211">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="02db3-1212">Por ejemplo, la siguiente declaración de matriz requiere 218 bytes cuando se escribe la matriz en el disco.</span><span class="sxs-lookup"><span data-stu-id="02db3-1212">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#43](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#43)]  
  
-   <span data-ttu-id="02db3-1213">Si la variable que se escribe es cualquier otro tipo de variable (no una cadena de longitud variable o un objeto), `FilePut` escribe sólo los datos de la variable.</span><span class="sxs-lookup"><span data-stu-id="02db3-1213">If the variable being written is any other type of variable (not a variable-length string or an object), `FilePut` writes only the variable data.</span></span> <span data-ttu-id="02db3-1214">La longitud de registro especificada por el `RecordLength` cláusula en la `FileOpen` función debe ser mayor o igual que la longitud de los datos que se va a escribir.</span><span class="sxs-lookup"><span data-stu-id="02db3-1214">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being written.</span></span>  
  
-   <span data-ttu-id="02db3-1215">`FilePut` escribe elementos de estructuras como si cada uno se escribieron individualmente, excepto que no hay ningún relleno entre los elementos.</span><span class="sxs-lookup"><span data-stu-id="02db3-1215">`FilePut` writes elements of structures as if each were written individually, except there is no padding between elements.</span></span> <span data-ttu-id="02db3-1216">El `VBFixedString` atributo puede aplicarse a campos de cadena de las estructuras para indicar el tamaño de la cadena cuando se escribe en el disco.</span><span class="sxs-lookup"><span data-stu-id="02db3-1216">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of the string when written to disk.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="02db3-1217">Cadena de los campos que tienen más bytes que el especificado por el `VBFixedString` atributo se truncan cuando se escribe en el disco,</span><span class="sxs-lookup"><span data-stu-id="02db3-1217">String fields that have more bytes than specified by the `VBFixedString` attribute are truncated when written to disk,</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="02db3-1218">Modo binario</span><span class="sxs-lookup"><span data-stu-id="02db3-1218">Binary Mode</span></span>  
 <span data-ttu-id="02db3-1219">De los archivos abiertos en `Binary` modo, la mayoría de los `Random` se aplican las reglas de modo, con algunas excepciones.</span><span class="sxs-lookup"><span data-stu-id="02db3-1219">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="02db3-1220">Las siguientes reglas para los archivos abiertos en `Binary` modo difieren de las reglas para `Random` modo:</span><span class="sxs-lookup"><span data-stu-id="02db3-1220">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="02db3-1221">El `RecordLength` cláusula en la `FileOpen` función no tiene ningún efecto.</span><span class="sxs-lookup"><span data-stu-id="02db3-1221">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="02db3-1222">`FilePut` escribe todas las variables en el disco de forma contigua, es decir, sin relleno entre los registros.</span><span class="sxs-lookup"><span data-stu-id="02db3-1222">`FilePut` writes all variables to disk contiguously, that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="02db3-1223">Para cualquier matriz que no sea una matriz en una estructura, `FilePut` escribe sólo los datos.</span><span class="sxs-lookup"><span data-stu-id="02db3-1223">For any array other than an array in a structure, `FilePut` writes only the data.</span></span> <span data-ttu-id="02db3-1224">No se escribe ningún descriptor.</span><span class="sxs-lookup"><span data-stu-id="02db3-1224">No descriptor is written.</span></span>  
  
-   <span data-ttu-id="02db3-1225">`FilePut` Escribe cadenas de longitud variable que no sean elementos de estructuras sin el descriptor de longitud de dos bytes.</span><span class="sxs-lookup"><span data-stu-id="02db3-1225">`FilePut` writes variable-length strings that are not elements of structures without the two-byte length descriptor.</span></span> <span data-ttu-id="02db3-1226">El número de bytes escritos es igual al número de caracteres de la cadena.</span><span class="sxs-lookup"><span data-stu-id="02db3-1226">The number of bytes written equals the number of characters in the string.</span></span> <span data-ttu-id="02db3-1227">Por ejemplo, las siguientes instrucciones escriben 11 bytes en el archivo número 1:</span><span class="sxs-lookup"><span data-stu-id="02db3-1227">For example, the following statements write 11 bytes to file number 1:</span></span>  
  
     [!code-vb[VbVbalrCatRef#44](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#44)]  
  
-   <span data-ttu-id="02db3-1228">Escribir en un archivo mediante el uso de la `FilePut` función requiere `Write` acceso desde el <xref:System.Security.Permissions.FileIOPermissionAccess> enumeración.</span><span class="sxs-lookup"><span data-stu-id="02db3-1228">Writing to a file by using the `FilePut` function requires `Write` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="02db3-1229">Este ejemplo se usa el `FilePut` función para escribir datos en un archivo.</span><span class="sxs-lookup"><span data-stu-id="02db3-1229">This example uses the `FilePut` function to write data to a file.</span></span> <span data-ttu-id="02db3-1230">Cinco registros de la estructura `Person` se escriben en el archivo.</span><span class="sxs-lookup"><span data-stu-id="02db3-1230">Five records of the structure `Person` are written to the file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#42](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#42)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="02db3-1231">
            <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-1231">
              <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="02db3-1232">File mode is invalid.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-1232">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Len(System.UInt16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
      </Docs>
    </Member>
    <Member MemberName="FilePut">
      <MemberSignature Language="C#" Value="public static void FilePut (int FileNumber, char Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FilePut(int32 FileNumber, char Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.Char,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FilePut (FileNumber As Integer, Value As Char, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FilePut : int * char * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FilePut (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Char" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="02db3-1233">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-1233">Required.</span>
          </span>
          <span data-ttu-id="02db3-1234">Any valid file number.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-1234">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="02db3-1235">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-1235">Required.</span>
          </span>
          <span data-ttu-id="02db3-1236">Valid variable name that contains data written to disk.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-1236">Valid variable name that contains data written to disk.</span>
          </span>
        </param>
        <param name="RecordNumber">
          <span data-ttu-id="02db3-1237">Optional.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-1237">Optional.</span>
          </span>
          <span data-ttu-id="02db3-1238">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-1238">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="02db3-1239">Writes data from a variable to a disk file.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-1239">Writes data from a variable to a disk file.</span>
          </span>
          <span data-ttu-id="02db3-1240">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-1240">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span>
          </span>
          <span data-ttu-id="02db3-1241">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-1241">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="02db3-1242">`FilePut` solo es válido en `Random` y `Binary` modo.</span><span class="sxs-lookup"><span data-stu-id="02db3-1242">`FilePut` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="02db3-1243">Los datos escritos con `FilePut` normalmente se leen desde un archivo mediante `FileGet`.</span><span class="sxs-lookup"><span data-stu-id="02db3-1243">Data written with `FilePut` is usually read from a file by using `FileGet`.</span></span>  
  
 <span data-ttu-id="02db3-1244">El primer registro o byte de un archivo está en la posición 1, el segundo registro o byte en la posición 2 y así sucesivamente.</span><span class="sxs-lookup"><span data-stu-id="02db3-1244">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="02db3-1245">Si se omite `RecordNumber`, el siguiente registro o byte después del último `FileGet` o `FilePut` función o apunta a la última `Seek` se escribe la función.</span><span class="sxs-lookup"><span data-stu-id="02db3-1245">If you omit `RecordNumber`, the next record or byte after the last `FileGet` or `FilePut` function or pointed to by the last `Seek` function is written.</span></span>  
  
 <span data-ttu-id="02db3-1246">El `StringIsFixedLength` argumento controla si la función interpreta las cadenas como longitud fija o variable.</span><span class="sxs-lookup"><span data-stu-id="02db3-1246">The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length.</span></span> <span data-ttu-id="02db3-1247">`FilePut` no escribe el descriptor de longitud cuando el argumento es `True`.</span><span class="sxs-lookup"><span data-stu-id="02db3-1247">`FilePut` does not write the length descriptor when the argument is `True`.</span></span> <span data-ttu-id="02db3-1248">Si usas `StringIsFixedLength`  =  `True` con `FilePut`, tendrá que hacer lo mismo con `FileGet`, y tiene que asegurarse de que la cadena se inicializa con la longitud esperada.</span><span class="sxs-lookup"><span data-stu-id="02db3-1248">If you use `StringIsFixedLength` = `True` with `FilePut`, you have to do the same with `FileGet`, and you have to make sure that the string is initialized to the length expected.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="02db3-1249">Modo aleatorio</span><span class="sxs-lookup"><span data-stu-id="02db3-1249">Random Mode</span></span>  
 <span data-ttu-id="02db3-1250">De los archivos abiertos en `Random` modo, se aplican las reglas siguientes:</span><span class="sxs-lookup"><span data-stu-id="02db3-1250">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="02db3-1251">Si la longitud de los datos que se va a escribir es menor que la longitud especificada en el `RecordLength` cláusula de la `FileOpen` función, `FilePut` escribirá los registros posteriores en los límites de longitud de registro.</span><span class="sxs-lookup"><span data-stu-id="02db3-1251">If the length of the data being written is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FilePut` writes subsequent records on record-length boundaries.</span></span> <span data-ttu-id="02db3-1252">El espacio entre el final de un registro y el inicio del siguiente registro se rellena con el contenido existente del búfer del archivo.</span><span class="sxs-lookup"><span data-stu-id="02db3-1252">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="02db3-1253">Como la cantidad de datos de relleno no se puede determinar con certeza, suele ser una buena idea tener la longitud del registro coincide con la longitud de los datos que se va a escribir.</span><span class="sxs-lookup"><span data-stu-id="02db3-1253">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being written.</span></span> <span data-ttu-id="02db3-1254">Si la longitud de los datos que se va a escribir es mayor que la longitud especificada en el `RecordLength` cláusula de la `FileOpen` función, se producirá una excepción.</span><span class="sxs-lookup"><span data-stu-id="02db3-1254">If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception will be thrown.</span></span>  
  
-   <span data-ttu-id="02db3-1255">Si la variable que se está escribiendo es una cadena, `FilePut` escribe un descriptor de dos bytes que contiene la longitud de cadena y, a continuación, escribe los datos que entrarán en la variable.</span><span class="sxs-lookup"><span data-stu-id="02db3-1255">If the variable being written is a string, `FilePut` writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable.</span></span> <span data-ttu-id="02db3-1256">Por lo tanto, la longitud de registro especificada por el `RecordLength` cláusula en la `FileOpen` función debe ser mayor que la longitud real de la cadena de al menos dos bytes.</span><span class="sxs-lookup"><span data-stu-id="02db3-1256">Therefore, the record length specified by the `RecordLength` clause in the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span>  
  
-   <span data-ttu-id="02db3-1257">Si la variable que se está escribiendo es un objeto que contiene un tipo numérico, `FilePut` escribe dos bytes para identificar el `VarType` del objeto y, a continuación, escribe la variable.</span><span class="sxs-lookup"><span data-stu-id="02db3-1257">If the variable being written is an object that contains a numeric type, `FilePut` writes two bytes identifying the `VarType` of the object and then writes the variable.</span></span> <span data-ttu-id="02db3-1258">Por ejemplo, al escribir un objeto que contiene un entero, `FilePut` escribe seis bytes: dos bytes que identifican el objeto como `VarType(3)` (`Integer`) y cuatro bytes que contienen los datos.</span><span class="sxs-lookup"><span data-stu-id="02db3-1258">For example, when writing an object that contains an integer, `FilePut` writes six bytes: two bytes that identify the object as `VarType(3)` (`Integer`) and four bytes that contain the data.</span></span> <span data-ttu-id="02db3-1259">La longitud de registro especificada por el `RecordLength` parámetro en el `FileOpen` función debe ser mayor que el número real de bytes necesarios para almacenar la variable al menos dos bytes.</span><span class="sxs-lookup"><span data-stu-id="02db3-1259">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.</span></span>  
  
-   <span data-ttu-id="02db3-1260">Si la variable que se está escribiendo es un objeto que contiene una cadena, `FilePut` escribe un descriptor de dos bytes que identifica el `VarType(8)` del objeto, un descriptor de dos bytes que indica la longitud de la cadena y, a continuación, escribe los datos de cadena.</span><span class="sxs-lookup"><span data-stu-id="02db3-1260">If the variable being written is an object that contains a string, `FilePut` writes a two byte descriptor identifying the `VarType(8)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data.</span></span> <span data-ttu-id="02db3-1261">La longitud de registro especificada por el `RecordLength` parámetro en el `FileOpen` función debe ser mayor que la longitud real de la cadena de al menos cuatro bytes.</span><span class="sxs-lookup"><span data-stu-id="02db3-1261">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string.</span></span> <span data-ttu-id="02db3-1262">Si desea escribir una cadena sin el descriptor, debería pasar `True` a la `StringIsFixedLength` parámetro y la cadena que lea debe tener la longitud correcta.</span><span class="sxs-lookup"><span data-stu-id="02db3-1262">If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="02db3-1263">Si la variable que se escribe es una matriz, tendrá la opción si desea escribir un descriptor para el tamaño y las dimensiones de la matriz o no.</span><span class="sxs-lookup"><span data-stu-id="02db3-1263">If the variable being written is an array, you have a choice as to whether or not to write a descriptor for the size and dimensions of the array.</span></span> <span data-ttu-id="02db3-1264">Visual Basic 6.0 y versiones anteriores escriben el descriptor de archivo para una matriz dinámica pero no para una matriz de tamaño fijo.</span><span class="sxs-lookup"><span data-stu-id="02db3-1264">Visual Basic 6.0 and earlier versions write the file descriptor for a dynamic array but not for a fixed-size array.</span></span> <span data-ttu-id="02db3-1265">De forma predeterminada, Visual Basic 2005 no escribe el descriptor.</span><span class="sxs-lookup"><span data-stu-id="02db3-1265">Visual Basic 2005 defaults to not writing the descriptor.</span></span> <span data-ttu-id="02db3-1266">Para escribir el descriptor, establezca el `ArrayIsDynamic` parámetro `True`.</span><span class="sxs-lookup"><span data-stu-id="02db3-1266">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="02db3-1267">Al escribir la matriz, se tiene que coincidir con la forma en que se leerá la matriz; Si se va a leer con el descriptor, tendrá que escribir el descriptor.</span><span class="sxs-lookup"><span data-stu-id="02db3-1267">When writing the array, you have to match the way the array will be read; if it will be read with the descriptor, you have to write the descriptor.</span></span> <span data-ttu-id="02db3-1268">El descriptor especifica el rango de la matriz, el tamaño y los límites inferiores de cada rango.</span><span class="sxs-lookup"><span data-stu-id="02db3-1268">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="02db3-1269">Su longitud es igual a 2 más 8 veces el número de dimensiones: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="02db3-1269">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="02db3-1270">La longitud de registro especificada por el `RecordLength` cláusula en la `FileOpen` función debe ser mayor o igual a la suma de todos los bytes necesarios para escribir los datos de matriz y el descriptor de matriz.</span><span class="sxs-lookup"><span data-stu-id="02db3-1270">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="02db3-1271">Por ejemplo, la siguiente declaración de matriz requiere 218 bytes cuando se escribe la matriz en el disco.</span><span class="sxs-lookup"><span data-stu-id="02db3-1271">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#43](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#43)]  
  
-   <span data-ttu-id="02db3-1272">Si la variable que se escribe es cualquier otro tipo de variable (no una cadena de longitud variable o un objeto), `FilePut` escribe sólo los datos de la variable.</span><span class="sxs-lookup"><span data-stu-id="02db3-1272">If the variable being written is any other type of variable (not a variable-length string or an object), `FilePut` writes only the variable data.</span></span> <span data-ttu-id="02db3-1273">La longitud de registro especificada por el `RecordLength` cláusula en la `FileOpen` función debe ser mayor o igual que la longitud de los datos que se va a escribir.</span><span class="sxs-lookup"><span data-stu-id="02db3-1273">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being written.</span></span>  
  
-   <span data-ttu-id="02db3-1274">`FilePut` escribe elementos de estructuras como si cada uno se escribieron individualmente, excepto que no hay ningún relleno entre los elementos.</span><span class="sxs-lookup"><span data-stu-id="02db3-1274">`FilePut` writes elements of structures as if each were written individually, except there is no padding between elements.</span></span> <span data-ttu-id="02db3-1275">El `VBFixedString` atributo puede aplicarse a campos de cadena de las estructuras para indicar el tamaño de la cadena cuando se escribe en el disco.</span><span class="sxs-lookup"><span data-stu-id="02db3-1275">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of the string when written to disk.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="02db3-1276">Cadena de los campos que tienen más bytes que el especificado por el `VBFixedString` atributo se truncan cuando se escribe en el disco,</span><span class="sxs-lookup"><span data-stu-id="02db3-1276">String fields that have more bytes than specified by the `VBFixedString` attribute are truncated when written to disk,</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="02db3-1277">Modo binario</span><span class="sxs-lookup"><span data-stu-id="02db3-1277">Binary Mode</span></span>  
 <span data-ttu-id="02db3-1278">De los archivos abiertos en `Binary` modo, la mayoría de los `Random` se aplican las reglas de modo, con algunas excepciones.</span><span class="sxs-lookup"><span data-stu-id="02db3-1278">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="02db3-1279">Las siguientes reglas para los archivos abiertos en `Binary` modo difieren de las reglas para `Random` modo:</span><span class="sxs-lookup"><span data-stu-id="02db3-1279">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="02db3-1280">El `RecordLength` cláusula en la `FileOpen` función no tiene ningún efecto.</span><span class="sxs-lookup"><span data-stu-id="02db3-1280">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="02db3-1281">`FilePut` escribe todas las variables en el disco de forma contigua, es decir, sin relleno entre los registros.</span><span class="sxs-lookup"><span data-stu-id="02db3-1281">`FilePut` writes all variables to disk contiguously, that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="02db3-1282">Para cualquier matriz que no sea una matriz en una estructura, `FilePut` escribe sólo los datos.</span><span class="sxs-lookup"><span data-stu-id="02db3-1282">For any array other than an array in a structure, `FilePut` writes only the data.</span></span> <span data-ttu-id="02db3-1283">No se escribe ningún descriptor.</span><span class="sxs-lookup"><span data-stu-id="02db3-1283">No descriptor is written.</span></span>  
  
-   <span data-ttu-id="02db3-1284">`FilePut` Escribe cadenas de longitud variable que no sean elementos de estructuras sin el descriptor de longitud de dos bytes.</span><span class="sxs-lookup"><span data-stu-id="02db3-1284">`FilePut` writes variable-length strings that are not elements of structures without the two-byte length descriptor.</span></span> <span data-ttu-id="02db3-1285">El número de bytes escritos es igual al número de caracteres de la cadena.</span><span class="sxs-lookup"><span data-stu-id="02db3-1285">The number of bytes written equals the number of characters in the string.</span></span> <span data-ttu-id="02db3-1286">Por ejemplo, las siguientes instrucciones escriben 11 bytes en el archivo número 1:</span><span class="sxs-lookup"><span data-stu-id="02db3-1286">For example, the following statements write 11 bytes to file number 1:</span></span>  
  
     [!code-vb[VbVbalrCatRef#44](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#44)]  
  
-   <span data-ttu-id="02db3-1287">Escribir en un archivo mediante el uso de la `FilePut` función requiere `Write` acceso desde el <xref:System.Security.Permissions.FileIOPermissionAccess> enumeración.</span><span class="sxs-lookup"><span data-stu-id="02db3-1287">Writing to a file by using the `FilePut` function requires `Write` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="02db3-1288">Este ejemplo se usa el `FilePut` función para escribir datos en un archivo.</span><span class="sxs-lookup"><span data-stu-id="02db3-1288">This example uses the `FilePut` function to write data to a file.</span></span> <span data-ttu-id="02db3-1289">Cinco registros de la estructura `Person` se escriben en el archivo.</span><span class="sxs-lookup"><span data-stu-id="02db3-1289">Five records of the structure `Person` are written to the file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#42](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#42)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="02db3-1290">
            <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-1290">
              <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="02db3-1291">File mode is invalid.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-1291">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Len(System.UInt16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
      </Docs>
    </Member>
    <Member MemberName="FilePut">
      <MemberSignature Language="C#" Value="public static void FilePut (int FileNumber, DateTime Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FilePut(int32 FileNumber, valuetype System.DateTime Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.DateTime,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FilePut (FileNumber As Integer, Value As DateTime, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FilePut : int * DateTime * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FilePut (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.DateTime" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="02db3-1292">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-1292">Required.</span>
          </span>
          <span data-ttu-id="02db3-1293">Any valid file number.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-1293">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="02db3-1294">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-1294">Required.</span>
          </span>
          <span data-ttu-id="02db3-1295">Valid variable name that contains data written to disk.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-1295">Valid variable name that contains data written to disk.</span>
          </span>
        </param>
        <param name="RecordNumber">
          <span data-ttu-id="02db3-1296">Optional.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-1296">Optional.</span>
          </span>
          <span data-ttu-id="02db3-1297">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-1297">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="02db3-1298">Writes data from a variable to a disk file.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-1298">Writes data from a variable to a disk file.</span>
          </span>
          <span data-ttu-id="02db3-1299">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-1299">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span>
          </span>
          <span data-ttu-id="02db3-1300">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-1300">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="02db3-1301">`FilePut` solo es válido en `Random` y `Binary` modo.</span><span class="sxs-lookup"><span data-stu-id="02db3-1301">`FilePut` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="02db3-1302">Los datos escritos con `FilePut` normalmente se leen desde un archivo mediante `FileGet`.</span><span class="sxs-lookup"><span data-stu-id="02db3-1302">Data written with `FilePut` is usually read from a file by using `FileGet`.</span></span>  
  
 <span data-ttu-id="02db3-1303">El primer registro o byte de un archivo está en la posición 1, el segundo registro o byte en la posición 2 y así sucesivamente.</span><span class="sxs-lookup"><span data-stu-id="02db3-1303">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="02db3-1304">Si se omite `RecordNumber`, el siguiente registro o byte después del último `FileGet` o `FilePut` función o apunta a la última `Seek` se escribe la función.</span><span class="sxs-lookup"><span data-stu-id="02db3-1304">If you omit `RecordNumber`, the next record or byte after the last `FileGet` or `FilePut` function or pointed to by the last `Seek` function is written.</span></span>  
  
 <span data-ttu-id="02db3-1305">El `StringIsFixedLength` argumento controla si la función interpreta las cadenas como longitud fija o variable.</span><span class="sxs-lookup"><span data-stu-id="02db3-1305">The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length.</span></span> <span data-ttu-id="02db3-1306">`FilePut` no escribe el descriptor de longitud cuando el argumento es `True`.</span><span class="sxs-lookup"><span data-stu-id="02db3-1306">`FilePut` does not write the length descriptor when the argument is `True`.</span></span> <span data-ttu-id="02db3-1307">Si usas `StringIsFixedLength`  =  `True` con `FilePut`, tendrá que hacer lo mismo con `FileGet`, y tiene que asegurarse de que la cadena se inicializa con la longitud esperada.</span><span class="sxs-lookup"><span data-stu-id="02db3-1307">If you use `StringIsFixedLength` = `True` with `FilePut`, you have to do the same with `FileGet`, and you have to make sure that the string is initialized to the length expected.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="02db3-1308">Modo aleatorio</span><span class="sxs-lookup"><span data-stu-id="02db3-1308">Random Mode</span></span>  
 <span data-ttu-id="02db3-1309">De los archivos abiertos en `Random` modo, se aplican las reglas siguientes:</span><span class="sxs-lookup"><span data-stu-id="02db3-1309">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="02db3-1310">Si la longitud de los datos que se va a escribir es menor que la longitud especificada en el `RecordLength` cláusula de la `FileOpen` función, `FilePut` escribirá los registros posteriores en los límites de longitud de registro.</span><span class="sxs-lookup"><span data-stu-id="02db3-1310">If the length of the data being written is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FilePut` writes subsequent records on record-length boundaries.</span></span> <span data-ttu-id="02db3-1311">El espacio entre el final de un registro y el inicio del siguiente registro se rellena con el contenido existente del búfer del archivo.</span><span class="sxs-lookup"><span data-stu-id="02db3-1311">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="02db3-1312">Como la cantidad de datos de relleno no se puede determinar con certeza, suele ser una buena idea tener la longitud del registro coincide con la longitud de los datos que se va a escribir.</span><span class="sxs-lookup"><span data-stu-id="02db3-1312">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being written.</span></span> <span data-ttu-id="02db3-1313">Si la longitud de los datos que se va a escribir es mayor que la longitud especificada en el `RecordLength` cláusula de la `FileOpen` función, se producirá una excepción.</span><span class="sxs-lookup"><span data-stu-id="02db3-1313">If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception will be thrown.</span></span>  
  
-   <span data-ttu-id="02db3-1314">Si la variable que se está escribiendo es una cadena, `FilePut` escribe un descriptor de dos bytes que contiene la longitud de cadena y, a continuación, escribe los datos que entrarán en la variable.</span><span class="sxs-lookup"><span data-stu-id="02db3-1314">If the variable being written is a string, `FilePut` writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable.</span></span> <span data-ttu-id="02db3-1315">Por lo tanto, la longitud de registro especificada por el `RecordLength` cláusula en la `FileOpen` función debe ser mayor que la longitud real de la cadena de al menos dos bytes.</span><span class="sxs-lookup"><span data-stu-id="02db3-1315">Therefore, the record length specified by the `RecordLength` clause in the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span>  
  
-   <span data-ttu-id="02db3-1316">Si la variable que se está escribiendo es un objeto que contiene un tipo numérico, `FilePut` escribe dos bytes para identificar el `VarType` del objeto y, a continuación, escribe la variable.</span><span class="sxs-lookup"><span data-stu-id="02db3-1316">If the variable being written is an object that contains a numeric type, `FilePut` writes two bytes identifying the `VarType` of the object and then writes the variable.</span></span> <span data-ttu-id="02db3-1317">Por ejemplo, al escribir un objeto que contiene un entero, `FilePut` escribe seis bytes: dos bytes que identifican el objeto como `VarType(3)` (`Integer`) y cuatro bytes que contienen los datos.</span><span class="sxs-lookup"><span data-stu-id="02db3-1317">For example, when writing an object that contains an integer, `FilePut` writes six bytes: two bytes that identify the object as `VarType(3)` (`Integer`) and four bytes that contain the data.</span></span> <span data-ttu-id="02db3-1318">La longitud de registro especificada por el `RecordLength` parámetro en el `FileOpen` función debe ser mayor que el número real de bytes necesarios para almacenar la variable al menos dos bytes.</span><span class="sxs-lookup"><span data-stu-id="02db3-1318">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.</span></span>  
  
-   <span data-ttu-id="02db3-1319">Si la variable que se está escribiendo es un objeto que contiene una cadena, `FilePut` escribe un descriptor de dos bytes que identifica el `VarType(8)` del objeto, un descriptor de dos bytes que indica la longitud de la cadena y, a continuación, escribe los datos de cadena.</span><span class="sxs-lookup"><span data-stu-id="02db3-1319">If the variable being written is an object that contains a string, `FilePut` writes a two byte descriptor identifying the `VarType(8)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data.</span></span> <span data-ttu-id="02db3-1320">La longitud de registro especificada por el `RecordLength` parámetro en el `FileOpen` función debe ser mayor que la longitud real de la cadena de al menos cuatro bytes.</span><span class="sxs-lookup"><span data-stu-id="02db3-1320">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string.</span></span> <span data-ttu-id="02db3-1321">Si desea escribir una cadena sin el descriptor, debería pasar `True` a la `StringIsFixedLength` parámetro y la cadena que lea debe tener la longitud correcta.</span><span class="sxs-lookup"><span data-stu-id="02db3-1321">If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="02db3-1322">Si la variable que se escribe es una matriz, tendrá la opción si desea escribir un descriptor para el tamaño y las dimensiones de la matriz o no.</span><span class="sxs-lookup"><span data-stu-id="02db3-1322">If the variable being written is an array, you have a choice as to whether or not to write a descriptor for the size and dimensions of the array.</span></span> <span data-ttu-id="02db3-1323">Visual Basic 6.0 y versiones anteriores escriben el descriptor de archivo para una matriz dinámica pero no para una matriz de tamaño fijo.</span><span class="sxs-lookup"><span data-stu-id="02db3-1323">Visual Basic 6.0 and earlier versions write the file descriptor for a dynamic array but not for a fixed-size array.</span></span> <span data-ttu-id="02db3-1324">De forma predeterminada, Visual Basic 2005 no escribe el descriptor.</span><span class="sxs-lookup"><span data-stu-id="02db3-1324">Visual Basic 2005 defaults to not writing the descriptor.</span></span> <span data-ttu-id="02db3-1325">Para escribir el descriptor, establezca el `ArrayIsDynamic` parámetro `True`.</span><span class="sxs-lookup"><span data-stu-id="02db3-1325">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="02db3-1326">Al escribir la matriz, se tiene que coincidir con la forma en que se leerá la matriz; Si se va a leer con el descriptor, tendrá que escribir el descriptor.</span><span class="sxs-lookup"><span data-stu-id="02db3-1326">When writing the array, you have to match the way the array will be read; if it will be read with the descriptor, you have to write the descriptor.</span></span> <span data-ttu-id="02db3-1327">El descriptor especifica el rango de la matriz, el tamaño y los límites inferiores de cada rango.</span><span class="sxs-lookup"><span data-stu-id="02db3-1327">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="02db3-1328">Su longitud es igual a 2 más 8 veces el número de dimensiones: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="02db3-1328">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="02db3-1329">La longitud de registro especificada por el `RecordLength` cláusula en la `FileOpen` función debe ser mayor o igual a la suma de todos los bytes necesarios para escribir los datos de matriz y el descriptor de matriz.</span><span class="sxs-lookup"><span data-stu-id="02db3-1329">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="02db3-1330">Por ejemplo, la siguiente declaración de matriz requiere 218 bytes cuando se escribe la matriz en el disco.</span><span class="sxs-lookup"><span data-stu-id="02db3-1330">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#43](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#43)]  
  
-   <span data-ttu-id="02db3-1331">Si la variable que se escribe es cualquier otro tipo de variable (no una cadena de longitud variable o un objeto), `FilePut` escribe sólo los datos de la variable.</span><span class="sxs-lookup"><span data-stu-id="02db3-1331">If the variable being written is any other type of variable (not a variable-length string or an object), `FilePut` writes only the variable data.</span></span> <span data-ttu-id="02db3-1332">La longitud de registro especificada por el `RecordLength` cláusula en la `FileOpen` función debe ser mayor o igual que la longitud de los datos que se va a escribir.</span><span class="sxs-lookup"><span data-stu-id="02db3-1332">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being written.</span></span>  
  
-   <span data-ttu-id="02db3-1333">`FilePut` escribe elementos de estructuras como si cada uno se escribieron individualmente, excepto que no hay ningún relleno entre los elementos.</span><span class="sxs-lookup"><span data-stu-id="02db3-1333">`FilePut` writes elements of structures as if each were written individually, except there is no padding between elements.</span></span> <span data-ttu-id="02db3-1334">El `VBFixedString` atributo puede aplicarse a campos de cadena de las estructuras para indicar el tamaño de la cadena cuando se escribe en el disco.</span><span class="sxs-lookup"><span data-stu-id="02db3-1334">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of the string when written to disk.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="02db3-1335">Cadena de los campos que tienen más bytes que el especificado por el `VBFixedString` atributo se truncan cuando se escribe en el disco,</span><span class="sxs-lookup"><span data-stu-id="02db3-1335">String fields that have more bytes than specified by the `VBFixedString` attribute are truncated when written to disk,</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="02db3-1336">Modo binario</span><span class="sxs-lookup"><span data-stu-id="02db3-1336">Binary Mode</span></span>  
 <span data-ttu-id="02db3-1337">De los archivos abiertos en `Binary` modo, la mayoría de los `Random` se aplican las reglas de modo, con algunas excepciones.</span><span class="sxs-lookup"><span data-stu-id="02db3-1337">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="02db3-1338">Las siguientes reglas para los archivos abiertos en `Binary` modo difieren de las reglas para `Random` modo:</span><span class="sxs-lookup"><span data-stu-id="02db3-1338">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="02db3-1339">El `RecordLength` cláusula en la `FileOpen` función no tiene ningún efecto.</span><span class="sxs-lookup"><span data-stu-id="02db3-1339">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="02db3-1340">`FilePut` escribe todas las variables en el disco de forma contigua, es decir, sin relleno entre los registros.</span><span class="sxs-lookup"><span data-stu-id="02db3-1340">`FilePut` writes all variables to disk contiguously, that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="02db3-1341">Para cualquier matriz que no sea una matriz en una estructura, `FilePut` escribe sólo los datos.</span><span class="sxs-lookup"><span data-stu-id="02db3-1341">For any array other than an array in a structure, `FilePut` writes only the data.</span></span> <span data-ttu-id="02db3-1342">No se escribe ningún descriptor.</span><span class="sxs-lookup"><span data-stu-id="02db3-1342">No descriptor is written.</span></span>  
  
-   <span data-ttu-id="02db3-1343">`FilePut` Escribe cadenas de longitud variable que no sean elementos de estructuras sin el descriptor de longitud de dos bytes.</span><span class="sxs-lookup"><span data-stu-id="02db3-1343">`FilePut` writes variable-length strings that are not elements of structures without the two-byte length descriptor.</span></span> <span data-ttu-id="02db3-1344">El número de bytes escritos es igual al número de caracteres de la cadena.</span><span class="sxs-lookup"><span data-stu-id="02db3-1344">The number of bytes written equals the number of characters in the string.</span></span> <span data-ttu-id="02db3-1345">Por ejemplo, las siguientes instrucciones escriben 11 bytes en el archivo número 1:</span><span class="sxs-lookup"><span data-stu-id="02db3-1345">For example, the following statements write 11 bytes to file number 1:</span></span>  
  
     [!code-vb[VbVbalrCatRef#44](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#44)]  
  
-   <span data-ttu-id="02db3-1346">Escribir en un archivo mediante el uso de la `FilePut` función requiere `Write` acceso desde el <xref:System.Security.Permissions.FileIOPermissionAccess> enumeración.</span><span class="sxs-lookup"><span data-stu-id="02db3-1346">Writing to a file by using the `FilePut` function requires `Write` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="02db3-1347">Este ejemplo se usa el `FilePut` función para escribir datos en un archivo.</span><span class="sxs-lookup"><span data-stu-id="02db3-1347">This example uses the `FilePut` function to write data to a file.</span></span> <span data-ttu-id="02db3-1348">Cinco registros de la estructura `Person` se escriben en el archivo.</span><span class="sxs-lookup"><span data-stu-id="02db3-1348">Five records of the structure `Person` are written to the file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#42](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#42)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="02db3-1349">
            <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-1349">
              <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="02db3-1350">File mode is invalid.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-1350">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Len(System.UInt16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
      </Docs>
    </Member>
    <Member MemberName="FilePut">
      <MemberSignature Language="C#" Value="public static void FilePut (int FileNumber, decimal Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FilePut(int32 FileNumber, valuetype System.Decimal Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.Decimal,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FilePut (FileNumber As Integer, Value As Decimal, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FilePut : int * decimal * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FilePut (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Decimal" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="02db3-1351">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-1351">Required.</span>
          </span>
          <span data-ttu-id="02db3-1352">Any valid file number.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-1352">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="02db3-1353">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-1353">Required.</span>
          </span>
          <span data-ttu-id="02db3-1354">Valid variable name that contains data written to disk.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-1354">Valid variable name that contains data written to disk.</span>
          </span>
        </param>
        <param name="RecordNumber">
          <span data-ttu-id="02db3-1355">Optional.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-1355">Optional.</span>
          </span>
          <span data-ttu-id="02db3-1356">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-1356">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="02db3-1357">Writes data from a variable to a disk file.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-1357">Writes data from a variable to a disk file.</span>
          </span>
          <span data-ttu-id="02db3-1358">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-1358">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span>
          </span>
          <span data-ttu-id="02db3-1359">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-1359">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="02db3-1360">`FilePut` solo es válido en `Random` y `Binary` modo.</span><span class="sxs-lookup"><span data-stu-id="02db3-1360">`FilePut` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="02db3-1361">Los datos escritos con `FilePut` normalmente se leen desde un archivo mediante `FileGet`.</span><span class="sxs-lookup"><span data-stu-id="02db3-1361">Data written with `FilePut` is usually read from a file by using `FileGet`.</span></span>  
  
 <span data-ttu-id="02db3-1362">El primer registro o byte de un archivo está en la posición 1, el segundo registro o byte en la posición 2 y así sucesivamente.</span><span class="sxs-lookup"><span data-stu-id="02db3-1362">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="02db3-1363">Si se omite `RecordNumber`, el siguiente registro o byte después del último `FileGet` o `FilePut` función o apunta a la última `Seek` se escribe la función.</span><span class="sxs-lookup"><span data-stu-id="02db3-1363">If you omit `RecordNumber`, the next record or byte after the last `FileGet` or `FilePut` function or pointed to by the last `Seek` function is written.</span></span>  
  
 <span data-ttu-id="02db3-1364">El `StringIsFixedLength` argumento controla si la función interpreta las cadenas como longitud fija o variable.</span><span class="sxs-lookup"><span data-stu-id="02db3-1364">The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length.</span></span> <span data-ttu-id="02db3-1365">`FilePut` no escribe el descriptor de longitud cuando el argumento es `True`.</span><span class="sxs-lookup"><span data-stu-id="02db3-1365">`FilePut` does not write the length descriptor when the argument is `True`.</span></span> <span data-ttu-id="02db3-1366">Si usas `StringIsFixedLength`  =  `True` con `FilePut`, tendrá que hacer lo mismo con `FileGet`, y tiene que asegurarse de que la cadena se inicializa con la longitud esperada.</span><span class="sxs-lookup"><span data-stu-id="02db3-1366">If you use `StringIsFixedLength` = `True` with `FilePut`, you have to do the same with `FileGet`, and you have to make sure that the string is initialized to the length expected.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="02db3-1367">Modo aleatorio</span><span class="sxs-lookup"><span data-stu-id="02db3-1367">Random Mode</span></span>  
 <span data-ttu-id="02db3-1368">De los archivos abiertos en `Random` modo, se aplican las reglas siguientes:</span><span class="sxs-lookup"><span data-stu-id="02db3-1368">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="02db3-1369">Si la longitud de los datos que se va a escribir es menor que la longitud especificada en el `RecordLength` cláusula de la `FileOpen` función, `FilePut` escribirá los registros posteriores en los límites de longitud de registro.</span><span class="sxs-lookup"><span data-stu-id="02db3-1369">If the length of the data being written is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FilePut` writes subsequent records on record-length boundaries.</span></span> <span data-ttu-id="02db3-1370">El espacio entre el final de un registro y el inicio del siguiente registro se rellena con el contenido existente del búfer del archivo.</span><span class="sxs-lookup"><span data-stu-id="02db3-1370">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="02db3-1371">Como la cantidad de datos de relleno no se puede determinar con certeza, suele ser una buena idea tener la longitud del registro coincide con la longitud de los datos que se va a escribir.</span><span class="sxs-lookup"><span data-stu-id="02db3-1371">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being written.</span></span> <span data-ttu-id="02db3-1372">Si la longitud de los datos que se va a escribir es mayor que la longitud especificada en el `RecordLength` cláusula de la `FileOpen` función, se producirá una excepción.</span><span class="sxs-lookup"><span data-stu-id="02db3-1372">If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception will be thrown.</span></span>  
  
-   <span data-ttu-id="02db3-1373">Si la variable que se está escribiendo es una cadena, `FilePut` escribe un descriptor de dos bytes que contiene la longitud de cadena y, a continuación, escribe los datos que entrarán en la variable.</span><span class="sxs-lookup"><span data-stu-id="02db3-1373">If the variable being written is a string, `FilePut` writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable.</span></span> <span data-ttu-id="02db3-1374">Por lo tanto, la longitud de registro especificada por el `RecordLength` cláusula en la `FileOpen` función debe ser mayor que la longitud real de la cadena de al menos dos bytes.</span><span class="sxs-lookup"><span data-stu-id="02db3-1374">Therefore, the record length specified by the `RecordLength` clause in the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span>  
  
-   <span data-ttu-id="02db3-1375">Si la variable que se está escribiendo es un objeto que contiene un tipo numérico, `FilePut` escribe dos bytes para identificar el `VarType` del objeto y, a continuación, escribe la variable.</span><span class="sxs-lookup"><span data-stu-id="02db3-1375">If the variable being written is an object that contains a numeric type, `FilePut` writes two bytes identifying the `VarType` of the object and then writes the variable.</span></span> <span data-ttu-id="02db3-1376">Por ejemplo, al escribir un objeto que contiene un entero, `FilePut` escribe seis bytes: dos bytes que identifican el objeto como `VarType(3)` (`Integer`) y cuatro bytes que contienen los datos.</span><span class="sxs-lookup"><span data-stu-id="02db3-1376">For example, when writing an object that contains an integer, `FilePut` writes six bytes: two bytes that identify the object as `VarType(3)` (`Integer`) and four bytes that contain the data.</span></span> <span data-ttu-id="02db3-1377">La longitud de registro especificada por el `RecordLength` parámetro en el `FileOpen` función debe ser mayor que el número real de bytes necesarios para almacenar la variable al menos dos bytes.</span><span class="sxs-lookup"><span data-stu-id="02db3-1377">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.</span></span>  
  
-   <span data-ttu-id="02db3-1378">Si la variable que se está escribiendo es un objeto que contiene una cadena, `FilePut` escribe un descriptor de dos bytes que identifica el `VarType(8)` del objeto, un descriptor de dos bytes que indica la longitud de la cadena y, a continuación, escribe los datos de cadena.</span><span class="sxs-lookup"><span data-stu-id="02db3-1378">If the variable being written is an object that contains a string, `FilePut` writes a two byte descriptor identifying the `VarType(8)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data.</span></span> <span data-ttu-id="02db3-1379">La longitud de registro especificada por el `RecordLength` parámetro en el `FileOpen` función debe ser mayor que la longitud real de la cadena de al menos cuatro bytes.</span><span class="sxs-lookup"><span data-stu-id="02db3-1379">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string.</span></span> <span data-ttu-id="02db3-1380">Si desea escribir una cadena sin el descriptor, debería pasar `True` a la `StringIsFixedLength` parámetro y la cadena que lea debe tener la longitud correcta.</span><span class="sxs-lookup"><span data-stu-id="02db3-1380">If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="02db3-1381">Si la variable que se escribe es una matriz, tendrá la opción si desea escribir un descriptor para el tamaño y las dimensiones de la matriz o no.</span><span class="sxs-lookup"><span data-stu-id="02db3-1381">If the variable being written is an array, you have a choice as to whether or not to write a descriptor for the size and dimensions of the array.</span></span> <span data-ttu-id="02db3-1382">Visual Basic 6.0 y versiones anteriores escriben el descriptor de archivo para una matriz dinámica pero no para una matriz de tamaño fijo.</span><span class="sxs-lookup"><span data-stu-id="02db3-1382">Visual Basic 6.0 and earlier versions write the file descriptor for a dynamic array but not for a fixed-size array.</span></span> <span data-ttu-id="02db3-1383">De forma predeterminada, Visual Basic 2005 no escribe el descriptor.</span><span class="sxs-lookup"><span data-stu-id="02db3-1383">Visual Basic 2005 defaults to not writing the descriptor.</span></span> <span data-ttu-id="02db3-1384">Para escribir el descriptor, establezca el `ArrayIsDynamic` parámetro `True`.</span><span class="sxs-lookup"><span data-stu-id="02db3-1384">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="02db3-1385">Al escribir la matriz, se tiene que coincidir con la forma en que se leerá la matriz; Si se va a leer con el descriptor, tendrá que escribir el descriptor.</span><span class="sxs-lookup"><span data-stu-id="02db3-1385">When writing the array, you have to match the way the array will be read; if it will be read with the descriptor, you have to write the descriptor.</span></span> <span data-ttu-id="02db3-1386">El descriptor especifica el rango de la matriz, el tamaño y los límites inferiores de cada rango.</span><span class="sxs-lookup"><span data-stu-id="02db3-1386">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="02db3-1387">Su longitud es igual a 2 más 8 veces el número de dimensiones: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="02db3-1387">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="02db3-1388">La longitud de registro especificada por el `RecordLength` cláusula en la `FileOpen` función debe ser mayor o igual a la suma de todos los bytes necesarios para escribir los datos de matriz y el descriptor de matriz.</span><span class="sxs-lookup"><span data-stu-id="02db3-1388">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="02db3-1389">Por ejemplo, la siguiente declaración de matriz requiere 218 bytes cuando se escribe la matriz en el disco.</span><span class="sxs-lookup"><span data-stu-id="02db3-1389">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#43](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#43)]  
  
-   <span data-ttu-id="02db3-1390">Si la variable que se escribe es cualquier otro tipo de variable (no una cadena de longitud variable o un objeto), `FilePut` escribe sólo los datos de la variable.</span><span class="sxs-lookup"><span data-stu-id="02db3-1390">If the variable being written is any other type of variable (not a variable-length string or an object), `FilePut` writes only the variable data.</span></span> <span data-ttu-id="02db3-1391">La longitud de registro especificada por el `RecordLength` cláusula en la `FileOpen` función debe ser mayor o igual que la longitud de los datos que se va a escribir.</span><span class="sxs-lookup"><span data-stu-id="02db3-1391">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being written.</span></span>  
  
-   <span data-ttu-id="02db3-1392">`FilePut` escribe elementos de estructuras como si cada uno se escribieron individualmente, excepto que no hay ningún relleno entre los elementos.</span><span class="sxs-lookup"><span data-stu-id="02db3-1392">`FilePut` writes elements of structures as if each were written individually, except there is no padding between elements.</span></span> <span data-ttu-id="02db3-1393">El `VBFixedString` atributo puede aplicarse a campos de cadena de las estructuras para indicar el tamaño de la cadena cuando se escribe en el disco.</span><span class="sxs-lookup"><span data-stu-id="02db3-1393">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of the string when written to disk.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="02db3-1394">Cadena de los campos que tienen más bytes que el especificado por el `VBFixedString` atributo se truncan cuando se escribe en el disco,</span><span class="sxs-lookup"><span data-stu-id="02db3-1394">String fields that have more bytes than specified by the `VBFixedString` attribute are truncated when written to disk,</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="02db3-1395">Modo binario</span><span class="sxs-lookup"><span data-stu-id="02db3-1395">Binary Mode</span></span>  
 <span data-ttu-id="02db3-1396">De los archivos abiertos en `Binary` modo, la mayoría de los `Random` se aplican las reglas de modo, con algunas excepciones.</span><span class="sxs-lookup"><span data-stu-id="02db3-1396">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="02db3-1397">Las siguientes reglas para los archivos abiertos en `Binary` modo difieren de las reglas para `Random` modo:</span><span class="sxs-lookup"><span data-stu-id="02db3-1397">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="02db3-1398">El `RecordLength` cláusula en la `FileOpen` función no tiene ningún efecto.</span><span class="sxs-lookup"><span data-stu-id="02db3-1398">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="02db3-1399">`FilePut` escribe todas las variables en el disco de forma contigua, es decir, sin relleno entre los registros.</span><span class="sxs-lookup"><span data-stu-id="02db3-1399">`FilePut` writes all variables to disk contiguously, that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="02db3-1400">Para cualquier matriz que no sea una matriz en una estructura, `FilePut` escribe sólo los datos.</span><span class="sxs-lookup"><span data-stu-id="02db3-1400">For any array other than an array in a structure, `FilePut` writes only the data.</span></span> <span data-ttu-id="02db3-1401">No se escribe ningún descriptor.</span><span class="sxs-lookup"><span data-stu-id="02db3-1401">No descriptor is written.</span></span>  
  
-   <span data-ttu-id="02db3-1402">`FilePut` Escribe cadenas de longitud variable que no sean elementos de estructuras sin el descriptor de longitud de dos bytes.</span><span class="sxs-lookup"><span data-stu-id="02db3-1402">`FilePut` writes variable-length strings that are not elements of structures without the two-byte length descriptor.</span></span> <span data-ttu-id="02db3-1403">El número de bytes escritos es igual al número de caracteres de la cadena.</span><span class="sxs-lookup"><span data-stu-id="02db3-1403">The number of bytes written equals the number of characters in the string.</span></span> <span data-ttu-id="02db3-1404">Por ejemplo, las siguientes instrucciones escriben 11 bytes en el archivo número 1:</span><span class="sxs-lookup"><span data-stu-id="02db3-1404">For example, the following statements write 11 bytes to file number 1:</span></span>  
  
     [!code-vb[VbVbalrCatRef#44](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#44)]  
  
-   <span data-ttu-id="02db3-1405">Escribir en un archivo mediante el uso de la `FilePut` función requiere `Write` acceso desde el <xref:System.Security.Permissions.FileIOPermissionAccess> enumeración.</span><span class="sxs-lookup"><span data-stu-id="02db3-1405">Writing to a file by using the `FilePut` function requires `Write` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="02db3-1406">Este ejemplo se usa el `FilePut` función para escribir datos en un archivo.</span><span class="sxs-lookup"><span data-stu-id="02db3-1406">This example uses the `FilePut` function to write data to a file.</span></span> <span data-ttu-id="02db3-1407">Cinco registros de la estructura `Person` se escriben en el archivo.</span><span class="sxs-lookup"><span data-stu-id="02db3-1407">Five records of the structure `Person` are written to the file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#42](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#42)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="02db3-1408">
            <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-1408">
              <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="02db3-1409">File mode is invalid.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-1409">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Len(System.UInt16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
      </Docs>
    </Member>
    <Member MemberName="FilePut">
      <MemberSignature Language="C#" Value="public static void FilePut (int FileNumber, double Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FilePut(int32 FileNumber, float64 Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.Double,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FilePut (FileNumber As Integer, Value As Double, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FilePut : int * double * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FilePut (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Double" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="02db3-1410">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-1410">Required.</span>
          </span>
          <span data-ttu-id="02db3-1411">Any valid file number.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-1411">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="02db3-1412">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-1412">Required.</span>
          </span>
          <span data-ttu-id="02db3-1413">Valid variable name that contains data written to disk.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-1413">Valid variable name that contains data written to disk.</span>
          </span>
        </param>
        <param name="RecordNumber">
          <span data-ttu-id="02db3-1414">Optional.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-1414">Optional.</span>
          </span>
          <span data-ttu-id="02db3-1415">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-1415">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="02db3-1416">Writes data from a variable to a disk file.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-1416">Writes data from a variable to a disk file.</span>
          </span>
          <span data-ttu-id="02db3-1417">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-1417">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span>
          </span>
          <span data-ttu-id="02db3-1418">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-1418">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="02db3-1419">`FilePut` solo es válido en `Random` y `Binary` modo.</span><span class="sxs-lookup"><span data-stu-id="02db3-1419">`FilePut` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="02db3-1420">Los datos escritos con `FilePut` normalmente se leen desde un archivo mediante `FileGet`.</span><span class="sxs-lookup"><span data-stu-id="02db3-1420">Data written with `FilePut` is usually read from a file by using `FileGet`.</span></span>  
  
 <span data-ttu-id="02db3-1421">El primer registro o byte de un archivo está en la posición 1, el segundo registro o byte en la posición 2 y así sucesivamente.</span><span class="sxs-lookup"><span data-stu-id="02db3-1421">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="02db3-1422">Si se omite `RecordNumber`, el siguiente registro o byte después del último `FileGet` o `FilePut` función o apunta a la última `Seek` se escribe la función.</span><span class="sxs-lookup"><span data-stu-id="02db3-1422">If you omit `RecordNumber`, the next record or byte after the last `FileGet` or `FilePut` function or pointed to by the last `Seek` function is written.</span></span>  
  
 <span data-ttu-id="02db3-1423">El `StringIsFixedLength` argumento controla si la función interpreta las cadenas como longitud fija o variable.</span><span class="sxs-lookup"><span data-stu-id="02db3-1423">The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length.</span></span> <span data-ttu-id="02db3-1424">`FilePut` no escribe el descriptor de longitud cuando el argumento es `True`.</span><span class="sxs-lookup"><span data-stu-id="02db3-1424">`FilePut` does not write the length descriptor when the argument is `True`.</span></span> <span data-ttu-id="02db3-1425">Si usas `StringIsFixedLength`  =  `True` con `FilePut`, tendrá que hacer lo mismo con `FileGet`, y tiene que asegurarse de que la cadena se inicializa con la longitud esperada.</span><span class="sxs-lookup"><span data-stu-id="02db3-1425">If you use `StringIsFixedLength` = `True` with `FilePut`, you have to do the same with `FileGet`, and you have to make sure that the string is initialized to the length expected.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="02db3-1426">Modo aleatorio</span><span class="sxs-lookup"><span data-stu-id="02db3-1426">Random Mode</span></span>  
 <span data-ttu-id="02db3-1427">De los archivos abiertos en `Random` modo, se aplican las reglas siguientes:</span><span class="sxs-lookup"><span data-stu-id="02db3-1427">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="02db3-1428">Si la longitud de los datos que se va a escribir es menor que la longitud especificada en el `RecordLength` cláusula de la `FileOpen` función, `FilePut` escribirá los registros posteriores en los límites de longitud de registro.</span><span class="sxs-lookup"><span data-stu-id="02db3-1428">If the length of the data being written is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FilePut` writes subsequent records on record-length boundaries.</span></span> <span data-ttu-id="02db3-1429">El espacio entre el final de un registro y el inicio del siguiente registro se rellena con el contenido existente del búfer del archivo.</span><span class="sxs-lookup"><span data-stu-id="02db3-1429">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="02db3-1430">Como la cantidad de datos de relleno no se puede determinar con certeza, suele ser una buena idea tener la longitud del registro coincide con la longitud de los datos que se va a escribir.</span><span class="sxs-lookup"><span data-stu-id="02db3-1430">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being written.</span></span> <span data-ttu-id="02db3-1431">Si la longitud de los datos que se va a escribir es mayor que la longitud especificada en el `RecordLength` cláusula de la `FileOpen` función, se producirá una excepción.</span><span class="sxs-lookup"><span data-stu-id="02db3-1431">If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception will be thrown.</span></span>  
  
-   <span data-ttu-id="02db3-1432">Si la variable que se está escribiendo es una cadena, `FilePut` escribe un descriptor de dos bytes que contiene la longitud de cadena y, a continuación, escribe los datos que entrarán en la variable.</span><span class="sxs-lookup"><span data-stu-id="02db3-1432">If the variable being written is a string, `FilePut` writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable.</span></span> <span data-ttu-id="02db3-1433">Por lo tanto, la longitud de registro especificada por el `RecordLength` cláusula en la `FileOpen` función debe ser mayor que la longitud real de la cadena de al menos dos bytes.</span><span class="sxs-lookup"><span data-stu-id="02db3-1433">Therefore, the record length specified by the `RecordLength` clause in the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span>  
  
-   <span data-ttu-id="02db3-1434">Si la variable que se está escribiendo es un objeto que contiene un tipo numérico, `FilePut` escribe dos bytes para identificar el `VarType` del objeto y, a continuación, escribe la variable.</span><span class="sxs-lookup"><span data-stu-id="02db3-1434">If the variable being written is an object that contains a numeric type, `FilePut` writes two bytes identifying the `VarType` of the object and then writes the variable.</span></span> <span data-ttu-id="02db3-1435">Por ejemplo, al escribir un objeto que contiene un entero, `FilePut` escribe seis bytes: dos bytes que identifican el objeto como `VarType(3)` (`Integer`) y cuatro bytes que contienen los datos.</span><span class="sxs-lookup"><span data-stu-id="02db3-1435">For example, when writing an object that contains an integer, `FilePut` writes six bytes: two bytes that identify the object as `VarType(3)` (`Integer`) and four bytes that contain the data.</span></span> <span data-ttu-id="02db3-1436">La longitud de registro especificada por el `RecordLength` parámetro en el `FileOpen` función debe ser mayor que el número real de bytes necesarios para almacenar la variable al menos dos bytes.</span><span class="sxs-lookup"><span data-stu-id="02db3-1436">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.</span></span>  
  
-   <span data-ttu-id="02db3-1437">Si la variable que se está escribiendo es un objeto que contiene una cadena, `FilePut` escribe un descriptor de dos bytes que identifica el `VarType(8)` del objeto, un descriptor de dos bytes que indica la longitud de la cadena y, a continuación, escribe los datos de cadena.</span><span class="sxs-lookup"><span data-stu-id="02db3-1437">If the variable being written is an object that contains a string, `FilePut` writes a two byte descriptor identifying the `VarType(8)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data.</span></span> <span data-ttu-id="02db3-1438">La longitud de registro especificada por el `RecordLength` parámetro en el `FileOpen` función debe ser mayor que la longitud real de la cadena de al menos cuatro bytes.</span><span class="sxs-lookup"><span data-stu-id="02db3-1438">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string.</span></span> <span data-ttu-id="02db3-1439">Si desea escribir una cadena sin el descriptor, debería pasar `True` a la `StringIsFixedLength` parámetro y la cadena que lea debe tener la longitud correcta.</span><span class="sxs-lookup"><span data-stu-id="02db3-1439">If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="02db3-1440">Si la variable que se escribe es una matriz, tendrá la opción si desea escribir un descriptor para el tamaño y las dimensiones de la matriz o no.</span><span class="sxs-lookup"><span data-stu-id="02db3-1440">If the variable being written is an array, you have a choice as to whether or not to write a descriptor for the size and dimensions of the array.</span></span> <span data-ttu-id="02db3-1441">Visual Basic 6.0 y versiones anteriores escriben el descriptor de archivo para una matriz dinámica pero no para una matriz de tamaño fijo.</span><span class="sxs-lookup"><span data-stu-id="02db3-1441">Visual Basic 6.0 and earlier versions write the file descriptor for a dynamic array but not for a fixed-size array.</span></span> <span data-ttu-id="02db3-1442">De forma predeterminada, Visual Basic 2005 no escribe el descriptor.</span><span class="sxs-lookup"><span data-stu-id="02db3-1442">Visual Basic 2005 defaults to not writing the descriptor.</span></span> <span data-ttu-id="02db3-1443">Para escribir el descriptor, establezca el `ArrayIsDynamic` parámetro `True`.</span><span class="sxs-lookup"><span data-stu-id="02db3-1443">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="02db3-1444">Al escribir la matriz, se tiene que coincidir con la forma en que se leerá la matriz; Si se va a leer con el descriptor, tendrá que escribir el descriptor.</span><span class="sxs-lookup"><span data-stu-id="02db3-1444">When writing the array, you have to match the way the array will be read; if it will be read with the descriptor, you have to write the descriptor.</span></span> <span data-ttu-id="02db3-1445">El descriptor especifica el rango de la matriz, el tamaño y los límites inferiores de cada rango.</span><span class="sxs-lookup"><span data-stu-id="02db3-1445">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="02db3-1446">Su longitud es igual a 2 más 8 veces el número de dimensiones: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="02db3-1446">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="02db3-1447">La longitud de registro especificada por el `RecordLength` cláusula en la `FileOpen` función debe ser mayor o igual a la suma de todos los bytes necesarios para escribir los datos de matriz y el descriptor de matriz.</span><span class="sxs-lookup"><span data-stu-id="02db3-1447">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="02db3-1448">Por ejemplo, la siguiente declaración de matriz requiere 218 bytes cuando se escribe la matriz en el disco.</span><span class="sxs-lookup"><span data-stu-id="02db3-1448">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#43](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#43)]  
  
-   <span data-ttu-id="02db3-1449">Si la variable que se escribe es cualquier otro tipo de variable (no una cadena de longitud variable o un objeto), `FilePut` escribe sólo los datos de la variable.</span><span class="sxs-lookup"><span data-stu-id="02db3-1449">If the variable being written is any other type of variable (not a variable-length string or an object), `FilePut` writes only the variable data.</span></span> <span data-ttu-id="02db3-1450">La longitud de registro especificada por el `RecordLength` cláusula en la `FileOpen` función debe ser mayor o igual que la longitud de los datos que se va a escribir.</span><span class="sxs-lookup"><span data-stu-id="02db3-1450">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being written.</span></span>  
  
-   <span data-ttu-id="02db3-1451">`FilePut` escribe elementos de estructuras como si cada uno se escribieron individualmente, excepto que no hay ningún relleno entre los elementos.</span><span class="sxs-lookup"><span data-stu-id="02db3-1451">`FilePut` writes elements of structures as if each were written individually, except there is no padding between elements.</span></span> <span data-ttu-id="02db3-1452">El `VBFixedString` atributo puede aplicarse a campos de cadena de las estructuras para indicar el tamaño de la cadena cuando se escribe en el disco.</span><span class="sxs-lookup"><span data-stu-id="02db3-1452">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of the string when written to disk.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="02db3-1453">Cadena de los campos que tienen más bytes que el especificado por el `VBFixedString` atributo se truncan cuando se escribe en el disco,</span><span class="sxs-lookup"><span data-stu-id="02db3-1453">String fields that have more bytes than specified by the `VBFixedString` attribute are truncated when written to disk,</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="02db3-1454">Modo binario</span><span class="sxs-lookup"><span data-stu-id="02db3-1454">Binary Mode</span></span>  
 <span data-ttu-id="02db3-1455">De los archivos abiertos en `Binary` modo, la mayoría de los `Random` se aplican las reglas de modo, con algunas excepciones.</span><span class="sxs-lookup"><span data-stu-id="02db3-1455">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="02db3-1456">Las siguientes reglas para los archivos abiertos en `Binary` modo difieren de las reglas para `Random` modo:</span><span class="sxs-lookup"><span data-stu-id="02db3-1456">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="02db3-1457">El `RecordLength` cláusula en la `FileOpen` función no tiene ningún efecto.</span><span class="sxs-lookup"><span data-stu-id="02db3-1457">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="02db3-1458">`FilePut` escribe todas las variables en el disco de forma contigua, es decir, sin relleno entre los registros.</span><span class="sxs-lookup"><span data-stu-id="02db3-1458">`FilePut` writes all variables to disk contiguously, that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="02db3-1459">Para cualquier matriz que no sea una matriz en una estructura, `FilePut` escribe sólo los datos.</span><span class="sxs-lookup"><span data-stu-id="02db3-1459">For any array other than an array in a structure, `FilePut` writes only the data.</span></span> <span data-ttu-id="02db3-1460">No se escribe ningún descriptor.</span><span class="sxs-lookup"><span data-stu-id="02db3-1460">No descriptor is written.</span></span>  
  
-   <span data-ttu-id="02db3-1461">`FilePut` Escribe cadenas de longitud variable que no sean elementos de estructuras sin el descriptor de longitud de dos bytes.</span><span class="sxs-lookup"><span data-stu-id="02db3-1461">`FilePut` writes variable-length strings that are not elements of structures without the two-byte length descriptor.</span></span> <span data-ttu-id="02db3-1462">El número de bytes escritos es igual al número de caracteres de la cadena.</span><span class="sxs-lookup"><span data-stu-id="02db3-1462">The number of bytes written equals the number of characters in the string.</span></span> <span data-ttu-id="02db3-1463">Por ejemplo, las siguientes instrucciones escriben 11 bytes en el archivo número 1:</span><span class="sxs-lookup"><span data-stu-id="02db3-1463">For example, the following statements write 11 bytes to file number 1:</span></span>  
  
     [!code-vb[VbVbalrCatRef#44](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#44)]  
  
-   <span data-ttu-id="02db3-1464">Escribir en un archivo mediante el uso de la `FilePut` función requiere `Write` acceso desde el <xref:System.Security.Permissions.FileIOPermissionAccess> enumeración.</span><span class="sxs-lookup"><span data-stu-id="02db3-1464">Writing to a file by using the `FilePut` function requires `Write` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="02db3-1465">Este ejemplo se usa el `FilePut` función para escribir datos en un archivo.</span><span class="sxs-lookup"><span data-stu-id="02db3-1465">This example uses the `FilePut` function to write data to a file.</span></span> <span data-ttu-id="02db3-1466">Cinco registros de la estructura `Person` se escriben en el archivo.</span><span class="sxs-lookup"><span data-stu-id="02db3-1466">Five records of the structure `Person` are written to the file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#42](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#42)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="02db3-1467">
            <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-1467">
              <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="02db3-1468">File mode is invalid.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-1468">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Len(System.UInt16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
      </Docs>
    </Member>
    <Member MemberName="FilePut">
      <MemberSignature Language="C#" Value="public static void FilePut (int FileNumber, short Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FilePut(int32 FileNumber, int16 Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.Int16,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FilePut (FileNumber As Integer, Value As Short, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FilePut : int * int16 * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FilePut (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Int16" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="02db3-1469">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-1469">Required.</span>
          </span>
          <span data-ttu-id="02db3-1470">Any valid file number.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-1470">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="02db3-1471">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-1471">Required.</span>
          </span>
          <span data-ttu-id="02db3-1472">Valid variable name that contains data written to disk.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-1472">Valid variable name that contains data written to disk.</span>
          </span>
        </param>
        <param name="RecordNumber">
          <span data-ttu-id="02db3-1473">Optional.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-1473">Optional.</span>
          </span>
          <span data-ttu-id="02db3-1474">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-1474">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="02db3-1475">Writes data from a variable to a disk file.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-1475">Writes data from a variable to a disk file.</span>
          </span>
          <span data-ttu-id="02db3-1476">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-1476">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span>
          </span>
          <span data-ttu-id="02db3-1477">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-1477">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="02db3-1478">`FilePut` solo es válido en `Random` y `Binary` modo.</span><span class="sxs-lookup"><span data-stu-id="02db3-1478">`FilePut` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="02db3-1479">Los datos escritos con `FilePut` normalmente se leen desde un archivo mediante `FileGet`.</span><span class="sxs-lookup"><span data-stu-id="02db3-1479">Data written with `FilePut` is usually read from a file by using `FileGet`.</span></span>  
  
 <span data-ttu-id="02db3-1480">El primer registro o byte de un archivo está en la posición 1, el segundo registro o byte en la posición 2 y así sucesivamente.</span><span class="sxs-lookup"><span data-stu-id="02db3-1480">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="02db3-1481">Si se omite `RecordNumber`, el siguiente registro o byte después del último `FileGet` o `FilePut` función o apunta a la última `Seek` se escribe la función.</span><span class="sxs-lookup"><span data-stu-id="02db3-1481">If you omit `RecordNumber`, the next record or byte after the last `FileGet` or `FilePut` function or pointed to by the last `Seek` function is written.</span></span>  
  
 <span data-ttu-id="02db3-1482">El `StringIsFixedLength` argumento controla si la función interpreta las cadenas como longitud fija o variable.</span><span class="sxs-lookup"><span data-stu-id="02db3-1482">The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length.</span></span> <span data-ttu-id="02db3-1483">`FilePut` no escribe el descriptor de longitud cuando el argumento es `True`.</span><span class="sxs-lookup"><span data-stu-id="02db3-1483">`FilePut` does not write the length descriptor when the argument is `True`.</span></span> <span data-ttu-id="02db3-1484">Si usas `StringIsFixedLength`  =  `True` con `FilePut`, tendrá que hacer lo mismo con `FileGet`, y tiene que asegurarse de que la cadena se inicializa con la longitud esperada.</span><span class="sxs-lookup"><span data-stu-id="02db3-1484">If you use `StringIsFixedLength` = `True` with `FilePut`, you have to do the same with `FileGet`, and you have to make sure that the string is initialized to the length expected.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="02db3-1485">Modo aleatorio</span><span class="sxs-lookup"><span data-stu-id="02db3-1485">Random Mode</span></span>  
 <span data-ttu-id="02db3-1486">De los archivos abiertos en `Random` modo, se aplican las reglas siguientes:</span><span class="sxs-lookup"><span data-stu-id="02db3-1486">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="02db3-1487">Si la longitud de los datos que se va a escribir es menor que la longitud especificada en el `RecordLength` cláusula de la `FileOpen` función, `FilePut` escribirá los registros posteriores en los límites de longitud de registro.</span><span class="sxs-lookup"><span data-stu-id="02db3-1487">If the length of the data being written is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FilePut` writes subsequent records on record-length boundaries.</span></span> <span data-ttu-id="02db3-1488">El espacio entre el final de un registro y el inicio del siguiente registro se rellena con el contenido existente del búfer del archivo.</span><span class="sxs-lookup"><span data-stu-id="02db3-1488">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="02db3-1489">Como la cantidad de datos de relleno no se puede determinar con certeza, suele ser una buena idea tener la longitud del registro coincide con la longitud de los datos que se va a escribir.</span><span class="sxs-lookup"><span data-stu-id="02db3-1489">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being written.</span></span> <span data-ttu-id="02db3-1490">Si la longitud de los datos que se va a escribir es mayor que la longitud especificada en el `RecordLength` cláusula de la `FileOpen` función, se producirá una excepción.</span><span class="sxs-lookup"><span data-stu-id="02db3-1490">If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception will be thrown.</span></span>  
  
-   <span data-ttu-id="02db3-1491">Si la variable que se está escribiendo es una cadena, `FilePut` escribe un descriptor de dos bytes que contiene la longitud de cadena y, a continuación, escribe los datos que entrarán en la variable.</span><span class="sxs-lookup"><span data-stu-id="02db3-1491">If the variable being written is a string, `FilePut` writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable.</span></span> <span data-ttu-id="02db3-1492">Por lo tanto, la longitud de registro especificada por el `RecordLength` cláusula en la `FileOpen` función debe ser mayor que la longitud real de la cadena de al menos dos bytes.</span><span class="sxs-lookup"><span data-stu-id="02db3-1492">Therefore, the record length specified by the `RecordLength` clause in the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span>  
  
-   <span data-ttu-id="02db3-1493">Si la variable que se está escribiendo es un objeto que contiene un tipo numérico, `FilePut` escribe dos bytes para identificar el `VarType` del objeto y, a continuación, escribe la variable.</span><span class="sxs-lookup"><span data-stu-id="02db3-1493">If the variable being written is an object that contains a numeric type, `FilePut` writes two bytes identifying the `VarType` of the object and then writes the variable.</span></span> <span data-ttu-id="02db3-1494">Por ejemplo, al escribir un objeto que contiene un entero, `FilePut` escribe seis bytes: dos bytes que identifican el objeto como `VarType(3)` (`Integer`) y cuatro bytes que contienen los datos.</span><span class="sxs-lookup"><span data-stu-id="02db3-1494">For example, when writing an object that contains an integer, `FilePut` writes six bytes: two bytes that identify the object as `VarType(3)` (`Integer`) and four bytes that contain the data.</span></span> <span data-ttu-id="02db3-1495">La longitud de registro especificada por el `RecordLength` parámetro en el `FileOpen` función debe ser mayor que el número real de bytes necesarios para almacenar la variable al menos dos bytes.</span><span class="sxs-lookup"><span data-stu-id="02db3-1495">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.</span></span>  
  
-   <span data-ttu-id="02db3-1496">Si la variable que se está escribiendo es un objeto que contiene una cadena, `FilePut` escribe un descriptor de dos bytes que identifica el`VarType(8)` del objeto, un descriptor de dos bytes que indica la longitud de la cadena y, a continuación, escribe los datos de cadena.</span><span class="sxs-lookup"><span data-stu-id="02db3-1496">If the variable being written is an object that contains a string, `FilePut` writes a two byte descriptor identifying the`VarType(8)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data.</span></span> <span data-ttu-id="02db3-1497">La longitud de registro especificada por el `RecordLength` parámetro en el `FileOpen` función debe ser mayor que la longitud real de la cadena de al menos cuatro bytes.</span><span class="sxs-lookup"><span data-stu-id="02db3-1497">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string.</span></span> <span data-ttu-id="02db3-1498">Si desea escribir una cadena sin el descriptor, debería pasar `True` a la `StringIsFixedLength` parámetro y la cadena que lea debe tener la longitud correcta.</span><span class="sxs-lookup"><span data-stu-id="02db3-1498">If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="02db3-1499">Si la variable que se escribe es una matriz, tendrá la opción si desea escribir un descriptor para el tamaño y las dimensiones de la matriz o no.</span><span class="sxs-lookup"><span data-stu-id="02db3-1499">If the variable being written is an array, you have a choice as to whether or not to write a descriptor for the size and dimensions of the array.</span></span> <span data-ttu-id="02db3-1500">Visual Basic 6.0 y versiones anteriores escriben el descriptor de archivo para una matriz dinámica pero no para una matriz de tamaño fijo.</span><span class="sxs-lookup"><span data-stu-id="02db3-1500">Visual Basic 6.0 and earlier versions write the file descriptor for a dynamic array but not for a fixed-size array.</span></span> <span data-ttu-id="02db3-1501">De forma predeterminada, Visual Basic 2005 no escribe el descriptor.</span><span class="sxs-lookup"><span data-stu-id="02db3-1501">Visual Basic 2005 defaults to not writing the descriptor.</span></span> <span data-ttu-id="02db3-1502">Para escribir el descriptor, establezca el `ArrayIsDynamic` parámetro `True`.</span><span class="sxs-lookup"><span data-stu-id="02db3-1502">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="02db3-1503">Al escribir la matriz, se tiene que coincidir con la forma en que se leerá la matriz; Si se va a leer con el descriptor, tendrá que escribir el descriptor.</span><span class="sxs-lookup"><span data-stu-id="02db3-1503">When writing the array, you have to match the way the array will be read; if it will be read with the descriptor, you have to write the descriptor.</span></span> <span data-ttu-id="02db3-1504">El descriptor especifica el rango de la matriz, el tamaño y los límites inferiores de cada rango.</span><span class="sxs-lookup"><span data-stu-id="02db3-1504">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="02db3-1505">Su longitud es igual a 2 más 8 veces el número de dimensiones: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="02db3-1505">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="02db3-1506">La longitud de registro especificada por el `RecordLength` cláusula en la `FileOpen` función debe ser mayor o igual a la suma de todos los bytes necesarios para escribir los datos de matriz y el descriptor de matriz.</span><span class="sxs-lookup"><span data-stu-id="02db3-1506">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="02db3-1507">Por ejemplo, la siguiente declaración de matriz requiere 218 bytes cuando se escribe la matriz en el disco.</span><span class="sxs-lookup"><span data-stu-id="02db3-1507">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#43](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#43)]  
  
-   <span data-ttu-id="02db3-1508">Si la variable que se escribe es cualquier otro tipo de variable (no una cadena de longitud variable o un objeto), `FilePut` escribe sólo los datos de la variable.</span><span class="sxs-lookup"><span data-stu-id="02db3-1508">If the variable being written is any other type of variable (not a variable-length string or an object), `FilePut` writes only the variable data.</span></span> <span data-ttu-id="02db3-1509">La longitud de registro especificada por el `RecordLength` cláusula en la `FileOpen` función debe ser mayor o igual que la longitud de los datos que se va a escribir.</span><span class="sxs-lookup"><span data-stu-id="02db3-1509">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being written.</span></span>  
  
-   <span data-ttu-id="02db3-1510">`FilePut` escribe elementos de estructuras como si cada uno se escribieron individualmente, excepto que no hay ningún relleno entre los elementos.</span><span class="sxs-lookup"><span data-stu-id="02db3-1510">`FilePut` writes elements of structures as if each were written individually, except there is no padding between elements.</span></span> <span data-ttu-id="02db3-1511">El `VBFixedString` atributo puede aplicarse a campos de cadena de las estructuras para indicar el tamaño de la cadena cuando se escribe en el disco.</span><span class="sxs-lookup"><span data-stu-id="02db3-1511">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of the string when written to disk.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="02db3-1512">Cadena de los campos que tienen más bytes que el especificado por el `VBFixedString` atributo se truncan cuando se escribe en el disco,</span><span class="sxs-lookup"><span data-stu-id="02db3-1512">String fields that have more bytes than specified by the `VBFixedString` attribute are truncated when written to disk,</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="02db3-1513">Modo binario</span><span class="sxs-lookup"><span data-stu-id="02db3-1513">Binary Mode</span></span>  
 <span data-ttu-id="02db3-1514">De los archivos abiertos en `Binary` modo, la mayoría de los `Random` se aplican las reglas de modo, con algunas excepciones.</span><span class="sxs-lookup"><span data-stu-id="02db3-1514">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="02db3-1515">Las siguientes reglas para los archivos abiertos en `Binary` modo difieren de las reglas para `Random` modo:</span><span class="sxs-lookup"><span data-stu-id="02db3-1515">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="02db3-1516">El `RecordLength` cláusula en la `FileOpen` función no tiene ningún efecto.</span><span class="sxs-lookup"><span data-stu-id="02db3-1516">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="02db3-1517">`FilePut` escribe todas las variables en el disco de forma contigua, es decir, sin relleno entre los registros.</span><span class="sxs-lookup"><span data-stu-id="02db3-1517">`FilePut` writes all variables to disk contiguously, that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="02db3-1518">Para cualquier matriz que no sea una matriz en una estructura, `FilePut` escribe sólo los datos.</span><span class="sxs-lookup"><span data-stu-id="02db3-1518">For any array other than an array in a structure, `FilePut` writes only the data.</span></span> <span data-ttu-id="02db3-1519">No se escribe ningún descriptor.</span><span class="sxs-lookup"><span data-stu-id="02db3-1519">No descriptor is written.</span></span>  
  
-   <span data-ttu-id="02db3-1520">`FilePut` Escribe cadenas de longitud variable que no sean elementos de estructuras sin el descriptor de longitud de dos bytes.</span><span class="sxs-lookup"><span data-stu-id="02db3-1520">`FilePut` writes variable-length strings that are not elements of structures without the two-byte length descriptor.</span></span> <span data-ttu-id="02db3-1521">El número de bytes escritos es igual al número de caracteres de la cadena.</span><span class="sxs-lookup"><span data-stu-id="02db3-1521">The number of bytes written equals the number of characters in the string.</span></span> <span data-ttu-id="02db3-1522">Por ejemplo, las siguientes instrucciones escriben 11 bytes en el archivo número 1:</span><span class="sxs-lookup"><span data-stu-id="02db3-1522">For example, the following statements write 11 bytes to file number 1:</span></span>  
  
     [!code-vb[VbVbalrCatRef#44](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#44)]  
  
-   <span data-ttu-id="02db3-1523">Escribir en un archivo mediante el uso de la `FilePut` función requiere `Write` acceso desde el <xref:System.Security.Permissions.FileIOPermissionAccess> enumeración.</span><span class="sxs-lookup"><span data-stu-id="02db3-1523">Writing to a file by using the `FilePut` function requires `Write` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="02db3-1524">Este ejemplo se usa el `FilePut` función para escribir datos en un archivo.</span><span class="sxs-lookup"><span data-stu-id="02db3-1524">This example uses the `FilePut` function to write data to a file.</span></span> <span data-ttu-id="02db3-1525">Cinco registros de la estructura `Person` se escriben en el archivo.</span><span class="sxs-lookup"><span data-stu-id="02db3-1525">Five records of the structure `Person` are written to the file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#42](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#42)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="02db3-1526">
            <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-1526">
              <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="02db3-1527">File mode is invalid.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-1527">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Len(System.UInt16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
      </Docs>
    </Member>
    <Member MemberName="FilePut">
      <MemberSignature Language="C#" Value="public static void FilePut (int FileNumber, int Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FilePut(int32 FileNumber, int32 Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.Int32,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FilePut (FileNumber As Integer, Value As Integer, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FilePut : int * int * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FilePut (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Int32" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="02db3-1528">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-1528">Required.</span>
          </span>
          <span data-ttu-id="02db3-1529">Any valid file number.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-1529">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="02db3-1530">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-1530">Required.</span>
          </span>
          <span data-ttu-id="02db3-1531">Valid variable name that contains data written to disk.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-1531">Valid variable name that contains data written to disk.</span>
          </span>
        </param>
        <param name="RecordNumber">
          <span data-ttu-id="02db3-1532">Optional.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-1532">Optional.</span>
          </span>
          <span data-ttu-id="02db3-1533">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-1533">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="02db3-1534">Writes data from a variable to a disk file.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-1534">Writes data from a variable to a disk file.</span>
          </span>
          <span data-ttu-id="02db3-1535">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-1535">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span>
          </span>
          <span data-ttu-id="02db3-1536">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-1536">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="02db3-1537">`FilePut` solo es válido en `Random` y `Binary` modo.</span><span class="sxs-lookup"><span data-stu-id="02db3-1537">`FilePut` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="02db3-1538">Los datos escritos con `FilePut` normalmente se leen desde un archivo mediante `FileGet`.</span><span class="sxs-lookup"><span data-stu-id="02db3-1538">Data written with `FilePut` is usually read from a file by using `FileGet`.</span></span>  
  
 <span data-ttu-id="02db3-1539">El primer registro o byte de un archivo está en la posición 1, el segundo registro o byte en la posición 2 y así sucesivamente.</span><span class="sxs-lookup"><span data-stu-id="02db3-1539">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="02db3-1540">Si se omite `RecordNumber`, el siguiente registro o byte después del último `FileGet` o `FilePut` función o apunta a la última `Seek` se escribe la función.</span><span class="sxs-lookup"><span data-stu-id="02db3-1540">If you omit `RecordNumber`, the next record or byte after the last `FileGet` or `FilePut` function or pointed to by the last `Seek` function is written.</span></span>  
  
 <span data-ttu-id="02db3-1541">El `StringIsFixedLength` argumento controla si la función interpreta las cadenas como longitud fija o variable.</span><span class="sxs-lookup"><span data-stu-id="02db3-1541">The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length.</span></span> <span data-ttu-id="02db3-1542">`FilePut` no escribe el descriptor de longitud cuando el argumento es `True`.</span><span class="sxs-lookup"><span data-stu-id="02db3-1542">`FilePut` does not write the length descriptor when the argument is `True`.</span></span> <span data-ttu-id="02db3-1543">Si usas `StringIsFixedLength`  =  `True` con `FilePut`, tendrá que hacer lo mismo con `FileGet`, y tiene que asegurarse de que la cadena se inicializa con la longitud esperada.</span><span class="sxs-lookup"><span data-stu-id="02db3-1543">If you use `StringIsFixedLength` = `True` with `FilePut`, you have to do the same with `FileGet`, and you have to make sure that the string is initialized to the length expected.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="02db3-1544">Modo aleatorio</span><span class="sxs-lookup"><span data-stu-id="02db3-1544">Random Mode</span></span>  
 <span data-ttu-id="02db3-1545">De los archivos abiertos en `Random` modo, se aplican las reglas siguientes:</span><span class="sxs-lookup"><span data-stu-id="02db3-1545">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="02db3-1546">Si la longitud de los datos que se va a escribir es menor que la longitud especificada en el `RecordLength` cláusula de la `FileOpen` función, `FilePut` escribirá los registros posteriores en los límites de longitud de registro.</span><span class="sxs-lookup"><span data-stu-id="02db3-1546">If the length of the data being written is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FilePut` writes subsequent records on record-length boundaries.</span></span> <span data-ttu-id="02db3-1547">El espacio entre el final de un registro y el inicio del siguiente registro se rellena con el contenido existente del búfer del archivo.</span><span class="sxs-lookup"><span data-stu-id="02db3-1547">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="02db3-1548">Como la cantidad de datos de relleno no se puede determinar con certeza, suele ser una buena idea tener la longitud del registro coincide con la longitud de los datos que se va a escribir.</span><span class="sxs-lookup"><span data-stu-id="02db3-1548">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being written.</span></span> <span data-ttu-id="02db3-1549">Si la longitud de los datos que se va a escribir es mayor que la longitud especificada en el `RecordLength` cláusula de la `FileOpen` función, se producirá una excepción.</span><span class="sxs-lookup"><span data-stu-id="02db3-1549">If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception will be thrown.</span></span>  
  
-   <span data-ttu-id="02db3-1550">Si la variable que se está escribiendo es una cadena, `FilePut` escribe un descriptor de dos bytes que contiene la longitud de cadena y, a continuación, escribe los datos que entrarán en la variable.</span><span class="sxs-lookup"><span data-stu-id="02db3-1550">If the variable being written is a string, `FilePut` writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable.</span></span> <span data-ttu-id="02db3-1551">Por lo tanto, la longitud de registro especificada por el `RecordLength` cláusula en la `FileOpen` función debe ser mayor que la longitud real de la cadena de al menos dos bytes.</span><span class="sxs-lookup"><span data-stu-id="02db3-1551">Therefore, the record length specified by the `RecordLength` clause in the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span>  
  
-   <span data-ttu-id="02db3-1552">Si la variable que se está escribiendo es un objeto que contiene un tipo numérico, `FilePut` escribe dos bytes para identificar el `VarType` del objeto y, a continuación, escribe la variable.</span><span class="sxs-lookup"><span data-stu-id="02db3-1552">If the variable being written is an object that contains a numeric type, `FilePut` writes two bytes identifying the `VarType` of the object and then writes the variable.</span></span> <span data-ttu-id="02db3-1553">Por ejemplo, al escribir un objeto que contiene un entero, `FilePut` escribe seis bytes: dos bytes que identifican el objeto como `VarType(3)` (`Integer`) y cuatro bytes que contienen los datos.</span><span class="sxs-lookup"><span data-stu-id="02db3-1553">For example, when writing an object that contains an integer, `FilePut` writes six bytes: two bytes that identify the object as `VarType(3)` (`Integer`) and four bytes that contain the data.</span></span> <span data-ttu-id="02db3-1554">La longitud de registro especificada por el `RecordLength` parámetro en el `FileOpen` función debe ser mayor que el número real de bytes necesarios para almacenar la variable al menos dos bytes.</span><span class="sxs-lookup"><span data-stu-id="02db3-1554">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.</span></span>  
  
-   <span data-ttu-id="02db3-1555">Si la variable que se está escribiendo es un objeto que contiene una cadena, `FilePut` escribe un descriptor de dos bytes que identifica el `VarType(8)` del objeto, un descriptor de dos bytes que indica la longitud de la cadena y, a continuación, escribe los datos de cadena.</span><span class="sxs-lookup"><span data-stu-id="02db3-1555">If the variable being written is an object that contains a string, `FilePut` writes a two byte descriptor identifying the `VarType(8)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data.</span></span> <span data-ttu-id="02db3-1556">La longitud de registro especificada por el `RecordLength` parámetro en el `FileOpen` función debe ser mayor que la longitud real de la cadena de al menos cuatro bytes.</span><span class="sxs-lookup"><span data-stu-id="02db3-1556">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string.</span></span> <span data-ttu-id="02db3-1557">Si desea escribir una cadena sin el descriptor, debería pasar `True` a la `StringIsFixedLength` parámetro y la cadena que lea debe tener la longitud correcta.</span><span class="sxs-lookup"><span data-stu-id="02db3-1557">If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="02db3-1558">Si la variable que se escribe es una matriz, tendrá la opción si desea escribir un descriptor para el tamaño y las dimensiones de la matriz o no.</span><span class="sxs-lookup"><span data-stu-id="02db3-1558">If the variable being written is an array, you have a choice as to whether or not to write a descriptor for the size and dimensions of the array.</span></span> <span data-ttu-id="02db3-1559">Visual Basic 6.0 y versiones anteriores escriben el descriptor de archivo para una matriz dinámica pero no para una matriz de tamaño fijo.</span><span class="sxs-lookup"><span data-stu-id="02db3-1559">Visual Basic 6.0 and earlier versions write the file descriptor for a dynamic array but not for a fixed-size array.</span></span> <span data-ttu-id="02db3-1560">De forma predeterminada, Visual Basic 2005 no escribe el descriptor.</span><span class="sxs-lookup"><span data-stu-id="02db3-1560">Visual Basic 2005 defaults to not writing the descriptor.</span></span> <span data-ttu-id="02db3-1561">Para escribir el descriptor, establezca el `ArrayIsDynamic` parámetro `True`.</span><span class="sxs-lookup"><span data-stu-id="02db3-1561">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="02db3-1562">Al escribir la matriz, se tiene que coincidir con la forma en que se leerá la matriz; Si se va a leer con el descriptor, tendrá que escribir el descriptor.</span><span class="sxs-lookup"><span data-stu-id="02db3-1562">When writing the array, you have to match the way the array will be read; if it will be read with the descriptor, you have to write the descriptor.</span></span> <span data-ttu-id="02db3-1563">El descriptor especifica el rango de la matriz, el tamaño y los límites inferiores de cada rango.</span><span class="sxs-lookup"><span data-stu-id="02db3-1563">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="02db3-1564">Su longitud es igual a 2 más 8 veces el número de dimensiones: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="02db3-1564">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="02db3-1565">La longitud de registro especificada por el `RecordLength` cláusula en la `FileOpen` función debe ser mayor o igual a la suma de todos los bytes necesarios para escribir los datos de matriz y el descriptor de matriz.</span><span class="sxs-lookup"><span data-stu-id="02db3-1565">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="02db3-1566">Por ejemplo, la siguiente declaración de matriz requiere 218 bytes cuando se escribe la matriz en el disco.</span><span class="sxs-lookup"><span data-stu-id="02db3-1566">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#43](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#43)]  
  
-   <span data-ttu-id="02db3-1567">Si la variable que se escribe es cualquier otro tipo de variable (no una cadena de longitud variable o un objeto), `FilePut` escribe sólo los datos de la variable.</span><span class="sxs-lookup"><span data-stu-id="02db3-1567">If the variable being written is any other type of variable (not a variable-length string or an object), `FilePut` writes only the variable data.</span></span> <span data-ttu-id="02db3-1568">La longitud de registro especificada por el `RecordLength` cláusula en la `FileOpen` función debe ser mayor o igual que la longitud de los datos que se va a escribir.</span><span class="sxs-lookup"><span data-stu-id="02db3-1568">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being written.</span></span>  
  
-   <span data-ttu-id="02db3-1569">`FilePut` escribe elementos de estructuras como si cada uno se escribieron individualmente, excepto que no hay ningún relleno entre los elementos.</span><span class="sxs-lookup"><span data-stu-id="02db3-1569">`FilePut` writes elements of structures as if each were written individually, except there is no padding between elements.</span></span> <span data-ttu-id="02db3-1570">El `VBFixedString` atributo puede aplicarse a campos de cadena de las estructuras para indicar el tamaño de la cadena cuando se escribe en el disco.</span><span class="sxs-lookup"><span data-stu-id="02db3-1570">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of the string when written to disk.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="02db3-1571">Cadena de los campos que tienen más bytes que el especificado por el `VBFixedString` atributo se truncan cuando se escribe en el disco,</span><span class="sxs-lookup"><span data-stu-id="02db3-1571">String fields that have more bytes than specified by the `VBFixedString` attribute are truncated when written to disk,</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="02db3-1572">Modo binario</span><span class="sxs-lookup"><span data-stu-id="02db3-1572">Binary Mode</span></span>  
 <span data-ttu-id="02db3-1573">De los archivos abiertos en `Binary` modo, la mayoría de los `Random` se aplican las reglas de modo, con algunas excepciones.</span><span class="sxs-lookup"><span data-stu-id="02db3-1573">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="02db3-1574">Las siguientes reglas para los archivos abiertos en `Binary` modo difieren de las reglas para `Random` modo:</span><span class="sxs-lookup"><span data-stu-id="02db3-1574">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="02db3-1575">El `RecordLength` cláusula en la `FileOpen` función no tiene ningún efecto.</span><span class="sxs-lookup"><span data-stu-id="02db3-1575">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="02db3-1576">`FilePut` escribe todas las variables en el disco de forma contigua, es decir, sin relleno entre los registros.</span><span class="sxs-lookup"><span data-stu-id="02db3-1576">`FilePut` writes all variables to disk contiguously, that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="02db3-1577">Para cualquier matriz que no sea una matriz en una estructura, `FilePut` escribe sólo los datos.</span><span class="sxs-lookup"><span data-stu-id="02db3-1577">For any array other than an array in a structure, `FilePut` writes only the data.</span></span> <span data-ttu-id="02db3-1578">No se escribe ningún descriptor.</span><span class="sxs-lookup"><span data-stu-id="02db3-1578">No descriptor is written.</span></span>  
  
-   <span data-ttu-id="02db3-1579">`FilePut` Escribe cadenas de longitud variable que no sean elementos de estructuras sin el descriptor de longitud de dos bytes.</span><span class="sxs-lookup"><span data-stu-id="02db3-1579">`FilePut` writes variable-length strings that are not elements of structures without the two-byte length descriptor.</span></span> <span data-ttu-id="02db3-1580">El número de bytes escritos es igual al número de caracteres de la cadena.</span><span class="sxs-lookup"><span data-stu-id="02db3-1580">The number of bytes written equals the number of characters in the string.</span></span> <span data-ttu-id="02db3-1581">Por ejemplo, las siguientes instrucciones escriben 11 bytes en el archivo número 1:</span><span class="sxs-lookup"><span data-stu-id="02db3-1581">For example, the following statements write 11 bytes to file number 1:</span></span>  
  
     [!code-vb[VbVbalrCatRef#44](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#44)]  
  
-   <span data-ttu-id="02db3-1582">Escribir en un archivo mediante el uso de la `FilePut` función requiere `Write` acceso desde el <xref:System.Security.Permissions.FileIOPermissionAccess> enumeración.</span><span class="sxs-lookup"><span data-stu-id="02db3-1582">Writing to a file by using the `FilePut` function requires `Write` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="02db3-1583">Este ejemplo se usa el `FilePut` función para escribir datos en un archivo.</span><span class="sxs-lookup"><span data-stu-id="02db3-1583">This example uses the `FilePut` function to write data to a file.</span></span> <span data-ttu-id="02db3-1584">Cinco registros de la estructura `Person` se escriben en el archivo.</span><span class="sxs-lookup"><span data-stu-id="02db3-1584">Five records of the structure `Person` are written to the file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#42](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#42)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="02db3-1585">
            <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-1585">
              <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="02db3-1586">File mode is invalid.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-1586">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Len(System.UInt16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
      </Docs>
    </Member>
    <Member MemberName="FilePut">
      <MemberSignature Language="C#" Value="public static void FilePut (int FileNumber, long Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FilePut(int32 FileNumber, int64 Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.Int64,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FilePut (FileNumber As Integer, Value As Long, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FilePut : int * int64 * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FilePut (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Int64" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="02db3-1587">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-1587">Required.</span>
          </span>
          <span data-ttu-id="02db3-1588">Any valid file number.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-1588">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="02db3-1589">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-1589">Required.</span>
          </span>
          <span data-ttu-id="02db3-1590">Valid variable name that contains data written to disk.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-1590">Valid variable name that contains data written to disk.</span>
          </span>
        </param>
        <param name="RecordNumber">
          <span data-ttu-id="02db3-1591">Optional.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-1591">Optional.</span>
          </span>
          <span data-ttu-id="02db3-1592">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-1592">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="02db3-1593">Writes data from a variable to a disk file.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-1593">Writes data from a variable to a disk file.</span>
          </span>
          <span data-ttu-id="02db3-1594">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-1594">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span>
          </span>
          <span data-ttu-id="02db3-1595">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-1595">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="02db3-1596">`FilePut` solo es válido en `Random` y `Binary` modo.</span><span class="sxs-lookup"><span data-stu-id="02db3-1596">`FilePut` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="02db3-1597">Los datos escritos con `FilePut` normalmente se leen desde un archivo mediante `FileGet`.</span><span class="sxs-lookup"><span data-stu-id="02db3-1597">Data written with `FilePut` is usually read from a file by using `FileGet`.</span></span>  
  
 <span data-ttu-id="02db3-1598">El primer registro o byte de un archivo está en la posición 1, el segundo registro o byte en la posición 2 y así sucesivamente.</span><span class="sxs-lookup"><span data-stu-id="02db3-1598">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="02db3-1599">Si se omite `RecordNumber`, el siguiente registro o byte después del último `FileGet` o `FilePut` función o apunta a la última `Seek` se escribe la función.</span><span class="sxs-lookup"><span data-stu-id="02db3-1599">If you omit `RecordNumber`, the next record or byte after the last `FileGet` or `FilePut` function or pointed to by the last `Seek` function is written.</span></span>  
  
 <span data-ttu-id="02db3-1600">El `StringIsFixedLength` argumento controla si la función interpreta las cadenas como longitud fija o variable.</span><span class="sxs-lookup"><span data-stu-id="02db3-1600">The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length.</span></span> <span data-ttu-id="02db3-1601">`FilePut` no escribe el descriptor de longitud cuando el argumento es `True`.</span><span class="sxs-lookup"><span data-stu-id="02db3-1601">`FilePut` does not write the length descriptor when the argument is `True`.</span></span> <span data-ttu-id="02db3-1602">Si usas `StringIsFixedLength`  =  `True` con `FilePut`, tendrá que hacer lo mismo con `FileGet`, y tiene que asegurarse de que la cadena se inicializa con la longitud esperada.</span><span class="sxs-lookup"><span data-stu-id="02db3-1602">If you use `StringIsFixedLength` = `True` with `FilePut`, you have to do the same with `FileGet`, and you have to make sure that the string is initialized to the length expected.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="02db3-1603">Modo aleatorio</span><span class="sxs-lookup"><span data-stu-id="02db3-1603">Random Mode</span></span>  
 <span data-ttu-id="02db3-1604">De los archivos abiertos en `Random` modo, se aplican las reglas siguientes:</span><span class="sxs-lookup"><span data-stu-id="02db3-1604">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="02db3-1605">Si la longitud de los datos que se va a escribir es menor que la longitud especificada en el `RecordLength` cláusula de la `FileOpen` función, `FilePut` escribirá los registros posteriores en los límites de longitud de registro.</span><span class="sxs-lookup"><span data-stu-id="02db3-1605">If the length of the data being written is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FilePut` writes subsequent records on record-length boundaries.</span></span> <span data-ttu-id="02db3-1606">El espacio entre el final de un registro y el inicio del siguiente registro se rellena con el contenido existente del búfer del archivo.</span><span class="sxs-lookup"><span data-stu-id="02db3-1606">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="02db3-1607">Como la cantidad de datos de relleno no se puede determinar con certeza, suele ser una buena idea tener la longitud del registro coincide con la longitud de los datos que se va a escribir.</span><span class="sxs-lookup"><span data-stu-id="02db3-1607">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being written.</span></span> <span data-ttu-id="02db3-1608">Si la longitud de los datos que se va a escribir es mayor que la longitud especificada en el `RecordLength` cláusula de la `FileOpen` función, se producirá una excepción.</span><span class="sxs-lookup"><span data-stu-id="02db3-1608">If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception will be thrown.</span></span>  
  
-   <span data-ttu-id="02db3-1609">Si la variable que se está escribiendo es una cadena, `FilePut` escribe un descriptor de dos bytes que contiene la longitud de cadena y, a continuación, escribe los datos que entrarán en la variable.</span><span class="sxs-lookup"><span data-stu-id="02db3-1609">If the variable being written is a string, `FilePut` writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable.</span></span> <span data-ttu-id="02db3-1610">Por lo tanto, la longitud de registro especificada por el `RecordLength` cláusula en la `FileOpen` función debe ser mayor que la longitud real de la cadena de al menos dos bytes.</span><span class="sxs-lookup"><span data-stu-id="02db3-1610">Therefore, the record length specified by the `RecordLength` clause in the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span>  
  
-   <span data-ttu-id="02db3-1611">Si la variable que se está escribiendo es un objeto que contiene un tipo numérico, `FilePut` escribe dos bytes para identificar el `VarType` del objeto y, a continuación, escribe la variable.</span><span class="sxs-lookup"><span data-stu-id="02db3-1611">If the variable being written is an object that contains a numeric type, `FilePut` writes two bytes identifying the `VarType` of the object and then writes the variable.</span></span> <span data-ttu-id="02db3-1612">Por ejemplo, al escribir un objeto que contiene un entero, `FilePut` escribe seis bytes: dos bytes que identifican el objeto como `VarType(3)` (`Integer`) y cuatro bytes que contienen los datos.</span><span class="sxs-lookup"><span data-stu-id="02db3-1612">For example, when writing an object that contains an integer, `FilePut` writes six bytes: two bytes that identify the object as `VarType(3)` (`Integer`) and four bytes that contain the data.</span></span> <span data-ttu-id="02db3-1613">La longitud de registro especificada por el `RecordLength` parámetro en el `FileOpen` función debe ser mayor que el número real de bytes necesarios para almacenar la variable al menos dos bytes.</span><span class="sxs-lookup"><span data-stu-id="02db3-1613">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.</span></span>  
  
-   <span data-ttu-id="02db3-1614">Si la variable que se está escribiendo es un objeto que contiene una cadena, `FilePut` escribe un descriptor de dos bytes que identifica el `VarType(8)` del objeto, un descriptor de dos bytes que indica la longitud de la cadena y, a continuación, escribe los datos de cadena.</span><span class="sxs-lookup"><span data-stu-id="02db3-1614">If the variable being written is an object that contains a string, `FilePut` writes a two byte descriptor identifying the `VarType(8)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data.</span></span> <span data-ttu-id="02db3-1615">La longitud de registro especificada por el `RecordLength` parámetro en el `FileOpen` función debe ser mayor que la longitud real de la cadena de al menos cuatro bytes.</span><span class="sxs-lookup"><span data-stu-id="02db3-1615">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string.</span></span> <span data-ttu-id="02db3-1616">Si desea escribir una cadena sin el descriptor, debería pasar `True` a la `StringIsFixedLength` parámetro y la cadena que lea debe tener la longitud correcta.</span><span class="sxs-lookup"><span data-stu-id="02db3-1616">If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="02db3-1617">Si la variable que se escribe es una matriz, tendrá la opción si desea escribir un descriptor para el tamaño y las dimensiones de la matriz o no.</span><span class="sxs-lookup"><span data-stu-id="02db3-1617">If the variable being written is an array, you have a choice as to whether or not to write a descriptor for the size and dimensions of the array.</span></span> <span data-ttu-id="02db3-1618">Visual Basic 6.0 y versiones anteriores escriben el descriptor de archivo para una matriz dinámica pero no para una matriz de tamaño fijo.</span><span class="sxs-lookup"><span data-stu-id="02db3-1618">Visual Basic 6.0 and earlier versions write the file descriptor for a dynamic array but not for a fixed-size array.</span></span> <span data-ttu-id="02db3-1619">De forma predeterminada, Visual Basic 2005 no escribe el descriptor.</span><span class="sxs-lookup"><span data-stu-id="02db3-1619">Visual Basic 2005 defaults to not writing the descriptor.</span></span> <span data-ttu-id="02db3-1620">Para escribir el descriptor, establezca el `ArrayIsDynamic` parámetro `True`.</span><span class="sxs-lookup"><span data-stu-id="02db3-1620">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="02db3-1621">Al escribir la matriz, se tiene que coincidir con la forma en que se leerá la matriz; Si se va a leer con el descriptor, tendrá que escribir el descriptor.</span><span class="sxs-lookup"><span data-stu-id="02db3-1621">When writing the array, you have to match the way the array will be read; if it will be read with the descriptor, you have to write the descriptor.</span></span> <span data-ttu-id="02db3-1622">El descriptor especifica el rango de la matriz, el tamaño y los límites inferiores de cada rango.</span><span class="sxs-lookup"><span data-stu-id="02db3-1622">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="02db3-1623">Su longitud es igual a 2 más 8 veces el número de dimensiones: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="02db3-1623">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="02db3-1624">La longitud de registro especificada por el `RecordLength` cláusula en la `FileOpen` función debe ser mayor o igual a la suma de todos los bytes necesarios para escribir los datos de matriz y el descriptor de matriz.</span><span class="sxs-lookup"><span data-stu-id="02db3-1624">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="02db3-1625">Por ejemplo, la siguiente declaración de matriz requiere 218 bytes cuando se escribe la matriz en el disco.</span><span class="sxs-lookup"><span data-stu-id="02db3-1625">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#43](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#43)]  
  
-   <span data-ttu-id="02db3-1626">Si la variable que se escribe es cualquier otro tipo de variable (no una cadena de longitud variable o un objeto), `FilePut` escribe sólo los datos de la variable.</span><span class="sxs-lookup"><span data-stu-id="02db3-1626">If the variable being written is any other type of variable (not a variable-length string or an object), `FilePut` writes only the variable data.</span></span> <span data-ttu-id="02db3-1627">La longitud de registro especificada por el `RecordLength` cláusula en la `FileOpen` función debe ser mayor o igual que la longitud de los datos que se va a escribir.</span><span class="sxs-lookup"><span data-stu-id="02db3-1627">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being written.</span></span>  
  
-   <span data-ttu-id="02db3-1628">`FilePut` escribe elementos de estructuras como si cada uno se escribieron individualmente, excepto que no hay ningún relleno entre los elementos.</span><span class="sxs-lookup"><span data-stu-id="02db3-1628">`FilePut` writes elements of structures as if each were written individually, except there is no padding between elements.</span></span> <span data-ttu-id="02db3-1629">El `VBFixedString` atributo puede aplicarse a campos de cadena de las estructuras para indicar el tamaño de la cadena cuando se escribe en el disco.</span><span class="sxs-lookup"><span data-stu-id="02db3-1629">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of the string when written to disk.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="02db3-1630">Cadena de los campos que tienen más bytes que el especificado por el `VBFixedString` atributo se truncan cuando se escribe en el disco,</span><span class="sxs-lookup"><span data-stu-id="02db3-1630">String fields that have more bytes than specified by the `VBFixedString` attribute are truncated when written to disk,</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="02db3-1631">Modo binario</span><span class="sxs-lookup"><span data-stu-id="02db3-1631">Binary Mode</span></span>  
 <span data-ttu-id="02db3-1632">De los archivos abiertos en `Binary` modo, la mayoría de los `Random` se aplican las reglas de modo, con algunas excepciones.</span><span class="sxs-lookup"><span data-stu-id="02db3-1632">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="02db3-1633">Las siguientes reglas para los archivos abiertos en `Binary` modo difieren de las reglas para `Random` modo:</span><span class="sxs-lookup"><span data-stu-id="02db3-1633">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="02db3-1634">El `RecordLength` cláusula en la `FileOpen` función no tiene ningún efecto.</span><span class="sxs-lookup"><span data-stu-id="02db3-1634">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="02db3-1635">`FilePut` escribe todas las variables en el disco de forma contigua, es decir, sin relleno entre los registros.</span><span class="sxs-lookup"><span data-stu-id="02db3-1635">`FilePut` writes all variables to disk contiguously, that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="02db3-1636">Para cualquier matriz que no sea una matriz en una estructura, `FilePut` escribe sólo los datos.</span><span class="sxs-lookup"><span data-stu-id="02db3-1636">For any array other than an array in a structure, `FilePut` writes only the data.</span></span> <span data-ttu-id="02db3-1637">No se escribe ningún descriptor.</span><span class="sxs-lookup"><span data-stu-id="02db3-1637">No descriptor is written.</span></span>  
  
-   <span data-ttu-id="02db3-1638">`FilePut` Escribe cadenas de longitud variable que no sean elementos de estructuras sin el descriptor de longitud de dos bytes.</span><span class="sxs-lookup"><span data-stu-id="02db3-1638">`FilePut` writes variable-length strings that are not elements of structures without the two-byte length descriptor.</span></span> <span data-ttu-id="02db3-1639">El número de bytes escritos es igual al número de caracteres de la cadena.</span><span class="sxs-lookup"><span data-stu-id="02db3-1639">The number of bytes written equals the number of characters in the string.</span></span> <span data-ttu-id="02db3-1640">Por ejemplo, las siguientes instrucciones escriben 11 bytes en el archivo número 1:</span><span class="sxs-lookup"><span data-stu-id="02db3-1640">For example, the following statements write 11 bytes to file number 1:</span></span>  
  
     [!code-vb[VbVbalrCatRef#44](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#44)]  
  
-   <span data-ttu-id="02db3-1641">Escribir en un archivo mediante el uso de la `FilePut` función requiere `Write` acceso desde el <xref:System.Security.Permissions.FileIOPermissionAccess> enumeración.</span><span class="sxs-lookup"><span data-stu-id="02db3-1641">Writing to a file by using the `FilePut` function requires `Write` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="02db3-1642">Este ejemplo se usa el `FilePut` función para escribir datos en un archivo.</span><span class="sxs-lookup"><span data-stu-id="02db3-1642">This example uses the `FilePut` function to write data to a file.</span></span> <span data-ttu-id="02db3-1643">Cinco registros de la estructura `Person` se escriben en el archivo.</span><span class="sxs-lookup"><span data-stu-id="02db3-1643">Five records of the structure `Person` are written to the file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#42](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#42)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="02db3-1644">
            <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-1644">
              <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="02db3-1645">File mode is invalid.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-1645">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Len(System.UInt16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
      </Docs>
    </Member>
    <Member MemberName="FilePut">
      <MemberSignature Language="C#" Value="public static void FilePut (int FileNumber, float Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FilePut(int32 FileNumber, float32 Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.Single,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FilePut (FileNumber As Integer, Value As Single, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FilePut : int * single * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FilePut (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Single" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="02db3-1646">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-1646">Required.</span>
          </span>
          <span data-ttu-id="02db3-1647">Any valid file number.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-1647">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="02db3-1648">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-1648">Required.</span>
          </span>
          <span data-ttu-id="02db3-1649">Valid variable name that contains data written to disk.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-1649">Valid variable name that contains data written to disk.</span>
          </span>
        </param>
        <param name="RecordNumber">
          <span data-ttu-id="02db3-1650">Optional.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-1650">Optional.</span>
          </span>
          <span data-ttu-id="02db3-1651">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-1651">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="02db3-1652">Writes data from a variable to a disk file.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-1652">Writes data from a variable to a disk file.</span>
          </span>
          <span data-ttu-id="02db3-1653">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-1653">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span>
          </span>
          <span data-ttu-id="02db3-1654">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-1654">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="02db3-1655">`FilePut` solo es válido en `Random` y `Binary` modo.</span><span class="sxs-lookup"><span data-stu-id="02db3-1655">`FilePut` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="02db3-1656">Los datos escritos con `FilePut` normalmente se leen desde un archivo mediante `FileGet`.</span><span class="sxs-lookup"><span data-stu-id="02db3-1656">Data written with `FilePut` is usually read from a file by using `FileGet`.</span></span>  
  
 <span data-ttu-id="02db3-1657">El primer registro o byte de un archivo está en la posición 1, el segundo registro o byte en la posición 2 y así sucesivamente.</span><span class="sxs-lookup"><span data-stu-id="02db3-1657">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="02db3-1658">Si se omite `RecordNumber`, el siguiente registro o byte después del último `FileGet` o `FilePut` función o apunta a la última `Seek` se escribe la función.</span><span class="sxs-lookup"><span data-stu-id="02db3-1658">If you omit `RecordNumber`, the next record or byte after the last `FileGet` or `FilePut` function or pointed to by the last `Seek` function is written.</span></span>  
  
 <span data-ttu-id="02db3-1659">El `StringIsFixedLength` argumento controla si la función interpreta las cadenas como longitud fija o variable.</span><span class="sxs-lookup"><span data-stu-id="02db3-1659">The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length.</span></span> <span data-ttu-id="02db3-1660">`FilePut` no escribe el descriptor de longitud cuando el argumento es `True`.</span><span class="sxs-lookup"><span data-stu-id="02db3-1660">`FilePut` does not write the length descriptor when the argument is `True`.</span></span> <span data-ttu-id="02db3-1661">Si usas `StringIsFixedLength`  =  `True` con `FilePut`, tendrá que hacer lo mismo con `FileGet`, y tiene que asegurarse de que la cadena se inicializa con la longitud esperada.</span><span class="sxs-lookup"><span data-stu-id="02db3-1661">If you use `StringIsFixedLength` = `True` with `FilePut`, you have to do the same with `FileGet`, and you have to make sure that the string is initialized to the length expected.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="02db3-1662">Modo aleatorio</span><span class="sxs-lookup"><span data-stu-id="02db3-1662">Random Mode</span></span>  
 <span data-ttu-id="02db3-1663">De los archivos abiertos en `Random` modo, se aplican las reglas siguientes:</span><span class="sxs-lookup"><span data-stu-id="02db3-1663">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="02db3-1664">Si la longitud de los datos que se va a escribir es menor que la longitud especificada en el `RecordLength` cláusula de la `FileOpen` función, `FilePut` escribirá los registros posteriores en los límites de longitud de registro.</span><span class="sxs-lookup"><span data-stu-id="02db3-1664">If the length of the data being written is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FilePut` writes subsequent records on record-length boundaries.</span></span> <span data-ttu-id="02db3-1665">El espacio entre el final de un registro y el inicio del siguiente registro se rellena con el contenido existente del búfer del archivo.</span><span class="sxs-lookup"><span data-stu-id="02db3-1665">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="02db3-1666">Como la cantidad de datos de relleno no se puede determinar con certeza, suele ser una buena idea tener la longitud del registro coincide con la longitud de los datos que se va a escribir.</span><span class="sxs-lookup"><span data-stu-id="02db3-1666">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being written.</span></span> <span data-ttu-id="02db3-1667">Si la longitud de los datos que se va a escribir es mayor que la longitud especificada en el `RecordLength` cláusula de la `FileOpen` función, se producirá una excepción.</span><span class="sxs-lookup"><span data-stu-id="02db3-1667">If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception will be thrown.</span></span>  
  
-   <span data-ttu-id="02db3-1668">Si la variable que se está escribiendo es una cadena, `FilePut` escribe un descriptor de dos bytes que contiene la longitud de cadena y, a continuación, escribe los datos que entrarán en la variable.</span><span class="sxs-lookup"><span data-stu-id="02db3-1668">If the variable being written is a string, `FilePut` writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable.</span></span> <span data-ttu-id="02db3-1669">Por lo tanto, la longitud de registro especificada por el `RecordLength` cláusula en la `FileOpen` función debe ser mayor que la longitud real de la cadena de al menos dos bytes.</span><span class="sxs-lookup"><span data-stu-id="02db3-1669">Therefore, the record length specified by the `RecordLength` clause in the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span>  
  
-   <span data-ttu-id="02db3-1670">Si la variable que se está escribiendo es un objeto que contiene un tipo numérico, `FilePut` escribe dos bytes para identificar el `VarType` del objeto y, a continuación, escribe la variable.</span><span class="sxs-lookup"><span data-stu-id="02db3-1670">If the variable being written is an object that contains a numeric type, `FilePut` writes two bytes identifying the `VarType` of the object and then writes the variable.</span></span> <span data-ttu-id="02db3-1671">Por ejemplo, al escribir un objeto que contiene un entero, `FilePut` escribe seis bytes: dos bytes que identifican el objeto como `VarType(3)` (`Integer`) y cuatro bytes que contienen los datos.</span><span class="sxs-lookup"><span data-stu-id="02db3-1671">For example, when writing an object that contains an integer, `FilePut` writes six bytes: two bytes that identify the object as `VarType(3)` (`Integer`) and four bytes that contain the data.</span></span> <span data-ttu-id="02db3-1672">La longitud de registro especificada por el `RecordLength` parámetro en el `FileOpen` función debe ser mayor que el número real de bytes necesarios para almacenar la variable al menos dos bytes.</span><span class="sxs-lookup"><span data-stu-id="02db3-1672">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.</span></span>  
  
-   <span data-ttu-id="02db3-1673">Si la variable que se está escribiendo es un objeto que contiene una cadena, `FilePut` escribe un descriptor de dos bytes que identifica el `VarType(8)` del objeto, un descriptor de dos bytes que indica la longitud de la cadena y, a continuación, escribe los datos de cadena.</span><span class="sxs-lookup"><span data-stu-id="02db3-1673">If the variable being written is an object that contains a string, `FilePut` writes a two byte descriptor identifying the `VarType(8)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data.</span></span> <span data-ttu-id="02db3-1674">La longitud de registro especificada por el `RecordLength` parámetro en el `FileOpen` función debe ser mayor que la longitud real de la cadena de al menos cuatro bytes.</span><span class="sxs-lookup"><span data-stu-id="02db3-1674">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string.</span></span> <span data-ttu-id="02db3-1675">Si desea escribir una cadena sin el descriptor, debería pasar `True` a la `StringIsFixedLength` parámetro y la cadena que lea debe tener la longitud correcta.</span><span class="sxs-lookup"><span data-stu-id="02db3-1675">If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="02db3-1676">Si la variable que se escribe es una matriz, tendrá la opción si desea escribir un descriptor para el tamaño y las dimensiones de la matriz o no.</span><span class="sxs-lookup"><span data-stu-id="02db3-1676">If the variable being written is an array, you have a choice as to whether or not to write a descriptor for the size and dimensions of the array.</span></span> <span data-ttu-id="02db3-1677">Visual Basic 6.0 y versiones anteriores escriben el descriptor de archivo para una matriz dinámica pero no para una matriz de tamaño fijo.</span><span class="sxs-lookup"><span data-stu-id="02db3-1677">Visual Basic 6.0 and earlier versions write the file descriptor for a dynamic array but not for a fixed-size array.</span></span> <span data-ttu-id="02db3-1678">De forma predeterminada, Visual Basic 2005 no escribe el descriptor.</span><span class="sxs-lookup"><span data-stu-id="02db3-1678">Visual Basic 2005 defaults to not writing the descriptor.</span></span> <span data-ttu-id="02db3-1679">Para escribir el descriptor, establezca el `ArrayIsDynamic` parámetro `True`.</span><span class="sxs-lookup"><span data-stu-id="02db3-1679">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="02db3-1680">Al escribir la matriz, se tiene que coincidir con la forma en que se leerá la matriz; Si se va a leer con el descriptor, tendrá que escribir el descriptor.</span><span class="sxs-lookup"><span data-stu-id="02db3-1680">When writing the array, you have to match the way the array will be read; if it will be read with the descriptor, you have to write the descriptor.</span></span> <span data-ttu-id="02db3-1681">El descriptor especifica el rango de la matriz, el tamaño y los límites inferiores de cada rango.</span><span class="sxs-lookup"><span data-stu-id="02db3-1681">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="02db3-1682">Su longitud es igual a 2 más 8 veces el número de dimensiones: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="02db3-1682">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="02db3-1683">La longitud de registro especificada por el `RecordLength` cláusula en la `FileOpen` función debe ser mayor o igual a la suma de todos los bytes necesarios para escribir los datos de matriz y el descriptor de matriz.</span><span class="sxs-lookup"><span data-stu-id="02db3-1683">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="02db3-1684">Por ejemplo, la siguiente declaración de matriz requiere 218 bytes cuando se escribe la matriz en el disco.</span><span class="sxs-lookup"><span data-stu-id="02db3-1684">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#43](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#43)]  
  
-   <span data-ttu-id="02db3-1685">Si la variable que se escribe es cualquier otro tipo de variable (no una cadena de longitud variable o un objeto), `FilePut` escribe sólo los datos de la variable.</span><span class="sxs-lookup"><span data-stu-id="02db3-1685">If the variable being written is any other type of variable (not a variable-length string or an object), `FilePut` writes only the variable data.</span></span> <span data-ttu-id="02db3-1686">La longitud de registro especificada por el `RecordLength` cláusula en la `FileOpen` función debe ser mayor o igual que la longitud de los datos que se va a escribir.</span><span class="sxs-lookup"><span data-stu-id="02db3-1686">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being written.</span></span>  
  
-   <span data-ttu-id="02db3-1687">`FilePut` escribe elementos de estructuras como si cada uno se escribieron individualmente, excepto que no hay ningún relleno entre los elementos.</span><span class="sxs-lookup"><span data-stu-id="02db3-1687">`FilePut` writes elements of structures as if each were written individually, except there is no padding between elements.</span></span> <span data-ttu-id="02db3-1688">El `VBFixedString` atributo puede aplicarse a campos de cadena de las estructuras para indicar el tamaño de la cadena cuando se escribe en el disco.</span><span class="sxs-lookup"><span data-stu-id="02db3-1688">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of the string when written to disk.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="02db3-1689">Cadena de los campos que tienen más bytes que el especificado por el `VBFixedString` atributo se truncan cuando se escribe en el disco,</span><span class="sxs-lookup"><span data-stu-id="02db3-1689">String fields that have more bytes than specified by the `VBFixedString` attribute are truncated when written to disk,</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="02db3-1690">Modo binario</span><span class="sxs-lookup"><span data-stu-id="02db3-1690">Binary Mode</span></span>  
 <span data-ttu-id="02db3-1691">De los archivos abiertos en `Binary` modo, la mayoría de los `Random` se aplican las reglas de modo, con algunas excepciones.</span><span class="sxs-lookup"><span data-stu-id="02db3-1691">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="02db3-1692">Las siguientes reglas para los archivos abiertos en `Binary` modo difieren de las reglas para `Random` modo:</span><span class="sxs-lookup"><span data-stu-id="02db3-1692">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="02db3-1693">El `RecordLength` cláusula en la `FileOpen` función no tiene ningún efecto.</span><span class="sxs-lookup"><span data-stu-id="02db3-1693">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="02db3-1694">`FilePut` escribe todas las variables en el disco de forma contigua, es decir, sin relleno entre los registros.</span><span class="sxs-lookup"><span data-stu-id="02db3-1694">`FilePut` writes all variables to disk contiguously, that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="02db3-1695">Para cualquier matriz que no sea una matriz en una estructura, `FilePut` escribe sólo los datos.</span><span class="sxs-lookup"><span data-stu-id="02db3-1695">For any array other than an array in a structure, `FilePut` writes only the data.</span></span> <span data-ttu-id="02db3-1696">No se escribe ningún descriptor.</span><span class="sxs-lookup"><span data-stu-id="02db3-1696">No descriptor is written.</span></span>  
  
-   <span data-ttu-id="02db3-1697">`FilePut` Escribe cadenas de longitud variable que no sean elementos de estructuras sin el descriptor de longitud de dos bytes.</span><span class="sxs-lookup"><span data-stu-id="02db3-1697">`FilePut` writes variable-length strings that are not elements of structures without the two-byte length descriptor.</span></span> <span data-ttu-id="02db3-1698">El número de bytes escritos es igual al número de caracteres de la cadena.</span><span class="sxs-lookup"><span data-stu-id="02db3-1698">The number of bytes written equals the number of characters in the string.</span></span> <span data-ttu-id="02db3-1699">Por ejemplo, las siguientes instrucciones escriben 11 bytes en el archivo número 1:</span><span class="sxs-lookup"><span data-stu-id="02db3-1699">For example, the following statements write 11 bytes to file number 1:</span></span>  
  
     [!code-vb[VbVbalrCatRef#44](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#44)]  
  
-   <span data-ttu-id="02db3-1700">Escribir en un archivo mediante el uso de la `FilePut` función requiere `Write` acceso desde el <xref:System.Security.Permissions.FileIOPermissionAccess> enumeración.</span><span class="sxs-lookup"><span data-stu-id="02db3-1700">Writing to a file by using the `FilePut` function requires `Write` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="02db3-1701">Este ejemplo se usa el `FilePut` función para escribir datos en un archivo.</span><span class="sxs-lookup"><span data-stu-id="02db3-1701">This example uses the `FilePut` function to write data to a file.</span></span> <span data-ttu-id="02db3-1702">Cinco registros de la estructura `Person` se escriben en el archivo.</span><span class="sxs-lookup"><span data-stu-id="02db3-1702">Five records of the structure `Person` are written to the file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#42](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#42)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="02db3-1703">
            <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-1703">
              <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="02db3-1704">File mode is invalid.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-1704">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Len(System.UInt16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
      </Docs>
    </Member>
    <Member MemberName="FilePut">
      <MemberSignature Language="C#" Value="public static void FilePut (int FileNumber, ValueType Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FilePut(int32 FileNumber, class System.ValueType Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.ValueType,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FilePut (FileNumber As Integer, Value As ValueType, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FilePut : int * ValueType * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FilePut (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.ValueType" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="02db3-1705">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-1705">Required.</span>
          </span>
          <span data-ttu-id="02db3-1706">Any valid file number.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-1706">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="02db3-1707">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-1707">Required.</span>
          </span>
          <span data-ttu-id="02db3-1708">Valid variable name that contains data written to disk.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-1708">Valid variable name that contains data written to disk.</span>
          </span>
        </param>
        <param name="RecordNumber">
          <span data-ttu-id="02db3-1709">Optional.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-1709">Optional.</span>
          </span>
          <span data-ttu-id="02db3-1710">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-1710">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="02db3-1711">Writes data from a variable to a disk file.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-1711">Writes data from a variable to a disk file.</span>
          </span>
          <span data-ttu-id="02db3-1712">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-1712">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span>
          </span>
          <span data-ttu-id="02db3-1713">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-1713">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="02db3-1714">`FilePut` solo es válido en `Random` y `Binary` modo.</span><span class="sxs-lookup"><span data-stu-id="02db3-1714">`FilePut` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="02db3-1715">Los datos escritos con `FilePut` normalmente se leen desde un archivo mediante `FileGet`.</span><span class="sxs-lookup"><span data-stu-id="02db3-1715">Data written with `FilePut` is usually read from a file by using `FileGet`.</span></span>  
  
 <span data-ttu-id="02db3-1716">El primer registro o byte de un archivo está en la posición 1, el segundo registro o byte en la posición 2 y así sucesivamente.</span><span class="sxs-lookup"><span data-stu-id="02db3-1716">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="02db3-1717">Si se omite `RecordNumber`, el siguiente registro o byte después del último `FileGet` o `FilePut` función o apunta a la última `Seek` se escribe la función.</span><span class="sxs-lookup"><span data-stu-id="02db3-1717">If you omit `RecordNumber`, the next record or byte after the last `FileGet` or `FilePut` function or pointed to by the last `Seek` function is written.</span></span>  
  
 <span data-ttu-id="02db3-1718">El `StringIsFixedLength` argumento controla si la función interpreta las cadenas como longitud fija o variable.</span><span class="sxs-lookup"><span data-stu-id="02db3-1718">The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length.</span></span> <span data-ttu-id="02db3-1719">`FilePut` no escribe el descriptor de longitud cuando el argumento es `True`.</span><span class="sxs-lookup"><span data-stu-id="02db3-1719">`FilePut` does not write the length descriptor when the argument is `True`.</span></span> <span data-ttu-id="02db3-1720">Si usas `StringIsFixedLength`  =  `True` con `FilePut`, tendrá que hacer lo mismo con `FileGet`, y tiene que asegurarse de que la cadena se inicializa con la longitud esperada.</span><span class="sxs-lookup"><span data-stu-id="02db3-1720">If you use `StringIsFixedLength` = `True` with `FilePut`, you have to do the same with `FileGet`, and you have to make sure that the string is initialized to the length expected.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="02db3-1721">Modo aleatorio</span><span class="sxs-lookup"><span data-stu-id="02db3-1721">Random Mode</span></span>  
 <span data-ttu-id="02db3-1722">De los archivos abiertos en `Random` modo, se aplican las reglas siguientes:</span><span class="sxs-lookup"><span data-stu-id="02db3-1722">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="02db3-1723">Si la longitud de los datos que se va a escribir es menor que la longitud especificada en el`RecordLength` cláusula de la `FileOpen` función, `FilePut` escribirá los registros posteriores en los límites de longitud de registro.</span><span class="sxs-lookup"><span data-stu-id="02db3-1723">If the length of the data being written is less than the length specified in the`RecordLength` clause of the `FileOpen` function, `FilePut` writes subsequent records on record-length boundaries.</span></span> <span data-ttu-id="02db3-1724">El espacio entre el final de un registro y el inicio del siguiente registro se rellena con el contenido existente del búfer del archivo.</span><span class="sxs-lookup"><span data-stu-id="02db3-1724">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="02db3-1725">Como la cantidad de datos de relleno no se puede determinar con certeza, suele ser una buena idea tener la longitud del registro coincide con la longitud de los datos que se va a escribir.</span><span class="sxs-lookup"><span data-stu-id="02db3-1725">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being written.</span></span> <span data-ttu-id="02db3-1726">Si la longitud de los datos que se va a escribir es mayor que la longitud especificada en el `RecordLength` cláusula de la `FileOpen` función, se producirá una excepción.</span><span class="sxs-lookup"><span data-stu-id="02db3-1726">If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception will be thrown.</span></span>  
  
-   <span data-ttu-id="02db3-1727">Si la variable que se está escribiendo es una cadena, `FilePut` escribe un descriptor de dos bytes que contiene la longitud de cadena y, a continuación, escribe los datos que entrarán en la variable.</span><span class="sxs-lookup"><span data-stu-id="02db3-1727">If the variable being written is a string, `FilePut` writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable.</span></span> <span data-ttu-id="02db3-1728">Por lo tanto, la longitud de registro especificada por el `RecordLength` cláusula en la `FileOpen` función debe ser mayor que la longitud real de la cadena de al menos dos bytes.</span><span class="sxs-lookup"><span data-stu-id="02db3-1728">Therefore, the record length specified by the `RecordLength` clause in the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span>  
  
-   <span data-ttu-id="02db3-1729">Si la variable que se está escribiendo es un objeto que contiene un tipo numérico, `FilePut` escribe dos bytes para identificar el `VarType` del objeto y, a continuación, escribe la variable.</span><span class="sxs-lookup"><span data-stu-id="02db3-1729">If the variable being written is an object that contains a numeric type, `FilePut` writes two bytes identifying the `VarType` of the object and then writes the variable.</span></span> <span data-ttu-id="02db3-1730">Por ejemplo, al escribir un objeto que contiene un entero, `FilePut` escribe seis bytes: dos bytes que identifican el objeto como `VarType(3)` (`Integer`) y cuatro bytes que contienen los datos.</span><span class="sxs-lookup"><span data-stu-id="02db3-1730">For example, when writing an object that contains an integer, `FilePut` writes six bytes: two bytes that identify the object as `VarType(3)` (`Integer`) and four bytes that contain the data.</span></span> <span data-ttu-id="02db3-1731">La longitud de registro especificada por el `RecordLength` parámetro en el `FileOpen` función debe ser mayor que el número real de bytes necesarios para almacenar la variable al menos dos bytes.</span><span class="sxs-lookup"><span data-stu-id="02db3-1731">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.</span></span>  
  
-   <span data-ttu-id="02db3-1732">Si la variable que se está escribiendo es un objeto que contiene una cadena, `FilePut` escribe un descriptor de dos bytes que identifica el `VarType(8)` del objeto, un descriptor de dos bytes que indica la longitud de la cadena y, a continuación, escribe los datos de cadena.</span><span class="sxs-lookup"><span data-stu-id="02db3-1732">If the variable being written is an object that contains a string, `FilePut` writes a two byte descriptor identifying the `VarType(8)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data.</span></span> <span data-ttu-id="02db3-1733">La longitud de registro especificada por el `RecordLength` parámetro en el `FileOpen` función debe ser mayor que la longitud real de la cadena de al menos cuatro bytes.</span><span class="sxs-lookup"><span data-stu-id="02db3-1733">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string.</span></span> <span data-ttu-id="02db3-1734">Si desea escribir una cadena sin el descriptor, debería pasar `True` a la `StringIsFixedLength` parámetro y la cadena que lea debe tener la longitud correcta.</span><span class="sxs-lookup"><span data-stu-id="02db3-1734">If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="02db3-1735">Si la variable que se escribe es una matriz, tendrá la opción si desea escribir un descriptor para el tamaño y las dimensiones de la matriz o no.</span><span class="sxs-lookup"><span data-stu-id="02db3-1735">If the variable being written is an array, you have a choice as to whether or not to write a descriptor for the size and dimensions of the array.</span></span> <span data-ttu-id="02db3-1736">Visual Basic 6.0 y versiones anteriores escriben el descriptor de archivo para una matriz dinámica pero no para una matriz de tamaño fijo.</span><span class="sxs-lookup"><span data-stu-id="02db3-1736">Visual Basic 6.0 and earlier versions write the file descriptor for a dynamic array but not for a fixed-size array.</span></span> <span data-ttu-id="02db3-1737">De forma predeterminada, Visual Basic 2005 no escribe el descriptor.</span><span class="sxs-lookup"><span data-stu-id="02db3-1737">Visual Basic 2005 defaults to not writing the descriptor.</span></span> <span data-ttu-id="02db3-1738">Para escribir el descriptor, establezca el `ArrayIsDynamic` parámetro `True`.</span><span class="sxs-lookup"><span data-stu-id="02db3-1738">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="02db3-1739">Al escribir la matriz, se tiene que coincidir con la forma en que se leerá la matriz; Si se va a leer con el descriptor, tendrá que escribir el descriptor.</span><span class="sxs-lookup"><span data-stu-id="02db3-1739">When writing the array, you have to match the way the array will be read; if it will be read with the descriptor, you have to write the descriptor.</span></span> <span data-ttu-id="02db3-1740">El descriptor especifica el rango de la matriz, el tamaño y los límites inferiores de cada rango.</span><span class="sxs-lookup"><span data-stu-id="02db3-1740">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="02db3-1741">Su longitud es igual a 2 más 8 veces el número de dimensiones: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="02db3-1741">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="02db3-1742">La longitud de registro especificada por el `RecordLength` cláusula en la `FileOpen` función debe ser mayor o igual a la suma de todos los bytes necesarios para escribir los datos de matriz y el descriptor de matriz.</span><span class="sxs-lookup"><span data-stu-id="02db3-1742">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="02db3-1743">Por ejemplo, la siguiente declaración de matriz requiere 218 bytes cuando se escribe la matriz en el disco.</span><span class="sxs-lookup"><span data-stu-id="02db3-1743">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#43](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#43)]  
  
-   <span data-ttu-id="02db3-1744">Si la variable que se escribe es cualquier otro tipo de variable (no una cadena de longitud variable o un objeto), `FilePut` escribe sólo los datos de la variable.</span><span class="sxs-lookup"><span data-stu-id="02db3-1744">If the variable being written is any other type of variable (not a variable-length string or an object), `FilePut` writes only the variable data.</span></span> <span data-ttu-id="02db3-1745">La longitud de registro especificada por el `RecordLength` cláusula en la `FileOpen` función debe ser mayor o igual que la longitud de los datos que se va a escribir.</span><span class="sxs-lookup"><span data-stu-id="02db3-1745">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being written.</span></span>  
  
-   <span data-ttu-id="02db3-1746">`FilePut` escribe elementos de estructuras como si cada uno se escribieron individualmente, excepto que no hay ningún relleno entre los elementos.</span><span class="sxs-lookup"><span data-stu-id="02db3-1746">`FilePut` writes elements of structures as if each were written individually, except there is no padding between elements.</span></span> <span data-ttu-id="02db3-1747">El `VBFixedString` atributo puede aplicarse a campos de cadena de las estructuras para indicar el tamaño de la cadena cuando se escribe en el disco.</span><span class="sxs-lookup"><span data-stu-id="02db3-1747">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of the string when written to disk.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="02db3-1748">Cadena de los campos que tienen más bytes que el especificado por el `VBFixedString` atributo se truncan cuando se escribe en el disco,</span><span class="sxs-lookup"><span data-stu-id="02db3-1748">String fields that have more bytes than specified by the `VBFixedString` attribute are truncated when written to disk,</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="02db3-1749">Modo binario</span><span class="sxs-lookup"><span data-stu-id="02db3-1749">Binary Mode</span></span>  
 <span data-ttu-id="02db3-1750">De los archivos abiertos en `Binary` modo, la mayoría de los `Random` se aplican las reglas de modo, con algunas excepciones.</span><span class="sxs-lookup"><span data-stu-id="02db3-1750">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="02db3-1751">Las siguientes reglas para los archivos abiertos en `Binary` modo difieren de las reglas para `Random` modo:</span><span class="sxs-lookup"><span data-stu-id="02db3-1751">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="02db3-1752">El `RecordLength` cláusula en la `FileOpen` función no tiene ningún efecto.</span><span class="sxs-lookup"><span data-stu-id="02db3-1752">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="02db3-1753">`FilePut` escribe todas las variables en el disco de forma contigua, es decir, sin relleno entre los registros.</span><span class="sxs-lookup"><span data-stu-id="02db3-1753">`FilePut` writes all variables to disk contiguously, that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="02db3-1754">Para cualquier matriz que no sea una matriz en una estructura, `FilePut` escribe sólo los datos.</span><span class="sxs-lookup"><span data-stu-id="02db3-1754">For any array other than an array in a structure, `FilePut` writes only the data.</span></span> <span data-ttu-id="02db3-1755">No se escribe ningún descriptor.</span><span class="sxs-lookup"><span data-stu-id="02db3-1755">No descriptor is written.</span></span>  
  
-   <span data-ttu-id="02db3-1756">`FilePut` Escribe cadenas de longitud variable que no sean elementos de estructuras sin el descriptor de longitud de dos bytes.</span><span class="sxs-lookup"><span data-stu-id="02db3-1756">`FilePut` writes variable-length strings that are not elements of structures without the two-byte length descriptor.</span></span> <span data-ttu-id="02db3-1757">El número de bytes escritos es igual al número de caracteres de la cadena.</span><span class="sxs-lookup"><span data-stu-id="02db3-1757">The number of bytes written equals the number of characters in the string.</span></span> <span data-ttu-id="02db3-1758">Por ejemplo, las siguientes instrucciones escriben 11 bytes en el archivo número 1:</span><span class="sxs-lookup"><span data-stu-id="02db3-1758">For example, the following statements write 11 bytes to file number 1:</span></span>  
  
     [!code-vb[VbVbalrCatRef#44](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#44)]  
  
-   <span data-ttu-id="02db3-1759">Escribir en un archivo mediante el uso de la `FilePut` función requiere `Write` acceso desde el <xref:System.Security.Permissions.FileIOPermissionAccess> enumeración.</span><span class="sxs-lookup"><span data-stu-id="02db3-1759">Writing to a file by using the `FilePut` function requires `Write` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="02db3-1760">Este ejemplo se usa el `FilePut` función para escribir datos en un archivo.</span><span class="sxs-lookup"><span data-stu-id="02db3-1760">This example uses the `FilePut` function to write data to a file.</span></span> <span data-ttu-id="02db3-1761">Cinco registros de la estructura `Person` se escriben en el archivo.</span><span class="sxs-lookup"><span data-stu-id="02db3-1761">Five records of the structure `Person` are written to the file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#42](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#42)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="02db3-1762">
            <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-1762">
              <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="02db3-1763">File mode is invalid.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-1763">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Len(System.UInt16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
      </Docs>
    </Member>
    <Member MemberName="FilePut">
      <MemberSignature Language="C#" Value="public static void FilePut (object FileNumber, object Value, object RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FilePut(object FileNumber, object Value, object RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FilePut (FileNumber As Object, Value As Object, Optional RecordNumber As Object = -1)" />
      <MemberSignature Language="F#" Value="static member FilePut : obj * obj * obj -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FilePut (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("This member has been deprecated. Please use FilePutObject to write Object types, or coerce FileNumber and RecordNumber to Integer for writing non-Object types. http://go.microsoft.com/fwlink/?linkid=14202")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Object" />
        <Parameter Name="Value" Type="System.Object" />
        <Parameter Name="RecordNumber" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="02db3-1764">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-1764">Required.</span>
          </span>
          <span data-ttu-id="02db3-1765">Any valid file number.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-1765">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="02db3-1766">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-1766">Required.</span>
          </span>
          <span data-ttu-id="02db3-1767">Valid variable name that contains data written to disk.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-1767">Valid variable name that contains data written to disk.</span>
          </span>
        </param>
        <param name="RecordNumber">
          <span data-ttu-id="02db3-1768">Optional.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-1768">Optional.</span>
          </span>
          <span data-ttu-id="02db3-1769">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-1769">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="02db3-1770">Writes data from a variable to a disk file.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-1770">Writes data from a variable to a disk file.</span>
          </span>
          <span data-ttu-id="02db3-1771">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-1771">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span>
          </span>
          <span data-ttu-id="02db3-1772">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-1772">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="02db3-1773">`FilePut` solo es válido en `Random` y `Binary` modo.</span><span class="sxs-lookup"><span data-stu-id="02db3-1773">`FilePut` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="02db3-1774">Los datos escritos con `FilePut` normalmente se leen desde un archivo mediante `FileGet`.</span><span class="sxs-lookup"><span data-stu-id="02db3-1774">Data written with `FilePut` is usually read from a file by using `FileGet`.</span></span>  
  
 <span data-ttu-id="02db3-1775">El primer registro o byte de un archivo está en la posición 1, el segundo registro o byte en la posición 2 y así sucesivamente.</span><span class="sxs-lookup"><span data-stu-id="02db3-1775">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="02db3-1776">Si se omite `RecordNumber`, el siguiente registro o byte después del último `FileGet` o `FilePut` función o apunta a la última `Seek` se escribe la función.</span><span class="sxs-lookup"><span data-stu-id="02db3-1776">If you omit `RecordNumber`, the next record or byte after the last `FileGet` or `FilePut` function or pointed to by the last `Seek` function is written.</span></span>  
  
 <span data-ttu-id="02db3-1777">El `StringIsFixedLength` argumento controla si la función interpreta las cadenas como longitud fija o variable.</span><span class="sxs-lookup"><span data-stu-id="02db3-1777">The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length.</span></span> <span data-ttu-id="02db3-1778">`FilePut` no escribe el descriptor de longitud cuando el argumento es `True`.</span><span class="sxs-lookup"><span data-stu-id="02db3-1778">`FilePut` does not write the length descriptor when the argument is `True`.</span></span> <span data-ttu-id="02db3-1779">Si usas `StringIsFixedLength`  =  `True` con `FilePut`, tendrá que hacer lo mismo con `FileGet`, y tiene que asegurarse de que la cadena se inicializa con la longitud esperada.</span><span class="sxs-lookup"><span data-stu-id="02db3-1779">If you use `StringIsFixedLength` = `True` with `FilePut`, you have to do the same with `FileGet`, and you have to make sure that the string is initialized to the length expected.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="02db3-1780">Modo aleatorio</span><span class="sxs-lookup"><span data-stu-id="02db3-1780">Random Mode</span></span>  
 <span data-ttu-id="02db3-1781">De los archivos abiertos en `Random` modo, se aplican las reglas siguientes:</span><span class="sxs-lookup"><span data-stu-id="02db3-1781">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="02db3-1782">Si la longitud de los datos que se va a escribir es menor que la longitud especificada en el `RecordLength` cláusula de la `FileOpen` función, `FilePut` escribirá los registros posteriores en los límites de longitud de registro.</span><span class="sxs-lookup"><span data-stu-id="02db3-1782">If the length of the data being written is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FilePut` writes subsequent records on record-length boundaries.</span></span> <span data-ttu-id="02db3-1783">El espacio entre el final de un registro y el inicio del siguiente registro se rellena con el contenido existente del búfer del archivo.</span><span class="sxs-lookup"><span data-stu-id="02db3-1783">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="02db3-1784">Como la cantidad de datos de relleno no se puede determinar con certeza, suele ser una buena idea tener la longitud del registro coincide con la longitud de los datos que se va a escribir.</span><span class="sxs-lookup"><span data-stu-id="02db3-1784">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being written.</span></span> <span data-ttu-id="02db3-1785">Si la longitud de los datos que se va a escribir es mayor que la longitud especificada en el `RecordLength` cláusula de la `FileOpen` función, se producirá una excepción.</span><span class="sxs-lookup"><span data-stu-id="02db3-1785">If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception will be thrown.</span></span>  
  
-   <span data-ttu-id="02db3-1786">Si la variable que se está escribiendo es una cadena, `FilePut` escribe un descriptor de dos bytes que contiene la longitud de cadena y, a continuación, escribe los datos que entrarán en la variable.</span><span class="sxs-lookup"><span data-stu-id="02db3-1786">If the variable being written is a string, `FilePut` writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable.</span></span> <span data-ttu-id="02db3-1787">Por lo tanto, la longitud de registro especificada por el `RecordLength` cláusula en la `FileOpen` función debe ser mayor que la longitud real de la cadena de al menos dos bytes.</span><span class="sxs-lookup"><span data-stu-id="02db3-1787">Therefore, the record length specified by the `RecordLength` clause in the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span>  
  
-   <span data-ttu-id="02db3-1788">Si la variable que se está escribiendo es un objeto que contiene un tipo numérico, `FilePut` escribe dos bytes para identificar el `VarType` del objeto y, a continuación, escribe la variable.</span><span class="sxs-lookup"><span data-stu-id="02db3-1788">If the variable being written is an object that contains a numeric type, `FilePut` writes two bytes identifying the `VarType` of the object and then writes the variable.</span></span> <span data-ttu-id="02db3-1789">Por ejemplo, al escribir un objeto que contiene un entero, `FilePut` escribe seis bytes: dos bytes que identifican el objeto como `VarType(3)` (`Integer`) y cuatro bytes que contienen los datos.</span><span class="sxs-lookup"><span data-stu-id="02db3-1789">For example, when writing an object that contains an integer, `FilePut` writes six bytes: two bytes that identify the object as `VarType(3)` (`Integer`) and four bytes that contain the data.</span></span> <span data-ttu-id="02db3-1790">La longitud de registro especificada por el `RecordLength` parámetro en el `FileOpen` función debe ser mayor que el número real de bytes necesarios para almacenar la variable al menos dos bytes.</span><span class="sxs-lookup"><span data-stu-id="02db3-1790">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.</span></span>  
  
-   <span data-ttu-id="02db3-1791">Si la variable que se está escribiendo es un objeto que contiene una cadena, `FilePut` escribe un descriptor de dos bytes que identifica el `VarType(8)` del objeto, un descriptor de dos bytes que indica la longitud de la cadena y, a continuación, escribe los datos de cadena.</span><span class="sxs-lookup"><span data-stu-id="02db3-1791">If the variable being written is an object that contains a string, `FilePut` writes a two byte descriptor identifying the `VarType(8)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data.</span></span> <span data-ttu-id="02db3-1792">La longitud de registro especificada por el `RecordLength` parámetro en el `FileOpen` función debe ser mayor que la longitud real de la cadena de al menos cuatro bytes.</span><span class="sxs-lookup"><span data-stu-id="02db3-1792">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string.</span></span> <span data-ttu-id="02db3-1793">Si desea escribir una cadena sin el descriptor, debería pasar `True` a la `StringIsFixedLength` parámetro y la cadena que lea debe tener la longitud correcta.</span><span class="sxs-lookup"><span data-stu-id="02db3-1793">If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="02db3-1794">Si la variable que se escribe es una matriz, tendrá la opción si desea escribir un descriptor para el tamaño y las dimensiones de la matriz o no.</span><span class="sxs-lookup"><span data-stu-id="02db3-1794">If the variable being written is an array, you have a choice as to whether or not to write a descriptor for the size and dimensions of the array.</span></span> <span data-ttu-id="02db3-1795">Visual Basic 6.0 y versiones anteriores escriben el descriptor de archivo para una matriz dinámica pero no para una matriz de tamaño fijo.</span><span class="sxs-lookup"><span data-stu-id="02db3-1795">Visual Basic 6.0 and earlier versions write the file descriptor for a dynamic array but not for a fixed-size array.</span></span> <span data-ttu-id="02db3-1796">De forma predeterminada, Visual Basic 2005 no escribe el descriptor.</span><span class="sxs-lookup"><span data-stu-id="02db3-1796">Visual Basic 2005 defaults to not writing the descriptor.</span></span> <span data-ttu-id="02db3-1797">Para escribir el descriptor, establezca el `ArrayIsDynamic` parámetro `True`.</span><span class="sxs-lookup"><span data-stu-id="02db3-1797">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="02db3-1798">Al escribir la matriz, se tiene que coincidir con la forma en que se leerá la matriz; Si se va a leer con el descriptor, tendrá que escribir el descriptor.</span><span class="sxs-lookup"><span data-stu-id="02db3-1798">When writing the array, you have to match the way the array will be read; if it will be read with the descriptor, you have to write the descriptor.</span></span> <span data-ttu-id="02db3-1799">El descriptor especifica el rango de la matriz, el tamaño y los límites inferiores de cada rango.</span><span class="sxs-lookup"><span data-stu-id="02db3-1799">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="02db3-1800">Su longitud es igual a 2 más 8 veces el número de dimensiones: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="02db3-1800">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="02db3-1801">La longitud de registro especificada por el `RecordLength` cláusula en la `FileOpen` función debe ser mayor o igual a la suma de todos los bytes necesarios para escribir los datos de matriz y el descriptor de matriz.</span><span class="sxs-lookup"><span data-stu-id="02db3-1801">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="02db3-1802">Por ejemplo, la siguiente declaración de matriz requiere 218 bytes cuando se escribe la matriz en el disco.</span><span class="sxs-lookup"><span data-stu-id="02db3-1802">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#43](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#43)]  
  
-   <span data-ttu-id="02db3-1803">Si la variable que se escribe es cualquier otro tipo de variable (no una cadena de longitud variable o un objeto), `FilePut` escribe sólo los datos de la variable.</span><span class="sxs-lookup"><span data-stu-id="02db3-1803">If the variable being written is any other type of variable (not a variable-length string or an object), `FilePut` writes only the variable data.</span></span> <span data-ttu-id="02db3-1804">La longitud de registro especificada por el `RecordLength` cláusula en la `FileOpen` función debe ser mayor o igual que la longitud de los datos que se va a escribir.</span><span class="sxs-lookup"><span data-stu-id="02db3-1804">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being written.</span></span>  
  
-   <span data-ttu-id="02db3-1805">`FilePut` escribe elementos de estructuras como si cada uno se escribieron individualmente, excepto que no hay ningún relleno entre los elementos.</span><span class="sxs-lookup"><span data-stu-id="02db3-1805">`FilePut` writes elements of structures as if each were written individually, except there is no padding between elements.</span></span> <span data-ttu-id="02db3-1806">El `VBFixedString` atributo puede aplicarse a campos de cadena de las estructuras para indicar el tamaño de la cadena cuando se escribe en el disco.</span><span class="sxs-lookup"><span data-stu-id="02db3-1806">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of the string when written to disk.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="02db3-1807">Cadena de los campos que tienen más bytes que el especificado por el `VBFixedString` atributo se truncan cuando se escribe en el disco,</span><span class="sxs-lookup"><span data-stu-id="02db3-1807">String fields that have more bytes than specified by the `VBFixedString` attribute are truncated when written to disk,</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="02db3-1808">Modo binario</span><span class="sxs-lookup"><span data-stu-id="02db3-1808">Binary Mode</span></span>  
 <span data-ttu-id="02db3-1809">De los archivos abiertos en `Binary` modo, la mayoría de los `Random` se aplican las reglas de modo, con algunas excepciones.</span><span class="sxs-lookup"><span data-stu-id="02db3-1809">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="02db3-1810">Las siguientes reglas para los archivos abiertos en `Binary` modo difieren de las reglas para `Random` modo:</span><span class="sxs-lookup"><span data-stu-id="02db3-1810">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="02db3-1811">El `RecordLength` cláusula en la `FileOpen` función no tiene ningún efecto.</span><span class="sxs-lookup"><span data-stu-id="02db3-1811">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="02db3-1812">`FilePut` escribe todas las variables en el disco de forma contigua, es decir, sin relleno entre los registros.</span><span class="sxs-lookup"><span data-stu-id="02db3-1812">`FilePut` writes all variables to disk contiguously, that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="02db3-1813">Para cualquier matriz que no sea una matriz en una estructura, `FilePut` escribe sólo los datos.</span><span class="sxs-lookup"><span data-stu-id="02db3-1813">For any array other than an array in a structure, `FilePut` writes only the data.</span></span> <span data-ttu-id="02db3-1814">No se escribe ningún descriptor.</span><span class="sxs-lookup"><span data-stu-id="02db3-1814">No descriptor is written.</span></span>  
  
-   <span data-ttu-id="02db3-1815">`FilePut` Escribe cadenas de longitud variable que no sean elementos de estructuras sin el descriptor de longitud de dos bytes.</span><span class="sxs-lookup"><span data-stu-id="02db3-1815">`FilePut` writes variable-length strings that are not elements of structures without the two-byte length descriptor.</span></span> <span data-ttu-id="02db3-1816">El número de bytes escritos es igual al número de caracteres de la cadena.</span><span class="sxs-lookup"><span data-stu-id="02db3-1816">The number of bytes written equals the number of characters in the string.</span></span> <span data-ttu-id="02db3-1817">Por ejemplo, las siguientes instrucciones escriben 11 bytes en el archivo número 1:</span><span class="sxs-lookup"><span data-stu-id="02db3-1817">For example, the following statements write 11 bytes to file number 1:</span></span>  
  
     [!code-vb[VbVbalrCatRef#44](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#44)]  
  
-   <span data-ttu-id="02db3-1818">Escribir en un archivo mediante el uso de la `FilePut` función requiere `Write` acceso desde el <xref:System.Security.Permissions.FileIOPermissionAccess> enumeración.</span><span class="sxs-lookup"><span data-stu-id="02db3-1818">Writing to a file by using the `FilePut` function requires `Write` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="02db3-1819">Este ejemplo se usa el `FilePut` función para escribir datos en un archivo.</span><span class="sxs-lookup"><span data-stu-id="02db3-1819">This example uses the `FilePut` function to write data to a file.</span></span> <span data-ttu-id="02db3-1820">Cinco registros de la estructura `Person` se escriben en el archivo.</span><span class="sxs-lookup"><span data-stu-id="02db3-1820">Five records of the structure `Person` are written to the file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#42](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#42)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="02db3-1821">
            <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-1821">
              <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="02db3-1822">File mode is invalid.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-1822">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Len(System.UInt16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
      </Docs>
    </Member>
    <Member MemberName="FilePut">
      <MemberSignature Language="C#" Value="public static void FilePut (int FileNumber, string Value, long RecordNumber = -1, bool StringIsFixedLength = false);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FilePut(int32 FileNumber, string Value, int64 RecordNumber, bool StringIsFixedLength) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.String,System.Int64,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FilePut (FileNumber As Integer, Value As String, Optional RecordNumber As Long = -1, Optional StringIsFixedLength As Boolean = false)" />
      <MemberSignature Language="F#" Value="static member FilePut : int * string * int64 * bool -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FilePut (FileNumber, Value, RecordNumber, StringIsFixedLength)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.String" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
        <Parameter Name="StringIsFixedLength" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="02db3-1823">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-1823">Required.</span>
          </span>
          <span data-ttu-id="02db3-1824">Any valid file number.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-1824">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="02db3-1825">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-1825">Required.</span>
          </span>
          <span data-ttu-id="02db3-1826">Valid variable name that contains data written to disk.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-1826">Valid variable name that contains data written to disk.</span>
          </span>
        </param>
        <param name="RecordNumber">
          <span data-ttu-id="02db3-1827">Optional.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-1827">Optional.</span>
          </span>
          <span data-ttu-id="02db3-1828">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-1828">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span>
          </span>
        </param>
        <param name="StringIsFixedLength">
          <span data-ttu-id="02db3-1829">Optional.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-1829">Optional.</span>
          </span>
          <span data-ttu-id="02db3-1830">Applies only when writing a string.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-1830">Applies only when writing a string.</span>
          </span>
          <span data-ttu-id="02db3-1831">Specifies whether to write a two-byte string length descriptor for the string to the file.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-1831">Specifies whether to write a two-byte string length descriptor for the string to the file.</span>
          </span>
          <span data-ttu-id="02db3-1832">The default is <see langword="False" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-1832">The default is <see langword="False" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="02db3-1833">Writes data from a variable to a disk file.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-1833">Writes data from a variable to a disk file.</span>
          </span>
          <span data-ttu-id="02db3-1834">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-1834">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span>
          </span>
          <span data-ttu-id="02db3-1835">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />..</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-1835">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />..</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="02db3-1836">`FilePut` solo es válido en `Random` y `Binary` modo.</span><span class="sxs-lookup"><span data-stu-id="02db3-1836">`FilePut` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="02db3-1837">Los datos escritos con `FilePut` normalmente se leen desde un archivo mediante `FileGet`.</span><span class="sxs-lookup"><span data-stu-id="02db3-1837">Data written with `FilePut` is usually read from a file by using `FileGet`.</span></span>  
  
 <span data-ttu-id="02db3-1838">El primer registro o byte de un archivo está en la posición 1, el segundo registro o byte en la posición 2 y así sucesivamente.</span><span class="sxs-lookup"><span data-stu-id="02db3-1838">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="02db3-1839">Si se omite `RecordNumber`, el siguiente registro o byte después del último `FileGet` o `FilePut` función o apunta a la última `Seek` se escribe la función.</span><span class="sxs-lookup"><span data-stu-id="02db3-1839">If you omit `RecordNumber`, the next record or byte after the last `FileGet` or `FilePut` function or pointed to by the last `Seek` function is written.</span></span>  
  
 <span data-ttu-id="02db3-1840">El `StringIsFixedLength` argumento controla si la función interpreta las cadenas como longitud fija o variable.</span><span class="sxs-lookup"><span data-stu-id="02db3-1840">The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length.</span></span> <span data-ttu-id="02db3-1841">`FilePut` no escribe el descriptor de longitud cuando el argumento es `True`.</span><span class="sxs-lookup"><span data-stu-id="02db3-1841">`FilePut` does not write the length descriptor when the argument is `True`.</span></span> <span data-ttu-id="02db3-1842">Si usas `StringIsFixedLength`  =  `True` con `FilePut`, tendrá que hacer lo mismo con `FileGet`, y tiene que asegurarse de que la cadena se inicializa con la longitud esperada.</span><span class="sxs-lookup"><span data-stu-id="02db3-1842">If you use `StringIsFixedLength` = `True` with `FilePut`, you have to do the same with `FileGet`, and you have to make sure that the string is initialized to the length expected.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="02db3-1843">Modo aleatorio</span><span class="sxs-lookup"><span data-stu-id="02db3-1843">Random Mode</span></span>  
 <span data-ttu-id="02db3-1844">De los archivos abiertos en `Random` modo, se aplican las reglas siguientes:</span><span class="sxs-lookup"><span data-stu-id="02db3-1844">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="02db3-1845">Si la longitud de los datos que se va a escribir es menor que la longitud especificada en el `RecordLength` cláusula de la `FileOpen` función, `FilePut` escribirá los registros posteriores en los límites de longitud de registro.</span><span class="sxs-lookup"><span data-stu-id="02db3-1845">If the length of the data being written is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FilePut` writes subsequent records on record-length boundaries.</span></span> <span data-ttu-id="02db3-1846">El espacio entre el final de un registro y el inicio del siguiente registro se rellena con el contenido existente del búfer del archivo.</span><span class="sxs-lookup"><span data-stu-id="02db3-1846">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="02db3-1847">Como la cantidad de datos de relleno no se puede determinar con certeza, suele ser una buena idea tener la longitud del registro coincide con la longitud de los datos que se va a escribir.</span><span class="sxs-lookup"><span data-stu-id="02db3-1847">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being written.</span></span> <span data-ttu-id="02db3-1848">Si la longitud de los datos que se va a escribir es mayor que la longitud especificada en el `RecordLength` cláusula de la `FileOpen` función, se producirá una excepción.</span><span class="sxs-lookup"><span data-stu-id="02db3-1848">If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception will be thrown.</span></span>  
  
-   <span data-ttu-id="02db3-1849">Si la variable que se está escribiendo es una cadena, `FilePut` escribe un descriptor de dos bytes que contiene la longitud de cadena y, a continuación, escribe los datos que entrarán en la variable.</span><span class="sxs-lookup"><span data-stu-id="02db3-1849">If the variable being written is a string, `FilePut` writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable.</span></span> <span data-ttu-id="02db3-1850">Por lo tanto, la longitud de registro especificada por el `RecordLength` cláusula en la `FileOpen` función debe ser mayor que la longitud real de la cadena de al menos dos bytes.</span><span class="sxs-lookup"><span data-stu-id="02db3-1850">Therefore, the record length specified by the `RecordLength` clause in the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span>  
  
-   <span data-ttu-id="02db3-1851">Si la variable que se está escribiendo es un objeto que contiene un tipo numérico, `FilePut` escribe dos bytes para identificar el `VarType` del objeto y, a continuación, escribe la variable.</span><span class="sxs-lookup"><span data-stu-id="02db3-1851">If the variable being written is an object that contains a numeric type, `FilePut` writes two bytes identifying the `VarType` of the object and then writes the variable.</span></span> <span data-ttu-id="02db3-1852">Por ejemplo, al escribir un objeto que contiene un entero, `FilePut` escribe seis bytes: dos bytes que identifican el objeto como `VarType(3)` (`Integer`) y cuatro bytes que contienen los datos.</span><span class="sxs-lookup"><span data-stu-id="02db3-1852">For example, when writing an object that contains an integer, `FilePut` writes six bytes: two bytes that identify the object as `VarType(3)` (`Integer`) and four bytes that contain the data.</span></span> <span data-ttu-id="02db3-1853">La longitud de registro especificada por el `RecordLength` parámetro en el `FileOpen` función debe ser mayor que el número real de bytes necesarios para almacenar la variable al menos dos bytes.</span><span class="sxs-lookup"><span data-stu-id="02db3-1853">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.</span></span>  
  
-   <span data-ttu-id="02db3-1854">Si la variable que se está escribiendo es un objeto que contiene una cadena, `FilePut` escribe un descriptor de dos bytes que identifica el `VarType(8)` del objeto, un descriptor de dos bytes que indica la longitud de la cadena y, a continuación, escribe los datos de cadena.</span><span class="sxs-lookup"><span data-stu-id="02db3-1854">If the variable being written is an object that contains a string, `FilePut` writes a two byte descriptor identifying the `VarType(8)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data.</span></span> <span data-ttu-id="02db3-1855">La longitud de registro especificada por el `RecordLength` parámetro en el `FileOpen` función debe ser mayor que la longitud real de la cadena de al menos cuatro bytes.</span><span class="sxs-lookup"><span data-stu-id="02db3-1855">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string.</span></span> <span data-ttu-id="02db3-1856">Si desea escribir una cadena sin el descriptor, debería pasar `True` a la `StringIsFixedLength` parámetro y la cadena que lea debe tener la longitud correcta.</span><span class="sxs-lookup"><span data-stu-id="02db3-1856">If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="02db3-1857">Si la variable que se escribe es una matriz, tendrá la opción si desea escribir un descriptor para el tamaño y las dimensiones de la matriz o no.</span><span class="sxs-lookup"><span data-stu-id="02db3-1857">If the variable being written is an array, you have a choice as to whether or not to write a descriptor for the size and dimensions of the array.</span></span> <span data-ttu-id="02db3-1858">Visual Basic 6.0 y versiones anteriores escriben el descriptor de archivo para una matriz dinámica pero no para una matriz de tamaño fijo.</span><span class="sxs-lookup"><span data-stu-id="02db3-1858">Visual Basic 6.0 and earlier versions write the file descriptor for a dynamic array but not for a fixed-size array.</span></span> <span data-ttu-id="02db3-1859">De forma predeterminada, Visual Basic 2005 no escribe el descriptor.</span><span class="sxs-lookup"><span data-stu-id="02db3-1859">Visual Basic 2005 defaults to not writing the descriptor.</span></span> <span data-ttu-id="02db3-1860">Para escribir el descriptor, establezca el `ArrayIsDynamic` parámetro `True`.</span><span class="sxs-lookup"><span data-stu-id="02db3-1860">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="02db3-1861">Al escribir la matriz, se tiene que coincidir con la forma en que se leerá la matriz; Si se va a leer con el descriptor, tendrá que escribir el descriptor.</span><span class="sxs-lookup"><span data-stu-id="02db3-1861">When writing the array, you have to match the way the array will be read; if it will be read with the descriptor, you have to write the descriptor.</span></span> <span data-ttu-id="02db3-1862">El descriptor especifica el rango de la matriz, el tamaño y los límites inferiores de cada rango.</span><span class="sxs-lookup"><span data-stu-id="02db3-1862">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="02db3-1863">Su longitud es igual a 2 más 8 veces el número de dimensiones: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="02db3-1863">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="02db3-1864">La longitud de registro especificada por el `RecordLength` cláusula en la `FileOpen` función debe ser mayor o igual a la suma de todos los bytes necesarios para escribir los datos de matriz y el descriptor de matriz.</span><span class="sxs-lookup"><span data-stu-id="02db3-1864">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="02db3-1865">Por ejemplo, la siguiente declaración de matriz requiere 218 bytes cuando se escribe la matriz en el disco.</span><span class="sxs-lookup"><span data-stu-id="02db3-1865">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#43](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#43)]  
  
-   <span data-ttu-id="02db3-1866">Si la variable que se escribe es cualquier otro tipo de variable (no una cadena de longitud variable o un objeto), `FilePut` escribe sólo los datos de la variable.</span><span class="sxs-lookup"><span data-stu-id="02db3-1866">If the variable being written is any other type of variable (not a variable-length string or an object), `FilePut` writes only the variable data.</span></span> <span data-ttu-id="02db3-1867">La longitud de registro especificada por el `RecordLength` cláusula en la `FileOpen` función debe ser mayor o igual que la longitud de los datos que se va a escribir.</span><span class="sxs-lookup"><span data-stu-id="02db3-1867">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being written.</span></span>  
  
-   <span data-ttu-id="02db3-1868">`FilePut` escribe elementos de estructuras como si cada uno se escribieron individualmente, excepto que no hay ningún relleno entre los elementos.</span><span class="sxs-lookup"><span data-stu-id="02db3-1868">`FilePut` writes elements of structures as if each were written individually, except there is no padding between elements.</span></span> <span data-ttu-id="02db3-1869">El `VBFixedString` atributo puede aplicarse a campos de cadena de las estructuras para indicar el tamaño de la cadena cuando se escribe en el disco.</span><span class="sxs-lookup"><span data-stu-id="02db3-1869">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of the string when written to disk.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="02db3-1870">Cadena de los campos que tienen más bytes que el especificado por el `VBFixedString` atributo se truncan cuando se escribe en el disco,</span><span class="sxs-lookup"><span data-stu-id="02db3-1870">String fields that have more bytes than specified by the `VBFixedString` attribute are truncated when written to disk,</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="02db3-1871">Modo binario</span><span class="sxs-lookup"><span data-stu-id="02db3-1871">Binary Mode</span></span>  
 <span data-ttu-id="02db3-1872">De los archivos abiertos en `Binary` modo, la mayoría de los `Random` se aplican las reglas de modo, con algunas excepciones.</span><span class="sxs-lookup"><span data-stu-id="02db3-1872">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="02db3-1873">Las siguientes reglas para los archivos abiertos en `Binary` modo difieren de las reglas para `Random` modo:</span><span class="sxs-lookup"><span data-stu-id="02db3-1873">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="02db3-1874">El `RecordLength` cláusula en la `FileOpen` función no tiene ningún efecto.</span><span class="sxs-lookup"><span data-stu-id="02db3-1874">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="02db3-1875">`FilePut` escribe todas las variables en el disco de forma contigua, es decir, sin relleno entre los registros.</span><span class="sxs-lookup"><span data-stu-id="02db3-1875">`FilePut` writes all variables to disk contiguously, that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="02db3-1876">Para cualquier matriz que no sea una matriz en una estructura, `FilePut` escribe sólo los datos.</span><span class="sxs-lookup"><span data-stu-id="02db3-1876">For any array other than an array in a structure, `FilePut` writes only the data.</span></span> <span data-ttu-id="02db3-1877">No se escribe ningún descriptor.</span><span class="sxs-lookup"><span data-stu-id="02db3-1877">No descriptor is written.</span></span>  
  
-   <span data-ttu-id="02db3-1878">`FilePut` Escribe cadenas de longitud variable que no sean elementos de estructuras sin el descriptor de longitud de dos bytes.</span><span class="sxs-lookup"><span data-stu-id="02db3-1878">`FilePut` writes variable-length strings that are not elements of structures without the two-byte length descriptor.</span></span> <span data-ttu-id="02db3-1879">El número de bytes escritos es igual al número de caracteres de la cadena.</span><span class="sxs-lookup"><span data-stu-id="02db3-1879">The number of bytes written equals the number of characters in the string.</span></span> <span data-ttu-id="02db3-1880">Por ejemplo, las siguientes instrucciones escriben 11 bytes en el archivo número 1:</span><span class="sxs-lookup"><span data-stu-id="02db3-1880">For example, the following statements write 11 bytes to file number 1:</span></span>  
  
     [!code-vb[VbVbalrCatRef#44](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#44)]  
  
-   <span data-ttu-id="02db3-1881">Escribir en un archivo mediante el uso de la `FilePut` función requiere `Write` acceso desde el <xref:System.Security.Permissions.FileIOPermissionAccess> enumeración.</span><span class="sxs-lookup"><span data-stu-id="02db3-1881">Writing to a file by using the `FilePut` function requires `Write` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="02db3-1882">Este ejemplo se usa el `FilePut` función para escribir datos en un archivo.</span><span class="sxs-lookup"><span data-stu-id="02db3-1882">This example uses the `FilePut` function to write data to a file.</span></span> <span data-ttu-id="02db3-1883">Cinco registros de la estructura `Person` se escriben en el archivo.</span><span class="sxs-lookup"><span data-stu-id="02db3-1883">Five records of the structure `Person` are written to the file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#42](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#42)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="02db3-1884">
            <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-1884">
              <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="02db3-1885">File mode is invalid.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-1885">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Len(System.UInt16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
      </Docs>
    </Member>
    <Member MemberName="FilePut">
      <MemberSignature Language="C#" Value="public static void FilePut (int FileNumber, Array Value, long RecordNumber = -1, bool ArrayIsDynamic = false, bool StringIsFixedLength = false);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FilePut(int32 FileNumber, class System.Array Value, int64 RecordNumber, bool ArrayIsDynamic, bool StringIsFixedLength) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.Array,System.Int64,System.Boolean,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FilePut (FileNumber As Integer, Value As Array, Optional RecordNumber As Long = -1, Optional ArrayIsDynamic As Boolean = false, Optional StringIsFixedLength As Boolean = false)" />
      <MemberSignature Language="F#" Value="static member FilePut : int * Array * int64 * bool * bool -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FilePut (FileNumber, Value, RecordNumber, ArrayIsDynamic, StringIsFixedLength)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Array" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
        <Parameter Name="ArrayIsDynamic" Type="System.Boolean" />
        <Parameter Name="StringIsFixedLength" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="02db3-1886">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-1886">Required.</span>
          </span>
          <span data-ttu-id="02db3-1887">Any valid file number.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-1887">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="02db3-1888">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-1888">Required.</span>
          </span>
          <span data-ttu-id="02db3-1889">Valid variable name that contains data written to disk.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-1889">Valid variable name that contains data written to disk.</span>
          </span>
        </param>
        <param name="RecordNumber">
          <span data-ttu-id="02db3-1890">Optional.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-1890">Optional.</span>
          </span>
          <span data-ttu-id="02db3-1891">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-1891">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span>
          </span>
        </param>
        <param name="ArrayIsDynamic">
          <span data-ttu-id="02db3-1892">Optional.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-1892">Optional.</span>
          </span>
          <span data-ttu-id="02db3-1893">Applies only when writing an array.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-1893">Applies only when writing an array.</span>
          </span>
          <span data-ttu-id="02db3-1894">Specifies whether the array is to be treated as dynamic, and whether to write an array descriptor for the string that describes the length.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-1894">Specifies whether the array is to be treated as dynamic, and whether to write an array descriptor for the string that describes the length.</span>
          </span>
        </param>
        <param name="StringIsFixedLength">
          <span data-ttu-id="02db3-1895">Optional.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-1895">Optional.</span>
          </span>
          <span data-ttu-id="02db3-1896">Applies only when writing a string.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-1896">Applies only when writing a string.</span>
          </span>
          <span data-ttu-id="02db3-1897">Specifies whether to write a two-byte string length descriptor for the string to the file.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-1897">Specifies whether to write a two-byte string length descriptor for the string to the file.</span>
          </span>
          <span data-ttu-id="02db3-1898">The default is <see langword="False" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-1898">The default is <see langword="False" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="02db3-1899">Writes data from a variable to a disk file.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-1899">Writes data from a variable to a disk file.</span>
          </span>
          <span data-ttu-id="02db3-1900">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-1900">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span>
          </span>
          <span data-ttu-id="02db3-1901">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-1901">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="02db3-1902">`FilePut` solo es válido en `Random` y `Binary` modo.</span><span class="sxs-lookup"><span data-stu-id="02db3-1902">`FilePut` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="02db3-1903">Los datos escritos con `FilePut` normalmente se leen desde un archivo mediante `FileGet`.</span><span class="sxs-lookup"><span data-stu-id="02db3-1903">Data written with `FilePut` is usually read from a file by using `FileGet`.</span></span>  
  
 <span data-ttu-id="02db3-1904">El primer registro o byte de un archivo está en la posición 1, el segundo registro o byte en la posición 2 y así sucesivamente.</span><span class="sxs-lookup"><span data-stu-id="02db3-1904">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="02db3-1905">Si se omite `RecordNumber`, el siguiente registro o byte después del último `FileGet` o `FilePut` función o apunta a la última `Seek` se escribe la función.</span><span class="sxs-lookup"><span data-stu-id="02db3-1905">If you omit `RecordNumber`, the next record or byte after the last `FileGet` or `FilePut` function or pointed to by the last `Seek` function is written.</span></span>  
  
 <span data-ttu-id="02db3-1906">El `StringIsFixedLength` argumento controla si la función interpreta las cadenas como longitud fija o variable.</span><span class="sxs-lookup"><span data-stu-id="02db3-1906">The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length.</span></span> <span data-ttu-id="02db3-1907">`FilePut` no escribe el descriptor de longitud cuando el argumento es `True`.</span><span class="sxs-lookup"><span data-stu-id="02db3-1907">`FilePut` does not write the length descriptor when the argument is `True`.</span></span> <span data-ttu-id="02db3-1908">Si usas `StringIsFixedLength`  =  `True` con `FilePut`, tendrá que hacer lo mismo con `FileGet`, y tiene que asegurarse de que la cadena se inicializa con la longitud esperada.</span><span class="sxs-lookup"><span data-stu-id="02db3-1908">If you use `StringIsFixedLength` = `True` with `FilePut`, you have to do the same with `FileGet`, and you have to make sure that the string is initialized to the length expected.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="02db3-1909">Modo aleatorio</span><span class="sxs-lookup"><span data-stu-id="02db3-1909">Random Mode</span></span>  
 <span data-ttu-id="02db3-1910">De los archivos abiertos en `Random` modo, se aplican las reglas siguientes:</span><span class="sxs-lookup"><span data-stu-id="02db3-1910">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="02db3-1911">Si la longitud de los datos que se va a escribir es menor que la longitud especificada en el `RecordLength` cláusula de la `FileOpen` función, `FilePut` escribirá los registros posteriores en los límites de longitud de registro.</span><span class="sxs-lookup"><span data-stu-id="02db3-1911">If the length of the data being written is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FilePut` writes subsequent records on record-length boundaries.</span></span> <span data-ttu-id="02db3-1912">El espacio entre el final de un registro y el inicio del siguiente registro se rellena con el contenido existente del búfer del archivo.</span><span class="sxs-lookup"><span data-stu-id="02db3-1912">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="02db3-1913">Como la cantidad de datos de relleno no se puede determinar con certeza, suele ser una buena idea tener la longitud del registro coincide con la longitud de los datos que se va a escribir.</span><span class="sxs-lookup"><span data-stu-id="02db3-1913">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being written.</span></span> <span data-ttu-id="02db3-1914">Si la longitud de los datos que se va a escribir es mayor que la longitud especificada en el `RecordLength` cláusula de la `FileOpen` función, se producirá una excepción.</span><span class="sxs-lookup"><span data-stu-id="02db3-1914">If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception will be thrown.</span></span>  
  
-   <span data-ttu-id="02db3-1915">Si la variable que se está escribiendo es una cadena, `FilePut` escribe un descriptor de dos bytes que contiene la longitud de cadena y, a continuación, escribe los datos que entrarán en la variable.</span><span class="sxs-lookup"><span data-stu-id="02db3-1915">If the variable being written is a string, `FilePut` writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable.</span></span> <span data-ttu-id="02db3-1916">Por lo tanto, la longitud de registro especificada por el `RecordLength` cláusula en la `FileOpen` función debe ser mayor que la longitud real de la cadena de al menos dos bytes.</span><span class="sxs-lookup"><span data-stu-id="02db3-1916">Therefore, the record length specified by the `RecordLength` clause in the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span>  
  
-   <span data-ttu-id="02db3-1917">Si la variable que se está escribiendo es un objeto que contiene un tipo numérico, `FilePut` escribe dos bytes para identificar el `VarType` del objeto y, a continuación, escribe la variable.</span><span class="sxs-lookup"><span data-stu-id="02db3-1917">If the variable being written is an object that contains a numeric type, `FilePut` writes two bytes identifying the `VarType` of the object and then writes the variable.</span></span> <span data-ttu-id="02db3-1918">Por ejemplo, al escribir un objeto que contiene un entero, `FilePut` escribe seis bytes: dos bytes que identifican el objeto como `VarType(3)` (`Integer`) y cuatro bytes que contienen los datos.</span><span class="sxs-lookup"><span data-stu-id="02db3-1918">For example, when writing an object that contains an integer, `FilePut` writes six bytes: two bytes that identify the object as `VarType(3)` (`Integer`) and four bytes that contain the data.</span></span> <span data-ttu-id="02db3-1919">La longitud de registro especificada por el `RecordLength` parámetro en el `FileOpen` función debe ser mayor que el número real de bytes necesarios para almacenar la variable al menos dos bytes.</span><span class="sxs-lookup"><span data-stu-id="02db3-1919">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.</span></span>  
  
-   <span data-ttu-id="02db3-1920">Si la variable que se está escribiendo es un objeto que contiene una cadena, `FilePut` escribe un descriptor de dos bytes que identifica el `VarType(8)` del objeto, un descriptor de dos bytes que indica la longitud de la cadena y, a continuación, escribe los datos de cadena.</span><span class="sxs-lookup"><span data-stu-id="02db3-1920">If the variable being written is an object that contains a string, `FilePut` writes a two byte descriptor identifying the `VarType(8)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data.</span></span> <span data-ttu-id="02db3-1921">La longitud de registro especificada por el `RecordLength` parámetro en el `FileOpen` función debe ser mayor que la longitud real de la cadena de al menos cuatro bytes.</span><span class="sxs-lookup"><span data-stu-id="02db3-1921">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string.</span></span> <span data-ttu-id="02db3-1922">Si desea escribir una cadena sin el descriptor, debería pasar `True` a la `StringIsFixedLength` parámetro y la cadena que lea debe tener la longitud correcta.</span><span class="sxs-lookup"><span data-stu-id="02db3-1922">If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="02db3-1923">Si la variable que se escribe es una matriz, tendrá la opción si desea escribir un descriptor para el tamaño y las dimensiones de la matriz o no.</span><span class="sxs-lookup"><span data-stu-id="02db3-1923">If the variable being written is an array, you have a choice as to whether or not to write a descriptor for the size and dimensions of the array.</span></span> <span data-ttu-id="02db3-1924">Visual Basic 6.0 y versiones anteriores escriben el descriptor de archivo para una matriz dinámica pero no para una matriz de tamaño fijo.</span><span class="sxs-lookup"><span data-stu-id="02db3-1924">Visual Basic 6.0 and earlier versions write the file descriptor for a dynamic array but not for a fixed-size array.</span></span> <span data-ttu-id="02db3-1925">De forma predeterminada, Visual Basic 2005 no escribe el descriptor.</span><span class="sxs-lookup"><span data-stu-id="02db3-1925">Visual Basic 2005 defaults to not writing the descriptor.</span></span> <span data-ttu-id="02db3-1926">Para escribir el descriptor, establezca el `ArrayIsDynamic` parámetro `True`.</span><span class="sxs-lookup"><span data-stu-id="02db3-1926">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="02db3-1927">Al escribir la matriz, se tiene que coincidir con la forma en que se leerá la matriz; Si se va a leer con el descriptor, tendrá que escribir el descriptor.</span><span class="sxs-lookup"><span data-stu-id="02db3-1927">When writing the array, you have to match the way the array will be read; if it will be read with the descriptor, you have to write the descriptor.</span></span> <span data-ttu-id="02db3-1928">El descriptor especifica el rango de la matriz, el tamaño y los límites inferiores de cada rango.</span><span class="sxs-lookup"><span data-stu-id="02db3-1928">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="02db3-1929">Su longitud es igual a 2 más 8 veces el número de dimensiones: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="02db3-1929">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="02db3-1930">La longitud de registro especificada por el `RecordLength` cláusula en la `FileOpen` función debe ser mayor o igual a la suma de todos los bytes necesarios para escribir los datos de matriz y el descriptor de matriz.</span><span class="sxs-lookup"><span data-stu-id="02db3-1930">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="02db3-1931">Por ejemplo, la siguiente declaración de matriz requiere 218 bytes cuando se escribe la matriz en el disco.</span><span class="sxs-lookup"><span data-stu-id="02db3-1931">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#43](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#43)]  
  
-   <span data-ttu-id="02db3-1932">Si la variable que se escribe es cualquier otro tipo de variable (no una cadena de longitud variable o un objeto), `FilePut` escribe sólo los datos de la variable.</span><span class="sxs-lookup"><span data-stu-id="02db3-1932">If the variable being written is any other type of variable (not a variable-length string or an object), `FilePut` writes only the variable data.</span></span> <span data-ttu-id="02db3-1933">La longitud de registro especificada por el `RecordLength` cláusula en la `FileOpen` función debe ser mayor o igual que la longitud de los datos que se va a escribir.</span><span class="sxs-lookup"><span data-stu-id="02db3-1933">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being written.</span></span>  
  
-   <span data-ttu-id="02db3-1934">`FilePut` escribe elementos de estructuras como si cada uno se escribieron individualmente, excepto que no hay ningún relleno entre los elementos.</span><span class="sxs-lookup"><span data-stu-id="02db3-1934">`FilePut` writes elements of structures as if each were written individually, except there is no padding between elements.</span></span> <span data-ttu-id="02db3-1935">El `VBFixedString` atributo puede aplicarse a campos de cadena de las estructuras para indicar el tamaño de la cadena cuando se escribe en el disco.</span><span class="sxs-lookup"><span data-stu-id="02db3-1935">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of the string when written to disk.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="02db3-1936">Cadena de los campos que tienen más bytes que el especificado por el `VBFixedString` atributo se truncan cuando se escribe en el disco,</span><span class="sxs-lookup"><span data-stu-id="02db3-1936">String fields that have more bytes than specified by the `VBFixedString` attribute are truncated when written to disk,</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="02db3-1937">Modo binario</span><span class="sxs-lookup"><span data-stu-id="02db3-1937">Binary Mode</span></span>  
 <span data-ttu-id="02db3-1938">De los archivos abiertos en `Binary` modo, la mayoría de los `Random` se aplican las reglas de modo, con algunas excepciones.</span><span class="sxs-lookup"><span data-stu-id="02db3-1938">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="02db3-1939">Las siguientes reglas para los archivos abiertos en `Binary` modo difieren de las reglas para `Random` modo:</span><span class="sxs-lookup"><span data-stu-id="02db3-1939">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="02db3-1940">El `RecordLength` cláusula en la `FileOpen` función no tiene ningún efecto.</span><span class="sxs-lookup"><span data-stu-id="02db3-1940">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="02db3-1941">`FilePut` escribe todas las variables en el disco de forma contigua, es decir, sin relleno entre los registros.</span><span class="sxs-lookup"><span data-stu-id="02db3-1941">`FilePut` writes all variables to disk contiguously, that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="02db3-1942">Para cualquier matriz que no sea una matriz en una estructura, `FilePut` escribe sólo los datos.</span><span class="sxs-lookup"><span data-stu-id="02db3-1942">For any array other than an array in a structure, `FilePut` writes only the data.</span></span> <span data-ttu-id="02db3-1943">No se escribe ningún descriptor.</span><span class="sxs-lookup"><span data-stu-id="02db3-1943">No descriptor is written.</span></span>  
  
-   <span data-ttu-id="02db3-1944">`FilePut` Escribe cadenas de longitud variable que no sean elementos de estructuras sin el descriptor de longitud de dos bytes.</span><span class="sxs-lookup"><span data-stu-id="02db3-1944">`FilePut` writes variable-length strings that are not elements of structures without the two-byte length descriptor.</span></span> <span data-ttu-id="02db3-1945">El número de bytes escritos es igual al número de caracteres de la cadena.</span><span class="sxs-lookup"><span data-stu-id="02db3-1945">The number of bytes written equals the number of characters in the string.</span></span> <span data-ttu-id="02db3-1946">Por ejemplo, las siguientes instrucciones escriben 11 bytes en el archivo número 1:</span><span class="sxs-lookup"><span data-stu-id="02db3-1946">For example, the following statements write 11 bytes to file number 1:</span></span>  
  
     [!code-vb[VbVbalrCatRef#44](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#44)]  
  
-   <span data-ttu-id="02db3-1947">Escribir en un archivo mediante el uso de la `FilePut` función requiere `Write` acceso desde el <xref:System.Security.Permissions.FileIOPermissionAccess> enumeración.</span><span class="sxs-lookup"><span data-stu-id="02db3-1947">Writing to a file by using the `FilePut` function requires `Write` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="02db3-1948">Este ejemplo se usa el `FilePut` función para escribir datos en un archivo.</span><span class="sxs-lookup"><span data-stu-id="02db3-1948">This example uses the `FilePut` function to write data to a file.</span></span> <span data-ttu-id="02db3-1949">Cinco registros de la estructura `Person` se escriben en el archivo.</span><span class="sxs-lookup"><span data-stu-id="02db3-1949">Five records of the structure `Person` are written to the file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#42](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#42)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="02db3-1950">
            <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-1950">
              <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="02db3-1951">File mode is invalid.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-1951">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Len(System.UInt16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
      </Docs>
    </Member>
    <Member MemberName="FilePutObject">
      <MemberSignature Language="C#" Value="public static void FilePutObject (int FileNumber, object Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FilePutObject(int32 FileNumber, object Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FilePutObject(System.Int32,System.Object,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FilePutObject (FileNumber As Integer, Value As Object, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FilePutObject : int * obj * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FilePutObject (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Object" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="02db3-1952">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-1952">Required.</span>
          </span>
          <span data-ttu-id="02db3-1953">Any valid file number.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-1953">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="02db3-1954">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-1954">Required.</span>
          </span>
          <span data-ttu-id="02db3-1955">Valid variable name that contains data written to disk.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-1955">Valid variable name that contains data written to disk.</span>
          </span>
        </param>
        <param name="RecordNumber">
          <span data-ttu-id="02db3-1956">Optional.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-1956">Optional.</span>
          </span>
          <span data-ttu-id="02db3-1957">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-1957">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="02db3-1958">Writes data from a variable to a disk file.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-1958">Writes data from a variable to a disk file.</span>
          </span>
          <span data-ttu-id="02db3-1959">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePutObject" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-1959">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePutObject" />.</span>
          </span>
          <span data-ttu-id="02db3-1960">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-1960">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="02db3-1961">El `FilePutObject` función se utiliza en lugar de `FilePut` para evitar ambigüedades en tiempo de compilación si tipo `Object` se pasa en lugar de otro tipo, como `Integer`, `Long`, `Short`, y así sucesivamente.</span><span class="sxs-lookup"><span data-stu-id="02db3-1961">The `FilePutObject` function is used instead of `FilePut` to avoid ambiguities at compile time if type `Object` is passed instead of another type, such as `Integer`, `Long`, `Short`, and so forth.</span></span>  
  
 <span data-ttu-id="02db3-1962">`FilePutObject` escribe y lee descriptores que describen el objeto.</span><span class="sxs-lookup"><span data-stu-id="02db3-1962">`FilePutObject` writes and reads descriptors that describe the object.</span></span> <span data-ttu-id="02db3-1963">Si va a escribir el `Variant` tipo, `FilePutObject` es necesario.</span><span class="sxs-lookup"><span data-stu-id="02db3-1963">If you intend to write out the `Variant` type, `FilePutObject` is required.</span></span> <span data-ttu-id="02db3-1964">En caso de duda, si está utilizando un objeto para el segundo parámetro, se recomienda usar siempre `FilePutObject` y `FileGetObject`.</span><span class="sxs-lookup"><span data-stu-id="02db3-1964">When in doubt, if you are using an object for the second parameter, we recommend that you always use `FilePutObject` and `FileGetObject`.</span></span>  
  
 <span data-ttu-id="02db3-1965">`FilePutObject` solo es válido en `Random` y `Binary` modo.</span><span class="sxs-lookup"><span data-stu-id="02db3-1965">`FilePutObject` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="02db3-1966">Los datos escritos con `FilePutObject` normalmente se leen desde un archivo mediante `FileGetObject`.</span><span class="sxs-lookup"><span data-stu-id="02db3-1966">Data written with `FilePutObject` is usually read from a file by using `FileGetObject`.</span></span>  
  
 <span data-ttu-id="02db3-1967">El primer registro o byte de un archivo está en la posición 1, el segundo registro o byte en la posición 2 y así sucesivamente.</span><span class="sxs-lookup"><span data-stu-id="02db3-1967">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="02db3-1968">Si se omite `RecordNumber`, `FilePutObject` escribe el siguiente registro o byte después del último `FileGetObject` o `FilePutObject` función (o el registro o byte señalado por la última `Seek` función).</span><span class="sxs-lookup"><span data-stu-id="02db3-1968">If you omit `RecordNumber`, `FilePutObject` writes the next record or byte after the last `FileGetObject` or `FilePutObject` function (or the record or byte pointed to by the last `Seek` function).</span></span>  
  
 <span data-ttu-id="02db3-1969">El `StringIsFixedLength` argumento controla si la función interpreta las cadenas como longitud fija o variable.</span><span class="sxs-lookup"><span data-stu-id="02db3-1969">The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length.</span></span> <span data-ttu-id="02db3-1970">`FilePutObject` no escribe el descriptor de longitud cuando el argumento es `True`.</span><span class="sxs-lookup"><span data-stu-id="02db3-1970">`FilePutObject` does not write the length descriptor when the argument is `True`.</span></span> <span data-ttu-id="02db3-1971">Si usas `StringIsFixedLength`  =  `True` con `FilePutObject`, tendrá que hacer lo mismo con `FileGetObject`, y también debe asegurarse de que la cadena se inicializa con la longitud esperada.</span><span class="sxs-lookup"><span data-stu-id="02db3-1971">If you use `StringIsFixedLength` = `True` with `FilePutObject`, you have to do the same with `FileGetObject`, and you must also make sure that the string is initialized to the length expected.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="02db3-1972">Modo aleatorio</span><span class="sxs-lookup"><span data-stu-id="02db3-1972">Random Mode</span></span>  
 <span data-ttu-id="02db3-1973">De los archivos abiertos en `Random` modo, se aplican las reglas siguientes:</span><span class="sxs-lookup"><span data-stu-id="02db3-1973">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="02db3-1974">Si la longitud de los datos que se va a escribir es menor que la longitud especificada en el `RecordLength` cláusula de la `FileOpen` función, `FilePutObject` escribirá los registros posteriores en los límites de longitud de registro.</span><span class="sxs-lookup"><span data-stu-id="02db3-1974">If the length of the data being written is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FilePutObject` writes subsequent records on record-length boundaries.</span></span> <span data-ttu-id="02db3-1975">El espacio entre el final de un registro y el inicio del siguiente registro se rellena con el contenido existente del búfer del archivo.</span><span class="sxs-lookup"><span data-stu-id="02db3-1975">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="02db3-1976">Como no se puede determinar con exactitud la cantidad de datos de relleno, suele ser una buena idea tener la longitud del registro coincide con la longitud de los datos que se va a escribir.</span><span class="sxs-lookup"><span data-stu-id="02db3-1976">Because the amount of padding data cannot be precisely determined, it is generally a good idea to have the record length match the length of the data being written.</span></span> <span data-ttu-id="02db3-1977">Si la longitud de los datos que se va a escribir es mayor que la longitud especificada en el `RecordLength` cláusula de la `FileOpen` función, se produce una excepción.</span><span class="sxs-lookup"><span data-stu-id="02db3-1977">If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception is thrown.</span></span>  
  
-   <span data-ttu-id="02db3-1978">Si la variable que se está escribiendo es un objeto que contiene un tipo numérico, `FilePutObject` escribe dos bytes para identificar el `VarType` del objeto y, a continuación, escribe la variable.</span><span class="sxs-lookup"><span data-stu-id="02db3-1978">If the variable being written is an object that contains a numeric type, `FilePutObject` writes two bytes identifying the `VarType` of the object and then writes the variable.</span></span> <span data-ttu-id="02db3-1979">Por ejemplo, al escribir un objeto que contiene un entero, `FilePutObject` escribe seis bytes: dos bytes que identifican el objeto como `VarType(3)` (`Integer`) y cuatro bytes que contienen los datos.</span><span class="sxs-lookup"><span data-stu-id="02db3-1979">For example, when writing an object that contains an integer, `FilePutObject` writes six bytes: two bytes that identify the object as `VarType(3)` (`Integer`) and four bytes that contain the data.</span></span> <span data-ttu-id="02db3-1980">La longitud de registro especificada por el `RecordLength` parámetro en el `FileOpen` función debe ser mayor que el número real de bytes necesarios para almacenar la variable al menos dos bytes.</span><span class="sxs-lookup"><span data-stu-id="02db3-1980">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.</span></span>  
  
-   <span data-ttu-id="02db3-1981">Si la variable que se está escribiendo es un objeto que contiene una cadena, `FilePutObject` escribe un descriptor de dos bytes que identifica el `VarType(8)` del objeto, un descriptor de dos bytes que indica la longitud de la cadena y, a continuación, escribe los datos de cadena.</span><span class="sxs-lookup"><span data-stu-id="02db3-1981">If the variable being written is an object that contains a string, `FilePutObject` writes a two-byte descriptor identifying the `VarType(8)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data.</span></span> <span data-ttu-id="02db3-1982">La longitud de registro especificada por el `RecordLength` parámetro en el `FileOpen` función debe ser mayor que la longitud real de la cadena de al menos cuatro bytes.</span><span class="sxs-lookup"><span data-stu-id="02db3-1982">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string.</span></span> <span data-ttu-id="02db3-1983">Si desea escribir una cadena sin el descriptor, debería pasar `True` a la `StringIsFixedLength` parámetro y la cadena que lea debe tener la longitud correcta.</span><span class="sxs-lookup"><span data-stu-id="02db3-1983">If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="02db3-1984">Si la variable que se escribe es una matriz y, a continuación, la longitud de registro especificado por el `RecordLength` cláusula en la `FileOpen` función debe ser mayor o igual a la suma de todos los bytes necesarios para escribir los datos de matriz y el descriptor de matriz.</span><span class="sxs-lookup"><span data-stu-id="02db3-1984">If the variable being written is an array, then the record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="02db3-1985">El descriptor especifica el rango de la matriz, el tamaño y los límites inferiores de cada rango.</span><span class="sxs-lookup"><span data-stu-id="02db3-1985">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="02db3-1986">Su longitud es igual a 2 más 8 veces el número de dimensiones: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="02db3-1986">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="02db3-1987">Modo binario</span><span class="sxs-lookup"><span data-stu-id="02db3-1987">Binary Mode</span></span>  
 <span data-ttu-id="02db3-1988">De archivos abiertos en `Binary` modo, todas las `Random` se aplican las reglas de modo, excepto:</span><span class="sxs-lookup"><span data-stu-id="02db3-1988">For files opened in `Binary` mode, all the `Random` mode rules apply, except:</span></span>  
  
-   <span data-ttu-id="02db3-1989">El `RecordLength` cláusula en la `FileOpen` función no tiene ningún efecto.</span><span class="sxs-lookup"><span data-stu-id="02db3-1989">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="02db3-1990">`FilePutObject` escribe todas las variables en el disco de forma contigua, es decir, sin relleno entre los registros.</span><span class="sxs-lookup"><span data-stu-id="02db3-1990">`FilePutObject` writes all variables to disk contiguously, that is, without padding between records.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="02db3-1991">Este ejemplo se usa el `FilePutObject` función para escribir una cadena en un archivo.</span><span class="sxs-lookup"><span data-stu-id="02db3-1991">This example uses the `FilePutObject` function to write a string to a file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#54](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#54)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />
      </Docs>
    </Member>
    <Member MemberName="FileWidth">
      <MemberSignature Language="C#" Value="public static void FileWidth (int FileNumber, int RecordWidth);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileWidth(int32 FileNumber, int32 RecordWidth) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileWidth(System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileWidth (FileNumber As Integer, RecordWidth As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void FileWidth(int FileNumber, int RecordWidth);" />
      <MemberSignature Language="F#" Value="static member FileWidth : int * int -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileWidth (FileNumber, RecordWidth)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="RecordWidth" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="02db3-1992">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-1992">Required.</span>
          </span>
          <span data-ttu-id="02db3-1993">Any valid file number.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-1993">Any valid file number.</span>
          </span>
        </param>
        <param name="RecordWidth">
          <span data-ttu-id="02db3-1994">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-1994">Required.</span>
          </span>
          <span data-ttu-id="02db3-1995">Numeric expression in the range 0–255, inclusive, which indicates how many characters appear on a line before a new line is started.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-1995">Numeric expression in the range 0–255, inclusive, which indicates how many characters appear on a line before a new line is started.</span>
          </span>
          <span data-ttu-id="02db3-1996">If <c>RecordWidth</c> equals 0, there is no limit to the length of a line.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-1996">If <c>RecordWidth</c> equals 0, there is no limit to the length of a line.</span>
          </span>
          <span data-ttu-id="02db3-1997">The default value for <c>RecordWidth</c> is 0.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-1997">The default value for <c>RecordWidth</c> is 0.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="02db3-1998">Assigns an output line width to a file opened by using the <see langword="FileOpen" /> function.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-1998">Assigns an output line width to a file opened by using the <see langword="FileOpen" /> function.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="02db3-1999">Este ejemplo se usa el `FileWidth` función para establecer el ancho de línea de salida de un archivo.</span><span class="sxs-lookup"><span data-stu-id="02db3-1999">This example uses the `FileWidth` function to set the output line width for a file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#10](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#10)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="02db3-2000">File mode is invalid.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-2000">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="T:System.IO.IOException" />
      </Docs>
    </Member>
    <Member MemberName="FreeFile">
      <MemberSignature Language="C#" Value="public static int FreeFile ();" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 FreeFile() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FreeFile" />
      <MemberSignature Language="VB.NET" Value="Public Function FreeFile () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int FreeFile();" />
      <MemberSignature Language="F#" Value="static member FreeFile : unit -&gt; int" Usage="Microsoft.VisualBasic.FileSystem.FreeFile " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="02db3-2001">Returns an <see langword="Integer" /> value that represents the next file number available for use by the <see langword="FileOpen" /> function.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-2001">Returns an <see langword="Integer" /> value that represents the next file number available for use by the <see langword="FileOpen" /> function.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="02db3-2002">Returns an <see langword="Integer" /> value that represents the next file number available for use by the <see langword="FileOpen" /> function.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-2002">Returns an <see langword="Integer" /> value that represents the next file number available for use by the <see langword="FileOpen" /> function.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="02db3-2003">Use `FreeFile` para proporcionar un número de archivo que ya no se usa.</span><span class="sxs-lookup"><span data-stu-id="02db3-2003">Use `FreeFile` to supply a file number that is not already being used.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="02db3-2004">Este ejemplo se usa el `FreeFile` función para devolver el siguiente número de archivo disponibles.</span><span class="sxs-lookup"><span data-stu-id="02db3-2004">This example uses the `FreeFile` function to return the next available file number.</span></span> <span data-ttu-id="02db3-2005">Se abren cinco archivos de salida dentro del bucle, y algunos datos de ejemplo se escriben en cada uno.</span><span class="sxs-lookup"><span data-stu-id="02db3-2005">Five files are opened for output within the loop, and some sample data is written to each.</span></span>  
  
 [!code-vb[VbVbalrCatRef#55](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#55)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="02db3-2006">More than 255 files are in use.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-2006">More than 255 files are in use.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="T:System.IO.IOException" />
      </Docs>
    </Member>
    <Member MemberName="GetAttr">
      <MemberSignature Language="C#" Value="public static Microsoft.VisualBasic.FileAttribute GetAttr (string PathName);" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype Microsoft.VisualBasic.FileAttribute GetAttr(string PathName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.GetAttr(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetAttr (PathName As String) As FileAttribute" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::VisualBasic::FileAttribute GetAttr(System::String ^ PathName);" />
      <MemberSignature Language="F#" Value="static member GetAttr : string -&gt; Microsoft.VisualBasic.FileAttribute" Usage="Microsoft.VisualBasic.FileSystem.GetAttr PathName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.VisualBasic.FileAttribute</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="PathName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="PathName">
          <span data-ttu-id="02db3-2007">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-2007">Required.</span>
          </span>
          <span data-ttu-id="02db3-2008">
            <see langword="String" /> expression that specifies a file, directory, or folder name.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-2008">
              <see langword="String" /> expression that specifies a file, directory, or folder name.</span>
          </span>
          <span data-ttu-id="02db3-2009">
            <c>PathName</c> can include the directory or folder, and the drive.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-2009">
              <c>PathName</c> can include the directory or folder, and the drive.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="02db3-2010">Returns a <see langword="FileAttribute" /> value that represents the attributes of a file, directory, or folder.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-2010">Returns a <see langword="FileAttribute" /> value that represents the attributes of a file, directory, or folder.</span>
          </span>
          <span data-ttu-id="02db3-2011">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileAttribute" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-2011">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileAttribute" />.</span>
          </span>
          <span data-ttu-id="02db3-2012">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-2012">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="02db3-2013">The value returned by <see langword="GetAttr" /> is the sum of the following enumeration values:  <list type="table"><item><term> Value  </term><description> Constant  </description><description> Description  </description></item><item><term><see langword="Normal" /></term><description><see langword="vbNormal" /></description><description> Normal.  </description></item><item><term><see langword="ReadOnly" /></term><description><see langword="vbReadOnly" /></description><description> Read-only.  </description></item><item><term><see langword="Hidden" /></term><description><see langword="vbHidden" /></description><description> Hidden.  </description></item><item><term><see langword="System" /></term><description><see langword="vbSystem" /></description><description> System file.  </description></item><item><term><see langword="Directory" /></term><description><see langword="vbDirectory" /></description><description> Directory or folder.  </description></item><item><term><see langword="Archive" /></term><description><see langword="vbArchive" /></description><description> File has changed since last backup.  </description></item><item><term><see langword="Alias" /></term><description><see langword="vbAlias" /></description><description> File has a different name.  </description></item></list><block subset="none" type="note"><para> These enumerations are specified by the Visual Basic language. The names can be used anywhere in your code in place of the actual values.  </para></block></span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-2013">The value returned by <see langword="GetAttr" /> is the sum of the following enumeration values:  <list type="table"><item><term> Value  </term><description> Constant  </description><description> Description  </description></item><item><term><see langword="Normal" /></term><description><see langword="vbNormal" /></description><description> Normal.  </description></item><item><term><see langword="ReadOnly" /></term><description><see langword="vbReadOnly" /></description><description> Read-only.  </description></item><item><term><see langword="Hidden" /></term><description><see langword="vbHidden" /></description><description> Hidden.  </description></item><item><term><see langword="System" /></term><description><see langword="vbSystem" /></description><description> System file.  </description></item><item><term><see langword="Directory" /></term><description><see langword="vbDirectory" /></description><description> Directory or folder.  </description></item><item><term><see langword="Archive" /></term><description><see langword="vbArchive" /></description><description> File has changed since last backup.  </description></item><item><term><see langword="Alias" /></term><description><see langword="vbAlias" /></description><description> File has a different name.  </description></item></list><block subset="none" type="note"><para> These enumerations are specified by the Visual Basic language. The names can be used anywhere in your code in place of the actual values.  </para></block></span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="02db3-2014">Para determinar qué atributos se establecen, utilice el `And` operador para realizar una comparación bit a bit del valor devuelto por la `GetAttr` función y el valor del atributo de archivo individuales que desee.</span><span class="sxs-lookup"><span data-stu-id="02db3-2014">To determine which attributes are set, use the `And` operator to perform a bitwise comparison of the value returned by the `GetAttr` function and the value of the individual file attribute you want.</span></span> <span data-ttu-id="02db3-2015">Si el resultado no es cero, ese atributo se establece para el archivo con nombre.</span><span class="sxs-lookup"><span data-stu-id="02db3-2015">If the result is not zero, that attribute is set for the named file.</span></span> <span data-ttu-id="02db3-2016">Por ejemplo, el valor devuelto de los siguientes `And` expresión es cero si el `Archive` no se establece el atributo:</span><span class="sxs-lookup"><span data-stu-id="02db3-2016">For example, the return value of the following `And` expression is zero if the `Archive` attribute is not set:</span></span>  
  
```vb  
Result = GetAttr(FName) And vbArchive  
```  
  
 <span data-ttu-id="02db3-2017">Se devuelve un valor distinto de cero si el `Archive` está establecido.</span><span class="sxs-lookup"><span data-stu-id="02db3-2017">A nonzero value is returned if the `Archive` attribute is set.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="02db3-2018">Este ejemplo se usa el `GetAttr` función para determinar los atributos de un archivo, directorio o carpeta.</span><span class="sxs-lookup"><span data-stu-id="02db3-2018">This example uses the `GetAttr` function to determine the attributes of a file and directory or folder.</span></span>  
  
 [!code-vb[VbVbalrCatRef#25](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#25)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="02db3-2019">
            <paramref name="Pathname" /> is invalid or contains wildcards.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-2019">
              <paramref name="Pathname" /> is invalid or contains wildcards.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.FileNotFoundException">
          <span data-ttu-id="02db3-2020">Target file does not exist.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-2020">Target file does not exist.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileAttr(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.SetAttr(System.String,Microsoft.VisualBasic.FileAttribute)" />
        <altmember cref="T:System.IO.IOException" />
        <altmember cref="T:System.IO.FileNotFoundException" />
        <altmember cref="T:Microsoft.VisualBasic.FileAttribute" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Input">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="02db3-2021">Reads data from an open sequential file and assigns the data to variables.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-2021">Reads data from an open sequential file and assigns the data to variables.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Input">
      <MemberSignature Language="C#" Value="public static void Input (int FileNumber, ref bool Value);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Input(int32 FileNumber, bool&amp; Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Input(System.Int32,System.Boolean@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Input (FileNumber As Integer, ByRef Value As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Input(int FileNumber, bool % Value);" />
      <MemberSignature Language="F#" Value="static member Input : int *  -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Input (FileNumber, Value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Boolean&amp;" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="02db3-2022">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-2022">Required.</span>
          </span>
          <span data-ttu-id="02db3-2023">Any valid file number.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-2023">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="02db3-2024">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-2024">Required.</span>
          </span>
          <span data-ttu-id="02db3-2025">Variable that is assigned the values read from the file—cannot be an array or object variable.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-2025">Variable that is assigned the values read from the file—cannot be an array or object variable.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="02db3-2026">Reads data from an open sequential file and assigns the data to variables.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-2026">Reads data from an open sequential file and assigns the data to variables.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="02db3-2027">El `Input` función se proporciona por compatibilidad con versiones anteriores y puede afectar al rendimiento.</span><span class="sxs-lookup"><span data-stu-id="02db3-2027">The `Input` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="02db3-2028">Para las aplicaciones que no es heredado, el `My.Computer.FileSystem` objeto proporciona un mejor rendimiento.</span><span class="sxs-lookup"><span data-stu-id="02db3-2028">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="02db3-2029">Para obtener más información, consulte [acceso a archivos con Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span><span class="sxs-lookup"><span data-stu-id="02db3-2029">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="02db3-2030">Los datos leídos con `Input` se escriben normalmente en un archivo mediante el uso de `Write`.</span><span class="sxs-lookup"><span data-stu-id="02db3-2030">Data read with `Input` is usually written to a file by using `Write`.</span></span> <span data-ttu-id="02db3-2031">Utilice esta función sólo con los archivos abiertos en `Input` o `Binary` modo.</span><span class="sxs-lookup"><span data-stu-id="02db3-2031">Use this function only with files opened in `Input` or `Binary` mode.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="02db3-2032">Al leer de archivos, no realice ninguna decisión sobre el contenido del archivo basándose en la extensión de nombre de archivo.</span><span class="sxs-lookup"><span data-stu-id="02db3-2032">When reading from files, do not make decisions about the contents of the file based on the file name extension.</span></span> <span data-ttu-id="02db3-2033">Por ejemplo, un archivo denominado Form1.vb no puede ser un archivo de código fuente de Visual Basic 2005.</span><span class="sxs-lookup"><span data-stu-id="02db3-2033">For example, a file that is named Form1.vb may not be a Visual Basic 2005 source file.</span></span>  
  
 <span data-ttu-id="02db3-2034">Cuando se leen datos numéricos o cadena estándar se asignan a variables sin modificación.</span><span class="sxs-lookup"><span data-stu-id="02db3-2034">When read, standard string or numeric data is assigned to variables without modification.</span></span> <span data-ttu-id="02db3-2035">En la tabla siguiente se muestra cómo se tratan otros datos de entrada.</span><span class="sxs-lookup"><span data-stu-id="02db3-2035">The following table illustrates how other input data is treated.</span></span>  
  
|<span data-ttu-id="02db3-2036">Datos</span><span class="sxs-lookup"><span data-stu-id="02db3-2036">Data</span></span>|<span data-ttu-id="02db3-2037">Valor asignado a la variable</span><span class="sxs-lookup"><span data-stu-id="02db3-2037">Value assigned to variable</span></span>|  
|-|-|  
|<span data-ttu-id="02db3-2038">Delimitadores de coma o línea en blanco</span><span class="sxs-lookup"><span data-stu-id="02db3-2038">Delimiting comma or blank line</span></span>|<span data-ttu-id="02db3-2039">Empty</span><span class="sxs-lookup"><span data-stu-id="02db3-2039">Empty</span></span>|  
|<span data-ttu-id="02db3-2040">NULL #</span><span class="sxs-lookup"><span data-stu-id="02db3-2040">#NULL#</span></span>|`DBNull`|  
|<span data-ttu-id="02db3-2041"># TRUE o FALSE #</span><span class="sxs-lookup"><span data-stu-id="02db3-2041">#TRUE# or #FALSE#</span></span>|<span data-ttu-id="02db3-2042">`True` o `False`</span><span class="sxs-lookup"><span data-stu-id="02db3-2042">`True` or `False`</span></span>|  
|#`yyyy-mm-dd hh:mm:ss`#|<span data-ttu-id="02db3-2043">La fecha y hora representadas por la expresión</span><span class="sxs-lookup"><span data-stu-id="02db3-2043">The date and/or time represented by the expression</span></span>|  
|<span data-ttu-id="02db3-2044">#ERROR `errornumber`#</span><span class="sxs-lookup"><span data-stu-id="02db3-2044">#ERROR `errornumber`#</span></span>|<span data-ttu-id="02db3-2045">`errornumber` (la variable es un objeto etiquetado como error)</span><span class="sxs-lookup"><span data-stu-id="02db3-2045">`errornumber` (variable is an object tagged as an error)</span></span>|  
  
 <span data-ttu-id="02db3-2046">Si se alcanza el final del archivo mientras se está introduciendo un elemento de datos, la entrada se detiene y se produce un error.</span><span class="sxs-lookup"><span data-stu-id="02db3-2046">If you reach the end of the file while you are inputting a data item, the input is stopped and an error occurs.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="02db3-2047">El `Input` función no está localizada.</span><span class="sxs-lookup"><span data-stu-id="02db3-2047">The `Input` function is not localized.</span></span> <span data-ttu-id="02db3-2048">Por ejemplo, en la versión en alemán, si se escribe 3,14159, devuelve solo 3, porque se trata la coma como separador de variable en lugar de como un separador decimal.</span><span class="sxs-lookup"><span data-stu-id="02db3-2048">For example, in the German version, if you input 3,14159, it returns only 3, because the comma is treated as a variable separator instead of as a decimal point.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="02db3-2049">Leer un archivo mediante el uso de la `Input` función requiere `Read` acceso desde el `FileIOPermissionAccess` enumeración.</span><span class="sxs-lookup"><span data-stu-id="02db3-2049">Reading from a file by using the `Input` function requires `Read` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="02db3-2050">Para obtener más información, consulta <xref:System.Security.Permissions.FileIOPermissionAccess>.</span><span class="sxs-lookup"><span data-stu-id="02db3-2050">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="02db3-2051">Este ejemplo se usa el `Input` función para leer datos desde un archivo en dos variables.</span><span class="sxs-lookup"><span data-stu-id="02db3-2051">This example uses the `Input` function to read data from a file into two variables.</span></span> <span data-ttu-id="02db3-2052">En este ejemplo se da por supuesto que `TestFile` es un archivo que tiene algunas líneas de los datos escritos en él con el `Write` funcione, cada línea que contiene una cadena entre comillas y un número separado por una coma, por ejemplo: ("Hello", 234).</span><span class="sxs-lookup"><span data-stu-id="02db3-2052">This example assumes that `TestFile` is a file that has some lines of data written to it using the `Write` function, each line containing a string in quotations and a number separated by a comma, for example: ("Hello", 234).</span></span>  
  
 [!code-vb[VbVbalrCatRef#35](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#35)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="02db3-2053">File mode is invalid.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-2053">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.InputString(System.Int32,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
      </Docs>
    </Member>
    <Member MemberName="Input">
      <MemberSignature Language="C#" Value="public static void Input (int FileNumber, ref byte Value);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Input(int32 FileNumber, unsigned int8&amp; Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Input(System.Int32,System.Byte@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Input (FileNumber As Integer, ByRef Value As Byte)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Input(int FileNumber, System::Byte % Value);" />
      <MemberSignature Language="F#" Value="static member Input : int *  -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Input (FileNumber, Value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Byte&amp;" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="02db3-2054">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-2054">Required.</span>
          </span>
          <span data-ttu-id="02db3-2055">Any valid file number.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-2055">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="02db3-2056">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-2056">Required.</span>
          </span>
          <span data-ttu-id="02db3-2057">Variable that is assigned the values read from the file—cannot be an array or object variable.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-2057">Variable that is assigned the values read from the file—cannot be an array or object variable.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="02db3-2058">Reads data from an open sequential file and assigns the data to variables.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-2058">Reads data from an open sequential file and assigns the data to variables.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="02db3-2059">El `Input` función se proporciona por compatibilidad con versiones anteriores y puede afectar al rendimiento.</span><span class="sxs-lookup"><span data-stu-id="02db3-2059">The `Input` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="02db3-2060">Para las aplicaciones que no es heredado, el `My.Computer.FileSystem` objeto proporciona un mejor rendimiento.</span><span class="sxs-lookup"><span data-stu-id="02db3-2060">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="02db3-2061">Para obtener más información, consulte [acceso a archivos con Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span><span class="sxs-lookup"><span data-stu-id="02db3-2061">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="02db3-2062">Los datos leídos con `Input` se escriben normalmente en un archivo mediante el uso de `Write`.</span><span class="sxs-lookup"><span data-stu-id="02db3-2062">Data read with `Input` is usually written to a file by using `Write`.</span></span> <span data-ttu-id="02db3-2063">Utilice esta función sólo con los archivos abiertos en `Input` o `Binary` modo.</span><span class="sxs-lookup"><span data-stu-id="02db3-2063">Use this function only with files opened in `Input` or `Binary` mode.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="02db3-2064">Al leer de archivos, no realice ninguna decisión sobre el contenido del archivo basándose en la extensión de nombre de archivo.</span><span class="sxs-lookup"><span data-stu-id="02db3-2064">When reading from files, do not make decisions about the contents of the file based on the file name extension.</span></span> <span data-ttu-id="02db3-2065">Por ejemplo, un archivo denominado Form1.vb no puede ser un archivo de código fuente de Visual Basic 2005.</span><span class="sxs-lookup"><span data-stu-id="02db3-2065">For example, a file that is named Form1.vb may not be a Visual Basic 2005 source file.</span></span>  
  
 <span data-ttu-id="02db3-2066">Cuando se leen datos numéricos o cadena estándar se asignan a variables sin modificación.</span><span class="sxs-lookup"><span data-stu-id="02db3-2066">When read, standard string or numeric data is assigned to variables without modification.</span></span> <span data-ttu-id="02db3-2067">En la tabla siguiente se muestra cómo se tratan otros datos de entrada.</span><span class="sxs-lookup"><span data-stu-id="02db3-2067">The following table illustrates how other input data is treated.</span></span>  
  
|<span data-ttu-id="02db3-2068">Datos</span><span class="sxs-lookup"><span data-stu-id="02db3-2068">Data</span></span>|<span data-ttu-id="02db3-2069">Valor asignado a la variable</span><span class="sxs-lookup"><span data-stu-id="02db3-2069">Value assigned to variable</span></span>|  
|-|-|  
|<span data-ttu-id="02db3-2070">Delimitadores de coma o línea en blanco</span><span class="sxs-lookup"><span data-stu-id="02db3-2070">Delimiting comma or blank line</span></span>|<span data-ttu-id="02db3-2071">Empty</span><span class="sxs-lookup"><span data-stu-id="02db3-2071">Empty</span></span>|  
|<span data-ttu-id="02db3-2072">NULL #</span><span class="sxs-lookup"><span data-stu-id="02db3-2072">#NULL#</span></span>|`DBNull`|  
|<span data-ttu-id="02db3-2073"># TRUE o FALSE #</span><span class="sxs-lookup"><span data-stu-id="02db3-2073">#TRUE# or #FALSE#</span></span>|<span data-ttu-id="02db3-2074">`True` o `False`</span><span class="sxs-lookup"><span data-stu-id="02db3-2074">`True` or `False`</span></span>|  
|#`yyyy-mm-dd hh:mm:ss`#|<span data-ttu-id="02db3-2075">La fecha y hora representadas por la expresión</span><span class="sxs-lookup"><span data-stu-id="02db3-2075">The date and/or time represented by the expression</span></span>|  
|<span data-ttu-id="02db3-2076">#ERROR `errornumber`#</span><span class="sxs-lookup"><span data-stu-id="02db3-2076">#ERROR `errornumber`#</span></span>|<span data-ttu-id="02db3-2077">`errornumber` (la variable es un objeto etiquetado como error)</span><span class="sxs-lookup"><span data-stu-id="02db3-2077">`errornumber` (variable is an object tagged as an error)</span></span>|  
  
 <span data-ttu-id="02db3-2078">Si se alcanza el final del archivo mientras se está introduciendo un elemento de datos, la entrada se detiene y se produce un error.</span><span class="sxs-lookup"><span data-stu-id="02db3-2078">If you reach the end of the file while you are inputting a data item, the input is stopped and an error occurs.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="02db3-2079">El `Input` función no está localizada.</span><span class="sxs-lookup"><span data-stu-id="02db3-2079">The `Input` function is not localized.</span></span> <span data-ttu-id="02db3-2080">Por ejemplo, en la versión en alemán, si se escribe 3,14159, devuelve solo 3, porque se trata la coma como separador de variable en lugar de como un separador decimal.</span><span class="sxs-lookup"><span data-stu-id="02db3-2080">For example, in the German version, if you input 3,14159, it returns only 3, because the comma is treated as a variable separator instead of as a decimal point.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="02db3-2081">Leer un archivo mediante el uso de la `Input` función requiere `Read` acceso desde el `FileIOPermissionAccess` enumeración.</span><span class="sxs-lookup"><span data-stu-id="02db3-2081">Reading from a file by using the `Input` function requires `Read` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="02db3-2082">Para obtener más información, consulta <xref:System.Security.Permissions.FileIOPermissionAccess>.</span><span class="sxs-lookup"><span data-stu-id="02db3-2082">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="02db3-2083">Este ejemplo se usa el `Input` función para leer datos desde un archivo en dos variables.</span><span class="sxs-lookup"><span data-stu-id="02db3-2083">This example uses the `Input` function to read data from a file into two variables.</span></span> <span data-ttu-id="02db3-2084">En este ejemplo se da por supuesto que `TestFile` es un archivo que tiene algunas líneas de los datos escritos en él con el `Write` funcione, cada línea que contiene una cadena entre comillas y un número separado por una coma, por ejemplo: ("Hello", 234).</span><span class="sxs-lookup"><span data-stu-id="02db3-2084">This example assumes that `TestFile` is a file that has some lines of data written to it using the `Write` function, each line containing a string in quotations and a number separated by a comma, for example: ("Hello", 234).</span></span>  
  
 [!code-vb[VbVbalrCatRef#35](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#35)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="02db3-2085">File mode is invalid.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-2085">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.InputString(System.Int32,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
      </Docs>
    </Member>
    <Member MemberName="Input">
      <MemberSignature Language="C#" Value="public static void Input (int FileNumber, ref char Value);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Input(int32 FileNumber, char&amp; Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Input(System.Int32,System.Char@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Input (FileNumber As Integer, ByRef Value As Char)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Input(int FileNumber, char % Value);" />
      <MemberSignature Language="F#" Value="static member Input : int *  -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Input (FileNumber, Value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Char&amp;" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="02db3-2086">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-2086">Required.</span>
          </span>
          <span data-ttu-id="02db3-2087">Any valid file number.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-2087">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="02db3-2088">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-2088">Required.</span>
          </span>
          <span data-ttu-id="02db3-2089">Variable that is assigned the values read from the file—cannot be an array or object variable.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-2089">Variable that is assigned the values read from the file—cannot be an array or object variable.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="02db3-2090">Reads data from an open sequential file and assigns the data to variables.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-2090">Reads data from an open sequential file and assigns the data to variables.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="02db3-2091">El `Input` función se proporciona por compatibilidad con versiones anteriores y puede afectar al rendimiento.</span><span class="sxs-lookup"><span data-stu-id="02db3-2091">The `Input` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="02db3-2092">Para las aplicaciones que no es heredado, el `My.Computer.FileSystem` objeto proporciona un mejor rendimiento.</span><span class="sxs-lookup"><span data-stu-id="02db3-2092">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="02db3-2093">Para obtener más información, consulte [acceso a archivos con Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span><span class="sxs-lookup"><span data-stu-id="02db3-2093">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="02db3-2094">Los datos leídos con `Input` se escriben normalmente en un archivo mediante el uso de `Write`.</span><span class="sxs-lookup"><span data-stu-id="02db3-2094">Data read with `Input` is usually written to a file by using `Write`.</span></span> <span data-ttu-id="02db3-2095">Utilice esta función sólo con los archivos abiertos en `Input` o `Binary` modo.</span><span class="sxs-lookup"><span data-stu-id="02db3-2095">Use this function only with files opened in `Input` or `Binary` mode.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="02db3-2096">Al leer de archivos, no realice ninguna decisión sobre el contenido del archivo basándose en la extensión de nombre de archivo.</span><span class="sxs-lookup"><span data-stu-id="02db3-2096">When reading from files, do not make decisions about the contents of the file based on the file name extension.</span></span> <span data-ttu-id="02db3-2097">Por ejemplo, un archivo denominado Form1.vb no puede ser un archivo de código fuente de Visual Basic 2005.</span><span class="sxs-lookup"><span data-stu-id="02db3-2097">For example, a file that is named Form1.vb may not be a Visual Basic 2005 source file.</span></span>  
  
 <span data-ttu-id="02db3-2098">Cuando se leen datos numéricos o cadena estándar se asignan a variables sin modificación.</span><span class="sxs-lookup"><span data-stu-id="02db3-2098">When read, standard string or numeric data is assigned to variables without modification.</span></span> <span data-ttu-id="02db3-2099">En la tabla siguiente se muestra cómo se tratan otros datos de entrada.</span><span class="sxs-lookup"><span data-stu-id="02db3-2099">The following table illustrates how other input data is treated.</span></span>  
  
|<span data-ttu-id="02db3-2100">Datos</span><span class="sxs-lookup"><span data-stu-id="02db3-2100">Data</span></span>|<span data-ttu-id="02db3-2101">Valor asignado a la variable</span><span class="sxs-lookup"><span data-stu-id="02db3-2101">Value assigned to variable</span></span>|  
|-|-|  
|<span data-ttu-id="02db3-2102">Delimitadores de coma o línea en blanco</span><span class="sxs-lookup"><span data-stu-id="02db3-2102">Delimiting comma or blank line</span></span>|<span data-ttu-id="02db3-2103">Empty</span><span class="sxs-lookup"><span data-stu-id="02db3-2103">Empty</span></span>|  
|<span data-ttu-id="02db3-2104">NULL #</span><span class="sxs-lookup"><span data-stu-id="02db3-2104">#NULL#</span></span>|`DBNull`|  
|<span data-ttu-id="02db3-2105"># TRUE o FALSE #</span><span class="sxs-lookup"><span data-stu-id="02db3-2105">#TRUE# or #FALSE#</span></span>|<span data-ttu-id="02db3-2106">`True` o `False`</span><span class="sxs-lookup"><span data-stu-id="02db3-2106">`True` or `False`</span></span>|  
|#`yyyy-mm-dd hh:mm:ss`#|<span data-ttu-id="02db3-2107">La fecha y hora representadas por la expresión</span><span class="sxs-lookup"><span data-stu-id="02db3-2107">The date and/or time represented by the expression</span></span>|  
|<span data-ttu-id="02db3-2108">#ERROR `errornumber`#</span><span class="sxs-lookup"><span data-stu-id="02db3-2108">#ERROR `errornumber`#</span></span>|<span data-ttu-id="02db3-2109">`errornumber` (la variable es un objeto etiquetado como error)</span><span class="sxs-lookup"><span data-stu-id="02db3-2109">`errornumber` (variable is an object tagged as an error)</span></span>|  
  
 <span data-ttu-id="02db3-2110">Si se alcanza el final del archivo mientras se está introduciendo un elemento de datos, la entrada se detiene y se produce un error.</span><span class="sxs-lookup"><span data-stu-id="02db3-2110">If you reach the end of the file while you are inputting a data item, the input is stopped and an error occurs.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="02db3-2111">El `Input` función no está localizada.</span><span class="sxs-lookup"><span data-stu-id="02db3-2111">The `Input` function is not localized.</span></span> <span data-ttu-id="02db3-2112">Por ejemplo, en la versión en alemán, si se escribe 3,14159, devuelve solo 3, porque se trata la coma como separador de variable en lugar de como un separador decimal.</span><span class="sxs-lookup"><span data-stu-id="02db3-2112">For example, in the German version, if you input 3,14159, it returns only 3, because the comma is treated as a variable separator instead of as a decimal point.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="02db3-2113">Leer un archivo mediante el uso de la `Input` función requiere `Read` acceso desde el `FileIOPermissionAccess` enumeración.</span><span class="sxs-lookup"><span data-stu-id="02db3-2113">Reading from a file by using the `Input` function requires `Read` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="02db3-2114">Para obtener más información, consulta <xref:System.Security.Permissions.FileIOPermissionAccess>.</span><span class="sxs-lookup"><span data-stu-id="02db3-2114">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="02db3-2115">Este ejemplo se usa el `Input` función para leer datos desde un archivo en dos variables.</span><span class="sxs-lookup"><span data-stu-id="02db3-2115">This example uses the `Input` function to read data from a file into two variables.</span></span> <span data-ttu-id="02db3-2116">En este ejemplo se da por supuesto que `TestFile` es un archivo que tiene varias líneas de los datos escritos en él con el `Write` funcione, cada línea que contiene una cadena entre comillas y un número separado por una coma, por ejemplo: ("Hello", 234).</span><span class="sxs-lookup"><span data-stu-id="02db3-2116">This example assumes that `TestFile` is a file that has several lines of data written to it using the `Write` function, each line containing a string in quotations and a number separated by a comma, for example: ("Hello", 234).</span></span>  
  
 [!code-vb[VbVbalrCatRef#35](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#35)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="02db3-2117">File mode is invalid.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-2117">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.InputString(System.Int32,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
      </Docs>
    </Member>
    <Member MemberName="Input">
      <MemberSignature Language="C#" Value="public static void Input (int FileNumber, ref DateTime Value);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Input(int32 FileNumber, valuetype System.DateTime&amp; Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Input(System.Int32,System.DateTime@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Input (FileNumber As Integer, ByRef Value As DateTime)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Input(int FileNumber, DateTime % Value);" />
      <MemberSignature Language="F#" Value="static member Input : int *  -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Input (FileNumber, Value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.DateTime&amp;" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="02db3-2118">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-2118">Required.</span>
          </span>
          <span data-ttu-id="02db3-2119">Any valid file number.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-2119">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="02db3-2120">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-2120">Required.</span>
          </span>
          <span data-ttu-id="02db3-2121">Variable that is assigned the values read from the file—cannot be an array or object variable.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-2121">Variable that is assigned the values read from the file—cannot be an array or object variable.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="02db3-2122">Reads data from an open sequential file and assigns the data to variables.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-2122">Reads data from an open sequential file and assigns the data to variables.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="02db3-2123">El `Input` función se proporciona por compatibilidad con versiones anteriores y puede afectar al rendimiento.</span><span class="sxs-lookup"><span data-stu-id="02db3-2123">The `Input` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="02db3-2124">Para las aplicaciones que no es heredado, el `My.Computer.FileSystem` objeto proporciona un mejor rendimiento.</span><span class="sxs-lookup"><span data-stu-id="02db3-2124">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="02db3-2125">Para obtener más información, consulte [acceso a archivos con Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span><span class="sxs-lookup"><span data-stu-id="02db3-2125">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="02db3-2126">Los datos leídos con `Input` se escriben normalmente en un archivo mediante el uso de `Write`.</span><span class="sxs-lookup"><span data-stu-id="02db3-2126">Data read with `Input` is usually written to a file by using `Write`.</span></span> <span data-ttu-id="02db3-2127">Utilice esta función sólo con los archivos abiertos en `Input` o `Binary` modo.</span><span class="sxs-lookup"><span data-stu-id="02db3-2127">Use this function only with files opened in `Input` or `Binary` mode.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="02db3-2128">Al leer de archivos, no realice ninguna decisión sobre el contenido del archivo basándose en la extensión de nombre de archivo.</span><span class="sxs-lookup"><span data-stu-id="02db3-2128">When reading from files, do not make decisions about the contents of the file based on the file name extension.</span></span> <span data-ttu-id="02db3-2129">Por ejemplo, un archivo denominado Form1.vb no puede ser un archivo de código fuente de Visual Basic 2005.</span><span class="sxs-lookup"><span data-stu-id="02db3-2129">For example, a file that is named Form1.vb may not be a Visual Basic 2005 source file.</span></span>  
  
 <span data-ttu-id="02db3-2130">Cuando se leen datos numéricos o cadena estándar se asignan a variables sin modificación.</span><span class="sxs-lookup"><span data-stu-id="02db3-2130">When read, standard string or numeric data is assigned to variables without modification.</span></span> <span data-ttu-id="02db3-2131">En la tabla siguiente se muestra cómo se tratan otros datos de entrada.</span><span class="sxs-lookup"><span data-stu-id="02db3-2131">The following table illustrates how other input data is treated.</span></span>  
  
|<span data-ttu-id="02db3-2132">Datos</span><span class="sxs-lookup"><span data-stu-id="02db3-2132">Data</span></span>|<span data-ttu-id="02db3-2133">Valor asignado a la variable</span><span class="sxs-lookup"><span data-stu-id="02db3-2133">Value assigned to variable</span></span>|  
|-|-|  
|<span data-ttu-id="02db3-2134">Delimitadores de coma o línea en blanco</span><span class="sxs-lookup"><span data-stu-id="02db3-2134">Delimiting comma or blank line</span></span>|<span data-ttu-id="02db3-2135">Empty</span><span class="sxs-lookup"><span data-stu-id="02db3-2135">Empty</span></span>|  
|<span data-ttu-id="02db3-2136">NULL #</span><span class="sxs-lookup"><span data-stu-id="02db3-2136">#NULL#</span></span>|`DBNull`|  
|<span data-ttu-id="02db3-2137"># TRUE o FALSE #</span><span class="sxs-lookup"><span data-stu-id="02db3-2137">#TRUE# or #FALSE#</span></span>|<span data-ttu-id="02db3-2138">`True` o `False`</span><span class="sxs-lookup"><span data-stu-id="02db3-2138">`True` or `False`</span></span>|  
|#`yyyy-mm-dd hh:mm:ss`#|<span data-ttu-id="02db3-2139">La fecha y hora representadas por la expresión</span><span class="sxs-lookup"><span data-stu-id="02db3-2139">The date and/or time represented by the expression</span></span>|  
|<span data-ttu-id="02db3-2140">#ERROR `errornumber`#</span><span class="sxs-lookup"><span data-stu-id="02db3-2140">#ERROR `errornumber`#</span></span>|<span data-ttu-id="02db3-2141">`errornumber` (la variable es un objeto etiquetado como error)</span><span class="sxs-lookup"><span data-stu-id="02db3-2141">`errornumber` (variable is an object tagged as an error)</span></span>|  
  
 <span data-ttu-id="02db3-2142">Si se alcanza el final del archivo mientras se está introduciendo un elemento de datos, la entrada se detiene y se produce un error.</span><span class="sxs-lookup"><span data-stu-id="02db3-2142">If you reach the end of the file while you are inputting a data item, the input is stopped and an error occurs.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="02db3-2143">El `Input` función no está localizada.</span><span class="sxs-lookup"><span data-stu-id="02db3-2143">The `Input` function is not localized.</span></span> <span data-ttu-id="02db3-2144">Por ejemplo, en la versión en alemán, si se escribe 3,14159, devuelve solo 3, porque se trata la coma como separador de variable en lugar de como un separador decimal.</span><span class="sxs-lookup"><span data-stu-id="02db3-2144">For example, in the German version, if you input 3,14159, it returns only 3, because the comma is treated as a variable separator instead of as a decimal point.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="02db3-2145">Leer un archivo mediante el uso de la `Input` función requiere `Read` acceso desde el `FileIOPermissionAccess` enumeración.</span><span class="sxs-lookup"><span data-stu-id="02db3-2145">Reading from a file by using the `Input` function requires `Read` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="02db3-2146">Para obtener más información, consulta <xref:System.Security.Permissions.FileIOPermissionAccess>.</span><span class="sxs-lookup"><span data-stu-id="02db3-2146">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="02db3-2147">Este ejemplo se usa el `Input` función para leer datos desde un archivo en dos variables.</span><span class="sxs-lookup"><span data-stu-id="02db3-2147">This example uses the `Input` function to read data from a file into two variables.</span></span> <span data-ttu-id="02db3-2148">En este ejemplo se da por supuesto que `TestFile` es un archivo que tiene varias líneas de los datos escritos en él con el `Write` funcione, cada línea que contiene una cadena entre comillas y un número separado por una coma, por ejemplo: ("Hello", 234).</span><span class="sxs-lookup"><span data-stu-id="02db3-2148">This example assumes that `TestFile` is a file that has several lines of data written to it using the `Write` function, each line containing a string in quotations and a number separated by a comma, for example: ("Hello", 234).</span></span>  
  
 [!code-vb[VbVbalrCatRef#35](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#35)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="02db3-2149">File mode is invalid.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-2149">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.InputString(System.Int32,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
      </Docs>
    </Member>
    <Member MemberName="Input">
      <MemberSignature Language="C#" Value="public static void Input (int FileNumber, ref decimal Value);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Input(int32 FileNumber, valuetype System.Decimal&amp; Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Input(System.Int32,System.Decimal@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Input (FileNumber As Integer, ByRef Value As Decimal)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Input(int FileNumber, System::Decimal % Value);" />
      <MemberSignature Language="F#" Value="static member Input : int *  -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Input (FileNumber, Value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Decimal&amp;" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="02db3-2150">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-2150">Required.</span>
          </span>
          <span data-ttu-id="02db3-2151">Any valid file number.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-2151">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="02db3-2152">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-2152">Required.</span>
          </span>
          <span data-ttu-id="02db3-2153">Variable that is assigned the values read from the file—cannot be an array or object variable.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-2153">Variable that is assigned the values read from the file—cannot be an array or object variable.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="02db3-2154">Reads data from an open sequential file and assigns the data to variables.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-2154">Reads data from an open sequential file and assigns the data to variables.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="02db3-2155">El `Input` función se proporciona por compatibilidad con versiones anteriores y puede afectar al rendimiento.</span><span class="sxs-lookup"><span data-stu-id="02db3-2155">The `Input` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="02db3-2156">Para las aplicaciones que no es heredado, el `My.Computer.FileSystem` objeto proporciona un mejor rendimiento.</span><span class="sxs-lookup"><span data-stu-id="02db3-2156">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="02db3-2157">Para obtener más información, consulte [acceso a archivos con Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span><span class="sxs-lookup"><span data-stu-id="02db3-2157">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="02db3-2158">Los datos leídos con `Input` se escriben normalmente en un archivo mediante el uso de `Write`.</span><span class="sxs-lookup"><span data-stu-id="02db3-2158">Data read with `Input` is usually written to a file by using `Write`.</span></span> <span data-ttu-id="02db3-2159">Utilice esta función sólo con los archivos abiertos en `Input` o `Binary` modo.</span><span class="sxs-lookup"><span data-stu-id="02db3-2159">Use this function only with files opened in `Input` or `Binary` mode.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="02db3-2160">Al leer de archivos, no realice ninguna decisión sobre el contenido del archivo basándose en la extensión de nombre de archivo.</span><span class="sxs-lookup"><span data-stu-id="02db3-2160">When reading from files, do not make decisions about the contents of the file based on the file name extension.</span></span> <span data-ttu-id="02db3-2161">Por ejemplo, un archivo denominado Form1.vb no puede ser un archivo de código fuente de Visual Basic 2005.</span><span class="sxs-lookup"><span data-stu-id="02db3-2161">For example, a file that is named Form1.vb may not be a Visual Basic 2005 source file.</span></span>  
  
 <span data-ttu-id="02db3-2162">Cuando se leen datos numéricos o cadena estándar se asignan a variables sin modificación.</span><span class="sxs-lookup"><span data-stu-id="02db3-2162">When read, standard string or numeric data is assigned to variables without modification.</span></span> <span data-ttu-id="02db3-2163">En la tabla siguiente se muestra cómo se tratan otros datos de entrada.</span><span class="sxs-lookup"><span data-stu-id="02db3-2163">The following table illustrates how other input data is treated.</span></span>  
  
|<span data-ttu-id="02db3-2164">Datos</span><span class="sxs-lookup"><span data-stu-id="02db3-2164">Data</span></span>|<span data-ttu-id="02db3-2165">Valor asignado a la variable</span><span class="sxs-lookup"><span data-stu-id="02db3-2165">Value assigned to variable</span></span>|  
|-|-|  
|<span data-ttu-id="02db3-2166">Delimitadores de coma o línea en blanco</span><span class="sxs-lookup"><span data-stu-id="02db3-2166">Delimiting comma or blank line</span></span>|<span data-ttu-id="02db3-2167">Empty</span><span class="sxs-lookup"><span data-stu-id="02db3-2167">Empty</span></span>|  
|<span data-ttu-id="02db3-2168">NULL #</span><span class="sxs-lookup"><span data-stu-id="02db3-2168">#NULL#</span></span>|`DBNull`|  
|<span data-ttu-id="02db3-2169"># TRUE o FALSE #</span><span class="sxs-lookup"><span data-stu-id="02db3-2169">#TRUE# or #FALSE#</span></span>|<span data-ttu-id="02db3-2170">`True` o `False`</span><span class="sxs-lookup"><span data-stu-id="02db3-2170">`True` or `False`</span></span>|  
|#`yyyy-mm-dd hh:mm:ss`#|<span data-ttu-id="02db3-2171">La fecha y hora representadas por la expresión</span><span class="sxs-lookup"><span data-stu-id="02db3-2171">The date and/or time represented by the expression</span></span>|  
|<span data-ttu-id="02db3-2172">#ERROR `errornumber`#</span><span class="sxs-lookup"><span data-stu-id="02db3-2172">#ERROR `errornumber`#</span></span>|<span data-ttu-id="02db3-2173">`errornumber` (la variable es un objeto etiquetado como error)</span><span class="sxs-lookup"><span data-stu-id="02db3-2173">`errornumber` (variable is an object tagged as an error)</span></span>|  
  
 <span data-ttu-id="02db3-2174">Si se alcanza el final del archivo mientras se está introduciendo un elemento de datos, la entrada se detiene y se produce un error.</span><span class="sxs-lookup"><span data-stu-id="02db3-2174">If you reach the end of the file while you are inputting a data item, the input is stopped and an error occurs.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="02db3-2175">El `Input` función no está localizada.</span><span class="sxs-lookup"><span data-stu-id="02db3-2175">The `Input` function is not localized.</span></span> <span data-ttu-id="02db3-2176">Por ejemplo, en la versión en alemán, si se escribe 3,14159, devuelve solo 3, porque se trata la coma como separador de variable en lugar de como un separador decimal.</span><span class="sxs-lookup"><span data-stu-id="02db3-2176">For example, in the German version, if you input 3,14159, it returns only 3, because the comma is treated as a variable separator instead of as a decimal point.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="02db3-2177">Leer un archivo mediante el uso de la `Input` función requiere `Read` acceso desde el `FileIOPermissionAccess` enumeración.</span><span class="sxs-lookup"><span data-stu-id="02db3-2177">Reading from a file by using the `Input` function requires `Read` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="02db3-2178">Para obtener más información, consulta <xref:System.Security.Permissions.FileIOPermissionAccess>.</span><span class="sxs-lookup"><span data-stu-id="02db3-2178">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="02db3-2179">Este ejemplo se usa el `Input` función para leer datos desde un archivo en dos variables.</span><span class="sxs-lookup"><span data-stu-id="02db3-2179">This example uses the `Input` function to read data from a file into two variables.</span></span> <span data-ttu-id="02db3-2180">En este ejemplo se da por supuesto que `TestFile` es un archivo que tiene varias líneas de los datos escritos en él con el `Write` funcione, cada línea que contiene una cadena entre comillas y un número separado por una coma, por ejemplo: ("Hello", 234).</span><span class="sxs-lookup"><span data-stu-id="02db3-2180">This example assumes that `TestFile` is a file that has several lines of data written to it using the `Write` function, each line containing a string in quotations and a number separated by a comma, for example: ("Hello", 234).</span></span>  
  
 [!code-vb[VbVbalrCatRef#35](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#35)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="02db3-2181">File mode is invalid.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-2181">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.InputString(System.Int32,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
      </Docs>
    </Member>
    <Member MemberName="Input">
      <MemberSignature Language="C#" Value="public static void Input (int FileNumber, ref double Value);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Input(int32 FileNumber, float64&amp; Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Input(System.Int32,System.Double@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Input (FileNumber As Integer, ByRef Value As Double)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Input(int FileNumber, double % Value);" />
      <MemberSignature Language="F#" Value="static member Input : int *  -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Input (FileNumber, Value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Double&amp;" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="02db3-2182">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-2182">Required.</span>
          </span>
          <span data-ttu-id="02db3-2183">Any valid file number.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-2183">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="02db3-2184">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-2184">Required.</span>
          </span>
          <span data-ttu-id="02db3-2185">Variable that is assigned the values read from the file—cannot be an array or object variable.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-2185">Variable that is assigned the values read from the file—cannot be an array or object variable.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="02db3-2186">Reads data from an open sequential file and assigns the data to variables.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-2186">Reads data from an open sequential file and assigns the data to variables.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="02db3-2187">El `Input` función se proporciona por compatibilidad con versiones anteriores y puede afectar al rendimiento.</span><span class="sxs-lookup"><span data-stu-id="02db3-2187">The `Input` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="02db3-2188">Para las aplicaciones que no es heredado, el `My.Computer.FileSystem` objeto proporciona un mejor rendimiento.</span><span class="sxs-lookup"><span data-stu-id="02db3-2188">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="02db3-2189">Para obtener más información, consulte [acceso a archivos con Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span><span class="sxs-lookup"><span data-stu-id="02db3-2189">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="02db3-2190">Los datos leídos con `Input` se escriben normalmente en un archivo mediante el uso de `Write`.</span><span class="sxs-lookup"><span data-stu-id="02db3-2190">Data read with `Input` is usually written to a file by using `Write`.</span></span> <span data-ttu-id="02db3-2191">Utilice esta función sólo con los archivos abiertos en `Input` o `Binary` modo.</span><span class="sxs-lookup"><span data-stu-id="02db3-2191">Use this function only with files opened in `Input` or `Binary` mode.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="02db3-2192">Al leer de archivos, no realice ninguna decisión sobre el contenido del archivo basándose en la extensión de nombre de archivo.</span><span class="sxs-lookup"><span data-stu-id="02db3-2192">When reading from files, do not make decisions about the contents of the file based on the file name extension.</span></span> <span data-ttu-id="02db3-2193">Por ejemplo, un archivo denominado Form1.vb no puede ser un archivo de código fuente de Visual Basic 2005.</span><span class="sxs-lookup"><span data-stu-id="02db3-2193">For example, a file that is named Form1.vb may not be a Visual Basic 2005 source file.</span></span>  
  
 <span data-ttu-id="02db3-2194">Cuando se leen datos numéricos o cadena estándar se asignan a variables sin modificación.</span><span class="sxs-lookup"><span data-stu-id="02db3-2194">When read, standard string or numeric data is assigned to variables without modification.</span></span> <span data-ttu-id="02db3-2195">En la tabla siguiente se muestra cómo se tratan otros datos de entrada.</span><span class="sxs-lookup"><span data-stu-id="02db3-2195">The following table illustrates how other input data is treated.</span></span>  
  
|<span data-ttu-id="02db3-2196">Datos</span><span class="sxs-lookup"><span data-stu-id="02db3-2196">Data</span></span>|<span data-ttu-id="02db3-2197">Valor asignado a la variable</span><span class="sxs-lookup"><span data-stu-id="02db3-2197">Value assigned to variable</span></span>|  
|-|-|  
|<span data-ttu-id="02db3-2198">Delimitadores de coma o línea en blanco</span><span class="sxs-lookup"><span data-stu-id="02db3-2198">Delimiting comma or blank line</span></span>|<span data-ttu-id="02db3-2199">Empty</span><span class="sxs-lookup"><span data-stu-id="02db3-2199">Empty</span></span>|  
|<span data-ttu-id="02db3-2200">NULL #</span><span class="sxs-lookup"><span data-stu-id="02db3-2200">#NULL#</span></span>|`DBNull`|  
|<span data-ttu-id="02db3-2201"># TRUE o FALSE #</span><span class="sxs-lookup"><span data-stu-id="02db3-2201">#TRUE# or #FALSE#</span></span>|<span data-ttu-id="02db3-2202">`True` o `False`</span><span class="sxs-lookup"><span data-stu-id="02db3-2202">`True` or `False`</span></span>|  
|#`yyyy-mm-dd hh:mm:ss`#|<span data-ttu-id="02db3-2203">La fecha y hora representadas por la expresión</span><span class="sxs-lookup"><span data-stu-id="02db3-2203">The date and/or time represented by the expression</span></span>|  
|<span data-ttu-id="02db3-2204">#ERROR `errornumber`#</span><span class="sxs-lookup"><span data-stu-id="02db3-2204">#ERROR `errornumber`#</span></span>|<span data-ttu-id="02db3-2205">`errornumber` (la variable es un objeto etiquetado como error)</span><span class="sxs-lookup"><span data-stu-id="02db3-2205">`errornumber` (variable is an object tagged as an error)</span></span>|  
  
 <span data-ttu-id="02db3-2206">Si se alcanza el final del archivo mientras se está introduciendo un elemento de datos, la entrada se detiene y se produce un error.</span><span class="sxs-lookup"><span data-stu-id="02db3-2206">If you reach the end of the file while you are inputting a data item, the input is stopped and an error occurs.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="02db3-2207">El `Input` función no está localizada.</span><span class="sxs-lookup"><span data-stu-id="02db3-2207">The `Input` function is not localized.</span></span> <span data-ttu-id="02db3-2208">Por ejemplo, en la versión en alemán, si se escribe 3,14159, devuelve solo 3, porque se trata la coma como separador de variable en lugar de como un separador decimal.</span><span class="sxs-lookup"><span data-stu-id="02db3-2208">For example, in the German version, if you input 3,14159, it returns only 3, because the comma is treated as a variable separator instead of as a decimal point.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="02db3-2209">Leer un archivo mediante el uso de la `Input` función requiere `Read` acceso desde el `FileIOPermissionAccess` enumeración.</span><span class="sxs-lookup"><span data-stu-id="02db3-2209">Reading from a file by using the `Input` function requires `Read` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="02db3-2210">Para obtener más información, consulta <xref:System.Security.Permissions.FileIOPermissionAccess>.</span><span class="sxs-lookup"><span data-stu-id="02db3-2210">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="02db3-2211">Este ejemplo se usa el `Input` función para leer datos desde un archivo en dos variables.</span><span class="sxs-lookup"><span data-stu-id="02db3-2211">This example uses the `Input` function to read data from a file into two variables.</span></span> <span data-ttu-id="02db3-2212">En este ejemplo se da por supuesto que `TestFile` es un archivo que tiene varias líneas de los datos escritos en él con el `Write` funcione, cada línea que contiene una cadena entre comillas y un número separado por una coma, por ejemplo: ("Hello", 234).</span><span class="sxs-lookup"><span data-stu-id="02db3-2212">This example assumes that `TestFile` is a file that has several lines of data written to it using the `Write` function, each line containing a string in quotations and a number separated by a comma, for example: ("Hello", 234).</span></span>  
  
 [!code-vb[VbVbalrCatRef#35](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#35)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="02db3-2213">File mode is invalid.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-2213">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.InputString(System.Int32,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
      </Docs>
    </Member>
    <Member MemberName="Input">
      <MemberSignature Language="C#" Value="public static void Input (int FileNumber, ref short Value);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Input(int32 FileNumber, int16&amp; Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Input(System.Int32,System.Int16@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Input (FileNumber As Integer, ByRef Value As Short)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Input(int FileNumber, short % Value);" />
      <MemberSignature Language="F#" Value="static member Input : int *  -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Input (FileNumber, Value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Int16&amp;" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="02db3-2214">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-2214">Required.</span>
          </span>
          <span data-ttu-id="02db3-2215">Any valid file number.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-2215">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="02db3-2216">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-2216">Required.</span>
          </span>
          <span data-ttu-id="02db3-2217">Variable that is assigned the values read from the file—cannot be an array or object variable.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-2217">Variable that is assigned the values read from the file—cannot be an array or object variable.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="02db3-2218">Reads data from an open sequential file and assigns the data to variables.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-2218">Reads data from an open sequential file and assigns the data to variables.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="02db3-2219">El `Input` función se proporciona por compatibilidad con versiones anteriores y puede afectar al rendimiento.</span><span class="sxs-lookup"><span data-stu-id="02db3-2219">The `Input` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="02db3-2220">Para las aplicaciones que no es heredado, el `My.Computer.FileSystem` objeto proporciona un mejor rendimiento.</span><span class="sxs-lookup"><span data-stu-id="02db3-2220">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="02db3-2221">Para obtener más información, consulte [acceso a archivos con Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span><span class="sxs-lookup"><span data-stu-id="02db3-2221">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="02db3-2222">Los datos leídos con `Input` se escriben normalmente en un archivo mediante el uso de `Write`.</span><span class="sxs-lookup"><span data-stu-id="02db3-2222">Data read with `Input` is usually written to a file by using `Write`.</span></span> <span data-ttu-id="02db3-2223">Utilice esta función sólo con los archivos abiertos en `Input` o `Binary` modo.</span><span class="sxs-lookup"><span data-stu-id="02db3-2223">Use this function only with files opened in `Input` or `Binary` mode.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="02db3-2224">Al leer de archivos, no realice ninguna decisión sobre el contenido del archivo basándose en la extensión de nombre de archivo.</span><span class="sxs-lookup"><span data-stu-id="02db3-2224">When reading from files, do not make decisions about the contents of the file based on the file name extension.</span></span> <span data-ttu-id="02db3-2225">Por ejemplo, un archivo denominado Form1.vb no puede ser un archivo de código fuente de Visual Basic 2005.</span><span class="sxs-lookup"><span data-stu-id="02db3-2225">For example, a file that is named Form1.vb may not be a Visual Basic 2005 source file.</span></span>  
  
 <span data-ttu-id="02db3-2226">Cuando se leen datos numéricos o cadena estándar se asignan a variables sin modificación.</span><span class="sxs-lookup"><span data-stu-id="02db3-2226">When read, standard string or numeric data is assigned to variables without modification.</span></span> <span data-ttu-id="02db3-2227">En la tabla siguiente se muestra cómo se tratan otros datos de entrada.</span><span class="sxs-lookup"><span data-stu-id="02db3-2227">The following table illustrates how other input data is treated.</span></span>  
  
|<span data-ttu-id="02db3-2228">Datos</span><span class="sxs-lookup"><span data-stu-id="02db3-2228">Data</span></span>|<span data-ttu-id="02db3-2229">Valor asignado a la variable</span><span class="sxs-lookup"><span data-stu-id="02db3-2229">Value assigned to variable</span></span>|  
|-|-|  
|<span data-ttu-id="02db3-2230">Delimitadores de coma o línea en blanco</span><span class="sxs-lookup"><span data-stu-id="02db3-2230">Delimiting comma or blank line</span></span>|<span data-ttu-id="02db3-2231">Empty</span><span class="sxs-lookup"><span data-stu-id="02db3-2231">Empty</span></span>|  
|<span data-ttu-id="02db3-2232">NULL #</span><span class="sxs-lookup"><span data-stu-id="02db3-2232">#NULL#</span></span>|`DBNull`|  
|<span data-ttu-id="02db3-2233"># TRUE o FALSE #</span><span class="sxs-lookup"><span data-stu-id="02db3-2233">#TRUE# or #FALSE#</span></span>|<span data-ttu-id="02db3-2234">`True` o `False`</span><span class="sxs-lookup"><span data-stu-id="02db3-2234">`True` or `False`</span></span>|  
|#`yyyy-mm-dd hh:mm:ss`#|<span data-ttu-id="02db3-2235">La fecha y hora representadas por la expresión</span><span class="sxs-lookup"><span data-stu-id="02db3-2235">The date and/or time represented by the expression</span></span>|  
|<span data-ttu-id="02db3-2236">#ERROR `errornumber`#</span><span class="sxs-lookup"><span data-stu-id="02db3-2236">#ERROR `errornumber`#</span></span>|<span data-ttu-id="02db3-2237">`errornumber` (la variable es un objeto etiquetado como error)</span><span class="sxs-lookup"><span data-stu-id="02db3-2237">`errornumber` (variable is an object tagged as an error)</span></span>|  
  
 <span data-ttu-id="02db3-2238">Si se alcanza el final del archivo mientras se está introduciendo un elemento de datos, la entrada se detiene y se produce un error.</span><span class="sxs-lookup"><span data-stu-id="02db3-2238">If you reach the end of the file while you are inputting a data item, the input is stopped and an error occurs.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="02db3-2239">El `Input` función no está localizada.</span><span class="sxs-lookup"><span data-stu-id="02db3-2239">The `Input` function is not localized.</span></span> <span data-ttu-id="02db3-2240">Por ejemplo, en la versión en alemán, si se escribe 3,14159, devuelve solo 3, porque se trata la coma como separador de variable en lugar de como un separador decimal.</span><span class="sxs-lookup"><span data-stu-id="02db3-2240">For example, in the German version, if you input 3,14159, it returns only 3, because the comma is treated as a variable separator instead of as a decimal point.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="02db3-2241">Leer un archivo mediante el uso de la `Input` función requiere `Read` acceso desde el `FileIOPermissionAccess` enumeración.</span><span class="sxs-lookup"><span data-stu-id="02db3-2241">Reading from a file by using the `Input` function requires `Read` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="02db3-2242">Para obtener más información, consulta <xref:System.Security.Permissions.FileIOPermissionAccess>.</span><span class="sxs-lookup"><span data-stu-id="02db3-2242">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="02db3-2243">Este ejemplo se usa el `Input` función para leer datos desde un archivo en dos variables.</span><span class="sxs-lookup"><span data-stu-id="02db3-2243">This example uses the `Input` function to read data from a file into two variables.</span></span> <span data-ttu-id="02db3-2244">En este ejemplo se da por supuesto que `TestFile` es un archivo que tiene varias líneas de los datos escritos en él con el `Write` funcione, cada línea que contiene una cadena entre comillas y un número separado por una coma, por ejemplo: ("Hello", 234).</span><span class="sxs-lookup"><span data-stu-id="02db3-2244">This example assumes that `TestFile` is a file that has several lines of data written to it using the `Write` function, each line containing a string in quotations and a number separated by a comma, for example: ("Hello", 234).</span></span>  
  
 [!code-vb[VbVbalrCatRef#35](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#35)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="02db3-2245">File mode is invalid.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-2245">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.InputString(System.Int32,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
      </Docs>
    </Member>
    <Member MemberName="Input">
      <MemberSignature Language="C#" Value="public static void Input (int FileNumber, ref int Value);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Input(int32 FileNumber, int32&amp; Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Input(System.Int32,System.Int32@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Input (FileNumber As Integer, ByRef Value As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Input(int FileNumber, int % Value);" />
      <MemberSignature Language="F#" Value="static member Input : int *  -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Input (FileNumber, Value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Int32&amp;" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="02db3-2246">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-2246">Required.</span>
          </span>
          <span data-ttu-id="02db3-2247">Any valid file number.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-2247">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="02db3-2248">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-2248">Required.</span>
          </span>
          <span data-ttu-id="02db3-2249">Variable that is assigned the values read from the file—cannot be an array or object variable.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-2249">Variable that is assigned the values read from the file—cannot be an array or object variable.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="02db3-2250">Reads data from an open sequential file and assigns the data to variables.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-2250">Reads data from an open sequential file and assigns the data to variables.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="02db3-2251">El `Input` función se proporciona por compatibilidad con versiones anteriores y puede afectar al rendimiento.</span><span class="sxs-lookup"><span data-stu-id="02db3-2251">The `Input` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="02db3-2252">Para las aplicaciones que no es heredado, el `My.Computer.FileSystem` objeto proporciona un mejor rendimiento.</span><span class="sxs-lookup"><span data-stu-id="02db3-2252">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="02db3-2253">Para obtener más información, consulte [acceso a archivos con Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span><span class="sxs-lookup"><span data-stu-id="02db3-2253">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="02db3-2254">Los datos leídos con `Input` se escriben normalmente en un archivo mediante el uso de `Write`.</span><span class="sxs-lookup"><span data-stu-id="02db3-2254">Data read with `Input` is usually written to a file by using `Write`.</span></span> <span data-ttu-id="02db3-2255">Utilice esta función sólo con los archivos abiertos en `Input` o `Binary` modo.</span><span class="sxs-lookup"><span data-stu-id="02db3-2255">Use this function only with files opened in `Input` or `Binary` mode.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="02db3-2256">Al leer de archivos, no realice ninguna decisión sobre el contenido del archivo basándose en la extensión de nombre de archivo.</span><span class="sxs-lookup"><span data-stu-id="02db3-2256">When reading from files, do not make decisions about the contents of the file based on the file name extension.</span></span> <span data-ttu-id="02db3-2257">Por ejemplo, un archivo denominado Form1.vb no puede ser un archivo de código fuente de Visual Basic 2005.</span><span class="sxs-lookup"><span data-stu-id="02db3-2257">For example, a file that is named Form1.vb may not be a Visual Basic 2005 source file.</span></span>  
  
 <span data-ttu-id="02db3-2258">Cuando se leen datos numéricos o cadena estándar se asignan a variables sin modificación.</span><span class="sxs-lookup"><span data-stu-id="02db3-2258">When read, standard string or numeric data is assigned to variables without modification.</span></span> <span data-ttu-id="02db3-2259">En la tabla siguiente se muestra cómo se tratan otros datos de entrada.</span><span class="sxs-lookup"><span data-stu-id="02db3-2259">The following table illustrates how other input data is treated.</span></span>  
  
|<span data-ttu-id="02db3-2260">Datos</span><span class="sxs-lookup"><span data-stu-id="02db3-2260">Data</span></span>|<span data-ttu-id="02db3-2261">Valor asignado a la variable</span><span class="sxs-lookup"><span data-stu-id="02db3-2261">Value assigned to variable</span></span>|  
|-|-|  
|<span data-ttu-id="02db3-2262">Delimitadores de coma o línea en blanco</span><span class="sxs-lookup"><span data-stu-id="02db3-2262">Delimiting comma or blank line</span></span>|<span data-ttu-id="02db3-2263">Empty</span><span class="sxs-lookup"><span data-stu-id="02db3-2263">Empty</span></span>|  
|<span data-ttu-id="02db3-2264">NULL #</span><span class="sxs-lookup"><span data-stu-id="02db3-2264">#NULL#</span></span>|`DBNull`|  
|<span data-ttu-id="02db3-2265"># TRUE o FALSE #</span><span class="sxs-lookup"><span data-stu-id="02db3-2265">#TRUE# or #FALSE#</span></span>|<span data-ttu-id="02db3-2266">`True` o `False`</span><span class="sxs-lookup"><span data-stu-id="02db3-2266">`True` or `False`</span></span>|  
|#`yyyy-mm-dd hh:mm:ss`#|<span data-ttu-id="02db3-2267">La fecha y hora representadas por la expresión</span><span class="sxs-lookup"><span data-stu-id="02db3-2267">The date and/or time represented by the expression</span></span>|  
|<span data-ttu-id="02db3-2268">#ERROR `errornumber`#</span><span class="sxs-lookup"><span data-stu-id="02db3-2268">#ERROR `errornumber`#</span></span>|<span data-ttu-id="02db3-2269">`errornumber` (la variable es un objeto etiquetado como error)</span><span class="sxs-lookup"><span data-stu-id="02db3-2269">`errornumber` (variable is an object tagged as an error)</span></span>|  
  
 <span data-ttu-id="02db3-2270">Si se alcanza el final del archivo mientras se está introduciendo un elemento de datos, la entrada se detiene y se produce un error.</span><span class="sxs-lookup"><span data-stu-id="02db3-2270">If you reach the end of the file while you are inputting a data item, the input is stopped and an error occurs.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="02db3-2271">El `Input` función no está localizada.</span><span class="sxs-lookup"><span data-stu-id="02db3-2271">The `Input` function is not localized.</span></span> <span data-ttu-id="02db3-2272">Por ejemplo, en la versión en alemán, si se escribe 3,14159, devuelve solo 3, dado que se trata la coma como separador de variable en lugar de como un separador decimal.</span><span class="sxs-lookup"><span data-stu-id="02db3-2272">For example, in the German version, if you input 3,14159, it returns only 3, since the comma is treated as a variable separator instead of as a decimal point.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="02db3-2273">Leer un archivo mediante el uso de la `Input` función requiere `Read` acceso desde el `FileIOPermissionAccess` enumeración.</span><span class="sxs-lookup"><span data-stu-id="02db3-2273">Reading from a file by using the `Input` function requires `Read` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="02db3-2274">Para obtener más información, consulta <xref:System.Security.Permissions.FileIOPermissionAccess>.</span><span class="sxs-lookup"><span data-stu-id="02db3-2274">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="02db3-2275">Este ejemplo se usa el `Input` función para leer datos desde un archivo en dos variables.</span><span class="sxs-lookup"><span data-stu-id="02db3-2275">This example uses the `Input` function to read data from a file into two variables.</span></span> <span data-ttu-id="02db3-2276">En este ejemplo se da por supuesto que `TestFile` es un archivo que tiene varias líneas de los datos escritos en él con el `Write` funcione, cada línea que contiene una cadena entre comillas y un número separado por una coma, por ejemplo: ("Hello", 234).</span><span class="sxs-lookup"><span data-stu-id="02db3-2276">This example assumes that `TestFile` is a file that has several lines of data written to it using the `Write` function, each line containing a string in quotations and a number separated by a comma, for example: ("Hello", 234).</span></span>  
  
 [!code-vb[VbVbalrCatRef#35](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#35)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="02db3-2277">File mode is invalid.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-2277">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.InputString(System.Int32,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
      </Docs>
    </Member>
    <Member MemberName="Input">
      <MemberSignature Language="C#" Value="public static void Input (int FileNumber, ref long Value);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Input(int32 FileNumber, int64&amp; Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Input(System.Int32,System.Int64@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Input (FileNumber As Integer, ByRef Value As Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Input(int FileNumber, long % Value);" />
      <MemberSignature Language="F#" Value="static member Input : int *  -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Input (FileNumber, Value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Int64&amp;" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="02db3-2278">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-2278">Required.</span>
          </span>
          <span data-ttu-id="02db3-2279">Any valid file number.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-2279">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="02db3-2280">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-2280">Required.</span>
          </span>
          <span data-ttu-id="02db3-2281">Variable that is assigned the values read from the file—cannot be an array or object variable.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-2281">Variable that is assigned the values read from the file—cannot be an array or object variable.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="02db3-2282">Reads data from an open sequential file and assigns the data to variables.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-2282">Reads data from an open sequential file and assigns the data to variables.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="02db3-2283">El `Input` función se proporciona por compatibilidad con versiones anteriores y puede afectar al rendimiento.</span><span class="sxs-lookup"><span data-stu-id="02db3-2283">The `Input` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="02db3-2284">Para las aplicaciones que no es heredado, el `My.Computer.FileSystem` objeto proporciona un mejor rendimiento.</span><span class="sxs-lookup"><span data-stu-id="02db3-2284">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="02db3-2285">Para obtener más información, consulte [acceso a archivos con Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span><span class="sxs-lookup"><span data-stu-id="02db3-2285">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="02db3-2286">Los datos leídos con `Input` se escriben normalmente en un archivo mediante el uso de `Write`.</span><span class="sxs-lookup"><span data-stu-id="02db3-2286">Data read with `Input` is usually written to a file by using `Write`.</span></span> <span data-ttu-id="02db3-2287">Utilice esta función sólo con los archivos abiertos en `Input` o `Binary` modo.</span><span class="sxs-lookup"><span data-stu-id="02db3-2287">Use this function only with files opened in `Input` or `Binary` mode.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="02db3-2288">Al leer de archivos, no realice ninguna decisión sobre el contenido del archivo basándose en la extensión de nombre de archivo.</span><span class="sxs-lookup"><span data-stu-id="02db3-2288">When reading from files, do not make decisions about the contents of the file based on the file name extension.</span></span> <span data-ttu-id="02db3-2289">Por ejemplo, un archivo denominado Form1.vb no puede ser un archivo de código fuente de Visual Basic 2005.</span><span class="sxs-lookup"><span data-stu-id="02db3-2289">For example, a file that is named Form1.vb may not be a Visual Basic 2005 source file.</span></span>  
  
 <span data-ttu-id="02db3-2290">Cuando se leen datos numéricos o cadena estándar se asignan a variables sin modificación.</span><span class="sxs-lookup"><span data-stu-id="02db3-2290">When read, standard string or numeric data is assigned to variables without modification.</span></span> <span data-ttu-id="02db3-2291">En la tabla siguiente se muestra cómo se tratan otros datos de entrada.</span><span class="sxs-lookup"><span data-stu-id="02db3-2291">The following table illustrates how other input data is treated.</span></span>  
  
|<span data-ttu-id="02db3-2292">Datos</span><span class="sxs-lookup"><span data-stu-id="02db3-2292">Data</span></span>|<span data-ttu-id="02db3-2293">Valor asignado a la variable</span><span class="sxs-lookup"><span data-stu-id="02db3-2293">Value assigned to variable</span></span>|  
|-|-|  
|<span data-ttu-id="02db3-2294">Delimitadores de coma o línea en blanco</span><span class="sxs-lookup"><span data-stu-id="02db3-2294">Delimiting comma or blank line</span></span>|<span data-ttu-id="02db3-2295">Empty</span><span class="sxs-lookup"><span data-stu-id="02db3-2295">Empty</span></span>|  
|<span data-ttu-id="02db3-2296">NULL #</span><span class="sxs-lookup"><span data-stu-id="02db3-2296">#NULL#</span></span>|`DBNull`|  
|<span data-ttu-id="02db3-2297"># TRUE o FALSE #</span><span class="sxs-lookup"><span data-stu-id="02db3-2297">#TRUE# or #FALSE#</span></span>|<span data-ttu-id="02db3-2298">`True` o `False`</span><span class="sxs-lookup"><span data-stu-id="02db3-2298">`True` or `False`</span></span>|  
|#`yyyy-mm-dd hh:mm:ss`#|<span data-ttu-id="02db3-2299">La fecha y hora representadas por la expresión</span><span class="sxs-lookup"><span data-stu-id="02db3-2299">The date and/or time represented by the expression</span></span>|  
|<span data-ttu-id="02db3-2300">#ERROR `errornumber`#</span><span class="sxs-lookup"><span data-stu-id="02db3-2300">#ERROR `errornumber`#</span></span>|<span data-ttu-id="02db3-2301">`errornumber` (la variable es un objeto etiquetado como error)</span><span class="sxs-lookup"><span data-stu-id="02db3-2301">`errornumber` (variable is an object tagged as an error)</span></span>|  
  
 <span data-ttu-id="02db3-2302">Si se alcanza el final del archivo mientras se está introduciendo un elemento de datos, la entrada se detiene y se produce un error.</span><span class="sxs-lookup"><span data-stu-id="02db3-2302">If you reach the end of the file while you are inputting a data item, the input is stopped and an error occurs.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="02db3-2303">El `Input` función no está localizada.</span><span class="sxs-lookup"><span data-stu-id="02db3-2303">The `Input` function is not localized.</span></span> <span data-ttu-id="02db3-2304">Por ejemplo, en la versión en alemán, si se escribe 3,14159, devuelve solo 3, porque se trata la coma como separador de variable en lugar de como un separador decimal.</span><span class="sxs-lookup"><span data-stu-id="02db3-2304">For example, in the German version, if you input 3,14159, it returns only 3, because the comma is treated as a variable separator instead of as a decimal point.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="02db3-2305">Leer un archivo mediante el uso de la `Input` función requiere `Read` acceso desde el `FileIOPermissionAccess` enumeración.</span><span class="sxs-lookup"><span data-stu-id="02db3-2305">Reading from a file by using the `Input` function requires `Read` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="02db3-2306">Para obtener más información, consulta <xref:System.Security.Permissions.FileIOPermissionAccess>.</span><span class="sxs-lookup"><span data-stu-id="02db3-2306">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="02db3-2307">Este ejemplo se usa el `Input` función para leer datos desde un archivo en dos variables.</span><span class="sxs-lookup"><span data-stu-id="02db3-2307">This example uses the `Input` function to read data from a file into two variables.</span></span> <span data-ttu-id="02db3-2308">En este ejemplo se da por supuesto que `TestFile` es un archivo que tiene varias líneas de los datos escritos en él con el `Write` funcione, cada línea que contiene una cadena entre comillas y un número separado por una coma, por ejemplo: ("Hello", 234).</span><span class="sxs-lookup"><span data-stu-id="02db3-2308">This example assumes that `TestFile` is a file that has several lines of data written to it using the `Write` function, each line containing a string in quotations and a number separated by a comma, for example: ("Hello", 234).</span></span>  
  
 [!code-vb[VbVbalrCatRef#35](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#35)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="02db3-2309">File mode is invalid.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-2309">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.InputString(System.Int32,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
      </Docs>
    </Member>
    <Member MemberName="Input">
      <MemberSignature Language="C#" Value="public static void Input (int FileNumber, ref object Value);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Input(int32 FileNumber, object&amp; Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Input(System.Int32,System.Object@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Input (FileNumber As Integer, ByRef Value As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Input(int FileNumber, System::Object ^ % Value);" />
      <MemberSignature Language="F#" Value="static member Input : int *  -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Input (FileNumber, Value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Object&amp;" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="02db3-2310">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-2310">Required.</span>
          </span>
          <span data-ttu-id="02db3-2311">Any valid file number.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-2311">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="02db3-2312">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-2312">Required.</span>
          </span>
          <span data-ttu-id="02db3-2313">Variable that is assigned the values read from the file—cannot be an array or object variable.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-2313">Variable that is assigned the values read from the file—cannot be an array or object variable.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="02db3-2314">Reads data from an open sequential file and assigns the data to variables.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-2314">Reads data from an open sequential file and assigns the data to variables.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="02db3-2315">El `Input` función se proporciona por compatibilidad con versiones anteriores y puede afectar al rendimiento.</span><span class="sxs-lookup"><span data-stu-id="02db3-2315">The `Input` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="02db3-2316">Para las aplicaciones que no es heredado, el `My.Computer.FileSystem` objeto proporciona un mejor rendimiento.</span><span class="sxs-lookup"><span data-stu-id="02db3-2316">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="02db3-2317">Para obtener más información, consulte [acceso a archivos con Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span><span class="sxs-lookup"><span data-stu-id="02db3-2317">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="02db3-2318">Los datos leídos con `Input` se escriben normalmente en un archivo mediante el uso de `Write`.</span><span class="sxs-lookup"><span data-stu-id="02db3-2318">Data read with `Input` is usually written to a file by using `Write`.</span></span> <span data-ttu-id="02db3-2319">Utilice esta función sólo con los archivos abiertos en `Input` o `Binary` modo.</span><span class="sxs-lookup"><span data-stu-id="02db3-2319">Use this function only with files opened in `Input` or `Binary` mode.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="02db3-2320">Al leer de archivos, no realice ninguna decisión sobre el contenido del archivo basándose en la extensión de nombre de archivo.</span><span class="sxs-lookup"><span data-stu-id="02db3-2320">When reading from files, do not make decisions about the contents of the file based on the file name extension.</span></span> <span data-ttu-id="02db3-2321">Por ejemplo, un archivo denominado Form1.vb no puede ser un archivo de código fuente de Visual Basic 2005.</span><span class="sxs-lookup"><span data-stu-id="02db3-2321">For example, a file that is named Form1.vb may not be a Visual Basic 2005 source file.</span></span>  
  
 <span data-ttu-id="02db3-2322">Cuando se leen datos numéricos o cadena estándar se asignan a variables sin modificación.</span><span class="sxs-lookup"><span data-stu-id="02db3-2322">When read, standard string or numeric data is assigned to variables without modification.</span></span> <span data-ttu-id="02db3-2323">En la tabla siguiente se muestra cómo se tratan otros datos de entrada.</span><span class="sxs-lookup"><span data-stu-id="02db3-2323">The following table illustrates how other input data is treated.</span></span>  
  
|<span data-ttu-id="02db3-2324">Datos</span><span class="sxs-lookup"><span data-stu-id="02db3-2324">Data</span></span>|<span data-ttu-id="02db3-2325">Valor asignado a la variable</span><span class="sxs-lookup"><span data-stu-id="02db3-2325">Value assigned to variable</span></span>|  
|-|-|  
|<span data-ttu-id="02db3-2326">Delimitadores de coma o línea en blanco</span><span class="sxs-lookup"><span data-stu-id="02db3-2326">Delimiting comma or blank line</span></span>|<span data-ttu-id="02db3-2327">Empty</span><span class="sxs-lookup"><span data-stu-id="02db3-2327">Empty</span></span>|  
|<span data-ttu-id="02db3-2328">NULL #</span><span class="sxs-lookup"><span data-stu-id="02db3-2328">#NULL#</span></span>|`DBNull`|  
|<span data-ttu-id="02db3-2329"># TRUE o FALSE #</span><span class="sxs-lookup"><span data-stu-id="02db3-2329">#TRUE# or #FALSE#</span></span>|<span data-ttu-id="02db3-2330">`True` o `False`</span><span class="sxs-lookup"><span data-stu-id="02db3-2330">`True` or `False`</span></span>|  
|#`yyyy-mm-dd hh:mm:ss`#|<span data-ttu-id="02db3-2331">La fecha y hora representadas por la expresión</span><span class="sxs-lookup"><span data-stu-id="02db3-2331">The date and/or time represented by the expression</span></span>|  
|<span data-ttu-id="02db3-2332">#ERROR `errornumber`#</span><span class="sxs-lookup"><span data-stu-id="02db3-2332">#ERROR `errornumber`#</span></span>|<span data-ttu-id="02db3-2333">`errornumber` (la variable es un objeto etiquetado como error)</span><span class="sxs-lookup"><span data-stu-id="02db3-2333">`errornumber` (variable is an object tagged as an error)</span></span>|  
  
 <span data-ttu-id="02db3-2334">Si se alcanza el final del archivo mientras se está introduciendo un elemento de datos, la entrada se detiene y se produce un error.</span><span class="sxs-lookup"><span data-stu-id="02db3-2334">If you reach the end of the file while you are inputting a data item, the input is stopped and an error occurs.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="02db3-2335">El `Input` función no está localizada.</span><span class="sxs-lookup"><span data-stu-id="02db3-2335">The `Input` function is not localized.</span></span> <span data-ttu-id="02db3-2336">Por ejemplo, en la versión en alemán, si se escribe 3,14159, devuelve solo 3, porque se trata la coma como separador de variable en lugar de como un separador decimal.</span><span class="sxs-lookup"><span data-stu-id="02db3-2336">For example, in the German version, if you input 3,14159, it returns only 3, because the comma is treated as a variable separator instead of as a decimal point.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="02db3-2337">Leer un archivo mediante el uso de la `Input` función requiere `Read` acceso desde el `FileIOPermissionAccess` enumeración.</span><span class="sxs-lookup"><span data-stu-id="02db3-2337">Reading from a file by using the `Input` function requires `Read` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="02db3-2338">Para obtener más información, consulta <xref:System.Security.Permissions.FileIOPermissionAccess>.</span><span class="sxs-lookup"><span data-stu-id="02db3-2338">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="02db3-2339">Este ejemplo se usa el `Input` función para leer datos desde un archivo en dos variables.</span><span class="sxs-lookup"><span data-stu-id="02db3-2339">This example uses the `Input` function to read data from a file into two variables.</span></span> <span data-ttu-id="02db3-2340">En este ejemplo se da por supuesto que `TestFile` es un archivo que tiene varias líneas de los datos escritos en él con el `Write` funcione, cada línea que contiene una cadena entre comillas y un número separado por una coma, por ejemplo: ("Hello", 234).</span><span class="sxs-lookup"><span data-stu-id="02db3-2340">This example assumes that `TestFile` is a file that has several lines of data written to it using the `Write` function, each line containing a string in quotations and a number separated by a comma, for example: ("Hello", 234).</span></span>  
  
 [!code-vb[VbVbalrCatRef#35](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#35)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="02db3-2341">File mode is invalid.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-2341">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.InputString(System.Int32,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
      </Docs>
    </Member>
    <Member MemberName="Input">
      <MemberSignature Language="C#" Value="public static void Input (int FileNumber, ref float Value);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Input(int32 FileNumber, float32&amp; Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Input(System.Int32,System.Single@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Input (FileNumber As Integer, ByRef Value As Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Input(int FileNumber, float % Value);" />
      <MemberSignature Language="F#" Value="static member Input : int *  -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Input (FileNumber, Value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Single&amp;" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="02db3-2342">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-2342">Required.</span>
          </span>
          <span data-ttu-id="02db3-2343">Any valid file number.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-2343">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="02db3-2344">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-2344">Required.</span>
          </span>
          <span data-ttu-id="02db3-2345">Variable that is assigned the values read from the file—cannot be an array or object variable.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-2345">Variable that is assigned the values read from the file—cannot be an array or object variable.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="02db3-2346">Reads data from an open sequential file and assigns the data to variables.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-2346">Reads data from an open sequential file and assigns the data to variables.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="02db3-2347">El `Input` función se proporciona por compatibilidad con versiones anteriores y puede afectar al rendimiento.</span><span class="sxs-lookup"><span data-stu-id="02db3-2347">The `Input` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="02db3-2348">Para las aplicaciones que no es heredado, el `My.Computer.FileSystem` objeto proporciona un mejor rendimiento.</span><span class="sxs-lookup"><span data-stu-id="02db3-2348">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="02db3-2349">Para obtener más información, consulte [acceso a archivos con Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span><span class="sxs-lookup"><span data-stu-id="02db3-2349">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="02db3-2350">Los datos leídos con `Input` se escriben normalmente en un archivo mediante el uso de `Write`.</span><span class="sxs-lookup"><span data-stu-id="02db3-2350">Data read with `Input` is usually written to a file by using `Write`.</span></span> <span data-ttu-id="02db3-2351">Utilice esta función sólo con los archivos abiertos en `Input` o `Binary` modo.</span><span class="sxs-lookup"><span data-stu-id="02db3-2351">Use this function only with files opened in `Input` or `Binary` mode.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="02db3-2352">Al leer de archivos, no realice ninguna decisión sobre el contenido del archivo basándose en la extensión de nombre de archivo.</span><span class="sxs-lookup"><span data-stu-id="02db3-2352">When reading from files, do not make decisions about the contents of the file based on the file name extension.</span></span> <span data-ttu-id="02db3-2353">Por ejemplo, un archivo denominado Form1.vb no puede ser un archivo de código fuente de Visual Basic 2005.</span><span class="sxs-lookup"><span data-stu-id="02db3-2353">For example, a file that is named Form1.vb may not be a Visual Basic 2005 source file.</span></span>  
  
 <span data-ttu-id="02db3-2354">Cuando se leen datos numéricos o cadena estándar se asignan a variables sin modificación.</span><span class="sxs-lookup"><span data-stu-id="02db3-2354">When read, standard string or numeric data is assigned to variables without modification.</span></span> <span data-ttu-id="02db3-2355">En la tabla siguiente se muestra cómo se tratan otros datos de entrada.</span><span class="sxs-lookup"><span data-stu-id="02db3-2355">The following table illustrates how other input data is treated.</span></span>  
  
|<span data-ttu-id="02db3-2356">Datos</span><span class="sxs-lookup"><span data-stu-id="02db3-2356">Data</span></span>|<span data-ttu-id="02db3-2357">Valor asignado a la variable</span><span class="sxs-lookup"><span data-stu-id="02db3-2357">Value assigned to variable</span></span>|  
|-|-|  
|<span data-ttu-id="02db3-2358">Delimitadores de coma o línea en blanco</span><span class="sxs-lookup"><span data-stu-id="02db3-2358">Delimiting comma or blank line</span></span>|<span data-ttu-id="02db3-2359">Empty</span><span class="sxs-lookup"><span data-stu-id="02db3-2359">Empty</span></span>|  
|<span data-ttu-id="02db3-2360">NULL #</span><span class="sxs-lookup"><span data-stu-id="02db3-2360">#NULL#</span></span>|`DBNull`|  
|<span data-ttu-id="02db3-2361"># TRUE o FALSE #</span><span class="sxs-lookup"><span data-stu-id="02db3-2361">#TRUE# or #FALSE#</span></span>|<span data-ttu-id="02db3-2362">`True` o `False`</span><span class="sxs-lookup"><span data-stu-id="02db3-2362">`True` or `False`</span></span>|  
|#`yyyy-mm-dd hh:mm:ss`#|<span data-ttu-id="02db3-2363">La fecha y hora representadas por la expresión</span><span class="sxs-lookup"><span data-stu-id="02db3-2363">The date and/or time represented by the expression</span></span>|  
|<span data-ttu-id="02db3-2364">#ERROR `errornumber`#</span><span class="sxs-lookup"><span data-stu-id="02db3-2364">#ERROR `errornumber`#</span></span>|<span data-ttu-id="02db3-2365">`errornumber` (la variable es un objeto etiquetado como error)</span><span class="sxs-lookup"><span data-stu-id="02db3-2365">`errornumber` (variable is an object tagged as an error)</span></span>|  
  
 <span data-ttu-id="02db3-2366">Si se alcanza el final del archivo mientras se está introduciendo un elemento de datos, la entrada se detiene y se produce un error.</span><span class="sxs-lookup"><span data-stu-id="02db3-2366">If you reach the end of the file while you are inputting a data item, the input is stopped and an error occurs.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="02db3-2367">El `Input` función no está localizada.</span><span class="sxs-lookup"><span data-stu-id="02db3-2367">The `Input` function is not localized.</span></span> <span data-ttu-id="02db3-2368">Por ejemplo, en la versión en alemán, si se escribe 3,14159, devuelve solo 3, porque se trata la coma como separador de variable en lugar de como un separador decimal.</span><span class="sxs-lookup"><span data-stu-id="02db3-2368">For example, in the German version, if you input 3,14159, it returns only 3, because the comma is treated as a variable separator instead of as a decimal point.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="02db3-2369">Leer un archivo mediante el uso de la `Input` función requiere `Read` acceso desde el `FileIOPermissionAccess` enumeración.</span><span class="sxs-lookup"><span data-stu-id="02db3-2369">Reading from a file by using the `Input` function requires `Read` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="02db3-2370">Para obtener más información, consulta <xref:System.Security.Permissions.FileIOPermissionAccess>.</span><span class="sxs-lookup"><span data-stu-id="02db3-2370">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="02db3-2371">Este ejemplo se usa el `Input` función para leer datos desde un archivo en dos variables.</span><span class="sxs-lookup"><span data-stu-id="02db3-2371">This example uses the `Input` function to read data from a file into two variables.</span></span> <span data-ttu-id="02db3-2372">En este ejemplo se da por supuesto que `TestFile` es un archivo que tiene varias líneas de los datos escritos en él con el `Write` funcione, cada línea que contiene una cadena entre comillas y un número separado por una coma, por ejemplo: ("Hello", 234).</span><span class="sxs-lookup"><span data-stu-id="02db3-2372">This example assumes that `TestFile` is a file that has several lines of data written to it using the `Write` function, each line containing a string in quotations and a number separated by a comma, for example: ("Hello", 234).</span></span>  
  
 [!code-vb[VbVbalrCatRef#35](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#35)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="02db3-2373">File mode is invalid.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-2373">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.InputString(System.Int32,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
      </Docs>
    </Member>
    <Member MemberName="Input">
      <MemberSignature Language="C#" Value="public static void Input (int FileNumber, ref string Value);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Input(int32 FileNumber, string&amp; Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Input(System.Int32,System.String@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Input (FileNumber As Integer, ByRef Value As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Input(int FileNumber, System::String ^ % Value);" />
      <MemberSignature Language="F#" Value="static member Input : int *  -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Input (FileNumber, Value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.String&amp;" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="02db3-2374">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-2374">Required.</span>
          </span>
          <span data-ttu-id="02db3-2375">Any valid file number.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-2375">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="02db3-2376">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-2376">Required.</span>
          </span>
          <span data-ttu-id="02db3-2377">Variable that is assigned the values read from the file—cannot be an array or object variable.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-2377">Variable that is assigned the values read from the file—cannot be an array or object variable.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="02db3-2378">Reads data from an open sequential file and assigns the data to variables.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-2378">Reads data from an open sequential file and assigns the data to variables.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="02db3-2379">El `Input` función se proporciona por compatibilidad con versiones anteriores y puede afectar al rendimiento.</span><span class="sxs-lookup"><span data-stu-id="02db3-2379">The `Input` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="02db3-2380">Para las aplicaciones que no es heredado, el `My.Computer.FileSystem` objeto proporciona un mejor rendimiento.</span><span class="sxs-lookup"><span data-stu-id="02db3-2380">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="02db3-2381">Para obtener más información, consulte [acceso a archivos con Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span><span class="sxs-lookup"><span data-stu-id="02db3-2381">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="02db3-2382">Los datos leídos con `Input` se escriben normalmente en un archivo mediante el uso de `Write`.</span><span class="sxs-lookup"><span data-stu-id="02db3-2382">Data read with `Input` is usually written to a file by using `Write`.</span></span> <span data-ttu-id="02db3-2383">Utilice esta función sólo con los archivos abiertos en `Input` o `Binary` modo.</span><span class="sxs-lookup"><span data-stu-id="02db3-2383">Use this function only with files opened in `Input` or `Binary` mode.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="02db3-2384">Al leer de archivos, no realice ninguna decisión sobre el contenido del archivo basándose en la extensión de nombre de archivo.</span><span class="sxs-lookup"><span data-stu-id="02db3-2384">When reading from files, do not make decisions about the contents of the file based on the file name extension.</span></span> <span data-ttu-id="02db3-2385">Por ejemplo, un archivo denominado Form1.vb no puede ser un archivo de código fuente de Visual Basic 2005.</span><span class="sxs-lookup"><span data-stu-id="02db3-2385">For example, a file that is named Form1.vb may not be a Visual Basic 2005 source file.</span></span>  
  
 <span data-ttu-id="02db3-2386">Cuando se leen datos numéricos o cadena estándar se asignan a variables sin modificación.</span><span class="sxs-lookup"><span data-stu-id="02db3-2386">When read, standard string or numeric data is assigned to variables without modification.</span></span> <span data-ttu-id="02db3-2387">En la tabla siguiente se muestra cómo se tratan otros datos de entrada.</span><span class="sxs-lookup"><span data-stu-id="02db3-2387">The following table illustrates how other input data is treated.</span></span>  
  
|<span data-ttu-id="02db3-2388">Datos</span><span class="sxs-lookup"><span data-stu-id="02db3-2388">Data</span></span>|<span data-ttu-id="02db3-2389">Valor asignado a la variable</span><span class="sxs-lookup"><span data-stu-id="02db3-2389">Value assigned to variable</span></span>|  
|-|-|  
|<span data-ttu-id="02db3-2390">Delimitadores de coma o línea en blanco</span><span class="sxs-lookup"><span data-stu-id="02db3-2390">Delimiting comma or blank line</span></span>|<span data-ttu-id="02db3-2391">Empty</span><span class="sxs-lookup"><span data-stu-id="02db3-2391">Empty</span></span>|  
|<span data-ttu-id="02db3-2392">NULL #</span><span class="sxs-lookup"><span data-stu-id="02db3-2392">#NULL#</span></span>|`DBNull`|  
|<span data-ttu-id="02db3-2393"># TRUE o FALSE #</span><span class="sxs-lookup"><span data-stu-id="02db3-2393">#TRUE# or #FALSE#</span></span>|<span data-ttu-id="02db3-2394">`True` o `False`</span><span class="sxs-lookup"><span data-stu-id="02db3-2394">`True` or `False`</span></span>|  
|#`yyyy-mm-dd hh:mm:ss`#|<span data-ttu-id="02db3-2395">La fecha y hora representadas por la expresión</span><span class="sxs-lookup"><span data-stu-id="02db3-2395">The date and/or time represented by the expression</span></span>|  
|<span data-ttu-id="02db3-2396">#ERROR `errornumber`#</span><span class="sxs-lookup"><span data-stu-id="02db3-2396">#ERROR `errornumber`#</span></span>|<span data-ttu-id="02db3-2397">`errornumber` (la variable es un objeto etiquetado como error)</span><span class="sxs-lookup"><span data-stu-id="02db3-2397">`errornumber` (variable is an object tagged as an error)</span></span>|  
  
 <span data-ttu-id="02db3-2398">Si se alcanza el final del archivo mientras se está introduciendo un elemento de datos, la entrada se detiene y se produce un error.</span><span class="sxs-lookup"><span data-stu-id="02db3-2398">If you reach the end of the file while you are inputting a data item, the input is stopped and an error occurs.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="02db3-2399">El `Input` función no está localizada.</span><span class="sxs-lookup"><span data-stu-id="02db3-2399">The `Input` function is not localized.</span></span> <span data-ttu-id="02db3-2400">Por ejemplo, en la versión en alemán, si se escribe 3,14159, devuelve solo 3, porque se trata la coma como separador de variable en lugar de como un separador decimal.</span><span class="sxs-lookup"><span data-stu-id="02db3-2400">For example, in the German version, if you input 3,14159, it returns only 3, because the comma is treated as a variable separator instead of as a decimal point.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="02db3-2401">Leer un archivo mediante el uso de la `Input` función requiere `Read` acceso desde el `FileIOPermissionAccess` enumeración.</span><span class="sxs-lookup"><span data-stu-id="02db3-2401">Reading from a file by using the `Input` function requires `Read` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="02db3-2402">Para obtener más información, consulta <xref:System.Security.Permissions.FileIOPermissionAccess>.</span><span class="sxs-lookup"><span data-stu-id="02db3-2402">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="02db3-2403">Este ejemplo se usa el `Input` función para leer datos desde un archivo en dos variables.</span><span class="sxs-lookup"><span data-stu-id="02db3-2403">This example uses the `Input` function to read data from a file into two variables.</span></span> <span data-ttu-id="02db3-2404">En este ejemplo se da por supuesto que `TestFile` es un archivo que tiene varias líneas de los datos escritos en él con el `Write` funcione, cada línea que contiene una cadena entre comillas y un número separado por una coma, por ejemplo: ("Hello", 234).</span><span class="sxs-lookup"><span data-stu-id="02db3-2404">This example assumes that `TestFile` is a file that has several lines of data written to it using the `Write` function, each line containing a string in quotations and a number separated by a comma, for example: ("Hello", 234).</span></span>  
  
 [!code-vb[VbVbalrCatRef#35](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#35)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="02db3-2405">File mode is invalid.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-2405">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.InputString(System.Int32,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
      </Docs>
    </Member>
    <Member MemberName="InputString">
      <MemberSignature Language="C#" Value="public static string InputString (int FileNumber, int CharCount);" />
      <MemberSignature Language="ILAsm" Value=".method public static string InputString(int32 FileNumber, int32 CharCount) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.InputString(System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function InputString (FileNumber As Integer, CharCount As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ InputString(int FileNumber, int CharCount);" />
      <MemberSignature Language="F#" Value="static member InputString : int * int -&gt; string" Usage="Microsoft.VisualBasic.FileSystem.InputString (FileNumber, CharCount)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="CharCount" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="02db3-2406">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-2406">Required.</span>
          </span>
          <span data-ttu-id="02db3-2407">Any valid file number.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-2407">Any valid file number.</span>
          </span>
        </param>
        <param name="CharCount">
          <span data-ttu-id="02db3-2408">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-2408">Required.</span>
          </span>
          <span data-ttu-id="02db3-2409">Any valid numeric expression specifying the number of characters to read.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-2409">Any valid numeric expression specifying the number of characters to read.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="02db3-2410">Returns <see langword="String" /> value that contains characters from a file opened in <see langword="Input" /> or <see langword="Binary" /> mode.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-2410">Returns <see langword="String" /> value that contains characters from a file opened in <see langword="Input" /> or <see langword="Binary" /> mode.</span>
          </span>
          <span data-ttu-id="02db3-2411">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="InputString" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-2411">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="InputString" />.</span>
          </span>
          <span data-ttu-id="02db3-2412">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-2412">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="02db3-2413">Returns <see langword="String" /> value that contains characters from a file opened in <see langword="Input" /> or <see langword="Binary" /> mode.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-2413">Returns <see langword="String" /> value that contains characters from a file opened in <see langword="Input" /> or <see langword="Binary" /> mode.</span>
          </span>
          <span data-ttu-id="02db3-2414">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="InputString" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-2414">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="InputString" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="02db3-2415">El `InputString` función se proporciona por compatibilidad con versiones anteriores y puede afectar al rendimiento.</span><span class="sxs-lookup"><span data-stu-id="02db3-2415">The `InputString` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="02db3-2416">Para las aplicaciones que no es heredado, el `My.Computer.FileSystem` objeto proporciona un mejor rendimiento.</span><span class="sxs-lookup"><span data-stu-id="02db3-2416">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="02db3-2417">Para obtener más información, consulte [acceso a archivos con Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span><span class="sxs-lookup"><span data-stu-id="02db3-2417">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="02db3-2418">Los datos leídos con el `InputString` función normalmente se escribe en un archivo mediante el uso de `Print` o `FilePut`.</span><span class="sxs-lookup"><span data-stu-id="02db3-2418">Data read with the `InputString` function is usually written to a file by using `Print` or `FilePut`.</span></span> <span data-ttu-id="02db3-2419">Utilice esta función sólo con los archivos abiertos en `Input` o `Binary` modo.</span><span class="sxs-lookup"><span data-stu-id="02db3-2419">Use this function only with files opened in `Input` or `Binary` mode.</span></span>  
  
 <span data-ttu-id="02db3-2420">A diferencia de la `Input` función, el `InputString` función devuelve todos los caracteres que lee.</span><span class="sxs-lookup"><span data-stu-id="02db3-2420">Unlike the `Input` function, the `InputString` function returns all the characters it reads.</span></span> <span data-ttu-id="02db3-2421">Esto incluye comas, retornos de carro, saltos de línea, las comillas y espacios iniciales.</span><span class="sxs-lookup"><span data-stu-id="02db3-2421">This includes commas, carriage returns, line feeds, quotation marks, and leading spaces.</span></span>  
  
 <span data-ttu-id="02db3-2422">Con los archivos abiertos para `Binary` tener acceso a un intento de leer el archivo mediante el uso de la `InputString` función hasta `EOF` devuelve `True` genera un error.</span><span class="sxs-lookup"><span data-stu-id="02db3-2422">With files opened for `Binary` access, an attempt to read through the file by using the `InputString` function until `EOF` returns `True` generates an error.</span></span> <span data-ttu-id="02db3-2423">Utilice la `LOF` y `Loc` funciones en lugar de `EOF` al leer archivos binarios mediante `InputString`, o use `FileGet` cuando se usa el `EOF` función.</span><span class="sxs-lookup"><span data-stu-id="02db3-2423">Use the `LOF` and `Loc` functions instead of `EOF` when you read binary files by using `InputString`, or use `FileGet` when you use the `EOF` function.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="02db3-2424">Al leer de archivos, no tomar decisiones de seguridad sobre el contenido del archivo basándose en la extensión de nombre de archivo.</span><span class="sxs-lookup"><span data-stu-id="02db3-2424">When reading from files, do not make security decisions about the contents of the file based on the file name extension.</span></span> <span data-ttu-id="02db3-2425">Por ejemplo, un archivo denominado Form1.vb no puede ser un archivo de código fuente de Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="02db3-2425">For example, a file named Form1.vb may not be a Visual Basic source file.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="02db3-2426">Este ejemplo se usa el `InputString` función para leer un carácter de un archivo al mismo tiempo y para imprimir el `Output` ventana.</span><span class="sxs-lookup"><span data-stu-id="02db3-2426">This example uses the `InputString` function to read one character at a time from a file and print it to the `Output` window.</span></span> <span data-ttu-id="02db3-2427">En este ejemplo se da por supuesto que `MyFile` es un archivo de texto que tiene varias líneas de datos de ejemplo.</span><span class="sxs-lookup"><span data-stu-id="02db3-2427">This example assumes that `MyFile` is a text file that has several lines of sample data.</span></span>  
  
 [!code-vb[VbVbalrCatRef#33](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#33)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="02db3-2428">
            <paramref name="FileNumber" /> does not exist.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-2428">
              <paramref name="FileNumber" /> does not exist.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="02db3-2429">
            <paramref name="CharCount" /> &lt; 0 or &gt; 214.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-2429">
              <paramref name="CharCount" /> &lt; 0 or &gt; 214.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Input" />
      </Docs>
    </Member>
    <Member MemberName="Kill">
      <MemberSignature Language="C#" Value="public static void Kill (string PathName);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Kill(string PathName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Kill(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Kill (PathName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Kill(System::String ^ PathName);" />
      <MemberSignature Language="F#" Value="static member Kill : string -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Kill PathName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="PathName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="PathName">
          <span data-ttu-id="02db3-2430">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-2430">Required.</span>
          </span>
          <span data-ttu-id="02db3-2431">
            <see langword="String" /> expression that specifies one or more file names to be deleted.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-2431">
              <see langword="String" /> expression that specifies one or more file names to be deleted.</span>
          </span>
          <span data-ttu-id="02db3-2432">
            <c>PathName</c> can include the directory or folder, and the drive.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-2432">
              <c>PathName</c> can include the directory or folder, and the drive.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="02db3-2433">Deletes files from a disk.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-2433">Deletes files from a disk.</span>
          </span>
          <span data-ttu-id="02db3-2434">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Kill" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-2434">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Kill" />.</span>
          </span>
          <span data-ttu-id="02db3-2435">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> .</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-2435">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> .</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="02db3-2436">`Kill` admite el uso de varios caracteres (`*`) ni un único carácter (`?`) los caracteres comodín para especificar varios archivos.</span><span class="sxs-lookup"><span data-stu-id="02db3-2436">`Kill` supports the use of multiple-character (`*`) and single-character (`?`) wildcards to specify multiple files.</span></span>  
  
 <span data-ttu-id="02db3-2437">**Nota de seguridad** para poder ejecutarse, el `Kill` función requiere `Read` y `PathDiscovery` marcas de <xref:System.Security.Permissions.FileIOPermission> concederá al código de ejecución.</span><span class="sxs-lookup"><span data-stu-id="02db3-2437">**Security Note** In order to execute, the `Kill` function requires `Read` and `PathDiscovery` flags of <xref:System.Security.Permissions.FileIOPermission> to be granted to the executing code.</span></span> <span data-ttu-id="02db3-2438">Para obtener más información, consulte <xref:System.Security.SecurityException> [permisos de acceso del código](http://msdn.microsoft.com/library/e5ae402f-6dda-4732-bbe8-77296630f675)</span><span class="sxs-lookup"><span data-stu-id="02db3-2438">For more information, see <xref:System.Security.SecurityException>[Code Access Permissions](http://msdn.microsoft.com/library/e5ae402f-6dda-4732-bbe8-77296630f675)</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="02db3-2439">Este ejemplo se usa el `Kill` función para eliminar un archivo desde un disco.</span><span class="sxs-lookup"><span data-stu-id="02db3-2439">This example uses the `Kill` function to delete a file from a disk.</span></span>  
  
 [!code-vb[VbVbalrCatRef#60](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#60)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="02db3-2440">Target file(s) open.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-2440">Target file(s) open.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.FileNotFoundException">
          <span data-ttu-id="02db3-2441">Target file(s) not found.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-2441">Target file(s) not found.</span>
          </span>
        </exception>
        <exception cref="T:System.Security.SecurityException">
          <span data-ttu-id="02db3-2442">Permission denied.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-2442">Permission denied.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.RmDir(System.String)" />
        <altmember cref="T:System.IO.IOException" />
        <altmember cref="T:System.IO.FileNotFoundException" />
      </Docs>
    </Member>
    <Member MemberName="LineInput">
      <MemberSignature Language="C#" Value="public static string LineInput (int FileNumber);" />
      <MemberSignature Language="ILAsm" Value=".method public static string LineInput(int32 FileNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.LineInput(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function LineInput (FileNumber As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ LineInput(int FileNumber);" />
      <MemberSignature Language="F#" Value="static member LineInput : int -&gt; string" Usage="Microsoft.VisualBasic.FileSystem.LineInput FileNumber" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="02db3-2443">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-2443">Required.</span>
          </span>
          <span data-ttu-id="02db3-2444">Any valid file number.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-2444">Any valid file number.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="02db3-2445">Reads a single line from an open sequential file and assigns it to a <see langword="String" /> variable.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-2445">Reads a single line from an open sequential file and assigns it to a <see langword="String" /> variable.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="02db3-2446">Reads a single line from an open sequential file and assigns it to a <see langword="String" /> variable.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-2446">Reads a single line from an open sequential file and assigns it to a <see langword="String" /> variable.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="02db3-2447">El `LineInput` función se proporciona por compatibilidad con versiones anteriores y puede afectar al rendimiento.</span><span class="sxs-lookup"><span data-stu-id="02db3-2447">The `LineInput` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="02db3-2448">Para las aplicaciones que no es heredado, el `My.Computer.FileSystem` objeto proporciona un mejor rendimiento.</span><span class="sxs-lookup"><span data-stu-id="02db3-2448">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="02db3-2449">Para obtener más información, consulte [acceso a archivos con Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span><span class="sxs-lookup"><span data-stu-id="02db3-2449">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="02db3-2450">Los datos leídos con `LineInput` se escriben normalmente en un archivo mediante el uso de `Print`.</span><span class="sxs-lookup"><span data-stu-id="02db3-2450">Data read with `LineInput` is usually written to a file by using `Print`.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="02db3-2451">Al leer de archivos, no realice ninguna decisión sobre el contenido de un archivo basado en la extensión de nombre de archivo.</span><span class="sxs-lookup"><span data-stu-id="02db3-2451">When reading from files, do not make decisions about the contents of a file based on the file name extension.</span></span> <span data-ttu-id="02db3-2452">Por ejemplo, un archivo denominado Form1.vb no puede ser un archivo de código fuente de Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="02db3-2452">For example, a file that is named Form1.vb may not be a Visual Basic source file.</span></span>  
  
 <span data-ttu-id="02db3-2453">El `LineInput` función lee un carácter de un archivo a la vez hasta que encuentra un retorno de carro (`Chr(13)`) o retorno de carro/línea fuente (`Chr(13) + Chr(10)`) secuencia.</span><span class="sxs-lookup"><span data-stu-id="02db3-2453">The `LineInput` function reads from a file one character at a time until it encounters a carriage return (`Chr(13)`) or carriage return/line feed (`Chr(13) + Chr(10)`) sequence.</span></span> <span data-ttu-id="02db3-2454">Carro retorno estas secuencias se omiten en lugar de anexar a la cadena de caracteres.</span><span class="sxs-lookup"><span data-stu-id="02db3-2454">Carriage return/line feed sequences are skipped instead of appended to the character string.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="02db3-2455">Leer un archivo mediante el uso de la `LineInput` función requiere `Read` acceso desde el <xref:System.Security.Permissions.FileIOPermissionAccess> enumeración.</span><span class="sxs-lookup"><span data-stu-id="02db3-2455">Reading from a file by using the `LineInput` function requires `Read` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="02db3-2456">Este ejemplo se usa el `LineInput` función para leer una línea de un archivo secuencial y asignarlo a una variable.</span><span class="sxs-lookup"><span data-stu-id="02db3-2456">This example uses the `LineInput` function to read a line from a sequential file and assign it to a variable.</span></span> <span data-ttu-id="02db3-2457">En este ejemplo se da por supuesto que `TestFile` es un archivo de texto que tiene varias líneas de datos de ejemplo.</span><span class="sxs-lookup"><span data-stu-id="02db3-2457">This example assumes that `TestFile` is a text file that has several lines of sample data.</span></span>  
  
 [!code-vb[VbVbalrCatRef#19](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#19)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.EndOfStreamException">
          <span data-ttu-id="02db3-2458">End of file reached.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-2458">End of file reached.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="02db3-2459">
            <paramref name="FileNumber" /> does not exist.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-2459">
              <paramref name="FileNumber" /> does not exist.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Chr(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.ChrW(System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Input" />
      </Docs>
    </Member>
    <Member MemberName="Loc">
      <MemberSignature Language="C#" Value="public static long Loc (int FileNumber);" />
      <MemberSignature Language="ILAsm" Value=".method public static int64 Loc(int32 FileNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Loc(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Loc (FileNumber As Integer) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static long Loc(int FileNumber);" />
      <MemberSignature Language="F#" Value="static member Loc : int -&gt; int64" Usage="Microsoft.VisualBasic.FileSystem.Loc FileNumber" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="02db3-2460">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-2460">Required.</span>
          </span>
          <span data-ttu-id="02db3-2461">Any valid <see langword="Integer" /> file number.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-2461">Any valid <see langword="Integer" /> file number.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="02db3-2462">Returns a <see langword="Long" /> value that specifies the current read/write position in an open file.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-2462">Returns a <see langword="Long" /> value that specifies the current read/write position in an open file.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="02db3-2463">Returns a <see langword="Long" /> value that specifies the current read/write position in an open file.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-2463">Returns a <see langword="Long" /> value that specifies the current read/write position in an open file.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="02db3-2464">El `Loc` función está basado en cero; se utiliza para recuperar el primer byte de un archivo, devuelve 0.</span><span class="sxs-lookup"><span data-stu-id="02db3-2464">The `Loc` function is zero-based; using it to retrieve the first byte in a file will return 0.</span></span>  
  
 <span data-ttu-id="02db3-2465">El `Loc` función se proporciona por compatibilidad con versiones anteriores y puede afectar al rendimiento.</span><span class="sxs-lookup"><span data-stu-id="02db3-2465">The `Loc` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="02db3-2466">Para las aplicaciones que no es heredado, el `My.Computer.FileSystem` objeto proporciona un mejor rendimiento.</span><span class="sxs-lookup"><span data-stu-id="02db3-2466">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="02db3-2467">Para obtener más información, consulte [acceso a archivos con Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span><span class="sxs-lookup"><span data-stu-id="02db3-2467">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="02db3-2468">El siguiente describe el valor devuelto para cada modo de acceso de archivo:</span><span class="sxs-lookup"><span data-stu-id="02db3-2468">The following describes the return value for each file access mode:</span></span>  
  
|<span data-ttu-id="02db3-2469">Modo</span><span class="sxs-lookup"><span data-stu-id="02db3-2469">Mode</span></span>|<span data-ttu-id="02db3-2470">Valor devuelto</span><span class="sxs-lookup"><span data-stu-id="02db3-2470">Return value</span></span>|  
|-|-|  
|`Random`|<span data-ttu-id="02db3-2471">Número del último registro leído o escrito en el archivo.</span><span class="sxs-lookup"><span data-stu-id="02db3-2471">Number of the last record read from or written to the file.</span></span>|  
|`Sequential`|<span data-ttu-id="02db3-2472">Posición de byte actual en el archivo dividido entre 128.</span><span class="sxs-lookup"><span data-stu-id="02db3-2472">Current byte position in the file divided by 128.</span></span> <span data-ttu-id="02db3-2473">Sin embargo, la información devuelta por `Loc` para archivos secuenciales no se utiliza ni necesario.</span><span class="sxs-lookup"><span data-stu-id="02db3-2473">However, information returned by `Loc` for sequential files is neither used nor required.</span></span>|  
|`Binary`|<span data-ttu-id="02db3-2474">Posición del último byte leído o escrito.</span><span class="sxs-lookup"><span data-stu-id="02db3-2474">Position of the last byte read or written.</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="02db3-2475">Este ejemplo se usa el `Loc` función para devolver la posición de lectura/escritura actual en un archivo abierto.</span><span class="sxs-lookup"><span data-stu-id="02db3-2475">This example uses the `Loc` function to return the current read/write position in an open file.</span></span> <span data-ttu-id="02db3-2476">En este ejemplo se da por supuesto que `MyFile` es un archivo de texto que tiene varias líneas de datos de ejemplo.</span><span class="sxs-lookup"><span data-stu-id="02db3-2476">This example assumes that `MyFile` is a text file that has several lines of sample data.</span></span>  
  
 [!code-vb[VbVbalrCatRef#17](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#17)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="02db3-2477">File mode is invalid.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-2477">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.EOF(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.LOF(System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="T:System.IO.IOException" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Lock">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="02db3-2478">Controls access by other processes to all or part of a file opened by using the <see langword="Open" /> function.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-2478">Controls access by other processes to all or part of a file opened by using the <see langword="Open" /> function.</span>
          </span>
          <span data-ttu-id="02db3-2479">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Lock" /> and <see langword="Unlock" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-2479">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Lock" /> and <see langword="Unlock" />.</span>
          </span>
          <span data-ttu-id="02db3-2480">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-2480">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Lock">
      <MemberSignature Language="C#" Value="public static void Lock (int FileNumber);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Lock(int32 FileNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Lock(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Lock (FileNumber As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Lock(int FileNumber);" />
      <MemberSignature Language="F#" Value="static member Lock : int -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Lock FileNumber" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="02db3-2481">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-2481">Required.</span>
          </span>
          <span data-ttu-id="02db3-2482">Any valid file number.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-2482">Any valid file number.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="02db3-2483">Controls access by other processes to all or part of a file opened by using the <see langword="Open" /> function.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-2483">Controls access by other processes to all or part of a file opened by using the <see langword="Open" /> function.</span>
          </span>
          <span data-ttu-id="02db3-2484">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Lock" /> and <see langword="Unlock" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-2484">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Lock" /> and <see langword="Unlock" />.</span>
          </span>
          <span data-ttu-id="02db3-2485">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-2485">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="02db3-2486">El `Lock` y `Unlock` funciones se utilizan en entornos donde varios procesos pueden necesitar acceso al mismo archivo.</span><span class="sxs-lookup"><span data-stu-id="02db3-2486">The `Lock` and `Unlock` functions are used in environments where several processes might need access to the same file.</span></span>  
  
 <span data-ttu-id="02db3-2487">`Lock` y `Unlock` funciones se usan siempre en pares.</span><span class="sxs-lookup"><span data-stu-id="02db3-2487">`Lock` and `Unlock` functions are always used in pairs.</span></span> <span data-ttu-id="02db3-2488">Los argumentos de `Lock` y `Unlock` deben ser idénticos.</span><span class="sxs-lookup"><span data-stu-id="02db3-2488">The arguments to `Lock` and `Unlock` must be identical.</span></span>  
  
 <span data-ttu-id="02db3-2489">Si `Record`, o `FromRecord` y `ToRecord` no son se proporciona, el bloqueo será todo el archivo.</span><span class="sxs-lookup"><span data-stu-id="02db3-2489">If `Record`, or `FromRecord` and `ToRecord` are not supplied, the lock will be for the whole file.</span></span> <span data-ttu-id="02db3-2490">Si `Record` por sí solo se especifica solo el registro estará bloqueado o desbloqueado.</span><span class="sxs-lookup"><span data-stu-id="02db3-2490">If `Record` alone is specified the single record will be locked/unlocked.</span></span>  
  
 <span data-ttu-id="02db3-2491">Si el archivo se ha abierto para entradas o salidas, secuenciales `Lock` y `Unlock` afectan a todo el archivo, independientemente del intervalo especificado por `FromRecord` y`ToRecord`.</span><span class="sxs-lookup"><span data-stu-id="02db3-2491">If the file has been opened for sequential input or output, `Lock` and `Unlock` affect the whole file, regardless of the range specified by `FromRecord` and`ToRecord`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="02db3-2492">En este ejemplo se muestra el uso de la `Lock` y `Unlock` funciones.</span><span class="sxs-lookup"><span data-stu-id="02db3-2492">This example illustrates the use of the `Lock` and `Unlock` functions.</span></span> <span data-ttu-id="02db3-2493">En este ejemplo se da por supuesto que `People.txt` es un archivo que contiene registros de la estructura `Person`.</span><span class="sxs-lookup"><span data-stu-id="02db3-2493">This example assumes that `People.txt` is a file that contains records of the structure `Person`.</span></span>  
  
 [!code-vb[VbVbalrCatRef#13](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#13)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="02db3-2494">File mode is invalid.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-2494">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="T:System.IO.IOException" />
      </Docs>
    </Member>
    <Member MemberName="Lock">
      <MemberSignature Language="C#" Value="public static void Lock (int FileNumber, long Record);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Lock(int32 FileNumber, int64 Record) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Lock(System.Int32,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Lock (FileNumber As Integer, Record As Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Lock(int FileNumber, long Record);" />
      <MemberSignature Language="F#" Value="static member Lock : int * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Lock (FileNumber, Record)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Record" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="02db3-2495">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-2495">Required.</span>
          </span>
          <span data-ttu-id="02db3-2496">Any valid file number.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-2496">Any valid file number.</span>
          </span>
        </param>
        <param name="Record">
          <span data-ttu-id="02db3-2497">Optional.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-2497">Optional.</span>
          </span>
          <span data-ttu-id="02db3-2498">Number of the only record or byte to lock or unlock</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-2498">Number of the only record or byte to lock or unlock</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="02db3-2499">Controls access by other processes to all or part of a file opened by using the <see langword="Open" /> function.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-2499">Controls access by other processes to all or part of a file opened by using the <see langword="Open" /> function.</span>
          </span>
          <span data-ttu-id="02db3-2500">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Lock" /> and <see langword="Unlock" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-2500">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Lock" /> and <see langword="Unlock" />.</span>
          </span>
          <span data-ttu-id="02db3-2501">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-2501">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="02db3-2502">El `Lock` y `Unlock` funciones se utilizan en entornos donde varios procesos pueden necesitar acceso al mismo archivo.</span><span class="sxs-lookup"><span data-stu-id="02db3-2502">The `Lock` and `Unlock` functions are used in environments where several processes might need access to the same file.</span></span>  
  
 <span data-ttu-id="02db3-2503">`Lock` y `Unlock` funciones se usan siempre en pares.</span><span class="sxs-lookup"><span data-stu-id="02db3-2503">`Lock` and `Unlock` functions are always used in pairs.</span></span> <span data-ttu-id="02db3-2504">Los argumentos de `Lock` y `Unlock` deben ser idénticos.</span><span class="sxs-lookup"><span data-stu-id="02db3-2504">The arguments to `Lock` and `Unlock` must be identical.</span></span>  
  
 <span data-ttu-id="02db3-2505">Si `Record`, o `FromRecord` y `ToRecord` no son se proporciona, el bloqueo será todo el archivo.</span><span class="sxs-lookup"><span data-stu-id="02db3-2505">If `Record`, or `FromRecord` and `ToRecord` are not supplied, the lock will be for the whole file.</span></span> <span data-ttu-id="02db3-2506">Si `Record` por sí solo se especifica solo el registro estará bloqueado o desbloqueado.</span><span class="sxs-lookup"><span data-stu-id="02db3-2506">If `Record` alone is specified the single record will be locked/unlocked.</span></span>  
  
 <span data-ttu-id="02db3-2507">Si el archivo se ha abierto para entradas o salidas, secuenciales `Lock` y `Unlock` afectan a todo el archivo, independientemente del intervalo especificado por `FromRecord` y`ToRecord`.</span><span class="sxs-lookup"><span data-stu-id="02db3-2507">If the file has been opened for sequential input or output, `Lock` and `Unlock` affect the whole file, regardless of the range specified by `FromRecord` and`ToRecord`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="02db3-2508">En este ejemplo se muestra el uso de la `Lock` y `Unlock` funciones.</span><span class="sxs-lookup"><span data-stu-id="02db3-2508">This example illustrates the use of the `Lock` and `Unlock` functions.</span></span> <span data-ttu-id="02db3-2509">En este ejemplo se da por supuesto que `People.txt` es un archivo que contiene registros de la estructura `Person`.</span><span class="sxs-lookup"><span data-stu-id="02db3-2509">This example assumes that `People.txt` is a file that contains records of the structure `Person`.</span></span>  
  
 [!code-vb[VbVbalrCatRef#13](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#13)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="02db3-2510">File mode is invalid.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-2510">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="T:System.IO.IOException" />
      </Docs>
    </Member>
    <Member MemberName="Lock">
      <MemberSignature Language="C#" Value="public static void Lock (int FileNumber, long FromRecord, long ToRecord);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Lock(int32 FileNumber, int64 FromRecord, int64 ToRecord) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Lock(System.Int32,System.Int64,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Lock (FileNumber As Integer, FromRecord As Long, ToRecord As Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Lock(int FileNumber, long FromRecord, long ToRecord);" />
      <MemberSignature Language="F#" Value="static member Lock : int * int64 * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Lock (FileNumber, FromRecord, ToRecord)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="FromRecord" Type="System.Int64" />
        <Parameter Name="ToRecord" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="02db3-2511">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-2511">Required.</span>
          </span>
          <span data-ttu-id="02db3-2512">Any valid file number.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-2512">Any valid file number.</span>
          </span>
        </param>
        <param name="FromRecord">
          <span data-ttu-id="02db3-2513">Optional.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-2513">Optional.</span>
          </span>
          <span data-ttu-id="02db3-2514">Number of the first record or byte to lock or unlock.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-2514">Number of the first record or byte to lock or unlock.</span>
          </span>
        </param>
        <param name="ToRecord">
          <span data-ttu-id="02db3-2515">Optional.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-2515">Optional.</span>
          </span>
          <span data-ttu-id="02db3-2516">Number of the last record or byte to lock or unlock.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-2516">Number of the last record or byte to lock or unlock.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="02db3-2517">Controls access by other processes to all or part of a file opened by using the <see langword="Open" /> function.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-2517">Controls access by other processes to all or part of a file opened by using the <see langword="Open" /> function.</span>
          </span>
          <span data-ttu-id="02db3-2518">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Lock" /> and <see langword="Unlock" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-2518">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Lock" /> and <see langword="Unlock" />.</span>
          </span>
          <span data-ttu-id="02db3-2519">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-2519">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="02db3-2520">El `Lock` y `Unlock` funciones se utilizan en entornos donde varios procesos pueden necesitar acceso al mismo archivo.</span><span class="sxs-lookup"><span data-stu-id="02db3-2520">The `Lock` and `Unlock` functions are used in environments where several processes might need access to the same file.</span></span>  
  
 <span data-ttu-id="02db3-2521">`Lock` y `Unlock` funciones se usan siempre en pares.</span><span class="sxs-lookup"><span data-stu-id="02db3-2521">`Lock` and `Unlock` functions are always used in pairs.</span></span> <span data-ttu-id="02db3-2522">Los argumentos de `Lock` y `Unlock` deben ser idénticos.</span><span class="sxs-lookup"><span data-stu-id="02db3-2522">The arguments to `Lock` and `Unlock` must be identical.</span></span>  
  
 <span data-ttu-id="02db3-2523">Si `Record`, o `FromRecord` y `ToRecord` no son se proporciona, el bloqueo será todo el archivo.</span><span class="sxs-lookup"><span data-stu-id="02db3-2523">If `Record`, or `FromRecord` and `ToRecord` are not supplied, the lock will be for the whole file.</span></span> <span data-ttu-id="02db3-2524">Si `Record` por sí solo se especifica solo el registro estará bloqueado o desbloqueado.</span><span class="sxs-lookup"><span data-stu-id="02db3-2524">If `Record` alone is specified the single record will be locked/unlocked.</span></span>  
  
 <span data-ttu-id="02db3-2525">Si el archivo se ha abierto para entradas o salidas, secuenciales `Lock` y `Unlock` afectan a todo el archivo, independientemente del intervalo especificado por `FromRecord` y`ToRecord`.</span><span class="sxs-lookup"><span data-stu-id="02db3-2525">If the file has been opened for sequential input or output, `Lock` and `Unlock` affect the whole file, regardless of the range specified by `FromRecord` and`ToRecord`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="02db3-2526">En este ejemplo se muestra el uso de la `Lock` y `Unlock` funciones.</span><span class="sxs-lookup"><span data-stu-id="02db3-2526">This example illustrates the use of the `Lock` and `Unlock` functions.</span></span> <span data-ttu-id="02db3-2527">En este ejemplo se da por supuesto que `People.txt` es un archivo que contiene registros de la estructura `Person`.</span><span class="sxs-lookup"><span data-stu-id="02db3-2527">This example assumes that `People.txt` is a file that contains records of the structure `Person`.</span></span>  
  
 [!code-vb[VbVbalrCatRef#13](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#13)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="02db3-2528">File mode is invalid.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-2528">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="T:System.IO.IOException" />
      </Docs>
    </Member>
    <Member MemberName="LOF">
      <MemberSignature Language="C#" Value="public static long LOF (int FileNumber);" />
      <MemberSignature Language="ILAsm" Value=".method public static int64 LOF(int32 FileNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.LOF(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function LOF (FileNumber As Integer) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static long LOF(int FileNumber);" />
      <MemberSignature Language="F#" Value="static member LOF : int -&gt; int64" Usage="Microsoft.VisualBasic.FileSystem.LOF FileNumber" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="02db3-2529">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-2529">Required.</span>
          </span>
          <span data-ttu-id="02db3-2530">An <see langword="Integer" /> that contains a valid file number.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-2530">An <see langword="Integer" /> that contains a valid file number.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="02db3-2531">Returns a <see langword="Long" /> representing the size, in bytes, of a file opened by using the <see langword="FileOpen" /> function.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-2531">Returns a <see langword="Long" /> representing the size, in bytes, of a file opened by using the <see langword="FileOpen" /> function.</span>
          </span>
          <span data-ttu-id="02db3-2532">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="LOF" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-2532">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="LOF" />.</span>
          </span>
          <span data-ttu-id="02db3-2533">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-2533">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="02db3-2534">Returns a <see langword="Long" /> representing the size, in bytes, of a file opened by using the <see langword="FileOpen" /> function.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-2534">Returns a <see langword="Long" /> representing the size, in bytes, of a file opened by using the <see langword="FileOpen" /> function.</span>
          </span>
          <span data-ttu-id="02db3-2535">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="LOF" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-2535">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="LOF" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="02db3-2536">Use el `FileLen` función para obtener la longitud de un archivo que no está abierto.</span><span class="sxs-lookup"><span data-stu-id="02db3-2536">Use the `FileLen` function to obtain the length of a file that is not open.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="02db3-2537">Este ejemplo se usa el `LOF` función para determinar el tamaño de un archivo abierto.</span><span class="sxs-lookup"><span data-stu-id="02db3-2537">This example uses the `LOF` function to determine the size of an open file.</span></span> <span data-ttu-id="02db3-2538">En este ejemplo se da por supuesto que `TestFile` es un archivo de texto que contiene datos de ejemplo.</span><span class="sxs-lookup"><span data-stu-id="02db3-2538">This example assumes that `TestFile` is a text file that contains sample data.</span></span>  
  
 [!code-vb[VbVbalrCatRef#23](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#23)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="02db3-2539">File mode is invalid.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-2539">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.EOF(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileLen(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Loc(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="T:System.IO.IOException" />
      </Docs>
    </Member>
    <Member MemberName="MkDir">
      <MemberSignature Language="C#" Value="public static void MkDir (string Path);" />
      <MemberSignature Language="ILAsm" Value=".method public static void MkDir(string Path) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.MkDir(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub MkDir (Path As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void MkDir(System::String ^ Path);" />
      <MemberSignature Language="F#" Value="static member MkDir : string -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.MkDir Path" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="Path">
          <span data-ttu-id="02db3-2540">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-2540">Required.</span>
          </span>
          <span data-ttu-id="02db3-2541">
            <see langword="String" /> expression that identifies the directory to be created.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-2541">
              <see langword="String" /> expression that identifies the directory to be created.</span>
          </span>
          <span data-ttu-id="02db3-2542">The <c>Path</c> may include the drive.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-2542">The <c>Path</c> may include the drive.</span>
          </span>
          <span data-ttu-id="02db3-2543">If no drive is specified, <see langword="MkDir" /> creates the new directory on the current drive.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-2543">If no drive is specified, <see langword="MkDir" /> creates the new directory on the current drive.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="02db3-2544">Creates a new directory.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-2544">Creates a new directory.</span>
          </span>
          <span data-ttu-id="02db3-2545">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="MkDir" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-2545">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="MkDir" />.</span>
          </span>
          <span data-ttu-id="02db3-2546">For more information, see <see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.CreateDirectory(System.String)" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-2546">For more information, see <see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.CreateDirectory(System.String)" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="02db3-2547">Esta función crea un nuevo directorio.</span><span class="sxs-lookup"><span data-stu-id="02db3-2547">This function creates a new directory.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="02db3-2548">Este ejemplo se usa el `MkDir` función para crear un directorio.</span><span class="sxs-lookup"><span data-stu-id="02db3-2548">This example uses the `MkDir` function to create a directory.</span></span> <span data-ttu-id="02db3-2549">Si no se especifica la unidad, se crea el nuevo directorio en la unidad actual.</span><span class="sxs-lookup"><span data-stu-id="02db3-2549">If the drive is not specified, the new directory is created on the current drive.</span></span>  
  
 [!code-vb[VbVbalrCatRef#38](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#38)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="02db3-2550">
            <paramref name="Path" /> is not specified or is empty.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-2550">
              <paramref name="Path" /> is not specified or is empty.</span>
          </span>
        </exception>
        <exception cref="T:System.Security.SecurityException">
          <span data-ttu-id="02db3-2551">Permission denied.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-2551">Permission denied.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="02db3-2552">Directory already exists.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-2552">Directory already exists.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.ChDir(System.String)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.CurDir" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.RmDir(System.String)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
      </Docs>
    </Member>
    <Member MemberName="Print">
      <MemberSignature Language="C#" Value="public static void Print (int FileNumber, params object[] Output);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Print(int32 FileNumber, object[] Output) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub Print (FileNumber As Integer, ParamArray Output As Object())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Print(int FileNumber, ... cli::array &lt;System::Object ^&gt; ^ Output);" />
      <MemberSignature Language="F#" Value="static member Print : int * obj[] -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Print (FileNumber, Output)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Output" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="02db3-2553">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-2553">Required.</span>
          </span>
          <span data-ttu-id="02db3-2554">Any valid file number.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-2554">Any valid file number.</span>
          </span>
        </param>
        <param name="Output">
          <span data-ttu-id="02db3-2555">Optional.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-2555">Optional.</span>
          </span>
          <span data-ttu-id="02db3-2556">Zero or more comma-delimited expressions to write to a file.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-2556">Zero or more comma-delimited expressions to write to a file.</span>
          </span>
          <span data-ttu-id="02db3-2557">The <c>Output</c> argument settings are:  <see langword="T:System.IO.IOException" />: File mode is invalid.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-2557">The <c>Output</c> argument settings are:  <see langword="T:System.IO.IOException" />: File mode is invalid.</span>
          </span>
          <span data-ttu-id="02db3-2558">
            <see langword="T:System.IO.IOException" />: <c>FileNumber</c> does not exist.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-2558">
              <see langword="T:System.IO.IOException" />: <c>FileNumber</c> does not exist.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="02db3-2559">Writes display-formatted data to a sequential file.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-2559">Writes display-formatted data to a sequential file.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="02db3-2560">El `Print` y `PrintLine` funciones se proporcionan por compatibilidad con versiones anteriores y puede afectar al rendimiento.</span><span class="sxs-lookup"><span data-stu-id="02db3-2560">The `Print` and `PrintLine` functions are provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="02db3-2561">Para las aplicaciones que no es heredado, el `My.Computer.FileSystem` objeto proporciona un mejor rendimiento.</span><span class="sxs-lookup"><span data-stu-id="02db3-2561">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="02db3-2562">Para obtener más información, consulte [acceso a archivos con Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span><span class="sxs-lookup"><span data-stu-id="02db3-2562">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="02db3-2563">`Print` no incluye una avance de línea al final de una línea; Sin embargo, `PrintLine` incluyen un avance de línea.</span><span class="sxs-lookup"><span data-stu-id="02db3-2563">`Print` does not include a line feed at the end of a line; however, `PrintLine` does include a line feed.</span></span>  
  
 <span data-ttu-id="02db3-2564">Los datos escritos con `Print` normalmente se leen desde un archivo mediante el uso de `LineInput` o `Input`.</span><span class="sxs-lookup"><span data-stu-id="02db3-2564">Data written with `Print` is usually read from a file by using `LineInput` or `Input`.</span></span>  
  
 <span data-ttu-id="02db3-2565">Si se omite `Output` para `PrintLine`, se imprime una línea en blanco en el archivo; para `Print`, nada es de salida.</span><span class="sxs-lookup"><span data-stu-id="02db3-2565">If you omit `Output` for `PrintLine`, a blank line is printed to the file; for `Print`, nothing is output.</span></span> <span data-ttu-id="02db3-2566">Varias expresiones separadas por comas se alineará en los límites de tabulación, pero la combinación de comas y `TAB` puede causar resultados incoherentes.</span><span class="sxs-lookup"><span data-stu-id="02db3-2566">Multiple expressions separated with a comma will be aligned on tab boundaries, but mixing commas and `TAB` may cause inconsistent results.</span></span>  
  
 <span data-ttu-id="02db3-2567">Para `Boolean` datos, ya sea `True` o `False` se imprime.</span><span class="sxs-lookup"><span data-stu-id="02db3-2567">For `Boolean` data, either `True` or `False` is printed.</span></span> <span data-ttu-id="02db3-2568">El `True` y `False` palabras clave no se traducen, independientemente de la configuración regional.</span><span class="sxs-lookup"><span data-stu-id="02db3-2568">The `True` and `False` keywords are not translated, regardless of the locale.</span></span>  
  
 <span data-ttu-id="02db3-2569">Los datos de fecha se escriben en el archivo con el formato de fecha corta estándar reconocido por el sistema.</span><span class="sxs-lookup"><span data-stu-id="02db3-2569">Date data is written to the file by using the standard short date format recognized by your system.</span></span> <span data-ttu-id="02db3-2570">Cuando la fecha o el componente de hora falta o es cero, solo la parte proporcionada se escribe en el archivo.</span><span class="sxs-lookup"><span data-stu-id="02db3-2570">When either the date or the time component is missing or zero, only the part provided is written to the file.</span></span>  
  
 <span data-ttu-id="02db3-2571">Si se escribirá nada en el archivo `Output` datos están vacíos.</span><span class="sxs-lookup"><span data-stu-id="02db3-2571">Nothing is written to the file if `Output` data is empty.</span></span> <span data-ttu-id="02db3-2572">Sin embargo, si `Output` datos de la lista están `DBNull`, `Null` se escribe en el archivo.</span><span class="sxs-lookup"><span data-stu-id="02db3-2572">However, if `Output` list data is `DBNull`, `Null` is written to the file.</span></span>  
  
 <span data-ttu-id="02db3-2573">Para `Error` la salida de datos, aparece como `Error errorcode`.</span><span class="sxs-lookup"><span data-stu-id="02db3-2573">For `Error` data, the output appears as `Error errorcode`.</span></span> <span data-ttu-id="02db3-2574">El `Error` palabra clave no se traduce, independientemente de la configuración regional.</span><span class="sxs-lookup"><span data-stu-id="02db3-2574">The `Error` keyword is not translated regardless of the locale.</span></span>  
  
 <span data-ttu-id="02db3-2575">Todos los datos escritos en el archivo mediante el uso de `Print` son internacionales; es decir, los datos tiene el formato correcto con el separador decimal adecuado.</span><span class="sxs-lookup"><span data-stu-id="02db3-2575">All data written to the file by using `Print` is internationally aware; that is, the data is correctly formatted using the appropriate decimal separator.</span></span> <span data-ttu-id="02db3-2576">Si el usuario desea generar datos para su uso en varias configuraciones regionales, `Write` debe usarse.</span><span class="sxs-lookup"><span data-stu-id="02db3-2576">If the user wishes to output data for use by multiple locales, `Write` should be used.</span></span>  
  
 <span data-ttu-id="02db3-2577">Escribir en un archivo mediante el uso de la `Print` o `PrintLine` functions requiere `Write` acceso desde el `FileIOPermissionAccess` enumeración.</span><span class="sxs-lookup"><span data-stu-id="02db3-2577">Writing to a file by using the `Print` or `PrintLine` functions requires `Write` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="02db3-2578">Para obtener más información, vea <xref:System.Security.Permissions.FileIOPermissionAccess>.</span><span class="sxs-lookup"><span data-stu-id="02db3-2578">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess> .</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="02db3-2579">Este ejemplo se usa el `Print` y `PrintLine` funciones para escribir datos en un archivo.</span><span class="sxs-lookup"><span data-stu-id="02db3-2579">This example uses the `Print` and `PrintLine` functions to write data to a file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#53](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#53)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.SPC(System.Int16)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.TAB" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
      </Docs>
    </Member>
    <Member MemberName="PrintLine">
      <MemberSignature Language="C#" Value="public static void PrintLine (int FileNumber, params object[] Output);" />
      <MemberSignature Language="ILAsm" Value=".method public static void PrintLine(int32 FileNumber, object[] Output) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub PrintLine (FileNumber As Integer, ParamArray Output As Object())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void PrintLine(int FileNumber, ... cli::array &lt;System::Object ^&gt; ^ Output);" />
      <MemberSignature Language="F#" Value="static member PrintLine : int * obj[] -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.PrintLine (FileNumber, Output)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Output" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="02db3-2580">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-2580">Required.</span>
          </span>
          <span data-ttu-id="02db3-2581">Any valid file number.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-2581">Any valid file number.</span>
          </span>
        </param>
        <param name="Output">
          <span data-ttu-id="02db3-2582">Optional.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-2582">Optional.</span>
          </span>
          <span data-ttu-id="02db3-2583">Zero or more comma-delimited expressions to write to a file.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-2583">Zero or more comma-delimited expressions to write to a file.</span>
          </span>
          <span data-ttu-id="02db3-2584">The <c>Output</c> argument settings are:  <see langword="T:System.IO.IOException" />: File mode is invalid.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-2584">The <c>Output</c> argument settings are:  <see langword="T:System.IO.IOException" />: File mode is invalid.</span>
          </span>
          <span data-ttu-id="02db3-2585">
            <see langword="T:System.IO.IOException" />: <c>FileNumber</c> does not exist.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-2585">
              <see langword="T:System.IO.IOException" />: <c>FileNumber</c> does not exist.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="02db3-2586">Writes display-formatted data to a sequential file.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-2586">Writes display-formatted data to a sequential file.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="02db3-2587">El `Print` y `PrintLine` funciones se proporcionan por compatibilidad con versiones anteriores y puede afectar al rendimiento.</span><span class="sxs-lookup"><span data-stu-id="02db3-2587">The `Print` and `PrintLine` functions are provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="02db3-2588">Para las aplicaciones que no es heredado, el `My.Computer.FileSystem` objeto proporciona un mejor rendimiento.</span><span class="sxs-lookup"><span data-stu-id="02db3-2588">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="02db3-2589">Para obtener más información, consulte [acceso a archivos con Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span><span class="sxs-lookup"><span data-stu-id="02db3-2589">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="02db3-2590">`Print` no incluye una avance de línea al final de una línea; Sin embargo,`PrintLine` incluyen un avance de línea.</span><span class="sxs-lookup"><span data-stu-id="02db3-2590">`Print` does not include a line feed at the end of a line; however,`PrintLine` does include a line feed.</span></span>  
  
 <span data-ttu-id="02db3-2591">Los datos escritos con `Print` normalmente se leen desde un archivo mediante el uso de `LineInput` o `Input`.</span><span class="sxs-lookup"><span data-stu-id="02db3-2591">Data written with `Print` is usually read from a file by using `LineInput` or `Input`.</span></span>  
  
 <span data-ttu-id="02db3-2592">Si se omite `Output` para `PrintLine`, se imprime una línea en blanco en el archivo; para `Print`, nada es de salida.</span><span class="sxs-lookup"><span data-stu-id="02db3-2592">If you omit `Output` for `PrintLine`, a blank line is printed to the file; for `Print`, nothing is output.</span></span> <span data-ttu-id="02db3-2593">Varias expresiones separadas por comas se alineará en los límites de tabulación, pero la combinación de comas y `TAB` puede causar resultados incoherentes.</span><span class="sxs-lookup"><span data-stu-id="02db3-2593">Multiple expressions separated with a comma will be aligned on tab boundaries, but mixing commas and `TAB` may cause inconsistent results.</span></span>  
  
 <span data-ttu-id="02db3-2594">Para `Boolean` datos, ya sea `True` o `False` se imprime.</span><span class="sxs-lookup"><span data-stu-id="02db3-2594">For `Boolean` data, either `True` or `False` is printed.</span></span> <span data-ttu-id="02db3-2595">El `True` y `False` palabras clave no se traducen, independientemente de la configuración regional.</span><span class="sxs-lookup"><span data-stu-id="02db3-2595">The `True` and `False` keywords are not translated, regardless of the locale.</span></span>  
  
 <span data-ttu-id="02db3-2596">Los datos de fecha se escriben en el archivo con el formato de fecha corta estándar reconocido por el sistema.</span><span class="sxs-lookup"><span data-stu-id="02db3-2596">Date data is written to the file by using the standard short date format recognized by the system.</span></span> <span data-ttu-id="02db3-2597">Cuando la fecha o el componente de hora falta o es cero, solo la parte proporcionada se escribe en el archivo.</span><span class="sxs-lookup"><span data-stu-id="02db3-2597">When either the date or the time component is missing or zero, only the part provided is written to the file.</span></span>  
  
 <span data-ttu-id="02db3-2598">Si se escribirá nada en el archivo `Output` datos están vacíos.</span><span class="sxs-lookup"><span data-stu-id="02db3-2598">Nothing is written to the file if `Output` data is empty.</span></span> <span data-ttu-id="02db3-2599">Sin embargo, si `Output` datos de la lista están `DBNull`, `Null` se escribe en el archivo.</span><span class="sxs-lookup"><span data-stu-id="02db3-2599">However, if `Output` list data is `DBNull`, `Null` is written to the file.</span></span>  
  
 <span data-ttu-id="02db3-2600">Para `Error` la salida de datos, aparece como `Error errorcode`.</span><span class="sxs-lookup"><span data-stu-id="02db3-2600">For `Error` data, the output appears as `Error errorcode`.</span></span> <span data-ttu-id="02db3-2601">El `Error` palabra clave no se traduce, independientemente de la configuración regional.</span><span class="sxs-lookup"><span data-stu-id="02db3-2601">The `Error` keyword is not translated regardless of the locale.</span></span>  
  
 <span data-ttu-id="02db3-2602">Todos los datos escritos en el archivo mediante el uso de `Print` son internacionales; es decir, los datos tiene el formato correcto con el separador decimal adecuado.</span><span class="sxs-lookup"><span data-stu-id="02db3-2602">All data written to the file by using `Print` is internationally aware; that is, the data is correctly formatted using the appropriate decimal separator.</span></span> <span data-ttu-id="02db3-2603">Si el usuario desea generar datos para su uso en varias configuraciones regionales, `Write` debe usarse.</span><span class="sxs-lookup"><span data-stu-id="02db3-2603">If the user wishes to output data for use by multiple locales, `Write` should be used.</span></span>  
  
 <span data-ttu-id="02db3-2604">Escribir en un archivo mediante el uso de la `Print` o `PrintLine` functions requiere `Write` acceso desde el `FileIOPermissionAccess` enumeración.</span><span class="sxs-lookup"><span data-stu-id="02db3-2604">Writing to a file by using the `Print` or `PrintLine` functions requires `Write` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="02db3-2605">Para obtener más información, vea <xref:System.Security.Permissions.FileIOPermissionAccess>.</span><span class="sxs-lookup"><span data-stu-id="02db3-2605">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess> .</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="02db3-2606">Este ejemplo se usa el `Print` y `PrintLine` funciones para escribir datos en un archivo.</span><span class="sxs-lookup"><span data-stu-id="02db3-2606">This example uses the `Print` and `PrintLine` functions to write data to a file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#53](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#53)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.SPC(System.Int16)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.TAB" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
      </Docs>
    </Member>
    <Member MemberName="Rename">
      <MemberSignature Language="C#" Value="public static void Rename (string OldPath, string NewPath);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Rename(string OldPath, string NewPath) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Rename(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Rename (OldPath As String, NewPath As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Rename(System::String ^ OldPath, System::String ^ NewPath);" />
      <MemberSignature Language="F#" Value="static member Rename : string * string -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Rename (OldPath, NewPath)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="OldPath" Type="System.String" />
        <Parameter Name="NewPath" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="OldPath">
          <span data-ttu-id="02db3-2607">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-2607">Required.</span>
          </span>
          <span data-ttu-id="02db3-2608">
            <see langword="String" /> expression that specifies the existing file name and location.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-2608">
              <see langword="String" /> expression that specifies the existing file name and location.</span>
          </span>
          <span data-ttu-id="02db3-2609">
            <c>OldPath</c> may include the directory, and drive, of the file.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-2609">
              <c>OldPath</c> may include the directory, and drive, of the file.</span>
          </span>
        </param>
        <param name="NewPath">
          <span data-ttu-id="02db3-2610">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-2610">Required.</span>
          </span>
          <span data-ttu-id="02db3-2611">
            <see langword="String" /> expression that specifies the new file name and location.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-2611">
              <see langword="String" /> expression that specifies the new file name and location.</span>
          </span>
          <span data-ttu-id="02db3-2612">
            <c>NewPath</c> may include directory and drive of the destination location.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-2612">
              <c>NewPath</c> may include directory and drive of the destination location.</span>
          </span>
          <span data-ttu-id="02db3-2613">The file name specified by <c>NewPath</c> cannot already exist.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-2613">The file name specified by <c>NewPath</c> cannot already exist.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="02db3-2614">Renames a disk file or directory.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-2614">Renames a disk file or directory.</span>
          </span>
          <span data-ttu-id="02db3-2615">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Rename" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-2615">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Rename" />.</span>
          </span>
          <span data-ttu-id="02db3-2616">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-2616">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="02db3-2617">El`Rename` función cambia el nombre de un archivo y lo mueve a un directorio diferente, si es necesario.</span><span class="sxs-lookup"><span data-stu-id="02db3-2617">The`Rename` function renames a file and moves it to a different directory, if it is required.</span></span> <span data-ttu-id="02db3-2618">El `Rename` función puede mover un archivo a través de unidades, pero solo puede cambiar el nombre un directorio existente cuando ambos `NewPath` y `OldPath` se encuentran en la misma unidad.</span><span class="sxs-lookup"><span data-stu-id="02db3-2618">The `Rename` function can move a file across drives, but it can only rename an existing directory when both `NewPath` and `OldPath` are located on the same drive.</span></span> <span data-ttu-id="02db3-2619">`Rename` no se puede crear un nuevo archivo o directorio.</span><span class="sxs-lookup"><span data-stu-id="02db3-2619">`Rename` cannot create a new file or directory.</span></span>  
  
 <span data-ttu-id="02db3-2620">Mediante el `Rename` función en un archivo abierto genera un error.</span><span class="sxs-lookup"><span data-stu-id="02db3-2620">Using the `Rename` function on an open file produces an error.</span></span> <span data-ttu-id="02db3-2621">Debe cerrar un archivo abierto antes de cambiarle el nombre.</span><span class="sxs-lookup"><span data-stu-id="02db3-2621">You must close an open file before renaming it.</span></span> <span data-ttu-id="02db3-2622">`Rename` argumentos no pueden incluir varios caracteres (\*) y comodines de carácter único (?).</span><span class="sxs-lookup"><span data-stu-id="02db3-2622">`Rename` arguments cannot include multiple-character (\*) and single-character (?) wildcards.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="02db3-2623">Cuando se usa `Rename` para copiar un archivo desde una ubicación no protegida en una ubicación protegida, el archivo conserva los derechos menos restringidos.</span><span class="sxs-lookup"><span data-stu-id="02db3-2623">When using `Rename` to copy a file from an unprotected location to a protected location, the file retains the less restricted rights.</span></span> <span data-ttu-id="02db3-2624">Compruebe para asegurarse de que no presentan un posible riesgo de seguridad.</span><span class="sxs-lookup"><span data-stu-id="02db3-2624">Check to make sure that you are not introducing a possible security risk.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="02db3-2625">Este ejemplo se usa el `Rename` función para cambiar el nombre de un archivo.</span><span class="sxs-lookup"><span data-stu-id="02db3-2625">This example uses the `Rename` function to rename a file.</span></span> <span data-ttu-id="02db3-2626">Para fines de este ejemplo, suponga que los directorios especificados ya existen.</span><span class="sxs-lookup"><span data-stu-id="02db3-2626">For purposes of this example, assume that the directories that are specified already exist.</span></span>  
  
 [!code-vb[VbVbalrCatRef#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#30)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="02db3-2627">Path is invalid.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-2627">Path is invalid.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.FileNotFoundException">
          <span data-ttu-id="02db3-2628">
            <paramref name="OldPath" /> file does not exist.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-2628">
              <paramref name="OldPath" /> file does not exist.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="02db3-2629">Cannot rename to different device.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-2629">Cannot rename to different device.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Kill(System.String)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.FileNotFoundException" />
        <altmember cref="T:System.IO.IOException" />
      </Docs>
    </Member>
    <Member MemberName="Reset">
      <MemberSignature Language="C#" Value="public static void Reset ();" />
      <MemberSignature Language="ILAsm" Value=".method public static void Reset() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Reset" />
      <MemberSignature Language="VB.NET" Value="Public Sub Reset ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Reset();" />
      <MemberSignature Language="F#" Value="static member Reset : unit -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Reset " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="02db3-2630">Closes all disk files opened by using the <see langword="FileOpen" /> function.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-2630">Closes all disk files opened by using the <see langword="FileOpen" /> function.</span>
          </span>
          <span data-ttu-id="02db3-2631">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Reset" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-2631">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Reset" />.</span>
          </span>
          <span data-ttu-id="02db3-2632">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-2632">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="02db3-2633">El `Reset` función cierra todos los archivos activos abiertos por el `FileOpen` de función y tiene la misma función que `FileClose()` sin ningún parámetro.</span><span class="sxs-lookup"><span data-stu-id="02db3-2633">The `Reset` function closes all active files opened by the `FileOpen` function and has the same function as `FileClose()` without any parameters.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="02db3-2634">Este ejemplo se usa el `Reset` función para cerrar todos los archivos abiertos y escribir el contenido de todos los búferes de archivo en el disco.</span><span class="sxs-lookup"><span data-stu-id="02db3-2634">This example uses the `Reset` function to close all open files and write the contents of all file buffers to disk.</span></span> <span data-ttu-id="02db3-2635">Tenga en cuenta el uso de la `Object` variable `FileNumber` como una cadena y un número.</span><span class="sxs-lookup"><span data-stu-id="02db3-2635">Note the use of the `Object` variable `FileNumber` as both a string and a number.</span></span>  
  
 [!code-vb[VbVbalrCatRef#12](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#12)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileClose(System.Int32[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="RmDir">
      <MemberSignature Language="C#" Value="public static void RmDir (string Path);" />
      <MemberSignature Language="ILAsm" Value=".method public static void RmDir(string Path) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.RmDir(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RmDir (Path As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void RmDir(System::String ^ Path);" />
      <MemberSignature Language="F#" Value="static member RmDir : string -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.RmDir Path" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="Path">
          <span data-ttu-id="02db3-2636">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-2636">Required.</span>
          </span>
          <span data-ttu-id="02db3-2637">
            <see langword="String" /> expression that identifies the directory or folder to be removed.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-2637">
              <see langword="String" /> expression that identifies the directory or folder to be removed.</span>
          </span>
          <span data-ttu-id="02db3-2638">
            <c>Path</c> can include the drive.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-2638">
              <c>Path</c> can include the drive.</span>
          </span>
          <span data-ttu-id="02db3-2639">If no drive is specified, <see langword="RmDir" /> removes the directory on the current drive.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-2639">If no drive is specified, <see langword="RmDir" /> removes the directory on the current drive.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="02db3-2640">Removes an existing directory.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-2640">Removes an existing directory.</span>
          </span>
          <span data-ttu-id="02db3-2641">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="RmDir" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-2641">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="RmDir" />.</span>
          </span>
          <span data-ttu-id="02db3-2642">For more information, see <see cref="Overload:Microsoft.VisualBasic.FileIO.FileSystem.DeleteDirectory" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-2642">For more information, see <see cref="Overload:Microsoft.VisualBasic.FileIO.FileSystem.DeleteDirectory" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="02db3-2643">Se produce un error si intenta usar `RmDir` en un directorio que contiene los archivos.</span><span class="sxs-lookup"><span data-stu-id="02db3-2643">An error occurs if you try to use `RmDir` on a directory that contains files.</span></span> <span data-ttu-id="02db3-2644">Use el `Kill` función para eliminar todos los archivos antes de intentar quitar un directorio.</span><span class="sxs-lookup"><span data-stu-id="02db3-2644">Use the `Kill` function to delete all files before you try to remove a directory.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="02db3-2645">Este ejemplo se usa el `RmDir` function para quitar un directorio existente.</span><span class="sxs-lookup"><span data-stu-id="02db3-2645">This example uses the `RmDir` function to remove an existing directory.</span></span>  
  
 [!code-vb[VbVbalrCatRef#31](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#31)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="02db3-2646">
            <paramref name="Path" /> is not specified or is empty.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-2646">
              <paramref name="Path" /> is not specified or is empty.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="02db3-2647">Target directory contains files.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-2647">Target directory contains files.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.FileNotFoundException">
          <span data-ttu-id="02db3-2648">Directory does not exist.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-2648">Directory does not exist.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.ChDir(System.String)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.CurDir" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Kill(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.MkDir(System.String)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
        <altmember cref="T:System.IO.FileNotFoundException" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Seek">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="02db3-2649">Returns a <see langword="Long" /> specifying the current read/write position in a file opened by using the <see langword="FileOpen" /> function, or sets the position for the next read/write operation in a file opened by using the <see langword="FileOpen" /> function.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-2649">Returns a <see langword="Long" /> specifying the current read/write position in a file opened by using the <see langword="FileOpen" /> function, or sets the position for the next read/write operation in a file opened by using the <see langword="FileOpen" /> function.</span>
          </span>
          <span data-ttu-id="02db3-2650">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Seek" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-2650">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Seek" />.</span>
          </span>
          <span data-ttu-id="02db3-2651">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-2651">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Seek">
      <MemberSignature Language="C#" Value="public static long Seek (int FileNumber);" />
      <MemberSignature Language="ILAsm" Value=".method public static int64 Seek(int32 FileNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Seek(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Seek (FileNumber As Integer) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static long Seek(int FileNumber);" />
      <MemberSignature Language="F#" Value="static member Seek : int -&gt; int64" Usage="Microsoft.VisualBasic.FileSystem.Seek FileNumber" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="02db3-2652">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-2652">Required.</span>
          </span>
          <span data-ttu-id="02db3-2653">An <see langword="Integer" /> that contains a valid file number.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-2653">An <see langword="Integer" /> that contains a valid file number.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="02db3-2654">Returns a <see langword="Long" /> specifying the current read/write position in a file opened by using the <see langword="FileOpen" /> function, or sets the position for the next read/write operation in a file opened by using the <see langword="FileOpen" /> function.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-2654">Returns a <see langword="Long" /> specifying the current read/write position in a file opened by using the <see langword="FileOpen" /> function, or sets the position for the next read/write operation in a file opened by using the <see langword="FileOpen" /> function.</span>
          </span>
          <span data-ttu-id="02db3-2655">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Seek" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-2655">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Seek" />.</span>
          </span>
          <span data-ttu-id="02db3-2656">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-2656">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="02db3-2657">Returns a <see langword="Long" /> specifying the current read/write position in a file opened by using the <see langword="FileOpen" /> function, or sets the position for the next read/write operation in a file opened by using the <see langword="FileOpen" /> function.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-2657">Returns a <see langword="Long" /> specifying the current read/write position in a file opened by using the <see langword="FileOpen" /> function, or sets the position for the next read/write operation in a file opened by using the <see langword="FileOpen" /> function.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="02db3-2658">`Seek` Devuelve un valor entre 1 y 2.147.483.647 (equivalente a 2 ^ 31-1), ambos inclusive.</span><span class="sxs-lookup"><span data-stu-id="02db3-2658">`Seek` returns a value between 1 and 2,147,483,647 (equivalent to 2^31 – 1), inclusive.</span></span>  
  
 <span data-ttu-id="02db3-2659">El siguiente describe los valores devueltos para cada modo de acceso de archivo:</span><span class="sxs-lookup"><span data-stu-id="02db3-2659">The following describes the return values for each file access mode:</span></span>  
  
|<span data-ttu-id="02db3-2660">Modo</span><span class="sxs-lookup"><span data-stu-id="02db3-2660">Mode</span></span>|<span data-ttu-id="02db3-2661">Valor devuelto</span><span class="sxs-lookup"><span data-stu-id="02db3-2661">Return Value</span></span>|  
|-|-|  
|`Random`|<span data-ttu-id="02db3-2662">Número del siguiente registro leídos o escritos</span><span class="sxs-lookup"><span data-stu-id="02db3-2662">Number of the next record read or written</span></span>|  
|<span data-ttu-id="02db3-2663">`Binary`, `Input`, `Output`, `Append`</span><span class="sxs-lookup"><span data-stu-id="02db3-2663">`Binary`, `Input`, `Output`, `Append`</span></span>|<span data-ttu-id="02db3-2664">Posición del byte en el que se produce la siguiente operación.</span><span class="sxs-lookup"><span data-stu-id="02db3-2664">Byte position at which the next operation occurs.</span></span> <span data-ttu-id="02db3-2665">Es el primer byte de un archivo en la posición 1, el segundo byte está en la posición 2 y así sucesivamente.</span><span class="sxs-lookup"><span data-stu-id="02db3-2665">The first byte in a file is at position 1, the second byte is at position 2, and so on.</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="02db3-2666">Este ejemplo se usa el `Seek` función para devolver la posición actual del archivo.</span><span class="sxs-lookup"><span data-stu-id="02db3-2666">This example uses the `Seek` function to return the current file position.</span></span> <span data-ttu-id="02db3-2667">En el ejemplo se da por supuesto `TestFile` es un archivo que contiene registros de la estructura `Record`.</span><span class="sxs-lookup"><span data-stu-id="02db3-2667">The example assumes `TestFile` is a file that contains records of the structure `Record`.</span></span>  
  
 [!code-vb[VbVbalrCatRef#47](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#47)]  
  
 <span data-ttu-id="02db3-2668">De los archivos abiertos en `Random` modo, `Seek` devuelve el número de registro siguiente.</span><span class="sxs-lookup"><span data-stu-id="02db3-2668">For files opened in `Random` mode, `Seek` returns the number of next record.</span></span>  
  
 [!code-vb[VbVbalrCatRef#48](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#48)]  
  
 <span data-ttu-id="02db3-2669">Para los archivos abiertos en modos distintos de `Random` modo, `Seek` devuelve la posición de byte en el que se produce la siguiente operación.</span><span class="sxs-lookup"><span data-stu-id="02db3-2669">For files opened in modes other than `Random` mode, `Seek` returns the byte position at which the next operation occurs.</span></span> <span data-ttu-id="02db3-2670">Suponga `TestFile` es un archivo que contiene varias líneas de texto.</span><span class="sxs-lookup"><span data-stu-id="02db3-2670">Assume `TestFile` is a file that contains several lines of text.</span></span>  
  
 [!code-vb[VbVbalrCatRef#49](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#49)]  
  
 <span data-ttu-id="02db3-2671">Este ejemplo se usa el `Seek` función para establecer la posición de la siguiente operación de lectura o escritura en un archivo.</span><span class="sxs-lookup"><span data-stu-id="02db3-2671">This example uses the `Seek` function to set the position for the next read or write in a file.</span></span>  
  
 <span data-ttu-id="02db3-2672">Para los archivos abiertos en modos distintos de `Random` modo, `Seek` establece la posición de byte en el que se produce la siguiente operación.</span><span class="sxs-lookup"><span data-stu-id="02db3-2672">For files opened in modes other than `Random` mode, `Seek` sets the byte position at which the next operation occurs.</span></span> <span data-ttu-id="02db3-2673">Suponga `TestFile` es un archivo que contiene varias líneas de texto.</span><span class="sxs-lookup"><span data-stu-id="02db3-2673">Assume `TestFile` is a file that contains several lines of text.</span></span>  
  
 [!code-vb[VbVbalrCatRef#52](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#52)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="02db3-2674">File mode is invalid.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-2674">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Loc(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="T:System.IO.IOException" />
      </Docs>
    </Member>
    <Member MemberName="Seek">
      <MemberSignature Language="C#" Value="public static void Seek (int FileNumber, long Position);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Seek(int32 FileNumber, int64 Position) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Seek(System.Int32,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Seek (FileNumber As Integer, Position As Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Seek(int FileNumber, long Position);" />
      <MemberSignature Language="F#" Value="static member Seek : int * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Seek (FileNumber, Position)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Position" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="02db3-2675">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-2675">Required.</span>
          </span>
          <span data-ttu-id="02db3-2676">An <see langword="Integer" /> that contains a valid file number.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-2676">An <see langword="Integer" /> that contains a valid file number.</span>
          </span>
        </param>
        <param name="Position">
          <span data-ttu-id="02db3-2677">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-2677">Required.</span>
          </span>
          <span data-ttu-id="02db3-2678">Number in the range 1–2,147,483,647, inclusive, that indicates where the next read/write operation should occur.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-2678">Number in the range 1–2,147,483,647, inclusive, that indicates where the next read/write operation should occur.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="02db3-2679">Returns a <see langword="Long" /> specifying the current read/write position in a file opened by using the <see langword="FileOpen" /> function, or sets the position for the next read/write operation in a file opened by using the <see langword="FileOpen" /> function.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-2679">Returns a <see langword="Long" /> specifying the current read/write position in a file opened by using the <see langword="FileOpen" /> function, or sets the position for the next read/write operation in a file opened by using the <see langword="FileOpen" /> function.</span>
          </span>
          <span data-ttu-id="02db3-2680">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Seek" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-2680">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Seek" />.</span>
          </span>
          <span data-ttu-id="02db3-2681">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-2681">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="02db3-2682">`Seek` Devuelve un valor entre 1 y 2.147.483.647 (equivalente a 2 ^ 31-1), ambos inclusive.</span><span class="sxs-lookup"><span data-stu-id="02db3-2682">`Seek` returns a value between 1 and 2,147,483,647 (equivalent to 2^31 – 1), inclusive.</span></span>  
  
 <span data-ttu-id="02db3-2683">El siguiente describe los valores devueltos para cada modo de acceso de archivo:</span><span class="sxs-lookup"><span data-stu-id="02db3-2683">The following describes the return values for each file access mode:</span></span>  
  
|<span data-ttu-id="02db3-2684">Modo</span><span class="sxs-lookup"><span data-stu-id="02db3-2684">Mode</span></span>|<span data-ttu-id="02db3-2685">Valor devuelto</span><span class="sxs-lookup"><span data-stu-id="02db3-2685">Return Value</span></span>|  
|-|-|  
|`Random`|<span data-ttu-id="02db3-2686">Número del siguiente registro leídos o escritos</span><span class="sxs-lookup"><span data-stu-id="02db3-2686">Number of the next record read or written</span></span>|  
|<span data-ttu-id="02db3-2687">`Binary`, `Input`, `Output`, `Append`</span><span class="sxs-lookup"><span data-stu-id="02db3-2687">`Binary`, `Input`, `Output`, `Append`</span></span>|<span data-ttu-id="02db3-2688">Posición del byte en el que se produce la siguiente operación.</span><span class="sxs-lookup"><span data-stu-id="02db3-2688">Byte position at which the next operation occurs.</span></span> <span data-ttu-id="02db3-2689">Es el primer byte de un archivo en la posición 1, el segundo byte está en la posición 2 y así sucesivamente.</span><span class="sxs-lookup"><span data-stu-id="02db3-2689">The first byte in a file is at position 1, the second byte is at position 2, and so on.</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="02db3-2690">Este ejemplo se usa el `Seek` función para devolver la posición actual del archivo.</span><span class="sxs-lookup"><span data-stu-id="02db3-2690">This example uses the `Seek` function to return the current file position.</span></span> <span data-ttu-id="02db3-2691">En el ejemplo se da por supuesto `TestFile` es un archivo que contiene registros de la estructura `Record`.</span><span class="sxs-lookup"><span data-stu-id="02db3-2691">The example assumes `TestFile` is a file that contains records of the structure `Record`.</span></span>  
  
 [!code-vb[VbVbalrCatRef#47](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#47)]  
  
 <span data-ttu-id="02db3-2692">De los archivos abiertos en `Random` modo, `Seek` devuelve el número de registro siguiente.</span><span class="sxs-lookup"><span data-stu-id="02db3-2692">For files opened in `Random` mode, `Seek` returns the number of next record.</span></span>  
  
 [!code-vb[VbVbalrCatRef#48](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#48)]  
  
 <span data-ttu-id="02db3-2693">Para los archivos abiertos en modos distintos de `Random` modo, `Seek` devuelve la posición de byte en el que se produce la siguiente operación.</span><span class="sxs-lookup"><span data-stu-id="02db3-2693">For files opened in modes other than `Random` mode, `Seek` returns the byte position at which the next operation occurs.</span></span> <span data-ttu-id="02db3-2694">Suponga `TestFile` es un archivo que contiene varias líneas de texto.</span><span class="sxs-lookup"><span data-stu-id="02db3-2694">Assume `TestFile` is a file that contains several lines of text.</span></span>  
  
 [!code-vb[VbVbalrCatRef#49](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#49)]  
  
 <span data-ttu-id="02db3-2695">Este ejemplo se usa el `Seek` función para establecer la posición de la siguiente operación de lectura o escritura en un archivo.</span><span class="sxs-lookup"><span data-stu-id="02db3-2695">This example uses the `Seek` function to set the position for the next read or write in a file.</span></span>  
  
 <span data-ttu-id="02db3-2696">Para los archivos abiertos en modos distintos de `Random` modo, `Seek` establece la posición de byte en el que se produce la siguiente operación.</span><span class="sxs-lookup"><span data-stu-id="02db3-2696">For files opened in modes other than `Random` mode, `Seek` sets the byte position at which the next operation occurs.</span></span> <span data-ttu-id="02db3-2697">Suponga `TestFile` es un archivo que contiene varias líneas de texto.</span><span class="sxs-lookup"><span data-stu-id="02db3-2697">Assume `TestFile` is a file that contains several lines of text.</span></span>  
  
 [!code-vb[VbVbalrCatRef#52](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#52)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="02db3-2698">File mode is invalid.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-2698">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Loc(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="T:System.IO.IOException" />
      </Docs>
    </Member>
    <Member MemberName="SetAttr">
      <MemberSignature Language="C#" Value="public static void SetAttr (string PathName, Microsoft.VisualBasic.FileAttribute Attributes);" />
      <MemberSignature Language="ILAsm" Value=".method public static void SetAttr(string PathName, valuetype Microsoft.VisualBasic.FileAttribute Attributes) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.SetAttr(System.String,Microsoft.VisualBasic.FileAttribute)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetAttr (PathName As String, Attributes As FileAttribute)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void SetAttr(System::String ^ PathName, Microsoft::VisualBasic::FileAttribute Attributes);" />
      <MemberSignature Language="F#" Value="static member SetAttr : string * Microsoft.VisualBasic.FileAttribute -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.SetAttr (PathName, Attributes)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="PathName" Type="System.String" />
        <Parameter Name="Attributes" Type="Microsoft.VisualBasic.FileAttribute" />
      </Parameters>
      <Docs>
        <param name="PathName">
          <span data-ttu-id="02db3-2699">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-2699">Required.</span>
          </span>
          <span data-ttu-id="02db3-2700">
            <see langword="String" /> expression that specifies a file name.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-2700">
              <see langword="String" /> expression that specifies a file name.</span>
          </span>
          <span data-ttu-id="02db3-2701">
            <c>PathName</c> can include directory or folder, and drive.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-2701">
              <c>PathName</c> can include directory or folder, and drive.</span>
          </span>
        </param>
        <param name="Attributes">
          <span data-ttu-id="02db3-2702">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-2702">Required.</span>
          </span>
          <span data-ttu-id="02db3-2703">Constant or numeric expression, whose sum specifies file attributes.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-2703">Constant or numeric expression, whose sum specifies file attributes.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="02db3-2704">Sets attribute information for a file.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-2704">Sets attribute information for a file.</span>
          </span>
          <span data-ttu-id="02db3-2705">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="SetAttr" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-2705">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="SetAttr" />.</span>
          </span>
          <span data-ttu-id="02db3-2706">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-2706">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="02db3-2707">Se produce un error de tiempo de ejecución si se intenta establecer los atributos de un archivo abierto.</span><span class="sxs-lookup"><span data-stu-id="02db3-2707">A run-time error occurs if you try to set the attributes of an open file.</span></span>  
  
 <span data-ttu-id="02db3-2708">El `Attributes` valores de enumeración del argumento son los siguientes:</span><span class="sxs-lookup"><span data-stu-id="02db3-2708">The `Attributes` argument enumeration values are as follows:</span></span>  
  
|<span data-ttu-id="02db3-2709">Valor</span><span class="sxs-lookup"><span data-stu-id="02db3-2709">Value</span></span>|<span data-ttu-id="02db3-2710">Constante</span><span class="sxs-lookup"><span data-stu-id="02db3-2710">Constant</span></span>|<span data-ttu-id="02db3-2711">Descripción</span><span class="sxs-lookup"><span data-stu-id="02db3-2711">Description</span></span>|  
|-|-|-|  
|`Normal`|`vbNormal`|<span data-ttu-id="02db3-2712">Normal (predeterminado).</span><span class="sxs-lookup"><span data-stu-id="02db3-2712">Normal (default).</span></span>|  
|`ReadOnly`|`vbReadOnly`|<span data-ttu-id="02db3-2713">Sólo lectura.</span><span class="sxs-lookup"><span data-stu-id="02db3-2713">Read-only.</span></span>|  
|`Hidden`|`vbHidden`|<span data-ttu-id="02db3-2714">Oculto.</span><span class="sxs-lookup"><span data-stu-id="02db3-2714">Hidden.</span></span>|  
|`System`|`vbSystem`|<span data-ttu-id="02db3-2715">Archivo de sistema.</span><span class="sxs-lookup"><span data-stu-id="02db3-2715">System file.</span></span>|  
|`Volume`|`vbVolume`|<span data-ttu-id="02db3-2716">Etiqueta de volumen</span><span class="sxs-lookup"><span data-stu-id="02db3-2716">Volume label</span></span>|  
|`Directory`|`vbDirectory`|<span data-ttu-id="02db3-2717">Directorio o carpeta.</span><span class="sxs-lookup"><span data-stu-id="02db3-2717">Directory or folder.</span></span>|  
|`Archive`|`vbArchive`|<span data-ttu-id="02db3-2718">Archivo ha cambiado desde la última copia de seguridad.</span><span class="sxs-lookup"><span data-stu-id="02db3-2718">File has changed since last backup.</span></span>|  
|`Alias`|`vbAlias`|<span data-ttu-id="02db3-2719">Archivo tiene un nombre diferente.</span><span class="sxs-lookup"><span data-stu-id="02db3-2719">File has a different name.</span></span>|  
  
> [!NOTE]
>  <span data-ttu-id="02db3-2720">El lenguaje Visual Basic especifica estas enumeraciones.</span><span class="sxs-lookup"><span data-stu-id="02db3-2720">These enumerations are specified by the Visual Basic language.</span></span> <span data-ttu-id="02db3-2721">Los nombres se pueden usar en cualquier parte del código en lugar de los valores reales.</span><span class="sxs-lookup"><span data-stu-id="02db3-2721">The names can be used anywhere in your code instead of the actual values.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="02db3-2722">Este ejemplo se usa el `SetAttr` función para establecer los atributos de un archivo.</span><span class="sxs-lookup"><span data-stu-id="02db3-2722">This example uses the `SetAttr` function to set attributes for a file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#14](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#14)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="02db3-2723">
            <paramref name="Attribute" /> type is invalid.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-2723">
              <paramref name="Attribute" /> type is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileAttr(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.GetAttr(System.String)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:Microsoft.VisualBasic.FileAttribute" />
        <altmember cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />
      </Docs>
    </Member>
    <Member MemberName="SPC">
      <MemberSignature Language="C#" Value="public static Microsoft.VisualBasic.SpcInfo SPC (short Count);" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype Microsoft.VisualBasic.SpcInfo SPC(int16 Count) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.SPC(System.Int16)" />
      <MemberSignature Language="VB.NET" Value="Public Function SPC (Count As Short) As SpcInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::VisualBasic::SpcInfo SPC(short Count);" />
      <MemberSignature Language="F#" Value="static member SPC : int16 -&gt; Microsoft.VisualBasic.SpcInfo" Usage="Microsoft.VisualBasic.FileSystem.SPC Count" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.VisualBasic.SpcInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Count" Type="System.Int16" />
      </Parameters>
      <Docs>
        <param name="Count">
          <span data-ttu-id="02db3-2724">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-2724">Required.</span>
          </span>
          <span data-ttu-id="02db3-2725">The number of spaces to insert before displaying or printing the next expression in a list.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-2725">The number of spaces to insert before displaying or printing the next expression in a list.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="02db3-2726">Used with the <see langword="Print" /> or <see langword="PrintLine" /> function to position output.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-2726">Used with the <see langword="Print" /> or <see langword="PrintLine" /> function to position output.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="02db3-2727">Used with the <see langword="Print" /> or <see langword="PrintLine" /> function to position output.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-2727">Used with the <see langword="Print" /> or <see langword="PrintLine" /> function to position output.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="02db3-2728">Si `Count` es menor que el ancho de línea de salida, la siguiente posición de impresión inmediatamente sigue el número de espacios impresos.</span><span class="sxs-lookup"><span data-stu-id="02db3-2728">If `Count` is less than the output line width, the next print position immediately follows the number of spaces printed.</span></span> <span data-ttu-id="02db3-2729">Si`Count` es mayor que el ancho de línea de salida, `SPC` calcula la siguiente posición de impresión mediante la fórmula:</span><span class="sxs-lookup"><span data-stu-id="02db3-2729">If`Count` is greater than the output line width, `SPC` calculates the next print position using the formula:</span></span>  
  
 <span data-ttu-id="02db3-2730">`currentprintposition`(+(`Count``Mod``width`))</span><span class="sxs-lookup"><span data-stu-id="02db3-2730">`currentprintposition`(+(`Count``Mod``width`))</span></span>  
  
 <span data-ttu-id="02db3-2731">Por ejemplo, si la posición de impresión actual es 24, el ancho de línea de salida es 80 y se especifica `SPC(90)`, la próxima impresión comenzará en la posición 34 (posición de impresión actual + el resto de 90/80).</span><span class="sxs-lookup"><span data-stu-id="02db3-2731">For example, if the current print position is 24, the output line width is 80, and you specify `SPC(90)`, the next print will start at position 34 (current print position + the remainder of 90/80).</span></span> <span data-ttu-id="02db3-2732">Si la diferencia entre la actual posición de impresión y el ancho de línea de salida es menor que `Count` (o `Count` `Mod` *ancho*), el `SPC` función salta al principio de la línea siguiente y genera espacios que equivalen a `Count` – (*ancho* – *posiciónDeImpresiónActual*).</span><span class="sxs-lookup"><span data-stu-id="02db3-2732">If the difference between the current print position and the output line width is less than `Count` (or `Count` `Mod` *width*), the `SPC` function skips to the start of the next line and generates spaces equal to `Count` – (*width* – *currentprintposition*).</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="02db3-2733">Asegúrese de que las columnas tabulares sean lo suficientemente ancha para permitir letras anchas.</span><span class="sxs-lookup"><span data-stu-id="02db3-2733">Make sure your tabular columns are wide enough to allow for wide letters.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="02db3-2734">Este ejemplo se usa el `SPC` para colocar el resultado en un archivo y, en función de la **salida** ventana.</span><span class="sxs-lookup"><span data-stu-id="02db3-2734">This example uses the `SPC` function to position output in a file and in the **Output** window.</span></span>  
  
 [!code-vb[VbVbalrCatRef#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Space(System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.TAB" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileWidth(System.Int32,System.Int32)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="TAB">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="02db3-2735">Used with the <see langword="Print" /> or <see langword="PrintLine" /> functions to position output.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-2735">Used with the <see langword="Print" /> or <see langword="PrintLine" /> functions to position output.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="TAB">
      <MemberSignature Language="C#" Value="public static Microsoft.VisualBasic.TabInfo TAB ();" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype Microsoft.VisualBasic.TabInfo TAB() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.TAB" />
      <MemberSignature Language="VB.NET" Value="Public Function TAB () As TabInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::VisualBasic::TabInfo TAB();" />
      <MemberSignature Language="F#" Value="static member TAB : unit -&gt; Microsoft.VisualBasic.TabInfo" Usage="Microsoft.VisualBasic.FileSystem.TAB " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.VisualBasic.TabInfo</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="02db3-2736">Used with the <see langword="Print" /> or <see langword="PrintLine" /> functions to position output.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-2736">Used with the <see langword="Print" /> or <see langword="PrintLine" /> functions to position output.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="02db3-2737">Used with the <see langword="Print" /> or <see langword="PrintLine" /> functions to position output.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-2737">Used with the <see langword="Print" /> or <see langword="PrintLine" /> functions to position output.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="02db3-2738">Si es mayor que la actual posición de impresión en la línea actual `Column`, `TAB` salta al igual que el valor de la columna `Column` en la siguiente línea de salida.</span><span class="sxs-lookup"><span data-stu-id="02db3-2738">If the current print position on the current line is larger than `Column`, `TAB` skips to the column value equal to `Column` on the next output line.</span></span> <span data-ttu-id="02db3-2739">Si `Column` es menor que 1, `TAB` mueve la posición de impresión a la columna 1.</span><span class="sxs-lookup"><span data-stu-id="02db3-2739">If `Column` is less than 1, `TAB` moves the print position to column 1.</span></span> <span data-ttu-id="02db3-2740">Si `Column` es mayor que el ancho de línea de salida, `TAB` calcula la siguiente posición de impresión mediante la fórmula:</span><span class="sxs-lookup"><span data-stu-id="02db3-2740">If `Column` is larger than the output line width, `TAB` calculates the next print position using the formula:</span></span>  
  
 <span data-ttu-id="02db3-2741">Mod ancho de columna</span><span class="sxs-lookup"><span data-stu-id="02db3-2741">Column Mod width</span></span>  
  
 <span data-ttu-id="02db3-2742">Por ejemplo, si *ancho* es 80 y se especifica `TAB(90)`, se iniciará la próxima impresión en la columna 10 (el resto de 90/80).</span><span class="sxs-lookup"><span data-stu-id="02db3-2742">For example, if *width* is 80 and you specify `TAB(90)`, the next print will start at column 10 (the remainder of 90/80).</span></span> <span data-ttu-id="02db3-2743">Si `Column` es menor que la actual posición de impresión, impresión se inicia en la siguiente línea en la posición de impresión calculada.</span><span class="sxs-lookup"><span data-stu-id="02db3-2743">If `Column` is less than the current print position, printing starts on the next line at the calculated print position.</span></span> <span data-ttu-id="02db3-2744">Si la posición de impresión calculada es mayor que la actual posición de impresión, impresión comienza en la posición de impresión en la misma línea.</span><span class="sxs-lookup"><span data-stu-id="02db3-2744">If the calculated print position is larger than the current print position, printing starts at the calculated print position on the same line.</span></span>  
  
 <span data-ttu-id="02db3-2745">La posición de impresión más a la izquierda en una línea de salida es siempre 1.</span><span class="sxs-lookup"><span data-stu-id="02db3-2745">The leftmost print position on an output line is always 1.</span></span> <span data-ttu-id="02db3-2746">Cuando se usa el `Print` o `PrintLine` funciones para imprimir en archivos, la posición de impresión más a la derecha es el ancho actual del archivo de salida, que puede establecer mediante el `FileWidth` función.</span><span class="sxs-lookup"><span data-stu-id="02db3-2746">When you use the `Print` or `PrintLine` functions to print to files, the rightmost print position is the current width of the output file, which you can set using the `FileWidth` function.</span></span>  
  
 <span data-ttu-id="02db3-2747">El `TAB` función también se puede usar con el `WriteLine` función.</span><span class="sxs-lookup"><span data-stu-id="02db3-2747">The `TAB` function can also be used with the `WriteLine` function.</span></span> <span data-ttu-id="02db3-2748">No se puede usar con <xref:System.Diagnostics.Debug.WriteLine%2A?displayProperty=nameWithType> o <xref:System.Console.WriteLine%2A?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="02db3-2748">It cannot be used with <xref:System.Diagnostics.Debug.WriteLine%2A?displayProperty=nameWithType> or <xref:System.Console.WriteLine%2A?displayProperty=nameWithType>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="02db3-2749">Asegúrese de que las columnas tabulares sean lo suficientemente amplio para contener letras anchas.</span><span class="sxs-lookup"><span data-stu-id="02db3-2749">Make sure your tabular columns are wide enough to contain wide letters.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="02db3-2750">Este ejemplo se usa el `TAB` para colocar el resultado en un archivo y, en función de la **salida** ventana.</span><span class="sxs-lookup"><span data-stu-id="02db3-2750">This example uses the `TAB` function to position output in a file and in the **Output** window.</span></span>  
  
 [!code-vb[VbVbalrCatRef#37](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#37)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Space(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.SPC(System.Int16)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileWidth(System.Int32,System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="TAB">
      <MemberSignature Language="C#" Value="public static Microsoft.VisualBasic.TabInfo TAB (short Column);" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype Microsoft.VisualBasic.TabInfo TAB(int16 Column) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.TAB(System.Int16)" />
      <MemberSignature Language="VB.NET" Value="Public Function TAB (Column As Short) As TabInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::VisualBasic::TabInfo TAB(short Column);" />
      <MemberSignature Language="F#" Value="static member TAB : int16 -&gt; Microsoft.VisualBasic.TabInfo" Usage="Microsoft.VisualBasic.FileSystem.TAB Column" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.VisualBasic.TabInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Column" Type="System.Int16" />
      </Parameters>
      <Docs>
        <param name="Column">
          <span data-ttu-id="02db3-2751">Optional.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-2751">Optional.</span>
          </span>
          <span data-ttu-id="02db3-2752">The column number moved to before displaying or printing the next expression in a list.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-2752">The column number moved to before displaying or printing the next expression in a list.</span>
          </span>
          <span data-ttu-id="02db3-2753">If omitted, <see langword="TAB" /> moves the insertion point to the start of the next print zone.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-2753">If omitted, <see langword="TAB" /> moves the insertion point to the start of the next print zone.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="02db3-2754">Used with the <see langword="Print" /> or <see langword="PrintLine" /> functions to position output.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-2754">Used with the <see langword="Print" /> or <see langword="PrintLine" /> functions to position output.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="02db3-2755">Used with the <see langword="Print" /> or <see langword="PrintLine" /> functions to position output.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-2755">Used with the <see langword="Print" /> or <see langword="PrintLine" /> functions to position output.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="02db3-2756">Si es mayor que la actual posición de impresión en la línea actual `Column`, `TAB` salta al igual que el valor de la columna `Column` en la siguiente línea de salida.</span><span class="sxs-lookup"><span data-stu-id="02db3-2756">If the current print position on the current line is greater than `Column`, `TAB` skips to the column value equal to `Column` on the next output line.</span></span> <span data-ttu-id="02db3-2757">Si `Column` es menor que 1, `TAB` mueve la posición de impresión a la columna 1.</span><span class="sxs-lookup"><span data-stu-id="02db3-2757">If `Column` is less than 1, `TAB` moves the print position to column 1.</span></span> <span data-ttu-id="02db3-2758">Si `Column` es mayor que el ancho de línea de salida, `TAB` calcula la siguiente posición de impresión mediante la fórmula:</span><span class="sxs-lookup"><span data-stu-id="02db3-2758">If `Column` is greater than the output line width, `TAB` calculates the next print position using the formula:</span></span>  
  
 <span data-ttu-id="02db3-2759">Mod ancho de columna</span><span class="sxs-lookup"><span data-stu-id="02db3-2759">Column Mod width</span></span>  
  
 <span data-ttu-id="02db3-2760">Por ejemplo, si *ancho* es 80 y se especifica `TAB(90)`, se iniciará la próxima impresión en la columna 10 (el resto de 90/80).</span><span class="sxs-lookup"><span data-stu-id="02db3-2760">For example, if *width* is 80 and you specify `TAB(90)`, the next print will start at column 10 (the remainder of 90/80).</span></span> <span data-ttu-id="02db3-2761">Si `Column` es menor que la actual posición de impresión, impresión se inicia en la siguiente línea en la posición de impresión calculada.</span><span class="sxs-lookup"><span data-stu-id="02db3-2761">If `Column` is less than the current print position, printing starts on the next line at the calculated print position.</span></span> <span data-ttu-id="02db3-2762">Si la posición de impresión calculada es mayor que la actual posición de impresión, impresión comienza en la posición de impresión en la misma línea.</span><span class="sxs-lookup"><span data-stu-id="02db3-2762">If the calculated print position is greater than the current print position, printing starts at the calculated print position on the same line.</span></span>  
  
 <span data-ttu-id="02db3-2763">La posición de impresión más a la izquierda en una línea de salida es siempre 1.</span><span class="sxs-lookup"><span data-stu-id="02db3-2763">The leftmost print position on an output line is always 1.</span></span> <span data-ttu-id="02db3-2764">Cuando se usa el `Print` o `PrintLine` funciones para imprimir en archivos, la posición de impresión más a la derecha es el ancho actual del archivo de salida, que puede establecer mediante el `FileWidth` función.</span><span class="sxs-lookup"><span data-stu-id="02db3-2764">When you use the `Print` or `PrintLine` functions to print to files, the rightmost print position is the current width of the output file, which you can set using the `FileWidth` function.</span></span>  
  
 <span data-ttu-id="02db3-2765">El `TAB` función también se puede usar con el `WriteLine` función.</span><span class="sxs-lookup"><span data-stu-id="02db3-2765">The `TAB` function can also be used with the `WriteLine` function.</span></span> <span data-ttu-id="02db3-2766">No se puede usar con <xref:System.Diagnostics.Debug.WriteLine%2A?displayProperty=nameWithType> o <xref:System.Console.WriteLine%2A?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="02db3-2766">It cannot be used with <xref:System.Diagnostics.Debug.WriteLine%2A?displayProperty=nameWithType> or <xref:System.Console.WriteLine%2A?displayProperty=nameWithType>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="02db3-2767">Asegúrese de que las columnas tabulares sean lo suficientemente amplio para contener letras anchas.</span><span class="sxs-lookup"><span data-stu-id="02db3-2767">Make sure your tabular columns are wide enough to contain wide letters.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="02db3-2768">Este ejemplo se usa el `TAB` para colocar el resultado en un archivo y, en función de la **salida** ventana.</span><span class="sxs-lookup"><span data-stu-id="02db3-2768">This example uses the `TAB` function to position output in a file and in the **Output** window.</span></span>  
  
 [!code-vb[VbVbalrCatRef#37](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#37)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Space(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.SPC(System.Int16)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileWidth(System.Int32,System.Int32)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Unlock">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="02db3-2769">Controls access by other processes to all or part of a file opened by using the <see langword="Open" /> function.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-2769">Controls access by other processes to all or part of a file opened by using the <see langword="Open" /> function.</span>
          </span>
          <span data-ttu-id="02db3-2770">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Lock" /> and <see langword="Unlock" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-2770">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Lock" /> and <see langword="Unlock" />.</span>
          </span>
          <span data-ttu-id="02db3-2771">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-2771">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Unlock">
      <MemberSignature Language="C#" Value="public static void Unlock (int FileNumber);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Unlock(int32 FileNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Unlock(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Unlock (FileNumber As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Unlock(int FileNumber);" />
      <MemberSignature Language="F#" Value="static member Unlock : int -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Unlock FileNumber" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="02db3-2772">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-2772">Required.</span>
          </span>
          <span data-ttu-id="02db3-2773">Any valid file number.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-2773">Any valid file number.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="02db3-2774">Controls access by other processes to all or part of a file opened by using the <see langword="Open" /> function.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-2774">Controls access by other processes to all or part of a file opened by using the <see langword="Open" /> function.</span>
          </span>
          <span data-ttu-id="02db3-2775">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Lock" /> and <see langword="Unlock" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-2775">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Lock" /> and <see langword="Unlock" />.</span>
          </span>
          <span data-ttu-id="02db3-2776">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-2776">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="02db3-2777">El `Lock` y `Unlock` funciones se utilizan en entornos donde varios procesos pueden necesitar acceso al mismo archivo.</span><span class="sxs-lookup"><span data-stu-id="02db3-2777">The `Lock` and `Unlock` functions are used in environments where several processes might need access to the same file.</span></span>  
  
 <span data-ttu-id="02db3-2778">`Lock` y `Unlock` funciones se usan siempre en pares.</span><span class="sxs-lookup"><span data-stu-id="02db3-2778">`Lock` and `Unlock` functions are always used in pairs.</span></span> <span data-ttu-id="02db3-2779">Los argumentos de `Lock` y `Unlock` deben ser idénticos.</span><span class="sxs-lookup"><span data-stu-id="02db3-2779">The arguments to `Lock` and `Unlock` must be identical.</span></span>  
  
 <span data-ttu-id="02db3-2780">Si `Record`, o `FromRecord` y `ToRecord` no son se proporciona, el bloqueo será todo el archivo.</span><span class="sxs-lookup"><span data-stu-id="02db3-2780">If `Record`, or `FromRecord` and `ToRecord` are not supplied, the lock will be for the whole file.</span></span> <span data-ttu-id="02db3-2781">Si `Record` por sí solo se especifica solo el registro estará bloqueado o desbloqueado.</span><span class="sxs-lookup"><span data-stu-id="02db3-2781">If `Record` alone is specified the single record will be locked/unlocked.</span></span>  
  
 <span data-ttu-id="02db3-2782">Si el archivo se ha abierto para entradas o salidas, secuenciales `Lock` y `Unlock` afectan a todo el archivo, independientemente del intervalo especificado por `FromRecord` y`ToRecord`.</span><span class="sxs-lookup"><span data-stu-id="02db3-2782">If the file has been opened for sequential input or output, `Lock` and `Unlock` affect the whole file, regardless of the range specified by `FromRecord` and`ToRecord`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="02db3-2783">En este ejemplo se muestra el uso de la `Lock` y `Unlock` funciones.</span><span class="sxs-lookup"><span data-stu-id="02db3-2783">This example illustrates the use of the `Lock` and `Unlock` functions.</span></span> <span data-ttu-id="02db3-2784">En este ejemplo se da por supuesto que `People.txt` es un archivo que contiene registros de la estructura `Person`.</span><span class="sxs-lookup"><span data-stu-id="02db3-2784">This example assumes that `People.txt` is a file that contains records of the structure `Person`.</span></span>  
  
 [!code-vb[VbVbalrCatRef#13](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#13)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="02db3-2785">File mode is invalid.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-2785">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="T:System.IO.IOException" />
      </Docs>
    </Member>
    <Member MemberName="Unlock">
      <MemberSignature Language="C#" Value="public static void Unlock (int FileNumber, long Record);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Unlock(int32 FileNumber, int64 Record) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Unlock(System.Int32,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Unlock (FileNumber As Integer, Record As Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Unlock(int FileNumber, long Record);" />
      <MemberSignature Language="F#" Value="static member Unlock : int * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Unlock (FileNumber, Record)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Record" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="02db3-2786">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-2786">Required.</span>
          </span>
          <span data-ttu-id="02db3-2787">Any valid file number.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-2787">Any valid file number.</span>
          </span>
        </param>
        <param name="Record">
          <span data-ttu-id="02db3-2788">Optional.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-2788">Optional.</span>
          </span>
          <span data-ttu-id="02db3-2789">Number of the only record or byte to lock or unlock</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-2789">Number of the only record or byte to lock or unlock</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="02db3-2790">Controls access by other processes to all or part of a file opened by using the <see langword="Open" /> function.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-2790">Controls access by other processes to all or part of a file opened by using the <see langword="Open" /> function.</span>
          </span>
          <span data-ttu-id="02db3-2791">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Lock" /> and <see langword="Unlock" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-2791">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Lock" /> and <see langword="Unlock" />.</span>
          </span>
          <span data-ttu-id="02db3-2792">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-2792">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="02db3-2793">El `Lock` y `Unlock` funciones se utilizan en entornos donde varios procesos pueden necesitar acceso al mismo archivo.</span><span class="sxs-lookup"><span data-stu-id="02db3-2793">The `Lock` and `Unlock` functions are used in environments where several processes might need access to the same file.</span></span>  
  
 <span data-ttu-id="02db3-2794">`Lock` y `Unlock` funciones se usan siempre en pares.</span><span class="sxs-lookup"><span data-stu-id="02db3-2794">`Lock` and `Unlock` functions are always used in pairs.</span></span> <span data-ttu-id="02db3-2795">Los argumentos de `Lock` y `Unlock` deben ser idénticos.</span><span class="sxs-lookup"><span data-stu-id="02db3-2795">The arguments to `Lock` and `Unlock` must be identical.</span></span>  
  
 <span data-ttu-id="02db3-2796">Si `Record`, o `FromRecord` y `ToRecord` no son se proporciona, el bloqueo será todo el archivo.</span><span class="sxs-lookup"><span data-stu-id="02db3-2796">If `Record`, or `FromRecord` and `ToRecord` are not supplied, the lock will be for the whole file.</span></span> <span data-ttu-id="02db3-2797">Si `Record` por sí solo se especifica solo el registro estará bloqueado o desbloqueado.</span><span class="sxs-lookup"><span data-stu-id="02db3-2797">If `Record` alone is specified the single record will be locked/unlocked.</span></span>  
  
 <span data-ttu-id="02db3-2798">Si el archivo se ha abierto para entradas o salidas, secuenciales `Lock` y `Unlock` afectan a todo el archivo, independientemente del intervalo especificado por `FromRecord` y`ToRecord`.</span><span class="sxs-lookup"><span data-stu-id="02db3-2798">If the file has been opened for sequential input or output, `Lock` and `Unlock` affect the whole file, regardless of the range specified by `FromRecord` and`ToRecord`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="02db3-2799">En este ejemplo se muestra el uso de la `Lock` y `Unlock` funciones.</span><span class="sxs-lookup"><span data-stu-id="02db3-2799">This example illustrates the use of the `Lock` and `Unlock` functions.</span></span> <span data-ttu-id="02db3-2800">En este ejemplo se da por supuesto que `People.txt` es un archivo que contiene registros de la estructura `Person`.</span><span class="sxs-lookup"><span data-stu-id="02db3-2800">This example assumes that `People.txt` is a file that contains records of the structure `Person`.</span></span>  
  
 [!code-vb[VbVbalrCatRef#13](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#13)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="02db3-2801">File mode is invalid.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-2801">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="T:System.IO.IOException" />
      </Docs>
    </Member>
    <Member MemberName="Unlock">
      <MemberSignature Language="C#" Value="public static void Unlock (int FileNumber, long FromRecord, long ToRecord);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Unlock(int32 FileNumber, int64 FromRecord, int64 ToRecord) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Unlock(System.Int32,System.Int64,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Unlock (FileNumber As Integer, FromRecord As Long, ToRecord As Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Unlock(int FileNumber, long FromRecord, long ToRecord);" />
      <MemberSignature Language="F#" Value="static member Unlock : int * int64 * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Unlock (FileNumber, FromRecord, ToRecord)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="FromRecord" Type="System.Int64" />
        <Parameter Name="ToRecord" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="02db3-2802">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-2802">Required.</span>
          </span>
          <span data-ttu-id="02db3-2803">Any valid file number.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-2803">Any valid file number.</span>
          </span>
        </param>
        <param name="FromRecord">
          <span data-ttu-id="02db3-2804">Optional.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-2804">Optional.</span>
          </span>
          <span data-ttu-id="02db3-2805">Number of the first record or byte to lock or unlock.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-2805">Number of the first record or byte to lock or unlock.</span>
          </span>
        </param>
        <param name="ToRecord">
          <span data-ttu-id="02db3-2806">Optional.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-2806">Optional.</span>
          </span>
          <span data-ttu-id="02db3-2807">Number of the last record or byte to lock or unlock.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-2807">Number of the last record or byte to lock or unlock.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="02db3-2808">Controls access by other processes to all or part of a file opened by using the <see langword="Open" /> function.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-2808">Controls access by other processes to all or part of a file opened by using the <see langword="Open" /> function.</span>
          </span>
          <span data-ttu-id="02db3-2809">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Lock" /> and <see langword="Unlock" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-2809">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Lock" /> and <see langword="Unlock" />.</span>
          </span>
          <span data-ttu-id="02db3-2810">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-2810">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="02db3-2811">El `Lock` y `Unlock` funciones se utilizan en entornos donde varios procesos pueden necesitar acceso al mismo archivo.</span><span class="sxs-lookup"><span data-stu-id="02db3-2811">The `Lock` and `Unlock` functions are used in environments where several processes might need access to the same file.</span></span>  
  
 <span data-ttu-id="02db3-2812">`Lock` y `Unlock` funciones se usan siempre en pares.</span><span class="sxs-lookup"><span data-stu-id="02db3-2812">`Lock` and `Unlock` functions are always used in pairs.</span></span> <span data-ttu-id="02db3-2813">Los argumentos de `Lock` y `Unlock` deben ser idénticos.</span><span class="sxs-lookup"><span data-stu-id="02db3-2813">The arguments to `Lock` and `Unlock` must be identical.</span></span>  
  
 <span data-ttu-id="02db3-2814">Si `Record`, o `FromRecord` y `ToRecord` no son se proporciona, el bloqueo será todo el archivo.</span><span class="sxs-lookup"><span data-stu-id="02db3-2814">If `Record`, or `FromRecord` and `ToRecord` are not supplied, the lock will be for the whole file.</span></span> <span data-ttu-id="02db3-2815">Si `Record` por sí solo se especifica solo el registro estará bloqueado o desbloqueado.</span><span class="sxs-lookup"><span data-stu-id="02db3-2815">If `Record` alone is specified the single record will be locked/unlocked.</span></span>  
  
 <span data-ttu-id="02db3-2816">Si el archivo se ha abierto para entradas o salidas, secuenciales `Lock` y `Unlock` afectan a todo el archivo, independientemente del intervalo especificado por `FromRecord` y`ToRecord`.</span><span class="sxs-lookup"><span data-stu-id="02db3-2816">If the file has been opened for sequential input or output, `Lock` and `Unlock` affect the whole file, regardless of the range specified by `FromRecord` and`ToRecord`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="02db3-2817">En este ejemplo se muestra el uso de la `Lock` y `Unlock` funciones.</span><span class="sxs-lookup"><span data-stu-id="02db3-2817">This example illustrates the use of the `Lock` and `Unlock` functions.</span></span> <span data-ttu-id="02db3-2818">En este ejemplo se da por supuesto que `People.txt` es un archivo que contiene registros de la estructura `Person`.</span><span class="sxs-lookup"><span data-stu-id="02db3-2818">This example assumes that `People.txt` is a file that contains records of the structure `Person`.</span></span>  
  
 [!code-vb[VbVbalrCatRef#13](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#13)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="02db3-2819">File mode is invalid.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-2819">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="T:System.IO.IOException" />
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public static void Write (int FileNumber, params object[] Output);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Write(int32 FileNumber, object[] Output) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub Write (FileNumber As Integer, ParamArray Output As Object())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Write(int FileNumber, ... cli::array &lt;System::Object ^&gt; ^ Output);" />
      <MemberSignature Language="F#" Value="static member Write : int * obj[] -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Write (FileNumber, Output)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Output" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="02db3-2820">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-2820">Required.</span>
          </span>
          <span data-ttu-id="02db3-2821">An <see langword="Integer" /> expression that contains any valid file number.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-2821">An <see langword="Integer" /> expression that contains any valid file number.</span>
          </span>
        </param>
        <param name="Output">
          <span data-ttu-id="02db3-2822">Optional.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-2822">Optional.</span>
          </span>
          <span data-ttu-id="02db3-2823">One or more comma-delimited expressions to write to a file.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-2823">One or more comma-delimited expressions to write to a file.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="02db3-2824">Writes data to a sequential file.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-2824">Writes data to a sequential file.</span>
          </span>
          <span data-ttu-id="02db3-2825">Data written with <see langword="Write" /> is usually read from a file by using <see langword="Input" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-2825">Data written with <see langword="Write" /> is usually read from a file by using <see langword="Input" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="02db3-2826">El `Write` y `WriteLine` funciones se proporcionan por compatibilidad con versiones anteriores y puede afectar al rendimiento.</span><span class="sxs-lookup"><span data-stu-id="02db3-2826">The `Write` and `WriteLine` functions are provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="02db3-2827">Para las aplicaciones que no es heredado, el `My.Computer.FileSystem` objeto proporciona un mejor rendimiento.</span><span class="sxs-lookup"><span data-stu-id="02db3-2827">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="02db3-2828">Para obtener más información, consulte [acceso a archivos con Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span><span class="sxs-lookup"><span data-stu-id="02db3-2828">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="02db3-2829">Si se omite `Output`, se imprime una línea en blanco en el archivo.</span><span class="sxs-lookup"><span data-stu-id="02db3-2829">If you omit `Output`, a blank line is printed to the file.</span></span> <span data-ttu-id="02db3-2830">Varias expresiones se pueden separar con comas.</span><span class="sxs-lookup"><span data-stu-id="02db3-2830">Multiple expressions can be separated with a comma.</span></span>  
  
 <span data-ttu-id="02db3-2831">A diferencia de la `Print` función, el `Write` función inserta comas entre los elementos y las cadenas entre comillas, tal como se escriben en el archivo.</span><span class="sxs-lookup"><span data-stu-id="02db3-2831">Unlike the `Print` function, the `Write` function inserts commas between items and quotation marks around strings as they are written to the file.</span></span> <span data-ttu-id="02db3-2832">No es necesario colocar delimitadores explícitos en la lista.</span><span class="sxs-lookup"><span data-stu-id="02db3-2832">You do not have to put explicit delimiters in the list.</span></span> <span data-ttu-id="02db3-2833">Cuando `Write` se usa para escribir datos en un archivo, solo numérico, `Boolean`, fecha, null, y `Error` se admiten los formatos de datos.</span><span class="sxs-lookup"><span data-stu-id="02db3-2833">When `Write` is used to write data to a file, only numeric, `Boolean`, date, null, and `Error` data formats are supported.</span></span> <span data-ttu-id="02db3-2834">Se siguen los siguientes supuestos universales para los datos siempre puedan leer e interpretan correctamente mediante `Input`, independientemente de la configuración regional:</span><span class="sxs-lookup"><span data-stu-id="02db3-2834">The following universal assumptions are followed so the data can always be read and correctly interpreted using `Input`, regardless of locale:</span></span>  
  
-   <span data-ttu-id="02db3-2835">Datos numéricos siempre se escriben con el punto como separador decimal.</span><span class="sxs-lookup"><span data-stu-id="02db3-2835">Numeric data is always written using the period as the decimal separator.</span></span>  
  
-   <span data-ttu-id="02db3-2836">Para `Boolean` datos, ya sea `#TRUE#` o `#FALSE#` se imprime.</span><span class="sxs-lookup"><span data-stu-id="02db3-2836">For `Boolean` data, either `#TRUE#` or `#FALSE#` is printed.</span></span> <span data-ttu-id="02db3-2837">El `True` y `False` palabras clave no se traducen, independientemente de la configuración regional.</span><span class="sxs-lookup"><span data-stu-id="02db3-2837">The `True` and `False` keywords are not translated, regardless of locale.</span></span>  
  
-   <span data-ttu-id="02db3-2838">Datos de fecha se escriben en el archivo con el formato de fecha universal.</span><span class="sxs-lookup"><span data-stu-id="02db3-2838">Date data is written to the file using the universal date format.</span></span> <span data-ttu-id="02db3-2839">Cuando la fecha o el componente de hora falta o es cero, solo la parte proporcionada se escribe en el archivo.</span><span class="sxs-lookup"><span data-stu-id="02db3-2839">When either the date or the time component is missing or zero, only the part provided is written to the file.</span></span>  
  
-   <span data-ttu-id="02db3-2840">Si se escribirá nada en el archivo `Output` datos están vacíos.</span><span class="sxs-lookup"><span data-stu-id="02db3-2840">Nothing is written to the file if `Output` data is empty.</span></span> <span data-ttu-id="02db3-2841">Sin embargo, para datos nulos, `#NULL#` se escribe.</span><span class="sxs-lookup"><span data-stu-id="02db3-2841">However, for null data, `#NULL#` is written.</span></span>  
  
-   <span data-ttu-id="02db3-2842">Para `Error` la salida de datos, aparece como `#ERROR errorcode#`.</span><span class="sxs-lookup"><span data-stu-id="02db3-2842">For `Error` data, the output appears as `#ERROR errorcode#`.</span></span> <span data-ttu-id="02db3-2843">El `Error` palabra clave no se traduce, independientemente de la configuración regional.</span><span class="sxs-lookup"><span data-stu-id="02db3-2843">The `Error` keyword is not translated, regardless of locale.</span></span>  
  
 <span data-ttu-id="02db3-2844">`WriteLine` Inserta un carácter de nueva línea (es decir, un retorno de carro/línea de fuente, o `Chr(13) + Chr(10)`), una vez que se ha escrito el último carácter `Output` al archivo.</span><span class="sxs-lookup"><span data-stu-id="02db3-2844">`WriteLine` inserts a newline character (that is, a carriage return/line feed, or `Chr(13) + Chr(10)`), after it has written the final character in `Output` to the file.</span></span>  
  
 <span data-ttu-id="02db3-2845">Puede insertar comillas en una cadena mediante el uso de comillas dobles, o "".</span><span class="sxs-lookup"><span data-stu-id="02db3-2845">You can embed quotation marks in a string by using double quotation marks, or "".</span></span> <span data-ttu-id="02db3-2846">Por ejemplo,</span><span class="sxs-lookup"><span data-stu-id="02db3-2846">For example,</span></span>  
  
 [!code-vb[VbVbalrCatRef#63](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#63)]  
  
 <span data-ttu-id="02db3-2847">Devuelve una cadena con el valor de `Double quotation marks aren't "difficult" to handle`.</span><span class="sxs-lookup"><span data-stu-id="02db3-2847">returns a string with the value of `Double quotation marks aren't "difficult" to handle`.</span></span>  
  
 <span data-ttu-id="02db3-2848">Escribir en un archivo mediante el uso de la `Write` o `WriteLine` functions requiere `Append` acceso desde el `FileIOPermissionAccess` enumeración.</span><span class="sxs-lookup"><span data-stu-id="02db3-2848">Writing to a file by using the `Write` or `WriteLine` functions requires `Append` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="02db3-2849">Para obtener más información, vea <xref:System.Security.Permissions.FileIOPermissionAccess>.</span><span class="sxs-lookup"><span data-stu-id="02db3-2849">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess> .</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="02db3-2850">Este ejemplo se usa el `Write` función para escribir datos sin procesar en un archivo secuencial.</span><span class="sxs-lookup"><span data-stu-id="02db3-2850">This example uses the `Write` function to write raw data to a sequential file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#64](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#64)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="02db3-2851">File mode is invalid.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-2851">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Input" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
      </Docs>
    </Member>
    <Member MemberName="WriteLine">
      <MemberSignature Language="C#" Value="public static void WriteLine (int FileNumber, params object[] Output);" />
      <MemberSignature Language="ILAsm" Value=".method public static void WriteLine(int32 FileNumber, object[] Output) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteLine (FileNumber As Integer, ParamArray Output As Object())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void WriteLine(int FileNumber, ... cli::array &lt;System::Object ^&gt; ^ Output);" />
      <MemberSignature Language="F#" Value="static member WriteLine : int * obj[] -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.WriteLine (FileNumber, Output)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Output" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="02db3-2852">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-2852">Required.</span>
          </span>
          <span data-ttu-id="02db3-2853">An <see langword="Integer" /> expression that contains any valid file number.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-2853">An <see langword="Integer" /> expression that contains any valid file number.</span>
          </span>
        </param>
        <param name="Output">
          <span data-ttu-id="02db3-2854">Optional.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-2854">Optional.</span>
          </span>
          <span data-ttu-id="02db3-2855">One or more comma-delimited expressions to write to a file.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-2855">One or more comma-delimited expressions to write to a file.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="02db3-2856">Writes data to a sequential file.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-2856">Writes data to a sequential file.</span>
          </span>
          <span data-ttu-id="02db3-2857">Data written with <see langword="Write" /> is usually read from a file by using <see langword="Input" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="02db3-2857">Data written with <see langword="Write" /> is usually read from a file by using <see langword="Input" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="02db3-2858">El `Write` y `WriteLine` funciones se proporcionan por compatibilidad con versiones anteriores y puede afectar al rendimiento.</span><span class="sxs-lookup"><span data-stu-id="02db3-2858">The `Write` and `WriteLine` functions are provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="02db3-2859">Para las aplicaciones que no es heredado, el `My.Computer.FileSystem` objeto proporciona un mejor rendimiento.</span><span class="sxs-lookup"><span data-stu-id="02db3-2859">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="02db3-2860">Para obtener más información, consulte [acceso a archivos con Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span><span class="sxs-lookup"><span data-stu-id="02db3-2860">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="02db3-2861">Si se omite `Output`, se imprime una línea en blanco en el archivo.</span><span class="sxs-lookup"><span data-stu-id="02db3-2861">If you omit `Output`, a blank line is printed to the file.</span></span> <span data-ttu-id="02db3-2862">Varias expresiones se pueden separar con comas.</span><span class="sxs-lookup"><span data-stu-id="02db3-2862">Multiple expressions can be separated with a comma.</span></span>  
  
 <span data-ttu-id="02db3-2863">A diferencia de la `Print` función, el `Write` función inserta comas entre los elementos y las cadenas entre comillas, tal como se escriben en el archivo.</span><span class="sxs-lookup"><span data-stu-id="02db3-2863">Unlike the `Print` function, the `Write` function inserts commas between items and quotation marks around strings as they are written to the file.</span></span> <span data-ttu-id="02db3-2864">No es necesario colocar delimitadores explícitos en la lista.</span><span class="sxs-lookup"><span data-stu-id="02db3-2864">You do not have to put explicit delimiters in the list.</span></span> <span data-ttu-id="02db3-2865">Cuando `Write` se usa para escribir datos en un archivo, solo numérico, `Boolean`, fecha, null, y `Error` se admiten los formatos de datos.</span><span class="sxs-lookup"><span data-stu-id="02db3-2865">When `Write` is used to write data to a file, only numeric, `Boolean`, date, null, and `Error` data formats are supported.</span></span> <span data-ttu-id="02db3-2866">Se siguen los siguientes supuestos universales para los datos siempre puedan leer e interpretan correctamente mediante `Input`, independientemente de la configuración regional:</span><span class="sxs-lookup"><span data-stu-id="02db3-2866">The following universal assumptions are followed so the data can always be read and correctly interpreted using `Input`, regardless of locale:</span></span>  
  
-   <span data-ttu-id="02db3-2867">Datos numéricos siempre se escriben con el punto como separador decimal.</span><span class="sxs-lookup"><span data-stu-id="02db3-2867">Numeric data is always written using the period as the decimal separator.</span></span>  
  
-   <span data-ttu-id="02db3-2868">Para `Boolean` datos, ya sea `#TRUE#` o `#FALSE#` se imprime.</span><span class="sxs-lookup"><span data-stu-id="02db3-2868">For `Boolean` data, either `#TRUE#` or `#FALSE#` is printed.</span></span> <span data-ttu-id="02db3-2869">El `True` y `False` palabras clave no se traducen, independientemente de la configuración regional.</span><span class="sxs-lookup"><span data-stu-id="02db3-2869">The `True` and `False` keywords are not translated, regardless of locale.</span></span>  
  
-   <span data-ttu-id="02db3-2870">Datos de fecha se escriben en el archivo con el formato de fecha universal.</span><span class="sxs-lookup"><span data-stu-id="02db3-2870">Date data is written to the file using the universal date format.</span></span> <span data-ttu-id="02db3-2871">Cuando la fecha o el componente de hora falta o es cero, solo la parte proporcionada se escribe en el archivo.</span><span class="sxs-lookup"><span data-stu-id="02db3-2871">When either the date or the time component is missing or zero, only the part provided is written to the file.</span></span>  
  
-   <span data-ttu-id="02db3-2872">Si se escribirá nada en el archivo `Output` datos están vacíos.</span><span class="sxs-lookup"><span data-stu-id="02db3-2872">Nothing is written to the file if `Output` data is empty.</span></span> <span data-ttu-id="02db3-2873">Sin embargo, para datos nulos, `#NULL#` se escribe.</span><span class="sxs-lookup"><span data-stu-id="02db3-2873">However, for null data, `#NULL#` is written.</span></span>  
  
-   <span data-ttu-id="02db3-2874">Para `Error` la salida de datos, aparece como `#ERROR errorcode#`.</span><span class="sxs-lookup"><span data-stu-id="02db3-2874">For `Error` data, the output appears as `#ERROR errorcode#`.</span></span> <span data-ttu-id="02db3-2875">El `Error` palabra clave no se traduce, independientemente de la configuración regional.</span><span class="sxs-lookup"><span data-stu-id="02db3-2875">The `Error` keyword is not translated, regardless of locale.</span></span>  
  
 <span data-ttu-id="02db3-2876">`WriteLine` Inserta un carácter de nueva línea (es decir, un retorno de carro/línea de fuente, o `Chr(13) + Chr(10)`), una vez que se ha escrito el último carácter `Output` al archivo.</span><span class="sxs-lookup"><span data-stu-id="02db3-2876">`WriteLine` inserts a newline character (that is, a carriage return/line feed, or `Chr(13) + Chr(10)`), after it has written the final character in `Output` to the file.</span></span>  
  
 <span data-ttu-id="02db3-2877">Puede insertar comillas en una cadena mediante el uso de comillas dobles, o "".</span><span class="sxs-lookup"><span data-stu-id="02db3-2877">You can embed quotation marks in a string by using double quotation marks, or "".</span></span> <span data-ttu-id="02db3-2878">Por ejemplo,</span><span class="sxs-lookup"><span data-stu-id="02db3-2878">For example,</span></span>  
  
 [!code-vb[VbVbalrCatRef#63](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#63)]  
  
 <span data-ttu-id="02db3-2879">Devuelve una cadena con el valor de `Double quotation marks aren't "difficult" to handle`.</span><span class="sxs-lookup"><span data-stu-id="02db3-2879">returns a string with the value of `Double quotation marks aren't "difficult" to handle`.</span></span>  
  
 <span data-ttu-id="02db3-2880">Escribir en un archivo mediante el uso de la `Write` o `WriteLine` functions requiere `Append` acceso desde el `FileIOPermissionAccess` enumeración.</span><span class="sxs-lookup"><span data-stu-id="02db3-2880">Writing to a file by using the `Write` or `WriteLine` functions requires `Append` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="02db3-2881">Para obtener más información, vea <xref:System.Security.Permissions.FileIOPermissionAccess>.</span><span class="sxs-lookup"><span data-stu-id="02db3-2881">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess> .</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="02db3-2882">Este ejemplo se usa el `Write` función para escribir datos sin procesar en un archivo secuencial.</span><span class="sxs-lookup"><span data-stu-id="02db3-2882">This example uses the `Write` function to write raw data to a sequential file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#64](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#64)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Input" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
      </Docs>
    </Member>
  </Members>
</Type>