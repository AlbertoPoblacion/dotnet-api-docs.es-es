<Type Name="VBMath" FullName="Microsoft.VisualBasic.VBMath">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="ed5678248f78e854ccebc41cb690d5ae586d385c" />
    <Meta Name="ms.sourcegitcommit" Value="434f60616a9793fa8436744549fc856e94f7a648" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="es-ES" />
    <Meta Name="ms.lasthandoff" Value="08/25/2018" />
    <Meta Name="ms.locfileid" Value="39970884" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class VBMath" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed VBMath extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.VisualBasic.VBMath" />
  <TypeSignature Language="VB.NET" Value="Public Module VBMath" />
  <TypeSignature Language="C++ CLI" Value="public ref class VBMath sealed" />
  <TypeSignature Language="F#" Value="type VBMath = class" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.VisualBasic</AssemblyName>
    <AssemblyVersion>7.0.5000.0</AssemblyVersion>
    <AssemblyVersion>8.0.0.0</AssemblyVersion>
    <AssemblyVersion>10.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2">
      <AttributeName>Microsoft.VisualBasic.CompilerServices.StandardModule</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>El módulo <see langword="VbMath" /> contiene procedimientos que se utilizan para llevar a cabo operaciones matemáticas.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este módulo admite las palabras clave del lenguaje Visual Basic y miembros de la biblioteca de tiempo de ejecución para generar números aleatorios.  
  
   
  
## Examples  
 Este ejemplo se usa el `Rnd` función para generar un valor entero aleatorio en el intervalo de 1 a 6.  
  
 [!code-vb[VbVbalrMath#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#21)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName="Randomize">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Inicializa el generador de números aleatorios.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Randomize">
      <MemberSignature Language="C#" Value="public static void Randomize ();" />
      <MemberSignature Language="ILAsm" Value=".method public static void Randomize() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.VBMath.Randomize" />
      <MemberSignature Language="VB.NET" Value="Public Sub Randomize ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Randomize();" />
      <MemberSignature Language="F#" Value="static member Randomize : unit -&gt; unit" Usage="Microsoft.VisualBasic.VBMath.Randomize " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Inicializa el generador de números aleatorios.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Esta sobrecarga de la `Randomize` método no toma un valor de inicialización. En su lugar, el valor devuelto por el temporizador del sistema se utiliza como el nuevo valor de inicialización.  
  
 Si `Randomize` no se utiliza el `Rnd` función (sin argumentos) utiliza el mismo número como valor de inicialización la primera vez se llama y, a partir de entonces usa el último número generado como un valor de inicialización.  
  
> [!NOTE]
>  Para repetir secuencias de números aleatorios, llame a `Rnd` con un argumento negativo inmediatamente antes de usar `Randomize` con un argumento numérico.  
  
> [!IMPORTANT]
>  Dado que el `Random` instrucción y el `Rnd` función comenzar con un valor de inicialización y generar los números que se encuentran dentro de un intervalo finito, los resultados pueden ser predicción alguien que conozca el algoritmo utilizado para generarlos. Por lo tanto, el `Random` instrucción y el `Rnd` función no debe usarse para generar números aleatorios para su uso en la criptografía. Para obtener más información, vea <xref:System.Security.Cryptography.RandomNumberGenerator>.  
  
   
  
## Examples  
 Este ejemplo se usa el `Randomize` instrucción para inicializar el generador de números aleatorios. Dado que se ha omitido el argumento de número, `Randomize` utiliza el valor devuelto desde el `Timer` funcionar como el nuevo valor de inicialización.  
  
 [!code-vb[VbVbalrMath#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#21)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.VBMath.Rnd" />
      </Docs>
    </Member>
    <Member MemberName="Randomize">
      <MemberSignature Language="C#" Value="public static void Randomize (double Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Randomize(float64 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.VBMath.Randomize(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Randomize (Number As Double)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Randomize(double Number);" />
      <MemberSignature Language="F#" Value="static member Randomize : double -&gt; unit" Usage="Microsoft.VisualBasic.VBMath.Randomize Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Number">Opcional. <see langword="Object" /> o cualquier expresión numérica válida.</param>
        <summary>Inicializa el generador de números aleatorios.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `Randomize` usa `Number` para inicializar el `Rnd` generador de números aleatorios de la función, dándole un nuevo valor de inicialización. Si se omite `Number`, el valor devuelto por el temporizador del sistema se utiliza como el nuevo valor de inicialización.  
  
 Si `Randomize` no se utiliza el `Rnd` función (sin argumentos) utiliza el mismo número como valor de inicialización la primera vez se llama y, a partir de entonces usa el último número generado como un valor de inicialización.  
  
> [!NOTE]
>  Para repetir secuencias de números aleatorios, llame a `Rnd` con un argumento negativo inmediatamente antes de usar `Randomize` con un argumento numérico. Uso de `Randomize` con el mismo valor para `Number` no repite la secuencia anterior.  
  
> [!IMPORTANT]
>  Dado que el `Random` instrucción y el `Rnd` función comenzar con un valor de inicialización y generar los números que se encuentran dentro de un intervalo finito, los resultados pueden ser predicción alguien que conozca el algoritmo utilizado para generarlos. Por lo tanto, el `Random` instrucción y el `Rnd` función no debe usarse para generar números aleatorios para su uso en la criptografía. Para obtener más información, vea <xref:System.Security.Cryptography.RandomNumberGenerator>.  
  
   
  
## Examples  
 Este ejemplo se usa el `Randomize` instrucción para inicializar el generador de números aleatorios. Dado que se ha omitido el argumento de número, `Randomize` utiliza el valor devuelto desde el `Timer` funcionar como el nuevo valor de inicialización.  
  
 [!code-vb[VbVbalrMath#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#21)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.VBMath.Rnd" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Rnd">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Devuelve un número aleatorio de tipo <see langword="Single" />.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Rnd">
      <MemberSignature Language="C#" Value="public static float Rnd ();" />
      <MemberSignature Language="ILAsm" Value=".method public static float32 Rnd() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.VBMath.Rnd" />
      <MemberSignature Language="VB.NET" Value="Public Function Rnd () As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static float Rnd();" />
      <MemberSignature Language="F#" Value="static member Rnd : unit -&gt; single" Usage="Microsoft.VisualBasic.VBMath.Rnd " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Devuelve un número aleatorio de tipo <see langword="Single" />.</summary>
        <returns>El siguiente número aleatorio en la secuencia.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El `Rnd` función devuelve un valor menor que 1, pero mayor que o igual a cero.  
  
 Antes de llamar a `Rnd`, utilice el `Randomize` instrucción sin un argumento para inicializar el generador de números aleatorios con un valor de inicialización basado en temporizador del sistema.  
  
 Para generar enteros aleatorios en un intervalo determinado, utilice la siguiente fórmula.  
  
 [!code-vb[VbVbalrMath#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#30)]  
  
 En este caso, `upperbound` es el número más alto en el intervalo, y `lowerbound` es el número más bajo del intervalo.  
  
> [!NOTE]
>  Para repetir secuencias de números aleatorios, llame a `Rnd` con un argumento negativo inmediatamente antes de usar `Randomize` con un argumento numérico.  
  
> [!IMPORTANT]
>  Dado que el `Random` instrucción y el `Rnd` función comenzar con un valor de inicialización y generar los números que se encuentran dentro de un intervalo finito, los resultados pueden ser predicción alguien que conozca el algoritmo utilizado para generarlos. Por lo tanto, el `Random` instrucción y el `Rnd` función no debe usarse para generar números aleatorios para su uso en la criptografía.  
  
   
  
## Examples  
 Este ejemplo se usa el `Rnd` función para generar un valor entero aleatorio en el intervalo de 1 a 6.  
  
 [!code-vb[VbVbalrMath#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#21)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.VBMath.Randomize" />
      </Docs>
    </Member>
    <Member MemberName="Rnd">
      <MemberSignature Language="C#" Value="public static float Rnd (float Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static float32 Rnd(float32 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.VBMath.Rnd(System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Function Rnd (Number As Single) As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static float Rnd(float Number);" />
      <MemberSignature Language="F#" Value="static member Rnd : single -&gt; single" Usage="Microsoft.VisualBasic.VBMath.Rnd Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="Number">Opcional. Valor de tipo <see langword="Single" /> o cualquier expresión de tipo <see langword="Single" /> válida.</param>
        <summary>Devuelve un número aleatorio de tipo <see langword="Single" />.</summary>
        <returns>Si el número es menor que cero, Rnd genera cada vez el mismo número utilizando <paramref name="Number" /> como valor de inicialización. Si el número es mayor que cero, Rnd genera el siguiente número aleatorio en la secuencia. Si el número es igual a cero, Rnd genera el último número generado. Si no se proporciona ningún número, Rnd genera el siguiente número aleatorio en la secuencia.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El `Rnd` función devuelve un valor menor que 1, pero mayor que o igual a cero.  
  
 El valor de `Number` determina cómo `Rnd` genera un número aleatorio.  
  
 Para cualquier valor de inicialización especificado, se genera la misma secuencia de números porque cada llamada sucesiva a la `Rnd` función usa el número generado anteriormente como un valor de inicialización para el siguiente número en la secuencia.  
  
 Antes de llamar a `Rnd`, utilice el `Randomize` instrucción sin un argumento para inicializar el generador de números aleatorios con un valor de inicialización basado en temporizador del sistema.  
  
 Para generar enteros aleatorios en un intervalo determinado, utilice la siguiente fórmula.  
  
 [!code-vb[VbVbalrMath#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#30)]  
  
 En este caso, `upperbound` es el número más alto en el intervalo, y `lowerbound` es el número más bajo del intervalo.  
  
> [!NOTE]
>  Para repetir secuencias de números aleatorios, llame a `Rnd` con un argumento negativo inmediatamente antes de usar `Randomize` con un argumento numérico. Uso de `Randomize` con el mismo valor para `Number` no repite la secuencia anterior.  
  
> [!IMPORTANT]
>  Dado que el `Random` instrucción y el `Rnd` función comenzar con un valor de inicialización y generar los números que se encuentran dentro de un intervalo finito, los resultados pueden ser predicción alguien que conozca el algoritmo utilizado para generarlos. Por lo tanto, el `Random` instrucción y el `Rnd` función no debe usarse para generar números aleatorios para su uso en la criptografía.  
  
   
  
## Examples  
 Este ejemplo se usa el `Rnd` función para generar un valor entero aleatorio en el intervalo de 1 a 6.  
  
 [!code-vb[VbVbalrMath#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#21)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.VBMath.Randomize" />
      </Docs>
    </Member>
  </Members>
</Type>