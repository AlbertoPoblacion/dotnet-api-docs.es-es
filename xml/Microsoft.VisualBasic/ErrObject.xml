<Type Name="ErrObject" FullName="Microsoft.VisualBasic.ErrObject">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="227762e617ed487a80146b1542e3c20a6bd03f00" />
    <Meta Name="ms.sourcegitcommit" Value="16d2d159872fd213cae4b8f371d7ae9c8b027c89" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="es-ES" />
    <Meta Name="ms.lasthandoff" Value="11/17/2018" />
    <Meta Name="ms.locfileid" Value="51908733" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class ErrObject" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed ErrObject extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.VisualBasic.ErrObject" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class ErrObject" />
  <TypeSignature Language="C++ CLI" Value="public ref class ErrObject sealed" />
  <TypeSignature Language="F#" Value="type ErrObject = class" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.VisualBasic</AssemblyName>
    <AssemblyVersion>7.0.5000.0</AssemblyVersion>
    <AssemblyVersion>8.0.0.0</AssemblyVersion>
    <AssemblyVersion>10.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>El módulo <see langword="ErrObject" /> contiene las propiedades y los procedimientos que se utilizan para identificar y controlar los errores en tiempo de ejecución mediante el objeto <see langword="Err" />.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El `ErrObject` módulo admite la `Err` objeto. Para obtener más información, vea <xref:Microsoft.VisualBasic.Information.Err%2A>.  
  
   
  
## Examples  
 En este ejemplo utiliza las propiedades de la `Err` objeto en la construcción de un cuadro de diálogo de mensaje de error. Tenga en cuenta lo que sucede cuando se usa el `Clear` método primer: al generar un error de Visual Basic con, a continuación, el `Raise` método, los valores predeterminados de Visual Basic se convierten en las propiedades de la `Err` objeto.  
  
```vb  
Dim Msg As String  
' If an error occurs, construct an error message.  
On Error Resume Next   ' Defer error handling.  
Err.Clear  
Err.Raise(6)   ' Generate an "Overflow" error.  
' Check for error, then show message.  
If Err.Number <> 0 Then  
    Msg = "Error # " & Str(Err.Number) & " was generated by " _  
        & Err.Source & ControlChars.CrLf & Err.Description  
    MsgBox(Msg, MsgBoxStyle.Information, "Error")  
End If  
```  
  
 ]]></format>
    </remarks>
    <altmember cref="M:Microsoft.VisualBasic.Information.Err" />
    <related type="Article" href="~/docs/visual-basic/language-reference/statements/on-error-statement.md">Instrucción On Error (Visual Basic)</related>
    <related type="Article" href="~/docs/visual-basic/language-reference/statements/try-catch-finally-statement.md">Instrucción Try...Catch...Finally (Visual Basic)</related>
    <related type="Article" href="~/docs/visual-basic/language-reference/keywords/index.md">Palabras clave de Visual Basic</related>
    <related type="Article" href="~/docs/visual-basic/language-reference/runtime-library-members.md">Miembros de la biblioteca de tiempo de ejecución de Visual Basic</related>
  </Docs>
  <Members>
    <Member MemberName="Clear">
      <MemberSignature Language="C#" Value="public void Clear ();" />
      <MemberSignature Language="ILAsm" Value=".method public instance void Clear() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.ErrObject.Clear" />
      <MemberSignature Language="VB.NET" Value="Public Sub Clear ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Clear();" />
      <MemberSignature Language="F#" Value="member this.Clear : unit -&gt; unit" Usage="errObject.Clear " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Borra todos los valores de propiedad del objeto <see langword="Err" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Usar `Clear` borrar explícitamente la `Err` objeto después de que se ha controlado un error, como cuando se utiliza aplazado control de errores con `On Error Resume Next`. El `Clear` se llama al método automáticamente cada vez que se ejecuta alguna de las siguientes instrucciones:  
  
-   Cualquier tipo de `Resume` instrucción  
  
-   `Exit Sub`, `Exit Function`o `Exit Property`  
  
-   Cualquier `On Error` instrucción  
  
-   Cualquier `Try...Catch...Finally` instrucción  
  
    > [!NOTE]
    >  El `On Error Resume Next` construcción puede ser preferible `On Error GoTo` al controlar errores generados durante el acceso a otros objetos. Comprobando `Err` después de cada interacción con un objeto elimina la ambigüedad sobre qué objeto se obtuvo acceso por el código: puede estar seguro de qué objeto coloca el código de error `Err.Number`, así como el objeto que generó originalmente el error (el objeto se especifica en `Err.Source`).  
  
   
  
## Examples  
 Este ejemplo se usa el `Err` del objeto `Clear` método para restablecer las propiedades numéricas de la `Err` objeto a cero y sus propiedades de cadena a cadenas de longitud cero. Sin la llamada a `Clear`, la segunda llamada a `MsgBox` mostraría el mismo mensaje de error.  
  
 [!code-vb[VbVbalrErrorHandling#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrErrorHandling/VB/Class1.vb#4)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Information.Err" />
        <altmember cref="M:Microsoft.VisualBasic.Conversion.ErrorToString" />
        <related type="Article" href="~/docs/visual-basic/language-reference/statements/on-error-statement.md">Instrucción On Error (Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="Description">
      <MemberSignature Language="C#" Value="public string Description { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Description" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.ErrObject.Description" />
      <MemberSignature Language="VB.NET" Value="Public Property Description As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Description { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Description : string with get, set" Usage="Microsoft.VisualBasic.ErrObject.Description" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Devuelve o establece una expresión de tipo <see langword="String" /> que contiene una cadena descriptiva asociada a un error. Lectura y escritura.</summary>
        <value>Devuelve o establece una expresión de tipo <see langword="String" /> que contiene una cadena descriptiva asociada a un error. Lectura y escritura.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El `Description` configuración de la propiedad consta de una breve descripción del error. Utilice esta propiedad para avisar al usuario a un error que no puede o no desea controlar. Cuando se genera un error definido por el usuario, asigne una breve descripción de su error a la `Description` propiedad. Si el `Description` propiedad no se ha rellenado y el valor de la <xref:Microsoft.VisualBasic.ErrObject.Number%2A> propiedad se corresponde con un error de tiempo de ejecución de Visual Basic y, después, la cadena devuelta por la <xref:Microsoft.VisualBasic.Conversion.ErrorToString%2A> función está establecida el `Description` propiedad cuando se genera el error.  
  
   
  
## Examples  
 Este ejemplo asigna un mensaje definido por el usuario para el `Description` propiedad de la `Err` objeto.  
  
 [!code-vb[VbVbalrErrorHandling#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrErrorHandling/VB/Class1.vb#5)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Information.Err" />
        <altmember cref="M:Microsoft.VisualBasic.Conversion.ErrorToString" />
      </Docs>
    </Member>
    <Member MemberName="Erl">
      <MemberSignature Language="C#" Value="public int Erl { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Erl" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.ErrObject.Erl" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Erl As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Erl { int get(); };" />
      <MemberSignature Language="F#" Value="member this.Erl : int" Usage="Microsoft.VisualBasic.ErrObject.Erl" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Devuelve un entero que indica el número de línea de la última instrucción ejecutada Sólo lectura.</summary>
        <value>Devuelve un entero que indica el número de línea de la última instrucción ejecutada Sólo lectura.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Visual Basic encuentra sin números de línea, devuelve 0.  
  
   
  
## Examples  
 Este ejemplo se usa el `Erl` propiedad para indicar el número de línea.  
  
```  
10:     On Error Resume Next  
20:     Err.Raise(60000)  
' Returns 20.  
30:     MsgBox(Erl())  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Information.Err" />
        <altmember cref="M:Microsoft.VisualBasic.Conversion.ErrorToString" />
      </Docs>
    </Member>
    <Member MemberName="GetException">
      <MemberSignature Language="C#" Value="public Exception GetException ();" />
      <MemberSignature Language="ILAsm" Value=".method public instance class System.Exception GetException() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.ErrObject.GetException" />
      <MemberSignature Language="VB.NET" Value="Public Function GetException () As Exception" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Exception ^ GetException();" />
      <MemberSignature Language="F#" Value="member this.GetException : unit -&gt; Exception" Usage="errObject.GetException " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Exception</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Devuelve la excepción que representa el error que se ha producido.</summary>
        <returns>Devuelve la excepción que representa el error que se ha producido.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El `GetException` función sólo está disponible desde el `Err` clase de objeto. Funciona con el `Exception` propiedad de la `Err` objeto para mostrar el error que se ha producido.  
  
   
  
## Examples  
 El código siguiente muestra el mensaje asignado a la excepción en el `Err` objeto:  
  
 [!code-vb[VbVbalrCatRef#66](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#66)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Information.Err" />
        <altmember cref="M:Microsoft.VisualBasic.Conversion.ErrorToString" />
      </Docs>
    </Member>
    <Member MemberName="HelpContext">
      <MemberSignature Language="C#" Value="public int HelpContext { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 HelpContext" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.ErrObject.HelpContext" />
      <MemberSignature Language="VB.NET" Value="Public Property HelpContext As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int HelpContext { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.HelpContext : int with get, set" Usage="Microsoft.VisualBasic.ErrObject.HelpContext" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Devuelve o establece un valor <see langword="Integer" /> que contiene el identificador de contexto de un tema en un archivo de Ayuda. Lectura y escritura.</summary>
        <value>Devuelve o establece un valor <see langword="Integer" /> que contiene el identificador de contexto de un tema en un archivo de Ayuda. Lectura y escritura.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El `HelpContext` propiedad se utiliza para mostrar Ayuda contextual para una aplicación. Si se especifica un archivo de ayuda en `HelpFile`, el `HelpContext` propiedad se utiliza para mostrar automáticamente el archivo de Ayuda identificado. Si tanto el `HelpFile` y `HelpContext` propiedades están vacías, el valor de la <xref:Microsoft.VisualBasic.ErrObject.Number%2A> se comprueba la propiedad. Si el valor de la `Number` propiedad se corresponde con un valor de error de tiempo de ejecución de Visual Basic, a continuación, se usa el identificador de contexto de Ayuda de Visual Basic para el error. Si el valor de la `Number` propiedad no corresponde a un error de Visual Basic, se muestra la pantalla de contenido para el archivo de Ayuda de Visual Basic.  
  
> [!NOTE]
>  Debe escribir rutinas en la aplicación para controlar los errores típicos. Al programar con un objeto, puede usar el archivo de Ayuda del objeto para mejorar la calidad de sus errores, o para mostrar un mensaje descriptivo al usuario si el error no es recuperable.  
  
   
  
## Examples  
 Este ejemplo se usa el `HelpContext` propiedad de la `Err` objeto para mostrar el tema de Ayuda de Visual Basic para el `Overflow` error.  
  
 [!code-vb[VbVbalrErrorHandling#7](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrErrorHandling/VB/Class1.vb#7)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Information.Err" />
        <altmember cref="M:Microsoft.VisualBasic.Conversion.ErrorToString" />
      </Docs>
    </Member>
    <Member MemberName="HelpFile">
      <MemberSignature Language="C#" Value="public string HelpFile { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string HelpFile" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.ErrObject.HelpFile" />
      <MemberSignature Language="VB.NET" Value="Public Property HelpFile As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ HelpFile { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.HelpFile : string with get, set" Usage="Microsoft.VisualBasic.ErrObject.HelpFile" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Devuelve o establece una expresión de tipo <see langword="String" /> que contiene la ruta de acceso completa a un archivo de Ayuda. Lectura y escritura.</summary>
        <value>Devuelve o establece una expresión de tipo <see langword="String" /> que contiene la ruta de acceso completa a un archivo de Ayuda. Lectura y escritura.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si se especifica un archivo de ayuda mediante el `HelpFile` propiedad, se llama automáticamente cuando el usuario presiona la tecla de ayuda (o la tecla F1) en el cuadro de diálogo de mensaje de error. Si el `HelpContext` propiedad contiene un contexto válido de identificador para el archivo especificado, ese tema se muestra automáticamente. Si no hay ningún `HelpFile` se especifica, se muestra el archivo de Ayuda de Visual Basic.  
  
> [!NOTE]
>  Debe escribir rutinas en la aplicación para controlar los errores típicos. Al programar con un objeto, puede usar el archivo de Ayuda del objeto para mejorar la calidad de sus errores, o para mostrar un mensaje descriptivo al usuario si el error no es recuperable.  
  
   
  
## Examples  
 Este ejemplo se usa el `HelpFile` propiedad de la `Err` objeto para iniciar el sistema de ayuda. De forma predeterminada, el `HelpFile` propiedad contiene el nombre del archivo de Ayuda de Visual Basic.  
  
 [!code-vb[VbVbalrErrorHandling#7](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrErrorHandling/VB/Class1.vb#7)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Information.Err" />
        <altmember cref="M:Microsoft.VisualBasic.Conversion.ErrorToString" />
      </Docs>
    </Member>
    <Member MemberName="LastDllError">
      <MemberSignature Language="C#" Value="public int LastDllError { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 LastDllError" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.ErrObject.LastDllError" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property LastDllError As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int LastDllError { int get(); };" />
      <MemberSignature Language="F#" Value="member this.LastDllError : int" Usage="Microsoft.VisualBasic.ErrObject.LastDllError" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>get: System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Devuelve un código de error del sistema generado por una llamada a una biblioteca de vínculos dinámicos (archivo DLL). Sólo lectura.</summary>
        <value>Devuelve un código de error del sistema generado por una llamada a una biblioteca de vínculos dinámicos (archivo DLL). Sólo lectura.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:Microsoft.VisualBasic.ErrObject.LastDllError%2A> propiedad solo se aplica a las llamadas DLL realizadas desde código de Visual Basic. Cuando se realiza una de estas llamadas, la función llamada normalmente devolverá un código que indica éxito o error y el <xref:Microsoft.VisualBasic.ErrObject.LastDllError%2A> se rellena la propiedad. Consulte la documentación de las funciones de DLL determinar los valores devueltos que indican el éxito o error. Cada vez que se devuelve el código de error, la aplicación de Visual Basic debe comprobar inmediatamente el <xref:Microsoft.VisualBasic.ErrObject.LastDllError%2A> propiedad. Se genera ninguna excepción cuando la <xref:Microsoft.VisualBasic.ErrObject.LastDllError%2A> se establece la propiedad.  
  
> [!NOTE]
>  El <xref:Microsoft.VisualBasic.ErrObject.LastDllError%2A> propiedad está protegida por <xref:System.Security.Permissions.SecurityAction.LinkDemand>, lo que ayuda a evita que se tiene acceso desde código no seguro. Sin embargo, <xref:System.Security.Permissions.SecurityAction.LinkDemand> requiere solo el llamador inmediato tiene <xref:System.Security.Permissions.SecurityPermissionAttribute.UnmanagedCode%2A> permiso. Si el código se puede llamar desde código de confianza parcial, exponiendo el valor de <xref:Microsoft.VisualBasic.ErrObject.LastDllError%2A> sin validación es un riesgo de seguridad.  
>   
>  Para conocer las limitaciones importantes acerca de cómo usar el <xref:System.Security.Permissions.SecurityAction.LinkDemand> miembro, vea [frente a la demanda. LinkDemand](https://msdn.microsoft.com/library/1ab877f2-70f4-4e0d-8116-943999dfe8f5). Para obtener más información acerca de los permisos, consulte <xref:System.Security.Permissions.SecurityPermission> y [permisos de acceso del código](https://msdn.microsoft.com/library/e5ae402f-6dda-4732-bbe8-77296630f675).  
  
 Tenga en cuenta para dispositivos inteligentes que esta propiedad devuelve siempre cero.  
  
   
  
## Examples  
 El ejemplo siguiente muestra cómo puede usar el `LastDllError` propiedad después de llamar a una función de la API de Windows. El `PrintWindowCoordinates` procedimiento toma un identificador a una ventana y llama a la `GetWindowRect` función. `GetWindowRect` rellena la estructura de datos RECT con las longitudes de los lados del rectángulo que componen la ventana. Si se pasa un identificador no válido, se produce un error y el número de error está disponible a través de la `LastDllError` propiedad.  
  
 [!code-vb[VbVbalrErrorHandling#8](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrErrorHandling/VB/Class1.vb#8)]  
[!code-vb[VbVbalrErrorHandling#9](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrErrorHandling/VB/Class1.vb#9)]  
[!code-vb[VbVbalrErrorHandling#10](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrErrorHandling/VB/Class1.vb#10)]  
  
 [!code-vb[VbVbalrErrorHandling#11](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrErrorHandling/VB/Class1.vb#11)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Information.Err" />
        <altmember cref="M:Microsoft.VisualBasic.Conversion.ErrorToString" />
      </Docs>
    </Member>
    <Member MemberName="Number">
      <MemberSignature Language="C#" Value="public int Number { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Number" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.ErrObject.Number" />
      <MemberSignature Language="VB.NET" Value="Public Property Number As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Number { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.Number : int with get, set" Usage="Microsoft.VisualBasic.ErrObject.Number" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Devuelve o establece un valor numérico que especifica un error. Lectura y escritura.</summary>
        <value>Devuelve o establece un valor numérico que especifica un error. Lectura y escritura.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Todos los `Raise` argumentos, excepto `Number` son opcionales. Si omite los argumentos opcionales y los valores de propiedad de la `Err` objeto contienen valores que no se han borrado, dichos valores actúan como valores para el error.  
  
 Dado que el `Err` object proporciona información más completa que cuando se generan errores con el `Error` instrucción, `Raise` es útil para generar errores al escribir módulos de clase. Por ejemplo, con el `Raise` método, se puede especificar el origen que generó el error en la `Source` propiedad, puede hacer referencia a la Ayuda en línea del error y así sucesivamente.  
  
 Cuando se devuelva un error definido por el usuario desde un objeto, establecer `Err.Number` agregando el número seleccionado como código de error a la `VbObjectError` constante. Por ejemplo, usa el siguiente código para devolver el número 1051 como código de error:  
  
 [!code-vb[VbVbalrErrorHandling#13](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrErrorHandling/VB/Class1.vb#13)]  
  
   
  
## Examples  
 En este ejemplo se muestra un uso típico de la `Number` propiedad en una rutina de control de errores.  
  
 [!code-vb[VbVbalrErrorHandling#12](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrErrorHandling/VB/Class1.vb#12)]  
  
 Este ejemplo se usa el `Err` del objeto `Raise` método para generar un error original en una función escrita en Visual Basic. La función de llamada puede detectar el error y notificarlo al usuario. Observe que el procedimiento `CallingProcedure` contrasta el tipo de información que se puede derivar de un `Err` objeto con la información que se puede derivar de un `Exception` objeto.  
  
 [!code-vb[VbVbalrErrorHandling#14](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrErrorHandling/VB/Class1.vb#14)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="Number" /> es mayor que 65535.</exception>
        <altmember cref="M:Microsoft.VisualBasic.Information.Err" />
        <altmember cref="M:Microsoft.VisualBasic.Conversion.ErrorToString" />
      </Docs>
    </Member>
    <Member MemberName="Raise">
      <MemberSignature Language="C#" Value="public void Raise (int Number, object Source = null, object Description = null, object HelpFile = null, object HelpContext = null);" />
      <MemberSignature Language="ILAsm" Value=".method public instance void Raise(int32 Number, object Source, object Description, object HelpFile, object HelpContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.ErrObject.Raise(System.Int32,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Raise (Number As Integer, Optional Source As Object = null, Optional Description As Object = null, Optional HelpFile As Object = null, Optional HelpContext As Object = null)" />
      <MemberSignature Language="F#" Value="member this.Raise : int * obj * obj * obj * obj -&gt; unit" Usage="errObject.Raise (Number, Source, Description, HelpFile, HelpContext)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int32" />
        <Parameter Name="Source" Type="System.Object" />
        <Parameter Name="Description" Type="System.Object" />
        <Parameter Name="HelpFile" Type="System.Object" />
        <Parameter Name="HelpContext" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Number">Obligatorio. Entero de tipo <see langword="Long" /> que identifica la naturaleza del error. Los errores de Visual Basic vienen indicados por el intervalo 0-65535, el intervalo 0-512 queda reservado para los errores del sistema y el intervalo 513-65535 es para los errores definidos por el usuario. Cuando se establece el valor de la propiedad <see langword="Number" /> en un código de error propio en un módulo de clase, se suma el número del código de error a la constante <see langword="vbObjectError" />. Por ejemplo, para generar el número de error 513, asigne <c>vbObjectError + 513</c> a la propiedad <see langword="Number" />.</param>
        <param name="Source">Opcional. Expresión de tipo <see langword="String" /> que denomina el objeto o la aplicación que generó el error. Al establecer esta propiedad para un objeto, use el formato <c>project</c>.<c>class</c>. Si no se especifica <c>Source</c>, se usa el identificador de proceso del proyecto actual de Visual Basic.</param>
        <param name="Description">Opcional. Expresión de tipo <see langword="String" /> que describe el error. Si no se especifica, se examina el valor de la propiedad <see langword="Number" />. Si se puede asignar a un código de error en tiempo de ejecución de Visual Basic, la cadena que devuelva la función <see langword="Error" /> se utilizará como la propiedad <see langword="Description" />. Si hay ningún error de Visual Basic que corresponda a la propiedad <see langword="Number" />, se utiliza el mensaje "Error definido por la aplicación o por el objeto".</param>
        <param name="HelpFile">Opcional. Ruta de acceso completa al archivo de Ayuda referente a este error. Si no se especifica, Visual Basic utiliza la unidad, la ruta de acceso y el nombre completos del archivo de Ayuda de Visual Basic.</param>
        <param name="HelpContext">Opcional. Identificador de contexto que identifica un tema dentro del <c>HelpFile</c> que proporciona ayuda para el error. Si no se especifica, se utiliza el identificador de contexto del archivo de Ayuda de Visual Basic correspondiente a la propiedad <see langword="Number" /> si existe.</param>
        <summary>Genera un error en tiempo de ejecución; se puede utilizar en lugar de la instrucción <see langword="Error" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Todos los `Raise` argumentos, excepto `Number` son opcionales. Si omite los argumentos opcionales y los valores de propiedad de la `Err` objeto contienen valores que no se han borrado, dichos valores actúan como valores para el error.  
  
 Dado que el `Err` object proporciona información más completa que cuando se generan errores con el `Error` instrucción, `Raise` es útil para generar errores al escribir módulos de clase. Por ejemplo, con el `Raise` método, se puede especificar el origen que generó el error en la `Source` propiedad, puede hacer referencia a la Ayuda en línea del error y así sucesivamente.  
  
   
  
## Examples  
 Este ejemplo se usa el `Err` del objeto `Raise` método para generar un error en una función escrita en Visual Basic. La función de llamada puede detectar el error y notificarlo al usuario con un cuadro de mensaje.  
  
 [!code-vb[VbVbalrErrorHandling#14](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrErrorHandling/VB/Class1.vb#14)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Information.Err" />
        <altmember cref="M:Microsoft.VisualBasic.Conversion.ErrorToString" />
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/statements/error-statement.md">Error (Instrucción)</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/statements/on-error-statement.md">Instrucción On Error (Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="Source">
      <MemberSignature Language="C#" Value="public string Source { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Source" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.ErrObject.Source" />
      <MemberSignature Language="VB.NET" Value="Public Property Source As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Source { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Source : string with get, set" Usage="Microsoft.VisualBasic.ErrObject.Source" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Devuelve o establece una expresión de tipo <see langword="String" /> que especifica el nombre del objeto o de la aplicación que generó originalmente el error. Lectura y escritura.</summary>
        <value>Devuelve o establece una expresión de tipo <see langword="String" /> que especifica el nombre del objeto o de la aplicación que generó originalmente el error. Lectura y escritura.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El `Source` propiedad especifica un `String` expresión que representa el objeto que generó el error; la expresión normalmente es nombre de clase del objeto o identificador de proceso. Use el `Source` propiedad para proporcionar información cuando el código no se puede controlar un error generado en un objeto que se tiene acceso. Por ejemplo, si tiene acceso a Microsoft Excel y se genera un `Division by zero` error, Microsoft Excel establece `Err.Number` a su código de error para ese error y los conjuntos `Source` en "Excel.Application".  
  
 Cuando la aplicación genera un error desde el código, `Source` es el identificador de programación de. la aplicación Dentro de una clase, `Source` debería contener un nombre que tiene el formato *proyecto*. *clase*. Cuando se produce un error inesperado en el código, el `Source` propiedad se rellena automáticamente. Si hay errores en un módulo, `Source` contiene el nombre del proyecto.  
  
   
  
## Examples  
 En este ejemplo se muestra el uso de la `Source` propiedad en una rutina de control de errores habitual. Cuando se produce un error de `Class1`, la cadena `"Class1"` se asigna a la `Source` propiedad de la `Err` objeto. Esta cadena se muestra a continuación, en un mensaje informativo que indica el origen y el número de error.  
  
 [!code-vb[VbVbalrErrorHandling#15](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrErrorHandling/VB/Class1.vb#15)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Information.Err" />
        <altmember cref="M:Microsoft.VisualBasic.Conversion.ErrorToString" />
        <related type="Article" href="~/docs/visual-basic/language-reference/statements/on-error-statement.md">Instrucción On Error (Visual Basic)</related>
      </Docs>
    </Member>
  </Members>
</Type>