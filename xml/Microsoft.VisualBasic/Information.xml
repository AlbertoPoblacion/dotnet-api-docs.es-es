<Type Name="Information" FullName="Microsoft.VisualBasic.Information">
  <Metadata><Meta Name="ms.openlocfilehash" Value="f69195f0ac7631dda427e7806b98cd516b19eebe" /><Meta Name="ms.sourcegitcommit" Value="9e06b87bcfa4347dbbaaa4b3cc36b43b93b5badb" /><Meta Name="ms.translationtype" Value="HT" /><Meta Name="ms.contentlocale" Value="es-ES" /><Meta Name="ms.lasthandoff" Value="11/20/2018" /><Meta Name="ms.locfileid" Value="52201071" /></Metadata><TypeSignature Language="C#" Value="public sealed class Information" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit Information extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.VisualBasic.Information" />
  <TypeSignature Language="VB.NET" Value="Public Module Information" />
  <TypeSignature Language="C++ CLI" Value="public ref class Information sealed" />
  <TypeSignature Language="F#" Value="type Information = class" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.VisualBasic</AssemblyName>
    <AssemblyVersion>7.0.5000.0</AssemblyVersion>
    <AssemblyVersion>8.0.0.0</AssemblyVersion>
    <AssemblyVersion>10.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
      <AttributeName>Microsoft.VisualBasic.CompilerServices.StandardModule</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>El módulo <see langword="Information" /> contiene los procedimientos que se utilizan para devolver o comprobar información.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este módulo admite las palabras clave del lenguaje Visual Basic y miembros de la biblioteca de tiempo de ejecución que proporcionan información de error, validan los datos, determinan los límites de matriz y recuperar información de color y tipo de datos.  
  
   
  
## Examples  
 En el ejemplo siguiente se usa el `VbTypeName` función para devolver nombres de tipo de datos de varias variables.  
  
```vb  
Dim sysDateName As String = "System.DateTime"  
Dim sysShortName As String = "Int16"  
Dim sysBadName As String = "Nonsense"  
Dim testVbName As String  
testVbName = VbTypeName(sysDateName)   
' Returns "Date".  
testVbName = VbTypeName(sysShortName)   
' Returns "Short".  
testVbName = VbTypeName(sysBadName)   
' Returns Nothing.  
```  
  
 ]]></format>
    </remarks>
    <related type="Article" href="~/docs/visual-basic/language-reference/keywords/information-and-interaction-summary.md">Resumen de información e interacción</related>
    <related type="Article" href="~/docs/visual-basic/language-reference/keywords/data-types-summary.md">Data Types Summary</related>
    <related type="Article" href="~/docs/visual-basic/language-reference/keywords/declarations-and-constants-summary.md">Resumen de constantes y declaraciones</related>
    <related type="Article" href="~/docs/visual-basic/language-reference/keywords/index.md">Palabras clave de Visual Basic</related>
    <related type="Article" href="~/docs/visual-basic/language-reference/runtime-library-members.md">Miembros de la biblioteca de tiempo de ejecución de Visual Basic</related>
  </Docs>
  <Members>
    <Member MemberName="Erl">
      <MemberSignature Language="C#" Value="public static int Erl ();" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Erl() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Information.Erl" />
      <MemberSignature Language="VB.NET" Value="Public Function Erl () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Erl();" />
      <MemberSignature Language="F#" Value="static member Erl : unit -&gt; int" Usage="Microsoft.VisualBasic.Information.Erl " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.EditorBrowsable</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Devuelve un entero que indica el número de línea de la última instrucción ejecutada Sólo lectura.</summary>
        <returns>Devuelve un entero que indica el número de línea de la última instrucción ejecutada Sólo lectura.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Visual Basic encuentra sin números de línea, devuelve 0.  
  
   
  
## Examples  
 Este ejemplo se usa el `Erl` propiedad para indicar el número de línea.  
  
 [!code-vb[VbVbalrErrorHandling#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrErrorHandling/VB/Class1.vb#6)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:Microsoft.VisualBasic.ErrObject" />
        <altmember cref="M:Microsoft.VisualBasic.Conversion.ErrorToString" />
      </Docs>
    </Member>
    <Member MemberName="Err">
      <MemberSignature Language="C#" Value="public static Microsoft.VisualBasic.ErrObject Err ();" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.VisualBasic.ErrObject Err() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Information.Err" />
      <MemberSignature Language="VB.NET" Value="Public Function Err () As ErrObject" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::VisualBasic::ErrObject ^ Err();" />
      <MemberSignature Language="F#" Value="static member Err : unit -&gt; Microsoft.VisualBasic.ErrObject" Usage="Microsoft.VisualBasic.Information.Err " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.VisualBasic.ErrObject</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Contiene información sobre los errores en tiempo de ejecución.</summary>
        <returns>Contiene información sobre los errores en tiempo de ejecución.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Las propiedades de la `Err` objeto se establecen mediante el generador de un error, Visual Basic, un objeto o el programador.  
  
 Cuando se produce un error de tiempo de ejecución, las propiedades de la `Err` se rellenan con información que identifica el error de objeto y que puede usar para controlar el error. Para generar un error en tiempo de ejecución en el código, utilice el `Raise` método.  
  
 El `Err` propiedades del objeto se restablecen a cero o cadenas de longitud cero ("") después de un `Exit Sub`, `Exit Function`, `Exit Property`, o `Resume Next` instrucción dentro de una rutina de control de errores. Uso de cualquier forma de la `Resume` instrucción fuera de una rutina de control de errores no se restablecerá el `Err` propiedades del objeto. Puede usar el `Clear` método para restablecer explícitamente `Err`.  
  
 Use la `Raise` método en lugar de `Error` instrucción para generar errores en tiempo de ejecución para errores del sistema y módulos de clase. La decisión sobre si se debe usar el `Raise` método en otro código depende de la riqueza de la información que desea devolver.  
  
 El `Err` es un objeto intrínseco con ámbito global. Por lo tanto, no es necesario crear una instancia de ella en el código.  
  
   
  
## Examples  
 En este ejemplo utiliza las propiedades de la `Err` objeto en la construcción de un cuadro de diálogo de mensaje de error. Tenga en cuenta que si usa el `Clear` método primero, cuando se genera un error de Visual Basic con el `Raise` método, los valores predeterminados de Visual Basic se convierten en las propiedades de la `Err` objeto.  
  
 [!code-vb[VbVbalrErrorHandling#3](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrErrorHandling/VB/Class1.vb#3)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/visual-basic/language-reference/statements/error-statement.md">Error (Instrucción)</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/statements/on-error-statement.md">Instrucción On Error (Visual Basic)</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/statements/exit-statement.md">Exit (Instrucción, Visual Basic)</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/statements/resume-statement.md">Resume (Instrucción)</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/error-messages/index.md">Mensajes de error (Visual Basic)</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/statements/try-catch-finally-statement.md">Instrucción Try...Catch...Finally (Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="IsArray">
      <MemberSignature Language="C#" Value="public static bool IsArray (object VarName);" />
      <MemberSignature Language="ILAsm" Value=".method public static bool IsArray(object VarName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Information.IsArray(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsArray (VarName As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsArray(System::Object ^ VarName);" />
      <MemberSignature Language="F#" Value="static member IsArray : obj -&gt; bool" Usage="Microsoft.VisualBasic.Information.IsArray VarName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="VarName" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="VarName">Obligatorio. Variable de <see langword="Object" />.</param>
        <summary>Devuelve un valor de tipo <see langword="Boolean" /> que indica si una variable apunta a una matriz.</summary>
        <returns>Devuelve un valor de tipo <see langword="Boolean" /> que indica si una variable apunta a una matriz.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `IsArray` Devuelve `True` si la variable apunta a una matriz; en caso contrario, devuelve `False`. `IsArray` es especialmente útil con objetos que pueden contener matrices.  
  
   
  
## Examples  
 Este ejemplo se usa el `IsArray` función para comprobar si varias variables hacen referencia a una matriz.  
  
 [!code-vb[VbVbalrFunctions#34](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#34)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Information.IsDate(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsDBNull(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsError(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsNothing(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsNumeric(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsReference(System.Object)" />
        <altmember cref="T:System.Object" />
        <altmember cref="M:Microsoft.VisualBasic.Information.TypeName(System.Object)" />
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/arrays/index.md">Matrices en Visual Basic</related>
      </Docs>
    </Member>
    <Member MemberName="IsDate">
      <MemberSignature Language="C#" Value="public static bool IsDate (object Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static bool IsDate(object Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Information.IsDate(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsDate (Expression As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsDate(System::Object ^ Expression);" />
      <MemberSignature Language="F#" Value="static member IsDate : obj -&gt; bool" Usage="Microsoft.VisualBasic.Information.IsDate Expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Expression">Obligatorio. Expresión <see langword="Object" />.</param>
        <summary>Devuelve un valor de tipo <see langword="Boolean" /> que indica si una expresión representa un valor de <see langword="Date" /> válido.</summary>
        <returns>Devuelve un valor de tipo <see langword="Boolean" /> que indica si una expresión representa un valor de <see langword="Date" /> válido.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `IsDate` Devuelve `True` si `Expression` reviste la <xref:System.DateTime> datos escriba o se puede convertir a él; en caso contrario, devuelve `False`.  
  
 El <xref:System.DateTime> tipo de datos contiene un valor de fecha y un valor de hora. `IsDate` Devuelve `True` si `Expression` representa una fecha válida, una hora válida, o una fecha válida y la hora.  
  
   
  
## Examples  
 En el ejemplo siguiente se usa el `IsDate` función para determinar si varias variables representan válido <xref:System.DateTime> valores.  
  
 [!code-vb[VbVbalrFunctions#35](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#35)]  
  
 En el ejemplo anterior, `IsDate` devuelve `True` para las primeras cuatro llamadas y `False` de la última llamada.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Information.IsArray(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsDBNull(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsError(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsNothing(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsNumeric(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsReference(System.Object)" />
        <altmember cref="T:System.Object" />
        <altmember cref="T:System.DateTime" />
        <altmember cref="M:Microsoft.VisualBasic.Information.TypeName(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="IsDBNull">
      <MemberSignature Language="C#" Value="public static bool IsDBNull (object Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static bool IsDBNull(object Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Information.IsDBNull(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsDBNull (Expression As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsDBNull(System::Object ^ Expression);" />
      <MemberSignature Language="F#" Value="static member IsDBNull : obj -&gt; bool" Usage="Microsoft.VisualBasic.Information.IsDBNull Expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Expression">Obligatorio. Expresión <see langword="Object" />.</param>
        <summary>Devuelve un valor de tipo <see langword="Boolean" /> que indica si una expresión se evalúa como clase <see cref="T:System.DBNull" />.</summary>
        <returns>Devuelve un valor de tipo <see langword="Boolean" /> que indica si una expresión se evalúa como clase <see cref="T:System.DBNull" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `IsDBNull` Devuelve `True` si el tipo de datos de `Expression` se evalúa como el <xref:System.DBNull> tipo; en caso contrario, `IsDBNull` devuelve `False`.  
  
 El <xref:System.DBNull?displayProperty=nameWithType> valor indica que el `Object` representa datos que faltan o que no existentes. `DBNull` no es igual a `Nothing`, lo que indica que una variable no se ha inicializado todavía. `DBNull` es el mismo como una cadena de longitud cero (`""`), que a veces se conoce como una cadena nula.  
  
   
  
## Examples  
 Este ejemplo se usa el `IsDBNull` función para determinar si una variable se evalúa como `DBNull`.  
  
 [!code-vb[VbVbalrFunctions#36](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#36)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Information.IsArray(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsDate(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsError(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsNothing(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsNumeric(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsReference(System.Object)" />
        <altmember cref="T:System.Object" />
        <altmember cref="T:System.DBNull" />
        <altmember cref="M:Microsoft.VisualBasic.Information.TypeName(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="IsError">
      <MemberSignature Language="C#" Value="public static bool IsError (object Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static bool IsError(object Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Information.IsError(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsError (Expression As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsError(System::Object ^ Expression);" />
      <MemberSignature Language="F#" Value="static member IsError : obj -&gt; bool" Usage="Microsoft.VisualBasic.Information.IsError Expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Expression">Obligatorio. Expresión <see langword="Object" />.</param>
        <summary>Devuelve un valor de tipo <see langword="Boolean" /> que indica si una expresión es un tipo de excepción.</summary>
        <returns>Devuelve un valor de tipo <see langword="Boolean" /> que indica si una expresión es un tipo de excepción.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `IsError` Devuelve `True` si la expresión representa un `Object` variable que se deriva el <xref:System.Exception> clase en el <xref:System> espacio de nombres.  
  
 Una excepción que se deriva de <xref:System.Exception?displayProperty=nameWithType> puede capturarse con el `Try...Catch...Finally` instrucciones.  
  
   
  
## Examples  
 En el ejemplo siguiente se usa el `IsError` función para comprobar si una expresión representa una excepción del sistema.  
  
 [!code-vb[VbVbalrFunctions#37](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#37)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Information.IsArray(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsDate(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsDBNull(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsNothing(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsNumeric(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsReference(System.Object)" />
        <altmember cref="T:System.Object" />
        <altmember cref="M:Microsoft.VisualBasic.Information.TypeName(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="IsNothing">
      <MemberSignature Language="C#" Value="public static bool IsNothing (object Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static bool IsNothing(object Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Information.IsNothing(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsNothing (Expression As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsNothing(System::Object ^ Expression);" />
      <MemberSignature Language="F#" Value="static member IsNothing : obj -&gt; bool" Usage="Microsoft.VisualBasic.Information.IsNothing Expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Expression">Obligatorio. Expresión <see langword="Object" />.</param>
        <summary>Devuelve un valor de tipo <see langword="Boolean" /> que indica si una expresión no tiene ningún objeto asignado.</summary>
        <returns>Devuelve un valor de tipo <see langword="Boolean" /> que indica si una expresión no tiene ningún objeto asignado.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `IsNothing` Devuelve `True` si la expresión representa una variable de objeto que tiene actualmente ningún objeto asignado a él; de lo contrario, devuelve `False`.  
  
 `IsNothing` está diseñado para trabajar con tipos de referencia. Un tipo de valor no puede contener un valor de y vuelve a su valor predeterminado si asigna `Nothing` a él. Si proporciona un tipo de valor en `Expression`, `IsNothing` siempre devuelve `False`.  
  
   
  
## Examples  
 En el ejemplo siguiente se usa el `IsNothing` función para determinar si una variable de objeto se asocia con una instancia de objeto.  
  
 [!code-vb[VbVbalrFunctions#38](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#38)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Information.IsArray(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsDate(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsDBNull(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsError(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsNumeric(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsReference(System.Object)" />
        <altmember cref="T:System.Object" />
        <altmember cref="M:Microsoft.VisualBasic.Information.TypeName(System.Object)" />
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/data-types/value-types-and-reference-types.md">Tipos de valor y tipos de referencia</related>
      </Docs>
    </Member>
    <Member MemberName="IsNumeric">
      <MemberSignature Language="C#" Value="public static bool IsNumeric (object Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static bool IsNumeric(object Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Information.IsNumeric(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsNumeric (Expression As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsNumeric(System::Object ^ Expression);" />
      <MemberSignature Language="F#" Value="static member IsNumeric : obj -&gt; bool" Usage="Microsoft.VisualBasic.Information.IsNumeric Expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Expression">Obligatorio. Expresión <see langword="Object" />.</param>
        <summary>Devuelve un valor de tipo <see langword="Boolean" /> que indica si una expresión puede evaluarse como un número.</summary>
        <returns>Devuelve un valor de tipo <see langword="Boolean" /> que indica si una expresión puede evaluarse como un número.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `IsNumeric` Devuelve `True` si el tipo de datos de `Expression` es `Boolean`, `Byte`, `Decimal`, `Double`, `Integer`, `Long`, `SByte`, `Short`, `Single`, `UInteger`, `ULong`, o `UShort`. También devuelve `True` si `Expression` es un `Char`, `String`, o `Object` que se puede convertir correctamente en un número. `Expression` puede contener caracteres no numéricos. `IsNumeric` Devuelve `True` si `Expression` es una cadena que contiene un número octal o hexadecimal válido. `IsNumeric` También devuelve `True` si `Expression` contiene una expresión numérica válida que comience por un + o - caracteres o contiene comas.  
  
 `IsNumeric` Devuelve `False` si `Expression` es del tipo de datos `Date`. Devuelve `False` si `Expression` es un `Char`, `String`, o `Object` que no se puede convertir correctamente en un número.  
  
   
  
## Examples  
 En el ejemplo siguiente se usa el `IsNumeric` función para determinar si el contenido de una variable se puede evaluar como un número.  
  
 [!code-vb[VbVbalrFunctions#39](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#39)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Information.IsArray(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsDate(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsDBNull(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsError(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsNothing(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsReference(System.Object)" />
        <altmember cref="T:System.Object" />
        <altmember cref="M:Microsoft.VisualBasic.Information.TypeName(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="IsReference">
      <MemberSignature Language="C#" Value="public static bool IsReference (object Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static bool IsReference(object Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Information.IsReference(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsReference (Expression As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsReference(System::Object ^ Expression);" />
      <MemberSignature Language="F#" Value="static member IsReference : obj -&gt; bool" Usage="Microsoft.VisualBasic.Information.IsReference Expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Expression">Obligatorio. Expresión <see langword="Object" />.</param>
        <summary>Devuelve un valor de tipo <see langword="Boolean" /> que indica si una expresión se evalúa como un tipo de referencia.</summary>
        <returns>Devuelve un valor de tipo <see langword="Boolean" /> que indica si una expresión se evalúa como un tipo de referencia.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `IsReference` Devuelve `True` si `Expression` representa un tipo de referencia, como una instancia de clase, un `String` tipo o una matriz de cualquier tipo; de lo contrario, devuelve `False`.  
  
 Un tipo de referencia contiene un puntero a los datos almacenados en otro lugar en la memoria. Un tipo de valor contiene sus propios datos.  
  
   
  
## Examples  
 Este ejemplo se usa el `IsReference` función para comprobar si varias variables hacen referencia a tipos de referencia.  
  
 [!code-vb[VbVbalrFunctions#40](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#40)]  
  
 En el ejemplo anterior, las tres primeras las llamadas a `IsReference` devolver `True`. Devuelve la última llamada `False`, porque `Integer` es un tipo de valor, no un tipo de referencia.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Information.IsArray(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsDate(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsDBNull(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsError(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsNothing(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsNumeric(System.Object)" />
        <altmember cref="T:System.Object" />
        <altmember cref="M:Microsoft.VisualBasic.Information.TypeName(System.Object)" />
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/data-types/value-types-and-reference-types.md">Tipos de valor y tipos de referencia</related>
      </Docs>
    </Member>
    <Member MemberName="LBound">
      <MemberSignature Language="C#" Value="public static int LBound (Array Array, int Rank = 1);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 LBound(class System.Array Array, int32 Rank) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Information.LBound(System.Array,System.Int32)" />
      <MemberSignature Language="F#" Value="static member LBound : Array * int -&gt; int" Usage="Microsoft.VisualBasic.Information.LBound (Array, Rank)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Array" Type="System.Array" />
        <Parameter Name="Rank" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="Array">Obligatorio. Matriz de cualquier tipo de datos. Matriz en la que se desea buscar el subíndice más bajo posible de una dimensión.</param>
        <param name="Rank">Opcional. <see langword="Integer" />. Dimensión para la que se va a devolver el subíndice más bajo posible. Utilice 1 para la primera dimensión, 2 para la segunda, etc. Si se omite <paramref name="Rank" />, se supone que el valor es 1.</param>
        <summary>Devuelve el subíndice más bajo que está disponible para la dimensión indicada de una matriz.</summary>
        <returns><see langword="Integer" />. Valor más bajo que el subíndice de la dimensión especificada puede contener. <see langword="LBound" /> siempre devuelve 0 si se ha inicializado <paramref name="Array" />, incluso si no tiene elementos; por ejemplo, si es una cadena de longitud cero. Si <paramref name="Array" /> es <see langword="Nothing" />, <see langword="LBound" /> genera una excepción <see cref="T:System.ArgumentNullException" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Puesto que los subíndices de matriz empiezan en 0, el menor índice disponible para cada dimensión es siempre 0.  
  
 Para una matriz con las siguientes dimensiones, `LBound` devuelve los valores en la tabla siguiente:  
  
```vb  
Dim a(100, 5, 4) As Byte  
```  
  
|Llamada a LBound|Valor devuelto|  
|--------------------|------------------|  
|`LBound(a, 1)`|0|  
|`LBound(a, 2)`|0|  
|`LBound(a, 3)`|0|  
  
   
  
## Examples  
 En el ejemplo siguiente se usa el `LBound` función para determinar el menor subíndice disponible para la dimensión indicada de una matriz.  
  
 [!code-vb[VbVbalrFunctions#41](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#41)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">El valor de <paramref name="Array" /> es <see langword="Nothing" />.</exception>
        <exception cref="T:System.RankException"><paramref name="Rank" /> es menor que 1 o <paramref name="Rank" /> es mayor que el rango de <paramref name="Array" />.</exception>
        <altmember cref="M:Microsoft.VisualBasic.Information.UBound(System.Array,System.Int32)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.RankException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/statements/dim-statement.md">Instrucción Dim (Visual Basic)</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/statements/redim-statement.md">Instrucción ReDim (Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="QBColor">
      <MemberSignature Language="C#" Value="public static int QBColor (int Color);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 QBColor(int32 Color) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Information.QBColor(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function QBColor (Color As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int QBColor(int Color);" />
      <MemberSignature Language="F#" Value="static member QBColor : int -&gt; int" Usage="Microsoft.VisualBasic.Information.QBColor Color" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Color" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="Color">Obligatorio. Número entero del 0 al 15.</param>
        <summary>Devuelve un valor de tipo <see langword="Integer" /> que representa el código de color RGB correspondiente al número de color especificado.</summary>
        <returns>Devuelve un valor de tipo <see langword="Integer" /> que representa el código de color RGB correspondiente al número de color especificado.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 A partir del byte menos significativo, el valor devuelto especifica los valores de rojos, verde y azules que se usa para establecer el color apropiado en el sistema RGB utilizado por el lenguaje Visual Basic.  
  
 El `Color` argumento tiene estos valores.  
  
|Número|Color|número|Color|  
|------------|-----------|------------|-----------|  
|0|Negro|8|Gris|  
|1|Azul|9|Azul claro|  
|2|Verde|10|Verde claro|  
|3|Aguamarina|11|Cian claro|  
|4|Rojo|12|Rojo claro|  
|5|Magenta|13|Magenta claro|  
|6|Amarillo|14|Amarillo claro|  
|7|Blanco|15|Blanco brillante|  
  
   
  
## Examples  
 Este ejemplo se usa el `QBColor` función puede cambiar el color indicado por `colorInteger`. `QBColor` acepta valores enteros entre 0 y 15.  
  
 [!code-vb[VbVbalrCatRef#29](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#29)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="Color" /> está fuera del intervalo del 0 al 15, ambos inclusive.</exception>
        <altmember cref="M:Microsoft.VisualBasic.Information.RGB(System.Int32,System.Int32,System.Int32)" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <Member MemberName="RGB">
      <MemberSignature Language="C#" Value="public static int RGB (int Red, int Green, int Blue);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 RGB(int32 Red, int32 Green, int32 Blue) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Information.RGB(System.Int32,System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function RGB (Red As Integer, Green As Integer, Blue As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int RGB(int Red, int Green, int Blue);" />
      <MemberSignature Language="F#" Value="static member RGB : int * int * int -&gt; int" Usage="Microsoft.VisualBasic.Information.RGB (Red, Green, Blue)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Red" Type="System.Int32" />
        <Parameter Name="Green" Type="System.Int32" />
        <Parameter Name="Blue" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="Red">Obligatorio. Valor <see langword="Integer" /> comprendido entre 0 y 255, ambos inclusive, que representa la intensidad del componente rojo del color.</param>
        <param name="Green">Obligatorio. Valor <see langword="Integer" /> comprendido entre 0 y 255, ambos inclusive, que representa la intensidad del componente verde del color.</param>
        <param name="Blue">Obligatorio. Valor <see langword="Integer" /> en el intervalo comprendido entre 0 y 255, ambos inclusive, que representa la intensidad del componente azul del color.</param>
        <summary>Devuelve un valor de tipo <see langword="Integer" /> que representa un valor de color RGB de un conjunto de componentes de color rojo, verde y azul.</summary>
        <returns>Devuelve un valor de tipo <see langword="Integer" /> que representa un valor de color RGB de un conjunto de componentes de color rojo, verde y azul.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Métodos de aplicación y las propiedades que aceptan una especificación de color esperan que el valor de color de la especificación para ser un número que representa una RGB. Un valor de color RGB especifica la intensidad relativa de rojo, verde y azul para hacer que un color específico que se mostrará.  
  
 Si el valor de cualquier argumento `RGB` es mayor que 255, 255 se utiliza.  
  
 En la tabla siguiente se enumera algunos colores estándares y los valores de rojos, verde y azules que incluyen.  
  
|Color|Valor de color rojo|Valor de color verde|Valor de color azul|  
|-----------|---------------|-----------------|----------------|  
|Negro|0|0|0|  
|Azul|0|0|255|  
|Verde|0|255|0|  
|Aguamarina|0|255|255|  
|Rojo|255|0|0|  
|Magenta|255|0|255|  
|Amarillo|255|255|0|  
|Blanco|255|255|255|  
  
   
  
## Examples  
 Este ejemplo se muestra cómo el `RGB` función se utiliza para devolver un número entero que representa un `RGB` valor de color.  
  
 [!code-vb[VbVbalrCatRef#18](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#18)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="Green" />, <paramref name="Blue" />, <paramref name="Red" /> está fuera del intervalo del 0 al 255, ambos inclusive.</exception>
        <altmember cref="M:Microsoft.VisualBasic.Information.QBColor(System.Int32)" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <Member MemberName="SystemTypeName">
      <MemberSignature Language="C#" Value="public static string SystemTypeName (string VbName);" />
      <MemberSignature Language="ILAsm" Value=".method public static string SystemTypeName(string VbName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Information.SystemTypeName(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function SystemTypeName (VbName As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ SystemTypeName(System::String ^ VbName);" />
      <MemberSignature Language="F#" Value="static member SystemTypeName : string -&gt; string" Usage="Microsoft.VisualBasic.Information.SystemTypeName VbName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="VbName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="VbName">Obligatorio. Variable de <see langword="String" /> que contiene un nombre de tipo de Visual Basic.</param>
        <summary>Devuelve un valor de tipo <see langword="String" /> que contiene el nombre del tipo de datos del sistema de una variable.</summary>
        <returns>Devuelve un valor de tipo <see langword="String" /> que contiene el nombre del tipo de datos del sistema de una variable.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `SystemTypeName` Devuelve el nombre de tipo de common language runtime (CLR) completo correspondiente al nombre de tipo Visual Basic. Por ejemplo, si `VbName` contiene "Date", `SystemTypeName` devuelve "System.DateTime". Si `SystemTypeName` no reconoce el valor de `VbName`, devuelve `Nothing` (no la cadena "Nothing").  
  
   
  
## Examples  
 En el ejemplo siguiente se usa el `SystemTypeName` función para devolver nombres de tipo de datos de varias variables.  
  
 [!code-vb[VbVbalrFunctions#49](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#49)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.String" />
        <altmember cref="M:Microsoft.VisualBasic.Information.VbTypeName(System.String)" />
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md">Resumen de tipos de datos (Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="TypeName">
      <MemberSignature Language="C#" Value="public static string TypeName (object VarName);" />
      <MemberSignature Language="ILAsm" Value=".method public static string TypeName(object VarName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Information.TypeName(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function TypeName (VarName As Object) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ TypeName(System::Object ^ VarName);" />
      <MemberSignature Language="F#" Value="static member TypeName : obj -&gt; string" Usage="Microsoft.VisualBasic.Information.TypeName VarName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="VarName" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="VarName">Obligatorio. Variable de <see langword="Object" />. Si <see langword="Option Strict" /> es <see langword="Off" />, se puede pasar una variable de cualquier tipo de datos, excepto una estructura.</param>
        <summary>Devuelve un valor de tipo <see langword="String" /> que contiene información del tipo de datos de una variable.</summary>
        <returns>Devuelve un valor de tipo <see langword="String" /> que contiene información del tipo de datos de una variable.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La tabla siguiente muestra la `String` valores devueltos por `TypeName` para el contenido de `VarName`.  
  
|`VarName` Contenido|Cadena devuelta|  
|------------------------|---------------------|  
|16 bits `True` o `False` tipo de valor|"Boolean"|  
|tipo de valor binario de 8 bits|"Byte"|  
|tipo de valor de carácter de 16 bits|"Char"|  
|tipo de valor de hora y fecha de 64 bits|"Fecha"|  
|Tipo de referencia que indica los datos que faltan o que no existentes|"DBNull"|  
|tipo de valor numérico de punto flotante de 128 bits|"Decimal"|  
|tipo de valor numérico de punto flotante de 64 bits|"Double"|  
|tipo de valor entero de 32 bits|"Integer"|  
|Tipo de referencia que apunta a un objeto no especializado|"Object"|  
|Tipo de referencia que apunta a un objeto especializado creado a partir de la clase *objectclass*|"*objectclass*"|  
|tipo de valor entero de 64 bits|"Long"|  
|Tipo de referencia con ningún objeto asignado actualmente|"Nothing"|  
|tipo de valor entero de 8 bits con signo|"SByte"|  
|tipo de valor entero de 16 bits|"Short"|  
|tipo de valor numérico de punto flotante de 32 bits|"Único"|  
|Tipo de referencia que apunta a una cadena de caracteres de 16 bits|"String"|  
|tipo de valor entero sin signo de 32 bits|"UInteger"|  
|tipo de valor entero sin signo de 64 bits|"ULong"|  
|tipo de valor entero de 16 bits sin signo|"UShort"|  
  
 Si `VarName` es una matriz, la cadena devuelta puede ser cualquiera de las cadenas en la tabla anterior con paréntesis vacíos. Por ejemplo, si `VarName` señala a una matriz de enteros, `TypeName` devuelve "Integer()".  
  
 Cuando `TypeName` devuelve el nombre de un tipo de referencia como una clase, devuelve solo el propio nombre, no el nombre completo. Por ejemplo, si `VarName` apunta a un objeto de clase <xref:System.Drawing.Printing.PaperSource?displayProperty=nameWithType>, `TypeName` devuelve "PaperSource". Tenga en cuenta que si la variable se declara como un tipo de clase determinado, pero no tiene un objeto asignado a él, `TypeName` devuelve "Nothing".  
  
   
  
## Examples  
 En el ejemplo siguiente se usa el `TypeName` función para devolver información de tipo de datos de varias variables.  
  
 [!code-vb[VbVbalrFunctions#52](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#52)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Information.IsArray(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsDate(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsDBNull(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsError(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsNothing(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsNumeric(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsReference(System.Object)" />
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md">Resumen de tipos de datos (Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="UBound">
      <MemberSignature Language="C#" Value="public static int UBound (Array Array, int Rank = 1);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 UBound(class System.Array Array, int32 Rank) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Information.UBound(System.Array,System.Int32)" />
      <MemberSignature Language="F#" Value="static member UBound : Array * int -&gt; int" Usage="Microsoft.VisualBasic.Information.UBound (Array, Rank)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Array" Type="System.Array" />
        <Parameter Name="Rank" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="Array">Obligatorio. Matriz de cualquier tipo de datos. Matriz en la que se desea buscar el subíndice más alto posible de una dimensión.</param>
        <param name="Rank">Opcional. <see langword="Integer" />. Dimensión para la que se va a devolver el subíndice más alto posible. Utilice 1 para la primera dimensión, 2 para la segunda, etc. Si se omite <paramref name="Rank" />, se supone que el valor es 1.</param>
        <summary>Devuelve el subíndice más alto que está disponible para la dimensión indicada de una matriz.</summary>
        <returns><see langword="Integer" />. Valor más alto que el subíndice de la dimensión especificada puede contener. Si <paramref name="Array" /> tiene solo un elemento, <see langword="UBound" /> devuelve 0. Si <paramref name="Array" /> no tiene elementos, por ejemplo si es una cadena de longitud cero, <see langword="UBound" /> devuelve -1.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Puesto que los subíndices de matriz empiezan en 0, la longitud de una dimensión es mayor en uno que el mayor subíndice disponible para esa dimensión.  
  
 Para una matriz con las siguientes dimensiones, `UBound` devuelve los valores en la tabla siguiente:  
  
```vb  
Dim a(100, 5, 4) As Byte  
```  
  
|Llamada a UBound|Valor devuelto|  
|--------------------|------------------|  
|`UBound(a, 1)`|100|  
|`UBound(a, 2)`|5|  
|`UBound(a, 3)`|4|  
  
 Puede usar `UBound` para determinar el total de número de elementos en una matriz, pero debe ajustar el valor que devuelve a la cuenta el hecho de que el subíndice empieza en 0. En el ejemplo siguiente se calcula el tamaño total de la matriz `a` en el ejemplo anterior:  
  
```vb  
Dim total As Integer  
total = (UBound(A, 1) + 1) * (UBound(A, 2) + 1) * (UBound(A, 3) + 1)  
```  
  
 Calcula el valor para `total` es 3030, que es 101 * 6 * 5.  
  
   
  
## Examples  
 En el ejemplo siguiente se usa el `UBound` función para determinar el mayor subíndice disponible para la dimensión indicada de una matriz.  
  
 [!code-vb[VbVbalrFunctions#53](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#53)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">El valor de <paramref name="Array" /> es <see langword="Nothing" />.</exception>
        <exception cref="T:System.RankException"><paramref name="Rank" /> es menor que 1 o <paramref name="Rank" /> es mayor que el rango de <paramref name="Array" />.</exception>
        <altmember cref="M:Microsoft.VisualBasic.Information.LBound(System.Array,System.Int32)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.RankException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/statements/dim-statement.md">Instrucción Dim (Visual Basic)</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/statements/redim-statement.md">Instrucción ReDim (Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="VarType">
      <MemberSignature Language="C#" Value="public static Microsoft.VisualBasic.VariantType VarType (object VarName);" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype Microsoft.VisualBasic.VariantType VarType(object VarName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Information.VarType(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function VarType (VarName As Object) As VariantType" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::VisualBasic::VariantType VarType(System::Object ^ VarName);" />
      <MemberSignature Language="F#" Value="static member VarType : obj -&gt; Microsoft.VisualBasic.VariantType" Usage="Microsoft.VisualBasic.Information.VarType VarName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.VisualBasic.VariantType</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="VarName" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="VarName">Obligatorio. Variable de <see langword="Object" />. Si <see langword="Option Strict" /> es <see langword="Off" />, se puede pasar una variable de cualquier tipo de datos, excepto una estructura.</param>
        <summary>Devuelve un valor de tipo <see langword="Integer" /> que contiene la clasificación del tipo de datos de una variable.</summary>
        <returns>Devuelve un valor de tipo <see langword="Integer" /> que contiene la clasificación del tipo de datos de una variable.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El valor entero devuelto por `VarType` es un miembro de la <xref:Microsoft.VisualBasic.VariantType>.  
  
 La siguiente tabla muestra los valores devueltos por `VarType` para casos especiales de `VarName`.  
  
|Tipo de datos representado por `VarName`|Valor devuelto por `VarType`|  
|----------------------------------------|---------------------------------|  
|[Nothing](~/docs/visual-basic/language-reference/nothing.md)|`VariantType.Object`|  
|<xref:System.DBNull>|`VariantType.Null`|  
|Enumeración|Tipo de datos subyacente (`SByte`, `Byte`, `Short`, `UShort`, `Integer`, `UInteger`, `Long`, o `ULong`)|  
|Matriz|OR bit a bit de tipo de elemento de matriz y `VariantType.Array`|  
|Matriz de matrices|Operación OR bit a bit de `VariantType.Object` y `VariantType.Array`|  
|Estructura (<xref:System.ValueType?displayProperty=nameWithType>)|`VariantType.UserDefinedType`|  
|<xref:System.Exception>|`VariantType.Error`|  
|Desconocido|`VariantType.Object`|  
  
   
  
## Examples  
 En el ejemplo siguiente se usa el `VarType` función para devolver información de clasificación del tipo de datos de varias variables.  
  
 [!code-vb[VbVbalrFunctions#55](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#55)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Object" />
        <altmember cref="T:Microsoft.VisualBasic.VariantType" />
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md">Resumen de tipos de datos (Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="VbTypeName">
      <MemberSignature Language="C#" Value="public static string VbTypeName (string UrtName);" />
      <MemberSignature Language="ILAsm" Value=".method public static string VbTypeName(string UrtName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Information.VbTypeName(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function VbTypeName (UrtName As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ VbTypeName(System::String ^ UrtName);" />
      <MemberSignature Language="F#" Value="static member VbTypeName : string -&gt; string" Usage="Microsoft.VisualBasic.Information.VbTypeName UrtName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="UrtName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="UrtName">Obligatorio. Variable de tipo <see langword="String" /> que contiene un nombre de tipo utilizado por Common Language Runtime.</param>
        <summary>Devuelve un valor de tipo <see langword="String" /> que contiene el nombre del tipo de datos de Visual Basic de una variable.</summary>
        <returns>Devuelve un valor de tipo <see langword="String" /> que contiene el nombre del tipo de datos de Visual Basic de una variable.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `VbTypeName` Devuelve el nombre de tipo Visual Basic correspondiente al nombre de tipo de common language runtime. Por ejemplo, si `UrtName` contiene "Int32" o "System.Int32", `VbTypeName` devuelve "Integer". Si `VbTypeName` no reconoce el valor de `UrtName`, devuelve `Nothing` (no la cadena "Nothing").  
  
 El nombre de tipo en `UrtName` puede obtenerse desde diversos orígenes, por ejemplo el <xref:System.Reflection.MemberInfo.Name%2A> propiedad en el <xref:System.Reflection.MemberInfo> matriz de los <xref:System.Type> clase.  
  
   
  
## Examples  
 En el ejemplo siguiente se usa el `VbTypeName` función para devolver nombres de tipo de datos de varias variables.  
  
 [!code-vb[VbVbalrFunctions#56](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#56)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.String" />
        <altmember cref="M:Microsoft.VisualBasic.Information.SystemTypeName(System.String)" />
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md">Resumen de tipos de datos (Visual Basic)</related>
      </Docs>
    </Member>
  </Members>
</Type>