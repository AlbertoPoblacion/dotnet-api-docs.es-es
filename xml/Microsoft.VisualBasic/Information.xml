<Type Name="Information" FullName="Microsoft.VisualBasic.Information">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="1078adb483e226f7a039b4efdff277139946d6a5" />
    <Meta Name="ms.sourcegitcommit" Value="3907f9a5780957d9c85af2e54c0a5bc2a5bf19ab" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="es-ES" />
    <Meta Name="ms.lasthandoff" Value="06/14/2018" />
    <Meta Name="ms.locfileid" Value="34173943" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class Information" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit Information extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.VisualBasic.Information" />
  <TypeSignature Language="VB.NET" Value="Public Module Information" />
  <TypeSignature Language="C++ CLI" Value="public ref class Information sealed" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.VisualBasic</AssemblyName>
    <AssemblyVersion>10.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>Microsoft.VisualBasic.CompilerServices.StandardModule</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <span data-ttu-id="20d40-101">El módulo <see langword="Information" /> contiene los procedimientos que se utilizan para devolver o comprobar información.</span>
      <span class="sxs-lookup">
        <span data-stu-id="20d40-101">The <see langword="Information" /> module contains the procedures used to return, test for, or verify information.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="20d40-102">Este módulo admite las palabras clave del lenguaje Visual Basic y miembros de la biblioteca de tiempo de ejecución que proporcionan información de error, validan los datos, determinan los límites de matriz y recuperar información de color y tipo de datos.</span><span class="sxs-lookup"><span data-stu-id="20d40-102">This module supports the Visual Basic language keywords and run-time library members that provide error information, validate data, determine array bounds, and retrieve data type and color information.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="20d40-103">En el ejemplo siguiente se usa el `VbTypeName` función para devolver los nombres de tipo de datos de varias variables.</span><span class="sxs-lookup"><span data-stu-id="20d40-103">The following example uses the `VbTypeName` function to return data type names for several variables.</span></span>  
  
```vb  
Dim sysDateName As String = "System.DateTime"  
Dim sysShortName As String = "Int16"  
Dim sysBadName As String = "Nonsense"  
Dim testVbName As String  
testVbName = VbTypeName(sysDateName)   
' Returns "Date".  
testVbName = VbTypeName(sysShortName)   
' Returns "Short".  
testVbName = VbTypeName(sysBadName)   
' Returns Nothing.  
```  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="Erl">
      <MemberSignature Language="C#" Value="public static int Erl ();" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Erl() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Information.Erl" />
      <MemberSignature Language="VB.NET" Value="Public Function Erl () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Erl();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="20d40-104">Devuelve un entero que indica el número de línea de la última instrucción ejecutada</span>
          <span class="sxs-lookup">
            <span data-stu-id="20d40-104">Returns an integer indicating the line number of the last executed statement.</span>
          </span>
          <span data-ttu-id="20d40-105">Sólo lectura.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20d40-105">Read-only.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="20d40-106">Devuelve un entero que indica el número de línea de la última instrucción ejecutada</span>
          <span class="sxs-lookup">
            <span data-stu-id="20d40-106">Returns an integer indicating the line number of the last executed statement.</span>
          </span>
          <span data-ttu-id="20d40-107">Sólo lectura.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20d40-107">Read-only.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="20d40-108">Si Visual Basic no encuentra números de línea, devuelve 0.</span><span class="sxs-lookup"><span data-stu-id="20d40-108">If Visual Basic encounters no line numbers, it returns 0.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="20d40-109">Este ejemplo se utiliza la `Erl` propiedad para indicar el número de línea.</span><span class="sxs-lookup"><span data-stu-id="20d40-109">This example uses the `Erl` property to indicate the line number.</span></span>  
  
 [!code-vb[VbVbalrErrorHandling#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrErrorHandling/VB/Class1.vb#6)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:Microsoft.VisualBasic.ErrObject" />
        <altmember cref="M:Microsoft.VisualBasic.Conversion.ErrorToString" />
      </Docs>
    </Member>
    <Member MemberName="Err">
      <MemberSignature Language="C#" Value="public static Microsoft.VisualBasic.ErrObject Err ();" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.VisualBasic.ErrObject Err() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Information.Err" />
      <MemberSignature Language="VB.NET" Value="Public Function Err () As ErrObject" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::VisualBasic::ErrObject ^ Err();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.VisualBasic.ErrObject</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="20d40-110">Contiene información sobre los errores en tiempo de ejecución.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20d40-110">Contains information about run-time errors.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="20d40-111">Contiene información sobre los errores en tiempo de ejecución.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20d40-111">Contains information about run-time errors.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="20d40-112">Las propiedades de la `Err` objeto se establecen mediante el generador de un error, Visual Basic, un objeto o el programador.</span><span class="sxs-lookup"><span data-stu-id="20d40-112">The properties of the `Err` object are set by the generator of an error—Visual Basic, an object, or the programmer.</span></span>  
  
 <span data-ttu-id="20d40-113">Cuando se produce un error en tiempo de ejecución, las propiedades de la `Err` objeto se rellenan con información que identifica de forma única el error y que puede usar para controlar el error.</span><span class="sxs-lookup"><span data-stu-id="20d40-113">When a run-time error occurs, the properties of the `Err` object are filled with information that uniquely identifies the error and that you can use to handle the error.</span></span> <span data-ttu-id="20d40-114">Para generar un error en tiempo de ejecución en el código, use la `Raise` método.</span><span class="sxs-lookup"><span data-stu-id="20d40-114">To generate a run-time error in your code, use the `Raise` method.</span></span>  
  
 <span data-ttu-id="20d40-115">El `Err` propiedades del objeto se restablecen en cero o cadenas de longitud cero ("") después de un `Exit Sub`, `Exit Function`, `Exit Property`, o `Resume Next` instrucción dentro de una rutina de control de errores.</span><span class="sxs-lookup"><span data-stu-id="20d40-115">The `Err` object's properties are reset to zero or zero-length strings ("") after an `Exit Sub`, `Exit Function`, `Exit Property`, or `Resume Next` statement within an error-handling routine.</span></span> <span data-ttu-id="20d40-116">Uso de cualquier forma de la `Resume` instrucción fuera de una rutina de control de errores no se restablecerá la `Err` propiedades del objeto.</span><span class="sxs-lookup"><span data-stu-id="20d40-116">Using any form of the `Resume` statement outside of an error-handling routine will not reset the `Err` object's properties.</span></span> <span data-ttu-id="20d40-117">Puede usar el `Clear` método para restablecer explícitamente `Err`.</span><span class="sxs-lookup"><span data-stu-id="20d40-117">You can use the `Clear` method to explicitly reset `Err`.</span></span>  
  
 <span data-ttu-id="20d40-118">Use la `Raise` método en lugar del `Error` instrucción para generar errores en tiempo de ejecución para errores del sistema y módulos de clase.</span><span class="sxs-lookup"><span data-stu-id="20d40-118">Use the `Raise` method rather than the `Error` statement to generate run-time errors for system errors and class modules.</span></span> <span data-ttu-id="20d40-119">La decisión sobre si se debe usar el `Raise` método en otro código depende de la riqueza de información que desea devolver.</span><span class="sxs-lookup"><span data-stu-id="20d40-119">Your decision about whether to use the `Raise` method in other code depends on the richness of the information you want to return.</span></span>  
  
 <span data-ttu-id="20d40-120">El `Err` es un objeto intrínseco con ámbito global.</span><span class="sxs-lookup"><span data-stu-id="20d40-120">The `Err` object is an intrinsic object with global scope.</span></span> <span data-ttu-id="20d40-121">Por lo tanto, no es necesario crear una instancia del mismo en el código.</span><span class="sxs-lookup"><span data-stu-id="20d40-121">Therefore, you do not need to create an instance of it in your code.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="20d40-122">Este ejemplo utiliza las propiedades de la `Err` objeto en la creación de un cuadro de diálogo de mensaje de error.</span><span class="sxs-lookup"><span data-stu-id="20d40-122">This example uses the properties of the `Err` object in constructing an error-message dialog box.</span></span> <span data-ttu-id="20d40-123">Tenga en cuenta que si usa el `Clear` método primero, cuando se genera un error de Visual Basic con el `Raise` método, valores predeterminados de Visual Basic se convierten en las propiedades de la `Err` objeto.</span><span class="sxs-lookup"><span data-stu-id="20d40-123">Notice that if you use the `Clear` method first, when you generate a Visual Basic error with the `Raise` method, Visual Basic's default values become the properties of the `Err` object.</span></span>  
  
 [!code-vb[VbVbalrErrorHandling#3](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrErrorHandling/VB/Class1.vb#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsArray">
      <MemberSignature Language="C#" Value="public static bool IsArray (object VarName);" />
      <MemberSignature Language="ILAsm" Value=".method public static bool IsArray(object VarName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Information.IsArray(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsArray (VarName As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsArray(System::Object ^ VarName);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="VarName" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="VarName">
          <span data-ttu-id="20d40-124">Obligatorio.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20d40-124">Required.</span>
          </span>
          <span data-ttu-id="20d40-125">Variable de <see langword="Object" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20d40-125">
              <see langword="Object" /> variable.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="20d40-126">Devuelve un valor de tipo <see langword="Boolean" /> que indica si una variable apunta a una matriz.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20d40-126">Returns a <see langword="Boolean" /> value indicating whether a variable points to an array.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="20d40-127">Devuelve un valor de tipo <see langword="Boolean" /> que indica si una variable apunta a una matriz.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20d40-127">Returns a <see langword="Boolean" /> value indicating whether a variable points to an array.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="20d40-128">`IsArray` Devuelve `True` si la variable apunta a una matriz; en caso contrario, devuelve `False`.</span><span class="sxs-lookup"><span data-stu-id="20d40-128">`IsArray` returns `True` if the variable points to an array; otherwise, it returns `False`.</span></span> <span data-ttu-id="20d40-129">`IsArray` es especialmente útil con objetos que podrían contener matrices.</span><span class="sxs-lookup"><span data-stu-id="20d40-129">`IsArray` is especially useful with objects that might contain arrays.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="20d40-130">Este ejemplo se utiliza el `IsArray` para comprobar si varias variables hacen referencia a una matriz.</span><span class="sxs-lookup"><span data-stu-id="20d40-130">This example uses the `IsArray` function to check if several variables refer to an array.</span></span>  
  
 [!code-vb[VbVbalrFunctions#34](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#34)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Information.IsDate(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsDBNull(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsError(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsNothing(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsNumeric(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsReference(System.Object)" />
        <altmember cref="T:System.Object" />
        <altmember cref="M:Microsoft.VisualBasic.Information.TypeName(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="IsDate">
      <MemberSignature Language="C#" Value="public static bool IsDate (object Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static bool IsDate(object Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Information.IsDate(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsDate (Expression As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsDate(System::Object ^ Expression);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Expression">
          <span data-ttu-id="20d40-131">Obligatorio.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20d40-131">Required.</span>
          </span>
          <span data-ttu-id="20d40-132">Expresión <see langword="Object" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20d40-132">
              <see langword="Object" /> expression.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="20d40-133">Devuelve un valor de tipo <see langword="Boolean" /> que indica si una expresión representa un valor de <see langword="Date" /> válido.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20d40-133">Returns a <see langword="Boolean" /> value indicating whether an expression represents a valid <see langword="Date" /> value.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="20d40-134">Devuelve un valor de tipo <see langword="Boolean" /> que indica si una expresión representa un valor de <see langword="Date" /> válido.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20d40-134">Returns a <see langword="Boolean" /> value indicating whether an expression represents a valid <see langword="Date" /> value.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="20d40-135">`IsDate` Devuelve `True` si `Expression` reviste la <xref:System.DateTime> datos escriba o se puede convertir a él; en caso contrario, devuelve `False`.</span><span class="sxs-lookup"><span data-stu-id="20d40-135">`IsDate` returns `True` if `Expression` is of the <xref:System.DateTime> data type or can be converted to it; otherwise, it returns `False`.</span></span>  
  
 <span data-ttu-id="20d40-136">El <xref:System.DateTime> tipo de datos contiene un valor de fecha y un valor de hora.</span><span class="sxs-lookup"><span data-stu-id="20d40-136">The <xref:System.DateTime> data type holds both a date value and a time value.</span></span> <span data-ttu-id="20d40-137">`IsDate` Devuelve `True` si `Expression` representa una fecha válida, una hora válida, o una fecha válida y la hora.</span><span class="sxs-lookup"><span data-stu-id="20d40-137">`IsDate` returns `True` if `Expression` represents a valid date, a valid time, or a valid date and time.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="20d40-138">En el ejemplo siguiente se usa el `IsDate` función para determinar si varias variables representan válido <xref:System.DateTime> valores.</span><span class="sxs-lookup"><span data-stu-id="20d40-138">The following example uses the `IsDate` function to determine if several variables represent valid <xref:System.DateTime> values.</span></span>  
  
 [!code-vb[VbVbalrFunctions#35](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#35)]  
  
 <span data-ttu-id="20d40-139">En el ejemplo anterior, `IsDate` devuelve `True` de las primeras cuatro llamadas y `False` de la última llamada.</span><span class="sxs-lookup"><span data-stu-id="20d40-139">In the preceding example, `IsDate` returns `True` for the first four calls and `False` for the last call.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Information.IsArray(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsDBNull(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsError(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsNothing(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsNumeric(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsReference(System.Object)" />
        <altmember cref="T:System.Object" />
        <altmember cref="T:System.DateTime" />
        <altmember cref="M:Microsoft.VisualBasic.Information.TypeName(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="IsDBNull">
      <MemberSignature Language="C#" Value="public static bool IsDBNull (object Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static bool IsDBNull(object Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Information.IsDBNull(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsDBNull (Expression As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsDBNull(System::Object ^ Expression);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Expression">
          <span data-ttu-id="20d40-140">Obligatorio.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20d40-140">Required.</span>
          </span>
          <span data-ttu-id="20d40-141">Expresión <see langword="Object" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20d40-141">
              <see langword="Object" /> expression.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="20d40-142">Devuelve un valor de tipo <see langword="Boolean" /> que indica si una expresión se evalúa como clase <see cref="T:System.DBNull" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20d40-142">Returns a <see langword="Boolean" /> value indicating whether an expression evaluates to the <see cref="T:System.DBNull" /> class.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="20d40-143">Devuelve un valor de tipo <see langword="Boolean" /> que indica si una expresión se evalúa como clase <see cref="T:System.DBNull" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20d40-143">Returns a <see langword="Boolean" /> value indicating whether an expression evaluates to the <see cref="T:System.DBNull" /> class.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="20d40-144">`IsDBNull` Devuelve `True` si el tipo de datos de `Expression` se evalúa como el <xref:System.DBNull> escriba; en caso contrario, `IsDBNull` devuelve `False`.</span><span class="sxs-lookup"><span data-stu-id="20d40-144">`IsDBNull` returns `True` if the data type of `Expression` evaluates to the <xref:System.DBNull> type; otherwise, `IsDBNull` returns `False`.</span></span>  
  
 <span data-ttu-id="20d40-145">El <xref:System.DBNull?displayProperty=nameWithType> valor indica que el `Object` representa datos que faltan o que no existe.</span><span class="sxs-lookup"><span data-stu-id="20d40-145">The <xref:System.DBNull?displayProperty=nameWithType> value indicates that the `Object` represents missing or nonexistent data.</span></span> <span data-ttu-id="20d40-146">`DBNull` no es igual a `Nothing`, lo que indica que una variable no se ha inicializado todavía.</span><span class="sxs-lookup"><span data-stu-id="20d40-146">`DBNull` is not the same as `Nothing`, which indicates that a variable has not yet been initialized.</span></span> <span data-ttu-id="20d40-147">`DBNull` También no es el mismo que una cadena de longitud cero (`""`), que a veces se conoce como una cadena nula.</span><span class="sxs-lookup"><span data-stu-id="20d40-147">`DBNull` is also not the same as a zero-length string (`""`), which is sometimes referred to as a null string.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="20d40-148">Este ejemplo se utiliza la `IsDBNull` función para determinar si una variable se evalúa como `DBNull`.</span><span class="sxs-lookup"><span data-stu-id="20d40-148">This example uses the `IsDBNull` function to determine if a variable evaluates to `DBNull`.</span></span>  
  
 [!code-vb[VbVbalrFunctions#36](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#36)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Information.IsArray(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsDate(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsError(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsNothing(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsNumeric(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsReference(System.Object)" />
        <altmember cref="T:System.Object" />
        <altmember cref="T:System.DBNull" />
        <altmember cref="M:Microsoft.VisualBasic.Information.TypeName(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="IsError">
      <MemberSignature Language="C#" Value="public static bool IsError (object Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static bool IsError(object Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Information.IsError(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsError (Expression As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsError(System::Object ^ Expression);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Expression">
          <span data-ttu-id="20d40-149">Obligatorio.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20d40-149">Required.</span>
          </span>
          <span data-ttu-id="20d40-150">Expresión <see langword="Object" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20d40-150">
              <see langword="Object" /> expression.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="20d40-151">Devuelve un valor de tipo <see langword="Boolean" /> que indica si una expresión es un tipo de excepción.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20d40-151">Returns a <see langword="Boolean" /> value indicating whether an expression is an exception type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="20d40-152">Devuelve un valor de tipo <see langword="Boolean" /> que indica si una expresión es un tipo de excepción.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20d40-152">Returns a <see langword="Boolean" /> value indicating whether an expression is an exception type.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="20d40-153">`IsError` Devuelve `True` si la expresión representa un `Object` variable que se deriva de la <xref:System.Exception> clase en el <xref:System> espacio de nombres.</span><span class="sxs-lookup"><span data-stu-id="20d40-153">`IsError` returns `True` if the expression represents an `Object` variable that derives from the <xref:System.Exception> class in the <xref:System> namespace.</span></span>  
  
 <span data-ttu-id="20d40-154">Una excepción que se deriva de <xref:System.Exception?displayProperty=nameWithType> puede detectar con la `Try...Catch...Finally` las instrucciones.</span><span class="sxs-lookup"><span data-stu-id="20d40-154">An exception that derives from <xref:System.Exception?displayProperty=nameWithType> can be caught with the `Try...Catch...Finally` statements.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="20d40-155">En el ejemplo siguiente se utiliza el `IsError` para comprobar si una expresión representa una excepción del sistema.</span><span class="sxs-lookup"><span data-stu-id="20d40-155">The following example uses the `IsError` function to check if an expression represents a system exception.</span></span>  
  
 [!code-vb[VbVbalrFunctions#37](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#37)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Information.IsArray(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsDate(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsDBNull(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsNothing(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsNumeric(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsReference(System.Object)" />
        <altmember cref="T:System.Object" />
        <altmember cref="M:Microsoft.VisualBasic.Information.TypeName(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="IsNothing">
      <MemberSignature Language="C#" Value="public static bool IsNothing (object Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static bool IsNothing(object Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Information.IsNothing(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsNothing (Expression As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsNothing(System::Object ^ Expression);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Expression">
          <span data-ttu-id="20d40-156">Obligatorio.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20d40-156">Required.</span>
          </span>
          <span data-ttu-id="20d40-157">Expresión <see langword="Object" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20d40-157">
              <see langword="Object" /> expression.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="20d40-158">Devuelve un valor de tipo <see langword="Boolean" /> que indica si una expresión no tiene ningún objeto asignado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20d40-158">Returns a <see langword="Boolean" /> value indicating whether an expression has no object assigned to it.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="20d40-159">Devuelve un valor de tipo <see langword="Boolean" /> que indica si una expresión no tiene ningún objeto asignado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20d40-159">Returns a <see langword="Boolean" /> value indicating whether an expression has no object assigned to it.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="20d40-160">`IsNothing` Devuelve `True` si la expresión representa una variable de objeto que actualmente no tiene ningún objeto asignado a él; en caso contrario, devuelve `False`.</span><span class="sxs-lookup"><span data-stu-id="20d40-160">`IsNothing` returns `True` if the expression represents an object variable that currently has no object assigned to it; otherwise, it returns `False`.</span></span>  
  
 <span data-ttu-id="20d40-161">`IsNothing` está diseñado para trabajar con tipos de referencia.</span><span class="sxs-lookup"><span data-stu-id="20d40-161">`IsNothing` is intended to work on reference types.</span></span> <span data-ttu-id="20d40-162">Un tipo de valor no puede contener un valor de y vuelve a su valor predeterminado si asigna `Nothing` a él.</span><span class="sxs-lookup"><span data-stu-id="20d40-162">A value type cannot hold a value of  and reverts to its default value if you assign `Nothing` to it.</span></span> <span data-ttu-id="20d40-163">Si se proporciona un tipo de valor en `Expression`, `IsNothing` siempre devuelve `False`.</span><span class="sxs-lookup"><span data-stu-id="20d40-163">If you supply a value type in `Expression`, `IsNothing` always returns `False`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="20d40-164">En el ejemplo siguiente se usa el `IsNothing` función para determinar si una variable de objeto está asociada a cualquier instancia de objeto.</span><span class="sxs-lookup"><span data-stu-id="20d40-164">The following example uses the `IsNothing` function to determine if an object variable is associated with any object instance.</span></span>  
  
 [!code-vb[VbVbalrFunctions#38](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#38)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Information.IsArray(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsDate(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsDBNull(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsError(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsNumeric(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsReference(System.Object)" />
        <altmember cref="T:System.Object" />
        <altmember cref="M:Microsoft.VisualBasic.Information.TypeName(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="IsNumeric">
      <MemberSignature Language="C#" Value="public static bool IsNumeric (object Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static bool IsNumeric(object Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Information.IsNumeric(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsNumeric (Expression As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsNumeric(System::Object ^ Expression);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Expression">
          <span data-ttu-id="20d40-165">Obligatorio.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20d40-165">Required.</span>
          </span>
          <span data-ttu-id="20d40-166">Expresión <see langword="Object" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20d40-166">
              <see langword="Object" /> expression.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="20d40-167">Devuelve un valor de tipo <see langword="Boolean" /> que indica si una expresión puede evaluarse como un número.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20d40-167">Returns a <see langword="Boolean" /> value indicating whether an expression can be evaluated as a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="20d40-168">Devuelve un valor de tipo <see langword="Boolean" /> que indica si una expresión puede evaluarse como un número.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20d40-168">Returns a <see langword="Boolean" /> value indicating whether an expression can be evaluated as a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="20d40-169">`IsNumeric` Devuelve `True` si el tipo de datos de `Expression` es `Boolean`, `Byte`, `Decimal`, `Double`, `Integer`, `Long`, `SByte`, `Short`, `Single`, `UInteger`, `ULong`, o `UShort`.</span><span class="sxs-lookup"><span data-stu-id="20d40-169">`IsNumeric` returns `True` if the data type of `Expression` is `Boolean`, `Byte`, `Decimal`, `Double`, `Integer`, `Long`, `SByte`, `Short`, `Single`, `UInteger`, `ULong`, or `UShort`.</span></span> <span data-ttu-id="20d40-170">También devuelve `True` si `Expression` es un `Char`, `String`, o `Object` que se puede convertir correctamente en un número.</span><span class="sxs-lookup"><span data-stu-id="20d40-170">It also returns `True` if `Expression` is a `Char`, `String`, or `Object` that can be successfully converted to a number.</span></span> <span data-ttu-id="20d40-171">`Expression` puede contener caracteres no numéricos.</span><span class="sxs-lookup"><span data-stu-id="20d40-171">`Expression` can contain non-numeric characters.</span></span> <span data-ttu-id="20d40-172">`IsNumeric` Devuelve `True` si `Expression` es una cadena que contiene un número octal o hexadecimal válido.</span><span class="sxs-lookup"><span data-stu-id="20d40-172">`IsNumeric` returns `True` if `Expression` is a string that contains a valid hexadecimal or octal number.</span></span> <span data-ttu-id="20d40-173">`IsNumeric` También devuelve `True` si `Expression` contiene una expresión numérica válida que comience por un + o - caracteres o contiene comas.</span><span class="sxs-lookup"><span data-stu-id="20d40-173">`IsNumeric` also returns `True` if `Expression` contains a valid numeric expression that begins with a + or - character or contains commas.</span></span>  
  
 <span data-ttu-id="20d40-174">`IsNumeric` Devuelve `False` si `Expression` es del tipo de datos `Date`.</span><span class="sxs-lookup"><span data-stu-id="20d40-174">`IsNumeric` returns `False` if `Expression` is of data type `Date`.</span></span> <span data-ttu-id="20d40-175">Devuelve `False` si `Expression` es un `Char`, `String`, o `Object` que no se puede convertir correctamente en un número.</span><span class="sxs-lookup"><span data-stu-id="20d40-175">It returns `False` if `Expression` is a `Char`, `String`, or `Object` that cannot be successfully converted to a number.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="20d40-176">En el ejemplo siguiente se usa el `IsNumeric` función para determinar si el contenido de una variable se puede evaluar como un número.</span><span class="sxs-lookup"><span data-stu-id="20d40-176">The following example uses the `IsNumeric` function to determine if the contents of a variable can be evaluated as a number.</span></span>  
  
 [!code-vb[VbVbalrFunctions#39](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#39)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Information.IsArray(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsDate(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsDBNull(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsError(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsNothing(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsReference(System.Object)" />
        <altmember cref="T:System.Object" />
        <altmember cref="M:Microsoft.VisualBasic.Information.TypeName(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="IsReference">
      <MemberSignature Language="C#" Value="public static bool IsReference (object Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static bool IsReference(object Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Information.IsReference(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsReference (Expression As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsReference(System::Object ^ Expression);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Expression">
          <span data-ttu-id="20d40-177">Obligatorio.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20d40-177">Required.</span>
          </span>
          <span data-ttu-id="20d40-178">Expresión <see langword="Object" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20d40-178">
              <see langword="Object" /> expression.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="20d40-179">Devuelve un valor de tipo <see langword="Boolean" /> que indica si una expresión se evalúa como un tipo de referencia.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20d40-179">Returns a <see langword="Boolean" /> value indicating whether an expression evaluates to a reference type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="20d40-180">Devuelve un valor de tipo <see langword="Boolean" /> que indica si una expresión se evalúa como un tipo de referencia.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20d40-180">Returns a <see langword="Boolean" /> value indicating whether an expression evaluates to a reference type.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="20d40-181">`IsReference` Devuelve `True` si `Expression` representa un tipo de referencia, como una instancia de clase, un `String` tipo o una matriz de cualquier tipo; de lo contrario, devuelve `False`.</span><span class="sxs-lookup"><span data-stu-id="20d40-181">`IsReference` returns `True` if `Expression` represents a reference type, such as a class instance, a `String` type, or an array of any type; otherwise, it returns `False`.</span></span>  
  
 <span data-ttu-id="20d40-182">Un tipo de referencia contiene un puntero a los datos almacenados en otra ubicación en la memoria.</span><span class="sxs-lookup"><span data-stu-id="20d40-182">A reference type contains a pointer to data stored elsewhere in memory.</span></span> <span data-ttu-id="20d40-183">Un tipo de valor contiene sus propios datos.</span><span class="sxs-lookup"><span data-stu-id="20d40-183">A value type contains its own data.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="20d40-184">Este ejemplo se utiliza el `IsReference` para comprobar si varias variables hacen referencia a tipos de referencia.</span><span class="sxs-lookup"><span data-stu-id="20d40-184">This example uses the `IsReference` function to check if several variables refer to reference types.</span></span>  
  
 [!code-vb[VbVbalrFunctions#40](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#40)]  
  
 <span data-ttu-id="20d40-185">En el ejemplo anterior, las tres primeras llamadas a `IsReference` devolver `True`.</span><span class="sxs-lookup"><span data-stu-id="20d40-185">In the preceding example, the first three calls to `IsReference` return `True`.</span></span> <span data-ttu-id="20d40-186">Devuelve la última llamada `False`, porque `Integer` es un tipo de valor, no un tipo de referencia.</span><span class="sxs-lookup"><span data-stu-id="20d40-186">The last call returns `False`, because `Integer` is a value type, not a reference type.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Information.IsArray(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsDate(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsDBNull(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsError(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsNothing(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsNumeric(System.Object)" />
        <altmember cref="T:System.Object" />
        <altmember cref="M:Microsoft.VisualBasic.Information.TypeName(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="LBound">
      <MemberSignature Language="C#" Value="public static int LBound (Array Array, int Rank = 1);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 LBound(class System.Array Array, int32 Rank) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Information.LBound(System.Array,System.Int32)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Array" Type="System.Array" />
        <Parameter Name="Rank" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="Array">
          <span data-ttu-id="20d40-187">Obligatorio.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20d40-187">Required.</span>
          </span>
          <span data-ttu-id="20d40-188">Matriz de cualquier tipo de datos.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20d40-188">Array of any data type.</span>
          </span>
          <span data-ttu-id="20d40-189">Matriz en la que se desea buscar el subíndice más bajo posible de una dimensión.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20d40-189">The array in which you want to find the lowest possible subscript of a dimension.</span>
          </span>
        </param>
        <param name="Rank">
          <span data-ttu-id="20d40-190">Opcional.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20d40-190">Optional.</span>
          </span>
          <span data-ttu-id="20d40-191">
            <see langword="Integer" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20d40-191">
              <see langword="Integer" />.</span>
          </span>
          <span data-ttu-id="20d40-192">Dimensión para la que se va a devolver el subíndice más bajo posible.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20d40-192">The dimension for which the lowest possible subscript is to be returned.</span>
          </span>
          <span data-ttu-id="20d40-193">Utilice 1 para la primera dimensión, 2 para la segunda, etc.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20d40-193">Use 1 for the first dimension, 2 for the second, and so on.</span>
          </span>
          <span data-ttu-id="20d40-194">Si se omite <c>Rank</c>, se supone que el valor es 1.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20d40-194">If <c>Rank</c> is omitted, 1 is assumed.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="20d40-195">Devuelve el subíndice más bajo que está disponible para la dimensión indicada de una matriz.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20d40-195">Returns the lowest available subscript for the indicated dimension of an array.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="20d40-196">
            <see langword="Integer" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20d40-196">
              <see langword="Integer" />.</span>
          </span>
          <span data-ttu-id="20d40-197">Valor más bajo que el subíndice de la dimensión especificada puede contener.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20d40-197">The lowest value the subscript for the specified dimension can contain.</span>
          </span>
          <span data-ttu-id="20d40-198">
            <see langword="LBound" /> siempre devuelve 0 si se ha inicializado <paramref name="Array" />, incluso si no tiene elementos; por ejemplo, si es una cadena de longitud cero.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20d40-198">
              <see langword="LBound" /> always returns 0 as long as <paramref name="Array" /> has been initialized, even if it has no elements, for example if it is a zero-length string.</span>
          </span>
          <span data-ttu-id="20d40-199">Si <paramref name="Array" /> es <see langword="Nothing" />, <see langword="LBound" /> genera una excepción <see cref="T:System.ArgumentNullException" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20d40-199">If <paramref name="Array" /> is <see langword="Nothing" />, <see langword="LBound" /> throws an <see cref="T:System.ArgumentNullException" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="20d40-200">Puesto que los subíndices de matriz empiezan en 0, el menor índice disponible para cada dimensión es siempre 0.</span><span class="sxs-lookup"><span data-stu-id="20d40-200">Since array subscripts start at 0, the lowest available subscript for every dimension is always 0.</span></span>  
  
 <span data-ttu-id="20d40-201">Para una matriz con las siguientes dimensiones, `LBound` devuelve los valores en la tabla siguiente:</span><span class="sxs-lookup"><span data-stu-id="20d40-201">For an array with the following dimensions, `LBound` returns the values in the following table:</span></span>  
  
```vb  
Dim a(100, 5, 4) As Byte  
```  
  
|<span data-ttu-id="20d40-202">Llamada a LBound</span><span class="sxs-lookup"><span data-stu-id="20d40-202">Call to LBound</span></span>|<span data-ttu-id="20d40-203">Valor devuelto</span><span class="sxs-lookup"><span data-stu-id="20d40-203">Return value</span></span>|  
|--------------------|------------------|  
|`LBound(a, 1)`|<span data-ttu-id="20d40-204">0</span><span class="sxs-lookup"><span data-stu-id="20d40-204">0</span></span>|  
|`LBound(a, 2)`|<span data-ttu-id="20d40-205">0</span><span class="sxs-lookup"><span data-stu-id="20d40-205">0</span></span>|  
|`LBound(a, 3)`|<span data-ttu-id="20d40-206">0</span><span class="sxs-lookup"><span data-stu-id="20d40-206">0</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="20d40-207">En el ejemplo siguiente se usa el `LBound` función para determinar el menor subíndice disponible para la dimensión indicada de una matriz.</span><span class="sxs-lookup"><span data-stu-id="20d40-207">The following example uses the `LBound` function to determine the lowest available subscript for the indicated dimension of an array.</span></span>  
  
 [!code-vb[VbVbalrFunctions#41](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#41)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="20d40-208">
            <paramref name="Array" /> es <see langword="Nothing" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20d40-208">
              <paramref name="Array" /> is <see langword="Nothing" />.</span>
          </span>
        </exception>
        <exception cref="T:System.RankException">
          <span data-ttu-id="20d40-209">
            <paramref name="Rank" /> es menor que 1 o <paramref name="Rank" /> es mayor que el rango de <paramref name="Array" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20d40-209">
              <paramref name="Rank" /> less than 1, or <paramref name="Rank" /> is greater than the rank of <paramref name="Array" />.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.Information.UBound(System.Array,System.Int32)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.RankException" />
      </Docs>
    </Member>
    <Member MemberName="QBColor">
      <MemberSignature Language="C#" Value="public static int QBColor (int Color);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 QBColor(int32 Color) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Information.QBColor(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function QBColor (Color As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int QBColor(int Color);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Color" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="Color">
          <span data-ttu-id="20d40-210">Obligatorio.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20d40-210">Required.</span>
          </span>
          <span data-ttu-id="20d40-211">Número entero del 0 al 15.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20d40-211">A whole number in the range 0–15.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="20d40-212">Devuelve un valor de tipo <see langword="Integer" /> que representa el código de color RGB correspondiente al número de color especificado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20d40-212">Returns an <see langword="Integer" /> value representing the RGB color code corresponding to the specified color number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="20d40-213">Devuelve un valor de tipo <see langword="Integer" /> que representa el código de color RGB correspondiente al número de color especificado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20d40-213">Returns an <see langword="Integer" /> value representing the RGB color code corresponding to the specified color number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="20d40-214">A partir del byte menos significativo, el valor devuelto especifica los valores de rojos, verde y azules que se usa para establecer el color adecuado en el sistema RGB utilizado por el lenguaje Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="20d40-214">Starting with the least-significant byte, the returned value specifies the red, green, and blue values used to set the appropriate color in the RGB system used by the Visual Basic language.</span></span>  
  
 <span data-ttu-id="20d40-215">El `Color` argumento tiene los siguientes valores.</span><span class="sxs-lookup"><span data-stu-id="20d40-215">The `Color` argument has these settings.</span></span>  
  
|<span data-ttu-id="20d40-216">Número</span><span class="sxs-lookup"><span data-stu-id="20d40-216">Number</span></span>|<span data-ttu-id="20d40-217">Color</span><span class="sxs-lookup"><span data-stu-id="20d40-217">Color</span></span>|<span data-ttu-id="20d40-218">número</span><span class="sxs-lookup"><span data-stu-id="20d40-218">Number</span></span>|<span data-ttu-id="20d40-219">Color</span><span class="sxs-lookup"><span data-stu-id="20d40-219">Color</span></span>|  
|------------|-----------|------------|-----------|  
|<span data-ttu-id="20d40-220">0</span><span class="sxs-lookup"><span data-stu-id="20d40-220">0</span></span>|<span data-ttu-id="20d40-221">Negro</span><span class="sxs-lookup"><span data-stu-id="20d40-221">Black</span></span>|<span data-ttu-id="20d40-222">8</span><span class="sxs-lookup"><span data-stu-id="20d40-222">8</span></span>|<span data-ttu-id="20d40-223">Gris</span><span class="sxs-lookup"><span data-stu-id="20d40-223">Gray</span></span>|  
|<span data-ttu-id="20d40-224">1</span><span class="sxs-lookup"><span data-stu-id="20d40-224">1</span></span>|<span data-ttu-id="20d40-225">Azul</span><span class="sxs-lookup"><span data-stu-id="20d40-225">Blue</span></span>|<span data-ttu-id="20d40-226">9</span><span class="sxs-lookup"><span data-stu-id="20d40-226">9</span></span>|<span data-ttu-id="20d40-227">Azul claro</span><span class="sxs-lookup"><span data-stu-id="20d40-227">Light blue</span></span>|  
|<span data-ttu-id="20d40-228">2</span><span class="sxs-lookup"><span data-stu-id="20d40-228">2</span></span>|<span data-ttu-id="20d40-229">Verde</span><span class="sxs-lookup"><span data-stu-id="20d40-229">Green</span></span>|<span data-ttu-id="20d40-230">10</span><span class="sxs-lookup"><span data-stu-id="20d40-230">10</span></span>|<span data-ttu-id="20d40-231">Verde claro</span><span class="sxs-lookup"><span data-stu-id="20d40-231">Light green</span></span>|  
|<span data-ttu-id="20d40-232">3</span><span class="sxs-lookup"><span data-stu-id="20d40-232">3</span></span>|<span data-ttu-id="20d40-233">Aguamarina</span><span class="sxs-lookup"><span data-stu-id="20d40-233">Cyan</span></span>|<span data-ttu-id="20d40-234">11</span><span class="sxs-lookup"><span data-stu-id="20d40-234">11</span></span>|<span data-ttu-id="20d40-235">Aguamarina claro</span><span class="sxs-lookup"><span data-stu-id="20d40-235">Light cyan</span></span>|  
|<span data-ttu-id="20d40-236">4</span><span class="sxs-lookup"><span data-stu-id="20d40-236">4</span></span>|<span data-ttu-id="20d40-237">Rojo</span><span class="sxs-lookup"><span data-stu-id="20d40-237">Red</span></span>|<span data-ttu-id="20d40-238">12</span><span class="sxs-lookup"><span data-stu-id="20d40-238">12</span></span>|<span data-ttu-id="20d40-239">Rojo claro</span><span class="sxs-lookup"><span data-stu-id="20d40-239">Light red</span></span>|  
|<span data-ttu-id="20d40-240">5</span><span class="sxs-lookup"><span data-stu-id="20d40-240">5</span></span>|<span data-ttu-id="20d40-241">Fucsia</span><span class="sxs-lookup"><span data-stu-id="20d40-241">Magenta</span></span>|<span data-ttu-id="20d40-242">13</span><span class="sxs-lookup"><span data-stu-id="20d40-242">13</span></span>|<span data-ttu-id="20d40-243">Fucsia claro</span><span class="sxs-lookup"><span data-stu-id="20d40-243">Light magenta</span></span>|  
|<span data-ttu-id="20d40-244">6</span><span class="sxs-lookup"><span data-stu-id="20d40-244">6</span></span>|<span data-ttu-id="20d40-245">Amarillo</span><span class="sxs-lookup"><span data-stu-id="20d40-245">Yellow</span></span>|<span data-ttu-id="20d40-246">14</span><span class="sxs-lookup"><span data-stu-id="20d40-246">14</span></span>|<span data-ttu-id="20d40-247">Amarillo claro</span><span class="sxs-lookup"><span data-stu-id="20d40-247">Light yellow</span></span>|  
|<span data-ttu-id="20d40-248">7</span><span class="sxs-lookup"><span data-stu-id="20d40-248">7</span></span>|<span data-ttu-id="20d40-249">Blanco</span><span class="sxs-lookup"><span data-stu-id="20d40-249">White</span></span>|<span data-ttu-id="20d40-250">15</span><span class="sxs-lookup"><span data-stu-id="20d40-250">15</span></span>|<span data-ttu-id="20d40-251">Blanco brillante</span><span class="sxs-lookup"><span data-stu-id="20d40-251">Bright white</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="20d40-252">Este ejemplo se utiliza la `QBColor` función puede cambiar el color indicado por `colorInteger`.</span><span class="sxs-lookup"><span data-stu-id="20d40-252">This example uses the `QBColor` function to change to the color indicated by `colorInteger`.</span></span> <span data-ttu-id="20d40-253">`QBColor` acepta valores enteros entre 0 y 15.</span><span class="sxs-lookup"><span data-stu-id="20d40-253">`QBColor` accepts integer values between 0 and 15.</span></span>  
  
 [!code-vb[VbVbalrCatRef#29](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#29)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="20d40-254">
            <paramref name="Color" /> está fuera del intervalo del 0 al 15, ambos inclusive.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20d40-254">
              <paramref name="Color" /> is outside of range 0 to 15, inclusive.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.Information.RGB(System.Int32,System.Int32,System.Int32)" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <Member MemberName="RGB">
      <MemberSignature Language="C#" Value="public static int RGB (int Red, int Green, int Blue);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 RGB(int32 Red, int32 Green, int32 Blue) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Information.RGB(System.Int32,System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function RGB (Red As Integer, Green As Integer, Blue As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int RGB(int Red, int Green, int Blue);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Red" Type="System.Int32" />
        <Parameter Name="Green" Type="System.Int32" />
        <Parameter Name="Blue" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="Red">
          <span data-ttu-id="20d40-255">Obligatorio.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20d40-255">Required.</span>
          </span>
          <span data-ttu-id="20d40-256">Valor <see langword="Integer" /> comprendido entre 0 y 255, ambos inclusive, que representa la intensidad del componente rojo del color.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20d40-256">
              <see langword="Integer" /> in the range 0–255, inclusive, that represents the intensity of the red component of the color.</span>
          </span>
        </param>
        <param name="Green">
          <span data-ttu-id="20d40-257">Obligatorio.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20d40-257">Required.</span>
          </span>
          <span data-ttu-id="20d40-258">Valor <see langword="Integer" /> comprendido entre 0 y 255, ambos inclusive, que representa la intensidad del componente verde del color.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20d40-258">
              <see langword="Integer" /> in the range 0–255, inclusive, that represents the intensity of the green component of the color.</span>
          </span>
        </param>
        <param name="Blue">
          <span data-ttu-id="20d40-259">Obligatorio.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20d40-259">Required.</span>
          </span>
          <span data-ttu-id="20d40-260">Valor <see langword="Integer" /> en el intervalo comprendido entre 0 y 255, ambos inclusive, que representa la intensidad del componente azul del color.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20d40-260">
              <see langword="Integer" /> in the range 0–255, inclusive, that represents the intensity of the blue component of the color.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="20d40-261">Devuelve un valor de tipo <see langword="Integer" /> que representa un valor de color RGB de un conjunto de componentes de color rojo, verde y azul.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20d40-261">Returns an <see langword="Integer" /> value representing an RGB color value from a set of red, green and blue color components.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="20d40-262">Devuelve un valor de tipo <see langword="Integer" /> que representa un valor de color RGB de un conjunto de componentes de color rojo, verde y azul.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20d40-262">Returns an <see langword="Integer" /> value representing an RGB color value from a set of red, green and blue color components.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="20d40-263">Métodos de aplicación y las propiedades que aceptan una especificación de color esperan que el valor de color de especificación que se va a ser un número que representa una RGB.</span><span class="sxs-lookup"><span data-stu-id="20d40-263">Application methods and properties that accept a color specification expect that specification to be a number representing an RGB color value.</span></span> <span data-ttu-id="20d40-264">Un valor de color RGB especifica la intensidad relativa de rojo, verde y azul para hacer que se muestre un color específico.</span><span class="sxs-lookup"><span data-stu-id="20d40-264">An RGB color value specifies the relative intensity of red, green, and blue to cause a specific color to be displayed.</span></span>  
  
 <span data-ttu-id="20d40-265">Si el valor de cualquier argumento `RGB` es mayor que 255, 255 se utiliza.</span><span class="sxs-lookup"><span data-stu-id="20d40-265">If the value for any argument to `RGB` is greater than 255, 255 is used.</span></span>  
  
 <span data-ttu-id="20d40-266">En la tabla siguiente se enumera algunos colores estándar y los valores de rojos, verde y azules que incluyen.</span><span class="sxs-lookup"><span data-stu-id="20d40-266">The following table lists some standard colors and the red, green, and blue values they include.</span></span>  
  
|<span data-ttu-id="20d40-267">Color</span><span class="sxs-lookup"><span data-stu-id="20d40-267">Color</span></span>|<span data-ttu-id="20d40-268">Valor rojo</span><span class="sxs-lookup"><span data-stu-id="20d40-268">Red value</span></span>|<span data-ttu-id="20d40-269">Valor verde</span><span class="sxs-lookup"><span data-stu-id="20d40-269">Green value</span></span>|<span data-ttu-id="20d40-270">Valor azul</span><span class="sxs-lookup"><span data-stu-id="20d40-270">Blue value</span></span>|  
|-----------|---------------|-----------------|----------------|  
|<span data-ttu-id="20d40-271">Negro</span><span class="sxs-lookup"><span data-stu-id="20d40-271">Black</span></span>|<span data-ttu-id="20d40-272">0</span><span class="sxs-lookup"><span data-stu-id="20d40-272">0</span></span>|<span data-ttu-id="20d40-273">0</span><span class="sxs-lookup"><span data-stu-id="20d40-273">0</span></span>|<span data-ttu-id="20d40-274">0</span><span class="sxs-lookup"><span data-stu-id="20d40-274">0</span></span>|  
|<span data-ttu-id="20d40-275">Azul</span><span class="sxs-lookup"><span data-stu-id="20d40-275">Blue</span></span>|<span data-ttu-id="20d40-276">0</span><span class="sxs-lookup"><span data-stu-id="20d40-276">0</span></span>|<span data-ttu-id="20d40-277">0</span><span class="sxs-lookup"><span data-stu-id="20d40-277">0</span></span>|<span data-ttu-id="20d40-278">255</span><span class="sxs-lookup"><span data-stu-id="20d40-278">255</span></span>|  
|<span data-ttu-id="20d40-279">Verde</span><span class="sxs-lookup"><span data-stu-id="20d40-279">Green</span></span>|<span data-ttu-id="20d40-280">0</span><span class="sxs-lookup"><span data-stu-id="20d40-280">0</span></span>|<span data-ttu-id="20d40-281">255</span><span class="sxs-lookup"><span data-stu-id="20d40-281">255</span></span>|<span data-ttu-id="20d40-282">0</span><span class="sxs-lookup"><span data-stu-id="20d40-282">0</span></span>|  
|<span data-ttu-id="20d40-283">Aguamarina</span><span class="sxs-lookup"><span data-stu-id="20d40-283">Cyan</span></span>|<span data-ttu-id="20d40-284">0</span><span class="sxs-lookup"><span data-stu-id="20d40-284">0</span></span>|<span data-ttu-id="20d40-285">255</span><span class="sxs-lookup"><span data-stu-id="20d40-285">255</span></span>|<span data-ttu-id="20d40-286">255</span><span class="sxs-lookup"><span data-stu-id="20d40-286">255</span></span>|  
|<span data-ttu-id="20d40-287">Rojo</span><span class="sxs-lookup"><span data-stu-id="20d40-287">Red</span></span>|<span data-ttu-id="20d40-288">255</span><span class="sxs-lookup"><span data-stu-id="20d40-288">255</span></span>|<span data-ttu-id="20d40-289">0</span><span class="sxs-lookup"><span data-stu-id="20d40-289">0</span></span>|<span data-ttu-id="20d40-290">0</span><span class="sxs-lookup"><span data-stu-id="20d40-290">0</span></span>|  
|<span data-ttu-id="20d40-291">Fucsia</span><span class="sxs-lookup"><span data-stu-id="20d40-291">Magenta</span></span>|<span data-ttu-id="20d40-292">255</span><span class="sxs-lookup"><span data-stu-id="20d40-292">255</span></span>|<span data-ttu-id="20d40-293">0</span><span class="sxs-lookup"><span data-stu-id="20d40-293">0</span></span>|<span data-ttu-id="20d40-294">255</span><span class="sxs-lookup"><span data-stu-id="20d40-294">255</span></span>|  
|<span data-ttu-id="20d40-295">Amarillo</span><span class="sxs-lookup"><span data-stu-id="20d40-295">Yellow</span></span>|<span data-ttu-id="20d40-296">255</span><span class="sxs-lookup"><span data-stu-id="20d40-296">255</span></span>|<span data-ttu-id="20d40-297">255</span><span class="sxs-lookup"><span data-stu-id="20d40-297">255</span></span>|<span data-ttu-id="20d40-298">0</span><span class="sxs-lookup"><span data-stu-id="20d40-298">0</span></span>|  
|<span data-ttu-id="20d40-299">Blanco</span><span class="sxs-lookup"><span data-stu-id="20d40-299">White</span></span>|<span data-ttu-id="20d40-300">255</span><span class="sxs-lookup"><span data-stu-id="20d40-300">255</span></span>|<span data-ttu-id="20d40-301">255</span><span class="sxs-lookup"><span data-stu-id="20d40-301">255</span></span>|<span data-ttu-id="20d40-302">255</span><span class="sxs-lookup"><span data-stu-id="20d40-302">255</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="20d40-303">Este ejemplo se muestra cómo el `RGB` función se utiliza para devolver un número entero que representa un `RGB` valor de color.</span><span class="sxs-lookup"><span data-stu-id="20d40-303">This example shows how the `RGB` function is used to return a whole number representing an `RGB` color value.</span></span>  
  
 [!code-vb[VbVbalrCatRef#18](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#18)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="20d40-304">
            <paramref name="Green" />, <paramref name="Blue" />, <paramref name="Red" /> está fuera del intervalo del 0 al 255, ambos inclusive.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20d40-304">
              <paramref name="Green" />, <paramref name="Blue" />, or <paramref name="Red" /> is outside of range 0 to 255, inclusive.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.Information.QBColor(System.Int32)" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <Member MemberName="SystemTypeName">
      <MemberSignature Language="C#" Value="public static string SystemTypeName (string VbName);" />
      <MemberSignature Language="ILAsm" Value=".method public static string SystemTypeName(string VbName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Information.SystemTypeName(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function SystemTypeName (VbName As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ SystemTypeName(System::String ^ VbName);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="VbName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="VbName">
          <span data-ttu-id="20d40-305">Obligatorio.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20d40-305">Required.</span>
          </span>
          <span data-ttu-id="20d40-306">Variable de <see langword="String" /> que contiene un nombre de tipo de Visual Basic.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20d40-306">A <see langword="String" /> variable containing a Visual Basic type name.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="20d40-307">Devuelve un valor de tipo <see langword="String" /> que contiene el nombre del tipo de datos del sistema de una variable.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20d40-307">Returns a <see langword="String" /> value containing the system data type name of a variable.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="20d40-308">Devuelve un valor de tipo <see langword="String" /> que contiene el nombre del tipo de datos del sistema de una variable.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20d40-308">Returns a <see langword="String" /> value containing the system data type name of a variable.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="20d40-309">`SystemTypeName` Devuelve el nombre de tipo de common language runtime (CLR) completo correspondiente al nombre de tipo de Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="20d40-309">`SystemTypeName` returns the fully qualified common language runtime (CLR) type name corresponding to the Visual Basic type name.</span></span> <span data-ttu-id="20d40-310">Por ejemplo, si `VbName` contiene "Date", `SystemTypeName` devuelve "System.DateTime".</span><span class="sxs-lookup"><span data-stu-id="20d40-310">For example, if `VbName` contains "Date", `SystemTypeName` returns "System.DateTime".</span></span> <span data-ttu-id="20d40-311">Si `SystemTypeName` no reconoce el valor de `VbName`, devuelve `Nothing` (no la cadena "Nothing").</span><span class="sxs-lookup"><span data-stu-id="20d40-311">If `SystemTypeName` does not recognize the value of `VbName`, it returns `Nothing` (not the string "Nothing").</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="20d40-312">En el ejemplo siguiente se usa el `SystemTypeName` función para devolver los nombres de tipo de datos de varias variables.</span><span class="sxs-lookup"><span data-stu-id="20d40-312">The following example uses the `SystemTypeName` function to return data type names for several variables.</span></span>  
  
 [!code-vb[VbVbalrFunctions#49](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#49)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.String" />
        <altmember cref="M:Microsoft.VisualBasic.Information.VbTypeName(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="TypeName">
      <MemberSignature Language="C#" Value="public static string TypeName (object VarName);" />
      <MemberSignature Language="ILAsm" Value=".method public static string TypeName(object VarName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Information.TypeName(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function TypeName (VarName As Object) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ TypeName(System::Object ^ VarName);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="VarName" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="VarName">
          <span data-ttu-id="20d40-313">Obligatorio.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20d40-313">Required.</span>
          </span>
          <span data-ttu-id="20d40-314">Variable de <see langword="Object" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20d40-314">
              <see langword="Object" /> variable.</span>
          </span>
          <span data-ttu-id="20d40-315">Si <see langword="Option Strict" /> es <see langword="Off" />, se puede pasar una variable de cualquier tipo de datos, excepto una estructura.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20d40-315">If <see langword="Option Strict" /> is <see langword="Off" />, you can pass a variable of any data type except a structure.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="20d40-316">Devuelve un valor de tipo <see langword="String" /> que contiene información del tipo de datos de una variable.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20d40-316">Returns a <see langword="String" /> value containing data-type information about a variable.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="20d40-317">Devuelve un valor de tipo <see langword="String" /> que contiene información del tipo de datos de una variable.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20d40-317">Returns a <see langword="String" /> value containing data-type information about a variable.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="20d40-318">La tabla siguiente muestra la `String` valores devueltos por `TypeName` para el contenido de `VarName`.</span><span class="sxs-lookup"><span data-stu-id="20d40-318">The following table shows the `String` values returned by `TypeName` for different contents of `VarName`.</span></span>  
  
|<span data-ttu-id="20d40-319">`VarName` Contenido</span><span class="sxs-lookup"><span data-stu-id="20d40-319">`VarName` contents</span></span>|<span data-ttu-id="20d40-320">Cadena devuelta</span><span class="sxs-lookup"><span data-stu-id="20d40-320">String returned</span></span>|  
|------------------------|---------------------|  
|<span data-ttu-id="20d40-321">16 bits `True` o `False` un tipo de valor</span><span class="sxs-lookup"><span data-stu-id="20d40-321">16-bit `True` or `False` value type</span></span>|<span data-ttu-id="20d40-322">"Boolean"</span><span class="sxs-lookup"><span data-stu-id="20d40-322">"Boolean"</span></span>|  
|<span data-ttu-id="20d40-323">tipo de valor binario de 8 bits</span><span class="sxs-lookup"><span data-stu-id="20d40-323">8-bit binary value type</span></span>|<span data-ttu-id="20d40-324">"Bytes"</span><span class="sxs-lookup"><span data-stu-id="20d40-324">"Byte"</span></span>|  
|<span data-ttu-id="20d40-325">tipo de valor de carácter de 16 bits</span><span class="sxs-lookup"><span data-stu-id="20d40-325">16-bit character value type</span></span>|<span data-ttu-id="20d40-326">"Char"</span><span class="sxs-lookup"><span data-stu-id="20d40-326">"Char"</span></span>|  
|<span data-ttu-id="20d40-327">tipo de valor de hora y fecha de 64 bits</span><span class="sxs-lookup"><span data-stu-id="20d40-327">64-bit date and time value type</span></span>|<span data-ttu-id="20d40-328">"Fecha"</span><span class="sxs-lookup"><span data-stu-id="20d40-328">"Date"</span></span>|  
|<span data-ttu-id="20d40-329">Tipo de referencia que indica los datos que faltan o que no existe</span><span class="sxs-lookup"><span data-stu-id="20d40-329">Reference type indicating missing or nonexistent data</span></span>|<span data-ttu-id="20d40-330">"DBNull"</span><span class="sxs-lookup"><span data-stu-id="20d40-330">"DBNull"</span></span>|  
|<span data-ttu-id="20d40-331">tipo de valor numérico de punto fijo de 128 bits</span><span class="sxs-lookup"><span data-stu-id="20d40-331">128-bit fixed-point numeric value type</span></span>|<span data-ttu-id="20d40-332">"Decimal"</span><span class="sxs-lookup"><span data-stu-id="20d40-332">"Decimal"</span></span>|  
|<span data-ttu-id="20d40-333">tipo de valor numérico de punto flotante de 64 bits</span><span class="sxs-lookup"><span data-stu-id="20d40-333">64-bit floating-point numeric value type</span></span>|<span data-ttu-id="20d40-334">"Double"</span><span class="sxs-lookup"><span data-stu-id="20d40-334">"Double"</span></span>|  
|<span data-ttu-id="20d40-335">tipo de valor entero de 32 bits</span><span class="sxs-lookup"><span data-stu-id="20d40-335">32-bit integer value type</span></span>|<span data-ttu-id="20d40-336">"Integer"</span><span class="sxs-lookup"><span data-stu-id="20d40-336">"Integer"</span></span>|  
|<span data-ttu-id="20d40-337">Tipo de referencia que apunta a un objeto no especializado</span><span class="sxs-lookup"><span data-stu-id="20d40-337">Reference type pointing to an unspecialized object</span></span>|<span data-ttu-id="20d40-338">"Object"</span><span class="sxs-lookup"><span data-stu-id="20d40-338">"Object"</span></span>|  
|<span data-ttu-id="20d40-339">Tipo de referencia que apunta a un objeto especializado creado a partir de la clase *objectclass*</span><span class="sxs-lookup"><span data-stu-id="20d40-339">Reference type pointing to a specialized object created from class *objectclass*</span></span>|<span data-ttu-id="20d40-340">"*objectclass*"</span><span class="sxs-lookup"><span data-stu-id="20d40-340">"*objectclass*"</span></span>|  
|<span data-ttu-id="20d40-341">tipo de valor entero de 64 bits</span><span class="sxs-lookup"><span data-stu-id="20d40-341">64-bit integer value type</span></span>|<span data-ttu-id="20d40-342">"Largo"</span><span class="sxs-lookup"><span data-stu-id="20d40-342">"Long"</span></span>|  
|<span data-ttu-id="20d40-343">Tipo de referencia sin ningún objeto asignado actualmente a él</span><span class="sxs-lookup"><span data-stu-id="20d40-343">Reference type with no object currently assigned to it</span></span>|<span data-ttu-id="20d40-344">"Nothing"</span><span class="sxs-lookup"><span data-stu-id="20d40-344">"Nothing"</span></span>|  
|<span data-ttu-id="20d40-345">tipo de valor entero de 8 bits con signo</span><span class="sxs-lookup"><span data-stu-id="20d40-345">8-bit signed integer value type</span></span>|<span data-ttu-id="20d40-346">"SByte"</span><span class="sxs-lookup"><span data-stu-id="20d40-346">"SByte"</span></span>|  
|<span data-ttu-id="20d40-347">tipo de valor entero de 16 bits</span><span class="sxs-lookup"><span data-stu-id="20d40-347">16-bit integer value type</span></span>|<span data-ttu-id="20d40-348">"Corto"</span><span class="sxs-lookup"><span data-stu-id="20d40-348">"Short"</span></span>|  
|<span data-ttu-id="20d40-349">tipo de valor numérico de punto flotante de 32 bits</span><span class="sxs-lookup"><span data-stu-id="20d40-349">32-bit floating-point numeric value type</span></span>|<span data-ttu-id="20d40-350">"Simple"</span><span class="sxs-lookup"><span data-stu-id="20d40-350">"Single"</span></span>|  
|<span data-ttu-id="20d40-351">Tipo de referencia que apunta a una cadena de caracteres de 16 bits</span><span class="sxs-lookup"><span data-stu-id="20d40-351">Reference type pointing to a string of 16-bit characters</span></span>|<span data-ttu-id="20d40-352">"Cadena"</span><span class="sxs-lookup"><span data-stu-id="20d40-352">"String"</span></span>|  
|<span data-ttu-id="20d40-353">tipo de valor entero sin signo de 32 bits</span><span class="sxs-lookup"><span data-stu-id="20d40-353">32-bit unsigned integer value type</span></span>|<span data-ttu-id="20d40-354">"UInteger"</span><span class="sxs-lookup"><span data-stu-id="20d40-354">"UInteger"</span></span>|  
|<span data-ttu-id="20d40-355">tipo de valor entero sin signo de 64 bits</span><span class="sxs-lookup"><span data-stu-id="20d40-355">64-bit unsigned integer value type</span></span>|<span data-ttu-id="20d40-356">"ULong"</span><span class="sxs-lookup"><span data-stu-id="20d40-356">"ULong"</span></span>|  
|<span data-ttu-id="20d40-357">tipo de valor entero de 16 bits sin signo</span><span class="sxs-lookup"><span data-stu-id="20d40-357">16-bit unsigned integer value type</span></span>|<span data-ttu-id="20d40-358">"UShort"</span><span class="sxs-lookup"><span data-stu-id="20d40-358">"UShort"</span></span>|  
  
 <span data-ttu-id="20d40-359">Si `VarName` es una matriz, la cadena devuelta puede ser cualquiera de las cadenas en la tabla anterior con paréntesis vacíos.</span><span class="sxs-lookup"><span data-stu-id="20d40-359">If `VarName` is an array, the returned string can be any one of the strings in the preceding table with empty parentheses appended.</span></span> <span data-ttu-id="20d40-360">Por ejemplo, si `VarName` señala a una matriz de enteros, `TypeName` devuelve "Integer()".</span><span class="sxs-lookup"><span data-stu-id="20d40-360">For example, if `VarName` points to an array of integers, `TypeName` returns "Integer()".</span></span>  
  
 <span data-ttu-id="20d40-361">Cuando `TypeName` devuelve el nombre de un tipo de referencia como una clase, devuelve solo el nombre propio, no el nombre completo.</span><span class="sxs-lookup"><span data-stu-id="20d40-361">When `TypeName` returns the name of a reference type such as a class, it returns only the name itself, not the qualified name.</span></span> <span data-ttu-id="20d40-362">Por ejemplo, si `VarName` apunta a un objeto de clase <xref:System.Drawing.Printing.PaperSource?displayProperty=nameWithType>, `TypeName` devuelve "PaperSource".</span><span class="sxs-lookup"><span data-stu-id="20d40-362">For example, if `VarName` points to an object of class <xref:System.Drawing.Printing.PaperSource?displayProperty=nameWithType>, `TypeName` returns "PaperSource".</span></span> <span data-ttu-id="20d40-363">Tenga en cuenta que si la variable se declara como de un tipo de clase determinado pero no tiene un objeto asignado, `TypeName` devuelve el valor "Nothing".</span><span class="sxs-lookup"><span data-stu-id="20d40-363">Note that if the variable is declared to be of a certain class type but does not have an object assigned to it, `TypeName` returns "Nothing".</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="20d40-364">En el ejemplo siguiente se usa el `TypeName` función para devolver información de tipo de datos de varias variables.</span><span class="sxs-lookup"><span data-stu-id="20d40-364">The following example uses the `TypeName` function to return data type information about several variables.</span></span>  
  
 [!code-vb[VbVbalrFunctions#52](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#52)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Information.IsArray(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsDate(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsDBNull(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsError(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsNothing(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsNumeric(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsReference(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="UBound">
      <MemberSignature Language="C#" Value="public static int UBound (Array Array, int Rank = 1);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 UBound(class System.Array Array, int32 Rank) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Information.UBound(System.Array,System.Int32)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Array" Type="System.Array" />
        <Parameter Name="Rank" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="Array">
          <span data-ttu-id="20d40-365">Obligatorio.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20d40-365">Required.</span>
          </span>
          <span data-ttu-id="20d40-366">Matriz de cualquier tipo de datos.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20d40-366">Array of any data type.</span>
          </span>
          <span data-ttu-id="20d40-367">Matriz en la que se desea buscar el subíndice más alto posible de una dimensión.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20d40-367">The array in which you want to find the highest possible subscript of a dimension.</span>
          </span>
        </param>
        <param name="Rank">
          <span data-ttu-id="20d40-368">Opcional.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20d40-368">Optional.</span>
          </span>
          <span data-ttu-id="20d40-369">
            <see langword="Integer" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20d40-369">
              <see langword="Integer" />.</span>
          </span>
          <span data-ttu-id="20d40-370">Dimensión para la que se va a devolver el subíndice más alto posible.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20d40-370">The dimension for which the highest possible subscript is to be returned.</span>
          </span>
          <span data-ttu-id="20d40-371">Utilice 1 para la primera dimensión, 2 para la segunda, etc.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20d40-371">Use 1 for the first dimension, 2 for the second, and so on.</span>
          </span>
          <span data-ttu-id="20d40-372">Si se omite <c>Rank</c>, se supone que el valor es 1.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20d40-372">If <c>Rank</c> is omitted, 1 is assumed.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="20d40-373">Devuelve el subíndice más alto que está disponible para la dimensión indicada de una matriz.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20d40-373">Returns the highest available subscript for the indicated dimension of an array.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="20d40-374">
            <see langword="Integer" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20d40-374">
              <see langword="Integer" />.</span>
          </span>
          <span data-ttu-id="20d40-375">Valor más alto que el subíndice de la dimensión especificada puede contener.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20d40-375">The highest value the subscript for the specified dimension can contain.</span>
          </span>
          <span data-ttu-id="20d40-376">Si <paramref name="Array" /> tiene solo un elemento, <see langword="UBound" /> devuelve 0.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20d40-376">If <paramref name="Array" /> has only one element, <see langword="UBound" /> returns 0.</span>
          </span>
          <span data-ttu-id="20d40-377">Si <paramref name="Array" /> no tiene elementos, por ejemplo si es una cadena de longitud cero, <see langword="UBound" /> devuelve -1.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20d40-377">If <paramref name="Array" /> has no elements, for example if it is a zero-length string, <see langword="UBound" /> returns -1.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="20d40-378">Puesto que los subíndices de matriz empiezan en 0, la longitud de una dimensión es mayor en uno que el subíndice más alto disponible para esa dimensión.</span><span class="sxs-lookup"><span data-stu-id="20d40-378">Since array subscripts start at 0, the length of a dimension is greater by one than the highest available subscript for that dimension.</span></span>  
  
 <span data-ttu-id="20d40-379">Para una matriz con las siguientes dimensiones, `UBound` devuelve los valores en la tabla siguiente:</span><span class="sxs-lookup"><span data-stu-id="20d40-379">For an array with the following dimensions, `UBound` returns the values in the following table:</span></span>  
  
```vb  
Dim a(100, 5, 4) As Byte  
```  
  
|<span data-ttu-id="20d40-380">Llamada a UBound</span><span class="sxs-lookup"><span data-stu-id="20d40-380">Call to UBound</span></span>|<span data-ttu-id="20d40-381">Valor devuelto</span><span class="sxs-lookup"><span data-stu-id="20d40-381">Return value</span></span>|  
|--------------------|------------------|  
|`UBound(a, 1)`|<span data-ttu-id="20d40-382">100</span><span class="sxs-lookup"><span data-stu-id="20d40-382">100</span></span>|  
|`UBound(a, 2)`|<span data-ttu-id="20d40-383">5</span><span class="sxs-lookup"><span data-stu-id="20d40-383">5</span></span>|  
|`UBound(a, 3)`|<span data-ttu-id="20d40-384">4</span><span class="sxs-lookup"><span data-stu-id="20d40-384">4</span></span>|  
  
 <span data-ttu-id="20d40-385">Puede usar `UBound` para determinar el total de número de elementos de una matriz, pero debe ajustar el valor que devuelve en cuenta el hecho de que los subíndices comienzan en 0.</span><span class="sxs-lookup"><span data-stu-id="20d40-385">You can use `UBound` to determine the total number of elements in an array, but you must adjust the value it returns to account for the fact that the subscripts start at 0.</span></span> <span data-ttu-id="20d40-386">En el ejemplo siguiente se calcula el tamaño total de la matriz `a` en el ejemplo anterior:</span><span class="sxs-lookup"><span data-stu-id="20d40-386">The following example calculates the total size of the array `a` in the preceding example:</span></span>  
  
```vb  
Dim total As Integer  
total = (UBound(A, 1) + 1) * (UBound(A, 2) + 1) * (UBound(A, 3) + 1)  
```  
  
 <span data-ttu-id="20d40-387">Calcula el valor para `total` es 3030, que es 101 * 6 * 5.</span><span class="sxs-lookup"><span data-stu-id="20d40-387">The value calculated for `total` is 3030, which is 101 * 6 * 5.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="20d40-388">En el ejemplo siguiente se usa el `UBound` función para determinar el subíndice más alto disponible para la dimensión indicada de una matriz.</span><span class="sxs-lookup"><span data-stu-id="20d40-388">The following example uses the `UBound` function to determine the highest available subscript for the indicated dimension of an array.</span></span>  
  
 [!code-vb[VbVbalrFunctions#53](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#53)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="20d40-389">
            <paramref name="Array" /> es <see langword="Nothing" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20d40-389">
              <paramref name="Array" /> is <see langword="Nothing" />.</span>
          </span>
        </exception>
        <exception cref="T:System.RankException">
          <span data-ttu-id="20d40-390">
            <paramref name="Rank" /> es menor que 1 o <paramref name="Rank" /> es mayor que el rango de <paramref name="Array" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20d40-390">
              <paramref name="Rank" /> is less than 1, or <paramref name="Rank" /> is greater than the rank of <paramref name="Array" />.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.Information.LBound(System.Array,System.Int32)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.RankException" />
      </Docs>
    </Member>
    <Member MemberName="VarType">
      <MemberSignature Language="C#" Value="public static Microsoft.VisualBasic.VariantType VarType (object VarName);" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype Microsoft.VisualBasic.VariantType VarType(object VarName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Information.VarType(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function VarType (VarName As Object) As VariantType" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::VisualBasic::VariantType VarType(System::Object ^ VarName);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.VisualBasic.VariantType</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="VarName" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="VarName">
          <span data-ttu-id="20d40-391">Obligatorio.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20d40-391">Required.</span>
          </span>
          <span data-ttu-id="20d40-392">Variable de <see langword="Object" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20d40-392">
              <see langword="Object" /> variable.</span>
          </span>
          <span data-ttu-id="20d40-393">Si <see langword="Option Strict" /> es <see langword="Off" />, se puede pasar una variable de cualquier tipo de datos, excepto una estructura.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20d40-393">If <see langword="Option Strict" /> is <see langword="Off" />, you can pass a variable of any data type except a structure.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="20d40-394">Devuelve un valor de tipo <see langword="Integer" /> que contiene la clasificación del tipo de datos de una variable.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20d40-394">Returns an <see langword="Integer" /> value containing the data type classification of a variable.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="20d40-395">Devuelve un valor de tipo <see langword="Integer" /> que contiene la clasificación del tipo de datos de una variable.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20d40-395">Returns an <see langword="Integer" /> value containing the data type classification of a variable.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="20d40-396">El valor entero devuelto por `VarType` es un miembro de la <xref:Microsoft.VisualBasic.VariantType>.</span><span class="sxs-lookup"><span data-stu-id="20d40-396">The integer value returned by `VarType` is a member of the <xref:Microsoft.VisualBasic.VariantType>.</span></span>  
  
 <span data-ttu-id="20d40-397">La siguiente tabla muestra los valores devueltos por `VarType` en los casos especiales de `VarName`.</span><span class="sxs-lookup"><span data-stu-id="20d40-397">The following table shows the values returned by `VarType` for special cases of `VarName`.</span></span>  
  
|<span data-ttu-id="20d40-398">Tipo de datos representado por `VarName`</span><span class="sxs-lookup"><span data-stu-id="20d40-398">Data type represented by `VarName`</span></span>|<span data-ttu-id="20d40-399">Valor devuelto por `VarType`</span><span class="sxs-lookup"><span data-stu-id="20d40-399">Value returned by `VarType`</span></span>|  
|----------------------------------------|---------------------------------|  
|[<span data-ttu-id="20d40-400">Nothing</span><span class="sxs-lookup"><span data-stu-id="20d40-400">Nothing</span></span>](~/docs/visual-basic/language-reference/nothing.md)|`VariantType.Object`|  
|<xref:System.DBNull>|`VariantType.Null`|  
|<span data-ttu-id="20d40-401">Enumeración</span><span class="sxs-lookup"><span data-stu-id="20d40-401">Enumeration</span></span>|<span data-ttu-id="20d40-402">Tipo de datos subyacente (`SByte`, `Byte`, `Short`, `UShort`, `Integer`, `UInteger`, `Long`, o `ULong`)</span><span class="sxs-lookup"><span data-stu-id="20d40-402">Underlying data type (`SByte`, `Byte`, `Short`, `UShort`, `Integer`, `UInteger`, `Long`, or `ULong`)</span></span>|  
|<span data-ttu-id="20d40-403">Matriz</span><span class="sxs-lookup"><span data-stu-id="20d40-403">Array</span></span>|<span data-ttu-id="20d40-404">La operación OR bit a bit de tipo de elemento de matriz y `VariantType.Array`</span><span class="sxs-lookup"><span data-stu-id="20d40-404">Bitwise OR of array element type and `VariantType.Array`</span></span>|  
|<span data-ttu-id="20d40-405">Matriz de matrices</span><span class="sxs-lookup"><span data-stu-id="20d40-405">Array of arrays</span></span>|<span data-ttu-id="20d40-406">La operación OR bit a bit de `VariantType.Object` y `VariantType.Array`</span><span class="sxs-lookup"><span data-stu-id="20d40-406">Bitwise OR of `VariantType.Object` and `VariantType.Array`</span></span>|  
|<span data-ttu-id="20d40-407">Estructura (<xref:System.ValueType?displayProperty=nameWithType>)</span><span class="sxs-lookup"><span data-stu-id="20d40-407">Structure (<xref:System.ValueType?displayProperty=nameWithType>)</span></span>|`VariantType.UserDefinedType`|  
|<xref:System.Exception>|`VariantType.Error`|  
|<span data-ttu-id="20d40-408">Desconocido</span><span class="sxs-lookup"><span data-stu-id="20d40-408">Unknown</span></span>|`VariantType.Object`|  
  
   
  
## Examples  
 <span data-ttu-id="20d40-409">En el ejemplo siguiente se usa el `VarType` función para devolver información de clasificación de tipo de datos de varias variables.</span><span class="sxs-lookup"><span data-stu-id="20d40-409">The following example uses the `VarType` function to return data type classification information about several variables.</span></span>  
  
 [!code-vb[VbVbalrFunctions#55](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#55)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Object" />
        <altmember cref="T:Microsoft.VisualBasic.VariantType" />
      </Docs>
    </Member>
    <Member MemberName="VbTypeName">
      <MemberSignature Language="C#" Value="public static string VbTypeName (string UrtName);" />
      <MemberSignature Language="ILAsm" Value=".method public static string VbTypeName(string UrtName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Information.VbTypeName(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function VbTypeName (UrtName As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ VbTypeName(System::String ^ UrtName);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="UrtName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="UrtName">
          <span data-ttu-id="20d40-410">Obligatorio.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20d40-410">Required.</span>
          </span>
          <span data-ttu-id="20d40-411">Variable de tipo <see langword="String" /> que contiene un nombre de tipo utilizado por Common Language Runtime.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20d40-411">
              <see langword="String" /> variable containing a type name used by the common language runtime.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="20d40-412">Devuelve un valor de tipo <see langword="String" /> que contiene el nombre del tipo de datos de Visual Basic de una variable.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20d40-412">Returns a <see langword="String" /> value containing the Visual Basic data type name of a variable.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="20d40-413">Devuelve un valor de tipo <see langword="String" /> que contiene el nombre del tipo de datos de Visual Basic de una variable.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20d40-413">Returns a <see langword="String" /> value containing the Visual Basic data type name of a variable.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="20d40-414">`VbTypeName` Devuelve el nombre de tipo de Visual Basic correspondiente para el nombre de tipo de common language runtime.</span><span class="sxs-lookup"><span data-stu-id="20d40-414">`VbTypeName` returns the Visual Basic type name corresponding to the common language runtime type name.</span></span> <span data-ttu-id="20d40-415">Por ejemplo, si `UrtName` contiene "Int32" o "System.Int32", `VbTypeName` devuelve "Integer".</span><span class="sxs-lookup"><span data-stu-id="20d40-415">For example, if `UrtName` contains "Int32" or "System.Int32", `VbTypeName` returns "Integer".</span></span> <span data-ttu-id="20d40-416">Si `VbTypeName` no reconoce el valor de `UrtName`, devuelve `Nothing` (no la cadena "Nothing").</span><span class="sxs-lookup"><span data-stu-id="20d40-416">If `VbTypeName` does not recognize the value of `UrtName`, it returns `Nothing` (not the string "Nothing").</span></span>  
  
 <span data-ttu-id="20d40-417">El nombre de tipo en `UrtName` puede obtenerse de varios orígenes, por ejemplo la <xref:System.Reflection.MemberInfo.Name%2A> propiedad en el <xref:System.Reflection.MemberInfo> matriz de la <xref:System.Type> clase.</span><span class="sxs-lookup"><span data-stu-id="20d40-417">The type name in `UrtName` can be obtained from various sources, for example from the <xref:System.Reflection.MemberInfo.Name%2A> property in the <xref:System.Reflection.MemberInfo> array of the <xref:System.Type> class.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="20d40-418">En el ejemplo siguiente se usa el `VbTypeName` función para devolver los nombres de tipo de datos de varias variables.</span><span class="sxs-lookup"><span data-stu-id="20d40-418">The following example uses the `VbTypeName` function to return data type names for several variables.</span></span>  
  
 [!code-vb[VbVbalrFunctions#56](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#56)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.String" />
        <altmember cref="M:Microsoft.VisualBasic.Information.SystemTypeName(System.String)" />
      </Docs>
    </Member>
  </Members>
</Type>