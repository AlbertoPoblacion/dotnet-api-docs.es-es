<Type Name="Financial" FullName="Microsoft.VisualBasic.Financial">
  <Metadata><Meta Name="ms.openlocfilehash" Value="68cb7062c69fe85409574dd4a06d5869858b371b" /><Meta Name="ms.sourcegitcommit" Value="7461f9e28c2f184bd1596e6f07c25a3f34984516" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="es-ES" /><Meta Name="ms.lasthandoff" Value="03/28/2019" /><Meta Name="ms.locfileid" Value="58548398" /></Metadata><TypeSignature Language="C#" Value="public sealed class Financial" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed Financial extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.VisualBasic.Financial" />
  <TypeSignature Language="VB.NET" Value="Public Module Financial" />
  <TypeSignature Language="C++ CLI" Value="public ref class Financial sealed" />
  <TypeSignature Language="F#" Value="type Financial = class" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.VisualBasic</AssemblyName>
    <AssemblyVersion>7.0.5000.0</AssemblyVersion>
    <AssemblyVersion>8.0.0.0</AssemblyVersion>
    <AssemblyVersion>10.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>Microsoft.VisualBasic.CompilerServices.StandardModule</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>El módulo <see langword="Financial" /> contiene los procedimientos que se utilizan para llevar a cabo operaciones financieras.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este módulo admite a los miembros de la biblioteca en tiempo de ejecución de Visual Basic que realizan cálculos financieros como depreciación, valores presentes y futuros, las tasas de interés, tasas de devolución y pagos.  
  
   
  
## Examples  
 Este ejemplo se usa el `Rate` función para calcular la tasa de interés de un préstamo, dado el número total de pagos (`TotPmts`), el importe del pago de préstamo (`Payment`), el valor actual o la entidad del préstamo (`PVal`), el futuro valor del préstamo (`FVal`), un número que indica si los pagos vencen al principio o al final del período de pago (`PayType`) y una aproximación de la tasa de interés esperada (`Guess`).  
  
 [!code-vb[VbVbalrMath#2](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#2)]  
  
 ]]></format>
    </remarks>
    <related type="Article" href="~/docs/visual-basic/language-reference/keywords/financial-summary.md">Resumen financiero</related>
    <related type="Article" href="~/docs/visual-basic/language-reference/keywords/index.md">Palabras clave de Visual Basic</related>
    <related type="Article" href="~/docs/visual-basic/language-reference/runtime-library-members.md">Miembros de la biblioteca de tiempo de ejecución de Visual Basic</related>
  </Docs>
  <Members>
    <Member MemberName="DDB">
      <MemberSignature Language="C#" Value="public static double DDB (double Cost, double Salvage, double Life, double Period, double Factor = 2);" />
      <MemberSignature Language="ILAsm" Value=".method public static float64 DDB(float64 Cost, float64 Salvage, float64 Life, float64 Period, float64 Factor) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Financial.DDB(System.Double,System.Double,System.Double,System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function DDB (Cost As Double, Salvage As Double, Life As Double, Period As Double, Optional Factor As Double = 2) As Double" />
      <MemberSignature Language="F#" Value="static member DDB : double * double * double * double * double -&gt; double" Usage="Microsoft.VisualBasic.Financial.DDB (Cost, Salvage, Life, Period, Factor)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Cost" Type="System.Double" />
        <Parameter Name="Salvage" Type="System.Double" />
        <Parameter Name="Life" Type="System.Double" />
        <Parameter Name="Period" Type="System.Double" />
        <Parameter Name="Factor" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Cost">Obligatorio. Costo inicial del activo.</param>
        <param name="Salvage">Obligatorio. Valor del activo al final de su vida útil.</param>
        <param name="Life">Obligatorio. Extensión de la vida útil del activo.</param>
        <param name="Period">Obligatorio. Período por el que se calcula la amortización del activo.</param>
        <param name="Factor">Opcional. Tipo de disminución del saldo. Si se omite, se supone 2 (método de amortización doble de saldo decreciente).</param>
        <summary>Devuelve un valor que especifica la amortización de un activo durante un período de tiempo específico mediante el método de amortización doble de saldo decreciente o algún otro método que se especifique.</summary>
        <returns>Amortización de un activo durante un período de tiempo específico mediante el método de amortización doble de saldo decreciente o algún otro método que se especifique.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El método de depreciación por doble disminución de saldo calcula la amortización a un ritmo acelerado. Depreciación es mayor en el primer período y disminuye en períodos sucesivos.  
  
 El `Life` y `Period` argumentos deben expresarse en las mismas unidades. Por ejemplo, si `Life` se expresa en meses, `Period` también debe proporcionarse en meses. Todos los argumentos deben ser números positivos.  
  
 El `DDB` función usa la siguiente fórmula para calcular la depreciación durante un período determinado:  
  
 Depreciación / período = ((Cost-Salvage) * Factor) / vida  
  
   
  
## Examples  
 Este ejemplo se usa el `DDB` función para devolver la amortización de un activo durante un período especificado, dado el costo inicial (`InitCost`), el valor residual al final de la vida útil del activo (`SalvageVal`), la duración total del activo en años (`LifeTime`) y el período en años para la que se calcula la amortización (`Depr`).  
  
 [!code-vb[VbVbalrMath#3](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="Factor" /> &lt;= 0, <paramref name="Salvage" /> &lt; 0, <paramref name="Period" /> &lt;= 0 o <paramref name="Period" /> &gt; <paramref name="Life." /></exception>
        <altmember cref="M:Microsoft.VisualBasic.Financial.SLN(System.Double,System.Double,System.Double)" />
        <altmember cref="M:Microsoft.VisualBasic.Financial.SYD(System.Double,System.Double,System.Double,System.Double)" />
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/financial-summary.md">Resumen financiero</related>
      </Docs>
    </Member>
    <Member MemberName="FV">
      <MemberSignature Language="C#" Value="public static double FV (double Rate, double NPer, double Pmt, double PV = 0, Microsoft.VisualBasic.DueDate Due = Microsoft.VisualBasic.DueDate.EndOfPeriod);" />
      <MemberSignature Language="ILAsm" Value=".method public static float64 FV(float64 Rate, float64 NPer, float64 Pmt, float64 PV, valuetype Microsoft.VisualBasic.DueDate Due) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Financial.FV(System.Double,System.Double,System.Double,System.Double,Microsoft.VisualBasic.DueDate)" />
      <MemberSignature Language="VB.NET" Value="Public Function FV (Rate As Double, NPer As Double, Pmt As Double, Optional PV As Double = 0, Optional Due As DueDate = Microsoft.VisualBasic.DueDate.EndOfPeriod) As Double" />
      <MemberSignature Language="F#" Value="static member FV : double * double * double * double * Microsoft.VisualBasic.DueDate -&gt; double" Usage="Microsoft.VisualBasic.Financial.FV (Rate, NPer, Pmt, PV, Due)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Rate" Type="System.Double" />
        <Parameter Name="NPer" Type="System.Double" />
        <Parameter Name="Pmt" Type="System.Double" />
        <Parameter Name="PV" Type="System.Double" />
        <Parameter Name="Due" Type="Microsoft.VisualBasic.DueDate" />
      </Parameters>
      <Docs>
        <param name="Rate">Obligatorio. Tipo de interés por período. Por ejemplo, si se obtiene un crédito para la compra de un vehículo con un tipo anual (APR) del 10 por ciento y se realizan pagos mensuales, el tipo por período será 0,1/12 ó 0,0083.</param>
        <param name="NPer">Obligatorio. Número total de períodos de pago de la anualidad. Por ejemplo, si se realizan pagos mensuales para amortizar un crédito a cuatro años para la compra de un vehículo, el crédito tiene un total de 4 x 12 (ó 48) períodos de pago.</param>
        <param name="Pmt">Obligatorio. Pago que se va a realizar en cada período. Normalmente, los pagos contienen capital principal e interés que no cambia durante la vida útil de la anualidad.</param>
        <param name="PV">Opcional. Valor presente (o suma global) de una serie de pagos futuros. Por ejemplo, cuando se pide un crédito para comprar un vehículo, el importe del crédito será el valor presente para la entidad crediticia de los pagos mensuales que se van a realizar. Si se omite, se supone que el valor es 0.</param>
        <param name="Due">Opcional. Objeto de tipo <see cref="T:Microsoft.VisualBasic.DueDate" /> que indica cuándo vencen los pagos. Este argumento debe ser <see langword="DueDate.EndOfPeriod" /> si los pagos vencen al final del período o <see langword="DueDate.BegOfPeriod" /> si los pagos vencen al principio del mismo. Si se omite, se supone que es <see langword="DueDate.EndOfPeriod" />.</param>
        <summary>Devuelve un valor que especifica el valor futuro de una anualidad basándose en los pagos periódicos y fijos así como un tipo de interés fijo.</summary>
        <returns>El valor futuro de una anualidad basándose en los pagos periódicos y fijos así como un tipo de interés fijo.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Una anualidad es una serie de pagos fijos en efectivo realizados a lo largo del tiempo. Una anualidad puede ser un préstamo (por ejemplo, una hipoteca) o una inversión (como un plan de ahorro mensual).  
  
 El `Rate` y `NPer` argumentos deben calcularse mediante períodos de pago expresados en las mismas unidades. Por ejemplo, si `Rate` se calcula en meses, `NPer` también debe calcularse en meses.  
  
 Para todos los argumentos, efectivo pagado (como depósitos de ahorro) se representa con números negativos; efectivo recibido (por ejemplo, comprueba el dividendo) se representa mediante números positivos.  
  
   
  
## Examples  
 Este ejemplo se usa el `FV` función para devolver el valor futuro de una inversión dado el porcentaje de frecuencia que acumula por período (`APR / 12`), el número total de pagos (`TotPmts`), el pago (`Payment`), el valor actual de la inversión (`PVal`) y un número que indica si el pago se realiza al principio o al final del período de pago (`PayType`). Tenga en cuenta que dado que `Payment` representa efectivo pagado, es un número negativo.  
  
 [!code-vb[VbVbalrMath#22](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#22)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/financial-summary.md">Resumen financiero</related>
      </Docs>
    </Member>
    <Member MemberName="IPmt">
      <MemberSignature Language="C#" Value="public static double IPmt (double Rate, double Per, double NPer, double PV, double FV = 0, Microsoft.VisualBasic.DueDate Due = Microsoft.VisualBasic.DueDate.EndOfPeriod);" />
      <MemberSignature Language="ILAsm" Value=".method public static float64 IPmt(float64 Rate, float64 Per, float64 NPer, float64 PV, float64 FV, valuetype Microsoft.VisualBasic.DueDate Due) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Financial.IPmt(System.Double,System.Double,System.Double,System.Double,System.Double,Microsoft.VisualBasic.DueDate)" />
      <MemberSignature Language="VB.NET" Value="Public Function IPmt (Rate As Double, Per As Double, NPer As Double, PV As Double, Optional FV As Double = 0, Optional Due As DueDate = Microsoft.VisualBasic.DueDate.EndOfPeriod) As Double" />
      <MemberSignature Language="F#" Value="static member IPmt : double * double * double * double * double * Microsoft.VisualBasic.DueDate -&gt; double" Usage="Microsoft.VisualBasic.Financial.IPmt (Rate, Per, NPer, PV, FV, Due)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Rate" Type="System.Double" />
        <Parameter Name="Per" Type="System.Double" />
        <Parameter Name="NPer" Type="System.Double" />
        <Parameter Name="PV" Type="System.Double" />
        <Parameter Name="FV" Type="System.Double" />
        <Parameter Name="Due" Type="Microsoft.VisualBasic.DueDate" />
      </Parameters>
      <Docs>
        <param name="Rate">Obligatorio. Tipo de interés por período. Por ejemplo, si se obtiene un crédito para la compra de un vehículo con un tipo anual (APR) del 10 por ciento y se realizan pagos mensuales, el tipo por período será 0,1/12 ó 0,0083.</param>
        <param name="Per">Obligatorio. Período de pago de 1 a <paramref name="NPer" />.</param>
        <param name="NPer">Obligatorio. Número total de períodos de pago de la anualidad. Por ejemplo, si se realizan pagos mensuales para amortizar un crédito a cuatro años para la compra de un vehículo, el crédito tiene un total de 4 x 12 (ó 48) períodos de pago.</param>
        <param name="PV">Obligatorio. Valor presente o actual de una serie de pagos o ingresos futuros. Por ejemplo, cuando se pide un crédito para comprar un vehículo, el importe del crédito será el valor presente para la entidad crediticia de los pagos mensuales que se van a realizar.</param>
        <param name="FV">Opcional. Valor futuro o saldo en efectivo deseados una vez realizado el pago final. Por ejemplo, el valor futuro de un crédito es 0 $ porque ése es su valor después del último pago. Sin embargo, si se desea ahorrar 50.000 $ durante 18 años para la educación de un hijo, el valor futuro es 50.000 $. Si se omite, se supone que el valor es 0.</param>
        <param name="Due">Opcional. Objeto de tipo <see cref="T:Microsoft.VisualBasic.DueDate" /> que indica cuándo vencen los pagos. Este argumento debe ser <c>DueDate.EndOfPeriod</c> si los pagos vencen al final del período o <c>DueDate.BegOfPeriod</c> si los pagos vencen al principio del período. Si se omite, se da por supuesto el argumento <c>DueDate.EndOfPeriod</c>.</param>
        <summary>Devuelve un valor que especifica el pago de intereses durante un período determinado de una anualidad basándose en los pagos fijos periódicos y una tasa de interés fija.</summary>
        <returns>Pago de intereses durante un período determinado de una anualidad basado en pagos fijos periódicos y una tasa de interés fija.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Una anualidad es una serie de pagos fijos en efectivo realizados a lo largo del tiempo. Una anualidad puede ser un préstamo (por ejemplo, una hipoteca) o una inversión (como un plan de ahorro mensual).  
  
 El `Rate` y `NPer` argumentos deben calcularse mediante períodos de pago expresados en las mismas unidades. Por ejemplo, si `Rate` se calcula en meses, `NPer` también debe calcularse en meses.  
  
 Para todos los argumentos, efectivo pagado (como depósitos de ahorro) se representa con números negativos; efectivo recibido (por ejemplo, comprueba el dividendo) se representa mediante números positivos.  
  
   
  
## Examples  
 Este ejemplo se usa el `IPmt` función para calcular qué parte de un pago es interés cuando todos los pagos son del mismo valor. Dados son la tasa de interés por período (`APR / 12`), el período de pago para el que se desea la porción de interés (`Period`), el número total de pagos (`TotPmts`), el valor actual o la entidad del préstamo (`PVal`), el el valor futuro del préstamo (`FVal`) y un número que indica si los pagos vencen al principio o al final del período de pago (`PayType`).  
  
 [!code-vb[VbVbalrMath#26](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#26)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="Per" /> &lt;= 0 o <paramref name="Per" /> &gt; <paramref name="NPer" /></exception>
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/financial-summary.md">Resumen financiero</related>
      </Docs>
    </Member>
    <Member MemberName="IRR">
      <MemberSignature Language="C#" Value="public static double IRR (ref double[] ValueArray, double Guess = 0.1);" />
      <MemberSignature Language="ILAsm" Value=".method public static float64 IRR(float64[]&amp; ValueArray, float64 Guess) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Financial.IRR(System.Double[]@,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function IRR (ByRef ValueArray As Double(), Optional Guess As Double = 0.1) As Double" />
      <MemberSignature Language="F#" Value="static member IRR :  * double -&gt; double" Usage="Microsoft.VisualBasic.Financial.IRR (ValueArray, Guess)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ValueArray" Type="System.Double[]" RefType="ref" />
        <Parameter Name="Guess" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="ValueArray">Obligatorio. Matriz de <see langword="Double" /> que especifica los valores de flujo de caja. La matriz debe contener por lo menos un valor negativo (un pago) y un valor positivo (un ingreso).</param>
        <param name="Guess">Opcional. <see langword="IRR" /> devuelve un objeto que especifica el valor estimado. Si se omite <paramref name="Guess" /> es 0,1 (10 por ciento).</param>
        <summary>Devuelve un valor que especifica la tasa de rendimiento interna para una serie de flujos de caja periódicos (pagos e ingresos).</summary>
        <returns>Tasa de rendimiento interna para una serie de flujos de caja periódicos (pagos e ingresos).</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La tasa interna de retorno es la tasa de interés recibida por una inversión que consta de los pagos e ingresos que se producen a intervalos regulares.  
  
 El `IRR` función utiliza el orden de los valores de la matriz para interpretar el orden de los pagos y recibos. Asegúrese de que escriba su pago y los valores de recepción en la secuencia correcta. El flujo de efectivo para cada período no debe corregirse, ya que es de una anualidad.  
  
 `IRR` se calcula por iteración. Comenzando con el valor de `Guess`, `IRR` recorre el cálculo hasta que el resultado es preciso hasta 0,00001 por ciento. Si `IRR` no se encuentra un resultado después de 20 intentos, se produce un error.  
  
   
  
## Examples  
 En este ejemplo, el `IRR` función devuelve la tasa interna de retorno para una serie de cinco flujos de efectivo contenidos en la matriz `Values()`. El primer elemento de matriz es un flujo de caja negativo que representa los costos de inicio. Los cuatro flujos de efectivo restantes representan flujos de efectivo positivos para los cuatro años posteriores. `Guess` es la tasa interna de retorno estimada.  
  
 [!code-vb[VbVbalrMath#20](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#20)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Los valores de argumento de matriz no son válidos o <paramref name="Guess" /> &lt;= -1.</exception>
        <altmember cref="M:Microsoft.VisualBasic.Financial.NPV(System.Double,System.Double[]@)" />
        <altmember cref="M:Microsoft.VisualBasic.Financial.MIRR(System.Double[]@,System.Double,System.Double)" />
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/financial-summary.md">Resumen financiero</related>
      </Docs>
    </Member>
    <Member MemberName="MIRR">
      <MemberSignature Language="C#" Value="public static double MIRR (ref double[] ValueArray, double FinanceRate, double ReinvestRate);" />
      <MemberSignature Language="ILAsm" Value=".method public static float64 MIRR(float64[]&amp; ValueArray, float64 FinanceRate, float64 ReinvestRate) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Financial.MIRR(System.Double[]@,System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function MIRR (ByRef ValueArray As Double(), FinanceRate As Double, ReinvestRate As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double MIRR(cli::array &lt;double&gt; ^ % ValueArray, double FinanceRate, double ReinvestRate);" />
      <MemberSignature Language="F#" Value="static member MIRR :  * double * double -&gt; double" Usage="Microsoft.VisualBasic.Financial.MIRR (ValueArray, FinanceRate, ReinvestRate)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ValueArray" Type="System.Double[]" RefType="ref" />
        <Parameter Name="FinanceRate" Type="System.Double" />
        <Parameter Name="ReinvestRate" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="ValueArray">Obligatorio. Matriz de <see langword="Double" /> que especifica los valores de flujo de caja. La matriz debe contener por lo menos un valor negativo (un pago) y un valor positivo (un ingreso).</param>
        <param name="FinanceRate">Obligatorio. Tipo de interés abonado como costo de la financiación.</param>
        <param name="ReinvestRate">Obligatorio. Tipo de interés de las ganancias por la reinversión del dinero en efectivo.</param>
        <summary>Devuelve un valor que especifica la tasa de rendimiento interna modificada para una serie de flujos de caja periódicos (pagos e ingresos).</summary>
        <returns>Tasa de rendimiento interna modificada para una serie de flujos de caja periódicos (pagos e ingresos).</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La tasa de devolución interna modificada es la tasa interna de retorno cuando los pagos y recibos financiados con distintas velocidades. El `MIRR` función tiene en cuenta el costo de la inversión (`FinanceRate`) y la tasa de interés recibida por la reinversión del dinero en efectivo (`ReinvestRate`).  
  
 El `FinanceRate` y `ReinvestRate` argumentos son porcentajes expresados como valores decimales. Por ejemplo, 12 por ciento se expresa como 0,12.  
  
 El `MIRR` función utiliza el orden de los valores de la matriz para interpretar el orden de los pagos y recibos. Asegúrese de que escriba su pago y los valores de recepción en la secuencia correcta.  
  
   
  
## Examples  
 Este ejemplo se usa el `MIRR` función para devolver la tasa interna de retorno para una serie de flujos de efectivo contenidos en la matriz modificada `Values()`. `LoanAPR` representa el interés de financiación y `InvAPR` representa la tasa de interés recibida por la reinversión.  
  
 [!code-vb[VbVbalrMath#29](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#29)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">El rango de <paramref name="ValueArray" /> no es igual a 1, <paramref name="FinanceRate" /> = -1 o <paramref name="ReinvestRate" /> = -1</exception>
        <exception cref="T:System.DivideByZeroException">Se ha producido una división entre cero.</exception>
        <altmember cref="M:Microsoft.VisualBasic.Financial.IRR(System.Double[]@,System.Double)" />
        <altmember cref="M:Microsoft.VisualBasic.Financial.NPV(System.Double,System.Double[]@)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.DivideByZeroException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/financial-summary.md">Resumen financiero</related>
      </Docs>
    </Member>
    <Member MemberName="NPer">
      <MemberSignature Language="C#" Value="public static double NPer (double Rate, double Pmt, double PV, double FV = 0, Microsoft.VisualBasic.DueDate Due = Microsoft.VisualBasic.DueDate.EndOfPeriod);" />
      <MemberSignature Language="ILAsm" Value=".method public static float64 NPer(float64 Rate, float64 Pmt, float64 PV, float64 FV, valuetype Microsoft.VisualBasic.DueDate Due) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Financial.NPer(System.Double,System.Double,System.Double,System.Double,Microsoft.VisualBasic.DueDate)" />
      <MemberSignature Language="VB.NET" Value="Public Function NPer (Rate As Double, Pmt As Double, PV As Double, Optional FV As Double = 0, Optional Due As DueDate = Microsoft.VisualBasic.DueDate.EndOfPeriod) As Double" />
      <MemberSignature Language="F#" Value="static member NPer : double * double * double * double * Microsoft.VisualBasic.DueDate -&gt; double" Usage="Microsoft.VisualBasic.Financial.NPer (Rate, Pmt, PV, FV, Due)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Rate" Type="System.Double" />
        <Parameter Name="Pmt" Type="System.Double" />
        <Parameter Name="PV" Type="System.Double" />
        <Parameter Name="FV" Type="System.Double" />
        <Parameter Name="Due" Type="Microsoft.VisualBasic.DueDate" />
      </Parameters>
      <Docs>
        <param name="Rate">Obligatorio. Tipo de interés por período. Por ejemplo, si se obtiene un crédito para la compra de un vehículo con un tipo anual (APR) del 10 por ciento y se realizan pagos mensuales, el tipo por período será 0,1/12 ó 0,0083.</param>
        <param name="Pmt">Obligatorio. Pago que se va a realizar en cada período. Normalmente, los pagos contienen capital principal e interés que no cambia durante la vida útil de la anualidad.</param>
        <param name="PV">Obligatorio. Valor presente o actual de una serie de pagos o ingresos futuros. Por ejemplo, cuando se pide un crédito para comprar un vehículo, el importe del crédito será el valor presente para la entidad crediticia de los pagos mensuales que se van a realizar.</param>
        <param name="FV">Opcional. Valor futuro o saldo en efectivo deseados una vez realizado el pago final. Por ejemplo, el valor futuro de un crédito es 0 $ porque ése es su valor después del último pago. Sin embargo, si se desea ahorrar 50.000 $ durante 18 años para la educación de un hijo, el valor futuro es 50.000 $. Si se omite, se supone que el valor es 0.</param>
        <param name="Due">Opcional. Objeto de tipo <see cref="T:Microsoft.VisualBasic.DueDate" /> que indica cuándo vencen los pagos. Este argumento debe ser <c>DueDate.EndOfPeriod</c> si los pagos vencen al final del período o <c>DueDate.BegOfPeriod</c> si los pagos vencen al principio del período. Si se omite, se da por supuesto el argumento <c>DueDate.EndOfPeriod</c>.</param>
        <summary>Devuelve un valor que especifica el número de períodos de una anualidad basándose en los pagos periódicos y fijos así como un tipo de interés fijo.</summary>
        <returns>Número de períodos de una anualidad basado en pagos periódicos y fijos, así como un tipo de interés fijo.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Una anualidad es una serie de pagos fijos en efectivo durante un periodo de tiempo. Una anualidad puede ser un préstamo (por ejemplo, una hipoteca) o una inversión (como un plan de ahorro mensual).  
  
 Para todos los argumentos, efectivo pagado (como depósitos de ahorro) se representa con números negativos; efectivo recibido (por ejemplo, comprueba el dividendo) se representa mediante números positivos.  
  
   
  
## Examples  
 Este ejemplo se usa el `NPer` función para devolver el número de períodos durante el cual se deben realizar pagos para amortizar un préstamo cuyo valor se encuentra en `PVal`. También proporciona son la tasa de interés por período (`APR / 12`), el pago (`Payment`), el valor futuro del préstamo (`FVal`) y un número que indica si los pagos vencen al principio o al final del período de pago (`PayType`).  
  
 [!code-vb[VbVbalrMath#19](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#19)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="Rate" /> = 0 y <paramref name="Pmt" /> = 0</exception>
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/financial-summary.md">Resumen financiero</related>
      </Docs>
    </Member>
    <Member MemberName="NPV">
      <MemberSignature Language="C#" Value="public static double NPV (double Rate, ref double[] ValueArray);" />
      <MemberSignature Language="ILAsm" Value=".method public static float64 NPV(float64 Rate, float64[]&amp; ValueArray) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Financial.NPV(System.Double,System.Double[]@)" />
      <MemberSignature Language="VB.NET" Value="Public Function NPV (Rate As Double, ByRef ValueArray As Double()) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double NPV(double Rate, cli::array &lt;double&gt; ^ % ValueArray);" />
      <MemberSignature Language="F#" Value="static member NPV : double *  -&gt; double" Usage="Microsoft.VisualBasic.Financial.NPV (Rate, ValueArray)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Rate" Type="System.Double" />
        <Parameter Name="ValueArray" Type="System.Double[]" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="Rate">Obligatorio. Tipo de descuento durante el período, expresado como un valor decimal.</param>
        <param name="ValueArray">Obligatorio. Matriz de <see langword="Double" /> que especifica los valores de flujo de caja. La matriz debe contener por lo menos un valor negativo (un pago) y un valor positivo (un ingreso).</param>
        <summary>Devuelve un valor que especifica el valor presente neto de una inversión basándose en una serie de flujos de caja periódicos (pagos e ingresos) y una tasa de descuento.</summary>
        <returns>Valor presente neto de una inversión basándose en una serie de flujos de caja periódicos (pagos e ingresos) y una tasa de descuento.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El valor presente neto de una inversión es el valor actual de una serie de pagos e ingresos futuros.  
  
 El `NPV` función utiliza el orden de los valores de la matriz para interpretar el orden de los pagos y recibos. Asegúrese de que escriba su pago y los valores de recepción en la secuencia correcta.  
  
 El `NPV` inversión comienza un período anterior a la fecha del primer valor de flujo de caja y termina con el último valor de flujo de efectivo de la matriz.  
  
 El cálculo del valor presente neto se basa en flujos de efectivo. Si se produce el primer flujo de efectivo al principio del primer período, el primer valor debe agregarse al valor devuelto por `NPV` y no debe incluirse en los valores de flujo de efectivo de `ValueArray`.  
  
 El `NPV` función es similar a la `PV` función (valor actual), salvo que el `PV` función permite que los flujos de caja comiencen al final o al principio de un período. A diferencia de la variable `NPV` valores de flujo de efectivo, `PV` flujos de efectivo debe corregirse a lo largo de la inversión.  
  
   
  
## Examples  
 Este ejemplo se usa el `NPV` función para devolver el valor presente neto de una serie de flujos de efectivo contenidos en la matriz `values()`. El valor devuelto, almacenado en `FixedRetRate`, representa la tasa interna de retorno fija.  
  
 [!code-vb[VbVbalrMath#1](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="ValueArray" /> es <see langword="Nothing" />, intervalo de <paramref name="ValueArray" /> &lt;&gt; 1, o <paramref name="Rate" /> = -1</exception>
        <altmember cref="M:Microsoft.VisualBasic.Financial.IRR(System.Double[]@,System.Double)" />
        <altmember cref="M:Microsoft.VisualBasic.Financial.MIRR(System.Double[]@,System.Double,System.Double)" />
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/financial-summary.md">Resumen financiero</related>
      </Docs>
    </Member>
    <Member MemberName="Pmt">
      <MemberSignature Language="C#" Value="public static double Pmt (double Rate, double NPer, double PV, double FV = 0, Microsoft.VisualBasic.DueDate Due = Microsoft.VisualBasic.DueDate.EndOfPeriod);" />
      <MemberSignature Language="ILAsm" Value=".method public static float64 Pmt(float64 Rate, float64 NPer, float64 PV, float64 FV, valuetype Microsoft.VisualBasic.DueDate Due) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Financial.Pmt(System.Double,System.Double,System.Double,System.Double,Microsoft.VisualBasic.DueDate)" />
      <MemberSignature Language="VB.NET" Value="Public Function Pmt (Rate As Double, NPer As Double, PV As Double, Optional FV As Double = 0, Optional Due As DueDate = Microsoft.VisualBasic.DueDate.EndOfPeriod) As Double" />
      <MemberSignature Language="F#" Value="static member Pmt : double * double * double * double * Microsoft.VisualBasic.DueDate -&gt; double" Usage="Microsoft.VisualBasic.Financial.Pmt (Rate, NPer, PV, FV, Due)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Rate" Type="System.Double" />
        <Parameter Name="NPer" Type="System.Double" />
        <Parameter Name="PV" Type="System.Double" />
        <Parameter Name="FV" Type="System.Double" />
        <Parameter Name="Due" Type="Microsoft.VisualBasic.DueDate" />
      </Parameters>
      <Docs>
        <param name="Rate">Obligatorio. Tipo de interés por período. Por ejemplo, si se obtiene un crédito para la compra de un vehículo con un tipo anual (APR) del 10 por ciento y se realizan pagos mensuales, el tipo por período será 0,1/12 ó 0,0083.</param>
        <param name="NPer">Obligatorio. Número total de períodos de pago de la anualidad. Por ejemplo, si se realizan pagos mensuales para amortizar un crédito a cuatro años para la compra de un vehículo, el crédito tiene un total de 4 x 12 (ó 48) períodos de pago.</param>
        <param name="PV">Obligatorio. Valor presente (o suma global) actual de una serie de pagos que se van a abonar en el futuro. Por ejemplo, cuando se pide un crédito para comprar un vehículo, el importe del crédito será el valor presente para la entidad crediticia de los pagos mensuales que se van a realizar.</param>
        <param name="FV">Opcional. Valor futuro o saldo en efectivo deseados una vez realizado el pago final. Por ejemplo, el valor futuro de un crédito es 0 $ porque ése es su valor después del último pago. Sin embargo, si se desea ahorrar 50.000 $ durante 18 años para la educación de un hijo, el valor futuro es 50.000 $. Si se omite, se supone que el valor es 0.</param>
        <param name="Due">Opcional. Objeto de tipo <see cref="T:Microsoft.VisualBasic.DueDate" /> que indica cuándo vencen los pagos. Este argumento debe ser <c>DueDate.EndOfPeriod</c> si los pagos vencen al final del período o <c>DueDate.BegOfPeriod</c> si los pagos vencen al principio del período. Si se omite, se da por supuesto el argumento <c>DueDate.EndOfPeriod</c>.</param>
        <summary>Devuelve un valor que especifica el pago de una anualidad basándose en los pagos periódicos y fijos así como un tipo de interés fijo.</summary>
        <returns>Pago de una anualidad basándose en los pagos periódicos y fijos así como un tipo de interés fijo.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Una anualidad es una serie de pagos fijos en efectivo realizados durante un período de tiempo. Una anualidad puede ser un préstamo (por ejemplo, una hipoteca) o una inversión (como un plan de ahorro mensual).  
  
 El `Rate` y `NPer` argumentos deben calcularse mediante períodos de pago expresados en las mismas unidades. Por ejemplo, si `Rate` se calcula en meses, `NPer` también debe calcularse en meses.  
  
 Para todos los argumentos, caja de pago (por ejemplo, los depósitos de ahorro) se representa con números negativos; efectivo recibido (por ejemplo, comprueba el dividendo) se representa mediante números positivos.  
  
   
  
## Examples  
 Este ejemplo se usa el `Pmt` función para devolver el pago mensual para un préstamo durante un período fijo. Dados son la tasa de interés por período (`APR / 12`), el número total de pagos (`TotPmts`), el valor actual o la entidad del préstamo (`PVal`), el valor futuro del préstamo (`FVal`) y un número que indica si el pago vence al principio o al final del período de pago `(PayType).`  
  
 [!code-vb[VbVbalrMath#7](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#7)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="NPer" /> = 0.</exception>
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/financial-summary.md">Resumen financiero</related>
      </Docs>
    </Member>
    <Member MemberName="PPmt">
      <MemberSignature Language="C#" Value="public static double PPmt (double Rate, double Per, double NPer, double PV, double FV = 0, Microsoft.VisualBasic.DueDate Due = Microsoft.VisualBasic.DueDate.EndOfPeriod);" />
      <MemberSignature Language="ILAsm" Value=".method public static float64 PPmt(float64 Rate, float64 Per, float64 NPer, float64 PV, float64 FV, valuetype Microsoft.VisualBasic.DueDate Due) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Financial.PPmt(System.Double,System.Double,System.Double,System.Double,System.Double,Microsoft.VisualBasic.DueDate)" />
      <MemberSignature Language="VB.NET" Value="Public Function PPmt (Rate As Double, Per As Double, NPer As Double, PV As Double, Optional FV As Double = 0, Optional Due As DueDate = Microsoft.VisualBasic.DueDate.EndOfPeriod) As Double" />
      <MemberSignature Language="F#" Value="static member PPmt : double * double * double * double * double * Microsoft.VisualBasic.DueDate -&gt; double" Usage="Microsoft.VisualBasic.Financial.PPmt (Rate, Per, NPer, PV, FV, Due)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Rate" Type="System.Double" />
        <Parameter Name="Per" Type="System.Double" />
        <Parameter Name="NPer" Type="System.Double" />
        <Parameter Name="PV" Type="System.Double" />
        <Parameter Name="FV" Type="System.Double" />
        <Parameter Name="Due" Type="Microsoft.VisualBasic.DueDate" />
      </Parameters>
      <Docs>
        <param name="Rate">Obligatorio. Tipo de interés por período. Por ejemplo, si se obtiene un crédito para la compra de un vehículo con un tipo anual (APR) del 10 por ciento y se realizan pagos mensuales, el tipo por período será 0,1/12 ó 0,0083.</param>
        <param name="Per">Obligatorio. Período de pago de 1 a <paramref name="NPer" />.</param>
        <param name="NPer">Obligatorio. Número total de períodos de pago de la anualidad. Por ejemplo, si se realizan pagos mensuales para amortizar un crédito a cuatro años para la compra de un vehículo, el crédito tiene un total de 4 x 12 (ó 48) períodos de pago.</param>
        <param name="PV">Obligatorio. Valor actual de una serie de pagos o ingresos futuros. Por ejemplo, cuando se pide un crédito para comprar un vehículo, el importe del crédito será el valor presente para la entidad crediticia de los pagos mensuales que se van a realizar.</param>
        <param name="FV">Opcional. Valor futuro o saldo en efectivo deseados una vez realizado el pago final. Por ejemplo, el valor futuro de un crédito es 0 $ porque ése es su valor después del último pago. Sin embargo, si se desea ahorrar 50.000 $ durante 18 años para la educación de un hijo, el valor futuro es 50.000 $. Si se omite, se supone que el valor es 0.</param>
        <param name="Due">Opcional. Objeto de tipo <see cref="T:Microsoft.VisualBasic.DueDate" /> que indica cuándo vencen los pagos. Este argumento debe ser <c>DueDate.EndOfPeriod</c> si los pagos vencen al final del período o <c>DueDate.BegOfPeriod</c> si los pagos vencen al principio del período. Si se omite, se da por supuesto el argumento <c>DueDate.EndOfPeriod</c>.</param>
        <summary>Devuelve un valor que especifica el pago de principal durante un período determinado de una anualidad basándose en los pagos fijos periódicos y una tasa de interés fija.</summary>
        <returns>Pago principal durante un período determinado de una anualidad basándose en los pagos fijos periódicos y una tasa de interés fija.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Una anualidad es una serie de pagos fijos en efectivo durante un periodo de tiempo. Una anualidad puede ser un préstamo (por ejemplo, una hipoteca) o una inversión (como un plan de ahorro mensual).  
  
 El `Rate` y `NPer` argumentos deben calcularse mediante períodos de pago expresados en las mismas unidades. Por ejemplo, si `Rate` se calcula en meses, `NPer` también debe calcularse en meses.  
  
 Para todos los argumentos, caja de pago (por ejemplo, los depósitos de ahorro) se representa con números negativos; efectivo recibido (por ejemplo, comprueba el dividendo) se representa mediante números positivos.  
  
   
  
## Examples  
 Este ejemplo se usa el `PPmt` función para calcular qué parte de un pago para un período específico es el principal cuando todos los pagos son del mismo valor. Dados son la tasa de interés por período (`APR / 12`), el período de pago para el que se desea la parte principal (`Period`), el número total de pagos (`TotPmts`), el valor actual o la entidad del préstamo (`PVal`), el el valor futuro del préstamo (`FVal`) y un número que indica si los pagos vencen al principio o al final del período de pago (`PayType`).  
  
 [!code-vb[VbVbalrMath#24](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#24)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="Per" /> &lt;=0 o <paramref name="Per" /> &gt; <paramref name="NPer" />.</exception>
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/financial-summary.md">Resumen financiero</related>
      </Docs>
    </Member>
    <Member MemberName="PV">
      <MemberSignature Language="C#" Value="public static double PV (double Rate, double NPer, double Pmt, double FV = 0, Microsoft.VisualBasic.DueDate Due = Microsoft.VisualBasic.DueDate.EndOfPeriod);" />
      <MemberSignature Language="ILAsm" Value=".method public static float64 PV(float64 Rate, float64 NPer, float64 Pmt, float64 FV, valuetype Microsoft.VisualBasic.DueDate Due) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Financial.PV(System.Double,System.Double,System.Double,System.Double,Microsoft.VisualBasic.DueDate)" />
      <MemberSignature Language="VB.NET" Value="Public Function PV (Rate As Double, NPer As Double, Pmt As Double, Optional FV As Double = 0, Optional Due As DueDate = Microsoft.VisualBasic.DueDate.EndOfPeriod) As Double" />
      <MemberSignature Language="F#" Value="static member PV : double * double * double * double * Microsoft.VisualBasic.DueDate -&gt; double" Usage="Microsoft.VisualBasic.Financial.PV (Rate, NPer, Pmt, FV, Due)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Rate" Type="System.Double" />
        <Parameter Name="NPer" Type="System.Double" />
        <Parameter Name="Pmt" Type="System.Double" />
        <Parameter Name="FV" Type="System.Double" />
        <Parameter Name="Due" Type="Microsoft.VisualBasic.DueDate" />
      </Parameters>
      <Docs>
        <param name="Rate">Obligatorio. Tipo de interés por período. Por ejemplo, si se obtiene un crédito para la compra de un vehículo con un tipo anual (APR) del 10 por ciento y se realizan pagos mensuales, el tipo por período será 0,1/12 ó 0,0083.</param>
        <param name="NPer">Obligatorio. Número total de períodos de pago de la anualidad. Por ejemplo, si se realizan pagos mensuales para amortizar un crédito a cuatro años para la compra de un vehículo, el crédito tiene un total de 4 x 12 (ó 48) períodos de pago.</param>
        <param name="Pmt">Obligatorio. Pago que se va a realizar en cada período. Normalmente, los pagos contienen capital principal e interés que no cambia durante la vida útil de la anualidad.</param>
        <param name="FV">Opcional. Valor futuro o saldo en efectivo deseados una vez realizado el pago final. Por ejemplo, el valor futuro de un crédito es 0 $ porque ése es su valor después del último pago. Sin embargo, si se desea ahorrar 50.000 $ durante 18 años para la educación de un hijo, el valor futuro es 50.000 $. Si se omite, se supone que el valor es 0.</param>
        <param name="Due">Opcional. Objeto de tipo <see cref="T:Microsoft.VisualBasic.DueDate" /> que indica cuándo vencen los pagos. Este argumento debe ser <c>DueDate.EndOfPeriod</c> si los pagos vencen al final del período o <c>DueDate.BegOfPeriod</c> si los pagos vencen al principio del período. Si se omite, se da por supuesto el argumento <c>DueDate.EndOfPeriod</c>.</param>
        <summary>Devuelve un valor que especifica el valor presente de una anualidad basándose en los pagos periódicos y fijos que se van a realizar en el futuro así como un tipo de interés fijo.</summary>
        <returns>Valor presente de una anualidad basándose en los pagos periódicos y fijos que se van a realizar en el futuro así como un tipo de interés fijo.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Una anualidad es una serie de pagos fijos en efectivo durante un periodo de tiempo. Una anualidad puede ser un préstamo (por ejemplo, una hipoteca) o una inversión (como un plan de ahorro mensual).  
  
 El `Rate` y `NPer` argumentos deben calcularse mediante períodos de pago expresados en las mismas unidades. Por ejemplo, si `Rate` se calcula en meses, `NPer` también debe calcularse en meses.  
  
 Para todos los argumentos, efectivo pagado (como depósitos de ahorro) se representa con números negativos; efectivo recibido (por ejemplo, comprueba el dividendo) se representa mediante números positivos.  
  
   
  
## Examples  
 En este ejemplo, el `PV` función devuelve el valor actual de una anualidad de $1.000.000 que proporcionará $ 50.000 al año durante los próximos 20 años. Proporcionado son el tipo esperado anual (`APR`), el número total de pagos (`TotPmts`), la cantidad de cada pago (`YrIncome`), el valor futuro total de la inversión (`FVal`) y un número que indica si cada pago se realiza al principio o al final del período de pago (`PayType`). Tenga en cuenta que `YrIncome` es un número negativo porque representa efectivo de la anualidad cada año.  
  
 [!code-vb[VbVbalrMath#25](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#25)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/financial-summary.md">Resumen financiero</related>
      </Docs>
    </Member>
    <Member MemberName="Rate">
      <MemberSignature Language="C#" Value="public static double Rate (double NPer, double Pmt, double PV, double FV = 0, Microsoft.VisualBasic.DueDate Due = Microsoft.VisualBasic.DueDate.EndOfPeriod, double Guess = 0.1);" />
      <MemberSignature Language="ILAsm" Value=".method public static float64 Rate(float64 NPer, float64 Pmt, float64 PV, float64 FV, valuetype Microsoft.VisualBasic.DueDate Due, float64 Guess) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Financial.Rate(System.Double,System.Double,System.Double,System.Double,Microsoft.VisualBasic.DueDate,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Rate (NPer As Double, Pmt As Double, PV As Double, Optional FV As Double = 0, Optional Due As DueDate = Microsoft.VisualBasic.DueDate.EndOfPeriod, Optional Guess As Double = 0.1) As Double" />
      <MemberSignature Language="F#" Value="static member Rate : double * double * double * double * Microsoft.VisualBasic.DueDate * double -&gt; double" Usage="Microsoft.VisualBasic.Financial.Rate (NPer, Pmt, PV, FV, Due, Guess)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="NPer" Type="System.Double" />
        <Parameter Name="Pmt" Type="System.Double" />
        <Parameter Name="PV" Type="System.Double" />
        <Parameter Name="FV" Type="System.Double" />
        <Parameter Name="Due" Type="Microsoft.VisualBasic.DueDate" />
        <Parameter Name="Guess" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="NPer">Obligatorio. Número total de períodos de pago de la anualidad. Por ejemplo, si se realizan pagos mensuales para amortizar un crédito a cuatro años para la compra de un vehículo, el crédito tiene un total de 4*12 (o 48) períodos de pago.</param>
        <param name="Pmt">Obligatorio. Pago que se va a realizar en cada período. Normalmente, los pagos contienen capital principal e interés que no cambia durante la vida útil de la anualidad.</param>
        <param name="PV">Obligatorio. Valor presente o actual de una serie de pagos o ingresos futuros. Por ejemplo, cuando se pide un crédito para comprar un vehículo, el importe del crédito será el valor presente para la entidad crediticia de los pagos mensuales que se van a realizar.</param>
        <param name="FV">Opcional. Valor futuro o saldo en efectivo deseados una vez realizado el pago final. Por ejemplo, el valor futuro de un crédito es 0 $ porque ése es su valor después del último pago. Sin embargo, si se desea ahorrar 50.000 $ durante 18 años para la educación de un hijo, el valor futuro es 50.000 $. Si se omite, se supone que el valor es 0.</param>
        <param name="Due">Opcional. Objeto de tipo <see cref="T:Microsoft.VisualBasic.DueDate" /> que indica cuándo vencen los pagos. Este argumento debe ser <c>DueDate.EndOfPeriod</c> si los pagos vencen al final del período o <c>DueDate.BegOfPeriod</c> si los pagos vencen al principio del período. Si se omite, se da por supuesto el argumento <c>DueDate.EndOfPeriod</c>.</param>
        <param name="Guess">Opcional. <see langword="Rate" /> devuelve un valor que estima. Si se omite <paramref name="Guess" /> es 0,1 (10 por ciento).</param>
        <summary>Devuelve un valor que especifica el tipo de interés por período de una anualidad.</summary>
        <returns>Tipo de interés por período de una anualidad.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Una anualidad es una serie de pagos fijos en efectivo durante un periodo de tiempo. Una anualidad puede ser un préstamo (por ejemplo, una hipoteca) o una inversión (como un plan de ahorro mensual).  
  
 Para todos los argumentos, efectivo pagado (como depósitos de ahorro) se representa con números negativos; efectivo recibido (por ejemplo, comprueba el dividendo) se representa mediante números positivos.  
  
 `Rate` se calcula por iteración. Comenzando con el valor de `Guess`, `Rate` recorre el cálculo hasta que el resultado es preciso hasta 0,00001 por ciento. Si `Rate` no se encuentra un resultado después de 20 intentos, se produce un error. Si su suposición es 10 por ciento y `Rate` se produce un error, pruebe con un valor diferente para `Guess`.  
  
   
  
## Examples  
 Este ejemplo se usa el `Rate` función para calcular la tasa de interés de un préstamo dado el número total de pagos (`TotPmts`), el importe del pago de préstamo (`Payment`), el valor actual o la entidad del préstamo (`PVal`), el futuro valor del préstamo (`FVal`), un número que indica si los pagos vencen al principio o al final del período de pago (`PayType`) y una aproximación de la tasa de interés esperada (`Guess`).  
  
 [!code-vb[VbVbalrMath#2](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="NPer" /> &lt;= 0.</exception>
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/financial-summary.md">Resumen financiero</related>
      </Docs>
    </Member>
    <Member MemberName="SLN">
      <MemberSignature Language="C#" Value="public static double SLN (double Cost, double Salvage, double Life);" />
      <MemberSignature Language="ILAsm" Value=".method public static float64 SLN(float64 Cost, float64 Salvage, float64 Life) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Financial.SLN(System.Double,System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function SLN (Cost As Double, Salvage As Double, Life As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double SLN(double Cost, double Salvage, double Life);" />
      <MemberSignature Language="F#" Value="static member SLN : double * double * double -&gt; double" Usage="Microsoft.VisualBasic.Financial.SLN (Cost, Salvage, Life)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Cost" Type="System.Double" />
        <Parameter Name="Salvage" Type="System.Double" />
        <Parameter Name="Life" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Cost">Obligatorio. Costo inicial del activo.</param>
        <param name="Salvage">Obligatorio. Valor del activo al final de su vida útil.</param>
        <param name="Life">Obligatorio. Extensión de la vida útil del activo.</param>
        <summary>Devuelve un valor que especifica la amortización lineal de un activo para un solo período.</summary>
        <returns>Amortización lineal de un activo para un solo período.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El período de amortización se debe expresar en la misma unidad que la `Life` argumento. Todos los argumentos deben ser números positivos.  
  
   
  
## Examples  
 Este ejemplo se usa el `SLN` función para devolver la amortización lineal de un activo para un solo período dado el costo inicial del activo (`InitCost`), el valor residual al final de la vida útil del activo (`SalvageVal`) y la duración total de el activo en años (`LifeTime`).  
  
 [!code-vb[VbVbalrMath#3](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="Life" /> = 0.</exception>
        <altmember cref="M:Microsoft.VisualBasic.Financial.SYD(System.Double,System.Double,System.Double,System.Double)" />
        <altmember cref="M:Microsoft.VisualBasic.Financial.DDB(System.Double,System.Double,System.Double,System.Double,System.Double)" />
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/financial-summary.md">Resumen financiero</related>
      </Docs>
    </Member>
    <Member MemberName="SYD">
      <MemberSignature Language="C#" Value="public static double SYD (double Cost, double Salvage, double Life, double Period);" />
      <MemberSignature Language="ILAsm" Value=".method public static float64 SYD(float64 Cost, float64 Salvage, float64 Life, float64 Period) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Financial.SYD(System.Double,System.Double,System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function SYD (Cost As Double, Salvage As Double, Life As Double, Period As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double SYD(double Cost, double Salvage, double Life, double Period);" />
      <MemberSignature Language="F#" Value="static member SYD : double * double * double * double -&gt; double" Usage="Microsoft.VisualBasic.Financial.SYD (Cost, Salvage, Life, Period)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Cost" Type="System.Double" />
        <Parameter Name="Salvage" Type="System.Double" />
        <Parameter Name="Life" Type="System.Double" />
        <Parameter Name="Period" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Cost">Obligatorio. Costo inicial del activo.</param>
        <param name="Salvage">Obligatorio. Valor del activo al final de su vida útil.</param>
        <param name="Life">Obligatorio. Extensión de la vida útil del activo.</param>
        <param name="Period">Obligatorio. Período por el que se calcula la amortización del activo.</param>
        <summary>Devuelve un valor que especifica la amortización de la suma de cifras de los años de un activo para un período específico.</summary>
        <returns>Amortización de la suma de cifras de los años de un activo para un período específico.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El `Life` y `Period` argumentos deben expresarse en las mismas unidades. Por ejemplo, si `Life` se expresa en meses, `Period` también debe proporcionarse en meses. Todos los argumentos deben ser números positivos.  
  
   
  
## Examples  
 Este ejemplo se usa el `SYD` función para devolver la amortización de un activo durante un período especificado, dado el costo inicial del activo (`InitCost`), el valor residual al final de la vida útil del activo (`SalvageVal`) y la duración total del recurso en años (`LifeTime`).  
  
 [!code-vb[VbVbalrMath#3](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="Salvage" /> &lt; 0, <paramref name="Period" /> &gt; <paramref name="Life" /> o <paramref name="Period" /> &lt;=0.</exception>
        <altmember cref="M:Microsoft.VisualBasic.Financial.DDB(System.Double,System.Double,System.Double,System.Double,System.Double)" />
        <altmember cref="M:Microsoft.VisualBasic.Financial.SLN(System.Double,System.Double,System.Double)" />
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/financial-summary.md">Resumen financiero</related>
      </Docs>
    </Member>
  </Members>
</Type>