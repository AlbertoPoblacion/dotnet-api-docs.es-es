<Type Name="DateAndTime" FullName="Microsoft.VisualBasic.DateAndTime">
  <Metadata><Meta Name="ms.openlocfilehash" Value="2c90494f50963965c1fc8cd6dee5ba8348981f13" /><Meta Name="ms.sourcegitcommit" Value="bc24a3ba616ee1df8b858f9400cae4f058ea3a7e" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="es-ES" /><Meta Name="ms.lasthandoff" Value="06/19/2019" /><Meta Name="ms.locfileid" Value="67239195" /></Metadata><TypeSignature Language="C#" Value="public sealed class DateAndTime" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit DateAndTime extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.VisualBasic.DateAndTime" />
  <TypeSignature Language="VB.NET" Value="Public Module DateAndTime" />
  <TypeSignature Language="C++ CLI" Value="public ref class DateAndTime sealed" />
  <TypeSignature Language="F#" Value="type DateAndTime = class" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.VisualBasic</AssemblyName>
    <AssemblyVersion>7.0.5000.0</AssemblyVersion>
    <AssemblyVersion>8.0.0.0</AssemblyVersion>
    <AssemblyVersion>10.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
    <AssemblyVersion>10.0.4.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>Microsoft.VisualBasic.CompilerServices.StandardModule</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>El módulo <see langword="DateAndTime" /> contiene los procedimientos y propiedades que se utilizan en las operaciones de fecha y hora.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este módulo admite las palabras clave del lenguaje Visual Basic y miembros de la biblioteca de tiempo de ejecución que obtención la fecha actual o la hora, realizan cálculos de fecha, devuelvan una fecha u hora, establezca la fecha u hora o la duración de un proceso de tiempo.  
  
   
  
## Examples  
 Este ejemplo se usa el `Today` propiedad para devolver la fecha actual del sistema.  
  
```vb  
Dim thisDate As Date  
thisDate = Today   
```  
  
 ]]></format>
    </remarks>
    <related type="Article" href="~/docs/visual-basic/language-reference/keywords/dates-and-times-summary.md">Resumen de fechas y horas</related>
    <related type="Article" href="~/docs/visual-basic/language-reference/keywords/index.md">Palabras clave de Visual Basic</related>
    <related type="Article" href="~/docs/visual-basic/language-reference/runtime-library-members.md">Miembros de la biblioteca de tiempo de ejecución de Visual Basic</related>
  </Docs>
  <Members>
    <MemberGroup MemberName="DateAdd">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Devuelve un valor de <see langword="Date" /> que contiene un valor de fecha y hora al que se ha sumado un intervalo de tiempo especificado.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="DateAdd">
      <MemberSignature Language="C#" Value="public static DateTime DateAdd (Microsoft.VisualBasic.DateInterval Interval, double Number, DateTime DateValue);" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype System.DateTime DateAdd(valuetype Microsoft.VisualBasic.DateInterval Interval, float64 Number, valuetype System.DateTime DateValue) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.DateAndTime.DateAdd(Microsoft.VisualBasic.DateInterval,System.Double,System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Function DateAdd (Interval As DateInterval, Number As Double, DateValue As DateTime) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTime DateAdd(Microsoft::VisualBasic::DateInterval Interval, double Number, DateTime DateValue);" />
      <MemberSignature Language="F#" Value="static member DateAdd : Microsoft.VisualBasic.DateInterval * double * DateTime -&gt; DateTime" Usage="Microsoft.VisualBasic.DateAndTime.DateAdd (Interval, Number, DateValue)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Interval" Type="Microsoft.VisualBasic.DateInterval" />
        <Parameter Name="Number" Type="System.Double" />
        <Parameter Name="DateValue" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="Interval">Obligatorio. Valor de enumeración <see cref="T:Microsoft.VisualBasic.DateInterval" /> o expresión de cadena que representa el intervalo de tiempo que se desea sumar.</param>
        <param name="Number">Obligatorio. Expresión de punto flotante que representa el número de intervalos que se desea sumar. Puede ser positivo (para obtener valores de fecha y hora futuros) o negativo (para obtener valores de fecha y hora del pasado). Puede contener una parte fraccionaria cuando <paramref name="Interval" /> especifica horas, minutos o segundos. Para otros valores de <paramref name="Interval" />, se omite cualquier parte fraccionaria de <paramref name="Number" />.</param>
        <param name="DateValue">Obligatorio. Una expresión que representa la fecha y la hora a las que se va a sumar el intervalo. <paramref name="DateValue" /> no se cambia en el programa que realiza la llamada.</param>
        <summary>Devuelve un valor que contiene un valor de fecha y hora al que se ha sumado un intervalo de tiempo especificado.</summary>
        <returns>Valor que contiene un valor de fecha y hora al que se ha sumado un intervalo de tiempo especificado.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Puede usar el `DateAdd` función para agregar o restar un intervalo de tiempo especificado de una fecha. Por ejemplo, puede calcular una fecha 30 días a partir de hoy o una hora 45 minutos antes de ahora.  
  
 Para sumar días a `DateValue`, puede usar `DateInterval.Day`, `DateInterval.DayOfYear`, o `DateInterval.Weekday`. Estos se tratan como equivalentes porque `DayOfYear` y `Weekday` no son intervalos de tiempo significativo.  
  
 El `DateAdd` función nunca devuelve una fecha no válida. Si es necesario, la parte del día de la fecha resultante se ajusta hacia abajo en el último día del mes del año resultante resultante. El ejemplo siguiente agrega un mes hasta el 31 de enero:  
  
```vb  
Dim NextMonth As Date = DateAdd(DateInterval.Month, 1, #1/31/1995#)  
```  
  
 En este ejemplo, `DateAdd` devuelve `#2/28/1995#`, no `#2/31/1995#`. Si `DateValue` es `#1/31/1996#`, devuelve `#2/29/1996#` porque 1996 es un año bisiesto.  
  
> [!NOTE]
>  `DateAdd` usa la configuración de calendario actual de la <xref:System.Globalization.CultureInfo.CurrentCulture%2A> propiedad de la <xref:System.Globalization.CultureInfo> clase en el <xref:System.Globalization> espacio de nombres. El valor predeterminado <xref:System.Globalization.CultureInfo.CurrentCulture%2A> valores se determinan mediante **Panel de Control** configuración.  
  
 Puesto que cada `Date` valor es compatible con un <xref:System.DateTime> estructura, sus métodos proporcionan opciones adicionales para agregar intervalos de tiempo. Por ejemplo, puede agregar un número decimal de días, redondeado al milisegundo más cercano, un `Date` variable como sigue:  
  
```vb  
Dim NextTime As Date = Now        ' Current date and time.  
NextTime = NextTime.AddDays(3.4)  ' Increment by 3 2/5 days.  
```  
  
 El `Interval` argumento puede tener uno de los valores siguientes.  
  
|Valor de enumeración|String|Unidad de intervalo de tiempo para agregar|  
|-----------------------|------------|----------------------------------|  
|`DateInterval.Day`|d|Día; truncado al valor integral|  
|`DateInterval.DayOfYear`|y|Día; truncado al valor integral|  
|`DateInterval.Hour`|h|Hora; redondea al milisegundo más cercano|  
|`DateInterval.Minute`|n|Minuto; redondea al milisegundo más cercano|  
|`DateInterval.Month`|m|Mes; truncado al valor integral|  
|`DateInterval.Quarter`|q|Trimestre; truncado al valor integral|  
|`DateInterval.Second`|s|Segundo; redondea al milisegundo más cercano|  
|`DateInterval.Weekday`|s|Día; truncado al valor integral|  
|`DateInterval.WeekOfYear`|ww|Semana; truncado al valor integral|  
|`DateInterval.Year`|yyyy|Año; truncado al valor integral|  
  
   
  
## Examples  
 En este ejemplo se toma una fecha y, mediante el `DateAdd` de función, se muestra la fecha correspondiente de un número especificado de meses en el futuro.  
  
 [!code-vb[VbVbalrFunctions#25](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#25)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidCastException"><paramref name="DateValue" /> no está establecido en <see langword="Date" />.</exception>
        <exception cref="T:System.ArgumentException"><paramref name="Interval" /> no es válido.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">La fecha calculada es anterior a las 00:00:00 horas del 1 de enero del año 1 o posterior a las 23:59:59 del 31 de diciembre de 9999.</exception>
        <altmember cref="Overload:Microsoft.VisualBasic.DateAndTime.DateDiff" />
        <altmember cref="Overload:Microsoft.VisualBasic.DateAndTime.DatePart" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Day(System.DateTime)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Format(System.Object,System.String)" />
        <altmember cref="P:Microsoft.VisualBasic.DateAndTime.Now" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Weekday(System.DateTime,Microsoft.VisualBasic.FirstDayOfWeek)" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Year(System.DateTime)" />
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md">Resumen de tipos de datos (Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="DateAdd">
      <MemberSignature Language="C#" Value="public static DateTime DateAdd (string Interval, double Number, object DateValue);" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype System.DateTime DateAdd(string Interval, float64 Number, object DateValue) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.DateAndTime.DateAdd(System.String,System.Double,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function DateAdd (Interval As String, Number As Double, DateValue As Object) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTime DateAdd(System::String ^ Interval, double Number, System::Object ^ DateValue);" />
      <MemberSignature Language="F#" Value="static member DateAdd : string * double * obj -&gt; DateTime" Usage="Microsoft.VisualBasic.DateAndTime.DateAdd (Interval, Number, DateValue)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Interval" Type="System.String" />
        <Parameter Name="Number" Type="System.Double" />
        <Parameter Name="DateValue" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Interval">Obligatorio. Valor de enumeración <see cref="T:Microsoft.VisualBasic.DateInterval" /> o expresión de cadena que representa el intervalo de tiempo que se desea sumar.</param>
        <param name="Number">Obligatorio. Expresión de punto flotante que representa el número de intervalos que se desea sumar. <paramref name="Number" /> puede ser positivo (para obtener valores de fecha y hora futuros) o negativo (para obtener valores de fecha y hora del pasado). Puede contener una parte fraccionaria cuando <paramref name="Interval" /> especifica horas, minutos o segundos. Para otros valores de <paramref name="Interval" />, se omite cualquier parte fraccionaria de <paramref name="Number" />.</param>
        <param name="DateValue">Obligatorio. Una expresión que representa la fecha y la hora a las que se va a sumar el intervalo. <paramref name="DateValue" /> no se cambia en el programa que realiza la llamada.</param>
        <summary>Devuelve un valor que contiene un valor de fecha y hora al que se ha sumado un intervalo de tiempo especificado.</summary>
        <returns>Valor que contiene un valor de fecha y hora al que se ha sumado un intervalo de tiempo especificado.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Puede usar el `DateAdd` función para agregar o restar un intervalo de tiempo especificado de una fecha. Por ejemplo, puede calcular una fecha 30 días a partir de hoy o una hora 45 minutos antes de ahora.  
  
 Para sumar días a `DateValue`, puede usar `DateInterval.Day`, `DateInterval.DayOfYear`, o `DateInterval.Weekday`. Estos se tratan como equivalentes porque `DayOfYear` y `Weekday` no son intervalos de tiempo significativo.  
  
 El `DateAdd` función nunca devuelve una fecha no válida. Si es necesario, la parte del día de la fecha resultante se ajusta hacia abajo en el último día del mes del año resultante resultante. El ejemplo siguiente agrega un mes hasta el 31 de enero:  
  
```vb  
Dim NextMonth As Date = DateAdd(DateInterval.Month, 1, #1/31/1995#)  
```  
  
 En este ejemplo, `DateAdd` devuelve `#2/28/1995#`, no `#2/31/1995#`. Si `DateValue` es `#1/31/1996#`, devuelve `#2/29/1996#` porque 1996 es un año bisiesto.  
  
> [!NOTE]
>  `DateAdd` usa la configuración de calendario actual de la <xref:System.Globalization.CultureInfo.CurrentCulture%2A> propiedad de la <xref:System.Globalization.CultureInfo> clase en el <xref:System.Globalization> espacio de nombres. El valor predeterminado <xref:System.Globalization.CultureInfo.CurrentCulture%2A> valores se determinan mediante **Panel de Control** configuración.  
  
 Puesto que cada `Date` valor es compatible con un <xref:System.DateTime> estructura, sus métodos proporcionan opciones adicionales para agregar intervalos de tiempo. Por ejemplo, puede agregar un número decimal de días, redondeado al milisegundo más cercano, un `Date` variable como sigue:  
  
```vb  
Dim NextTime As Date = Now        ' Current date and time.  
NextTime = NextTime.AddDays(3.4)  ' Increment by 3 2/5 days.  
```  
  
 El `Interval` argumento puede tener uno de los valores siguientes.  
  
|Valor de enumeración|String|Unidad de intervalo de tiempo para agregar|  
|-----------------------|------------|----------------------------------|  
|`DateInterval.Day`|d|Día; truncado al valor integral|  
|`DateInterval.DayOfYear`|y|Día; truncado al valor integral|  
|`DateInterval.Hour`|h|Hora; redondea al milisegundo más cercano|  
|`DateInterval.Minute`|n|Minuto; redondea al milisegundo más cercano|  
|`DateInterval.Month`|m|Mes; truncado al valor integral|  
|`DateInterval.Quarter`|q|Trimestre; truncado al valor integral|  
|`DateInterval.Second`|s|Segundo; redondea al milisegundo más cercano|  
|`DateInterval.Weekday`|s|Día; truncado al valor integral|  
|`DateInterval.WeekOfYear`|ww|Semana; truncado al valor integral|  
|`DateInterval.Year`|yyyy|Año; truncado al valor integral|  
  
   
  
## Examples  
 En este ejemplo se toma una fecha y, mediante el `DateAdd` de función, se muestra la fecha correspondiente de un número especificado de meses en el futuro.  
  
 [!code-vb[VbVbalrFunctions#25](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#25)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidCastException"><paramref name="DateValue" /> no está establecido en <see langword="Date" />.</exception>
        <exception cref="T:System.ArgumentException"><paramref name="Interval" /> no es válido.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">La fecha calculada es anterior a las 00:00:00 horas del 1 de enero del año 1 o posterior a las 23:59:59 del 31 de diciembre de 9999.</exception>
        <altmember cref="Overload:Microsoft.VisualBasic.DateAndTime.DateDiff" />
        <altmember cref="Overload:Microsoft.VisualBasic.DateAndTime.DatePart" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Day(System.DateTime)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Format(System.Object,System.String)" />
        <altmember cref="P:Microsoft.VisualBasic.DateAndTime.Now" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Weekday(System.DateTime,Microsoft.VisualBasic.FirstDayOfWeek)" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Year(System.DateTime)" />
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md">Resumen de tipos de datos (Visual Basic)</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="DateDiff">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Devuelve un valor que especifica el número de intervalos de tiempo entre dos valores de <see langword="Date" />.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="DateDiff">
      <MemberSignature Language="C#" Value="public static long DateDiff (Microsoft.VisualBasic.DateInterval Interval, DateTime Date1, DateTime Date2, Microsoft.VisualBasic.FirstDayOfWeek DayOfWeek = Microsoft.VisualBasic.FirstDayOfWeek.Sunday, Microsoft.VisualBasic.FirstWeekOfYear WeekOfYear = Microsoft.VisualBasic.FirstWeekOfYear.Jan1);" />
      <MemberSignature Language="ILAsm" Value=".method public static int64 DateDiff(valuetype Microsoft.VisualBasic.DateInterval Interval, valuetype System.DateTime Date1, valuetype System.DateTime Date2, valuetype Microsoft.VisualBasic.FirstDayOfWeek DayOfWeek, valuetype Microsoft.VisualBasic.FirstWeekOfYear WeekOfYear) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.DateAndTime.DateDiff(Microsoft.VisualBasic.DateInterval,System.DateTime,System.DateTime,Microsoft.VisualBasic.FirstDayOfWeek,Microsoft.VisualBasic.FirstWeekOfYear)" />
      <MemberSignature Language="VB.NET" Value="Public Function DateDiff (Interval As DateInterval, Date1 As DateTime, Date2 As DateTime, Optional DayOfWeek As FirstDayOfWeek = Microsoft.VisualBasic.FirstDayOfWeek.Sunday, Optional WeekOfYear As FirstWeekOfYear = Microsoft.VisualBasic.FirstWeekOfYear.Jan1) As Long" />
      <MemberSignature Language="F#" Value="static member DateDiff : Microsoft.VisualBasic.DateInterval * DateTime * DateTime * Microsoft.VisualBasic.FirstDayOfWeek * Microsoft.VisualBasic.FirstWeekOfYear -&gt; int64" Usage="Microsoft.VisualBasic.DateAndTime.DateDiff (Interval, Date1, Date2, DayOfWeek, WeekOfYear)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Interval" Type="Microsoft.VisualBasic.DateInterval" />
        <Parameter Name="Date1" Type="System.DateTime" />
        <Parameter Name="Date2" Type="System.DateTime" />
        <Parameter Name="DayOfWeek" Type="Microsoft.VisualBasic.FirstDayOfWeek" />
        <Parameter Name="WeekOfYear" Type="Microsoft.VisualBasic.FirstWeekOfYear" />
      </Parameters>
      <Docs>
        <param name="Interval">Obligatorio. Valor de enumeración <see cref="T:Microsoft.VisualBasic.DateInterval" /> o expresión de cadena que representa el intervalo de tiempo que se desea utilizar como unidad de la diferencia entre <paramref name="Date1" /> y <paramref name="Date2" />.</param>
        <param name="Date1">Obligatorio. Primer valor de fecha u hora que se va a utilizar en el cálculo.</param>
        <param name="Date2">Obligatorio. Segundo valor de fecha u hora que se va a utilizar en el cálculo.</param>
        <param name="DayOfWeek">Opcional. Valor elegido de la enumeración <see cref="T:Microsoft.VisualBasic.FirstDayOfWeek" /> que especifica el primer día de la semana. Si no se especifica, se utiliza <see cref="F:Microsoft.VisualBasic.FirstDayOfWeek.Sunday" />.</param>
        <param name="WeekOfYear">Opcional. Valor elegido de la enumeración <see cref="T:Microsoft.VisualBasic.FirstWeekOfYear" /> que especifica la primera semana del año. Si no se especifica, se utiliza <see cref="F:Microsoft.VisualBasic.FirstWeekOfYear.Jan1" />.</param>
        <summary>Devuelve un valor Long que especifica el número de intervalos de tiempo entre dos valores de <see langword="Date" />.</summary>
        <returns>Valor Long que especifica el número de intervalos de tiempo entre dos valores de <see langword="Date" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Puede usar el `DateDiff` función para determinar cuántos intervalos de tiempo especificados existen entre dos valores de fecha y hora. Por ejemplo, podría usar `DateDiff` para calcular el número de días entre dos fechas o el número de semanas entre hoy y el final del año.  
  
## <a name="behavior"></a>Comportamiento  
  
-   **Tratamiento de los parámetros.** `DateDiff` Resta el valor de `Date1` desde el valor de `Date2` para generar la diferencia. Ninguno de estos valores se cambia en el programa que realiza la llamada.  
  
-   **Los valores devueltos.** Dado que `Date1` y `Date2` son de la `Date` tipo de datos, que contienen valores de fecha y hora con precisión de 100 nanosegundos en el temporizador del sistema. Sin embargo, `DateDiff` siempre devuelve el número de intervalos de tiempo como un `Long` valor.  
  
     Si `Date1` representa una fecha y hora que posterior `Date2`, `DateDiff` devuelve un número negativo.  
  
-   **Intervalos de días.** Si `Interval` está establecido en `DateInterval.DayOfYear`, se trata igual que `DateInterval.Day`, ya que `DayOfYear` no es una unidad significativa para un intervalo de tiempo.  
  
-   **Intervalos de semanas.** Si `Interval` está establecido en `DateInterval.WeekOfYear`, el valor devuelto representa el número de semanas entre el primer día de la semana que contiene `Date1` y el primer día de la semana que contiene `Date2`. El ejemplo siguiente muestra cómo se producen resultados distintos a `DateInterval.Weekday`.  
  
     [!code-vb[VbVbalrFunctions#60](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#60)]  
  
     En el ejemplo anterior, `DateDiff` devuelve 0 para `wD` porque la diferencia entre las dos fechas es inferior a siete días, pero devuelve 1 para `wY` porque hay una diferencia de siete días entre los primeros días del calendario correspondiente semanas.  
  
-   **Intervalos más grandes.** Si `Interval` está establecido en `DateInterval.Year`, el valor devuelto se calcula simplemente a partir de las partes del año `Date1` y `Date2`. De forma similar, el valor devuelto para `DateInterval.Month` se calcula simplemente a partir de las partes del año y mes de los argumentos y para `DateInterval.Quarter` desde los trimestres que contienen las dos fechas.  
  
     Por ejemplo, al comparar el 31 de diciembre a 1 de enero del año siguiente, `DateDiff` devuelve 1 para `DateInterval.Year`, `DateInterval.Quarter`, o `DateInterval.Month`, incluso aunque haya pasado a lo sumo un día.  
  
     Para las referencias culturales como japonés que tienen varias eras, el `DateDiff` método no devuelve una diferencia en años si la diferencia abarca dos o más eras. En su lugar, puede calcular la diferencia en los valores devueltos por la <xref:System.DateTime.Year%2A> propiedad, como se muestra en el ejemplo siguiente: `date2.Year - date1.Year`.  
  
-   **Otros intervalos.** Puesto que cada `Date` valor es compatible con un <xref:System.DateTime> estructura, sus métodos proporcionan opciones adicionales para buscar los intervalos de tiempo. Por ejemplo, puede usar el `Subtract` método en cualquiera de sus formas sobrecargadas: <xref:System.DateTime.Subtract%2A?displayProperty=nameWithType> resta un <xref:System.TimeSpan> desde un `Date` variable devuelva otro `Date` valor, y <xref:System.DateTime.Subtract%2A?displayProperty=nameWithType> resta un `Date` valor para devolver un <xref:System.TimeSpan>. Tiempo de un proceso para averiguar cuántos milisegundos tarda, como se muestra en el ejemplo siguiente.  
  
     [!code-vb[VbVbalrFunctions#61](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#61)]  
  
 El `Interval` argumento puede tener uno de los valores siguientes.  
  
|Valor de enumeración|Valor de cadena|Unidad de la diferencia de tiempo|  
|-----------------------|------------------|-----------------------------|  
|`DateInterval.Day`|"d"|Day|  
|`DateInterval.DayOfYear`|"y"|Day|  
|`DateInterval.Hour`|"h"|Hour|  
|`DateInterval.Minute`|"n"|Minute|  
|`DateInterval.Month`|"m"|Mes|  
|`DateInterval.Quarter`|"q"|Trimestre|  
|`DateInterval.Second`|"s"|Second|  
|`DateInterval.Weekday`|"w"|Semana|  
|`DateInterval.WeekOfYear`|"ww"|Semana del calendario|  
|`DateInterval.Year`|"yyyy"|Año|  
  
 El `DayOfWeek` argumento puede tener uno de los valores siguientes.  
  
|Valor de enumeración|Valor|Descripción|  
|-----------------------|-----------|-----------------|  
|`FirstDayOfWeek.System`|0|Primer día de la semana especificado en la configuración del sistema|  
|`FirstDayOfWeek.Sunday`|1|Domingo (predeterminado)|  
|`FirstDayOfWeek.Monday`|2|Lunes (cumple la norma ISO 8601, sección 3.17)|  
|`FirstDayOfWeek.Tuesday`|3|Martes|  
|`FirstDayOfWeek.Wednesday`|4|Miércoles|  
|`FirstDayOfWeek.Thursday`|5|Jueves|  
|`FirstDayOfWeek.Friday`|6|Viernes|  
|`FirstDayOfWeek.Saturday`|7|Sábado|  
  
 El `WeekOfYear` argumento puede tener uno de los valores siguientes.  
  
|Valor de enumeración|Valor|Descripción|  
|-----------------------|-----------|-----------------|  
|`FirstWeekOfYear.System`|0|Primera semana del año especificado en la configuración del sistema|  
|`FirstWeekOfYear.Jan1`|1|Semana en que se produzca el 1 de enero (valor predeterminado)|  
|`FirstWeekOfYear.FirstFourDays`|2|Semana que tiene al menos cuatro días en el nuevo año (cumple la norma ISO 8601, sección 3.17)|  
|`FirstWeekOfYear.FirstFullWeek`|3|Primera semana completa del año nuevo|  
  
   
  
## Examples  
 Este ejemplo se usa el `DateDiff` función para mostrar el número de días entre una fecha determinada y la fecha actual.  
  
 [!code-vb[VbVbalrFunctions#26](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#26)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="Date1" />, <paramref name="Date2" /> o <paramref name="DayofWeek" /> está fuera del intervalo.</exception>
        <exception cref="T:System.InvalidCastException"><paramref name="Date1" /> o <paramref name="Date2" /> pertenece a un tipo no válido.</exception>
        <altmember cref="Overload:Microsoft.VisualBasic.DateAndTime.DateAdd" />
        <altmember cref="Overload:Microsoft.VisualBasic.DateAndTime.DatePart" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Day(System.DateTime)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Format(System.Object,System.String)" />
        <altmember cref="P:Microsoft.VisualBasic.DateAndTime.Now" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Weekday(System.DateTime,Microsoft.VisualBasic.FirstDayOfWeek)" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Year(System.DateTime)" />
        <altmember cref="T:System.DateTime" />
        <altmember cref="T:System.TimeSpan" />
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md">Resumen de tipos de datos (Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="DateDiff">
      <MemberSignature Language="C#" Value="public static long DateDiff (string Interval, object Date1, object Date2, Microsoft.VisualBasic.FirstDayOfWeek DayOfWeek = Microsoft.VisualBasic.FirstDayOfWeek.Sunday, Microsoft.VisualBasic.FirstWeekOfYear WeekOfYear = Microsoft.VisualBasic.FirstWeekOfYear.Jan1);" />
      <MemberSignature Language="ILAsm" Value=".method public static int64 DateDiff(string Interval, object Date1, object Date2, valuetype Microsoft.VisualBasic.FirstDayOfWeek DayOfWeek, valuetype Microsoft.VisualBasic.FirstWeekOfYear WeekOfYear) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.DateAndTime.DateDiff(System.String,System.Object,System.Object,Microsoft.VisualBasic.FirstDayOfWeek,Microsoft.VisualBasic.FirstWeekOfYear)" />
      <MemberSignature Language="VB.NET" Value="Public Function DateDiff (Interval As String, Date1 As Object, Date2 As Object, Optional DayOfWeek As FirstDayOfWeek = Microsoft.VisualBasic.FirstDayOfWeek.Sunday, Optional WeekOfYear As FirstWeekOfYear = Microsoft.VisualBasic.FirstWeekOfYear.Jan1) As Long" />
      <MemberSignature Language="F#" Value="static member DateDiff : string * obj * obj * Microsoft.VisualBasic.FirstDayOfWeek * Microsoft.VisualBasic.FirstWeekOfYear -&gt; int64" Usage="Microsoft.VisualBasic.DateAndTime.DateDiff (Interval, Date1, Date2, DayOfWeek, WeekOfYear)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Interval" Type="System.String" />
        <Parameter Name="Date1" Type="System.Object" />
        <Parameter Name="Date2" Type="System.Object" />
        <Parameter Name="DayOfWeek" Type="Microsoft.VisualBasic.FirstDayOfWeek" />
        <Parameter Name="WeekOfYear" Type="Microsoft.VisualBasic.FirstWeekOfYear" />
      </Parameters>
      <Docs>
        <param name="Interval">Obligatorio. Valor de enumeración <see cref="T:Microsoft.VisualBasic.DateInterval" /> o expresión de cadena que representa el intervalo de tiempo que se desea utilizar como unidad de la diferencia entre <paramref name="Date1" /> y <paramref name="Date2" />.</param>
        <param name="Date1">Obligatorio. Primer valor de fecha u hora que se va a utilizar en el cálculo.</param>
        <param name="Date2">Obligatorio. Segundo valor de fecha u hora que se va a utilizar en el cálculo.</param>
        <param name="DayOfWeek">Opcional. Valor elegido de la enumeración <see cref="T:Microsoft.VisualBasic.FirstDayOfWeek" /> que especifica el primer día de la semana. Si no se especifica, se utiliza <see cref="F:Microsoft.VisualBasic.FirstDayOfWeek.Sunday" />.</param>
        <param name="WeekOfYear">Opcional. Valor elegido de la enumeración <see cref="T:Microsoft.VisualBasic.FirstWeekOfYear" /> que especifica la primera semana del año. Si no se especifica, se utiliza <see cref="F:Microsoft.VisualBasic.FirstWeekOfYear.Jan1" />.</param>
        <summary>Devuelve un valor Long que especifica el número de intervalos de tiempo entre dos valores de <see langword="Date" />.</summary>
        <returns>Valor Long que especifica el número de intervalos de tiempo entre dos valores de <see langword="Date" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Puede usar el `DateDiff` función para determinar cuántos intervalos de tiempo especificados existen entre dos valores de fecha y hora. Por ejemplo, podría usar `DateDiff` para calcular el número de días entre dos fechas o el número de semanas entre hoy y el final del año.  
  
## <a name="behavior"></a>Comportamiento  
  
-   **Tratamiento de los parámetros.** `DateDiff` Resta el valor de `Date1` desde el valor de `Date2` para generar la diferencia. Ninguno de estos valores se cambia en el programa que realiza la llamada.  
  
-   **Los valores devueltos.** Dado que `Date1` y `Date2` son de la `Date` tipo de datos, que contienen valores de fecha y hora con precisión de 100 nanosegundos en el temporizador del sistema. Sin embargo, `DateDiff` siempre devuelve el número de intervalos de tiempo como un `Long` valor.  
  
     Si `Date1` representa una fecha y hora que posterior `Date2`, `DateDiff` devuelve un número negativo.  
  
-   **Intervalos de días.** Si `Interval` está establecido en `DateInterval.DayOfYear`, se trata igual que `DateInterval.Day`, ya que `DayOfYear` no es una unidad significativa para un intervalo de tiempo.  
  
-   **Intervalos de semanas.** Si `Interval` está establecido en `DateInterval.WeekOfYear`, el valor devuelto representa el número de semanas entre el primer día de la semana que contiene `Date1` y el primer día de la semana que contiene `Date2`. El ejemplo siguiente muestra cómo se producen resultados distintos a `DateInterval.Weekday`.  
  
     [!code-vb[VbVbalrFunctions#60](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#60)]  
  
     En el ejemplo anterior, `DateDiff` devuelve 0 para `wD` porque la diferencia entre las dos fechas es inferior a siete días, pero devuelve 1 para `wY` porque hay una diferencia de siete días entre los primeros días del calendario correspondiente semanas.  
  
-   **Intervalos más grandes.** Si `Interval` está establecido en `DateInterval.Year`, el valor devuelto se calcula simplemente a partir de las partes del año `Date1` y `Date2`. De forma similar, el valor devuelto para `DateInterval.Month` se calcula simplemente a partir de las partes del año y mes de los argumentos y para `DateInterval.Quarter` desde los trimestres que contienen las dos fechas.  
  
     Por ejemplo, al comparar el 31 de diciembre a 1 de enero del año siguiente, `DateDiff` devuelve 1 para `DateInterval.Year`, `DateInterval.Quarter`, o `DateInterval.Month`, incluso aunque haya pasado a lo sumo un día.  
  
     Para las referencias culturales como japonés que tienen varias eras, el `DateDiff` método no devuelve una diferencia en años si la diferencia abarca dos o más eras. En su lugar, puede calcular la diferencia en los valores devueltos por la <xref:System.DateTime.Year%2A> propiedad, como se muestra en el ejemplo siguiente: `date2.Year - date1.Year`.  
  
-   **Otros intervalos.** Puesto que cada `Date` valor es compatible con un <xref:System.DateTime> estructura, sus métodos proporcionan opciones adicionales para buscar los intervalos de tiempo. Por ejemplo, puede usar el `Subtract` método en cualquiera de sus formas sobrecargadas: <xref:System.DateTime.Subtract%2A?displayProperty=nameWithType> resta un <xref:System.TimeSpan> desde un `Date` variable devuelva otro `Date` valor, y <xref:System.DateTime.Subtract%2A?displayProperty=nameWithType> resta un `Date` valor para devolver un <xref:System.TimeSpan>. Tiempo de un proceso para averiguar cuántos milisegundos tarda, como se muestra en el ejemplo siguiente.  
  
     [!code-vb[VbVbalrFunctions#61](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#61)]  
  
 El `Interval` argumento puede tener uno de los valores siguientes.  
  
|Valor de enumeración|Valor de cadena|Unidad de la diferencia de tiempo|  
|-----------------------|------------------|-----------------------------|  
|`DateInterval.Day`|"d"|Day|  
|`DateInterval.DayOfYear`|"y"|Day|  
|`DateInterval.Hour`|"h"|Hour|  
|`DateInterval.Minute`|"n"|Minute|  
|`DateInterval.Month`|"m"|Mes|  
|`DateInterval.Quarter`|"q"|Trimestre|  
|`DateInterval.Second`|"s"|Second|  
|`DateInterval.Weekday`|"w"|Semana|  
|`DateInterval.WeekOfYear`|"ww"|Semana del calendario|  
|`DateInterval.Year`|"yyyy"|Año|  
  
 El `DayOfWeek` argumento puede tener uno de los valores siguientes.  
  
|Valor de enumeración|Valor|Descripción|  
|-----------------------|-----------|-----------------|  
|`FirstDayOfWeek.System`|0|Primer día de la semana especificado en la configuración del sistema|  
|`FirstDayOfWeek.Sunday`|1|Domingo (predeterminado)|  
|`FirstDayOfWeek.Monday`|2|Lunes (cumple la norma ISO 8601, sección 3.17)|  
|`FirstDayOfWeek.Tuesday`|3|Martes|  
|`FirstDayOfWeek.Wednesday`|4|Miércoles|  
|`FirstDayOfWeek.Thursday`|5|Jueves|  
|`FirstDayOfWeek.Friday`|6|Viernes|  
|`FirstDayOfWeek.Saturday`|7|Sábado|  
  
 El `WeekOfYear` argumento puede tener uno de los valores siguientes.  
  
|Valor de enumeración|Valor|Descripción|  
|-----------------------|-----------|-----------------|  
|`FirstWeekOfYear.System`|0|Primera semana del año especificado en la configuración del sistema|  
|`FirstWeekOfYear.Jan1`|1|Semana en que se produzca el 1 de enero (valor predeterminado)|  
|`FirstWeekOfYear.FirstFourDays`|2|Semana que tiene al menos cuatro días en el nuevo año (cumple la norma ISO 8601, sección 3.17)|  
|`FirstWeekOfYear.FirstFullWeek`|3|Primera semana completa del año nuevo|  
  
   
  
## Examples  
 Este ejemplo se usa el `DateDiff` función para mostrar el número de días entre una fecha determinada y la fecha actual.  
  
 [!code-vb[VbVbalrFunctions#26](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#26)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="Date1" />, <paramref name="Date2" /> o <paramref name="DayofWeek" /> está fuera del intervalo.</exception>
        <exception cref="T:System.InvalidCastException"><paramref name="Date1" /> o <paramref name="Date2" /> pertenece a un tipo no válido.</exception>
        <altmember cref="Overload:Microsoft.VisualBasic.DateAndTime.DateAdd" />
        <altmember cref="Overload:Microsoft.VisualBasic.DateAndTime.DatePart" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Day(System.DateTime)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Format(System.Object,System.String)" />
        <altmember cref="P:Microsoft.VisualBasic.DateAndTime.Now" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Weekday(System.DateTime,Microsoft.VisualBasic.FirstDayOfWeek)" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Year(System.DateTime)" />
        <altmember cref="T:System.DateTime" />
        <altmember cref="T:System.TimeSpan" />
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md">Resumen de tipos de datos (Visual Basic)</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="DatePart">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Devuelve un valor Integer que contiene el componente especificado de un valor <see langword="Date" /> dado.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="DatePart">
      <MemberSignature Language="C#" Value="public static int DatePart (Microsoft.VisualBasic.DateInterval Interval, DateTime DateValue, Microsoft.VisualBasic.FirstDayOfWeek FirstDayOfWeekValue = Microsoft.VisualBasic.FirstDayOfWeek.Sunday, Microsoft.VisualBasic.FirstWeekOfYear FirstWeekOfYearValue = Microsoft.VisualBasic.FirstWeekOfYear.Jan1);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 DatePart(valuetype Microsoft.VisualBasic.DateInterval Interval, valuetype System.DateTime DateValue, valuetype Microsoft.VisualBasic.FirstDayOfWeek FirstDayOfWeekValue, valuetype Microsoft.VisualBasic.FirstWeekOfYear FirstWeekOfYearValue) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.DateAndTime.DatePart(Microsoft.VisualBasic.DateInterval,System.DateTime,Microsoft.VisualBasic.FirstDayOfWeek,Microsoft.VisualBasic.FirstWeekOfYear)" />
      <MemberSignature Language="VB.NET" Value="Public Function DatePart (Interval As DateInterval, DateValue As DateTime, Optional FirstDayOfWeekValue As FirstDayOfWeek = Microsoft.VisualBasic.FirstDayOfWeek.Sunday, Optional FirstWeekOfYearValue As FirstWeekOfYear = Microsoft.VisualBasic.FirstWeekOfYear.Jan1) As Integer" />
      <MemberSignature Language="F#" Value="static member DatePart : Microsoft.VisualBasic.DateInterval * DateTime * Microsoft.VisualBasic.FirstDayOfWeek * Microsoft.VisualBasic.FirstWeekOfYear -&gt; int" Usage="Microsoft.VisualBasic.DateAndTime.DatePart (Interval, DateValue, FirstDayOfWeekValue, FirstWeekOfYearValue)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Interval" Type="Microsoft.VisualBasic.DateInterval" />
        <Parameter Name="DateValue" Type="System.DateTime" />
        <Parameter Name="FirstDayOfWeekValue" Type="Microsoft.VisualBasic.FirstDayOfWeek" />
        <Parameter Name="FirstWeekOfYearValue" Type="Microsoft.VisualBasic.FirstWeekOfYear" />
      </Parameters>
      <Docs>
        <param name="Interval">Obligatorio. Valor de enumeración <see cref="T:Microsoft.VisualBasic.DateInterval" /> o expresión de cadena que representa la parte correspondiente al valor de fecha u hora que se desea devolver.</param>
        <param name="DateValue">Obligatorio. Valor de <see langword="Date" /> que se desea evaluar.</param>
        <param name="FirstDayOfWeekValue">Opcional. Valor elegido de la enumeración <see cref="T:Microsoft.VisualBasic.FirstDayOfWeek" /> que especifica el primer día de la semana. Si no se especifica, se utiliza <see cref="F:Microsoft.VisualBasic.FirstDayOfWeek.Sunday" />.</param>
        <param name="FirstWeekOfYearValue">Opcional. Valor elegido de la enumeración <see cref="T:Microsoft.VisualBasic.FirstWeekOfYear" /> que especifica la primera semana del año. Si no se especifica, se utiliza <see cref="F:Microsoft.VisualBasic.FirstWeekOfYear.Jan1" />.</param>
        <summary>Devuelve un valor Integer que contiene el componente especificado de un valor <see langword="Date" /> dado.</summary>
        <returns>Valor Integer que contiene el componente especificado de un valor de <see langword="Date" /> dado.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Puede usar el `DatePart` función para evaluar un valor de fecha y hora y devolver un componente específico. Por ejemplo, podría usar `DatePart` para calcular el día de la semana o la hora actual.  
  
 Si elige `DateInterval.Weekday` para el `Interval` argumento, el valor devuelto es coherente con los valores de la `FirstDayOfWeek` enumeración. Si elige `DateInterval.WeekOfYear`, `DatePart` usa el <xref:System.Globalization.Calendar> y <xref:System.Globalization.CultureInfo> clases de la <xref:System.Globalization> espacio de nombres para determinar la configuración actual.  
  
 El `FirstDayOfWeekValue` argumento afecta a los cálculos que usan el `DateInterval.Weekday` y `DateInterval.WeekOfYear` `Interval` configuración. El `FirstWeekOfYearValue` argumento afecta a los cálculos que especifican `DateInterval.WeekOfYear` para `Interval`.  
  
 Puesto que cada `Date` valor es compatible con un <xref:System.DateTime> estructura, sus métodos proporcionan opciones adicionales para recuperar partes de fecha y hora. Por ejemplo, puede obtener el valor de fecha completo de un `Date` variable, con el valor de hora establecida en medianoche, como se indica a continuación:  
  
```vb  
Dim CurrDatTim As Date = Now   ' Current date and time.  
Dim LastMidnight As Date = CurrDatTim.Date   ' At midnight.  
```  
  
 El `Interval` argumento puede tener uno de los valores siguientes.  
  
|Valor de enumeración|String|Parte del valor de fecha y hora que se devuelve|  
|-----------------------|------------|----------------------------------------|  
|`DateInterval.Day`|d|Día del mes (de 1 a 31)|  
|`DateInterval.DayOfYear`|y|Día (de 1 a 366)|  
|`DateInterval.Hour`|h|Hour|  
|`DateInterval.Minute`|n|Minute|  
|`DateInterval.Month`|m|Mes|  
|`DateInterval.Quarter`|q|Trimestre|  
|`DateInterval.Second`|s|Second|  
|`DateInterval.Weekday`|s|Día de la semana (de 1 a 7)|  
|`DateInterval.WeekOfYear`|ww|Semana del año (de 1 a 53)|  
|`DateInterval.Year`|yyyy|Año|  
  
 El `FirstDayOfWeekValue` argumento puede tener uno de los valores siguientes.  
  
|Valor de enumeración|Valor|Descripción|  
|-----------------------|-----------|-----------------|  
|`FirstDayOfWeek.System`|0|Primer día de la semana especificado en la configuración del sistema|  
|`FirstDayOfWeek.Sunday`|1|Domingo (predeterminado)|  
|`FirstDayOfWeek.Monday`|2|Lunes (cumple la norma ISO 8601, sección 3.17)|  
|`FirstDayOfWeek.Tuesday`|3|Martes|  
|`FirstDayOfWeek.Wednesday`|4|Miércoles|  
|`FirstDayOfWeek.Thursday`|5|Jueves|  
|`FirstDayOfWeek.Friday`|6|Viernes|  
|`FirstDayOfWeek.Saturday`|7|Sábado|  
  
 El `FirstWeekOfYearValue` argumento puede tener uno de los valores siguientes.  
  
|Valor de enumeración|Valor|Descripción|  
|-----------------------|-----------|-----------------|  
|`FirstWeekOfYear.System`|0|Primera semana del año especificado en la configuración del sistema|  
|`FirstWeekOfYear.Jan1`|1|Semana en que se produzca el 1 de enero (valor predeterminado)|  
|`FirstWeekOfYear.FirstFourDays`|2|Semana que tiene al menos cuatro días en el nuevo año (cumple la norma ISO 8601, sección 3.17)|  
|`FirstWeekOfYear.FirstFullWeek`|3|Primera semana completa en el año nuevo|  
  
   
  
## Examples  
 En este ejemplo se toma una fecha y, mediante el `DatePart` de función, se muestra el trimestre del año en el que se produce.  
  
 [!code-vb[VbVbalrFunctions#27](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#27)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="Interval" /> no es válido.</exception>
        <exception cref="T:System.InvalidCastException"><paramref name="DateValue" /> no está establecido en <see langword="Date" />.</exception>
        <altmember cref="Overload:Microsoft.VisualBasic.DateAndTime.DateAdd" />
        <altmember cref="Overload:Microsoft.VisualBasic.DateAndTime.DateDiff" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Day(System.DateTime)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Format(System.Object,System.String)" />
        <altmember cref="P:Microsoft.VisualBasic.DateAndTime.Now" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Weekday(System.DateTime,Microsoft.VisualBasic.FirstDayOfWeek)" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Year(System.DateTime)" />
        <altmember cref="N:System" />
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md">Resumen de tipos de datos (Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="DatePart">
      <MemberSignature Language="C#" Value="public static int DatePart (string Interval, object DateValue, Microsoft.VisualBasic.FirstDayOfWeek DayOfWeek = Microsoft.VisualBasic.FirstDayOfWeek.Sunday, Microsoft.VisualBasic.FirstWeekOfYear WeekOfYear = Microsoft.VisualBasic.FirstWeekOfYear.Jan1);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 DatePart(string Interval, object DateValue, valuetype Microsoft.VisualBasic.FirstDayOfWeek DayOfWeek, valuetype Microsoft.VisualBasic.FirstWeekOfYear WeekOfYear) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.DateAndTime.DatePart(System.String,System.Object,Microsoft.VisualBasic.FirstDayOfWeek,Microsoft.VisualBasic.FirstWeekOfYear)" />
      <MemberSignature Language="VB.NET" Value="Public Function DatePart (Interval As String, DateValue As Object, Optional DayOfWeek As FirstDayOfWeek = Microsoft.VisualBasic.FirstDayOfWeek.Sunday, Optional WeekOfYear As FirstWeekOfYear = Microsoft.VisualBasic.FirstWeekOfYear.Jan1) As Integer" />
      <MemberSignature Language="F#" Value="static member DatePart : string * obj * Microsoft.VisualBasic.FirstDayOfWeek * Microsoft.VisualBasic.FirstWeekOfYear -&gt; int" Usage="Microsoft.VisualBasic.DateAndTime.DatePart (Interval, DateValue, DayOfWeek, WeekOfYear)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Interval" Type="System.String" />
        <Parameter Name="DateValue" Type="System.Object" />
        <Parameter Name="DayOfWeek" Type="Microsoft.VisualBasic.FirstDayOfWeek" />
        <Parameter Name="WeekOfYear" Type="Microsoft.VisualBasic.FirstWeekOfYear" />
      </Parameters>
      <Docs>
        <param name="Interval">Obligatorio. Valor de enumeración <see cref="T:Microsoft.VisualBasic.DateInterval" /> o expresión de cadena que representa la parte correspondiente al valor de fecha u hora que se desea devolver.</param>
        <param name="DateValue">Obligatorio. Valor <see langword="Date" /> que se desea evaluar.</param>
        <param name="DayOfWeek">Opcional. Valor elegido de la enumeración <see cref="T:Microsoft.VisualBasic.FirstDayOfWeek" /> que especifica el primer día de la semana. Si no se especifica, se utiliza <see cref="F:Microsoft.VisualBasic.FirstDayOfWeek.Sunday" />.</param>
        <param name="WeekOfYear">Opcional. Valor elegido de la enumeración <see cref="T:Microsoft.VisualBasic.FirstWeekOfYear" /> que especifica la primera semana del año. Si no se especifica, se utiliza <see cref="F:Microsoft.VisualBasic.FirstWeekOfYear.Jan1" />.</param>
        <summary>Devuelve un valor que contiene el componente especificado de un valor de <see langword="Date" /> dado.</summary>
        <returns>Valor Integer que contiene el componente especificado de un valor de <see langword="Date" /> dado.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Puede usar el `DatePart` función para evaluar un valor de fecha y hora y devolver un componente específico. Por ejemplo, podría usar `DatePart` para calcular el día de la semana o la hora actual.  
  
 Si elige `DateInterval.Weekday` para el `Interval` argumento, el valor devuelto es coherente con los valores de la `FirstDayOfWeek` enumeración. Si elige `DateInterval.WeekOfYear`, `DatePart` usa el <xref:System.Globalization.Calendar> y <xref:System.Globalization.CultureInfo> clases de la <xref:System.Globalization> espacio de nombres para determinar la configuración actual.  
  
 El `FirstDayOfWeekValue` argumento afecta a los cálculos que usan el `DateInterval.Weekday` y `DateInterval.WeekOfYear` `Interval` configuración. El `FirstWeekOfYearValue` argumento afecta a los cálculos que especifican `DateInterval.WeekOfYear` para `Interval`.  
  
 Puesto que cada `Date` valor es compatible con un <xref:System.DateTime> estructura, sus métodos proporcionan opciones adicionales para recuperar partes de fecha y hora. Por ejemplo, puede obtener el valor de fecha completo de un `Date` variable, con el valor de hora establecida en medianoche, como se indica a continuación:  
  
```vb  
Dim CurrDatTim As Date = Now   ' Current date and time.  
Dim LastMidnight As Date = CurrDatTim.Date   ' At midnight.  
```  
  
 El `Interval` argumento puede tener uno de los valores siguientes.  
  
|Valor de enumeración|String|Parte del valor de fecha y hora que se devuelve|  
|-----------------------|------------|----------------------------------------|  
|`DateInterval.Day`|d|Día del mes (de 1 a 31)|  
|`DateInterval.DayOfYear`|y|Día (de 1 a 366)|  
|`DateInterval.Hour`|h|Hour|  
|`DateInterval.Minute`|n|Minute|  
|`DateInterval.Month`|m|Mes|  
|`DateInterval.Quarter`|q|Trimestre|  
|`DateInterval.Second`|s|Second|  
|`DateInterval.Weekday`|s|Día de la semana (de 1 a 7)|  
|`DateInterval.WeekOfYear`|ww|Semana del año (de 1 a 53)|  
|`DateInterval.Year`|yyyy|Año|  
  
 El `FirstDayOfWeekValue` argumento puede tener uno de los valores siguientes.  
  
|Valor de enumeración|Valor|Descripción|  
|-----------------------|-----------|-----------------|  
|`FirstDayOfWeek.System`|0|Primer día de la semana especificado en la configuración del sistema|  
|`FirstDayOfWeek.Sunday`|1|Domingo (predeterminado)|  
|`FirstDayOfWeek.Monday`|2|Lunes (cumple la norma ISO 8601, sección 3.17)|  
|`FirstDayOfWeek.Tuesday`|3|Martes|  
|`FirstDayOfWeek.Wednesday`|4|Miércoles|  
|`FirstDayOfWeek.Thursday`|5|Jueves|  
|`FirstDayOfWeek.Friday`|6|Viernes|  
|`FirstDayOfWeek.Saturday`|7|Sábado|  
  
 El `FirstWeekOfYearValue` argumento puede tener uno de los valores siguientes.  
  
|Valor de enumeración|Valor|Descripción|  
|-----------------------|-----------|-----------------|  
|`FirstWeekOfYear.System`|0|Primera semana del año especificado en la configuración del sistema|  
|`FirstWeekOfYear.Jan1`|1|Semana en que se produzca el 1 de enero (valor predeterminado)|  
|`FirstWeekOfYear.FirstFourDays`|2|Semana que tiene al menos cuatro días en el nuevo año (cumple la norma ISO 8601, sección 3.17)|  
|`FirstWeekOfYear.FirstFullWeek`|3|Primera semana completa en el año nuevo|  
  
   
  
## Examples  
 En este ejemplo se toma una fecha y, mediante el `DatePart` de función, se muestra el trimestre del año en el que se produce.  
  
 [!code-vb[VbVbalrFunctions#27](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#27)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="Interval" /> no es válido.</exception>
        <exception cref="T:System.InvalidCastException"><paramref name="DateValue" /> no está establecido en <see langword="Date" />.</exception>
        <altmember cref="Overload:Microsoft.VisualBasic.DateAndTime.DateAdd" />
        <altmember cref="Overload:Microsoft.VisualBasic.DateAndTime.DateDiff" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Day(System.DateTime)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Format(System.Object,System.String)" />
        <altmember cref="P:Microsoft.VisualBasic.DateAndTime.Now" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Weekday(System.DateTime,Microsoft.VisualBasic.FirstDayOfWeek)" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Year(System.DateTime)" />
        <altmember cref="N:System" />
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md">Resumen de tipos de datos (Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="DateSerial">
      <MemberSignature Language="C#" Value="public static DateTime DateSerial (int Year, int Month, int Day);" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype System.DateTime DateSerial(int32 Year, int32 Month, int32 Day) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.DateAndTime.DateSerial(System.Int32,System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function DateSerial (Year As Integer, Month As Integer, Day As Integer) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTime DateSerial(int Year, int Month, int Day);" />
      <MemberSignature Language="F#" Value="static member DateSerial : int * int * int -&gt; DateTime" Usage="Microsoft.VisualBasic.DateAndTime.DateSerial (Year, Month, Day)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Year" Type="System.Int32" />
        <Parameter Name="Month" Type="System.Int32" />
        <Parameter Name="Day" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="Year">Obligatorio. Expresión de tipo Integer entre 1 y 9999. Sin embargo, también se aceptan los valores no comprendidos en este intervalo. Si el valor de <paramref name="Year" /> está comprendido entre 0 y 99, se interpreta como un año comprendido entre 1930 y 2029, tal como se explica abajo en la sección "Comentarios". Si el valor de <paramref name="Year" /> es menor que 1, se resta del año actual.</param>
        <param name="Month">Obligatorio. Expresión de tipo Integer entre 1 y 12. Sin embargo, también se aceptan los valores no comprendidos en este intervalo. Del valor de <paramref name="Month" /> se resta 1 y se aplica al mes de enero del año calculado. En otros términos, se suma (<paramref name="Month" /> - 1) al mes de enero. Si es necesario, se vuelve a calcular el año. Los resultados siguientes muestran este efecto: 
Si el valor de <paramref name="Month" /> es 1, el resultado es el mes de enero del año calculado.  
  
Si el valor de <paramref name="Month" /> es 0, el resultado es el mes de diciembre del año anterior.  
  
Si el valor de <paramref name="Month" /> es -1, el resultado es el mes de noviembre del año anterior.  
  
Si el valor de <paramref name="Month" /> es 13, el resultado es el mes de enero del año siguiente.</param>
        <param name="Day">Obligatorio. Expresión de tipo Integer entre 1 y 31. Sin embargo, también se aceptan los valores no comprendidos en este intervalo. Del valor de <paramref name="Day" /> se resta 1 y se aplica al primer día del mes calculado. En otros términos, se suma (<paramref name="Day" /> - 1) al primer día del mes. Se vuelven a calcular el mes y el año si es necesario. Los resultados siguientes muestran este efecto: 
Si el valor de <paramref name="Day" /> es 1, el resultado es el primer día del mes calculado.  
  
Si el valor de <paramref name="Day" /> es 0, el resultado es el último día del mes anterior.  
  
Si el valor de <paramref name="Day" /> es -1, el resultado es el penúltimo día del mes anterior.  
  
Si el valor de <paramref name="Day" /> está más allá del final del mes actual, el resultado es el correspondiente día del mes siguiente. Por ejemplo, si el valor de <paramref name="Month" /> es 4 y el valor de <paramref name="Day" /> es 31, el resultado es el 1 de mayo.</param>
        <summary>Devuelve un valor de <see langword="Date" /> que representa un año, mes y día especificados, con la información de hora establecida en medianoche (00:00:00).</summary>
        <returns>Valor <see langword="Date" /> que representa un año, mes y día especificados, con la información de hora establecida en medianoche (00:00:00).</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 En Windows 98 o Windows 2000, años de dos dígitos para el `Year` argumento se interpretan según la configuración de equipo definido por el usuario. La configuración predeterminada es que los valores de 0 a 29 se interpretan como los años 2000-2029, y los valores entre 30 y 99 se interpretan como los años 1930 1999. Para todos los demás `Year` argumentos, el año de cuatro dígitos de uso; por ejemplo, 1924.  
  
 Las versiones anteriores de Windows interpretan los años de dos dígitos según los valores predeterminados que se ha descrito anteriormente. Para asegurarse de que la función devuelve el valor adecuado, use una de cuatro dígitos `Year`.  
  
 En el ejemplo siguiente se muestra negativo, cero y los valores de argumento positivo. En este caso, el `DateSerial` función devuelve un `Date` que representa el día antes del primer día de marzo del año 10 años antes del año actual; en otras palabras, el último día del mes de febrero de hace diez años.  
  
```vb  
Dim EndFeb As Date = DateSerial(-10, 3, 0)  
```  
  
 Si bien `Month` o `Day` supera su intervalo normal, se aplica a la siguiente unidad mayor, según corresponda. Por ejemplo, si especifica 32 días, se evalúa como un mes y de uno a cuatro días, dependiendo del valor de `Month`. Si `Year` es mayor que 9999, o si cualquier argumento está fuera del intervalo – 2.147.483.648 a 2.147.483.647, un <xref:System.ArgumentException> se produce el error. Si la fecha especificada por los tres argumentos es anterior a 00:00:00 del 1 de enero del año 1 o posterior a las 23:59:59 del 31 de diciembre de 9999, un <xref:System.ArgumentOutOfRangeException> se produce el error.  
  
 El `Date` tipo de datos incluye componentes de tiempo. `DateSerial` establece todos ellos en 0, por lo que el valor devuelto representa el principio del día calculado.  
  
 Puesto que cada `Date` valor es compatible con un <xref:System.DateTime> estructura, sus métodos proporcionan opciones adicionales para ensamblar un `Date` valor. Por ejemplo, puede usar uno de los métodos <xref:System.DateTime.%23ctor%2A> constructores para rellenar un `Date` variable mediante la combinación deseada de componentes. El ejemplo siguiente se establece `NewDateTime` en 6 de mayo de 1978 a una décima de segundo antes de las 8:30 de la mañana:  
  
```vb  
Dim NewDateTime As Date = New Date(1978, 5, 6, 8, 29, 59, 900)  
```  
  
   
  
## Examples  
 Este ejemplo se usa el `DateSerial` función para devolver la fecha para el año, mes y día.  
  
 [!code-vb[VbVbalrFunctions#28](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#28)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.DateValue(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Day(System.DateTime)" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Month(System.DateTime)" />
        <altmember cref="P:Microsoft.VisualBasic.DateAndTime.Now" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.TimeSerial(System.Int32,System.Int32,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.TimeValue(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Weekday(System.DateTime,Microsoft.VisualBasic.FirstDayOfWeek)" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Year(System.DateTime)" />
        <altmember cref="N:System" />
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md">Resumen de tipos de datos (Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="DateString">
      <MemberSignature Language="C#" Value="public static string DateString { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property string DateString" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.DateAndTime.DateString" />
      <MemberSignature Language="VB.NET" Value="Public Property DateString As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::String ^ DateString { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.DateString : string with get, set" Usage="Microsoft.VisualBasic.DateAndTime.DateString" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Devuelve o establece un valor de String que representa la fecha actual según el sistema.</summary>
        <value>Devuelve o establece un valor de String que representa la fecha actual según el sistema.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `DateString` Devuelve la fecha del sistema en el formato MM-dd-aaaa, que usa el nombre abreviado del mes. Los formatos aceptados para la fecha son M-d-yyyy, M-y-d, M/d/aaaa e M/d/y. Esto es cierto para todas las configuraciones regionales del sistema, excepto los que usen un juego de caracteres de doble byte (DBCS). Si la configuración regional del sistema utiliza un conjunto de caracteres de doble byte, `DateString` devuelve la fecha del sistema en el formato aaaa-MM-dd. Configuración regional del sistema se establece mediante la **reloj, idioma y región** elemento **Panel de Control**.  
  
 **Tenga en cuenta** el `DateString` propiedad devuelve la fecha del sistema solo en el formato aaaa-MM-dd para los `zh` (chino simplificado), `ko` (coreano), y `ja` configuraciones regionales si utiliza Visual Basic dentro del sistema (japonés) Silverlight.  
  
 Para obtener o establecer la hora actual del sistema como un `String`, utilice el <xref:Microsoft.VisualBasic.DateAndTime.TimeString%2A> propiedad.  
  
 Para obtener la fecha u hora del sistema actual en el formato de la configuración regional, o en un formato personalizado, proporcione el <xref:Microsoft.VisualBasic.DateAndTime.Now%2A> propiedad a la <xref:Microsoft.VisualBasic.Strings.Format%2A> function, especificando un formato de fecha y hora predefinidos o definidos por el usuario. En el siguiente ejemplo se muestra cómo hacerlo.  
  
```vb  
MsgBox("The formatted date is " & Format(Now, "dddd, d MMM yyyy"))  
```  
  
 Para obtener acceso a la fecha actual del sistema como un `Date`, utilice el <xref:Microsoft.VisualBasic.DateAndTime.Today%2A> propiedad.  
  
> [!IMPORTANT]
>  Establecer la fecha u hora del sistema requiere el permiso de código no administrado, lo que podría afectar a su ejecución en situaciones de confianza parcial. Para obtener más información, consulte <xref:System.Security.Permissions.SecurityPermission> y [permisos de acceso del código](https://msdn.microsoft.com/library/e5ae402f-6dda-4732-bbe8-77296630f675).  
  
   
  
## Examples  
 En el ejemplo siguiente se usa el `DateString` propiedad para mostrar la fecha actual del sistema.  
  
 [!code-vb[VbVbalrDateProperties#1](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrDateProperties/VB/Module1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidCastException">Formato no válido utilizado para establecer el valor de <see cref="T:Microsoft.VisualBasic.DateAndTime.DateString" />.</exception>
        <altmember cref="P:Microsoft.VisualBasic.DateAndTime.Now" />
        <altmember cref="P:Microsoft.VisualBasic.DateAndTime.TimeString" />
        <altmember cref="P:Microsoft.VisualBasic.DateAndTime.Today" />
        <altmember cref="T:System.DateTime" />
      </Docs>
    </Member>
    <Member MemberName="DateValue">
      <MemberSignature Language="C#" Value="public static DateTime DateValue (string StringDate);" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype System.DateTime DateValue(string StringDate) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.DateAndTime.DateValue(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function DateValue (StringDate As String) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTime DateValue(System::String ^ StringDate);" />
      <MemberSignature Language="F#" Value="static member DateValue : string -&gt; DateTime" Usage="Microsoft.VisualBasic.DateAndTime.DateValue StringDate" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="StringDate" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="StringDate">Obligatorio. Expresión de tipo String que representa un valor de fecha u hora desde las 00:00:00 horas del 1 de enero del año 1 hasta las 23:59:59 horas del 31 de diciembre de 9999.</param>
        <summary>Devuelve un valor de <see langword="Date" /> que contiene la información de fecha representada por una cadena, con la información de hora establecida en medianoche (00:00:00).</summary>
        <returns>Valor de tipo <see langword="Date" /> que contiene la información de fecha representada por una cadena, con la información de hora establecida en medianoche (00:00:00).</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si `StringDate` incluye solo los números del 1 al 12 que se separan mediante separadores de fecha válidos, `DateValue` reconoce el orden mes, día y año según el formato de fecha corta especificado en el sistema. `DateValue` usa la configuración de calendario actual de la <xref:System.Globalization.CultureInfo.CurrentCulture%2A> propiedad de la <xref:System.Globalization.CultureInfo> clase en el <xref:System.Globalization> espacio de nombres. El valor predeterminado <xref:System.Globalization.CultureInfo.CurrentCulture%2A> valores se determinan mediante **Panel de Control** configuración. Puede invalidar el formato de fecha corta estableciendo el <xref:System.Globalization.DateTimeFormatInfo.ShortDatePattern%2A> propiedad de la <xref:System.Globalization.DateTimeFormatInfo> clase en el <xref:System.Globalization> espacio de nombres.  
  
 `DateValue` reconoce los nombres de mes en formato largo, abreviado y numérico. Por ejemplo, además de reconocer 30/12/1991 y 30/12/91, `DateValue` también reconoce el 30 de diciembre de 1991 y 30 de diciembre de 1991.  
  
 Si la parte del año `StringDate` se omite, `DateValue` utiliza el año actual en la fecha del sistema del equipo.  
  
 Si el `StringDate` argumento incluye información de hora `DateValue` no lo incluye en el valor devuelto. Sin embargo, si `StringDate` incluye información de hora no válida, como "89: 98", un <xref:System.InvalidCastException> se produce el error.  
  
   
  
## Examples  
 Este ejemplo se usa el `DateValue` función para convertir una cadena en una fecha. También puede usar literales de fecha para asignar directamente una fecha a un `Object` o `Date` variable, por ejemplo, `oldDate = #2/12/69#`.  
  
 [!code-vb[VbVbalrFunctions#29](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#29)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidCastException"><paramref name="StringDate" /> incluye información de hora no válida.</exception>
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.DateSerial(System.Int32,System.Int32,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Day(System.DateTime)" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Month(System.DateTime)" />
        <altmember cref="P:Microsoft.VisualBasic.DateAndTime.Now" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.TimeSerial(System.Int32,System.Int32,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.TimeValue(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Weekday(System.DateTime,Microsoft.VisualBasic.FirstDayOfWeek)" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Year(System.DateTime)" />
        <altmember cref="T:System.DateTime" />
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md">Resumen de tipos de datos (Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="Day">
      <MemberSignature Language="C#" Value="public static int Day (DateTime DateValue);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Day(valuetype System.DateTime DateValue) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.DateAndTime.Day(System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Function Day (DateValue As DateTime) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Day(DateTime DateValue);" />
      <MemberSignature Language="F#" Value="static member Day : DateTime -&gt; int" Usage="Microsoft.VisualBasic.DateAndTime.Day DateValue" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="DateValue" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="DateValue">Obligatorio. Valor <see langword="Date" /> del que se desea extraer el día.</param>
        <summary>Devuelve un valor Integer de 1 a 31 que representa el día del mes.</summary>
        <returns>Valor Integer de 1 a 31 que representa el día del mes.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si usas el `Day` función, es posible que deba calificar con el `Microsoft.VisualBasic` espacio de nombres, porque el <xref:System.Windows.Forms> define el espacio de nombres <xref:System.Windows.Forms.Day> como una enumeración. El ejemplo siguiente se muestra cómo distinguir `Day` resuelve esta ambigüedad:  
  
```vb  
Dim thisDay As Integer = Microsoft.VisualBasic.DateAndTime.Day(Now)  
```  
  
 También puede obtener el día del mes mediante una llamada a `DatePart` y especificando `DateInterval.Day` para el *intervalo* argumento.  
  
   
  
## Examples  
 En el ejemplo siguiente se usa el `Day` función para obtener el día del mes de una fecha especificada. En el entorno de desarrollo, el literal de fecha se muestra en estándar formato corto (por ejemplo, "02/12/1969") utilizando la configuración regional del código.  
  
 [!code-vb[VbVbalrFunctions#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#30)]  
  
 `Day` se califica para distinguirlo de la <xref:System.Windows.Forms.Day?displayProperty=nameWithType> enumeración.  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.DateAndTime.DatePart" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Month(System.DateTime)" />
        <altmember cref="P:Microsoft.VisualBasic.DateAndTime.Now" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Weekday(System.DateTime,Microsoft.VisualBasic.FirstDayOfWeek)" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Year(System.DateTime)" />
        <altmember cref="T:System.DateTime" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.ArgumentOutOfRangeException" />
      </Docs>
    </Member>
    <Member MemberName="Hour">
      <MemberSignature Language="C#" Value="public static int Hour (DateTime TimeValue);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Hour(valuetype System.DateTime TimeValue) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.DateAndTime.Hour(System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Function Hour (TimeValue As DateTime) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Hour(DateTime TimeValue);" />
      <MemberSignature Language="F#" Value="static member Hour : DateTime -&gt; int" Usage="Microsoft.VisualBasic.DateAndTime.Hour TimeValue" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="TimeValue" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="TimeValue">Obligatorio. Valor <see langword="Date" /> del que se desea extraer la hora.</param>
        <summary>Devuelve un valor Integer de 0 a 23 que representa la hora del día.</summary>
        <returns>Valor Integer de 0 a 23 que representa la hora del día.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 También puede obtener la hora del día mediante una llamada a `DatePart` y especificando `DateInterval.Hour` para el `Interval` argumento.  
  
   
  
## Examples  
 Este ejemplo se usa el `Hour` función para obtener la hora de una hora especificada. En el entorno de desarrollo, el literal de hora se muestra en formato de hora corta mediante la configuración regional del código.  
  
 [!code-vb[VbVbalrFunctions#32](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#32)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Day(System.DateTime)" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Minute(System.DateTime)" />
        <altmember cref="P:Microsoft.VisualBasic.DateAndTime.Now" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Second(System.DateTime)" />
        <altmember cref="P:Microsoft.VisualBasic.DateAndTime.TimeOfDay" />
        <altmember cref="Overload:Microsoft.VisualBasic.DateAndTime.DatePart" />
        <altmember cref="N:System" />
        <altmember cref="T:System.DateTime" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.ArgumentOutOfRangeException" />
      </Docs>
    </Member>
    <Member MemberName="Minute">
      <MemberSignature Language="C#" Value="public static int Minute (DateTime TimeValue);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Minute(valuetype System.DateTime TimeValue) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.DateAndTime.Minute(System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Function Minute (TimeValue As DateTime) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Minute(DateTime TimeValue);" />
      <MemberSignature Language="F#" Value="static member Minute : DateTime -&gt; int" Usage="Microsoft.VisualBasic.DateAndTime.Minute TimeValue" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="TimeValue" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="TimeValue">Obligatorio. Valor <see langword="Date" /> del que se desea extraer el minuto.</param>
        <summary>Devuelve un valor Integer de 0 a 59 que representa el minuto de la hora.</summary>
        <returns>Valor Integer de 0 a 59 que representa el minuto de la hora.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 También puede obtener el minuto de la hora mediante una llamada a `DatePart` y especificando `DateInterval.Minute` para el `Interval` argumento.  
  
   
  
## Examples  
 Este ejemplo se usa el `Minute` función para obtener el minuto de la hora de una hora especificada. En el entorno de desarrollo, el literal de hora se muestra en formato de hora corta mediante la configuración regional del código.  
  
 [!code-vb[VbVbalrFunctions#42](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#42)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Day(System.DateTime)" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Hour(System.DateTime)" />
        <altmember cref="P:Microsoft.VisualBasic.DateAndTime.Now" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Second(System.DateTime)" />
        <altmember cref="P:Microsoft.VisualBasic.DateAndTime.TimeOfDay" />
        <altmember cref="Overload:Microsoft.VisualBasic.DateAndTime.DatePart" />
        <altmember cref="N:System" />
        <altmember cref="T:System.DateTime" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.ArgumentOutOfRangeException" />
      </Docs>
    </Member>
    <Member MemberName="Month">
      <MemberSignature Language="C#" Value="public static int Month (DateTime DateValue);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Month(valuetype System.DateTime DateValue) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.DateAndTime.Month(System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Function Month (DateValue As DateTime) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Month(DateTime DateValue);" />
      <MemberSignature Language="F#" Value="static member Month : DateTime -&gt; int" Usage="Microsoft.VisualBasic.DateAndTime.Month DateValue" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="DateValue" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="DateValue">Obligatorio. Valor <see langword="Date" /> del que se desea extraer el mes.</param>
        <summary>Devuelve un valor Integer de 1 a 12 que representa el mes del año.</summary>
        <returns>Valor Integer de 1 a 12 que representa el mes del año.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 También puede obtener el mes del año mediante una llamada a `DatePart` y especificando `DateInterval.Month` para el `Interval` argumento.  
  
   
  
## Examples  
 Este ejemplo se usa el `Month` función para obtener el mes de una fecha especificada. En el entorno de desarrollo, la fecha se muestra el literal de formato de fecha corta mediante la configuración regional del código.  
  
 [!code-vb[VbVbalrFunctions#43](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#43)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Day(System.DateTime)" />
        <altmember cref="P:Microsoft.VisualBasic.DateAndTime.Now" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Weekday(System.DateTime,Microsoft.VisualBasic.FirstDayOfWeek)" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Year(System.DateTime)" />
        <altmember cref="Overload:Microsoft.VisualBasic.DateAndTime.DatePart" />
        <altmember cref="N:System" />
        <altmember cref="T:System.DateTime" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.ArgumentOutOfRangeException" />
      </Docs>
    </Member>
    <Member MemberName="MonthName">
      <MemberSignature Language="C#" Value="public static string MonthName (int Month, bool Abbreviate = false);" />
      <MemberSignature Language="ILAsm" Value=".method public static string MonthName(int32 Month, bool Abbreviate) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.DateAndTime.MonthName(System.Int32,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function MonthName (Month As Integer, Optional Abbreviate As Boolean = false) As String" />
      <MemberSignature Language="F#" Value="static member MonthName : int * bool -&gt; string" Usage="Microsoft.VisualBasic.DateAndTime.MonthName (Month, Abbreviate)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Month" Type="System.Int32" />
        <Parameter Name="Abbreviate" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="Month">Obligatorio. Designación numérica del mes, del 1 al 13; 1 indica el mes de enero y 12 indica el mes de diciembre. El valor 13 se puede utilizar con un calendario de 13 meses. Si el sistema utiliza un calendario de 12 meses y el valor de <paramref name="Month" /> es 13, <c>MonthName</c> devuelve una cadena vacía.</param>
        <param name="Abbreviate">Opcional. <see langword="True" /> para abreviar el nombre del mes; en caso contrario, <see langword="False" />. De manera predeterminada, es <see langword="False" />.</param>
        <summary>Devuelve un valor String que contiene el nombre del mes especificado.</summary>
        <returns>Valor String que contiene el nombre del mes especificado.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La cadena devuelta por `MonthName` depende no solo en los argumentos de entrada, sino también la **opciones regionales** configuración especificada en el Windows **Panel de Control**.  
  
> [!NOTE]
>  `MonthName` usa la configuración de calendario actual de la <xref:System.Globalization.CultureInfo.CurrentCulture%2A> propiedad de la <xref:System.Globalization.CultureInfo> clase en el <xref:System.Globalization> espacio de nombres. El valor predeterminado <xref:System.Globalization.CultureInfo.CurrentCulture%2A> valores se determinan mediante **Panel de Control** configuración.  
  
   
  
## Examples  
 Este ejemplo se usa el `MonthName` función para determinar el nombre del mes, a partir del entero dado. El valor booleano determinará si el nombre completo (`False`) o el nombre abreviado (`True`) se mostrarán.  
  
 [!code-vb[VbVbalrFunctions#44](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#44)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="Month" /> es menor que 1 o mayor que 13.</exception>
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.WeekdayName(System.Int32,System.Boolean,Microsoft.VisualBasic.FirstDayOfWeek)" />
        <altmember cref="N:System" />
        <altmember cref="N:System.Globalization" />
        <altmember cref="T:System.DateTime" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.Globalization.CultureInfo" />
      </Docs>
    </Member>
    <Member MemberName="Now">
      <MemberSignature Language="C#" Value="public static DateTime Now { get; }" />
      <MemberSignature Language="ILAsm" Value=".property valuetype System.DateTime Now" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.DateAndTime.Now" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Now As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property DateTime Now { DateTime get(); };" />
      <MemberSignature Language="F#" Value="member this.Now : DateTime" Usage="Microsoft.VisualBasic.DateAndTime.Now" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Devuelve un valor que contiene la fecha y la hora actuales de acuerdo con el sistema.</summary>
        <value>La fecha y hora actuales según el sistema.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Para establecer la fecha del sistema, use el <xref:Microsoft.VisualBasic.DateAndTime.Today%2A> propiedad. Para establecer la hora del sistema, use el <xref:Microsoft.VisualBasic.DateAndTime.TimeOfDay%2A> propiedad.  
  
   
  
## Examples  
 En el ejemplo siguiente se usa el `Now` propiedad para devolver la fecha actual del sistema y la hora.  
  
 [!code-vb[VbVbalrDateProperties#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrDateProperties/VB/Module1.vb#4)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Day(System.DateTime)" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Hour(System.DateTime)" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Minute(System.DateTime)" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Month(System.DateTime)" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Second(System.DateTime)" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Weekday(System.DateTime,Microsoft.VisualBasic.FirstDayOfWeek)" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Year(System.DateTime)" />
        <altmember cref="T:System.DateTime" />
      </Docs>
    </Member>
    <Member MemberName="Second">
      <MemberSignature Language="C#" Value="public static int Second (DateTime TimeValue);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Second(valuetype System.DateTime TimeValue) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.DateAndTime.Second(System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Function Second (TimeValue As DateTime) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Second(DateTime TimeValue);" />
      <MemberSignature Language="F#" Value="static member Second : DateTime -&gt; int" Usage="Microsoft.VisualBasic.DateAndTime.Second TimeValue" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="TimeValue" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="TimeValue">Obligatorio. Valor <see langword="Date" /> del que se desea extraer el segundo.</param>
        <summary>Devuelve un valor Integer de 0 a 59 que representa el segundo del minuto.</summary>
        <returns>Valor Integer de 0 a 59 que representa el segundo del minuto.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 También puede obtener el segundo del minuto llamando `DatePart` y especificando `DateInterval.Second` para el `Interval` argumento.  
  
   
  
## Examples  
 En el ejemplo siguiente se usa el `Second` función para obtener el segundo del minuto de una hora especificada. En el entorno de desarrollo, el literal de hora se muestra en formato de hora corta mediante la configuración regional del código.  
  
 [!code-vb[VbVbalrFunctions#46](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#46)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Day(System.DateTime)" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Hour(System.DateTime)" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Minute(System.DateTime)" />
        <altmember cref="P:Microsoft.VisualBasic.DateAndTime.Now" />
        <altmember cref="P:Microsoft.VisualBasic.DateAndTime.TimeOfDay" />
        <altmember cref="Overload:Microsoft.VisualBasic.DateAndTime.DatePart" />
        <altmember cref="N:System" />
        <altmember cref="T:System.DateTime" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.ArgumentOutOfRangeException" />
      </Docs>
    </Member>
    <Member MemberName="TimeOfDay">
      <MemberSignature Language="C#" Value="public static DateTime TimeOfDay { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property valuetype System.DateTime TimeOfDay" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.DateAndTime.TimeOfDay" />
      <MemberSignature Language="VB.NET" Value="Public Property TimeOfDay As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property DateTime TimeOfDay { DateTime get(); void set(DateTime value); };" />
      <MemberSignature Language="F#" Value="member this.TimeOfDay : DateTime with get, set" Usage="Microsoft.VisualBasic.DateAndTime.TimeOfDay" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Devuelve o establece un valor <see langword="Date" /> que contiene la hora del día actual de acuerdo con el sistema.</summary>
        <value>Devuelve o establece un valor <see langword="Date" /> que contiene la hora del día actual de acuerdo con el sistema.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El `Date` tipo de datos incluye componentes de fecha. Cuando se devuelve la hora del sistema, `TimeOfDay` establece todos en 1, por lo que el valor devuelto representa el primer día del año 1. Al establecer la hora del sistema, `TimeOfDay` omite los componentes de fecha.  
  
 Para obtener acceso a la hora actual del sistema como un `String`, utilice el <xref:Microsoft.VisualBasic.DateAndTime.TimeString%2A> propiedad.  
  
 Para obtener o establecer la fecha actual del sistema, utilice el <xref:Microsoft.VisualBasic.DateAndTime.Today%2A> propiedad.  
  
> [!IMPORTANT]
>  Establecer la fecha u hora del sistema requiere el permiso de código no administrado, lo que podría afectar a su ejecución en situaciones de confianza parcial. Para obtener más información, consulte <xref:System.Security.Permissions.SecurityPermission> y [permisos de acceso del código](https://msdn.microsoft.com/library/e5ae402f-6dda-4732-bbe8-77296630f675).  
  
   
  
## Examples  
 Este ejemplo se usa el `TimeOfDay` propiedad para devolver la hora actual del sistema.  
  
 [!code-vb[VbVbalrDateProperties#3](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrDateProperties/VB/Module1.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:Microsoft.VisualBasic.DateAndTime.Timer" />
        <altmember cref="T:System.DateTime" />
      </Docs>
    </Member>
    <Member MemberName="Timer">
      <MemberSignature Language="C#" Value="public static double Timer { get; }" />
      <MemberSignature Language="ILAsm" Value=".property float64 Timer" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.DateAndTime.Timer" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Timer As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property double Timer { double get(); };" />
      <MemberSignature Language="F#" Value="member this.Timer : double" Usage="Microsoft.VisualBasic.DateAndTime.Timer" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Devuelve un valor <see cref="T:System.Double" /> que representa el número de segundos transcurridos desde la medianoche.</summary>
        <value>Un valor que representa el número de segundos transcurridos desde la medianoche.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El `Timer` propiedad devuelve los segundos y milisegundos desde la medianoche más reciente. Los segundos se encuentran en la parte entera del valor devuelto y los milisegundos están en la parte fraccionaria.  
  
   
  
## Examples  
 Este ejemplo se usa el `Timer` propiedad para pausar la aplicación. Puede realizar otro procesamiento durante la pausa.  
  
 [!code-vb[VbVbalrTimerProperty#1](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrTimerProperty/VB/Form1.vb#1)]  
  
 Tenga en cuenta que debe calificar el `Timer` propiedad con el <xref:Microsoft.VisualBasic?displayProperty=nameWithType> espacio de nombres, porque `Timer` también es una clase definida en el <xref:System.Threading?displayProperty=nameWithType>, <xref:System.Timers?displayProperty=nameWithType>, y <xref:System.Windows.Forms?displayProperty=nameWithType> espacios de nombres.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.VBMath.Randomize" />
        <altmember cref="P:Microsoft.VisualBasic.DateAndTime.TimeOfDay" />
        <altmember cref="P:Microsoft.VisualBasic.DateAndTime.Today" />
        <altmember cref="N:System" />
        <altmember cref="N:System.Windows.Forms" />
        <altmember cref="T:System.DateTime" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.ArgumentOutOfRangeException" />
      </Docs>
    </Member>
    <Member MemberName="TimeSerial">
      <MemberSignature Language="C#" Value="public static DateTime TimeSerial (int Hour, int Minute, int Second);" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype System.DateTime TimeSerial(int32 Hour, int32 Minute, int32 Second) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.DateAndTime.TimeSerial(System.Int32,System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function TimeSerial (Hour As Integer, Minute As Integer, Second As Integer) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTime TimeSerial(int Hour, int Minute, int Second);" />
      <MemberSignature Language="F#" Value="static member TimeSerial : int * int * int -&gt; DateTime" Usage="Microsoft.VisualBasic.DateAndTime.TimeSerial (Hour, Minute, Second)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Hour" Type="System.Int32" />
        <Parameter Name="Minute" Type="System.Int32" />
        <Parameter Name="Second" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="Hour">Obligatorio. Expresión de tipo Integer entre 0 y 23. Sin embargo, también se aceptan los valores no comprendidos en este intervalo.</param>
        <param name="Minute">Obligatorio. Expresión de tipo Integer entre 0 y 59. Sin embargo, también se aceptan los valores no comprendidos en este intervalo. El valor de <paramref name="Minute" /> se suma a la hora calculada, por lo que un valor negativo especifica los minutos anteriores a esa hora.</param>
        <param name="Second">Obligatorio. Expresión de tipo Integer entre 0 y 59. Sin embargo, también se aceptan los valores no comprendidos en este intervalo. El valor de <paramref name="Second" /> se suma al minuto calculado, por lo que un valor negativo especifica los segundos anteriores a ese minuto.</param>
        <summary>Devuelve un valor de <see langword="Date" /> que representa una hora, un minuto y un segundo especificados, con la información de fecha establecida con respecto al 1 de enero del año 1.</summary>
        <returns>Valor <see langword="Date" /> que representa una hora, un minuto y un segundo especificados, con la información de fecha establecida con respecto al 1 de enero del año 1.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 En el ejemplo siguiente se muestra negativo, cero y los valores de argumento positivo. El `TimeSerial` función devuelve una hora que representa de 15 minutos antes de tres horas antes del mediodía o 8:45:00 AM.  
  
```vb  
Dim alarmTime As Date = TimeSerial(12 - 3, -15, 0)  
```  
  
 Si bien `Minute` o `Second` supera su intervalo normal, se aplica a la siguiente unidad mayor, según corresponda. Por ejemplo, si especifica 75 minutos, se evalúa como una hora y 15 minutos.  
  
 `TimeSerial` reduce el total de segundos 86.400, que es el número de segundos en un día. Por lo tanto, la hora devuelta siempre está entre 00:00:00 y 23:59:59.  
  
 El `Date` tipo de datos incluye componentes de fecha. `TimeSerial` establece todos en 1, por lo que el valor devuelto representa el primer día del año 1. Sin embargo, si los valores de los argumentos hacen que el tiempo calculado superior a 24 horas, el día se incrementa según sea necesario. En el ejemplo siguiente, los valores de `Hour` y `Minute` dar lugar a una hora combinada de más de 24 horas.  
  
```vb  
MsgBox(TimeSerial(23, 75, 0))   
' The preceding statement displays "1/2/0001 12:15:00 AM".  
```  
  
 Si los valores de los argumentos como resultado un tiempo negativo calculado, la información de fecha se establece en 1/1/0001 y la información de hora se ajusta para estar comprendido entre 00:00:00 y 23:59:59. Sin embargo, si la hora calculada es menor que 24 horas negativas, un <xref:System.ArgumentOutOfRangeException> se produce el error.  
  
 Puesto que cada `Date` valor es compatible con un <xref:System.DateTime?displayProperty=nameWithType> estructura, sus métodos proporcionan opciones adicionales para ensamblar un `Date` valor. Por ejemplo, puede emplear uno de los métodos <xref:System.DateTime.%23ctor%2A> constructores para rellenar un `Date` variable mediante la combinación deseada de componentes. El ejemplo siguiente se establece `newDateTime` en 6 de mayo de 1978 a una décima de segundo antes de las 8:30 de la mañana:  
  
```vb  
Dim newDateTime As Date = New Date(1978, 5, 6, 8, 29, 59, 900)  
```  
  
   
  
## Examples  
 En el ejemplo siguiente se usa el `TimeSerial` función para devolver una hora para la hora especificada, minuto y segundo.  
  
 [!code-vb[VbVbalrFunctions#50](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#50)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Un argumento queda fuera del intervalo –2.147.483.648 a 2.147.483.647</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">La hora calculada es menos de 24 horas negativas.</exception>
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.DateSerial(System.Int32,System.Int32,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.DateValue(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Hour(System.DateTime)" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Minute(System.DateTime)" />
        <altmember cref="P:Microsoft.VisualBasic.DateAndTime.Now" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Second(System.DateTime)" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.TimeValue(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="TimeString">
      <MemberSignature Language="C#" Value="public static string TimeString { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property string TimeString" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.DateAndTime.TimeString" />
      <MemberSignature Language="VB.NET" Value="Public Property TimeString As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::String ^ TimeString { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.TimeString : string with get, set" Usage="Microsoft.VisualBasic.DateAndTime.TimeString" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Devuelve o establece un valor String que representa la hora actual del día según el sistema.</summary>
        <value>Devuelve o establece un valor String que representa la hora actual del día según el sistema.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `TimeString` siempre devuelve la hora del sistema como "Hh", que es un formato de 24 horas. Este formato es la referencia cultural, lo que significa que no cambia aunque se cambie el **opciones regionales** en **Panel de Control**.  
  
 Para obtener o establecer la fecha actual del sistema como un `String`, utilice el <xref:Microsoft.VisualBasic.DateAndTime.DateString%2A> propiedad.  
  
 Para obtener la fecha u hora del sistema actual en el formato de la configuración regional, o en un formato personalizado, proporcione el <xref:Microsoft.VisualBasic.DateAndTime.Now%2A> propiedad a la <xref:Microsoft.VisualBasic.Strings.Format%2A> function, especificando un formato de fecha y hora predefinidos o definidos por el usuario. En el siguiente ejemplo se muestra cómo hacerlo.  
  
```vb  
MsgBox("The formatted time is " & Format(Now, "hh.mm.ss.fff tt"))  
```  
  
 Para obtener acceso a la hora actual del sistema como un `Date`, utilice el <xref:Microsoft.VisualBasic.DateAndTime.TimeOfDay%2A> propiedad.  
  
> [!IMPORTANT]
>  Establecer la fecha u hora del sistema requiere el permiso de código no administrado, lo que podría afectar a su ejecución en situaciones de confianza parcial. Para obtener más información, consulte <xref:System.Security.Permissions.SecurityPermission> y [permisos de acceso del código](https://msdn.microsoft.com/library/e5ae402f-6dda-4732-bbe8-77296630f675).  
  
   
  
## Examples  
 Este ejemplo se usa el `TimeString` propiedad para mostrar la hora actual del sistema.  
  
 [!code-vb[VbVbalrDateProperties#2](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrDateProperties/VB/Module1.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidCastException">Formato no válido utilizado para establecer el valor de <see langword="TimeString" />.</exception>
        <altmember cref="P:Microsoft.VisualBasic.DateAndTime.Now" />
        <altmember cref="P:Microsoft.VisualBasic.DateAndTime.DateString" />
        <altmember cref="P:Microsoft.VisualBasic.DateAndTime.TimeOfDay" />
        <altmember cref="T:System.DateTime" />
      </Docs>
    </Member>
    <Member MemberName="TimeValue">
      <MemberSignature Language="C#" Value="public static DateTime TimeValue (string StringTime);" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype System.DateTime TimeValue(string StringTime) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.DateAndTime.TimeValue(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function TimeValue (StringTime As String) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTime TimeValue(System::String ^ StringTime);" />
      <MemberSignature Language="F#" Value="static member TimeValue : string -&gt; DateTime" Usage="Microsoft.VisualBasic.DateAndTime.TimeValue StringTime" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="StringTime" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="StringTime">Obligatorio. Expresión de tipo String que representa un valor de fecha y hora desde las 00:00:00 horas del 1 de enero del año 1 hasta las 23:59:59 horas del 31 de diciembre de 9999.</param>
        <summary>Devuelve un valor de <see langword="Date" /> que contiene la información de hora representada por una cadena, con la información de fecha establecida en el 1 de enero del año 1.</summary>
        <returns>Valor de <see langword="Date" /> que contiene la información de hora representada por una cadena, con la información de fecha establecida en el 1 de enero del año 1.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Puede especificar horas válidas usando un reloj de 12 o 24 horas. Por ejemplo, `"2:24 P.M."` y `"14:24"` son ambas válidas `StringTime` argumentos.  
  
 Si el `StringTime` argumento incluye información de fecha, `TimeValue` no lo incluye en el valor devuelto. Sin embargo, si `StringTime` incluye información de fecha no válida, por ejemplo "de 32 de enero", un <xref:System.InvalidCastException> se produce el error.  
  
   
  
## Examples  
 En el ejemplo siguiente se usa el `TimeValue` función para convertir una cadena en una hora. También puede usar literales de fecha para asignar directamente una hora para una `Date` variable.  
  
 [!code-vb[VbVbalrFunctions#51](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#51)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidCastException"><paramref name="StringTime" /> incluye información de fecha no válida.</exception>
        <altmember cref="T:System.DateTime" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.DateSerial(System.Int32,System.Int32,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.DateValue(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Hour(System.DateTime)" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Minute(System.DateTime)" />
        <altmember cref="P:Microsoft.VisualBasic.DateAndTime.Now" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Second(System.DateTime)" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.TimeSerial(System.Int32,System.Int32,System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="Today">
      <MemberSignature Language="C#" Value="public static DateTime Today { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property valuetype System.DateTime Today" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.DateAndTime.Today" />
      <MemberSignature Language="VB.NET" Value="Public Property Today As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property DateTime Today { DateTime get(); void set(DateTime value); };" />
      <MemberSignature Language="F#" Value="member this.Today : DateTime with get, set" Usage="Microsoft.VisualBasic.DateAndTime.Today" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Devuelve o establece un valor <see langword="Date" /> que contiene la fecha actual de acuerdo con el sistema.</summary>
        <value>Devuelve o establece un valor <see langword="Date" /> que contiene la fecha actual de acuerdo con el sistema.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El `Date` tipo de datos incluye componentes de tiempo. Al devolver la fecha del sistema, `Today` establece todas ellas en 0, por lo que el valor devuelto representa la medianoche (00: 00:00). Al establecer la fecha del sistema, `Today` omite los componentes de tiempo.  
  
 Para obtener acceso a la fecha actual del sistema como un `String`, utilice el <xref:Microsoft.VisualBasic.DateAndTime.DateString%2A> propiedad.  
  
 Para obtener o establecer la hora actual del sistema, utilice el <xref:Microsoft.VisualBasic.DateAndTime.TimeOfDay%2A> propiedad.  
  
> [!IMPORTANT]
>  Establecer la fecha u hora del sistema requiere el permiso de código no administrado, lo que podría afectar a su ejecución en situaciones de confianza parcial. Para obtener más información, consulte <xref:System.Security.Permissions.SecurityPermission> y [permisos de acceso del código](https://msdn.microsoft.com/library/e5ae402f-6dda-4732-bbe8-77296630f675).  
  
   
  
## Examples  
 Este ejemplo se usa el `Today` propiedad para devolver la fecha actual del sistema.  
  
 [!code-vb[VbVbalrDateProperties#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrDateProperties/VB/Module1.vb#5)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Format(System.Object,System.String)" />
        <altmember cref="P:Microsoft.VisualBasic.DateAndTime.Now" />
        <altmember cref="T:System.DateTime" />
      </Docs>
    </Member>
    <Member MemberName="Weekday">
      <MemberSignature Language="C#" Value="public static int Weekday (DateTime DateValue, Microsoft.VisualBasic.FirstDayOfWeek DayOfWeek = Microsoft.VisualBasic.FirstDayOfWeek.Sunday);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Weekday(valuetype System.DateTime DateValue, valuetype Microsoft.VisualBasic.FirstDayOfWeek DayOfWeek) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.DateAndTime.Weekday(System.DateTime,Microsoft.VisualBasic.FirstDayOfWeek)" />
      <MemberSignature Language="VB.NET" Value="Public Function Weekday (DateValue As DateTime, Optional DayOfWeek As FirstDayOfWeek = Microsoft.VisualBasic.FirstDayOfWeek.Sunday) As Integer" />
      <MemberSignature Language="F#" Value="static member Weekday : DateTime * Microsoft.VisualBasic.FirstDayOfWeek -&gt; int" Usage="Microsoft.VisualBasic.DateAndTime.Weekday (DateValue, DayOfWeek)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="DateValue" Type="System.DateTime" />
        <Parameter Name="DayOfWeek" Type="Microsoft.VisualBasic.FirstDayOfWeek" />
      </Parameters>
      <Docs>
        <param name="DateValue">Obligatorio. Valor <see langword="Date" /> para el que se desea determinar el día de la semana.</param>
        <param name="DayOfWeek">Opcional. Valor elegido de la enumeración <see cref="T:Microsoft.VisualBasic.FirstDayOfWeek" /> que especifica el primer día de la semana. Si no se especifica, se utiliza <see cref="F:Microsoft.VisualBasic.FirstDayOfWeek.Sunday" />.</param>
        <summary>Devuelve un valor Integer que contiene un número que representa el día de la semana.</summary>
        <returns>Valor Integer que contiene un número que representa el día de la semana.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El valor devuelto por la `Weekday` función corresponde a los valores de la `FirstDayOfWeek` enumeración; es decir, 1 indica el domingo y 7 indica el sábado.  
  
> [!NOTE]
>  `Weekday` usa la configuración de calendario actual de la <xref:System.Globalization.CultureInfo.CurrentCulture%2A> propiedad de la <xref:System.Globalization.CultureInfo> clase en el <xref:System.Globalization> espacio de nombres. El valor predeterminado <xref:System.Globalization.CultureInfo.CurrentCulture%2A> valores se determinan mediante **Panel de Control** configuración.  
  
 El `DayOfWeek` argumento puede tener uno de los valores siguientes.  
  
|Valor de enumeración|Valor|Descripción|  
|-----------------------|-----------|-----------------|  
|`FirstDayOfWeek.System`|0|Primer día de la semana especificado en la configuración del sistema|  
|`FirstDayOfWeek.Sunday`|1|Domingo (predeterminado)|  
|`FirstDayOfWeek.Monday`|2|Lunes (cumple la norma ISO 8601, sección 3.17)|  
|`FirstDayOfWeek.Tuesday`|3|Martes|  
|`FirstDayOfWeek.Wednesday`|4|Miércoles|  
|`FirstDayOfWeek.Thursday`|5|Jueves|  
|`FirstDayOfWeek.Friday`|6|Viernes|  
|`FirstDayOfWeek.Saturday`|7|Sábado|  
  
   
  
## Examples  
 En el ejemplo siguiente se usa el `Weekday` función para obtener el día de la semana de una fecha especificada.  
  
 [!code-vb[VbVbalrFunctions#57](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#57)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="DayOfWeek" /> es menor que 0 o mayor que 7.</exception>
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Day(System.DateTime)" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Month(System.DateTime)" />
        <altmember cref="P:Microsoft.VisualBasic.DateAndTime.Now" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.WeekdayName(System.Int32,System.Boolean,Microsoft.VisualBasic.FirstDayOfWeek)" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Year(System.DateTime)" />
        <altmember cref="Overload:Microsoft.VisualBasic.DateAndTime.DatePart" />
        <altmember cref="T:System.DateTime" />
      </Docs>
    </Member>
    <Member MemberName="WeekdayName">
      <MemberSignature Language="C#" Value="public static string WeekdayName (int Weekday, bool Abbreviate = false, Microsoft.VisualBasic.FirstDayOfWeek FirstDayOfWeekValue = Microsoft.VisualBasic.FirstDayOfWeek.System);" />
      <MemberSignature Language="ILAsm" Value=".method public static string WeekdayName(int32 Weekday, bool Abbreviate, valuetype Microsoft.VisualBasic.FirstDayOfWeek FirstDayOfWeekValue) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.DateAndTime.WeekdayName(System.Int32,System.Boolean,Microsoft.VisualBasic.FirstDayOfWeek)" />
      <MemberSignature Language="VB.NET" Value="Public Function WeekdayName (Weekday As Integer, Optional Abbreviate As Boolean = false, Optional FirstDayOfWeekValue As FirstDayOfWeek = Microsoft.VisualBasic.FirstDayOfWeek.System) As String" />
      <MemberSignature Language="F#" Value="static member WeekdayName : int * bool * Microsoft.VisualBasic.FirstDayOfWeek -&gt; string" Usage="Microsoft.VisualBasic.DateAndTime.WeekdayName (Weekday, Abbreviate, FirstDayOfWeekValue)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Weekday" Type="System.Int32" />
        <Parameter Name="Abbreviate" Type="System.Boolean" />
        <Parameter Name="FirstDayOfWeekValue" Type="Microsoft.VisualBasic.FirstDayOfWeek" />
      </Parameters>
      <Docs>
        <param name="Weekday">Obligatorio. Integer. Designación numérica del día de la semana, del 1 al 7; 1 indica el primer día de la semana y 7 indica el último día de la semana. Las identidades del primer y último día dependen del valor de <paramref name="FirstDayOfWeekValue" />.</param>
        <param name="Abbreviate">Opcional. Valor de tipo <see langword="Boolean" /> que indica si el nombre del día de la semana se va a abreviar. Si se omite, el valor predeterminado es <see langword="False" />, lo que significa que el nombre del día de la semana no se abrevia.</param>
        <param name="FirstDayOfWeekValue">Opcional. Valor elegido de la enumeración <see cref="T:Microsoft.VisualBasic.FirstDayOfWeek" /> que especifica el primer día de la semana. Si no se especifica, se utiliza <see langword="FirstDayOfWeek.System" />.</param>
        <summary>Devuelve un valor String que contiene el nombre del día de la semana especificado.</summary>
        <returns>Valor String que contiene el nombre del día de la semana especificado.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La cadena devuelta por `WeekdayName` depende no solo en los argumentos de entrada, sino también la **opciones regionales** configuración especificada en el Windows **Panel de Control**.  
  
> [!NOTE]
>  `WeekdayName` usa la configuración de calendario actual de la <xref:System.Globalization.CultureInfo.CurrentCulture%2A> propiedad de la <xref:System.Globalization.CultureInfo> clase en el <xref:System.Globalization> espacio de nombres. El valor predeterminado <xref:System.Globalization.CultureInfo.CurrentCulture%2A> valores se determinan mediante **Panel de Control** configuración.  
  
 El `FirstDayOfWeekValue` argumento puede tener uno de los valores siguientes.  
  
|Valor de enumeración|Valor|Descripción|  
|-----------------------|-----------|-----------------|  
|`FirstDayOfWeek.System`|0|Primer día de la semana especificado en el sistema de configuración (valor predeterminado)|  
|`FirstDayOfWeek.Sunday`|1|Domingo|  
|`FirstDayOfWeek.Monday`|2|Lunes (cumple la norma ISO 8601, sección 3.17)|  
|`FirstDayOfWeek.Tuesday`|3|Martes|  
|`FirstDayOfWeek.Wednesday`|4|Miércoles|  
|`FirstDayOfWeek.Thursday`|5|Jueves|  
|`FirstDayOfWeek.Friday`|6|Viernes|  
|`FirstDayOfWeek.Saturday`|7|Sábado|  
  
   
  
## Examples  
 En el ejemplo siguiente se usa el `Weekday` función para obtener el día de la semana de una fecha especificada y, a continuación, el `WeekDayName` función para obtener el nombre del día de la semana de su número.  
  
 [!code-vb[VbVbalrFunctions#58](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#58)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="Weekday" /> es menor que 1 o mayor que 7, o <paramref name="FirstDayOfWeekValue" /> es menor que 0 o mayor que 7.</exception>
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Day(System.DateTime)" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Month(System.DateTime)" />
        <altmember cref="P:Microsoft.VisualBasic.DateAndTime.Now" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Weekday(System.DateTime,Microsoft.VisualBasic.FirstDayOfWeek)" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Year(System.DateTime)" />
        <altmember cref="Overload:Microsoft.VisualBasic.DateAndTime.DatePart" />
        <altmember cref="T:System.DateTime" />
      </Docs>
    </Member>
    <Member MemberName="Year">
      <MemberSignature Language="C#" Value="public static int Year (DateTime DateValue);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Year(valuetype System.DateTime DateValue) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.DateAndTime.Year(System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Function Year (DateValue As DateTime) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Year(DateTime DateValue);" />
      <MemberSignature Language="F#" Value="static member Year : DateTime -&gt; int" Usage="Microsoft.VisualBasic.DateAndTime.Year DateValue" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="DateValue" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="DateValue">Obligatorio. Valor <see langword="Date" /> del que se desea extraer el año.</param>
        <summary>Devuelve un valor Integer de 1 a 9999 que representa el año.</summary>
        <returns>Valor Integer de 1 a 9999 que representa el año.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 También puede obtener el año mediante una llamada a `DatePart` y especificando `DateInterval.Year` para el `Interval` argumento.  
  
   
  
## Examples  
 En el ejemplo siguiente se usa el `Year` función para obtener el año de una fecha especificada. En el entorno de desarrollo, la fecha se muestra el literal de formato de fecha corta mediante la configuración regional del código.  
  
 [!code-vb[VbVbalrFunctions#59](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#59)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Day(System.DateTime)" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Month(System.DateTime)" />
        <altmember cref="P:Microsoft.VisualBasic.DateAndTime.Now" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Weekday(System.DateTime,Microsoft.VisualBasic.FirstDayOfWeek)" />
        <altmember cref="Overload:Microsoft.VisualBasic.DateAndTime.DatePart" />
        <altmember cref="T:System.DateTime" />
        <altmember cref="T:System.ArgumentOutOfRangeException" />
      </Docs>
    </Member>
  </Members>
</Type>