<Type Name="Conversion" FullName="Microsoft.VisualBasic.Conversion">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="b1c4b88e0f959fcc023aedd3a8d043a4ec5422b0" />
    <Meta Name="ms.sourcegitcommit" Value="434f60616a9793fa8436744549fc856e94f7a648" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="es-ES" />
    <Meta Name="ms.lasthandoff" Value="08/25/2018" />
    <Meta Name="ms.locfileid" Value="39906716" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class Conversion" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed Conversion extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.VisualBasic.Conversion" />
  <TypeSignature Language="VB.NET" Value="Public Module Conversion" />
  <TypeSignature Language="C++ CLI" Value="public ref class Conversion sealed" />
  <TypeSignature Language="F#" Value="type Conversion = class" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.VisualBasic</AssemblyName>
    <AssemblyVersion>7.0.5000.0</AssemblyVersion>
    <AssemblyVersion>8.0.0.0</AssemblyVersion>
    <AssemblyVersion>10.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2">
      <AttributeName>Microsoft.VisualBasic.CompilerServices.StandardModule</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <span data-ttu-id="d857f-101">El módulo <see langword="Conversion" /> contiene los procedimientos utilizados para realizar diversas operaciones de conversión.</span>
      <span class="sxs-lookup">
        <span data-stu-id="d857f-101">The <see langword="Conversion" /> module contains the procedures used to perform various conversion operations.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d857f-102">Este módulo admite las palabras clave del lenguaje Visual Basic y miembros de la biblioteca de tiempo de ejecución que conversión a números decimales en otras bases, escriba números en cadenas, cadenas en números y datos de uno a otro.</span><span class="sxs-lookup"><span data-stu-id="d857f-102">This module supports the Visual Basic language keywords and run-time library members that convert decimal numbers to other bases, numbers to strings, strings to numbers, and one data type to another.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d857f-103">Este ejemplo se usa el `Hex` función para devolver el valor hexadecimal de un número.</span><span class="sxs-lookup"><span data-stu-id="d857f-103">This example uses the `Hex` function to return the hexadecimal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="CTypeDynamic">
      <MemberSignature Language="C#" Value="public static object CTypeDynamic (object Expression, Type TargetType);" />
      <MemberSignature Language="ILAsm" Value=".method public static object CTypeDynamic(object Expression, class System.Type TargetType) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.CTypeDynamic(System.Object,System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Function CTypeDynamic (Expression As Object, TargetType As Type) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ CTypeDynamic(System::Object ^ Expression, Type ^ TargetType);" />
      <MemberSignature Language="F#" Value="static member CTypeDynamic : obj * Type -&gt; obj" Usage="Microsoft.VisualBasic.Conversion.CTypeDynamic (Expression, TargetType)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Object" />
        <Parameter Name="TargetType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="Expression">
          <span data-ttu-id="d857f-104">Objeto que se va a convertir.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d857f-104">The object to convert.</span>
          </span>
        </param>
        <param name="TargetType">
          <span data-ttu-id="d857f-105">Tipo al que se va a convertir el objeto.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d857f-105">The type to which to convert the object.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d857f-106">Convierte un objeto al tipo especificado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d857f-106">Converts an object to the specified type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d857f-107">Objeto cuyo tipo en tiempo de ejecución es el tipo de destino solicitado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d857f-107">An object whose type at run time is the requested target type.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d857f-108">El `CTypeDynamic` método convierte el objeto pasado como el `Expression` parámetro al tipo especificado por el `TargetType` parámetro.</span><span class="sxs-lookup"><span data-stu-id="d857f-108">The `CTypeDynamic` method converts the object passed as the `Expression` parameter to the type specified by the `TargetType` parameter.</span></span> <span data-ttu-id="d857f-109">Si el objeto es un objeto dinámico, el `CTypeDynamic` método aplica a las conversiones dinámicas disponibles.</span><span class="sxs-lookup"><span data-stu-id="d857f-109">If the object is a dynamic object, the `CTypeDynamic` method applies available dynamic conversions.</span></span>  
  
 <span data-ttu-id="d857f-110">El `CTypeDynamic` método aplica a las conversiones dinámicas de acuerdo con la semántica de conversión definida por el propio objeto.</span><span class="sxs-lookup"><span data-stu-id="d857f-110">The `CTypeDynamic` method applies dynamic conversions in accordance with the conversion semantics defined by the object itself.</span></span> <span data-ttu-id="d857f-111">Si un objeto dinámico se hereda de <xref:System.Dynamic.DynamicObject>, el `CTypeDynamic` método primero intenta realizar la conversión mediante una conversión estática definido por el usuario.</span><span class="sxs-lookup"><span data-stu-id="d857f-111">If a dynamic object inherits from <xref:System.Dynamic.DynamicObject>, the `CTypeDynamic` method first attempts to perform the conversion by using a user-defined, static conversion.</span></span> <span data-ttu-id="d857f-112">Si se produce un error en la conversión definida por el usuario, estática, el `CTypeDynamic` método intenta realizar la conversión mediante conversiones dinámicas.</span><span class="sxs-lookup"><span data-stu-id="d857f-112">If the user-defined, static conversion fails, the `CTypeDynamic` method attempts to perform the conversion by using dynamic conversions.</span></span> <span data-ttu-id="d857f-113">Si implementa un objeto dinámico <xref:System.Dynamic.IDynamicMetaObjectProvider>, el `CTypeDynamic` método da prioridad a las conversiones dinámicas a través de las conversiones estáticas definido por el usuario.</span><span class="sxs-lookup"><span data-stu-id="d857f-113">If a dynamic object implements <xref:System.Dynamic.IDynamicMetaObjectProvider>, the `CTypeDynamic` method gives precedence to dynamic conversions over user-defined, static conversions.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d857f-114">En el ejemplo siguiente se usa el `CTypeDynamic` método para convertir un objeto dinámico en una cadena mediante la conversión definida por el objeto dinámico.</span><span class="sxs-lookup"><span data-stu-id="d857f-114">The following example uses the `CTypeDynamic` method to convert a dynamic object to a string by using the conversion defined by the dynamic object.</span></span>  
  
```vb  
Imports System.Dynamic  
  
Module Module1  
    Sub Main()  
        Dim dyn As Object = New SampleDynamicObject  
        Dim sampleString = CTypeDynamic(dyn, GetType(String))  
        Console.WriteLine(sampleString)  
    End Sub  
End Module  
  
Class SampleDynamicObject  
    Inherits DynamicObject  
  
    Public Overrides Function TryConvert(ByVal binder As ConvertBinder,  
                                         ByRef result As Object) As Boolean  
  
        If binder.Type = GetType(String) Then  
            result = "Sample String"  
            Return True  
        End If  
  
        Return False  
    End Function  
End Class  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Dynamic.DynamicObject.TryConvert(System.Dynamic.ConvertBinder,System.Object@)" />
        <altmember cref="M:System.Dynamic.DynamicMetaObject.BindConvert(System.Dynamic.ConvertBinder)" />
        <altmember cref="M:Microsoft.VisualBasic.Conversion.CTypeDynamic``1(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="CTypeDynamic&lt;TargetType&gt;">
      <MemberSignature Language="C#" Value="public static TargetType CTypeDynamic&lt;TargetType&gt; (object Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static !!TargetType CTypeDynamic&lt;TargetType&gt;(object Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.CTypeDynamic``1(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function CTypeDynamic(Of TargetType) (Expression As Object) As TargetType" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TargetType&gt;&#xA; static TargetType CTypeDynamic(System::Object ^ Expression);" />
      <MemberSignature Language="F#" Value="static member CTypeDynamic : obj -&gt; 'argetType" Usage="Microsoft.VisualBasic.Conversion.CTypeDynamic Expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TargetType</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TargetType" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="Expression" Type="System.Object" />
      </Parameters>
      <Docs>
        <typeparam name="TargetType">
          <span data-ttu-id="d857f-115">Tipo al que se va a convertir el objeto.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d857f-115">The type to which to convert the object.</span>
          </span>
        </typeparam>
        <param name="Expression">
          <span data-ttu-id="d857f-116">Objeto que se va a convertir.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d857f-116">The object to convert.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d857f-117">Convierte un objeto al tipo genérico especificado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d857f-117">Converts an object to the specified generic type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d857f-118">Objeto con tipos estáticos como el tipo genérico solicitado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d857f-118">An object statically typed as the requested generic type.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d857f-119">El `CTypeDynamic` método convierte el objeto pasado como el `Expression` parámetro al tipo especificado por el tipo del parámetro genérico.</span><span class="sxs-lookup"><span data-stu-id="d857f-119">The `CTypeDynamic` method converts the object passed as the `Expression` parameter to the type specified by the type of the generic parameter.</span></span> <span data-ttu-id="d857f-120">Si el objeto es un objeto dinámico, el `CTypeDynamic` método aplica a las conversiones dinámicas disponibles.</span><span class="sxs-lookup"><span data-stu-id="d857f-120">If the object is a dynamic object, the `CTypeDynamic` method applies available dynamic conversions.</span></span>  
  
 <span data-ttu-id="d857f-121">El `CTypeDynamic` método aplica a las conversiones dinámicas de acuerdo con la semántica de conversión definida por el propio objeto.</span><span class="sxs-lookup"><span data-stu-id="d857f-121">The `CTypeDynamic` method applies dynamic conversions in accordance with the conversion semantics defined by the object itself.</span></span> <span data-ttu-id="d857f-122">Si un objeto dinámico se hereda de <xref:System.Dynamic.DynamicObject>, el `CTypeDynamic` método primero intenta realizar la conversión mediante una conversión estática definido por el usuario.</span><span class="sxs-lookup"><span data-stu-id="d857f-122">If a dynamic object inherits from <xref:System.Dynamic.DynamicObject>, the `CTypeDynamic` method first attempts to perform the conversion by using a user-defined, static conversion.</span></span> <span data-ttu-id="d857f-123">Si se produce un error en la conversión definida por el usuario, estática, el `CTypeDynamic` método intenta realizar la conversión mediante conversiones dinámicas.</span><span class="sxs-lookup"><span data-stu-id="d857f-123">If the user-defined, static conversion fails, the `CTypeDynamic` method attempts to perform the conversion by using dynamic conversions.</span></span> <span data-ttu-id="d857f-124">Si implementa un objeto dinámico <xref:System.Dynamic.IDynamicMetaObjectProvider>, el `CTypeDynamic` método da prioridad a las conversiones dinámicas a través de las conversiones estáticas definido por el usuario.</span><span class="sxs-lookup"><span data-stu-id="d857f-124">If a dynamic object implements <xref:System.Dynamic.IDynamicMetaObjectProvider>, the `CTypeDynamic` method gives precedence to dynamic conversions over user-defined, static conversions.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d857f-125">En el ejemplo siguiente se usa el `CTypeDynamic` método para convertir un objeto dinámico en una cadena mediante la conversión definida por el objeto dinámico.</span><span class="sxs-lookup"><span data-stu-id="d857f-125">The following example uses the `CTypeDynamic` method to convert a dynamic object to a string by using the conversion defined by the dynamic object.</span></span>  
  
```vb  
Imports System.Dynamic  
  
Module Module1  
    Sub Main()  
        Dim dyn As Object = New SampleDynamicObject  
        Dim str = CTypeDynamic(Of String)(dyn)  
        Console.WriteLine(str)  
    End Sub  
End Module  
  
Class SampleDynamicObject  
    Inherits DynamicObject  
  
    Public Overrides Function TryConvert(ByVal binder As ConvertBinder,  
                                         ByRef result As Object) As Boolean  
  
        If binder.Type = GetType(String) Then  
            result = "Sample String"  
            Return True  
        End If  
  
        Return False  
    End Function  
End Class  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Dynamic.DynamicObject.TryConvert(System.Dynamic.ConvertBinder,System.Object@)" />
        <altmember cref="M:System.Dynamic.DynamicMetaObject.BindConvert(System.Dynamic.ConvertBinder)" />
        <altmember cref="M:Microsoft.VisualBasic.Conversion.CTypeDynamic(System.Object,System.Type)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="ErrorToString">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="d857f-126">Devuelve el mensaje de error que corresponde a un número de error determinado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d857f-126">Returns the error message that corresponds to a given error number.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ErrorToString">
      <MemberSignature Language="C#" Value="public static string ErrorToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public static string ErrorToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.ErrorToString" />
      <MemberSignature Language="VB.NET" Value="Public Function ErrorToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ ErrorToString();" />
      <MemberSignature Language="F#" Value="static member ErrorToString : unit -&gt; string" Usage="Microsoft.VisualBasic.Conversion.ErrorToString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="d857f-127">Devuelve el mensaje de error que corresponde a un número de error determinado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d857f-127">Returns the error message that corresponds to a given error number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d857f-128">Mensaje de error correspondiente al error en tiempo de ejecución más reciente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d857f-128">The error message that corresponds to the most recent run-time error.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d857f-129">El `ErrorToString` función examina los valores de propiedad de la `Err` objeto para identificar el error de tiempo de ejecución más reciente.</span><span class="sxs-lookup"><span data-stu-id="d857f-129">The `ErrorToString` function examines the property settings of the `Err` object to identify the most recent run-time error.</span></span> <span data-ttu-id="d857f-130">El valor devuelto de la `ErrorToString` función corresponde a la `Description` propiedad de la `Err` objeto.</span><span class="sxs-lookup"><span data-stu-id="d857f-130">The return value of the `ErrorToString` function corresponds to the `Description` property of the `Err` object.</span></span> <span data-ttu-id="d857f-131">Si no se ha producido ningún error de tiempo de ejecución, `ErrorToString` devuelve una cadena de longitud cero ("").</span><span class="sxs-lookup"><span data-stu-id="d857f-131">If no run-time error has occurred, `ErrorToString` returns a zero-length string ("").</span></span>  
  
 <span data-ttu-id="d857f-132">En la versión 6.0 y versiones anterior de Visual Basic, esta funcionalidad se proporciona mediante el `Error` función.</span><span class="sxs-lookup"><span data-stu-id="d857f-132">In Visual Basic version 6.0 and earlier, this functionality was provided by the `Error` function.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d857f-133">El siguiente código utiliza el `ErrorToString` función para mostrar mensajes de error que corresponden a los números de error especificado.</span><span class="sxs-lookup"><span data-stu-id="d857f-133">The following code uses the `ErrorToString` function to display error messages that correspond to the specified error numbers.</span></span>  
  
 [!code-vb[VbVbalrCatRef#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="d857f-134">
            <paramref name="ErrorNumber" /> está fuera del intervalo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d857f-134">
              <paramref name="ErrorNumber" /> is out of range.</span>
          </span>
        </exception>
        <altmember cref="T:Microsoft.VisualBasic.ErrObject" />
        <altmember cref="P:Microsoft.VisualBasic.ErrObject.Description" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <Member MemberName="ErrorToString">
      <MemberSignature Language="C#" Value="public static string ErrorToString (int ErrorNumber);" />
      <MemberSignature Language="ILAsm" Value=".method public static string ErrorToString(int32 ErrorNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.ErrorToString(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function ErrorToString (ErrorNumber As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ ErrorToString(int ErrorNumber);" />
      <MemberSignature Language="F#" Value="static member ErrorToString : int -&gt; string" Usage="Microsoft.VisualBasic.Conversion.ErrorToString ErrorNumber" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ErrorNumber" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="ErrorNumber">
          <span data-ttu-id="d857f-135">Opcional.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d857f-135">Optional.</span>
          </span>
          <span data-ttu-id="d857f-136">Cualquier número de error válido.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d857f-136">Any valid error number.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d857f-137">Devuelve el mensaje de error que corresponde a un número de error determinado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d857f-137">Returns the error message that corresponds to a given error number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d857f-138">Mensaje de error que corresponde a un número de error determinado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d857f-138">The error message that corresponds to a given error number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d857f-139">El `ErrorToString` función examina los valores de propiedad de la `Err` objeto para identificar el error de tiempo de ejecución más reciente.</span><span class="sxs-lookup"><span data-stu-id="d857f-139">The `ErrorToString` function examines the property settings of the `Err` object to identify the most recent run-time error.</span></span> <span data-ttu-id="d857f-140">El valor devuelto de la `ErrorToString` función corresponde a la `Description` propiedad de la `Err` objeto.</span><span class="sxs-lookup"><span data-stu-id="d857f-140">The return value of the `ErrorToString` function corresponds to the `Description` property of the `Err` object.</span></span> <span data-ttu-id="d857f-141">Si `ErrorNumber` es un número de error válido pero no está definido, `ErrorToString` devuelve la cadena `"Application-defined or object-defined error."` si `ErrorNumber` no es válido, se produce un error.</span><span class="sxs-lookup"><span data-stu-id="d857f-141">If `ErrorNumber` is a valid error number but is not defined, `ErrorToString` returns the string `"Application-defined or object-defined error."` If `ErrorNumber` is not valid, an error occurs.</span></span> <span data-ttu-id="d857f-142">Si `ErrorNumber` se omite, el mensaje correspondiente a la más reciente se devuelve el error de tiempo de ejecución.</span><span class="sxs-lookup"><span data-stu-id="d857f-142">If `ErrorNumber` is omitted, the message corresponding to the most recent run-time error is returned.</span></span> <span data-ttu-id="d857f-143">Si no se ha producido ningún error de tiempo de ejecución o `ErrorNumber` es 0, `ErrorToString` devuelve una cadena de longitud cero ("").</span><span class="sxs-lookup"><span data-stu-id="d857f-143">If no run-time error has occurred or `ErrorNumber` is 0, `ErrorToString` returns a zero-length string ("").</span></span>  
  
 <span data-ttu-id="d857f-144">En la versión 6.0 y versiones anterior de Visual Basic, esta funcionalidad se proporciona mediante el `Error` función.</span><span class="sxs-lookup"><span data-stu-id="d857f-144">In Visual Basic version 6.0 and earlier, this functionality was provided by the `Error` function.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d857f-145">El siguiente código utiliza el `ErrorToString` función para mostrar mensajes de error que corresponden a los números de error especificado.</span><span class="sxs-lookup"><span data-stu-id="d857f-145">The following code uses the `ErrorToString` function to display error messages that correspond to the specified error numbers.</span></span>  
  
 [!code-vb[VbVbalrCatRef#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="d857f-146">
            <paramref name="ErrorNumber" /> está fuera del intervalo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d857f-146">
              <paramref name="ErrorNumber" /> is out of range.</span>
          </span>
        </exception>
        <altmember cref="T:Microsoft.VisualBasic.ErrObject" />
        <altmember cref="P:Microsoft.VisualBasic.ErrObject.Description" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Fix">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="d857f-147">Devuelve la parte correspondiente al entero de un número.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d857f-147">Return the integer portion of a number.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Fix">
      <MemberSignature Language="C#" Value="public static decimal Fix (decimal Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype System.Decimal Fix(valuetype System.Decimal Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Fix(System.Decimal)" />
      <MemberSignature Language="VB.NET" Value="Public Function Fix (Number As Decimal) As Decimal" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Decimal Fix(System::Decimal Number);" />
      <MemberSignature Language="F#" Value="static member Fix : decimal -&gt; decimal" Usage="Microsoft.VisualBasic.Conversion.Fix Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Decimal</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Decimal" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="d857f-148">Obligatorio.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d857f-148">Required.</span>
          </span>
          <span data-ttu-id="d857f-149">Número de tipo <see langword="Double" /> o cualquier expresión numérica válida.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d857f-149">A number of type <see langword="Double" /> or any valid numeric expression.</span>
          </span>
          <span data-ttu-id="d857f-150">Si <c>Number</c> contiene <see langword="Nothing" />, se devuelve <see langword="Nothing" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d857f-150">If <c>Number</c> contains <see langword="Nothing" />, <see langword="Nothing" /> is returned.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d857f-151">Devuelve la parte correspondiente al entero de un número.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d857f-151">Return the integer portion of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d857f-152">Devuelve la parte correspondiente al entero de un número.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d857f-152">Return the integer portion of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d857f-153">Tanto el `Int` y `Fix` funciones quitan la parte fraccionaria de `Number` y devolver el valor entero resultante.</span><span class="sxs-lookup"><span data-stu-id="d857f-153">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="d857f-154">La diferencia entre `Int` y `Fix` funciones es que, si `Number` es negativo, `Int` devuelve el primer entero negativo menor o igual a `Number`, mientras que `Fix` devuelve el primer entero negativo mayor o igual que `Number`.</span><span class="sxs-lookup"><span data-stu-id="d857f-154">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="d857f-155">Por ejemplo, `Int` convierte -8,4 en -9, y `Fix` convierte -8,4 en -8.</span><span class="sxs-lookup"><span data-stu-id="d857f-155">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="d857f-156">`Fix(number)` es equivalente a `Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="d857f-156">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d857f-157">Este ejemplo se muestra cómo el `Int` y `Fix` funciones devuelven la parte entera de números.</span><span class="sxs-lookup"><span data-stu-id="d857f-157">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="d857f-158">En el caso de un argumento de número negativo, el `Int` función devuelve el primer entero negativo menor o igual al número; el `Fix` función devuelve el primer entero negativo mayor o igual que el número.</span><span class="sxs-lookup"><span data-stu-id="d857f-158">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="d857f-159">El ejemplo siguiente requiere que especifique `Option Strict Off` porque las conversiones implícitas de tipo `Double` escriba `Integer` no se permiten en `Option Strict On`:</span><span class="sxs-lookup"><span data-stu-id="d857f-159">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="d857f-160">Puede usar el `CInt` función para convertir otros tipos de datos explícitamente al tipo `Integer` con `Option Strict Off`.</span><span class="sxs-lookup"><span data-stu-id="d857f-160">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="d857f-161">Sin embargo, `CInt` redondea al entero más cercano en lugar de truncar la parte fraccionaria de números.</span><span class="sxs-lookup"><span data-stu-id="d857f-161">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="d857f-162">Por ejemplo:</span><span class="sxs-lookup"><span data-stu-id="d857f-162">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="d857f-163">Puede usar el `CInt` función del resultado de una llamada a `Fix` o `Int` para realizar la conversión explícita al entero sin redondear.</span><span class="sxs-lookup"><span data-stu-id="d857f-163">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="d857f-164">Por ejemplo:</span><span class="sxs-lookup"><span data-stu-id="d857f-164">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="d857f-165">Para obtener más información sobre `CInt`, consulte [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span><span class="sxs-lookup"><span data-stu-id="d857f-165">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="d857f-166">No se ha especificado Number.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d857f-166">Number is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="d857f-167">Number no es un tipo numérico.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d857f-167">Number is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <Member MemberName="Fix">
      <MemberSignature Language="C#" Value="public static double Fix (double Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static float64 Fix(float64 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Fix(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Fix (Number As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double Fix(double Number);" />
      <MemberSignature Language="F#" Value="static member Fix : double -&gt; double" Usage="Microsoft.VisualBasic.Conversion.Fix Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="d857f-168">Obligatorio.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d857f-168">Required.</span>
          </span>
          <span data-ttu-id="d857f-169">Número de tipo <see langword="Double" /> o cualquier expresión numérica válida.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d857f-169">A number of type <see langword="Double" /> or any valid numeric expression.</span>
          </span>
          <span data-ttu-id="d857f-170">Si <c>Number</c> contiene <see langword="Nothing" />, se devuelve <see langword="Nothing" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d857f-170">If <c>Number</c> contains <see langword="Nothing" />, <see langword="Nothing" /> is returned.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d857f-171">Devuelve la parte correspondiente al entero de un número.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d857f-171">Return the integer portion of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d857f-172">Devuelve la parte correspondiente al entero de un número.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d857f-172">Return the integer portion of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d857f-173">Tanto el `Int` y `Fix` funciones quitan la parte fraccionaria de `Number` y devolver el valor entero resultante.</span><span class="sxs-lookup"><span data-stu-id="d857f-173">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="d857f-174">La diferencia entre `Int` y `Fix` funciones es que, si `Number` es negativo, `Int` devuelve el primer entero negativo menor o igual a `Number`, mientras que `Fix` devuelve el primer entero negativo mayor o igual que `Number`.</span><span class="sxs-lookup"><span data-stu-id="d857f-174">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="d857f-175">Por ejemplo, `Int` convierte -8,4 en -9, y `Fix` convierte -8,4 en -8.</span><span class="sxs-lookup"><span data-stu-id="d857f-175">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="d857f-176">`Fix(number)` es equivalente a `Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="d857f-176">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d857f-177">Este ejemplo se muestra cómo el `Int` y `Fix` funciones devuelven la parte entera de números.</span><span class="sxs-lookup"><span data-stu-id="d857f-177">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="d857f-178">En el caso de un argumento de número negativo, el `Int` función devuelve el primer entero negativo menor o igual al número; el `Fix` función devuelve el primer entero negativo mayor o igual que el número.</span><span class="sxs-lookup"><span data-stu-id="d857f-178">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="d857f-179">El ejemplo siguiente requiere que especifique `Option Strict Off` porque las conversiones implícitas de tipo `Double` escriba `Integer` no se permiten en `Option Strict On`:</span><span class="sxs-lookup"><span data-stu-id="d857f-179">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="d857f-180">Puede usar el `CInt` función para convertir otros tipos de datos explícitamente al tipo `Integer` con `Option Strict Off`.</span><span class="sxs-lookup"><span data-stu-id="d857f-180">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="d857f-181">Sin embargo, `CInt` redondea al entero más cercano en lugar de truncar la parte fraccionaria de números.</span><span class="sxs-lookup"><span data-stu-id="d857f-181">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="d857f-182">Por ejemplo:</span><span class="sxs-lookup"><span data-stu-id="d857f-182">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="d857f-183">Puede usar el `CInt` función del resultado de una llamada a `Fix` o `Int` para realizar la conversión explícita al entero sin redondear.</span><span class="sxs-lookup"><span data-stu-id="d857f-183">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="d857f-184">Por ejemplo:</span><span class="sxs-lookup"><span data-stu-id="d857f-184">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="d857f-185">Para obtener más información sobre `CInt`, consulte [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span><span class="sxs-lookup"><span data-stu-id="d857f-185">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="d857f-186">No se ha especificado Number.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d857f-186">Number is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="d857f-187">Number no es un tipo numérico.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d857f-187">Number is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <Member MemberName="Fix">
      <MemberSignature Language="C#" Value="public static short Fix (short Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static int16 Fix(int16 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Fix(System.Int16)" />
      <MemberSignature Language="VB.NET" Value="Public Function Fix (Number As Short) As Short" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static short Fix(short Number);" />
      <MemberSignature Language="F#" Value="static member Fix : int16 -&gt; int16" Usage="Microsoft.VisualBasic.Conversion.Fix Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int16</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int16" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="d857f-188">Obligatorio.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d857f-188">Required.</span>
          </span>
          <span data-ttu-id="d857f-189">Número de tipo <see langword="Double" /> o cualquier expresión numérica válida.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d857f-189">A number of type <see langword="Double" /> or any valid numeric expression.</span>
          </span>
          <span data-ttu-id="d857f-190">Si <c>Number</c> contiene <see langword="Nothing" />, se devuelve <see langword="Nothing" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d857f-190">If <c>Number</c> contains <see langword="Nothing" />, <see langword="Nothing" /> is returned.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d857f-191">Devuelve la parte correspondiente al entero de un número.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d857f-191">Return the integer portion of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d857f-192">Devuelve la parte correspondiente al entero de un número.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d857f-192">Return the integer portion of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d857f-193">Tanto el `Int` y `Fix` funciones quitan la parte fraccionaria de `Number` y devolver el valor entero resultante.</span><span class="sxs-lookup"><span data-stu-id="d857f-193">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="d857f-194">La diferencia entre `Int` y `Fix` funciones es que, si `Number` es negativo, `Int` devuelve el primer entero negativo menor o igual a `Number`, mientras que `Fix` devuelve el primer entero negativo mayor o igual que `Number`.</span><span class="sxs-lookup"><span data-stu-id="d857f-194">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="d857f-195">Por ejemplo, `Int` convierte -8,4 en -9, y `Fix` convierte -8,4 en -8.</span><span class="sxs-lookup"><span data-stu-id="d857f-195">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="d857f-196">`Fix(number)` es equivalente a `Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="d857f-196">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d857f-197">Este ejemplo se muestra cómo el `Int` y `Fix` funciones devuelven la parte entera de números.</span><span class="sxs-lookup"><span data-stu-id="d857f-197">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="d857f-198">En el caso de un argumento de número negativo, el `Int` función devuelve el primer entero negativo menor o igual al número; el `Fix` función devuelve el primer entero negativo mayor o igual que el número.</span><span class="sxs-lookup"><span data-stu-id="d857f-198">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="d857f-199">El ejemplo siguiente requiere que especifique `Option Strict Off` porque las conversiones implícitas de tipo `Double` escriba `Integer` no se permiten en `Option Strict On`:</span><span class="sxs-lookup"><span data-stu-id="d857f-199">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="d857f-200">Puede usar el `CInt` función para convertir otros tipos de datos explícitamente al tipo `Integer` con `Option Strict Off`.</span><span class="sxs-lookup"><span data-stu-id="d857f-200">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="d857f-201">Sin embargo, `CInt` redondea al entero más cercano en lugar de truncar la parte fraccionaria de números.</span><span class="sxs-lookup"><span data-stu-id="d857f-201">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="d857f-202">Por ejemplo:</span><span class="sxs-lookup"><span data-stu-id="d857f-202">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="d857f-203">Puede usar el `CInt` función del resultado de una llamada a `Fix` o `Int` para realizar la conversión explícita al entero sin redondear.</span><span class="sxs-lookup"><span data-stu-id="d857f-203">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="d857f-204">Por ejemplo:</span><span class="sxs-lookup"><span data-stu-id="d857f-204">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="d857f-205">Para obtener más información sobre `CInt`, consulte [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span><span class="sxs-lookup"><span data-stu-id="d857f-205">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="d857f-206">No se ha especificado Number.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d857f-206">Number is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="d857f-207">Number no es un tipo numérico.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d857f-207">Number is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <Member MemberName="Fix">
      <MemberSignature Language="C#" Value="public static int Fix (int Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Fix(int32 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Fix(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Fix (Number As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Fix(int Number);" />
      <MemberSignature Language="F#" Value="static member Fix : int -&gt; int" Usage="Microsoft.VisualBasic.Conversion.Fix Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="d857f-208">Obligatorio.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d857f-208">Required.</span>
          </span>
          <span data-ttu-id="d857f-209">Número de tipo <see langword="Double" /> o cualquier expresión numérica válida.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d857f-209">A number of type <see langword="Double" /> or any valid numeric expression.</span>
          </span>
          <span data-ttu-id="d857f-210">Si <c>Number</c> contiene <see langword="Nothing" />, se devuelve <see langword="Nothing" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d857f-210">If <c>Number</c> contains <see langword="Nothing" />, <see langword="Nothing" /> is returned.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d857f-211">Devuelve la parte correspondiente al entero de un número.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d857f-211">Return the integer portion of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d857f-212">Devuelve la parte correspondiente al entero de un número.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d857f-212">Return the integer portion of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d857f-213">Tanto el `Int` y `Fix` funciones quitan la parte fraccionaria de `Number` y devolver el valor entero resultante.</span><span class="sxs-lookup"><span data-stu-id="d857f-213">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="d857f-214">La diferencia entre `Int` y `Fix` funciones es que, si `Number` es negativo, `Int` devuelve el primer entero negativo menor o igual a `Number`, mientras que `Fix` devuelve el primer entero negativo mayor o igual que `Number`.</span><span class="sxs-lookup"><span data-stu-id="d857f-214">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="d857f-215">Por ejemplo, `Int` convierte -8,4 en -9, y `Fix` convierte -8,4 en -8.</span><span class="sxs-lookup"><span data-stu-id="d857f-215">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="d857f-216">`Fix(number)` es equivalente a `Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="d857f-216">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d857f-217">Este ejemplo se muestra cómo el `Int` y `Fix` funciones devuelven la parte entera de números.</span><span class="sxs-lookup"><span data-stu-id="d857f-217">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="d857f-218">En el caso de un argumento de número negativo, el `Int` función devuelve el primer entero negativo menor o igual al número; el `Fix` función devuelve el primer entero negativo mayor o igual que el número.</span><span class="sxs-lookup"><span data-stu-id="d857f-218">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="d857f-219">El ejemplo siguiente requiere que especifique `Option Strict Off` porque las conversiones implícitas de tipo `Double` escriba `Integer` no se permiten en `Option Strict On`:</span><span class="sxs-lookup"><span data-stu-id="d857f-219">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="d857f-220">Puede usar el `CInt` función para convertir otros tipos de datos explícitamente al tipo `Integer` con `Option Strict Off`.</span><span class="sxs-lookup"><span data-stu-id="d857f-220">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="d857f-221">Sin embargo, `CInt` redondea al entero más cercano en lugar de truncar la parte fraccionaria de números.</span><span class="sxs-lookup"><span data-stu-id="d857f-221">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="d857f-222">Por ejemplo:</span><span class="sxs-lookup"><span data-stu-id="d857f-222">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="d857f-223">Puede usar el `CInt` función del resultado de una llamada a `Fix` o `Int` para realizar la conversión explícita al entero sin redondear.</span><span class="sxs-lookup"><span data-stu-id="d857f-223">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="d857f-224">Por ejemplo:</span><span class="sxs-lookup"><span data-stu-id="d857f-224">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="d857f-225">Para obtener más información sobre `CInt`, consulte [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span><span class="sxs-lookup"><span data-stu-id="d857f-225">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="d857f-226">No se ha especificado Number.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d857f-226">Number is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="d857f-227">Number no es un tipo numérico.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d857f-227">Number is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <Member MemberName="Fix">
      <MemberSignature Language="C#" Value="public static long Fix (long Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static int64 Fix(int64 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Fix(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Function Fix (Number As Long) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static long Fix(long Number);" />
      <MemberSignature Language="F#" Value="static member Fix : int64 -&gt; int64" Usage="Microsoft.VisualBasic.Conversion.Fix Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="d857f-228">Obligatorio.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d857f-228">Required.</span>
          </span>
          <span data-ttu-id="d857f-229">Número de tipo <see langword="Double" /> o cualquier expresión numérica válida.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d857f-229">A number of type <see langword="Double" /> or any valid numeric expression.</span>
          </span>
          <span data-ttu-id="d857f-230">Si <c>Number</c> contiene <see langword="Nothing" />, se devuelve <see langword="Nothing" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d857f-230">If <c>Number</c> contains <see langword="Nothing" />, <see langword="Nothing" /> is returned.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d857f-231">Devuelve la parte correspondiente al entero de un número.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d857f-231">Return the integer portion of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d857f-232">Devuelve la parte correspondiente al entero de un número.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d857f-232">Return the integer portion of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d857f-233">Tanto el `Int` y `Fix` funciones quitan la parte fraccionaria de `Number` y devolver el valor entero resultante.</span><span class="sxs-lookup"><span data-stu-id="d857f-233">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="d857f-234">La diferencia entre `Int` y `Fix` funciones es que, si `Number` es negativo, `Int` devuelve el primer entero negativo menor o igual a `Number`, mientras que `Fix` devuelve el primer entero negativo mayor o igual que `Number`.</span><span class="sxs-lookup"><span data-stu-id="d857f-234">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="d857f-235">Por ejemplo, `Int` convierte -8,4 en -9, y `Fix` convierte -8,4 en -8.</span><span class="sxs-lookup"><span data-stu-id="d857f-235">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="d857f-236">`Fix(number)` es equivalente a `Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="d857f-236">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d857f-237">Este ejemplo se muestra cómo el `Int` y `Fix` funciones devuelven la parte entera de números.</span><span class="sxs-lookup"><span data-stu-id="d857f-237">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="d857f-238">En el caso de un argumento de número negativo, el `Int` función devuelve el primer entero negativo menor o igual al número; el `Fix` función devuelve el primer entero negativo mayor o igual que el número.</span><span class="sxs-lookup"><span data-stu-id="d857f-238">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="d857f-239">El ejemplo siguiente requiere que especifique `Option Strict Off` porque las conversiones implícitas de tipo `Double` escriba `Integer` no se permiten en `Option Strict On`:</span><span class="sxs-lookup"><span data-stu-id="d857f-239">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="d857f-240">Puede usar el `CInt` función para convertir otros tipos de datos explícitamente al tipo `Integer` con `Option Strict Off`.</span><span class="sxs-lookup"><span data-stu-id="d857f-240">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="d857f-241">Sin embargo, `CInt` redondea al entero más cercano en lugar de truncar la parte fraccionaria de números.</span><span class="sxs-lookup"><span data-stu-id="d857f-241">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="d857f-242">Por ejemplo:</span><span class="sxs-lookup"><span data-stu-id="d857f-242">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="d857f-243">Puede usar el `CInt` función del resultado de una llamada a `Fix` o `Int` para realizar la conversión explícita al entero sin redondear.</span><span class="sxs-lookup"><span data-stu-id="d857f-243">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="d857f-244">Por ejemplo:</span><span class="sxs-lookup"><span data-stu-id="d857f-244">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="d857f-245">Para obtener más información sobre `CInt`, consulte [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span><span class="sxs-lookup"><span data-stu-id="d857f-245">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="d857f-246">No se ha especificado Number.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d857f-246">Number is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="d857f-247">Number no es un tipo numérico.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d857f-247">Number is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <Member MemberName="Fix">
      <MemberSignature Language="C#" Value="public static object Fix (object Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static object Fix(object Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Fix(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Fix (Number As Object) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ Fix(System::Object ^ Number);" />
      <MemberSignature Language="F#" Value="static member Fix : obj -&gt; obj" Usage="Microsoft.VisualBasic.Conversion.Fix Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="d857f-248">Obligatorio.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d857f-248">Required.</span>
          </span>
          <span data-ttu-id="d857f-249">Número de tipo <see langword="Double" /> o cualquier expresión numérica válida.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d857f-249">A number of type <see langword="Double" /> or any valid numeric expression.</span>
          </span>
          <span data-ttu-id="d857f-250">Si <c>Number</c> contiene <see langword="Nothing" />, se devuelve <see langword="Nothing" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d857f-250">If <c>Number</c> contains <see langword="Nothing" />, <see langword="Nothing" /> is returned.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d857f-251">Devuelve la parte correspondiente al entero de un número.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d857f-251">Return the integer portion of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d857f-252">Devuelve la parte correspondiente al entero de un número.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d857f-252">Return the integer portion of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d857f-253">Tanto el `Int` y `Fix` funciones quitan la parte fraccionaria de `Number` y devolver el valor entero resultante.</span><span class="sxs-lookup"><span data-stu-id="d857f-253">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="d857f-254">La diferencia entre `Int` y `Fix` funciones es que, si `Number` es negativo, `Int` devuelve el primer entero negativo menor o igual a `Number`, mientras que `Fix` devuelve el primer entero negativo mayor o igual que `Number`.</span><span class="sxs-lookup"><span data-stu-id="d857f-254">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="d857f-255">Por ejemplo, `Int` convierte -8,4 en -9, y `Fix` convierte -8,4 en -8.</span><span class="sxs-lookup"><span data-stu-id="d857f-255">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="d857f-256">`Fix(number)` es equivalente a `Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="d857f-256">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d857f-257">Este ejemplo se muestra cómo el `Int` y `Fix` funciones devuelven la parte entera de números.</span><span class="sxs-lookup"><span data-stu-id="d857f-257">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="d857f-258">En el caso de un argumento de número negativo, el `Int` función devuelve el primer entero negativo menor o igual al número; el `Fix` función devuelve el primer entero negativo mayor o igual que el número.</span><span class="sxs-lookup"><span data-stu-id="d857f-258">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="d857f-259">El ejemplo siguiente requiere que especifique `Option Strict Off` porque las conversiones implícitas de tipo `Double` escriba `Integer` no se permiten en `Option Strict On`:</span><span class="sxs-lookup"><span data-stu-id="d857f-259">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="d857f-260">Puede usar el `CInt` función para convertir otros tipos de datos explícitamente al tipo `Integer` con `Option Strict Off`.</span><span class="sxs-lookup"><span data-stu-id="d857f-260">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="d857f-261">Sin embargo, `CInt` redondea al entero más cercano en lugar de truncar la parte fraccionaria de números.</span><span class="sxs-lookup"><span data-stu-id="d857f-261">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="d857f-262">Por ejemplo:</span><span class="sxs-lookup"><span data-stu-id="d857f-262">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="d857f-263">Puede usar el `CInt` función del resultado de una llamada a `Fix` o `Int` para realizar la conversión explícita al entero sin redondear.</span><span class="sxs-lookup"><span data-stu-id="d857f-263">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="d857f-264">Por ejemplo:</span><span class="sxs-lookup"><span data-stu-id="d857f-264">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="d857f-265">Para obtener más información sobre `CInt`, consulte [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span><span class="sxs-lookup"><span data-stu-id="d857f-265">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="d857f-266">No se ha especificado Number.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d857f-266">Number is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="d857f-267">Number no es un tipo numérico.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d857f-267">Number is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <Member MemberName="Fix">
      <MemberSignature Language="C#" Value="public static float Fix (float Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static float32 Fix(float32 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Fix(System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Function Fix (Number As Single) As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static float Fix(float Number);" />
      <MemberSignature Language="F#" Value="static member Fix : single -&gt; single" Usage="Microsoft.VisualBasic.Conversion.Fix Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="d857f-268">Obligatorio.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d857f-268">Required.</span>
          </span>
          <span data-ttu-id="d857f-269">Número de tipo <see langword="Double" /> o cualquier expresión numérica válida.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d857f-269">A number of type <see langword="Double" /> or any valid numeric expression.</span>
          </span>
          <span data-ttu-id="d857f-270">Si <c>Number</c> contiene <see langword="Nothing" />, se devuelve <see langword="Nothing" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d857f-270">If <c>Number</c> contains <see langword="Nothing" />, <see langword="Nothing" /> is returned.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d857f-271">Devuelve la parte correspondiente al entero de un número.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d857f-271">Return the integer portion of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d857f-272">Devuelve la parte correspondiente al entero de un número.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d857f-272">Return the integer portion of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d857f-273">Tanto el `Int` y `Fix` funciones quitan la parte fraccionaria de `Number` y devolver el valor entero resultante.</span><span class="sxs-lookup"><span data-stu-id="d857f-273">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="d857f-274">La diferencia entre `Int` y `Fix` funciones es que, si `Number` es negativo, `Int` devuelve el primer entero negativo menor o igual a `Number`, mientras que `Fix` devuelve el primer entero negativo mayor o igual que `Number`.</span><span class="sxs-lookup"><span data-stu-id="d857f-274">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="d857f-275">Por ejemplo, `Int` convierte -8,4 en -9, y `Fix` convierte -8,4 en -8.</span><span class="sxs-lookup"><span data-stu-id="d857f-275">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="d857f-276">`Fix(number)` es equivalente a `Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="d857f-276">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d857f-277">Este ejemplo se muestra cómo el `Int` y `Fix` funciones devuelven la parte entera de números.</span><span class="sxs-lookup"><span data-stu-id="d857f-277">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="d857f-278">En el caso de un argumento de número negativo, el `Int` función devuelve el primer entero negativo menor o igual al número; el `Fix` función devuelve el primer entero negativo mayor o igual que el número.</span><span class="sxs-lookup"><span data-stu-id="d857f-278">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="d857f-279">El ejemplo siguiente requiere que especifique `Option Strict Off` porque las conversiones implícitas de tipo `Double` escriba `Integer` no se permiten en `Option Strict On`:</span><span class="sxs-lookup"><span data-stu-id="d857f-279">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="d857f-280">Puede usar el `CInt` función para convertir otros tipos de datos explícitamente al tipo `Integer` con `Option Strict Off`.</span><span class="sxs-lookup"><span data-stu-id="d857f-280">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="d857f-281">Sin embargo, `CInt` redondea al entero más cercano en lugar de truncar la parte fraccionaria de números.</span><span class="sxs-lookup"><span data-stu-id="d857f-281">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="d857f-282">Por ejemplo:</span><span class="sxs-lookup"><span data-stu-id="d857f-282">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="d857f-283">Puede usar el `CInt` función del resultado de una llamada a `Fix` o `Int` para realizar la conversión explícita al entero sin redondear.</span><span class="sxs-lookup"><span data-stu-id="d857f-283">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="d857f-284">Por ejemplo:</span><span class="sxs-lookup"><span data-stu-id="d857f-284">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="d857f-285">Para obtener más información sobre `CInt`, consulte [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span><span class="sxs-lookup"><span data-stu-id="d857f-285">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="d857f-286">No se ha especificado Number.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d857f-286">Number is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="d857f-287">Number no es un tipo numérico.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d857f-287">Number is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Hex">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="d857f-288">Devuelve una cadena que representa el valor hexadecimal de un número.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d857f-288">Returns a string representing the hexadecimal value of a number.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Hex">
      <MemberSignature Language="C#" Value="public static string Hex (byte Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Hex(unsigned int8 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Hex(System.Byte)" />
      <MemberSignature Language="VB.NET" Value="Public Function Hex (Number As Byte) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Hex(System::Byte Number);" />
      <MemberSignature Language="F#" Value="static member Hex : byte -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Hex Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Byte" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="d857f-289">Obligatorio.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d857f-289">Required.</span>
          </span>
          <span data-ttu-id="d857f-290">Cualquier expresión numérica o expresión de tipo <see langword="String" /> válida.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d857f-290">Any valid numeric expression or <see langword="String" /> expression.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d857f-291">Devuelve una cadena que representa el valor hexadecimal de un número.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d857f-291">Returns a string representing the hexadecimal value of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d857f-292">Devuelve una cadena que representa el valor hexadecimal de un número.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d857f-292">Returns a string representing the hexadecimal value of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d857f-293">Si `Number` ya no es un número entero, se redondea al número entero más cercano antes de que se va a evaluar.</span><span class="sxs-lookup"><span data-stu-id="d857f-293">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="d857f-294">Si `Number` es</span><span class="sxs-lookup"><span data-stu-id="d857f-294">If `Number` is</span></span>|<span data-ttu-id="d857f-295">HEX devuelve</span><span class="sxs-lookup"><span data-stu-id="d857f-295">Hex returns</span></span>|  
|-|-|  
|<span data-ttu-id="d857f-296">Empty</span><span class="sxs-lookup"><span data-stu-id="d857f-296">Empty</span></span>|<span data-ttu-id="d857f-297">Cero (0)</span><span class="sxs-lookup"><span data-stu-id="d857f-297">Zero (0)</span></span>|  
|<span data-ttu-id="d857f-298">Cualquier valor numérico</span><span class="sxs-lookup"><span data-stu-id="d857f-298">Any numeric value</span></span>|<span data-ttu-id="d857f-299">Hasta dieciséis caracteres hexadecimales</span><span class="sxs-lookup"><span data-stu-id="d857f-299">Up to sixteen hexadecimal characters</span></span>|  
  
 <span data-ttu-id="d857f-300">Puede representar números hexadecimales directamente anteponiendo números en el intervalo correcto con `&H`.</span><span class="sxs-lookup"><span data-stu-id="d857f-300">You can represent hexadecimal numbers directly by preceding numbers in the proper range with `&H`.</span></span> <span data-ttu-id="d857f-301">Por ejemplo, `&H10` representa 16 decimal en notación hexadecimal.</span><span class="sxs-lookup"><span data-stu-id="d857f-301">For example, `&H10` represents decimal 16 in hexadecimal notation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d857f-302">Este ejemplo se usa el `Hex` función para devolver el valor hexadecimal de un número.</span><span class="sxs-lookup"><span data-stu-id="d857f-302">This example uses the `Hex` function to return the hexadecimal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="d857f-303">No se especificó <paramref name="Number" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d857f-303">
              <paramref name="Number" /> is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="d857f-304">
            <paramref name="Number" /> no es un tipo numérico.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d857f-304">
              <paramref name="Number" /> is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Oct" />
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <Member MemberName="Hex">
      <MemberSignature Language="C#" Value="public static string Hex (short Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Hex(int16 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Hex(System.Int16)" />
      <MemberSignature Language="VB.NET" Value="Public Function Hex (Number As Short) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Hex(short Number);" />
      <MemberSignature Language="F#" Value="static member Hex : int16 -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Hex Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int16" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="d857f-305">Obligatorio.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d857f-305">Required.</span>
          </span>
          <span data-ttu-id="d857f-306">Cualquier expresión numérica o expresión de tipo <see langword="String" /> válida.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d857f-306">Any valid numeric expression or <see langword="String" /> expression.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d857f-307">Devuelve una cadena que representa el valor hexadecimal de un número.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d857f-307">Returns a string representing the hexadecimal value of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d857f-308">Devuelve una cadena que representa el valor hexadecimal de un número.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d857f-308">Returns a string representing the hexadecimal value of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d857f-309">Si `Number` ya no es un número entero, se redondea al número entero más cercano antes de que se va a evaluar.</span><span class="sxs-lookup"><span data-stu-id="d857f-309">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="d857f-310">Si `Number` es</span><span class="sxs-lookup"><span data-stu-id="d857f-310">If `Number` is</span></span>|<span data-ttu-id="d857f-311">HEX devuelve</span><span class="sxs-lookup"><span data-stu-id="d857f-311">Hex returns</span></span>|  
|-|-|  
|<span data-ttu-id="d857f-312">Empty</span><span class="sxs-lookup"><span data-stu-id="d857f-312">Empty</span></span>|<span data-ttu-id="d857f-313">Cero (0)</span><span class="sxs-lookup"><span data-stu-id="d857f-313">Zero (0)</span></span>|  
|<span data-ttu-id="d857f-314">Cualquier valor numérico</span><span class="sxs-lookup"><span data-stu-id="d857f-314">Any numeric value</span></span>|<span data-ttu-id="d857f-315">Hasta dieciséis caracteres hexadecimales</span><span class="sxs-lookup"><span data-stu-id="d857f-315">Up to sixteen hexadecimal characters</span></span>|  
  
 <span data-ttu-id="d857f-316">Puede representar números hexadecimales directamente anteponiendo números en el intervalo correcto con `&H`.</span><span class="sxs-lookup"><span data-stu-id="d857f-316">You can represent hexadecimal numbers directly by preceding numbers in the proper range with `&H`.</span></span> <span data-ttu-id="d857f-317">Por ejemplo, `&H10` representa 16 decimal en notación hexadecimal.</span><span class="sxs-lookup"><span data-stu-id="d857f-317">For example, `&H10` represents decimal 16 in hexadecimal notation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d857f-318">Este ejemplo se usa el `Hex` función para devolver el valor hexadecimal de un número.</span><span class="sxs-lookup"><span data-stu-id="d857f-318">This example uses the `Hex` function to return the hexadecimal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="d857f-319">No se especificó <paramref name="Number" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d857f-319">
              <paramref name="Number" /> is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="d857f-320">
            <paramref name="Number" /> no es un tipo numérico.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d857f-320">
              <paramref name="Number" /> is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Oct" />
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <Member MemberName="Hex">
      <MemberSignature Language="C#" Value="public static string Hex (int Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Hex(int32 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Hex(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Hex (Number As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Hex(int Number);" />
      <MemberSignature Language="F#" Value="static member Hex : int -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Hex Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="d857f-321">Obligatorio.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d857f-321">Required.</span>
          </span>
          <span data-ttu-id="d857f-322">Cualquier expresión numérica o expresión de tipo <see langword="String" /> válida.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d857f-322">Any valid numeric expression or <see langword="String" /> expression.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d857f-323">Devuelve una cadena que representa el valor hexadecimal de un número.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d857f-323">Returns a string representing the hexadecimal value of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d857f-324">Devuelve una cadena que representa el valor hexadecimal de un número.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d857f-324">Returns a string representing the hexadecimal value of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d857f-325">Si `Number` ya no es un número entero, se redondea al número entero más cercano antes de que se va a evaluar.</span><span class="sxs-lookup"><span data-stu-id="d857f-325">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="d857f-326">Si `Number` es</span><span class="sxs-lookup"><span data-stu-id="d857f-326">If `Number` is</span></span>|<span data-ttu-id="d857f-327">HEX devuelve</span><span class="sxs-lookup"><span data-stu-id="d857f-327">Hex returns</span></span>|  
|-|-|  
|<span data-ttu-id="d857f-328">Empty</span><span class="sxs-lookup"><span data-stu-id="d857f-328">Empty</span></span>|<span data-ttu-id="d857f-329">Cero (0)</span><span class="sxs-lookup"><span data-stu-id="d857f-329">Zero (0)</span></span>|  
|<span data-ttu-id="d857f-330">Cualquier valor numérico</span><span class="sxs-lookup"><span data-stu-id="d857f-330">Any numeric value</span></span>|<span data-ttu-id="d857f-331">Hasta dieciséis caracteres hexadecimales</span><span class="sxs-lookup"><span data-stu-id="d857f-331">Up to sixteen hexadecimal characters</span></span>|  
  
 <span data-ttu-id="d857f-332">Puede representar números hexadecimales directamente anteponiendo números en el intervalo correcto con `&H`.</span><span class="sxs-lookup"><span data-stu-id="d857f-332">You can represent hexadecimal numbers directly by preceding numbers in the proper range with `&H`.</span></span> <span data-ttu-id="d857f-333">Por ejemplo, `&H10` representa 16 decimal en notación hexadecimal.</span><span class="sxs-lookup"><span data-stu-id="d857f-333">For example, `&H10` represents decimal 16 in hexadecimal notation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d857f-334">Este ejemplo se usa el `Hex` función para devolver el valor hexadecimal de un número.</span><span class="sxs-lookup"><span data-stu-id="d857f-334">This example uses the `Hex` function to return the hexadecimal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="d857f-335">No se especificó <paramref name="Number" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d857f-335">
              <paramref name="Number" /> is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="d857f-336">
            <paramref name="Number" /> no es un tipo numérico.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d857f-336">
              <paramref name="Number" /> is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Oct" />
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <Member MemberName="Hex">
      <MemberSignature Language="C#" Value="public static string Hex (long Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Hex(int64 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Hex(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Function Hex (Number As Long) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Hex(long Number);" />
      <MemberSignature Language="F#" Value="static member Hex : int64 -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Hex Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="d857f-337">Obligatorio.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d857f-337">Required.</span>
          </span>
          <span data-ttu-id="d857f-338">Cualquier expresión numérica o expresión de tipo <see langword="String" /> válida.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d857f-338">Any valid numeric expression or <see langword="String" /> expression.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d857f-339">Devuelve una cadena que representa el valor hexadecimal de un número.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d857f-339">Returns a string representing the hexadecimal value of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d857f-340">Devuelve una cadena que representa el valor hexadecimal de un número.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d857f-340">Returns a string representing the hexadecimal value of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d857f-341">Si `Number` ya no es un número entero, se redondea al número entero más cercano antes de que se va a evaluar.</span><span class="sxs-lookup"><span data-stu-id="d857f-341">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="d857f-342">Si `Number` es</span><span class="sxs-lookup"><span data-stu-id="d857f-342">If `Number` is</span></span>|<span data-ttu-id="d857f-343">HEX devuelve</span><span class="sxs-lookup"><span data-stu-id="d857f-343">Hex returns</span></span>|  
|-|-|  
|<span data-ttu-id="d857f-344">Empty</span><span class="sxs-lookup"><span data-stu-id="d857f-344">Empty</span></span>|<span data-ttu-id="d857f-345">Cero (0)</span><span class="sxs-lookup"><span data-stu-id="d857f-345">Zero (0)</span></span>|  
|<span data-ttu-id="d857f-346">Cualquier valor numérico</span><span class="sxs-lookup"><span data-stu-id="d857f-346">Any numeric value</span></span>|<span data-ttu-id="d857f-347">Hasta dieciséis caracteres hexadecimales</span><span class="sxs-lookup"><span data-stu-id="d857f-347">Up to sixteen hexadecimal characters</span></span>|  
  
 <span data-ttu-id="d857f-348">Puede representar números hexadecimales directamente anteponiendo números en el intervalo correcto con `&H`.</span><span class="sxs-lookup"><span data-stu-id="d857f-348">You can represent hexadecimal numbers directly by preceding numbers in the proper range with `&H`.</span></span> <span data-ttu-id="d857f-349">Por ejemplo, `&H10` representa 16 decimal en notación hexadecimal.</span><span class="sxs-lookup"><span data-stu-id="d857f-349">For example, `&H10` represents decimal 16 in hexadecimal notation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d857f-350">Este ejemplo se usa el `Hex` función para devolver el valor hexadecimal de un número.</span><span class="sxs-lookup"><span data-stu-id="d857f-350">This example uses the `Hex` function to return the hexadecimal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="d857f-351">No se especificó <paramref name="Number" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d857f-351">
              <paramref name="Number" /> is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="d857f-352">
            <paramref name="Number" /> no es un tipo numérico.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d857f-352">
              <paramref name="Number" /> is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Oct" />
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <Member MemberName="Hex">
      <MemberSignature Language="C#" Value="public static string Hex (object Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Hex(object Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Hex(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Hex (Number As Object) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Hex(System::Object ^ Number);" />
      <MemberSignature Language="F#" Value="static member Hex : obj -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Hex Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="d857f-353">Obligatorio.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d857f-353">Required.</span>
          </span>
          <span data-ttu-id="d857f-354">Cualquier expresión numérica o expresión de tipo <see langword="String" /> válida.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d857f-354">Any valid numeric expression or <see langword="String" /> expression.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d857f-355">Devuelve una cadena que representa el valor hexadecimal de un número.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d857f-355">Returns a string representing the hexadecimal value of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d857f-356">Devuelve una cadena que representa el valor hexadecimal de un número.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d857f-356">Returns a string representing the hexadecimal value of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d857f-357">Si `Number` ya no es un número entero, se redondea al número entero más cercano antes de que se va a evaluar.</span><span class="sxs-lookup"><span data-stu-id="d857f-357">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="d857f-358">Si `Number` es</span><span class="sxs-lookup"><span data-stu-id="d857f-358">If `Number` is</span></span>|<span data-ttu-id="d857f-359">HEX devuelve</span><span class="sxs-lookup"><span data-stu-id="d857f-359">Hex returns</span></span>|  
|-|-|  
|<span data-ttu-id="d857f-360">Empty</span><span class="sxs-lookup"><span data-stu-id="d857f-360">Empty</span></span>|<span data-ttu-id="d857f-361">Cero (0)</span><span class="sxs-lookup"><span data-stu-id="d857f-361">Zero (0)</span></span>|  
|<span data-ttu-id="d857f-362">Cualquier valor numérico</span><span class="sxs-lookup"><span data-stu-id="d857f-362">Any numeric value</span></span>|<span data-ttu-id="d857f-363">Hasta dieciséis caracteres hexadecimales</span><span class="sxs-lookup"><span data-stu-id="d857f-363">Up to sixteen hexadecimal characters</span></span>|  
  
 <span data-ttu-id="d857f-364">Puede representar números hexadecimales directamente anteponiendo números en el intervalo correcto con `&H`.</span><span class="sxs-lookup"><span data-stu-id="d857f-364">You can represent hexadecimal numbers directly by preceding numbers in the proper range with `&H`.</span></span> <span data-ttu-id="d857f-365">Por ejemplo, `&H10` representa 16 decimal en notación hexadecimal.</span><span class="sxs-lookup"><span data-stu-id="d857f-365">For example, `&H10` represents decimal 16 in hexadecimal notation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d857f-366">Este ejemplo se usa el `Hex` función para devolver el valor hexadecimal de un número.</span><span class="sxs-lookup"><span data-stu-id="d857f-366">This example uses the `Hex` function to return the hexadecimal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="d857f-367">No se especificó <paramref name="Number" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d857f-367">
              <paramref name="Number" /> is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="d857f-368">
            <paramref name="Number" /> no es un tipo numérico.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d857f-368">
              <paramref name="Number" /> is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Oct" />
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <Member MemberName="Hex">
      <MemberSignature Language="C#" Value="public static string Hex (sbyte Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Hex(int8 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Hex(System.SByte)" />
      <MemberSignature Language="VB.NET" Value="Public Function Hex (Number As SByte) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Hex(System::SByte Number);" />
      <MemberSignature Language="F#" Value="static member Hex : sbyte -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Hex Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.SByte" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="d857f-369">Obligatorio.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d857f-369">Required.</span>
          </span>
          <span data-ttu-id="d857f-370">Cualquier expresión numérica o expresión de tipo <see langword="String" /> válida.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d857f-370">Any valid numeric expression or <see langword="String" /> expression.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d857f-371">Devuelve una cadena que representa el valor hexadecimal de un número.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d857f-371">Returns a string representing the hexadecimal value of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d857f-372">Devuelve una cadena que representa el valor hexadecimal de un número.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d857f-372">Returns a string representing the hexadecimal value of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d857f-373">Si `Number` ya no es un número entero, se redondea al número entero más cercano antes de que se va a evaluar.</span><span class="sxs-lookup"><span data-stu-id="d857f-373">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="d857f-374">Si `Number` es</span><span class="sxs-lookup"><span data-stu-id="d857f-374">If `Number` is</span></span>|<span data-ttu-id="d857f-375">HEX devuelve</span><span class="sxs-lookup"><span data-stu-id="d857f-375">Hex returns</span></span>|  
|-|-|  
|<span data-ttu-id="d857f-376">Empty</span><span class="sxs-lookup"><span data-stu-id="d857f-376">Empty</span></span>|<span data-ttu-id="d857f-377">Cero (0)</span><span class="sxs-lookup"><span data-stu-id="d857f-377">Zero (0)</span></span>|  
|<span data-ttu-id="d857f-378">Cualquier valor numérico</span><span class="sxs-lookup"><span data-stu-id="d857f-378">Any numeric value</span></span>|<span data-ttu-id="d857f-379">Hasta dieciséis caracteres hexadecimales</span><span class="sxs-lookup"><span data-stu-id="d857f-379">Up to sixteen hexadecimal characters</span></span>|  
  
 <span data-ttu-id="d857f-380">Puede representar números hexadecimales directamente anteponiendo números en el intervalo correcto con `&H`.</span><span class="sxs-lookup"><span data-stu-id="d857f-380">You can represent hexadecimal numbers directly by preceding numbers in the proper range with `&H`.</span></span> <span data-ttu-id="d857f-381">Por ejemplo, `&H10` representa 16 decimal en notación hexadecimal.</span><span class="sxs-lookup"><span data-stu-id="d857f-381">For example, `&H10` represents decimal 16 in hexadecimal notation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d857f-382">Este ejemplo se usa el `Hex` función para devolver el valor hexadecimal de un número.</span><span class="sxs-lookup"><span data-stu-id="d857f-382">This example uses the `Hex` function to return the hexadecimal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Conversion.Hex(System.Byte)" />
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="d857f-383">No se especificó <paramref name="Number" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d857f-383">
              <paramref name="Number" /> is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="d857f-384">
            <paramref name="Number" /> no es un tipo numérico.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d857f-384">
              <paramref name="Number" /> is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Oct" />
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <Member MemberName="Hex">
      <MemberSignature Language="C#" Value="public static string Hex (ushort Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Hex(unsigned int16 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Hex(System.UInt16)" />
      <MemberSignature Language="VB.NET" Value="Public Function Hex (Number As UShort) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Hex(System::UInt16 Number);" />
      <MemberSignature Language="F#" Value="static member Hex : uint16 -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Hex Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.UInt16" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="d857f-385">Obligatorio.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d857f-385">Required.</span>
          </span>
          <span data-ttu-id="d857f-386">Cualquier expresión numérica o expresión de tipo <see langword="String" /> válida.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d857f-386">Any valid numeric expression or <see langword="String" /> expression.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d857f-387">Devuelve una cadena que representa el valor hexadecimal de un número.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d857f-387">Returns a string representing the hexadecimal value of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d857f-388">Devuelve una cadena que representa el valor hexadecimal de un número.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d857f-388">Returns a string representing the hexadecimal value of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d857f-389">Si `Number` ya no es un número entero, se redondea al número entero más cercano antes de que se va a evaluar.</span><span class="sxs-lookup"><span data-stu-id="d857f-389">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="d857f-390">Si `Number` es</span><span class="sxs-lookup"><span data-stu-id="d857f-390">If `Number` is</span></span>|<span data-ttu-id="d857f-391">HEX devuelve</span><span class="sxs-lookup"><span data-stu-id="d857f-391">Hex returns</span></span>|  
|-|-|  
|<span data-ttu-id="d857f-392">Empty</span><span class="sxs-lookup"><span data-stu-id="d857f-392">Empty</span></span>|<span data-ttu-id="d857f-393">Cero (0)</span><span class="sxs-lookup"><span data-stu-id="d857f-393">Zero (0)</span></span>|  
|<span data-ttu-id="d857f-394">Cualquier valor numérico</span><span class="sxs-lookup"><span data-stu-id="d857f-394">Any numeric value</span></span>|<span data-ttu-id="d857f-395">Hasta dieciséis caracteres hexadecimales</span><span class="sxs-lookup"><span data-stu-id="d857f-395">Up to sixteen hexadecimal characters</span></span>|  
  
 <span data-ttu-id="d857f-396">Puede representar números hexadecimales directamente anteponiendo números en el intervalo correcto con `&H`.</span><span class="sxs-lookup"><span data-stu-id="d857f-396">You can represent hexadecimal numbers directly by preceding numbers in the proper range with `&H`.</span></span> <span data-ttu-id="d857f-397">Por ejemplo, `&H10` representa 16 decimal en notación hexadecimal.</span><span class="sxs-lookup"><span data-stu-id="d857f-397">For example, `&H10` represents decimal 16 in hexadecimal notation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d857f-398">Este ejemplo se usa el `Hex` función para devolver el valor hexadecimal de un número.</span><span class="sxs-lookup"><span data-stu-id="d857f-398">This example uses the `Hex` function to return the hexadecimal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Conversion.Hex(System.Int16)" />
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="d857f-399">No se especificó <paramref name="Number" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d857f-399">
              <paramref name="Number" /> is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="d857f-400">
            <paramref name="Number" /> no es un tipo numérico.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d857f-400">
              <paramref name="Number" /> is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Oct" />
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <Member MemberName="Hex">
      <MemberSignature Language="C#" Value="public static string Hex (uint Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Hex(unsigned int32 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Hex(System.UInt32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Hex (Number As UInteger) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Hex(System::UInt32 Number);" />
      <MemberSignature Language="F#" Value="static member Hex : uint32 -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Hex Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.UInt32" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="d857f-401">Obligatorio.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d857f-401">Required.</span>
          </span>
          <span data-ttu-id="d857f-402">Cualquier expresión numérica o expresión de tipo <see langword="String" /> válida.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d857f-402">Any valid numeric expression or <see langword="String" /> expression.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d857f-403">Devuelve una cadena que representa el valor hexadecimal de un número.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d857f-403">Returns a string representing the hexadecimal value of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d857f-404">Devuelve una cadena que representa el valor hexadecimal de un número.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d857f-404">Returns a string representing the hexadecimal value of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d857f-405">Si `Number` ya no es un número entero, se redondea al número entero más cercano antes de que se va a evaluar.</span><span class="sxs-lookup"><span data-stu-id="d857f-405">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="d857f-406">Si `Number` es</span><span class="sxs-lookup"><span data-stu-id="d857f-406">If `Number` is</span></span>|<span data-ttu-id="d857f-407">HEX devuelve</span><span class="sxs-lookup"><span data-stu-id="d857f-407">Hex returns</span></span>|  
|-|-|  
|<span data-ttu-id="d857f-408">Empty</span><span class="sxs-lookup"><span data-stu-id="d857f-408">Empty</span></span>|<span data-ttu-id="d857f-409">Cero (0)</span><span class="sxs-lookup"><span data-stu-id="d857f-409">Zero (0)</span></span>|  
|<span data-ttu-id="d857f-410">Cualquier valor numérico</span><span class="sxs-lookup"><span data-stu-id="d857f-410">Any numeric value</span></span>|<span data-ttu-id="d857f-411">Hasta dieciséis caracteres hexadecimales</span><span class="sxs-lookup"><span data-stu-id="d857f-411">Up to sixteen hexadecimal characters</span></span>|  
  
 <span data-ttu-id="d857f-412">Puede representar números hexadecimales directamente anteponiendo números en el intervalo correcto con `&H`.</span><span class="sxs-lookup"><span data-stu-id="d857f-412">You can represent hexadecimal numbers directly by preceding numbers in the proper range with `&H`.</span></span> <span data-ttu-id="d857f-413">Por ejemplo, `&H10` representa 16 decimal en notación hexadecimal.</span><span class="sxs-lookup"><span data-stu-id="d857f-413">For example, `&H10` represents decimal 16 in hexadecimal notation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d857f-414">Este ejemplo se usa el `Hex` función para devolver el valor hexadecimal de un número.</span><span class="sxs-lookup"><span data-stu-id="d857f-414">This example uses the `Hex` function to return the hexadecimal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Conversion.Hex(System.Int32)" />
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="d857f-415">No se especificó <paramref name="Number" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d857f-415">
              <paramref name="Number" /> is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="d857f-416">
            <paramref name="Number" /> no es un tipo numérico.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d857f-416">
              <paramref name="Number" /> is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Oct" />
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <Member MemberName="Hex">
      <MemberSignature Language="C#" Value="public static string Hex (ulong Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Hex(unsigned int64 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Hex(System.UInt64)" />
      <MemberSignature Language="VB.NET" Value="Public Function Hex (Number As ULong) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Hex(System::UInt64 Number);" />
      <MemberSignature Language="F#" Value="static member Hex : uint64 -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Hex Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.UInt64" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="d857f-417">Obligatorio.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d857f-417">Required.</span>
          </span>
          <span data-ttu-id="d857f-418">Cualquier expresión numérica o expresión de tipo <see langword="String" /> válida.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d857f-418">Any valid numeric expression or <see langword="String" /> expression.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d857f-419">Devuelve una cadena que representa el valor hexadecimal de un número.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d857f-419">Returns a string representing the hexadecimal value of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d857f-420">Devuelve una cadena que representa el valor hexadecimal de un número.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d857f-420">Returns a string representing the hexadecimal value of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d857f-421">Si `Number` ya no es un número entero, se redondea al número entero más cercano antes de que se va a evaluar.</span><span class="sxs-lookup"><span data-stu-id="d857f-421">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="d857f-422">Si `Number` es</span><span class="sxs-lookup"><span data-stu-id="d857f-422">If `Number` is</span></span>|<span data-ttu-id="d857f-423">HEX devuelve</span><span class="sxs-lookup"><span data-stu-id="d857f-423">Hex returns</span></span>|  
|-|-|  
|<span data-ttu-id="d857f-424">Empty</span><span class="sxs-lookup"><span data-stu-id="d857f-424">Empty</span></span>|<span data-ttu-id="d857f-425">Cero (0)</span><span class="sxs-lookup"><span data-stu-id="d857f-425">Zero (0)</span></span>|  
|<span data-ttu-id="d857f-426">Cualquier valor numérico</span><span class="sxs-lookup"><span data-stu-id="d857f-426">Any numeric value</span></span>|<span data-ttu-id="d857f-427">Hasta dieciséis caracteres hexadecimales</span><span class="sxs-lookup"><span data-stu-id="d857f-427">Up to sixteen hexadecimal characters</span></span>|  
  
 <span data-ttu-id="d857f-428">Puede representar números hexadecimales directamente anteponiendo números en el intervalo correcto con `&H`.</span><span class="sxs-lookup"><span data-stu-id="d857f-428">You can represent hexadecimal numbers directly by preceding numbers in the proper range with `&H`.</span></span> <span data-ttu-id="d857f-429">Por ejemplo, `&H10` representa 16 decimal en notación hexadecimal.</span><span class="sxs-lookup"><span data-stu-id="d857f-429">For example, `&H10` represents decimal 16 in hexadecimal notation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d857f-430">Este ejemplo se usa el `Hex` función para devolver el valor hexadecimal de un número.</span><span class="sxs-lookup"><span data-stu-id="d857f-430">This example uses the `Hex` function to return the hexadecimal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Conversion.Hex(System.Int64)" />
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="d857f-431">No se especificó <paramref name="Number" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d857f-431">
              <paramref name="Number" /> is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="d857f-432">
            <paramref name="Number" /> no es un tipo numérico.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d857f-432">
              <paramref name="Number" /> is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Oct" />
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Int">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="d857f-433">Devuelve la parte correspondiente al entero de un número.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d857f-433">Return the integer portion of a number.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Int">
      <MemberSignature Language="C#" Value="public static decimal Int (decimal Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype System.Decimal Int(valuetype System.Decimal Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Int(System.Decimal)" />
      <MemberSignature Language="VB.NET" Value="Public Function Int (Number As Decimal) As Decimal" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Decimal Int(System::Decimal Number);" />
      <MemberSignature Language="F#" Value="static member Int : decimal -&gt; decimal" Usage="Microsoft.VisualBasic.Conversion.Int Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Decimal</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Decimal" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="d857f-434">Obligatorio.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d857f-434">Required.</span>
          </span>
          <span data-ttu-id="d857f-435">Número de tipo <see langword="Double" /> o cualquier expresión numérica válida.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d857f-435">A number of type <see langword="Double" /> or any valid numeric expression.</span>
          </span>
          <span data-ttu-id="d857f-436">Si <c>Number</c> contiene <see langword="Nothing" />, se devuelve <see langword="Nothing" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d857f-436">If <c>Number</c> contains <see langword="Nothing" />, <see langword="Nothing" /> is returned.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d857f-437">Devuelve la parte correspondiente al entero de un número.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d857f-437">Return the integer portion of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d857f-438">Devuelve la parte correspondiente al entero de un número.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d857f-438">Return the integer portion of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d857f-439">Tanto el `Int` y `Fix` funciones quitan la parte fraccionaria de `Number` y devolver el valor entero resultante.</span><span class="sxs-lookup"><span data-stu-id="d857f-439">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="d857f-440">La diferencia entre `Int` y `Fix` funciones es que, si `Number` es negativo, `Int` devuelve el primer entero negativo menor o igual a `Number`, mientras que `Fix` devuelve el primer entero negativo mayor o igual que `Number`.</span><span class="sxs-lookup"><span data-stu-id="d857f-440">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="d857f-441">Por ejemplo, `Int` convierte -8,4 en -9, y `Fix` convierte -8,4 en -8.</span><span class="sxs-lookup"><span data-stu-id="d857f-441">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="d857f-442">`Fix(number)` es equivalente a `Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="d857f-442">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d857f-443">Este ejemplo se muestra cómo el `Int` y `Fix` funciones devuelven la parte entera de números.</span><span class="sxs-lookup"><span data-stu-id="d857f-443">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="d857f-444">En el caso de un argumento de número negativo, el `Int` función devuelve el primer entero negativo menor o igual al número; el `Fix` función devuelve el primer entero negativo mayor o igual que el número.</span><span class="sxs-lookup"><span data-stu-id="d857f-444">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="d857f-445">El ejemplo siguiente requiere que especifique `Option Strict Off` porque las conversiones implícitas de tipo `Double` escriba `Integer` no se permiten en `Option Strict On`:</span><span class="sxs-lookup"><span data-stu-id="d857f-445">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="d857f-446">Puede usar el `CInt` función para convertir otros tipos de datos explícitamente al tipo `Integer` con `Option Strict Off`.</span><span class="sxs-lookup"><span data-stu-id="d857f-446">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="d857f-447">Sin embargo, `CInt` redondea al entero más cercano en lugar de truncar la parte fraccionaria de números.</span><span class="sxs-lookup"><span data-stu-id="d857f-447">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="d857f-448">Por ejemplo:</span><span class="sxs-lookup"><span data-stu-id="d857f-448">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="d857f-449">Puede usar el `CInt` función del resultado de una llamada a `Fix` o `Int` para realizar la conversión explícita al entero sin redondear.</span><span class="sxs-lookup"><span data-stu-id="d857f-449">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="d857f-450">Por ejemplo:</span><span class="sxs-lookup"><span data-stu-id="d857f-450">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="d857f-451">Para obtener más información sobre `CInt`, consulte [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span><span class="sxs-lookup"><span data-stu-id="d857f-451">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="d857f-452">No se ha especificado Number.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d857f-452">Number is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="d857f-453">Number no es un tipo numérico.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d857f-453">Number is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <Member MemberName="Int">
      <MemberSignature Language="C#" Value="public static double Int (double Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static float64 Int(float64 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Int(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Int (Number As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double Int(double Number);" />
      <MemberSignature Language="F#" Value="static member Int : double -&gt; double" Usage="Microsoft.VisualBasic.Conversion.Int Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="d857f-454">Obligatorio.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d857f-454">Required.</span>
          </span>
          <span data-ttu-id="d857f-455">Número de tipo <see langword="Double" /> o cualquier expresión numérica válida.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d857f-455">A number of type <see langword="Double" /> or any valid numeric expression.</span>
          </span>
          <span data-ttu-id="d857f-456">Si <c>Number</c> contiene <see langword="Nothing" />, se devuelve <see langword="Nothing" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d857f-456">If <c>Number</c> contains <see langword="Nothing" />, <see langword="Nothing" /> is returned.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d857f-457">Devuelve la parte correspondiente al entero de un número.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d857f-457">Return the integer portion of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d857f-458">Devuelve la parte correspondiente al entero de un número.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d857f-458">Return the integer portion of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d857f-459">Tanto el `Int` y `Fix` funciones quitan la parte fraccionaria de `Number` y devolver el valor entero resultante.</span><span class="sxs-lookup"><span data-stu-id="d857f-459">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="d857f-460">La diferencia entre `Int` y `Fix` funciones es que, si `Number` es negativo, `Int` devuelve el primer entero negativo menor o igual a `Number`, mientras que `Fix` devuelve el primer entero negativo mayor o igual que `Number`.</span><span class="sxs-lookup"><span data-stu-id="d857f-460">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="d857f-461">Por ejemplo, `Int` convierte -8,4 en -9, y `Fix` convierte -8,4 en -8.</span><span class="sxs-lookup"><span data-stu-id="d857f-461">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="d857f-462">`Fix(number)` es equivalente a `Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="d857f-462">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d857f-463">Este ejemplo se muestra cómo el `Int` y `Fix` funciones devuelven la parte entera de números.</span><span class="sxs-lookup"><span data-stu-id="d857f-463">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="d857f-464">En el caso de un argumento de número negativo, el `Int` función devuelve el primer entero negativo menor o igual al número; el `Fix` función devuelve el primer entero negativo mayor o igual que el número.</span><span class="sxs-lookup"><span data-stu-id="d857f-464">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="d857f-465">El ejemplo siguiente requiere que especifique `Option Strict Off` porque las conversiones implícitas de tipo `Double` escriba `Integer` no se permiten en `Option Strict On`:</span><span class="sxs-lookup"><span data-stu-id="d857f-465">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="d857f-466">Puede usar el `CInt` función para convertir otros tipos de datos explícitamente al tipo `Integer` con `Option Strict Off`.</span><span class="sxs-lookup"><span data-stu-id="d857f-466">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="d857f-467">Sin embargo, `CInt` redondea al entero más cercano en lugar de truncar la parte fraccionaria de números.</span><span class="sxs-lookup"><span data-stu-id="d857f-467">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="d857f-468">Por ejemplo:</span><span class="sxs-lookup"><span data-stu-id="d857f-468">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="d857f-469">Puede usar el `CInt` función del resultado de una llamada a `Fix` o `Int` para realizar la conversión explícita al entero sin redondear.</span><span class="sxs-lookup"><span data-stu-id="d857f-469">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="d857f-470">Por ejemplo:</span><span class="sxs-lookup"><span data-stu-id="d857f-470">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="d857f-471">Para obtener más información sobre `CInt`, consulte [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span><span class="sxs-lookup"><span data-stu-id="d857f-471">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="d857f-472">No se ha especificado Number.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d857f-472">Number is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="d857f-473">Number no es un tipo numérico.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d857f-473">Number is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <Member MemberName="Int">
      <MemberSignature Language="C#" Value="public static short Int (short Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static int16 Int(int16 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Int(System.Int16)" />
      <MemberSignature Language="VB.NET" Value="Public Function Int (Number As Short) As Short" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static short Int(short Number);" />
      <MemberSignature Language="F#" Value="static member Int : int16 -&gt; int16" Usage="Microsoft.VisualBasic.Conversion.Int Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int16</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int16" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="d857f-474">Obligatorio.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d857f-474">Required.</span>
          </span>
          <span data-ttu-id="d857f-475">Número de tipo <see langword="Double" /> o cualquier expresión numérica válida.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d857f-475">A number of type <see langword="Double" /> or any valid numeric expression.</span>
          </span>
          <span data-ttu-id="d857f-476">Si <c>Number</c> contiene <see langword="Nothing" />, se devuelve <see langword="Nothing" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d857f-476">If <c>Number</c> contains <see langword="Nothing" />, <see langword="Nothing" /> is returned.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d857f-477">Devuelve la parte correspondiente al entero de un número.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d857f-477">Return the integer portion of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d857f-478">Devuelve la parte correspondiente al entero de un número.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d857f-478">Return the integer portion of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d857f-479">Tanto el `Int` y `Fix` funciones quitan la parte fraccionaria de `Number` y devolver el valor entero resultante.</span><span class="sxs-lookup"><span data-stu-id="d857f-479">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="d857f-480">La diferencia entre `Int` y `Fix` funciones es que, si `Number` es negativo, `Int` devuelve el primer entero negativo menor o igual a `Number`, mientras que `Fix` devuelve el primer entero negativo mayor o igual que `Number`.</span><span class="sxs-lookup"><span data-stu-id="d857f-480">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="d857f-481">Por ejemplo, `Int` convierte -8,4 en -9, y `Fix` convierte -8,4 en -8.</span><span class="sxs-lookup"><span data-stu-id="d857f-481">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="d857f-482">`Fix(number)` es equivalente a `Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="d857f-482">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d857f-483">Este ejemplo se muestra cómo el `Int` y `Fix` funciones devuelven la parte entera de números.</span><span class="sxs-lookup"><span data-stu-id="d857f-483">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="d857f-484">En el caso de un argumento de número negativo, el `Int` función devuelve el primer entero negativo menor o igual al número; el `Fix` función devuelve el primer entero negativo mayor o igual que el número.</span><span class="sxs-lookup"><span data-stu-id="d857f-484">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="d857f-485">El ejemplo siguiente requiere que especifique `Option Strict Off` porque las conversiones implícitas de tipo `Double` escriba `Integer` no se permiten en `Option Strict On`:</span><span class="sxs-lookup"><span data-stu-id="d857f-485">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="d857f-486">Puede usar el `CInt` función para convertir otros tipos de datos explícitamente al tipo `Integer` con `Option Strict Off`.</span><span class="sxs-lookup"><span data-stu-id="d857f-486">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="d857f-487">Sin embargo, `CInt` redondea al entero más cercano en lugar de truncar la parte fraccionaria de números.</span><span class="sxs-lookup"><span data-stu-id="d857f-487">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="d857f-488">Por ejemplo:</span><span class="sxs-lookup"><span data-stu-id="d857f-488">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="d857f-489">Puede usar el `CInt` función del resultado de una llamada a `Fix` o `Int` para realizar la conversión explícita al entero sin redondear.</span><span class="sxs-lookup"><span data-stu-id="d857f-489">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="d857f-490">Por ejemplo:</span><span class="sxs-lookup"><span data-stu-id="d857f-490">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="d857f-491">Para obtener más información sobre `CInt`, consulte [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span><span class="sxs-lookup"><span data-stu-id="d857f-491">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="d857f-492">No se ha especificado Number.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d857f-492">Number is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="d857f-493">Number no es un tipo numérico.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d857f-493">Number is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <Member MemberName="Int">
      <MemberSignature Language="C#" Value="public static int Int (int Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Int(int32 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Int(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Int (Number As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Int(int Number);" />
      <MemberSignature Language="F#" Value="static member Int : int -&gt; int" Usage="Microsoft.VisualBasic.Conversion.Int Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="d857f-494">Obligatorio.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d857f-494">Required.</span>
          </span>
          <span data-ttu-id="d857f-495">Número de tipo <see langword="Double" /> o cualquier expresión numérica válida.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d857f-495">A number of type <see langword="Double" /> or any valid numeric expression.</span>
          </span>
          <span data-ttu-id="d857f-496">Si <c>Number</c> contiene <see langword="Nothing" />, se devuelve <see langword="Nothing" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d857f-496">If <c>Number</c> contains <see langword="Nothing" />, <see langword="Nothing" /> is returned.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d857f-497">Devuelve la parte correspondiente al entero de un número.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d857f-497">Return the integer portion of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d857f-498">Devuelve la parte correspondiente al entero de un número.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d857f-498">Return the integer portion of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d857f-499">Tanto el `Int` y `Fix` funciones quitan la parte fraccionaria de `Number` y devolver el valor entero resultante.</span><span class="sxs-lookup"><span data-stu-id="d857f-499">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="d857f-500">La diferencia entre `Int` y `Fix` funciones es que, si `Number` es negativo, `Int` devuelve el primer entero negativo menor o igual a `Number`, mientras que `Fix` devuelve el primer entero negativo mayor o igual que `Number`.</span><span class="sxs-lookup"><span data-stu-id="d857f-500">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="d857f-501">Por ejemplo, `Int` convierte -8,4 en -9, y `Fix` convierte -8,4 en -8.</span><span class="sxs-lookup"><span data-stu-id="d857f-501">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="d857f-502">`Fix(number)` es equivalente a `Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="d857f-502">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d857f-503">Este ejemplo se muestra cómo el `Int` y `Fix` funciones devuelven la parte entera de números.</span><span class="sxs-lookup"><span data-stu-id="d857f-503">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="d857f-504">En el caso de un argumento de número negativo, el `Int` función devuelve el primer entero negativo menor o igual al número; el `Fix` función devuelve el primer entero negativo mayor o igual que el número.</span><span class="sxs-lookup"><span data-stu-id="d857f-504">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="d857f-505">El ejemplo siguiente requiere que especifique `Option Strict Off` porque las conversiones implícitas de tipo `Double` escriba `Integer` no se permiten en `Option Strict On`:</span><span class="sxs-lookup"><span data-stu-id="d857f-505">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="d857f-506">Puede usar el `CInt` función para convertir otros tipos de datos explícitamente al tipo `Integer` con `Option Strict Off`.</span><span class="sxs-lookup"><span data-stu-id="d857f-506">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="d857f-507">Sin embargo, `CInt` redondea al entero más cercano en lugar de truncar la parte fraccionaria de números.</span><span class="sxs-lookup"><span data-stu-id="d857f-507">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="d857f-508">Por ejemplo:</span><span class="sxs-lookup"><span data-stu-id="d857f-508">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="d857f-509">Puede usar el `CInt` función del resultado de una llamada a `Fix` o `Int` para realizar la conversión explícita al entero sin redondear.</span><span class="sxs-lookup"><span data-stu-id="d857f-509">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="d857f-510">Por ejemplo:</span><span class="sxs-lookup"><span data-stu-id="d857f-510">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="d857f-511">Para obtener más información sobre `CInt`, consulte [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span><span class="sxs-lookup"><span data-stu-id="d857f-511">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="d857f-512">No se ha especificado Number.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d857f-512">Number is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="d857f-513">Number no es un tipo numérico.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d857f-513">Number is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <Member MemberName="Int">
      <MemberSignature Language="C#" Value="public static long Int (long Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static int64 Int(int64 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Int(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Function Int (Number As Long) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static long Int(long Number);" />
      <MemberSignature Language="F#" Value="static member Int : int64 -&gt; int64" Usage="Microsoft.VisualBasic.Conversion.Int Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="d857f-514">Obligatorio.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d857f-514">Required.</span>
          </span>
          <span data-ttu-id="d857f-515">Número de tipo <see langword="Double" /> o cualquier expresión numérica válida.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d857f-515">A number of type <see langword="Double" /> or any valid numeric expression.</span>
          </span>
          <span data-ttu-id="d857f-516">Si <c>Number</c> contiene <see langword="Nothing" />, se devuelve <see langword="Nothing" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d857f-516">If <c>Number</c> contains <see langword="Nothing" />, <see langword="Nothing" /> is returned.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d857f-517">Devuelve la parte correspondiente al entero de un número.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d857f-517">Return the integer portion of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d857f-518">Devuelve la parte correspondiente al entero de un número.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d857f-518">Return the integer portion of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d857f-519">Tanto el `Int` y `Fix` funciones quitan la parte fraccionaria de `Number` y devolver el valor entero resultante.</span><span class="sxs-lookup"><span data-stu-id="d857f-519">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="d857f-520">La diferencia entre `Int` y `Fix` funciones es que, si `Number` es negativo, `Int` devuelve el primer entero negativo menor o igual a `Number`, mientras que `Fix` devuelve el primer entero negativo mayor o igual que `Number`.</span><span class="sxs-lookup"><span data-stu-id="d857f-520">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="d857f-521">Por ejemplo, `Int` convierte -8,4 en -9, y `Fix` convierte -8,4 en -8.</span><span class="sxs-lookup"><span data-stu-id="d857f-521">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="d857f-522">`Fix(number)` es equivalente a `Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="d857f-522">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d857f-523">Este ejemplo se muestra cómo el `Int` y `Fix` funciones devuelven la parte entera de números.</span><span class="sxs-lookup"><span data-stu-id="d857f-523">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="d857f-524">En el caso de un argumento de número negativo, el `Int` función devuelve el primer entero negativo menor o igual al número; el `Fix` función devuelve el primer entero negativo mayor o igual que el número.</span><span class="sxs-lookup"><span data-stu-id="d857f-524">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="d857f-525">El ejemplo siguiente requiere que especifique `Option Strict Off` porque las conversiones implícitas de tipo `Double` escriba `Integer` no se permiten en `Option Strict On`:</span><span class="sxs-lookup"><span data-stu-id="d857f-525">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="d857f-526">Puede usar el `CInt` función para convertir otros tipos de datos explícitamente al tipo `Integer` con `Option Strict Off`.</span><span class="sxs-lookup"><span data-stu-id="d857f-526">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="d857f-527">Sin embargo, `CInt` redondea al entero más cercano en lugar de truncar la parte fraccionaria de números.</span><span class="sxs-lookup"><span data-stu-id="d857f-527">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="d857f-528">Por ejemplo:</span><span class="sxs-lookup"><span data-stu-id="d857f-528">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="d857f-529">Puede usar el `CInt` función del resultado de una llamada a `Fix` o `Int` para realizar la conversión explícita al entero sin redondear.</span><span class="sxs-lookup"><span data-stu-id="d857f-529">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="d857f-530">Por ejemplo:</span><span class="sxs-lookup"><span data-stu-id="d857f-530">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="d857f-531">Para obtener más información sobre `CInt`, consulte [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span><span class="sxs-lookup"><span data-stu-id="d857f-531">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="d857f-532">No se ha especificado Number.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d857f-532">Number is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="d857f-533">Number no es un tipo numérico.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d857f-533">Number is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <Member MemberName="Int">
      <MemberSignature Language="C#" Value="public static object Int (object Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static object Int(object Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Int(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Int (Number As Object) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ Int(System::Object ^ Number);" />
      <MemberSignature Language="F#" Value="static member Int : obj -&gt; obj" Usage="Microsoft.VisualBasic.Conversion.Int Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="d857f-534">Obligatorio.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d857f-534">Required.</span>
          </span>
          <span data-ttu-id="d857f-535">Número de tipo <see langword="Double" /> o cualquier expresión numérica válida.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d857f-535">A number of type <see langword="Double" /> or any valid numeric expression.</span>
          </span>
          <span data-ttu-id="d857f-536">Si <c>Number</c> contiene <see langword="Nothing" />, se devuelve <see langword="Nothing" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d857f-536">If <c>Number</c> contains <see langword="Nothing" />, <see langword="Nothing" /> is returned.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d857f-537">Devuelve la parte correspondiente al entero de un número.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d857f-537">Return the integer portion of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d857f-538">Devuelve la parte correspondiente al entero de un número.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d857f-538">Return the integer portion of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d857f-539">Tanto el `Int` y `Fix` funciones quitan la parte fraccionaria de `Number` y devolver el valor entero resultante.</span><span class="sxs-lookup"><span data-stu-id="d857f-539">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="d857f-540">La diferencia entre `Int` y `Fix` funciones es que, si `Number` es negativo, `Int` devuelve el primer entero negativo menor o igual a `Number`, mientras que `Fix` devuelve el primer entero negativo mayor o igual que `Number`.</span><span class="sxs-lookup"><span data-stu-id="d857f-540">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="d857f-541">Por ejemplo, `Int` convierte -8,4 en -9, y `Fix` convierte -8,4 en -8.</span><span class="sxs-lookup"><span data-stu-id="d857f-541">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="d857f-542">`Fix(number)` es equivalente a `Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="d857f-542">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d857f-543">Este ejemplo se muestra cómo el `Int` y `Fix` funciones devuelven la parte entera de números.</span><span class="sxs-lookup"><span data-stu-id="d857f-543">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="d857f-544">En el caso de un argumento de número negativo, el `Int` función devuelve el primer entero negativo menor o igual al número; el `Fix` función devuelve el primer entero negativo mayor o igual que el número.</span><span class="sxs-lookup"><span data-stu-id="d857f-544">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="d857f-545">El ejemplo siguiente requiere que especifique `Option Strict Off` porque las conversiones implícitas de tipo `Double` escriba `Integer` no se permiten en `Option Strict On`:</span><span class="sxs-lookup"><span data-stu-id="d857f-545">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="d857f-546">Puede usar el `CInt` función para convertir otros tipos de datos explícitamente al tipo `Integer` con `Option Strict Off`.</span><span class="sxs-lookup"><span data-stu-id="d857f-546">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="d857f-547">Sin embargo, `CInt` redondea al entero más cercano en lugar de truncar la parte fraccionaria de números.</span><span class="sxs-lookup"><span data-stu-id="d857f-547">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="d857f-548">Por ejemplo:</span><span class="sxs-lookup"><span data-stu-id="d857f-548">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="d857f-549">Puede usar el `CInt` función del resultado de una llamada a `Fix` o `Int` para realizar la conversión explícita al entero sin redondear.</span><span class="sxs-lookup"><span data-stu-id="d857f-549">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="d857f-550">Por ejemplo:</span><span class="sxs-lookup"><span data-stu-id="d857f-550">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="d857f-551">Para obtener más información sobre `CInt`, consulte [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span><span class="sxs-lookup"><span data-stu-id="d857f-551">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="d857f-552">No se ha especificado Number.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d857f-552">Number is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="d857f-553">Number no es un tipo numérico.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d857f-553">Number is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <Member MemberName="Int">
      <MemberSignature Language="C#" Value="public static float Int (float Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static float32 Int(float32 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Int(System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Function Int (Number As Single) As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static float Int(float Number);" />
      <MemberSignature Language="F#" Value="static member Int : single -&gt; single" Usage="Microsoft.VisualBasic.Conversion.Int Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="d857f-554">Obligatorio.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d857f-554">Required.</span>
          </span>
          <span data-ttu-id="d857f-555">Número de tipo <see langword="Double" /> o cualquier expresión numérica válida.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d857f-555">A number of type <see langword="Double" /> or any valid numeric expression.</span>
          </span>
          <span data-ttu-id="d857f-556">Si <c>Number</c> contiene <see langword="Nothing" />, se devuelve <see langword="Nothing" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d857f-556">If <c>Number</c> contains <see langword="Nothing" />, <see langword="Nothing" /> is returned.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d857f-557">Devuelve la parte correspondiente al entero de un número.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d857f-557">Return the integer portion of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d857f-558">Devuelve la parte correspondiente al entero de un número.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d857f-558">Return the integer portion of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d857f-559">Tanto el `Int` y `Fix` funciones quitan la parte fraccionaria de `Number` y devolver el valor entero resultante.</span><span class="sxs-lookup"><span data-stu-id="d857f-559">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="d857f-560">La diferencia entre `Int` y `Fix` funciones es que, si `Number` es negativo, `Int` devuelve el primer entero negativo menor o igual a `Number`, mientras que `Fix` devuelve el primer entero negativo mayor o igual que `Number`.</span><span class="sxs-lookup"><span data-stu-id="d857f-560">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="d857f-561">Por ejemplo, `Int` convierte -8,4 en -9, y `Fix` convierte -8,4 en -8.</span><span class="sxs-lookup"><span data-stu-id="d857f-561">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="d857f-562">`Fix(number)` es equivalente a `Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="d857f-562">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d857f-563">Este ejemplo se muestra cómo el `Int` y `Fix` funciones devuelven la parte entera de números.</span><span class="sxs-lookup"><span data-stu-id="d857f-563">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="d857f-564">En el caso de un argumento de número negativo, el `Int` función devuelve el primer entero negativo menor o igual al número; el `Fix` función devuelve el primer entero negativo mayor o igual que el número.</span><span class="sxs-lookup"><span data-stu-id="d857f-564">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="d857f-565">El ejemplo siguiente requiere que especifique `Option Strict Off` porque las conversiones implícitas de tipo `Double` escriba `Integer` no se permiten en `Option Strict On`:</span><span class="sxs-lookup"><span data-stu-id="d857f-565">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="d857f-566">Puede usar el `CInt` función para convertir otros tipos de datos explícitamente al tipo `Integer` con `Option Strict Off`.</span><span class="sxs-lookup"><span data-stu-id="d857f-566">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="d857f-567">Sin embargo, `CInt` redondea al entero más cercano en lugar de truncar la parte fraccionaria de números.</span><span class="sxs-lookup"><span data-stu-id="d857f-567">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="d857f-568">Por ejemplo:</span><span class="sxs-lookup"><span data-stu-id="d857f-568">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="d857f-569">Puede usar el `CInt` función del resultado de una llamada a `Fix` o `Int` para realizar la conversión explícita al entero sin redondear.</span><span class="sxs-lookup"><span data-stu-id="d857f-569">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="d857f-570">Por ejemplo:</span><span class="sxs-lookup"><span data-stu-id="d857f-570">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="d857f-571">Para obtener más información sobre `CInt`, consulte [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span><span class="sxs-lookup"><span data-stu-id="d857f-571">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="d857f-572">No se ha especificado Number.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d857f-572">Number is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="d857f-573">Number no es un tipo numérico.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d857f-573">Number is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Oct">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="d857f-574">Devuelve una cadena que representa el valor octal de un número.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d857f-574">Returns a string representing the octal value of a number.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Oct">
      <MemberSignature Language="C#" Value="public static string Oct (byte Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Oct(unsigned int8 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Oct(System.Byte)" />
      <MemberSignature Language="VB.NET" Value="Public Function Oct (Number As Byte) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Oct(System::Byte Number);" />
      <MemberSignature Language="F#" Value="static member Oct : byte -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Oct Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Byte" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="d857f-575">Obligatorio.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d857f-575">Required.</span>
          </span>
          <span data-ttu-id="d857f-576">Cualquier expresión numérica o expresión de tipo <see langword="String" /> válida.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d857f-576">Any valid numeric expression or <see langword="String" /> expression.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d857f-577">Devuelve una cadena que representa el valor octal de un número.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d857f-577">Returns a string representing the octal value of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d857f-578">Devuelve una cadena que representa el valor octal de un número.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d857f-578">Returns a string representing the octal value of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d857f-579">Si `Number` ya no es un número entero, se redondea al número entero más cercano antes de que se va a evaluar.</span><span class="sxs-lookup"><span data-stu-id="d857f-579">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="d857f-580">Si el número es</span><span class="sxs-lookup"><span data-stu-id="d857f-580">If Number is</span></span>|<span data-ttu-id="d857f-581">Valor octal</span><span class="sxs-lookup"><span data-stu-id="d857f-581">Oct returns</span></span>|  
|-|-|  
|<span data-ttu-id="d857f-582">Empty</span><span class="sxs-lookup"><span data-stu-id="d857f-582">Empty</span></span>|<span data-ttu-id="d857f-583">Cero (0)</span><span class="sxs-lookup"><span data-stu-id="d857f-583">Zero (0)</span></span>|  
|<span data-ttu-id="d857f-584">Cualquier otro número</span><span class="sxs-lookup"><span data-stu-id="d857f-584">Any other number</span></span>|<span data-ttu-id="d857f-585">Hasta 22 caracteres octales</span><span class="sxs-lookup"><span data-stu-id="d857f-585">Up to 22 octal characters</span></span>|  
  
 <span data-ttu-id="d857f-586">Puede representar números octales directamente anteponiendo números en el intervalo correcto con `&O`.</span><span class="sxs-lookup"><span data-stu-id="d857f-586">You can represent octal numbers directly by preceding numbers in the proper range with `&O`.</span></span> <span data-ttu-id="d857f-587">Por ejemplo, `&O10` es la notación octal para 8 decimal.</span><span class="sxs-lookup"><span data-stu-id="d857f-587">For example, `&O10` is the octal notation for decimal 8.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d857f-588">Este ejemplo se usa el `Oct` función para devolver el valor octal de un número.</span><span class="sxs-lookup"><span data-stu-id="d857f-588">This example uses the `Oct` function to return the octal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#30)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="d857f-589">No se especificó <paramref name="Number" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d857f-589">
              <paramref name="Number" /> is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="d857f-590">
            <paramref name="Number" /> no es un tipo numérico.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d857f-590">
              <paramref name="Number" /> is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Hex" />
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <Member MemberName="Oct">
      <MemberSignature Language="C#" Value="public static string Oct (short Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Oct(int16 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Oct(System.Int16)" />
      <MemberSignature Language="VB.NET" Value="Public Function Oct (Number As Short) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Oct(short Number);" />
      <MemberSignature Language="F#" Value="static member Oct : int16 -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Oct Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int16" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="d857f-591">Obligatorio.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d857f-591">Required.</span>
          </span>
          <span data-ttu-id="d857f-592">Cualquier expresión numérica o expresión de tipo <see langword="String" /> válida.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d857f-592">Any valid numeric expression or <see langword="String" /> expression.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d857f-593">Devuelve una cadena que representa el valor octal de un número.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d857f-593">Returns a string representing the octal value of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d857f-594">Devuelve una cadena que representa el valor octal de un número.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d857f-594">Returns a string representing the octal value of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d857f-595">Si `Number` ya no es un número entero, se redondea al número entero más cercano antes de que se va a evaluar.</span><span class="sxs-lookup"><span data-stu-id="d857f-595">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="d857f-596">Si el número es</span><span class="sxs-lookup"><span data-stu-id="d857f-596">If Number is</span></span>|<span data-ttu-id="d857f-597">Valor octal</span><span class="sxs-lookup"><span data-stu-id="d857f-597">Oct returns</span></span>|  
|-|-|  
|<span data-ttu-id="d857f-598">Empty</span><span class="sxs-lookup"><span data-stu-id="d857f-598">Empty</span></span>|<span data-ttu-id="d857f-599">Cero (0)</span><span class="sxs-lookup"><span data-stu-id="d857f-599">Zero (0)</span></span>|  
|<span data-ttu-id="d857f-600">Cualquier otro número</span><span class="sxs-lookup"><span data-stu-id="d857f-600">Any other number</span></span>|<span data-ttu-id="d857f-601">Hasta 22 caracteres octales</span><span class="sxs-lookup"><span data-stu-id="d857f-601">Up to 22 octal characters</span></span>|  
  
 <span data-ttu-id="d857f-602">Puede representar números octales directamente anteponiendo números en el intervalo correcto con `&O`.</span><span class="sxs-lookup"><span data-stu-id="d857f-602">You can represent octal numbers directly by preceding numbers in the proper range with `&O`.</span></span> <span data-ttu-id="d857f-603">Por ejemplo, `&O10` es la notación octal para 8 decimal.</span><span class="sxs-lookup"><span data-stu-id="d857f-603">For example, `&O10` is the octal notation for decimal 8.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d857f-604">Este ejemplo se usa el `Oct` función para devolver el valor octal de un número.</span><span class="sxs-lookup"><span data-stu-id="d857f-604">This example uses the `Oct` function to return the octal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#30)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="d857f-605">No se especificó <paramref name="Number" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d857f-605">
              <paramref name="Number" /> is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="d857f-606">
            <paramref name="Number" /> no es un tipo numérico.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d857f-606">
              <paramref name="Number" /> is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Hex" />
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <Member MemberName="Oct">
      <MemberSignature Language="C#" Value="public static string Oct (int Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Oct(int32 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Oct(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Oct (Number As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Oct(int Number);" />
      <MemberSignature Language="F#" Value="static member Oct : int -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Oct Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="d857f-607">Obligatorio.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d857f-607">Required.</span>
          </span>
          <span data-ttu-id="d857f-608">Cualquier expresión numérica o expresión de tipo <see langword="String" /> válida.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d857f-608">Any valid numeric expression or <see langword="String" /> expression.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d857f-609">Devuelve una cadena que representa el valor octal de un número.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d857f-609">Returns a string representing the octal value of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d857f-610">Devuelve una cadena que representa el valor octal de un número.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d857f-610">Returns a string representing the octal value of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d857f-611">Si `Number` ya no es un número entero, se redondea al número entero más cercano antes de que se va a evaluar.</span><span class="sxs-lookup"><span data-stu-id="d857f-611">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="d857f-612">Si el número es</span><span class="sxs-lookup"><span data-stu-id="d857f-612">If Number is</span></span>|<span data-ttu-id="d857f-613">Valor octal</span><span class="sxs-lookup"><span data-stu-id="d857f-613">Oct returns</span></span>|  
|-|-|  
|<span data-ttu-id="d857f-614">Empty</span><span class="sxs-lookup"><span data-stu-id="d857f-614">Empty</span></span>|<span data-ttu-id="d857f-615">Cero (0)</span><span class="sxs-lookup"><span data-stu-id="d857f-615">Zero (0)</span></span>|  
|<span data-ttu-id="d857f-616">Cualquier otro número</span><span class="sxs-lookup"><span data-stu-id="d857f-616">Any other number</span></span>|<span data-ttu-id="d857f-617">Hasta 22 caracteres octales</span><span class="sxs-lookup"><span data-stu-id="d857f-617">Up to 22 octal characters</span></span>|  
  
 <span data-ttu-id="d857f-618">Puede representar números octales directamente anteponiendo números en el intervalo correcto con `&O`.</span><span class="sxs-lookup"><span data-stu-id="d857f-618">You can represent octal numbers directly by preceding numbers in the proper range with `&O`.</span></span> <span data-ttu-id="d857f-619">Por ejemplo, `&O10` es la notación octal para 8 decimal.</span><span class="sxs-lookup"><span data-stu-id="d857f-619">For example, `&O10` is the octal notation for decimal 8.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d857f-620">Este ejemplo se usa el `Oct` función para devolver el valor octal de un número.</span><span class="sxs-lookup"><span data-stu-id="d857f-620">This example uses the `Oct` function to return the octal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#30)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="d857f-621">No se especificó <paramref name="Number" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d857f-621">
              <paramref name="Number" /> is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="d857f-622">
            <paramref name="Number" /> no es un tipo numérico.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d857f-622">
              <paramref name="Number" /> is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Hex" />
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <Member MemberName="Oct">
      <MemberSignature Language="C#" Value="public static string Oct (long Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Oct(int64 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Oct(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Function Oct (Number As Long) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Oct(long Number);" />
      <MemberSignature Language="F#" Value="static member Oct : int64 -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Oct Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="d857f-623">Obligatorio.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d857f-623">Required.</span>
          </span>
          <span data-ttu-id="d857f-624">Cualquier expresión numérica o expresión de tipo <see langword="String" /> válida.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d857f-624">Any valid numeric expression or <see langword="String" /> expression.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d857f-625">Devuelve una cadena que representa el valor octal de un número.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d857f-625">Returns a string representing the octal value of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d857f-626">Devuelve una cadena que representa el valor octal de un número.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d857f-626">Returns a string representing the octal value of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d857f-627">Si `Number` ya no es un número entero, se redondea al número entero más cercano antes de que se va a evaluar.</span><span class="sxs-lookup"><span data-stu-id="d857f-627">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="d857f-628">Si el número es</span><span class="sxs-lookup"><span data-stu-id="d857f-628">If Number is</span></span>|<span data-ttu-id="d857f-629">Valor octal</span><span class="sxs-lookup"><span data-stu-id="d857f-629">Oct returns</span></span>|  
|-|-|  
|<span data-ttu-id="d857f-630">Empty</span><span class="sxs-lookup"><span data-stu-id="d857f-630">Empty</span></span>|<span data-ttu-id="d857f-631">Cero (0)</span><span class="sxs-lookup"><span data-stu-id="d857f-631">Zero (0)</span></span>|  
|<span data-ttu-id="d857f-632">Cualquier otro número</span><span class="sxs-lookup"><span data-stu-id="d857f-632">Any other number</span></span>|<span data-ttu-id="d857f-633">Hasta 22 caracteres octales</span><span class="sxs-lookup"><span data-stu-id="d857f-633">Up to 22 octal characters</span></span>|  
  
 <span data-ttu-id="d857f-634">Puede representar números octales directamente anteponiendo números en el intervalo correcto con `&O`.</span><span class="sxs-lookup"><span data-stu-id="d857f-634">You can represent octal numbers directly by preceding numbers in the proper range with `&O`.</span></span> <span data-ttu-id="d857f-635">Por ejemplo, `&O10` es la notación octal para 8 decimal.</span><span class="sxs-lookup"><span data-stu-id="d857f-635">For example, `&O10` is the octal notation for decimal 8.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d857f-636">Este ejemplo se usa el `Oct` función para devolver el valor octal de un número.</span><span class="sxs-lookup"><span data-stu-id="d857f-636">This example uses the `Oct` function to return the octal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#30)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="d857f-637">No se especificó <paramref name="Number" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d857f-637">
              <paramref name="Number" /> is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="d857f-638">
            <paramref name="Number" /> no es un tipo numérico.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d857f-638">
              <paramref name="Number" /> is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Hex" />
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <Member MemberName="Oct">
      <MemberSignature Language="C#" Value="public static string Oct (object Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Oct(object Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Oct(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Oct (Number As Object) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Oct(System::Object ^ Number);" />
      <MemberSignature Language="F#" Value="static member Oct : obj -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Oct Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="d857f-639">Obligatorio.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d857f-639">Required.</span>
          </span>
          <span data-ttu-id="d857f-640">Cualquier expresión numérica o expresión de tipo <see langword="String" /> válida.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d857f-640">Any valid numeric expression or <see langword="String" /> expression.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d857f-641">Devuelve una cadena que representa el valor octal de un número.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d857f-641">Returns a string representing the octal value of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d857f-642">Devuelve una cadena que representa el valor octal de un número.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d857f-642">Returns a string representing the octal value of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d857f-643">Si `Number` ya no es un número entero, se redondea al número entero más cercano antes de que se va a evaluar.</span><span class="sxs-lookup"><span data-stu-id="d857f-643">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="d857f-644">Si el número es</span><span class="sxs-lookup"><span data-stu-id="d857f-644">If Number is</span></span>|<span data-ttu-id="d857f-645">Valor octal</span><span class="sxs-lookup"><span data-stu-id="d857f-645">Oct returns</span></span>|  
|-|-|  
|<span data-ttu-id="d857f-646">Empty</span><span class="sxs-lookup"><span data-stu-id="d857f-646">Empty</span></span>|<span data-ttu-id="d857f-647">Cero (0)</span><span class="sxs-lookup"><span data-stu-id="d857f-647">Zero (0)</span></span>|  
|<span data-ttu-id="d857f-648">Cualquier otro número</span><span class="sxs-lookup"><span data-stu-id="d857f-648">Any other number</span></span>|<span data-ttu-id="d857f-649">Hasta 22 caracteres octales</span><span class="sxs-lookup"><span data-stu-id="d857f-649">Up to 22 octal characters</span></span>|  
  
 <span data-ttu-id="d857f-650">Puede representar números octales directamente anteponiendo números en el intervalo correcto con `&O`.</span><span class="sxs-lookup"><span data-stu-id="d857f-650">You can represent octal numbers directly by preceding numbers in the proper range with `&O`.</span></span> <span data-ttu-id="d857f-651">Por ejemplo, `&O10` es la notación octal para 8 decimal.</span><span class="sxs-lookup"><span data-stu-id="d857f-651">For example, `&O10` is the octal notation for decimal 8.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d857f-652">Este ejemplo se usa el `Oct` función para devolver el valor octal de un número.</span><span class="sxs-lookup"><span data-stu-id="d857f-652">This example uses the `Oct` function to return the octal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#30)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="d857f-653">No se especificó <paramref name="Number" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d857f-653">
              <paramref name="Number" /> is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="d857f-654">
            <paramref name="Number" /> no es un tipo numérico.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d857f-654">
              <paramref name="Number" /> is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Hex" />
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <Member MemberName="Oct">
      <MemberSignature Language="C#" Value="public static string Oct (sbyte Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Oct(int8 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Oct(System.SByte)" />
      <MemberSignature Language="VB.NET" Value="Public Function Oct (Number As SByte) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Oct(System::SByte Number);" />
      <MemberSignature Language="F#" Value="static member Oct : sbyte -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Oct Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.SByte" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="d857f-655">Obligatorio.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d857f-655">Required.</span>
          </span>
          <span data-ttu-id="d857f-656">Cualquier expresión numérica o expresión de tipo <see langword="String" /> válida.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d857f-656">Any valid numeric expression or <see langword="String" /> expression.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d857f-657">Devuelve una cadena que representa el valor octal de un número.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d857f-657">Returns a string representing the octal value of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d857f-658">Devuelve una cadena que representa el valor octal de un número.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d857f-658">Returns a string representing the octal value of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d857f-659">Si `Number` ya no es un número entero, se redondea al número entero más cercano antes de que se va a evaluar.</span><span class="sxs-lookup"><span data-stu-id="d857f-659">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="d857f-660">Si el número es</span><span class="sxs-lookup"><span data-stu-id="d857f-660">If Number is</span></span>|<span data-ttu-id="d857f-661">Valor octal</span><span class="sxs-lookup"><span data-stu-id="d857f-661">Oct returns</span></span>|  
|-|-|  
|<span data-ttu-id="d857f-662">Empty</span><span class="sxs-lookup"><span data-stu-id="d857f-662">Empty</span></span>|<span data-ttu-id="d857f-663">Cero (0)</span><span class="sxs-lookup"><span data-stu-id="d857f-663">Zero (0)</span></span>|  
|<span data-ttu-id="d857f-664">Cualquier otro número</span><span class="sxs-lookup"><span data-stu-id="d857f-664">Any other number</span></span>|<span data-ttu-id="d857f-665">Hasta 22 caracteres octales</span><span class="sxs-lookup"><span data-stu-id="d857f-665">Up to 22 octal characters</span></span>|  
  
 <span data-ttu-id="d857f-666">Puede representar números octales directamente anteponiendo números en el intervalo correcto con `&O`.</span><span class="sxs-lookup"><span data-stu-id="d857f-666">You can represent octal numbers directly by preceding numbers in the proper range with `&O`.</span></span> <span data-ttu-id="d857f-667">Por ejemplo, `&O10` es la notación octal para 8 decimal.</span><span class="sxs-lookup"><span data-stu-id="d857f-667">For example, `&O10` is the octal notation for decimal 8.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d857f-668">Este ejemplo se usa el `Oct` función para devolver el valor octal de un número.</span><span class="sxs-lookup"><span data-stu-id="d857f-668">This example uses the `Oct` function to return the octal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#30)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Conversion.Oct(System.Byte)" />
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="d857f-669">No se especificó <paramref name="Number" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d857f-669">
              <paramref name="Number" /> is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="d857f-670">
            <paramref name="Number" /> no es un tipo numérico.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d857f-670">
              <paramref name="Number" /> is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Hex" />
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <Member MemberName="Oct">
      <MemberSignature Language="C#" Value="public static string Oct (ushort Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Oct(unsigned int16 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Oct(System.UInt16)" />
      <MemberSignature Language="VB.NET" Value="Public Function Oct (Number As UShort) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Oct(System::UInt16 Number);" />
      <MemberSignature Language="F#" Value="static member Oct : uint16 -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Oct Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.UInt16" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="d857f-671">Obligatorio.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d857f-671">Required.</span>
          </span>
          <span data-ttu-id="d857f-672">Cualquier expresión numérica o expresión de tipo <see langword="String" /> válida.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d857f-672">Any valid numeric expression or <see langword="String" /> expression.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d857f-673">Devuelve una cadena que representa el valor octal de un número.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d857f-673">Returns a string representing the octal value of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d857f-674">Devuelve una cadena que representa el valor octal de un número.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d857f-674">Returns a string representing the octal value of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d857f-675">Si `Number` ya no es un número entero, se redondea al número entero más cercano antes de que se va a evaluar.</span><span class="sxs-lookup"><span data-stu-id="d857f-675">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="d857f-676">Si el número es</span><span class="sxs-lookup"><span data-stu-id="d857f-676">If Number is</span></span>|<span data-ttu-id="d857f-677">Valor octal</span><span class="sxs-lookup"><span data-stu-id="d857f-677">Oct returns</span></span>|  
|-|-|  
|<span data-ttu-id="d857f-678">Empty</span><span class="sxs-lookup"><span data-stu-id="d857f-678">Empty</span></span>|<span data-ttu-id="d857f-679">Cero (0)</span><span class="sxs-lookup"><span data-stu-id="d857f-679">Zero (0)</span></span>|  
|<span data-ttu-id="d857f-680">Cualquier otro número</span><span class="sxs-lookup"><span data-stu-id="d857f-680">Any other number</span></span>|<span data-ttu-id="d857f-681">Hasta 22 caracteres octales</span><span class="sxs-lookup"><span data-stu-id="d857f-681">Up to 22 octal characters</span></span>|  
  
 <span data-ttu-id="d857f-682">Puede representar números octales directamente anteponiendo números en el intervalo correcto con `&O`.</span><span class="sxs-lookup"><span data-stu-id="d857f-682">You can represent octal numbers directly by preceding numbers in the proper range with `&O`.</span></span> <span data-ttu-id="d857f-683">Por ejemplo, `&O10` es la notación octal para 8 decimal.</span><span class="sxs-lookup"><span data-stu-id="d857f-683">For example, `&O10` is the octal notation for decimal 8.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d857f-684">Este ejemplo se usa el `Oct` función para devolver el valor octal de un número.</span><span class="sxs-lookup"><span data-stu-id="d857f-684">This example uses the `Oct` function to return the octal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#30)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Conversion.Oct(System.Int16)" />
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="d857f-685">No se especificó <paramref name="Number" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d857f-685">
              <paramref name="Number" /> is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="d857f-686">
            <paramref name="Number" /> no es un tipo numérico.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d857f-686">
              <paramref name="Number" /> is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Hex" />
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <Member MemberName="Oct">
      <MemberSignature Language="C#" Value="public static string Oct (uint Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Oct(unsigned int32 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Oct(System.UInt32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Oct (Number As UInteger) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Oct(System::UInt32 Number);" />
      <MemberSignature Language="F#" Value="static member Oct : uint32 -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Oct Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.UInt32" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="d857f-687">Obligatorio.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d857f-687">Required.</span>
          </span>
          <span data-ttu-id="d857f-688">Cualquier expresión numérica o expresión de tipo <see langword="String" /> válida.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d857f-688">Any valid numeric expression or <see langword="String" /> expression.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d857f-689">Devuelve una cadena que representa el valor octal de un número.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d857f-689">Returns a string representing the octal value of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d857f-690">Devuelve una cadena que representa el valor octal de un número.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d857f-690">Returns a string representing the octal value of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d857f-691">Si `Number` ya no es un número entero, se redondea al número entero más cercano antes de que se va a evaluar.</span><span class="sxs-lookup"><span data-stu-id="d857f-691">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="d857f-692">Si el número es</span><span class="sxs-lookup"><span data-stu-id="d857f-692">If Number is</span></span>|<span data-ttu-id="d857f-693">Valor octal</span><span class="sxs-lookup"><span data-stu-id="d857f-693">Oct returns</span></span>|  
|-|-|  
|<span data-ttu-id="d857f-694">Empty</span><span class="sxs-lookup"><span data-stu-id="d857f-694">Empty</span></span>|<span data-ttu-id="d857f-695">Cero (0)</span><span class="sxs-lookup"><span data-stu-id="d857f-695">Zero (0)</span></span>|  
|<span data-ttu-id="d857f-696">Cualquier otro número</span><span class="sxs-lookup"><span data-stu-id="d857f-696">Any other number</span></span>|<span data-ttu-id="d857f-697">Hasta 22 caracteres octales</span><span class="sxs-lookup"><span data-stu-id="d857f-697">Up to 22 octal characters</span></span>|  
  
 <span data-ttu-id="d857f-698">Puede representar números octales directamente anteponiendo números en el intervalo correcto con `&O`.</span><span class="sxs-lookup"><span data-stu-id="d857f-698">You can represent octal numbers directly by preceding numbers in the proper range with `&O`.</span></span> <span data-ttu-id="d857f-699">Por ejemplo, `&O10` es la notación octal para 8 decimal.</span><span class="sxs-lookup"><span data-stu-id="d857f-699">For example, `&O10` is the octal notation for decimal 8.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d857f-700">Este ejemplo se usa el `Oct` función para devolver el valor octal de un número.</span><span class="sxs-lookup"><span data-stu-id="d857f-700">This example uses the `Oct` function to return the octal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#30)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Conversion.Oct(System.Int32)" />
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="d857f-701">No se especificó <paramref name="Number" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d857f-701">
              <paramref name="Number" /> is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="d857f-702">
            <paramref name="Number" /> no es un tipo numérico.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d857f-702">
              <paramref name="Number" /> is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Hex" />
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <Member MemberName="Oct">
      <MemberSignature Language="C#" Value="public static string Oct (ulong Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Oct(unsigned int64 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Oct(System.UInt64)" />
      <MemberSignature Language="VB.NET" Value="Public Function Oct (Number As ULong) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Oct(System::UInt64 Number);" />
      <MemberSignature Language="F#" Value="static member Oct : uint64 -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Oct Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.UInt64" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="d857f-703">Obligatorio.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d857f-703">Required.</span>
          </span>
          <span data-ttu-id="d857f-704">Cualquier expresión numérica o expresión de tipo <see langword="String" /> válida.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d857f-704">Any valid numeric expression or <see langword="String" /> expression.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d857f-705">Devuelve una cadena que representa el valor octal de un número.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d857f-705">Returns a string representing the octal value of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d857f-706">Devuelve una cadena que representa el valor octal de un número.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d857f-706">Returns a string representing the octal value of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d857f-707">Si `Number` ya no es un número entero, se redondea al número entero más cercano antes de que se va a evaluar.</span><span class="sxs-lookup"><span data-stu-id="d857f-707">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="d857f-708">Si el número es</span><span class="sxs-lookup"><span data-stu-id="d857f-708">If Number is</span></span>|<span data-ttu-id="d857f-709">Valor octal</span><span class="sxs-lookup"><span data-stu-id="d857f-709">Oct returns</span></span>|  
|-|-|  
|<span data-ttu-id="d857f-710">Empty</span><span class="sxs-lookup"><span data-stu-id="d857f-710">Empty</span></span>|<span data-ttu-id="d857f-711">Cero (0)</span><span class="sxs-lookup"><span data-stu-id="d857f-711">Zero (0)</span></span>|  
|<span data-ttu-id="d857f-712">Cualquier otro número</span><span class="sxs-lookup"><span data-stu-id="d857f-712">Any other number</span></span>|<span data-ttu-id="d857f-713">Hasta 22 caracteres octales</span><span class="sxs-lookup"><span data-stu-id="d857f-713">Up to 22 octal characters</span></span>|  
  
 <span data-ttu-id="d857f-714">Puede representar números octales directamente anteponiendo números en el intervalo correcto con `&O`.</span><span class="sxs-lookup"><span data-stu-id="d857f-714">You can represent octal numbers directly by preceding numbers in the proper range with `&O`.</span></span> <span data-ttu-id="d857f-715">Por ejemplo, `&O10` es la notación octal para 8 decimal.</span><span class="sxs-lookup"><span data-stu-id="d857f-715">For example, `&O10` is the octal notation for decimal 8.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d857f-716">Este ejemplo se usa el `Oct` función para devolver el valor octal de un número.</span><span class="sxs-lookup"><span data-stu-id="d857f-716">This example uses the `Oct` function to return the octal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#30)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Conversion.Oct(System.Int64)" />
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="d857f-717">No se especificó <paramref name="Number" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d857f-717">
              <paramref name="Number" /> is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="d857f-718">
            <paramref name="Number" /> no es un tipo numérico.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d857f-718">
              <paramref name="Number" /> is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Hex" />
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <Member MemberName="Str">
      <MemberSignature Language="C#" Value="public static string Str (object Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Str(object Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Str(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Str (Number As Object) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Str(System::Object ^ Number);" />
      <MemberSignature Language="F#" Value="static member Str : obj -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Str Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="d857f-719">Obligatorio.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d857f-719">Required.</span>
          </span>
          <span data-ttu-id="d857f-720">
            <see langword="Object" /> que contiene cualquier expresión numérica válida.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d857f-720">An <see langword="Object" /> containing any valid numeric expression.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d857f-721">Devuelve una representación de tipo <see langword="String" /> de un número.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d857f-721">Returns a <see langword="String" /> representation of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d857f-722">Devuelve una representación de tipo <see langword="String" /> de un número.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d857f-722">Returns a <see langword="String" /> representation of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d857f-723">Cuando los números se convierten en cadenas, un espacio inicial siempre se reserva para el inicio de sesión de `Number`.</span><span class="sxs-lookup"><span data-stu-id="d857f-723">When numbers are converted to strings, a leading space is always reserved for the sign of `Number`.</span></span> <span data-ttu-id="d857f-724">Si `Number` es positivo, la cadena devuelta contiene un espacio inicial y el signo más es implícito.</span><span class="sxs-lookup"><span data-stu-id="d857f-724">If `Number` is positive, the returned string contains a leading space, and the plus sign is implied.</span></span> <span data-ttu-id="d857f-725">Un número negativo incluirá el signo menos (-) y ningún espacio inicial.</span><span class="sxs-lookup"><span data-stu-id="d857f-725">A negative number will include the minus sign (-) and no leading space.</span></span>  
  
 <span data-ttu-id="d857f-726">Use el `Format` función para convertir valores numéricos que desee con formato como fechas, horas o moneda u otros formatos definidos por el usuario.</span><span class="sxs-lookup"><span data-stu-id="d857f-726">Use the `Format` function to convert numeric values you want formatted as dates, times, or currency or in other user-defined formats.</span></span> <span data-ttu-id="d857f-727">A diferencia de la `Str` función, el `Format` función no incluye un espacio inicial para el inicio de sesión de `Number`.</span><span class="sxs-lookup"><span data-stu-id="d857f-727">Unlike the `Str` function, the `Format` function does not include a leading space for the sign of `Number`.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="d857f-728">El `Str` función reconoce solo el período (`.`) como separador decimal válido.</span><span class="sxs-lookup"><span data-stu-id="d857f-728">The `Str` function recognizes only the period (`.`) as a valid decimal separator.</span></span> <span data-ttu-id="d857f-729">Si se utilizan separadores decimales diferentes (por ejemplo, en aplicaciones internacionales), utilice el `CStr` o `Format` funciones para convertir un número en una cadena.</span><span class="sxs-lookup"><span data-stu-id="d857f-729">If different decimal separators are used (for example, in international applications), use the `CStr` or `Format` functions to convert a number to a string.</span></span> <span data-ttu-id="d857f-730">Para obtener la representación de cadena de un número en una referencia cultural determinada, use el número `ToString(IFormatProvider)` método.</span><span class="sxs-lookup"><span data-stu-id="d857f-730">To get the string representation of a number in a particular culture, use the number's `ToString(IFormatProvider)` method.</span></span> <span data-ttu-id="d857f-731">Por ejemplo, usar <xref:System.Double.ToString%2A> al convertir un valor de tipo `Double` en una cadena.</span><span class="sxs-lookup"><span data-stu-id="d857f-731">For example, use <xref:System.Double.ToString%2A> when converting a value of type `Double` to a string.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d857f-732">Este ejemplo se usa el `Str` función devuelva un `String` representación de un número.</span><span class="sxs-lookup"><span data-stu-id="d857f-732">This example uses the `Str` function to return a `String` representation of a number.</span></span> <span data-ttu-id="d857f-733">Cuando un número positivo se convierte en una cadena, un espacio inicial siempre está reservado para su inicio de sesión.</span><span class="sxs-lookup"><span data-stu-id="d857f-733">When a positive number is converted to a string, a leading space is always reserved for its sign.</span></span>  
  
 [!code-vb[VbVbalrStrings#1](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="d857f-734">No se especificó <paramref name="Number" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d857f-734">
              <paramref name="Number" /> is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidCastException">
          <span data-ttu-id="d857f-735">
            <paramref name="Number" /> no es un tipo numérico.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d857f-735">
              <paramref name="Number" /> is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Format(System.Object,System.String)" />
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Val" />
        <altmember cref="T:System.ArgumentNullException" />
        <altmember cref="T:System.InvalidCastException" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Val">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="d857f-736">Devuelve los números contenidos en una cadena como un valor numérico del tipo apropiado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d857f-736">Returns the numbers contained in a string as a numeric value of appropriate type.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Val">
      <MemberSignature Language="C#" Value="public static int Val (char Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Val(char Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Val(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Function Val (Expression As Char) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Val(char Expression);" />
      <MemberSignature Language="F#" Value="static member Val : char -&gt; int" Usage="Microsoft.VisualBasic.Conversion.Val Expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="Expression">
          <span data-ttu-id="d857f-737">Obligatorio.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d857f-737">Required.</span>
          </span>
          <span data-ttu-id="d857f-738">Cualquier expresión <see langword="String" /> válida, variable <see langword="Object" /> o valor <see langword="Char" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d857f-738">Any valid <see langword="String" /> expression, <see langword="Object" /> variable, or <see langword="Char" /> value.</span>
          </span>
          <span data-ttu-id="d857f-739">Si <c>Expression</c> es de tipo <see langword="Object" />, su valor debe ser convertible a <see langword="String" /> o se produce un error <see cref="T:System.ArgumentException" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d857f-739">If <c>Expression</c> is of type <see langword="Object" />, its value must be convertible to <see langword="String" /> or an <see cref="T:System.ArgumentException" /> error occurs.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d857f-740">Devuelve los números contenidos en una cadena como un valor numérico del tipo apropiado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d857f-740">Returns the numbers contained in a string as a numeric value of appropriate type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d857f-741">Devuelve los números contenidos en una cadena como un valor numérico del tipo apropiado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d857f-741">Returns the numbers contained in a string as a numeric value of appropriate type.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d857f-742">El `Val` función deja de leer la cadena en el primer carácter que no se reconoce como parte de un número.</span><span class="sxs-lookup"><span data-stu-id="d857f-742">The `Val` function stops reading the string at the first character it cannot recognize as part of a number.</span></span> <span data-ttu-id="d857f-743">Símbolos y caracteres que a menudo se consideran parte de los valores numéricos, como signos de dólar y comas, no se reconocen.</span><span class="sxs-lookup"><span data-stu-id="d857f-743">Symbols and characters that are often considered parts of numeric values, such as dollar signs and commas, are not recognized.</span></span> <span data-ttu-id="d857f-744">Sin embargo, la función reconoce los prefijos de base `&O` (para octal) y `&H` (de hexadecimal).</span><span class="sxs-lookup"><span data-stu-id="d857f-744">However, the function recognizes the radix prefixes `&O` (for octal) and `&H` (for hexadecimal).</span></span> <span data-ttu-id="d857f-745">Caracteres de avance de línea, tabulaciones y espacios en blanco se quitan del argumento.</span><span class="sxs-lookup"><span data-stu-id="d857f-745">Blanks, tabs, and linefeed characters are stripped from the argument.</span></span>  
  
 <span data-ttu-id="d857f-746">La siguiente llamada devuelve el valor 1615198.</span><span class="sxs-lookup"><span data-stu-id="d857f-746">The following call returns the value 1615198.</span></span>  
  
```  
  
Val(" 1615 198th Street N.E.")   
```  
  
 <span data-ttu-id="d857f-747">La siguiente llamada devuelve el valor decimal -1.</span><span class="sxs-lookup"><span data-stu-id="d857f-747">The following call returns the decimal value -1.</span></span>  
  
```  
  
Val("&HFFFF")   
```  
  
> [!NOTE]
>  <span data-ttu-id="d857f-748">El `Val` función reconoce solo el período (`.`) como separador decimal válido.</span><span class="sxs-lookup"><span data-stu-id="d857f-748">The `Val` function recognizes only the period (`.`) as a valid decimal separator.</span></span> <span data-ttu-id="d857f-749">Cuando se utilizan separadores decimales diferentes, como en aplicaciones internacionales, utilice `CDbl` o `CInt` en su lugar para convertir una cadena en un número.</span><span class="sxs-lookup"><span data-stu-id="d857f-749">When different decimal separators are used, as in international applications, use `CDbl` or `CInt` instead to convert a string to a number.</span></span> <span data-ttu-id="d857f-750">Para convertir la representación de cadena de un número en una referencia cultural determinada a un valor numérico, use el tipo numérico `Parse(String, IFormatProvider)` método.</span><span class="sxs-lookup"><span data-stu-id="d857f-750">To convert the string representation of a number in a particular culture to a numeric value, use the numeric type's `Parse(String, IFormatProvider)` method.</span></span> <span data-ttu-id="d857f-751">Por ejemplo, usar <xref:System.Double.Parse%2A?displayProperty=nameWithType> al convertir una cadena en un `Double`.</span><span class="sxs-lookup"><span data-stu-id="d857f-751">For example, use <xref:System.Double.Parse%2A?displayProperty=nameWithType> when converting a string to a `Double`.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="d857f-752">Un <xref:System.InvalidCastException> excepción podría producirse en respuesta a determinados formatos de número poco habituales.</span><span class="sxs-lookup"><span data-stu-id="d857f-752">An <xref:System.InvalidCastException> exception might be raised in response to certain uncommon number formats.</span></span> <span data-ttu-id="d857f-753">Por ejemplo, el código siguiente genera esta excepción.</span><span class="sxs-lookup"><span data-stu-id="d857f-753">For example, the following code raises this exception.</span></span>  
>   
>  `' These examples cause run-time errors.`  
>   
>  `'Console.WriteLine(Val("1.34%"))`  
>   
>  `'Console.WriteLine(Val("1.34&"))`  
>   
>  <span data-ttu-id="d857f-754">El conflicto entre el número con formato como un `Double` y `Integer` y `Long` caracteres de tipo podrían ser el compilador detectará si no estuviera contenida en una cadena.</span><span class="sxs-lookup"><span data-stu-id="d857f-754">The conflict between the number formatted as a `Double` and the `Integer` and `Long` type characters would be caught by the compiler if it were not contained in a string.</span></span>  
>   
>  `' These examples cause compiler errors.`  
>   
>  `'Dim m = 1.34%`  
>   
>  `'Dim n = 1.34&`  
  
   
  
## Examples  
 <span data-ttu-id="d857f-755">En el ejemplo siguiente se usa el `Val` función para devolver los números contenidos en cada cadena.</span><span class="sxs-lookup"><span data-stu-id="d857f-755">The following example uses the `Val` function to return the numbers contained in each string.</span></span> <span data-ttu-id="d857f-756">`Val` detiene la conversión en el primer carácter que no se puede interpretar como un dígito numérico, modificador numérico, puntuación numérica o espacio en blanco.</span><span class="sxs-lookup"><span data-stu-id="d857f-756">`Val` stops converting at the first character that cannot be interpreted as a numeric digit, numeric modifier, numeric punctuation, or white space.</span></span>  
  
 [!code-vb[VbVbalrFunctions#54](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#54)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException">
          <span data-ttu-id="d857f-757">
            <paramref name="InputStr" /> es demasiado grande.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d857f-757">
              <paramref name="InputStr" /> is too large.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="d857f-758">
            <paramref name="Expression" /> es una expresión de tipo <see langword="Object" /> que no es convertible a <see langword="String" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d857f-758">
              <paramref name="Expression" /> is an <see langword="Object" /> type expression that is not convertible to <see langword="String" />.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.Conversion.Str(System.Object)" />
        <altmember cref="T:System.OverflowException" />
        <altmember cref="T:System.InvalidCastException" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <Member MemberName="Val">
      <MemberSignature Language="C#" Value="public static double Val (object Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static float64 Val(object Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Val(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Val (Expression As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double Val(System::Object ^ Expression);" />
      <MemberSignature Language="F#" Value="static member Val : obj -&gt; double" Usage="Microsoft.VisualBasic.Conversion.Val Expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Expression">
          <span data-ttu-id="d857f-759">Obligatorio.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d857f-759">Required.</span>
          </span>
          <span data-ttu-id="d857f-760">Cualquier expresión <see langword="String" /> válida, variable <see langword="Object" /> o valor <see langword="Char" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d857f-760">Any valid <see langword="String" /> expression, <see langword="Object" /> variable, or <see langword="Char" /> value.</span>
          </span>
          <span data-ttu-id="d857f-761">Si <c>Expression</c> es de tipo <see langword="Object" />, su valor debe ser convertible a <see langword="String" /> o se produce un error <see cref="T:System.ArgumentException" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d857f-761">If <c>Expression</c> is of type <see langword="Object" />, its value must be convertible to <see langword="String" /> or an <see cref="T:System.ArgumentException" /> error occurs.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d857f-762">Devuelve los números contenidos en una cadena como un valor numérico del tipo apropiado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d857f-762">Returns the numbers contained in a string as a numeric value of appropriate type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d857f-763">Devuelve los números contenidos en una cadena como un valor numérico del tipo apropiado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d857f-763">Returns the numbers contained in a string as a numeric value of appropriate type.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d857f-764">El `Val` función deja de leer la cadena en el primer carácter que no se reconoce como parte de un número.</span><span class="sxs-lookup"><span data-stu-id="d857f-764">The `Val` function stops reading the string at the first character it cannot recognize as part of a number.</span></span> <span data-ttu-id="d857f-765">Símbolos y caracteres que a menudo se consideran parte de los valores numéricos, como signos de dólar y comas, no se reconocen.</span><span class="sxs-lookup"><span data-stu-id="d857f-765">Symbols and characters that are often considered parts of numeric values, such as dollar signs and commas, are not recognized.</span></span> <span data-ttu-id="d857f-766">Sin embargo, la función reconoce los prefijos de base `&O` (para octal) y `&H` (de hexadecimal).</span><span class="sxs-lookup"><span data-stu-id="d857f-766">However, the function recognizes the radix prefixes `&O` (for octal) and `&H` (for hexadecimal).</span></span> <span data-ttu-id="d857f-767">Caracteres de avance de línea, tabulaciones y espacios en blanco se quitan del argumento.</span><span class="sxs-lookup"><span data-stu-id="d857f-767">Blanks, tabs, and linefeed characters are removed from the argument.</span></span>  
  
 <span data-ttu-id="d857f-768">La siguiente llamada devuelve el valor 1234123.</span><span class="sxs-lookup"><span data-stu-id="d857f-768">The following call returns the value 1234123.</span></span>  
  
```  
  
Val(" 1234 123th Street N.E.")   
```  
  
 <span data-ttu-id="d857f-769">La siguiente llamada devuelve el valor decimal -1.</span><span class="sxs-lookup"><span data-stu-id="d857f-769">The following call returns the decimal value -1.</span></span>  
  
```  
  
Val("&HFFFF")   
```  
  
> [!NOTE]
>  <span data-ttu-id="d857f-770">El `Val` función reconoce solo el período (`.`) como separador decimal válido.</span><span class="sxs-lookup"><span data-stu-id="d857f-770">The `Val` function recognizes only the period (`.`) as a valid decimal separator.</span></span> <span data-ttu-id="d857f-771">Cuando se utilizan otros separadores decimales, como en aplicaciones internacionales, utilice `CDbl` o `CInt` en su lugar para convertir una cadena en un número.</span><span class="sxs-lookup"><span data-stu-id="d857f-771">When other decimal separators are used, as in international applications, use `CDbl` or `CInt` instead to convert a string to a number.</span></span> <span data-ttu-id="d857f-772">Para convertir la representación de cadena de un número en una referencia cultural determinada a un valor numérico, use el tipo numérico `Parse(String, IFormatProvider)` método.</span><span class="sxs-lookup"><span data-stu-id="d857f-772">To convert the string representation of a number in a particular culture to a numeric value, use the numeric type's `Parse(String, IFormatProvider)` method.</span></span> <span data-ttu-id="d857f-773">Por ejemplo, usar <xref:System.Double.Parse%2A?displayProperty=nameWithType> al convertir una cadena en un `Double`.</span><span class="sxs-lookup"><span data-stu-id="d857f-773">For example, use <xref:System.Double.Parse%2A?displayProperty=nameWithType> when converting a string to a `Double`.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="d857f-774">Un <xref:System.InvalidCastException> excepción podría producirse en respuesta a determinados formatos de número poco habituales.</span><span class="sxs-lookup"><span data-stu-id="d857f-774">An <xref:System.InvalidCastException> exception might be raised in response to certain uncommon number formats.</span></span> <span data-ttu-id="d857f-775">Por ejemplo, el código siguiente genera esta excepción.</span><span class="sxs-lookup"><span data-stu-id="d857f-775">For example, the following code raises this exception.</span></span>  
>   
>  `' These examples cause run-time errors.`  
>   
>  `'Console.WriteLine(Val("1.34%"))`  
>   
>  `'Console.WriteLine(Val("1.34&"))`  
>   
>  <span data-ttu-id="d857f-776">El conflicto entre el número con formato como un `Double` y `Integer` y `Long` caracteres de tipo se hubiese capturados por el compilador si el conflicto no se incluían en cadenas.</span><span class="sxs-lookup"><span data-stu-id="d857f-776">The conflict between the number formatted as a `Double` and the `Integer` and `Long` type characters would be caught by the compiler if the conflict were not contained in strings.</span></span>  
>   
>  `' These examples cause compiler errors.`  
>   
>  `'Dim m = 1.34%`  
>   
>  `'Dim n = 1.34&`  
  
   
  
## Examples  
 <span data-ttu-id="d857f-777">En el ejemplo siguiente se usa el `Val` función para devolver los números contenidos en cada cadena.</span><span class="sxs-lookup"><span data-stu-id="d857f-777">The following example uses the `Val` function to return the numbers contained in each string.</span></span> <span data-ttu-id="d857f-778">`Val` detiene la conversión en el primer carácter que no se puede interpretar como un dígito numérico, modificador numérico, puntuación numérica o espacio en blanco.</span><span class="sxs-lookup"><span data-stu-id="d857f-778">`Val` stops converting at the first character that cannot be interpreted as a numeric digit, numeric modifier, numeric punctuation, or white space.</span></span>  
  
 [!code-vb[VbVbalrFunctions#54](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#54)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException">
          <span data-ttu-id="d857f-779">
            <paramref name="InputStr" /> es demasiado grande.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d857f-779">
              <paramref name="InputStr" /> is too large.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="d857f-780">
            <paramref name="Expression" /> es una expresión de tipo <see langword="Object" /> que no es convertible a <see langword="String" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d857f-780">
              <paramref name="Expression" /> is an <see langword="Object" /> type expression that is not convertible to <see langword="String" />.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.Conversion.Str(System.Object)" />
        <altmember cref="T:System.OverflowException" />
        <altmember cref="T:System.InvalidCastException" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <Member MemberName="Val">
      <MemberSignature Language="C#" Value="public static double Val (string InputStr);" />
      <MemberSignature Language="ILAsm" Value=".method public static float64 Val(string InputStr) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Val(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function Val (InputStr As String) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double Val(System::String ^ InputStr);" />
      <MemberSignature Language="F#" Value="static member Val : string -&gt; double" Usage="Microsoft.VisualBasic.Conversion.Val InputStr" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="InputStr" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="InputStr">
          <span data-ttu-id="d857f-781">Obligatorio.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d857f-781">Required.</span>
          </span>
          <span data-ttu-id="d857f-782">Cualquier expresión <see langword="String" /> válida, variable <see langword="Object" /> o valor <see langword="Char" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d857f-782">Any valid <see langword="String" /> expression, <see langword="Object" /> variable, or <see langword="Char" /> value.</span>
          </span>
          <span data-ttu-id="d857f-783">Si <c>Expression</c> es de tipo <see langword="Object" />, su valor debe ser convertible a <see langword="String" /> o se produce un error <see cref="T:System.ArgumentException" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d857f-783">If <c>Expression</c> is of type <see langword="Object" />, its value must be convertible to <see langword="String" /> or an <see cref="T:System.ArgumentException" /> error occurs.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d857f-784">Devuelve los números contenidos en una cadena como un valor numérico del tipo apropiado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d857f-784">Returns the numbers contained in a string as a numeric value of appropriate type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d857f-785">Devuelve los números contenidos en una cadena como un valor numérico del tipo apropiado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d857f-785">Returns the numbers contained in a string as a numeric value of appropriate type.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d857f-786">El `Val` función deja de leer la cadena en el primer carácter que no se reconoce como parte de un número.</span><span class="sxs-lookup"><span data-stu-id="d857f-786">The `Val` function stops reading the string at the first character it cannot recognize as part of a number.</span></span> <span data-ttu-id="d857f-787">Símbolos y caracteres que a menudo se consideran parte de los valores numéricos, como signos de dólar y comas, no se reconocen.</span><span class="sxs-lookup"><span data-stu-id="d857f-787">Symbols and characters that are often considered parts of numeric values, such as dollar signs and commas, are not recognized.</span></span> <span data-ttu-id="d857f-788">Sin embargo, la función reconoce los prefijos de base `&O` (para octal) y `&H` (de hexadecimal).</span><span class="sxs-lookup"><span data-stu-id="d857f-788">However, the function recognizes the radix prefixes `&O` (for octal) and `&H` (for hexadecimal).</span></span> <span data-ttu-id="d857f-789">Caracteres de avance de línea, tabulaciones y espacios en blanco se quitan del argumento.</span><span class="sxs-lookup"><span data-stu-id="d857f-789">Blanks, tabs, and linefeed characters are removed from the argument.</span></span>  
  
 <span data-ttu-id="d857f-790">La siguiente llamada devuelve el valor 1234123.</span><span class="sxs-lookup"><span data-stu-id="d857f-790">The following call returns the value 1234123.</span></span>  
  
```  
  
Val(" 1234 123th Street N.E.")   
```  
  
 <span data-ttu-id="d857f-791">La siguiente llamada devuelve el valor decimal -1.</span><span class="sxs-lookup"><span data-stu-id="d857f-791">The following call returns the decimal value -1.</span></span>  
  
```  
  
Val("&HFFFF")   
```  
  
> [!NOTE]
>  <span data-ttu-id="d857f-792">El `Val` función reconoce solo el período (`.`) como separador decimal válido.</span><span class="sxs-lookup"><span data-stu-id="d857f-792">The `Val` function recognizes only the period (`.`) as a valid decimal separator.</span></span> <span data-ttu-id="d857f-793">Cuando se utilizan otros separadores decimales, como en aplicaciones internacionales, utilice `CDbl` o `CInt` en su lugar para convertir una cadena en un número.</span><span class="sxs-lookup"><span data-stu-id="d857f-793">When other decimal separators are used, as in international applications, use `CDbl` or `CInt` instead to convert a string to a number.</span></span> <span data-ttu-id="d857f-794">Para convertir la representación de cadena de un número en una referencia cultural determinada a un valor numérico, use el tipo numérico `Parse(String, IFormatProvider)` método.</span><span class="sxs-lookup"><span data-stu-id="d857f-794">To convert the string representation of a number in a particular culture to a numeric value, use the numeric type's `Parse(String, IFormatProvider)` method.</span></span> <span data-ttu-id="d857f-795">Por ejemplo, usar <xref:System.Double.Parse%2A?displayProperty=nameWithType> al convertir una cadena en un `Double`.</span><span class="sxs-lookup"><span data-stu-id="d857f-795">For example, use <xref:System.Double.Parse%2A?displayProperty=nameWithType> when converting a string to a `Double`.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="d857f-796">Un <xref:System.InvalidCastException> excepción podría producirse en respuesta a determinados formatos de número poco habituales.</span><span class="sxs-lookup"><span data-stu-id="d857f-796">An <xref:System.InvalidCastException> exception might be raised in response to certain uncommon number formats.</span></span> <span data-ttu-id="d857f-797">Por ejemplo, el código siguiente genera esta excepción.</span><span class="sxs-lookup"><span data-stu-id="d857f-797">For example, the following code raises this exception.</span></span>  
>   
>  `' These examples cause run-time errors.`  
>   
>  `'Console.WriteLine(Val("1.34%"))`  
>   
>  `'Console.WriteLine(Val("1.34&"))`  
>   
>  <span data-ttu-id="d857f-798">El conflicto entre el número con formato como un `Double` y `Integer` y `Long` caracteres de tipo se hubiese capturados por el compilador si el conflicto no se incluían en cadenas.</span><span class="sxs-lookup"><span data-stu-id="d857f-798">The conflict between the number formatted as a `Double` and the `Integer` and `Long` type characters would be caught by the compiler if the conflict were not contained in strings.</span></span>  
>   
>  `' These examples cause compiler errors.`  
>   
>  `'Dim m = 1.34%`  
>   
>  `'Dim n = 1.34&`  
  
   
  
## Examples  
 <span data-ttu-id="d857f-799">En el ejemplo siguiente se usa el `Val` función para devolver los números contenidos en cada cadena.</span><span class="sxs-lookup"><span data-stu-id="d857f-799">The following example uses the `Val` function to return the numbers contained in each string.</span></span> <span data-ttu-id="d857f-800">`Val` detiene la conversión en el primer carácter que no se puede interpretar como un dígito numérico, modificador numérico, puntuación numérica o espacio en blanco.</span><span class="sxs-lookup"><span data-stu-id="d857f-800">`Val` stops converting at the first character that cannot be interpreted as a numeric digit, numeric modifier, numeric punctuation, or white space.</span></span>  
  
 [!code-vb[VbVbalrFunctions#54](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#54)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException">
          <span data-ttu-id="d857f-801">
            <paramref name="InputStr" /> es demasiado grande.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d857f-801">
              <paramref name="InputStr" /> is too large.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="d857f-802">
            <paramref name="Expression" /> es una expresión de tipo <see langword="Object" /> que no es convertible a <see langword="String" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d857f-802">
              <paramref name="Expression" /> is an <see langword="Object" /> type expression that is not convertible to <see langword="String" />.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.Conversion.Str(System.Object)" />
        <altmember cref="T:System.OverflowException" />
        <altmember cref="T:System.InvalidCastException" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
  </Members>
</Type>