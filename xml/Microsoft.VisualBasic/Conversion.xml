<Type Name="Conversion" FullName="Microsoft.VisualBasic.Conversion">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="57baf5640b5568751b33197c31abe05cf23b1641" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="es-ES" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30351319" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class Conversion" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed Conversion extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.VisualBasic.Conversion" />
  <TypeSignature Language="VB.NET" Value="Public Module Conversion" />
  <TypeSignature Language="C++ CLI" Value="public ref class Conversion sealed" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.VisualBasic</AssemblyName>
    <AssemblyVersion>10.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>Microsoft.VisualBasic.CompilerServices.StandardModule</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>El módulo <see langword="Conversion" /> contiene los procedimientos utilizados para realizar diversas operaciones de conversión.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este módulo admite las palabras clave del lenguaje Visual Basic y miembros de la biblioteca de tiempo de ejecución que convierten a números decimales a otras bases, números en cadenas, cadenas en números y datos de un tipo a otro.  
  
   
  
## Examples  
 Este ejemplo se utiliza la `Hex` función para devolver el valor hexadecimal de un número.  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="CTypeDynamic">
      <MemberSignature Language="C#" Value="public static object CTypeDynamic (object Expression, Type TargetType);" />
      <MemberSignature Language="ILAsm" Value=".method public static object CTypeDynamic(object Expression, class System.Type TargetType) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.CTypeDynamic(System.Object,System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Function CTypeDynamic (Expression As Object, TargetType As Type) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ CTypeDynamic(System::Object ^ Expression, Type ^ TargetType);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Object" />
        <Parameter Name="TargetType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="Expression">Objeto que se va a convertir.</param>
        <param name="TargetType">Tipo al que se va a convertir el objeto.</param>
        <summary>Convierte un objeto al tipo especificado.</summary>
        <returns>Objeto cuyo tipo en tiempo de ejecución es el tipo de destino solicitado.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El `CTypeDynamic` método convierte el objeto pasado como el `Expression` parámetro con el tipo especificado por el `TargetType` parámetro. Si el objeto es un objeto dinámico, el `CTypeDynamic` método aplica a las conversiones dinámicas disponibles.  
  
 El `CTypeDynamic` método aplica a las conversiones dinámicas de acuerdo con la semántica de conversión definida por el propio objeto. Si un objeto dinámico se hereda de <xref:System.Dynamic.DynamicObject>, el `CTypeDynamic` método primero intenta realizar la conversión mediante una conversión definida por el usuario y estática. Si se produce un error en la conversión definida por el usuario, estática, el `CTypeDynamic` método intenta realizar la conversión usando las conversiones dinámicas. Si implementa un objeto dinámico <xref:System.Dynamic.IDynamicMetaObjectProvider>, el `CTypeDynamic` método da prioridad a las conversiones dinámicas sobre las conversiones estáticas definidas por el usuario.  
  
   
  
## Examples  
 En el ejemplo siguiente se usa el `CTypeDynamic` método para convertir un objeto dinámico en una cadena mediante el uso de la conversión definida por el objeto dinámico.  
  
```vb  
Imports System.Dynamic  
  
Module Module1  
    Sub Main()  
        Dim dyn As Object = New SampleDynamicObject  
        Dim sampleString = CTypeDynamic(dyn, GetType(String))  
        Console.WriteLine(sampleString)  
    End Sub  
End Module  
  
Class SampleDynamicObject  
    Inherits DynamicObject  
  
    Public Overrides Function TryConvert(ByVal binder As ConvertBinder,  
                                         ByRef result As Object) As Boolean  
  
        If binder.Type = GetType(String) Then  
            result = "Sample String"  
            Return True  
        End If  
  
        Return False  
    End Function  
End Class  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Dynamic.DynamicObject.TryConvert(System.Dynamic.ConvertBinder,System.Object@)" />
        <altmember cref="M:System.Dynamic.DynamicMetaObject.BindConvert(System.Dynamic.ConvertBinder)" />
        <altmember cref="M:Microsoft.VisualBasic.Conversion.CTypeDynamic``1(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="CTypeDynamic&lt;TargetType&gt;">
      <MemberSignature Language="C#" Value="public static TargetType CTypeDynamic&lt;TargetType&gt; (object Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static !!TargetType CTypeDynamic&lt;TargetType&gt;(object Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.CTypeDynamic``1(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function CTypeDynamic(Of TargetType) (Expression As Object) As TargetType" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TargetType&gt;&#xA; static TargetType CTypeDynamic(System::Object ^ Expression);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TargetType</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TargetType" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="Expression" Type="System.Object" />
      </Parameters>
      <Docs>
        <typeparam name="TargetType">Tipo al que se va a convertir el objeto.</typeparam>
        <param name="Expression">Objeto que se va a convertir.</param>
        <summary>Convierte un objeto al tipo genérico especificado.</summary>
        <returns>Objeto con tipos estáticos como el tipo genérico solicitado.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El `CTypeDynamic` método convierte el objeto pasado como el `Expression` parámetro con el tipo especificado por el tipo del parámetro genérico. Si el objeto es un objeto dinámico, el `CTypeDynamic` método aplica a las conversiones dinámicas disponibles.  
  
 El `CTypeDynamic` método aplica a las conversiones dinámicas de acuerdo con la semántica de conversión definida por el propio objeto. Si un objeto dinámico se hereda de <xref:System.Dynamic.DynamicObject>, el `CTypeDynamic` método primero intenta realizar la conversión mediante una conversión definida por el usuario y estática. Si se produce un error en la conversión definida por el usuario, estática, el `CTypeDynamic` método intenta realizar la conversión usando las conversiones dinámicas. Si implementa un objeto dinámico <xref:System.Dynamic.IDynamicMetaObjectProvider>, el `CTypeDynamic` método da prioridad a las conversiones dinámicas sobre las conversiones estáticas definidas por el usuario.  
  
   
  
## Examples  
 En el ejemplo siguiente se usa el `CTypeDynamic` método para convertir un objeto dinámico en una cadena mediante el uso de la conversión definida por el objeto dinámico.  
  
```vb  
Imports System.Dynamic  
  
Module Module1  
    Sub Main()  
        Dim dyn As Object = New SampleDynamicObject  
        Dim str = CTypeDynamic(Of String)(dyn)  
        Console.WriteLine(str)  
    End Sub  
End Module  
  
Class SampleDynamicObject  
    Inherits DynamicObject  
  
    Public Overrides Function TryConvert(ByVal binder As ConvertBinder,  
                                         ByRef result As Object) As Boolean  
  
        If binder.Type = GetType(String) Then  
            result = "Sample String"  
            Return True  
        End If  
  
        Return False  
    End Function  
End Class  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Dynamic.DynamicObject.TryConvert(System.Dynamic.ConvertBinder,System.Object@)" />
        <altmember cref="M:System.Dynamic.DynamicMetaObject.BindConvert(System.Dynamic.ConvertBinder)" />
        <altmember cref="M:Microsoft.VisualBasic.Conversion.CTypeDynamic(System.Object,System.Type)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="ErrorToString">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Devuelve el mensaje de error que corresponde a un número de error determinado.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ErrorToString">
      <MemberSignature Language="C#" Value="public static string ErrorToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public static string ErrorToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.ErrorToString" />
      <MemberSignature Language="VB.NET" Value="Public Function ErrorToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ ErrorToString();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Devuelve el mensaje de error que corresponde a un número de error determinado.</summary>
        <returns>Mensaje de error correspondiente al error en tiempo de ejecución más reciente.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El `ErrorToString` función examina los valores de propiedad de la `Err` objeto para identificar el error en tiempo de ejecución más reciente. El valor devuelto de la `ErrorToString` función corresponde a la `Description` propiedad de la `Err` objeto. Si no se ha producido ningún error en tiempo de ejecución, `ErrorToString` devuelve una cadena de longitud cero ("").  
  
 En Visual Basic versión 6.0 y versiones anterior, esta funcionalidad se proporciona mediante la `Error` función.  
  
   
  
## Examples  
 El siguiente código utiliza el `ErrorToString` función para mostrar mensajes de error que corresponden a los números de error especificado.  
  
 [!code-vb[VbVbalrCatRef#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="ErrorNumber" /> está fuera del intervalo.</exception>
        <altmember cref="T:Microsoft.VisualBasic.ErrObject" />
        <altmember cref="P:Microsoft.VisualBasic.ErrObject.Description" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <Member MemberName="ErrorToString">
      <MemberSignature Language="C#" Value="public static string ErrorToString (int ErrorNumber);" />
      <MemberSignature Language="ILAsm" Value=".method public static string ErrorToString(int32 ErrorNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.ErrorToString(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function ErrorToString (ErrorNumber As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ ErrorToString(int ErrorNumber);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ErrorNumber" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="ErrorNumber">Opcional. Cualquier número de error válido.</param>
        <summary>Devuelve el mensaje de error que corresponde a un número de error determinado.</summary>
        <returns>Mensaje de error que corresponde a un número de error determinado.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El `ErrorToString` función examina los valores de propiedad de la `Err` objeto para identificar el error en tiempo de ejecución más reciente. El valor devuelto de la `ErrorToString` función corresponde a la `Description` propiedad de la `Err` objeto. Si `ErrorNumber` es un número de error válido pero no está definida, `ErrorToString` devuelve la cadena `"Application-defined or object-defined error."` si `ErrorNumber` no es válido, se produce un error. Si `ErrorNumber` se omite, el mensaje correspondiente a la más reciente se devuelve el error de tiempo de ejecución. Si no se ha producido ningún error en tiempo de ejecución o `ErrorNumber` es 0, `ErrorToString` devuelve una cadena de longitud cero ("").  
  
 En Visual Basic versión 6.0 y versiones anterior, esta funcionalidad se proporciona mediante la `Error` función.  
  
   
  
## Examples  
 El siguiente código utiliza el `ErrorToString` función para mostrar mensajes de error que corresponden a los números de error especificado.  
  
 [!code-vb[VbVbalrCatRef#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="ErrorNumber" /> está fuera del intervalo.</exception>
        <altmember cref="T:Microsoft.VisualBasic.ErrObject" />
        <altmember cref="P:Microsoft.VisualBasic.ErrObject.Description" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Fix">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Devuelve la parte correspondiente al entero de un número.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Fix">
      <MemberSignature Language="C#" Value="public static decimal Fix (decimal Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype System.Decimal Fix(valuetype System.Decimal Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Fix(System.Decimal)" />
      <MemberSignature Language="VB.NET" Value="Public Function Fix (Number As Decimal) As Decimal" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Decimal Fix(System::Decimal Number);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Decimal</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Decimal" />
      </Parameters>
      <Docs>
        <param name="Number">Obligatorio. Número de tipo <see langword="Double" /> o cualquier expresión numérica válida. Si <c>Number</c> contiene <see langword="Nothing" />, se devuelve <see langword="Nothing" />.</param>
        <summary>Devuelve la parte correspondiente al entero de un número.</summary>
        <returns>Devuelve la parte correspondiente al entero de un número.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Tanto el `Int` y `Fix` funciones quitan la parte fraccionaria de `Number` y devuelve el valor entero resultante.  
  
 La diferencia entre `Int` y `Fix` funciones es que, si `Number` es negativo, `Int` devuelve el primer entero negativo menor o igual a `Number`, mientras que `Fix` devuelve el primer entero negativo mayor o igual que `Number`. Por ejemplo, `Int` convierte -8,4 en -9, y `Fix` convierte -8,4 en -8.  
  
 `Fix(number)` es equivalente a `Sign(number) * Int(Abs(number)).`  
  
   
  
## Examples  
 Este ejemplo se muestra cómo el `Int` y `Fix` funciones devuelven la parte entera de varios números. En el caso de un argumento de número negativo, el `Int` función devuelve el primer entero negativo menor o igual que el número de la `Fix` función devuelve el primer entero negativo mayor o igual que el número. En el ejemplo siguiente requiere que especifique `Option Strict Off` porque las conversiones implícitas de tipo `Double` al tipo `Integer` no están permitidos en `Option Strict On`:  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 Puede usar el `CInt` función para convertir explícitamente otros tipos de datos al tipo `Integer` con `Option Strict Off`. Sin embargo, `CInt` se redondea al entero más próximo en lugar de truncar la parte fraccionaria de los números. Por ejemplo:  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 Puede usar el `CInt` función en el resultado de una llamada a `Fix` o `Int` para realizar la conversión explícita al entero sin redondear. Por ejemplo:  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 Para obtener más información sobre `CInt`, consulte [funciones de conversión de tipo](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">No se ha especificado Number.</exception>
        <exception cref="T:System.ArgumentException">Number no es un tipo numérico.</exception>
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <Member MemberName="Fix">
      <MemberSignature Language="C#" Value="public static double Fix (double Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static float64 Fix(float64 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Fix(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Fix (Number As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double Fix(double Number);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Number">Obligatorio. Número de tipo <see langword="Double" /> o cualquier expresión numérica válida. Si <c>Number</c> contiene <see langword="Nothing" />, se devuelve <see langword="Nothing" />.</param>
        <summary>Devuelve la parte correspondiente al entero de un número.</summary>
        <returns>Devuelve la parte correspondiente al entero de un número.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Tanto el `Int` y `Fix` funciones quitan la parte fraccionaria de `Number` y devuelve el valor entero resultante.  
  
 La diferencia entre `Int` y `Fix` funciones es que, si `Number` es negativo, `Int` devuelve el primer entero negativo menor o igual a `Number`, mientras que `Fix` devuelve el primer entero negativo mayor o igual que `Number`. Por ejemplo, `Int` convierte -8,4 en -9, y `Fix` convierte -8,4 en -8.  
  
 `Fix(number)` es equivalente a `Sign(number) * Int(Abs(number)).`  
  
   
  
## Examples  
 Este ejemplo se muestra cómo el `Int` y `Fix` funciones devuelven la parte entera de varios números. En el caso de un argumento de número negativo, el `Int` función devuelve el primer entero negativo menor o igual que el número de la `Fix` función devuelve el primer entero negativo mayor o igual que el número. En el ejemplo siguiente requiere que especifique `Option Strict Off` porque las conversiones implícitas de tipo `Double` al tipo `Integer` no están permitidos en `Option Strict On`:  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 Puede usar el `CInt` función para convertir explícitamente otros tipos de datos al tipo `Integer` con `Option Strict Off`. Sin embargo, `CInt` se redondea al entero más próximo en lugar de truncar la parte fraccionaria de los números. Por ejemplo:  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 Puede usar el `CInt` función en el resultado de una llamada a `Fix` o `Int` para realizar la conversión explícita al entero sin redondear. Por ejemplo:  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 Para obtener más información sobre `CInt`, consulte [funciones de conversión de tipo](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">No se ha especificado Number.</exception>
        <exception cref="T:System.ArgumentException">Number no es un tipo numérico.</exception>
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <Member MemberName="Fix">
      <MemberSignature Language="C#" Value="public static short Fix (short Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static int16 Fix(int16 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Fix(System.Int16)" />
      <MemberSignature Language="VB.NET" Value="Public Function Fix (Number As Short) As Short" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static short Fix(short Number);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int16</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int16" />
      </Parameters>
      <Docs>
        <param name="Number">Obligatorio. Número de tipo <see langword="Double" /> o cualquier expresión numérica válida. Si <c>Number</c> contiene <see langword="Nothing" />, se devuelve <see langword="Nothing" />.</param>
        <summary>Devuelve la parte correspondiente al entero de un número.</summary>
        <returns>Devuelve la parte correspondiente al entero de un número.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Tanto el `Int` y `Fix` funciones quitan la parte fraccionaria de `Number` y devuelve el valor entero resultante.  
  
 La diferencia entre `Int` y `Fix` funciones es que, si `Number` es negativo, `Int` devuelve el primer entero negativo menor o igual a `Number`, mientras que `Fix` devuelve el primer entero negativo mayor o igual que `Number`. Por ejemplo, `Int` convierte -8,4 en -9, y `Fix` convierte -8,4 en -8.  
  
 `Fix(number)` es equivalente a `Sign(number) * Int(Abs(number)).`  
  
   
  
## Examples  
 Este ejemplo se muestra cómo el `Int` y `Fix` funciones devuelven la parte entera de varios números. En el caso de un argumento de número negativo, el `Int` función devuelve el primer entero negativo menor o igual que el número de la `Fix` función devuelve el primer entero negativo mayor o igual que el número. En el ejemplo siguiente requiere que especifique `Option Strict Off` porque las conversiones implícitas de tipo `Double` al tipo `Integer` no están permitidos en `Option Strict On`:  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 Puede usar el `CInt` función para convertir explícitamente otros tipos de datos al tipo `Integer` con `Option Strict Off`. Sin embargo, `CInt` se redondea al entero más próximo en lugar de truncar la parte fraccionaria de los números. Por ejemplo:  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 Puede usar el `CInt` función en el resultado de una llamada a `Fix` o `Int` para realizar la conversión explícita al entero sin redondear. Por ejemplo:  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 Para obtener más información sobre `CInt`, consulte [funciones de conversión de tipo](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">No se ha especificado Number.</exception>
        <exception cref="T:System.ArgumentException">Number no es un tipo numérico.</exception>
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <Member MemberName="Fix">
      <MemberSignature Language="C#" Value="public static int Fix (int Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Fix(int32 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Fix(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Fix (Number As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Fix(int Number);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="Number">Obligatorio. Número de tipo <see langword="Double" /> o cualquier expresión numérica válida. Si <c>Number</c> contiene <see langword="Nothing" />, se devuelve <see langword="Nothing" />.</param>
        <summary>Devuelve la parte correspondiente al entero de un número.</summary>
        <returns>Devuelve la parte correspondiente al entero de un número.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Tanto el `Int` y `Fix` funciones quitan la parte fraccionaria de `Number` y devuelve el valor entero resultante.  
  
 La diferencia entre `Int` y `Fix` funciones es que, si `Number` es negativo, `Int` devuelve el primer entero negativo menor o igual a `Number`, mientras que `Fix` devuelve el primer entero negativo mayor o igual que `Number`. Por ejemplo, `Int` convierte -8,4 en -9, y `Fix` convierte -8,4 en -8.  
  
 `Fix(number)` es equivalente a `Sign(number) * Int(Abs(number)).`  
  
   
  
## Examples  
 Este ejemplo se muestra cómo el `Int` y `Fix` funciones devuelven la parte entera de varios números. En el caso de un argumento de número negativo, el `Int` función devuelve el primer entero negativo menor o igual que el número de la `Fix` función devuelve el primer entero negativo mayor o igual que el número. En el ejemplo siguiente requiere que especifique `Option Strict Off` porque las conversiones implícitas de tipo `Double` al tipo `Integer` no están permitidos en `Option Strict On`:  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 Puede usar el `CInt` función para convertir explícitamente otros tipos de datos al tipo `Integer` con `Option Strict Off`. Sin embargo, `CInt` se redondea al entero más próximo en lugar de truncar la parte fraccionaria de los números. Por ejemplo:  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 Puede usar el `CInt` función en el resultado de una llamada a `Fix` o `Int` para realizar la conversión explícita al entero sin redondear. Por ejemplo:  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 Para obtener más información sobre `CInt`, consulte [funciones de conversión de tipo](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">No se ha especificado Number.</exception>
        <exception cref="T:System.ArgumentException">Number no es un tipo numérico.</exception>
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <Member MemberName="Fix">
      <MemberSignature Language="C#" Value="public static long Fix (long Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static int64 Fix(int64 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Fix(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Function Fix (Number As Long) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static long Fix(long Number);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="Number">Obligatorio. Número de tipo <see langword="Double" /> o cualquier expresión numérica válida. Si <c>Number</c> contiene <see langword="Nothing" />, se devuelve <see langword="Nothing" />.</param>
        <summary>Devuelve la parte correspondiente al entero de un número.</summary>
        <returns>Devuelve la parte correspondiente al entero de un número.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Tanto el `Int` y `Fix` funciones quitan la parte fraccionaria de `Number` y devuelve el valor entero resultante.  
  
 La diferencia entre `Int` y `Fix` funciones es que, si `Number` es negativo, `Int` devuelve el primer entero negativo menor o igual a `Number`, mientras que `Fix` devuelve el primer entero negativo mayor o igual que `Number`. Por ejemplo, `Int` convierte -8,4 en -9, y `Fix` convierte -8,4 en -8.  
  
 `Fix(number)` es equivalente a `Sign(number) * Int(Abs(number)).`  
  
   
  
## Examples  
 Este ejemplo se muestra cómo el `Int` y `Fix` funciones devuelven la parte entera de varios números. En el caso de un argumento de número negativo, el `Int` función devuelve el primer entero negativo menor o igual que el número de la `Fix` función devuelve el primer entero negativo mayor o igual que el número. En el ejemplo siguiente requiere que especifique `Option Strict Off` porque las conversiones implícitas de tipo `Double` al tipo `Integer` no están permitidos en `Option Strict On`:  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 Puede usar el `CInt` función para convertir explícitamente otros tipos de datos al tipo `Integer` con `Option Strict Off`. Sin embargo, `CInt` se redondea al entero más próximo en lugar de truncar la parte fraccionaria de los números. Por ejemplo:  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 Puede usar el `CInt` función en el resultado de una llamada a `Fix` o `Int` para realizar la conversión explícita al entero sin redondear. Por ejemplo:  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 Para obtener más información sobre `CInt`, consulte [funciones de conversión de tipo](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">No se ha especificado Number.</exception>
        <exception cref="T:System.ArgumentException">Number no es un tipo numérico.</exception>
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <Member MemberName="Fix">
      <MemberSignature Language="C#" Value="public static object Fix (object Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static object Fix(object Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Fix(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Fix (Number As Object) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ Fix(System::Object ^ Number);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Number">Obligatorio. Número de tipo <see langword="Double" /> o cualquier expresión numérica válida. Si <c>Number</c> contiene <see langword="Nothing" />, se devuelve <see langword="Nothing" />.</param>
        <summary>Devuelve la parte correspondiente al entero de un número.</summary>
        <returns>Devuelve la parte correspondiente al entero de un número.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Tanto el `Int` y `Fix` funciones quitan la parte fraccionaria de `Number` y devuelve el valor entero resultante.  
  
 La diferencia entre `Int` y `Fix` funciones es que, si `Number` es negativo, `Int` devuelve el primer entero negativo menor o igual a `Number`, mientras que `Fix` devuelve el primer entero negativo mayor o igual que `Number`. Por ejemplo, `Int` convierte -8,4 en -9, y `Fix` convierte -8,4 en -8.  
  
 `Fix(number)` es equivalente a `Sign(number) * Int(Abs(number)).`  
  
   
  
## Examples  
 Este ejemplo se muestra cómo el `Int` y `Fix` funciones devuelven la parte entera de varios números. En el caso de un argumento de número negativo, el `Int` función devuelve el primer entero negativo menor o igual que el número de la `Fix` función devuelve el primer entero negativo mayor o igual que el número. En el ejemplo siguiente requiere que especifique `Option Strict Off` porque las conversiones implícitas de tipo `Double` al tipo `Integer` no están permitidos en `Option Strict On`:  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 Puede usar el `CInt` función para convertir explícitamente otros tipos de datos al tipo `Integer` con `Option Strict Off`. Sin embargo, `CInt` se redondea al entero más próximo en lugar de truncar la parte fraccionaria de los números. Por ejemplo:  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 Puede usar el `CInt` función en el resultado de una llamada a `Fix` o `Int` para realizar la conversión explícita al entero sin redondear. Por ejemplo:  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 Para obtener más información sobre `CInt`, consulte [funciones de conversión de tipo](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">No se ha especificado Number.</exception>
        <exception cref="T:System.ArgumentException">Number no es un tipo numérico.</exception>
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <Member MemberName="Fix">
      <MemberSignature Language="C#" Value="public static float Fix (float Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static float32 Fix(float32 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Fix(System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Function Fix (Number As Single) As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static float Fix(float Number);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="Number">Obligatorio. Número de tipo <see langword="Double" /> o cualquier expresión numérica válida. Si <c>Number</c> contiene <see langword="Nothing" />, se devuelve <see langword="Nothing" />.</param>
        <summary>Devuelve la parte correspondiente al entero de un número.</summary>
        <returns>Devuelve la parte correspondiente al entero de un número.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Tanto el `Int` y `Fix` funciones quitan la parte fraccionaria de `Number` y devuelve el valor entero resultante.  
  
 La diferencia entre `Int` y `Fix` funciones es que, si `Number` es negativo, `Int` devuelve el primer entero negativo menor o igual a `Number`, mientras que `Fix` devuelve el primer entero negativo mayor o igual que `Number`. Por ejemplo, `Int` convierte -8,4 en -9, y `Fix` convierte -8,4 en -8.  
  
 `Fix(number)` es equivalente a `Sign(number) * Int(Abs(number)).`  
  
   
  
## Examples  
 Este ejemplo se muestra cómo el `Int` y `Fix` funciones devuelven la parte entera de varios números. En el caso de un argumento de número negativo, el `Int` función devuelve el primer entero negativo menor o igual que el número de la `Fix` función devuelve el primer entero negativo mayor o igual que el número. En el ejemplo siguiente requiere que especifique `Option Strict Off` porque las conversiones implícitas de tipo `Double` al tipo `Integer` no están permitidos en `Option Strict On`:  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 Puede usar el `CInt` función para convertir explícitamente otros tipos de datos al tipo `Integer` con `Option Strict Off`. Sin embargo, `CInt` se redondea al entero más próximo en lugar de truncar la parte fraccionaria de los números. Por ejemplo:  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 Puede usar el `CInt` función en el resultado de una llamada a `Fix` o `Int` para realizar la conversión explícita al entero sin redondear. Por ejemplo:  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 Para obtener más información sobre `CInt`, consulte [funciones de conversión de tipo](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">No se ha especificado Number.</exception>
        <exception cref="T:System.ArgumentException">Number no es un tipo numérico.</exception>
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Hex">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Devuelve una cadena que representa el valor hexadecimal de un número.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Hex">
      <MemberSignature Language="C#" Value="public static string Hex (byte Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Hex(unsigned int8 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Hex(System.Byte)" />
      <MemberSignature Language="VB.NET" Value="Public Function Hex (Number As Byte) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Hex(System::Byte Number);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Byte" />
      </Parameters>
      <Docs>
        <param name="Number">Obligatorio. Cualquier expresión numérica o expresión de tipo <see langword="String" /> válida.</param>
        <summary>Devuelve una cadena que representa el valor hexadecimal de un número.</summary>
        <returns>Devuelve una cadena que representa el valor hexadecimal de un número.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si `Number` ya no es un número entero, se redondea al número entero más cercano antes de ser evaluado.  
  
|Si `Number` es|HEX devuelve|  
|-|-|  
|Empty|Zero (0)|  
|Cualquier valor numérico|Hasta dieciséis caracteres hexadecimales|  
  
 Puede representar números hexadecimales directamente anteponiendo números en el intervalo correcto con `&H`. Por ejemplo, `&H10` representa el decimal 16 en notación hexadecimal.  
  
   
  
## Examples  
 Este ejemplo se utiliza la `Hex` función para devolver el valor hexadecimal de un número.  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          No se especificó <paramref name="Number" />.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="Number" /> no es un tipo numérico.</exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Oct" />
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <Member MemberName="Hex">
      <MemberSignature Language="C#" Value="public static string Hex (short Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Hex(int16 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Hex(System.Int16)" />
      <MemberSignature Language="VB.NET" Value="Public Function Hex (Number As Short) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Hex(short Number);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int16" />
      </Parameters>
      <Docs>
        <param name="Number">Obligatorio. Cualquier expresión numérica o expresión de tipo <see langword="String" /> válida.</param>
        <summary>Devuelve una cadena que representa el valor hexadecimal de un número.</summary>
        <returns>Devuelve una cadena que representa el valor hexadecimal de un número.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si `Number` ya no es un número entero, se redondea al número entero más cercano antes de ser evaluado.  
  
|Si `Number` es|HEX devuelve|  
|-|-|  
|Empty|Zero (0)|  
|Cualquier valor numérico|Hasta dieciséis caracteres hexadecimales|  
  
 Puede representar números hexadecimales directamente anteponiendo números en el intervalo correcto con `&H`. Por ejemplo, `&H10` representa el decimal 16 en notación hexadecimal.  
  
   
  
## Examples  
 Este ejemplo se utiliza la `Hex` función para devolver el valor hexadecimal de un número.  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          No se especificó <paramref name="Number" />.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="Number" /> no es un tipo numérico.</exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Oct" />
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <Member MemberName="Hex">
      <MemberSignature Language="C#" Value="public static string Hex (int Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Hex(int32 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Hex(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Hex (Number As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Hex(int Number);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="Number">Obligatorio. Cualquier expresión numérica o expresión de tipo <see langword="String" /> válida.</param>
        <summary>Devuelve una cadena que representa el valor hexadecimal de un número.</summary>
        <returns>Devuelve una cadena que representa el valor hexadecimal de un número.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si `Number` ya no es un número entero, se redondea al número entero más cercano antes de ser evaluado.  
  
|Si `Number` es|HEX devuelve|  
|-|-|  
|Empty|Zero (0)|  
|Cualquier valor numérico|Hasta dieciséis caracteres hexadecimales|  
  
 Puede representar números hexadecimales directamente anteponiendo números en el intervalo correcto con `&H`. Por ejemplo, `&H10` representa el decimal 16 en notación hexadecimal.  
  
   
  
## Examples  
 Este ejemplo se utiliza la `Hex` función para devolver el valor hexadecimal de un número.  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          No se especificó <paramref name="Number" />.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="Number" /> no es un tipo numérico.</exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Oct" />
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <Member MemberName="Hex">
      <MemberSignature Language="C#" Value="public static string Hex (long Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Hex(int64 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Hex(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Function Hex (Number As Long) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Hex(long Number);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="Number">Obligatorio. Cualquier expresión numérica o expresión de tipo <see langword="String" /> válida.</param>
        <summary>Devuelve una cadena que representa el valor hexadecimal de un número.</summary>
        <returns>Devuelve una cadena que representa el valor hexadecimal de un número.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si `Number` ya no es un número entero, se redondea al número entero más cercano antes de ser evaluado.  
  
|Si `Number` es|HEX devuelve|  
|-|-|  
|Empty|Zero (0)|  
|Cualquier valor numérico|Hasta dieciséis caracteres hexadecimales|  
  
 Puede representar números hexadecimales directamente anteponiendo números en el intervalo correcto con `&H`. Por ejemplo, `&H10` representa el decimal 16 en notación hexadecimal.  
  
   
  
## Examples  
 Este ejemplo se utiliza la `Hex` función para devolver el valor hexadecimal de un número.  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          No se especificó <paramref name="Number" />.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="Number" /> no es un tipo numérico.</exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Oct" />
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <Member MemberName="Hex">
      <MemberSignature Language="C#" Value="public static string Hex (object Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Hex(object Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Hex(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Hex (Number As Object) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Hex(System::Object ^ Number);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Number">Obligatorio. Cualquier expresión numérica o expresión de tipo <see langword="String" /> válida.</param>
        <summary>Devuelve una cadena que representa el valor hexadecimal de un número.</summary>
        <returns>Devuelve una cadena que representa el valor hexadecimal de un número.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si `Number` ya no es un número entero, se redondea al número entero más cercano antes de ser evaluado.  
  
|Si `Number` es|HEX devuelve|  
|-|-|  
|Empty|Zero (0)|  
|Cualquier valor numérico|Hasta dieciséis caracteres hexadecimales|  
  
 Puede representar números hexadecimales directamente anteponiendo números en el intervalo correcto con `&H`. Por ejemplo, `&H10` representa el decimal 16 en notación hexadecimal.  
  
   
  
## Examples  
 Este ejemplo se utiliza la `Hex` función para devolver el valor hexadecimal de un número.  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          No se especificó <paramref name="Number" />.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="Number" /> no es un tipo numérico.</exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Oct" />
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <Member MemberName="Hex">
      <MemberSignature Language="C#" Value="public static string Hex (sbyte Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Hex(int8 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Hex(System.SByte)" />
      <MemberSignature Language="VB.NET" Value="Public Function Hex (Number As SByte) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Hex(System::SByte Number);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.SByte" />
      </Parameters>
      <Docs>
        <param name="Number">Obligatorio. Cualquier expresión numérica o expresión de tipo <see langword="String" /> válida.</param>
        <summary>Devuelve una cadena que representa el valor hexadecimal de un número.</summary>
        <returns>Devuelve una cadena que representa el valor hexadecimal de un número.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si `Number` ya no es un número entero, se redondea al número entero más cercano antes de ser evaluado.  
  
|Si `Number` es|HEX devuelve|  
|-|-|  
|Empty|Zero (0)|  
|Cualquier valor numérico|Hasta dieciséis caracteres hexadecimales|  
  
 Puede representar números hexadecimales directamente anteponiendo números en el intervalo correcto con `&H`. Por ejemplo, `&H10` representa el decimal 16 en notación hexadecimal.  
  
   
  
## Examples  
 Este ejemplo se utiliza la `Hex` función para devolver el valor hexadecimal de un número.  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Conversion.Hex(System.Byte)" />
        <exception cref="T:System.ArgumentNullException">
          No se especificó <paramref name="Number" />.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="Number" /> no es un tipo numérico.</exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Oct" />
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <Member MemberName="Hex">
      <MemberSignature Language="C#" Value="public static string Hex (ushort Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Hex(unsigned int16 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Hex(System.UInt16)" />
      <MemberSignature Language="VB.NET" Value="Public Function Hex (Number As UShort) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Hex(System::UInt16 Number);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.UInt16" />
      </Parameters>
      <Docs>
        <param name="Number">Obligatorio. Cualquier expresión numérica o expresión de tipo <see langword="String" /> válida.</param>
        <summary>Devuelve una cadena que representa el valor hexadecimal de un número.</summary>
        <returns>Devuelve una cadena que representa el valor hexadecimal de un número.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si `Number` ya no es un número entero, se redondea al número entero más cercano antes de ser evaluado.  
  
|Si `Number` es|HEX devuelve|  
|-|-|  
|Empty|Zero (0)|  
|Cualquier valor numérico|Hasta dieciséis caracteres hexadecimales|  
  
 Puede representar números hexadecimales directamente anteponiendo números en el intervalo correcto con `&H`. Por ejemplo, `&H10` representa el decimal 16 en notación hexadecimal.  
  
   
  
## Examples  
 Este ejemplo se utiliza la `Hex` función para devolver el valor hexadecimal de un número.  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Conversion.Hex(System.Int16)" />
        <exception cref="T:System.ArgumentNullException">
          No se especificó <paramref name="Number" />.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="Number" /> no es un tipo numérico.</exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Oct" />
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <Member MemberName="Hex">
      <MemberSignature Language="C#" Value="public static string Hex (uint Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Hex(unsigned int32 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Hex(System.UInt32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Hex (Number As UInteger) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Hex(System::UInt32 Number);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.UInt32" />
      </Parameters>
      <Docs>
        <param name="Number">Obligatorio. Cualquier expresión numérica o expresión de tipo <see langword="String" /> válida.</param>
        <summary>Devuelve una cadena que representa el valor hexadecimal de un número.</summary>
        <returns>Devuelve una cadena que representa el valor hexadecimal de un número.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si `Number` ya no es un número entero, se redondea al número entero más cercano antes de ser evaluado.  
  
|Si `Number` es|HEX devuelve|  
|-|-|  
|Empty|Zero (0)|  
|Cualquier valor numérico|Hasta dieciséis caracteres hexadecimales|  
  
 Puede representar números hexadecimales directamente anteponiendo números en el intervalo correcto con `&H`. Por ejemplo, `&H10` representa el decimal 16 en notación hexadecimal.  
  
   
  
## Examples  
 Este ejemplo se utiliza la `Hex` función para devolver el valor hexadecimal de un número.  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Conversion.Hex(System.Int32)" />
        <exception cref="T:System.ArgumentNullException">
          No se especificó <paramref name="Number" />.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="Number" /> no es un tipo numérico.</exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Oct" />
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <Member MemberName="Hex">
      <MemberSignature Language="C#" Value="public static string Hex (ulong Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Hex(unsigned int64 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Hex(System.UInt64)" />
      <MemberSignature Language="VB.NET" Value="Public Function Hex (Number As ULong) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Hex(System::UInt64 Number);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.UInt64" />
      </Parameters>
      <Docs>
        <param name="Number">Obligatorio. Cualquier expresión numérica o expresión de tipo <see langword="String" /> válida.</param>
        <summary>Devuelve una cadena que representa el valor hexadecimal de un número.</summary>
        <returns>Devuelve una cadena que representa el valor hexadecimal de un número.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si `Number` ya no es un número entero, se redondea al número entero más cercano antes de ser evaluado.  
  
|Si `Number` es|HEX devuelve|  
|-|-|  
|Empty|Zero (0)|  
|Cualquier valor numérico|Hasta dieciséis caracteres hexadecimales|  
  
 Puede representar números hexadecimales directamente anteponiendo números en el intervalo correcto con `&H`. Por ejemplo, `&H10` representa el decimal 16 en notación hexadecimal.  
  
   
  
## Examples  
 Este ejemplo se utiliza la `Hex` función para devolver el valor hexadecimal de un número.  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Conversion.Hex(System.Int64)" />
        <exception cref="T:System.ArgumentNullException">
          No se especificó <paramref name="Number" />.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="Number" /> no es un tipo numérico.</exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Oct" />
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Int">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Devuelve la parte correspondiente al entero de un número.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Int">
      <MemberSignature Language="C#" Value="public static decimal Int (decimal Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype System.Decimal Int(valuetype System.Decimal Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Int(System.Decimal)" />
      <MemberSignature Language="VB.NET" Value="Public Function Int (Number As Decimal) As Decimal" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Decimal Int(System::Decimal Number);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Decimal</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Decimal" />
      </Parameters>
      <Docs>
        <param name="Number">Obligatorio. Número de tipo <see langword="Double" /> o cualquier expresión numérica válida. Si <c>Number</c> contiene <see langword="Nothing" />, se devuelve <see langword="Nothing" />.</param>
        <summary>Devuelve la parte correspondiente al entero de un número.</summary>
        <returns>Devuelve la parte correspondiente al entero de un número.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Tanto el `Int` y `Fix` funciones quitan la parte fraccionaria de `Number` y devuelve el valor entero resultante.  
  
 La diferencia entre `Int` y `Fix` funciones es que, si `Number` es negativo, `Int` devuelve el primer entero negativo menor o igual a `Number`, mientras que `Fix` devuelve el primer entero negativo mayor o igual que `Number`. Por ejemplo, `Int` convierte -8,4 en -9, y `Fix` convierte -8,4 en -8.  
  
 `Fix(number)` es equivalente a `Sign(number) * Int(Abs(number)).`  
  
   
  
## Examples  
 Este ejemplo se muestra cómo el `Int` y `Fix` funciones devuelven la parte entera de varios números. En el caso de un argumento de número negativo, el `Int` función devuelve el primer entero negativo menor o igual que el número de la `Fix` función devuelve el primer entero negativo mayor o igual que el número. En el ejemplo siguiente requiere que especifique `Option Strict Off` porque las conversiones implícitas de tipo `Double` al tipo `Integer` no están permitidos en `Option Strict On`:  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 Puede usar el `CInt` función para convertir explícitamente otros tipos de datos al tipo `Integer` con `Option Strict Off`. Sin embargo, `CInt` se redondea al entero más próximo en lugar de truncar la parte fraccionaria de los números. Por ejemplo:  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 Puede usar el `CInt` función en el resultado de una llamada a `Fix` o `Int` para realizar la conversión explícita al entero sin redondear. Por ejemplo:  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 Para obtener más información sobre `CInt`, consulte [funciones de conversión de tipo](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">No se ha especificado Number.</exception>
        <exception cref="T:System.ArgumentException">Number no es un tipo numérico.</exception>
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <Member MemberName="Int">
      <MemberSignature Language="C#" Value="public static double Int (double Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static float64 Int(float64 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Int(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Int (Number As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double Int(double Number);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Number">Obligatorio. Número de tipo <see langword="Double" /> o cualquier expresión numérica válida. Si <c>Number</c> contiene <see langword="Nothing" />, se devuelve <see langword="Nothing" />.</param>
        <summary>Devuelve la parte correspondiente al entero de un número.</summary>
        <returns>Devuelve la parte correspondiente al entero de un número.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Tanto el `Int` y `Fix` funciones quitan la parte fraccionaria de `Number` y devuelve el valor entero resultante.  
  
 La diferencia entre `Int` y `Fix` funciones es que, si `Number` es negativo, `Int` devuelve el primer entero negativo menor o igual a `Number`, mientras que `Fix` devuelve el primer entero negativo mayor o igual que `Number`. Por ejemplo, `Int` convierte -8,4 en -9, y `Fix` convierte -8,4 en -8.  
  
 `Fix(number)` es equivalente a `Sign(number) * Int(Abs(number)).`  
  
   
  
## Examples  
 Este ejemplo se muestra cómo el `Int` y `Fix` funciones devuelven la parte entera de varios números. En el caso de un argumento de número negativo, el `Int` función devuelve el primer entero negativo menor o igual que el número de la `Fix` función devuelve el primer entero negativo mayor o igual que el número. En el ejemplo siguiente requiere que especifique `Option Strict Off` porque las conversiones implícitas de tipo `Double` al tipo `Integer` no están permitidos en `Option Strict On`:  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 Puede usar el `CInt` función para convertir explícitamente otros tipos de datos al tipo `Integer` con `Option Strict Off`. Sin embargo, `CInt` se redondea al entero más próximo en lugar de truncar la parte fraccionaria de los números. Por ejemplo:  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 Puede usar el `CInt` función en el resultado de una llamada a `Fix` o `Int` para realizar la conversión explícita al entero sin redondear. Por ejemplo:  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 Para obtener más información sobre `CInt`, consulte [funciones de conversión de tipo](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">No se ha especificado Number.</exception>
        <exception cref="T:System.ArgumentException">Number no es un tipo numérico.</exception>
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <Member MemberName="Int">
      <MemberSignature Language="C#" Value="public static short Int (short Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static int16 Int(int16 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Int(System.Int16)" />
      <MemberSignature Language="VB.NET" Value="Public Function Int (Number As Short) As Short" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static short Int(short Number);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int16</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int16" />
      </Parameters>
      <Docs>
        <param name="Number">Obligatorio. Número de tipo <see langword="Double" /> o cualquier expresión numérica válida. Si <c>Number</c> contiene <see langword="Nothing" />, se devuelve <see langword="Nothing" />.</param>
        <summary>Devuelve la parte correspondiente al entero de un número.</summary>
        <returns>Devuelve la parte correspondiente al entero de un número.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Tanto el `Int` y `Fix` funciones quitan la parte fraccionaria de `Number` y devuelve el valor entero resultante.  
  
 La diferencia entre `Int` y `Fix` funciones es que, si `Number` es negativo, `Int` devuelve el primer entero negativo menor o igual a `Number`, mientras que `Fix` devuelve el primer entero negativo mayor o igual que `Number`. Por ejemplo, `Int` convierte -8,4 en -9, y `Fix` convierte -8,4 en -8.  
  
 `Fix(number)` es equivalente a `Sign(number) * Int(Abs(number)).`  
  
   
  
## Examples  
 Este ejemplo se muestra cómo el `Int` y `Fix` funciones devuelven la parte entera de varios números. En el caso de un argumento de número negativo, el `Int` función devuelve el primer entero negativo menor o igual que el número de la `Fix` función devuelve el primer entero negativo mayor o igual que el número. En el ejemplo siguiente requiere que especifique `Option Strict Off` porque las conversiones implícitas de tipo `Double` al tipo `Integer` no están permitidos en `Option Strict On`:  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 Puede usar el `CInt` función para convertir explícitamente otros tipos de datos al tipo `Integer` con `Option Strict Off`. Sin embargo, `CInt` se redondea al entero más próximo en lugar de truncar la parte fraccionaria de los números. Por ejemplo:  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 Puede usar el `CInt` función en el resultado de una llamada a `Fix` o `Int` para realizar la conversión explícita al entero sin redondear. Por ejemplo:  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 Para obtener más información sobre `CInt`, consulte [funciones de conversión de tipo](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">No se ha especificado Number.</exception>
        <exception cref="T:System.ArgumentException">Number no es un tipo numérico.</exception>
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <Member MemberName="Int">
      <MemberSignature Language="C#" Value="public static int Int (int Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Int(int32 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Int(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Int (Number As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Int(int Number);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="Number">Obligatorio. Número de tipo <see langword="Double" /> o cualquier expresión numérica válida. Si <c>Number</c> contiene <see langword="Nothing" />, se devuelve <see langword="Nothing" />.</param>
        <summary>Devuelve la parte correspondiente al entero de un número.</summary>
        <returns>Devuelve la parte correspondiente al entero de un número.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Tanto el `Int` y `Fix` funciones quitan la parte fraccionaria de `Number` y devuelve el valor entero resultante.  
  
 La diferencia entre `Int` y `Fix` funciones es que, si `Number` es negativo, `Int` devuelve el primer entero negativo menor o igual a `Number`, mientras que `Fix` devuelve el primer entero negativo mayor o igual que `Number`. Por ejemplo, `Int` convierte -8,4 en -9, y `Fix` convierte -8,4 en -8.  
  
 `Fix(number)` es equivalente a `Sign(number) * Int(Abs(number)).`  
  
   
  
## Examples  
 Este ejemplo se muestra cómo el `Int` y `Fix` funciones devuelven la parte entera de varios números. En el caso de un argumento de número negativo, el `Int` función devuelve el primer entero negativo menor o igual que el número de la `Fix` función devuelve el primer entero negativo mayor o igual que el número. En el ejemplo siguiente requiere que especifique `Option Strict Off` porque las conversiones implícitas de tipo `Double` al tipo `Integer` no están permitidos en `Option Strict On`:  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 Puede usar el `CInt` función para convertir explícitamente otros tipos de datos al tipo `Integer` con `Option Strict Off`. Sin embargo, `CInt` se redondea al entero más próximo en lugar de truncar la parte fraccionaria de los números. Por ejemplo:  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 Puede usar el `CInt` función en el resultado de una llamada a `Fix` o `Int` para realizar la conversión explícita al entero sin redondear. Por ejemplo:  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 Para obtener más información sobre `CInt`, consulte [funciones de conversión de tipo](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">No se ha especificado Number.</exception>
        <exception cref="T:System.ArgumentException">Number no es un tipo numérico.</exception>
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <Member MemberName="Int">
      <MemberSignature Language="C#" Value="public static long Int (long Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static int64 Int(int64 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Int(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Function Int (Number As Long) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static long Int(long Number);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="Number">Obligatorio. Número de tipo <see langword="Double" /> o cualquier expresión numérica válida. Si <c>Number</c> contiene <see langword="Nothing" />, se devuelve <see langword="Nothing" />.</param>
        <summary>Devuelve la parte correspondiente al entero de un número.</summary>
        <returns>Devuelve la parte correspondiente al entero de un número.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Tanto el `Int` y `Fix` funciones quitan la parte fraccionaria de `Number` y devuelve el valor entero resultante.  
  
 La diferencia entre `Int` y `Fix` funciones es que, si `Number` es negativo, `Int` devuelve el primer entero negativo menor o igual a `Number`, mientras que `Fix` devuelve el primer entero negativo mayor o igual que `Number`. Por ejemplo, `Int` convierte -8,4 en -9, y `Fix` convierte -8,4 en -8.  
  
 `Fix(number)` es equivalente a `Sign(number) * Int(Abs(number)).`  
  
   
  
## Examples  
 Este ejemplo se muestra cómo el `Int` y `Fix` funciones devuelven la parte entera de varios números. En el caso de un argumento de número negativo, el `Int` función devuelve el primer entero negativo menor o igual que el número de la `Fix` función devuelve el primer entero negativo mayor o igual que el número. En el ejemplo siguiente requiere que especifique `Option Strict Off` porque las conversiones implícitas de tipo `Double` al tipo `Integer` no están permitidos en `Option Strict On`:  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 Puede usar el `CInt` función para convertir explícitamente otros tipos de datos al tipo `Integer` con `Option Strict Off`. Sin embargo, `CInt` se redondea al entero más próximo en lugar de truncar la parte fraccionaria de los números. Por ejemplo:  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 Puede usar el `CInt` función en el resultado de una llamada a `Fix` o `Int` para realizar la conversión explícita al entero sin redondear. Por ejemplo:  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 Para obtener más información sobre `CInt`, consulte [funciones de conversión de tipo](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">No se ha especificado Number.</exception>
        <exception cref="T:System.ArgumentException">Number no es un tipo numérico.</exception>
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <Member MemberName="Int">
      <MemberSignature Language="C#" Value="public static object Int (object Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static object Int(object Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Int(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Int (Number As Object) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ Int(System::Object ^ Number);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Number">Obligatorio. Número de tipo <see langword="Double" /> o cualquier expresión numérica válida. Si <c>Number</c> contiene <see langword="Nothing" />, se devuelve <see langword="Nothing" />.</param>
        <summary>Devuelve la parte correspondiente al entero de un número.</summary>
        <returns>Devuelve la parte correspondiente al entero de un número.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Tanto el `Int` y `Fix` funciones quitan la parte fraccionaria de `Number` y devuelve el valor entero resultante.  
  
 La diferencia entre `Int` y `Fix` funciones es que, si `Number` es negativo, `Int` devuelve el primer entero negativo menor o igual a `Number`, mientras que `Fix` devuelve el primer entero negativo mayor o igual que `Number`. Por ejemplo, `Int` convierte -8,4 en -9, y `Fix` convierte -8,4 en -8.  
  
 `Fix(number)` es equivalente a `Sign(number) * Int(Abs(number)).`  
  
   
  
## Examples  
 Este ejemplo se muestra cómo el `Int` y `Fix` funciones devuelven la parte entera de varios números. En el caso de un argumento de número negativo, el `Int` función devuelve el primer entero negativo menor o igual que el número de la `Fix` función devuelve el primer entero negativo mayor o igual que el número. En el ejemplo siguiente requiere que especifique `Option Strict Off` porque las conversiones implícitas de tipo `Double` al tipo `Integer` no están permitidos en `Option Strict On`:  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 Puede usar el `CInt` función para convertir explícitamente otros tipos de datos al tipo `Integer` con `Option Strict Off`. Sin embargo, `CInt` se redondea al entero más próximo en lugar de truncar la parte fraccionaria de los números. Por ejemplo:  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 Puede usar el `CInt` función en el resultado de una llamada a `Fix` o `Int` para realizar la conversión explícita al entero sin redondear. Por ejemplo:  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 Para obtener más información sobre `CInt`, consulte [funciones de conversión de tipo](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">No se ha especificado Number.</exception>
        <exception cref="T:System.ArgumentException">Number no es un tipo numérico.</exception>
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <Member MemberName="Int">
      <MemberSignature Language="C#" Value="public static float Int (float Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static float32 Int(float32 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Int(System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Function Int (Number As Single) As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static float Int(float Number);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="Number">Obligatorio. Número de tipo <see langword="Double" /> o cualquier expresión numérica válida. Si <c>Number</c> contiene <see langword="Nothing" />, se devuelve <see langword="Nothing" />.</param>
        <summary>Devuelve la parte correspondiente al entero de un número.</summary>
        <returns>Devuelve la parte correspondiente al entero de un número.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Tanto el `Int` y `Fix` funciones quitan la parte fraccionaria de `Number` y devuelve el valor entero resultante.  
  
 La diferencia entre `Int` y `Fix` funciones es que, si `Number` es negativo, `Int` devuelve el primer entero negativo menor o igual a `Number`, mientras que `Fix` devuelve el primer entero negativo mayor o igual que `Number`. Por ejemplo, `Int` convierte -8,4 en -9, y `Fix` convierte -8,4 en -8.  
  
 `Fix(number)` es equivalente a `Sign(number) * Int(Abs(number)).`  
  
   
  
## Examples  
 Este ejemplo se muestra cómo el `Int` y `Fix` funciones devuelven la parte entera de varios números. En el caso de un argumento de número negativo, el `Int` función devuelve el primer entero negativo menor o igual que el número de la `Fix` función devuelve el primer entero negativo mayor o igual que el número. En el ejemplo siguiente requiere que especifique `Option Strict Off` porque las conversiones implícitas de tipo `Double` al tipo `Integer` no están permitidos en `Option Strict On`:  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 Puede usar el `CInt` función para convertir explícitamente otros tipos de datos al tipo `Integer` con `Option Strict Off`. Sin embargo, `CInt` se redondea al entero más próximo en lugar de truncar la parte fraccionaria de los números. Por ejemplo:  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 Puede usar el `CInt` función en el resultado de una llamada a `Fix` o `Int` para realizar la conversión explícita al entero sin redondear. Por ejemplo:  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 Para obtener más información sobre `CInt`, consulte [funciones de conversión de tipo](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">No se ha especificado Number.</exception>
        <exception cref="T:System.ArgumentException">Number no es un tipo numérico.</exception>
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Oct">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Devuelve una cadena que representa el valor octal de un número.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Oct">
      <MemberSignature Language="C#" Value="public static string Oct (byte Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Oct(unsigned int8 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Oct(System.Byte)" />
      <MemberSignature Language="VB.NET" Value="Public Function Oct (Number As Byte) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Oct(System::Byte Number);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Byte" />
      </Parameters>
      <Docs>
        <param name="Number">Obligatorio. Cualquier expresión numérica o expresión de tipo <see langword="String" /> válida.</param>
        <summary>Devuelve una cadena que representa el valor octal de un número.</summary>
        <returns>Devuelve una cadena que representa el valor octal de un número.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si `Number` ya no es un número entero, se redondea al número entero más cercano antes de ser evaluado.  
  
|Si el número es|Valor octal|  
|-|-|  
|Empty|Zero (0)|  
|Cualquier otro número|Hasta 22 caracteres octales|  
  
 Puede representar números octales directamente anteponiendo números en el intervalo correcto con `&O`. Por ejemplo, `&O10` es la notación octal para 8 decimal.  
  
   
  
## Examples  
 Este ejemplo se utiliza la `Oct` función para devolver el valor octal de un número.  
  
 [!code-vb[VbVbalrStrings#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#30)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          No se especificó <paramref name="Number" />.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="Number" /> no es un tipo numérico.</exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Hex" />
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <Member MemberName="Oct">
      <MemberSignature Language="C#" Value="public static string Oct (short Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Oct(int16 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Oct(System.Int16)" />
      <MemberSignature Language="VB.NET" Value="Public Function Oct (Number As Short) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Oct(short Number);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int16" />
      </Parameters>
      <Docs>
        <param name="Number">Obligatorio. Cualquier expresión numérica o expresión de tipo <see langword="String" /> válida.</param>
        <summary>Devuelve una cadena que representa el valor octal de un número.</summary>
        <returns>Devuelve una cadena que representa el valor octal de un número.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si `Number` ya no es un número entero, se redondea al número entero más cercano antes de ser evaluado.  
  
|Si el número es|Valor octal|  
|-|-|  
|Empty|Zero (0)|  
|Cualquier otro número|Hasta 22 caracteres octales|  
  
 Puede representar números octales directamente anteponiendo números en el intervalo correcto con `&O`. Por ejemplo, `&O10` es la notación octal para 8 decimal.  
  
   
  
## Examples  
 Este ejemplo se utiliza la `Oct` función para devolver el valor octal de un número.  
  
 [!code-vb[VbVbalrStrings#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#30)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          No se especificó <paramref name="Number" />.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="Number" /> no es un tipo numérico.</exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Hex" />
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <Member MemberName="Oct">
      <MemberSignature Language="C#" Value="public static string Oct (int Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Oct(int32 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Oct(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Oct (Number As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Oct(int Number);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="Number">Obligatorio. Cualquier expresión numérica o expresión de tipo <see langword="String" /> válida.</param>
        <summary>Devuelve una cadena que representa el valor octal de un número.</summary>
        <returns>Devuelve una cadena que representa el valor octal de un número.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si `Number` ya no es un número entero, se redondea al número entero más cercano antes de ser evaluado.  
  
|Si el número es|Valor octal|  
|-|-|  
|Empty|Zero (0)|  
|Cualquier otro número|Hasta 22 caracteres octales|  
  
 Puede representar números octales directamente anteponiendo números en el intervalo correcto con `&O`. Por ejemplo, `&O10` es la notación octal para 8 decimal.  
  
   
  
## Examples  
 Este ejemplo se utiliza la `Oct` función para devolver el valor octal de un número.  
  
 [!code-vb[VbVbalrStrings#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#30)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          No se especificó <paramref name="Number" />.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="Number" /> no es un tipo numérico.</exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Hex" />
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <Member MemberName="Oct">
      <MemberSignature Language="C#" Value="public static string Oct (long Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Oct(int64 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Oct(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Function Oct (Number As Long) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Oct(long Number);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="Number">Obligatorio. Cualquier expresión numérica o expresión de tipo <see langword="String" /> válida.</param>
        <summary>Devuelve una cadena que representa el valor octal de un número.</summary>
        <returns>Devuelve una cadena que representa el valor octal de un número.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si `Number` ya no es un número entero, se redondea al número entero más cercano antes de ser evaluado.  
  
|Si el número es|Valor octal|  
|-|-|  
|Empty|Zero (0)|  
|Cualquier otro número|Hasta 22 caracteres octales|  
  
 Puede representar números octales directamente anteponiendo números en el intervalo correcto con `&O`. Por ejemplo, `&O10` es la notación octal para 8 decimal.  
  
   
  
## Examples  
 Este ejemplo se utiliza la `Oct` función para devolver el valor octal de un número.  
  
 [!code-vb[VbVbalrStrings#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#30)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          No se especificó <paramref name="Number" />.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="Number" /> no es un tipo numérico.</exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Hex" />
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <Member MemberName="Oct">
      <MemberSignature Language="C#" Value="public static string Oct (object Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Oct(object Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Oct(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Oct (Number As Object) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Oct(System::Object ^ Number);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Number">Obligatorio. Cualquier expresión numérica o expresión de tipo <see langword="String" /> válida.</param>
        <summary>Devuelve una cadena que representa el valor octal de un número.</summary>
        <returns>Devuelve una cadena que representa el valor octal de un número.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si `Number` ya no es un número entero, se redondea al número entero más cercano antes de ser evaluado.  
  
|Si el número es|Valor octal|  
|-|-|  
|Empty|Zero (0)|  
|Cualquier otro número|Hasta 22 caracteres octales|  
  
 Puede representar números octales directamente anteponiendo números en el intervalo correcto con `&O`. Por ejemplo, `&O10` es la notación octal para 8 decimal.  
  
   
  
## Examples  
 Este ejemplo se utiliza la `Oct` función para devolver el valor octal de un número.  
  
 [!code-vb[VbVbalrStrings#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#30)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          No se especificó <paramref name="Number" />.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="Number" /> no es un tipo numérico.</exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Hex" />
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <Member MemberName="Oct">
      <MemberSignature Language="C#" Value="public static string Oct (sbyte Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Oct(int8 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Oct(System.SByte)" />
      <MemberSignature Language="VB.NET" Value="Public Function Oct (Number As SByte) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Oct(System::SByte Number);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.SByte" />
      </Parameters>
      <Docs>
        <param name="Number">Obligatorio. Cualquier expresión numérica o expresión de tipo <see langword="String" /> válida.</param>
        <summary>Devuelve una cadena que representa el valor octal de un número.</summary>
        <returns>Devuelve una cadena que representa el valor octal de un número.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si `Number` ya no es un número entero, se redondea al número entero más cercano antes de ser evaluado.  
  
|Si el número es|Valor octal|  
|-|-|  
|Empty|Zero (0)|  
|Cualquier otro número|Hasta 22 caracteres octales|  
  
 Puede representar números octales directamente anteponiendo números en el intervalo correcto con `&O`. Por ejemplo, `&O10` es la notación octal para 8 decimal.  
  
   
  
## Examples  
 Este ejemplo se utiliza la `Oct` función para devolver el valor octal de un número.  
  
 [!code-vb[VbVbalrStrings#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#30)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Conversion.Oct(System.Byte)" />
        <exception cref="T:System.ArgumentNullException">
          No se especificó <paramref name="Number" />.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="Number" /> no es un tipo numérico.</exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Hex" />
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <Member MemberName="Oct">
      <MemberSignature Language="C#" Value="public static string Oct (ushort Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Oct(unsigned int16 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Oct(System.UInt16)" />
      <MemberSignature Language="VB.NET" Value="Public Function Oct (Number As UShort) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Oct(System::UInt16 Number);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.UInt16" />
      </Parameters>
      <Docs>
        <param name="Number">Obligatorio. Cualquier expresión numérica o expresión de tipo <see langword="String" /> válida.</param>
        <summary>Devuelve una cadena que representa el valor octal de un número.</summary>
        <returns>Devuelve una cadena que representa el valor octal de un número.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si `Number` ya no es un número entero, se redondea al número entero más cercano antes de ser evaluado.  
  
|Si el número es|Valor octal|  
|-|-|  
|Empty|Zero (0)|  
|Cualquier otro número|Hasta 22 caracteres octales|  
  
 Puede representar números octales directamente anteponiendo números en el intervalo correcto con `&O`. Por ejemplo, `&O10` es la notación octal para 8 decimal.  
  
   
  
## Examples  
 Este ejemplo se utiliza la `Oct` función para devolver el valor octal de un número.  
  
 [!code-vb[VbVbalrStrings#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#30)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Conversion.Oct(System.Int16)" />
        <exception cref="T:System.ArgumentNullException">
          No se especificó <paramref name="Number" />.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="Number" /> no es un tipo numérico.</exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Hex" />
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <Member MemberName="Oct">
      <MemberSignature Language="C#" Value="public static string Oct (uint Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Oct(unsigned int32 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Oct(System.UInt32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Oct (Number As UInteger) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Oct(System::UInt32 Number);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.UInt32" />
      </Parameters>
      <Docs>
        <param name="Number">Obligatorio. Cualquier expresión numérica o expresión de tipo <see langword="String" /> válida.</param>
        <summary>Devuelve una cadena que representa el valor octal de un número.</summary>
        <returns>Devuelve una cadena que representa el valor octal de un número.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si `Number` ya no es un número entero, se redondea al número entero más cercano antes de ser evaluado.  
  
|Si el número es|Valor octal|  
|-|-|  
|Empty|Zero (0)|  
|Cualquier otro número|Hasta 22 caracteres octales|  
  
 Puede representar números octales directamente anteponiendo números en el intervalo correcto con `&O`. Por ejemplo, `&O10` es la notación octal para 8 decimal.  
  
   
  
## Examples  
 Este ejemplo se utiliza la `Oct` función para devolver el valor octal de un número.  
  
 [!code-vb[VbVbalrStrings#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#30)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Conversion.Oct(System.Int32)" />
        <exception cref="T:System.ArgumentNullException">
          No se especificó <paramref name="Number" />.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="Number" /> no es un tipo numérico.</exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Hex" />
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <Member MemberName="Oct">
      <MemberSignature Language="C#" Value="public static string Oct (ulong Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Oct(unsigned int64 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Oct(System.UInt64)" />
      <MemberSignature Language="VB.NET" Value="Public Function Oct (Number As ULong) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Oct(System::UInt64 Number);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.UInt64" />
      </Parameters>
      <Docs>
        <param name="Number">Obligatorio. Cualquier expresión numérica o expresión de tipo <see langword="String" /> válida.</param>
        <summary>Devuelve una cadena que representa el valor octal de un número.</summary>
        <returns>Devuelve una cadena que representa el valor octal de un número.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si `Number` ya no es un número entero, se redondea al número entero más cercano antes de ser evaluado.  
  
|Si el número es|Valor octal|  
|-|-|  
|Empty|Zero (0)|  
|Cualquier otro número|Hasta 22 caracteres octales|  
  
 Puede representar números octales directamente anteponiendo números en el intervalo correcto con `&O`. Por ejemplo, `&O10` es la notación octal para 8 decimal.  
  
   
  
## Examples  
 Este ejemplo se utiliza la `Oct` función para devolver el valor octal de un número.  
  
 [!code-vb[VbVbalrStrings#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#30)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Conversion.Oct(System.Int64)" />
        <exception cref="T:System.ArgumentNullException">
          No se especificó <paramref name="Number" />.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="Number" /> no es un tipo numérico.</exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Hex" />
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <Member MemberName="Str">
      <MemberSignature Language="C#" Value="public static string Str (object Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Str(object Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Str(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Str (Number As Object) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Str(System::Object ^ Number);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Number">Obligatorio. <see langword="Object" /> que contiene cualquier expresión numérica válida.</param>
        <summary>Devuelve una representación de tipo <see langword="String" /> de un número.</summary>
        <returns>Devuelve una representación de tipo <see langword="String" /> de un número.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cuando los números se convierten en cadenas, se reserva siempre un espacio inicial para el inicio de sesión de `Number`. Si `Number` es positivo, la cadena devuelta contiene un espacio inicial y el signo más es implícito. Un número negativo incluirá el signo menos (-) y ningún espacio inicial.  
  
 Use la `Format` función para convertir los valores numéricos que desee aplicar formato como fechas, horas o moneda u otros formatos definidos por el usuario. A diferencia de la `Str` función, el `Format` función no incluye un espacio inicial para el inicio de sesión de `Number`.  
  
> [!NOTE]
>  El `Str` función sólo reconoce el punto (`.`) como separador decimal válido. Si se utilizan separadores decimales diferentes (por ejemplo, en aplicaciones internacionales), utilice la `CStr` o `Format` funciones para convertir un número en una cadena. Para obtener la representación de cadena de un número en una referencia cultural determinada, use el número `ToString(IFormatProvider)` método. Por ejemplo, utilice <xref:System.Double.ToString%2A> al convertir un valor de tipo `Double` en una cadena.  
  
   
  
## Examples  
 Este ejemplo se utiliza la `Str` función devuelva un `String` representación de un número. Cuando un número positivo se convierte en una cadena, se reserva siempre un espacio inicial para su inicio de sesión.  
  
 [!code-vb[VbVbalrStrings#1](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          No se especificó <paramref name="Number" />.</exception>
        <exception cref="T:System.InvalidCastException">
          <paramref name="Number" /> no es un tipo numérico.</exception>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Format(System.Object,System.String)" />
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Val" />
        <altmember cref="T:System.ArgumentNullException" />
        <altmember cref="T:System.InvalidCastException" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Val">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Devuelve los números contenidos en una cadena como un valor numérico del tipo apropiado.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Val">
      <MemberSignature Language="C#" Value="public static int Val (char Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Val(char Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Val(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Function Val (Expression As Char) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Val(char Expression);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="Expression">Obligatorio. Cualquier expresión <see langword="String" /> válida, variable <see langword="Object" /> o valor <see langword="Char" />. Si <c>Expression</c> es de tipo <see langword="Object" />, su valor debe ser convertible a <see langword="String" /> o se produce un error <see cref="T:System.ArgumentException" />.</param>
        <summary>Devuelve los números contenidos en una cadena como un valor numérico del tipo apropiado.</summary>
        <returns>Devuelve los números contenidos en una cadena como un valor numérico del tipo apropiado.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El `Val` función deja de leer la cadena en el primer carácter que no se reconoce como parte de un número. Símbolos y caracteres que a menudo se consideran parte de valores numéricos, como signos de dólar y comas, no se reconocen. Sin embargo, la función reconoce los prefijos de base `&O` (para octal) y `&H` (para hexadecimal). Los espacios en blanco, tabuladores y caracteres de avance de línea se eliminan del argumento.  
  
 La siguiente llamada devuelve el valor 1615198.  
  
```  
  
Val(" 1615 198th Street N.E.")   
```  
  
 La siguiente llamada devuelve el valor decimal -1.  
  
```  
  
Val("&HFFFF")   
```  
  
> [!NOTE]
>  El `Val` función sólo reconoce el punto (`.`) como separador decimal válido. Cuando se utilizan separadores decimales diferentes, como en aplicaciones internacionales, utilice `CDbl` o `CInt` en su lugar, para convertir una cadena en un número. Para convertir la representación de cadena de un número en una referencia cultural determinada a un valor numérico, utilice el tipo numérico `Parse(String, IFormatProvider)` método. Por ejemplo, utilice <xref:System.Double.Parse%2A?displayProperty=nameWithType> al convertir una cadena en un `Double`.  
  
> [!NOTE]
>  Un <xref:System.InvalidCastException> excepción podría producirse en respuesta a determinados formatos de número poco habituales. Por ejemplo, el código siguiente genera esta excepción.  
>   
>  `' These examples cause run-time errors.`  
>   
>  `'Console.WriteLine(Val("1.34%"))`  
>   
>  `'Console.WriteLine(Val("1.34&"))`  
>   
>  El conflicto entre el número con formato como una `Double` y `Integer` y `Long` caracteres de tipo detectaría el compilador si no se encuentra en una cadena.  
>   
>  `' These examples cause compiler errors.`  
>   
>  `'Dim m = 1.34%`  
>   
>  `'Dim n = 1.34&`  
  
   
  
## Examples  
 En el ejemplo siguiente se usa el `Val` función para devolver los números contenidos en cada cadena. `Val` detiene la conversión en el primer carácter que no se puede interpretar como un dígito numérico, modificador numérico, puntuación numérica o espacios en blanco.  
  
 [!code-vb[VbVbalrFunctions#54](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#54)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException">
          <paramref name="InputStr" /> es demasiado grande.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="Expression" /> es una expresión de tipo <see langword="Object" /> que no es convertible a <see langword="String" />.</exception>
        <altmember cref="M:Microsoft.VisualBasic.Conversion.Str(System.Object)" />
        <altmember cref="T:System.OverflowException" />
        <altmember cref="T:System.InvalidCastException" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <Member MemberName="Val">
      <MemberSignature Language="C#" Value="public static double Val (object Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static float64 Val(object Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Val(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Val (Expression As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double Val(System::Object ^ Expression);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Expression">Obligatorio. Cualquier expresión <see langword="String" /> válida, variable <see langword="Object" /> o valor <see langword="Char" />. Si <c>Expression</c> es de tipo <see langword="Object" />, su valor debe ser convertible a <see langword="String" /> o se produce un error <see cref="T:System.ArgumentException" />.</param>
        <summary>Devuelve los números contenidos en una cadena como un valor numérico del tipo apropiado.</summary>
        <returns>Devuelve los números contenidos en una cadena como un valor numérico del tipo apropiado.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El `Val` función deja de leer la cadena en el primer carácter que no se reconoce como parte de un número. Símbolos y caracteres que a menudo se consideran parte de valores numéricos, como signos de dólar y comas, no se reconocen. Sin embargo, la función reconoce los prefijos de base `&O` (para octal) y `&H` (para hexadecimal). Los espacios en blanco, tabuladores y caracteres de avance de línea se quitan del argumento.  
  
 La siguiente llamada devuelve el valor 1234123.  
  
```  
  
Val(" 1234 123th Street N.E.")   
```  
  
 La siguiente llamada devuelve el valor decimal -1.  
  
```  
  
Val("&HFFFF")   
```  
  
> [!NOTE]
>  El `Val` función sólo reconoce el punto (`.`) como separador decimal válido. Cuando se utilizan otros separadores decimales, como en aplicaciones internacionales, utilice `CDbl` o `CInt` en su lugar, para convertir una cadena en un número. Para convertir la representación de cadena de un número en una referencia cultural determinada a un valor numérico, utilice el tipo numérico `Parse(String, IFormatProvider)` método. Por ejemplo, utilice <xref:System.Double.Parse%2A?displayProperty=nameWithType> al convertir una cadena en un `Double`.  
  
> [!NOTE]
>  Un <xref:System.InvalidCastException> excepción podría producirse en respuesta a determinados formatos de número poco habituales. Por ejemplo, el código siguiente genera esta excepción.  
>   
>  `' These examples cause run-time errors.`  
>   
>  `'Console.WriteLine(Val("1.34%"))`  
>   
>  `'Console.WriteLine(Val("1.34&"))`  
>   
>  El conflicto entre el número con formato como una `Double` y `Integer` y `Long` caracteres de tipo detectaría el compilador si el conflicto no se incluían en cadenas.  
>   
>  `' These examples cause compiler errors.`  
>   
>  `'Dim m = 1.34%`  
>   
>  `'Dim n = 1.34&`  
  
   
  
## Examples  
 En el ejemplo siguiente se usa el `Val` función para devolver los números contenidos en cada cadena. `Val` detiene la conversión en el primer carácter que no se puede interpretar como un dígito numérico, modificador numérico, puntuación numérica o espacios en blanco.  
  
 [!code-vb[VbVbalrFunctions#54](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#54)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException">
          <paramref name="InputStr" /> es demasiado grande.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="Expression" /> es una expresión de tipo <see langword="Object" /> que no es convertible a <see langword="String" />.</exception>
        <altmember cref="M:Microsoft.VisualBasic.Conversion.Str(System.Object)" />
        <altmember cref="T:System.OverflowException" />
        <altmember cref="T:System.InvalidCastException" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <Member MemberName="Val">
      <MemberSignature Language="C#" Value="public static double Val (string InputStr);" />
      <MemberSignature Language="ILAsm" Value=".method public static float64 Val(string InputStr) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Val(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function Val (InputStr As String) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double Val(System::String ^ InputStr);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="InputStr" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="InputStr">Obligatorio. Cualquier expresión <see langword="String" /> válida, variable <see langword="Object" /> o valor <see langword="Char" />. Si <c>Expression</c> es de tipo <see langword="Object" />, su valor debe ser convertible a <see langword="String" /> o se produce un error <see cref="T:System.ArgumentException" />.</param>
        <summary>Devuelve los números contenidos en una cadena como un valor numérico del tipo apropiado.</summary>
        <returns>Devuelve los números contenidos en una cadena como un valor numérico del tipo apropiado.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El `Val` función deja de leer la cadena en el primer carácter que no se reconoce como parte de un número. Símbolos y caracteres que a menudo se consideran parte de valores numéricos, como signos de dólar y comas, no se reconocen. Sin embargo, la función reconoce los prefijos de base `&O` (para octal) y `&H` (para hexadecimal). Los espacios en blanco, tabuladores y caracteres de avance de línea se quitan del argumento.  
  
 La siguiente llamada devuelve el valor 1234123.  
  
```  
  
Val(" 1234 123th Street N.E.")   
```  
  
 La siguiente llamada devuelve el valor decimal -1.  
  
```  
  
Val("&HFFFF")   
```  
  
> [!NOTE]
>  El `Val` función sólo reconoce el punto (`.`) como separador decimal válido. Cuando se utilizan otros separadores decimales, como en aplicaciones internacionales, utilice `CDbl` o `CInt` en su lugar, para convertir una cadena en un número. Para convertir la representación de cadena de un número en una referencia cultural determinada a un valor numérico, utilice el tipo numérico `Parse(String, IFormatProvider)` método. Por ejemplo, utilice <xref:System.Double.Parse%2A?displayProperty=nameWithType> al convertir una cadena en un `Double`.  
  
> [!NOTE]
>  Un <xref:System.InvalidCastException> excepción podría producirse en respuesta a determinados formatos de número poco habituales. Por ejemplo, el código siguiente genera esta excepción.  
>   
>  `' These examples cause run-time errors.`  
>   
>  `'Console.WriteLine(Val("1.34%"))`  
>   
>  `'Console.WriteLine(Val("1.34&"))`  
>   
>  El conflicto entre el número con formato como una `Double` y `Integer` y `Long` caracteres de tipo detectaría el compilador si el conflicto no se incluían en cadenas.  
>   
>  `' These examples cause compiler errors.`  
>   
>  `'Dim m = 1.34%`  
>   
>  `'Dim n = 1.34&`  
  
   
  
## Examples  
 En el ejemplo siguiente se usa el `Val` función para devolver los números contenidos en cada cadena. `Val` detiene la conversión en el primer carácter que no se puede interpretar como un dígito numérico, modificador numérico, puntuación numérica o espacios en blanco.  
  
 [!code-vb[VbVbalrFunctions#54](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#54)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException">
          <paramref name="InputStr" /> es demasiado grande.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="Expression" /> es una expresión de tipo <see langword="Object" /> que no es convertible a <see langword="String" />.</exception>
        <altmember cref="M:Microsoft.VisualBasic.Conversion.Str(System.Object)" />
        <altmember cref="T:System.OverflowException" />
        <altmember cref="T:System.InvalidCastException" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
  </Members>
</Type>