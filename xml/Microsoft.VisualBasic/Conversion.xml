<Type Name="Conversion" FullName="Microsoft.VisualBasic.Conversion">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="fc28c5733fb9f77e132ec584a6f025b3048ad10b" />
    <Meta Name="ms.sourcegitcommit" Value="0ec122ee5f3681159b8460ab15b409fd6e3d3ae0" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="es-ES" />
    <Meta Name="ms.lasthandoff" Value="10/04/2018" />
    <Meta Name="ms.locfileid" Value="48643513" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class Conversion" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed Conversion extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.VisualBasic.Conversion" />
  <TypeSignature Language="VB.NET" Value="Public Module Conversion" />
  <TypeSignature Language="C++ CLI" Value="public ref class Conversion sealed" />
  <TypeSignature Language="F#" Value="type Conversion = class" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.VisualBasic</AssemblyName>
    <AssemblyVersion>7.0.5000.0</AssemblyVersion>
    <AssemblyVersion>8.0.0.0</AssemblyVersion>
    <AssemblyVersion>10.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
      <AttributeName>Microsoft.VisualBasic.CompilerServices.StandardModule</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <span data-ttu-id="041cc-101">El módulo <see langword="Conversion" /> contiene los procedimientos utilizados para realizar diversas operaciones de conversión.</span>
      <span class="sxs-lookup">
        <span data-stu-id="041cc-101">The <see langword="Conversion" /> module contains the procedures used to perform various conversion operations.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="041cc-102">Este módulo admite las palabras clave del lenguaje Visual Basic y miembros de la biblioteca de tiempo de ejecución que conversión a números decimales en otras bases, escriba números en cadenas, cadenas en números y datos de uno a otro.</span><span class="sxs-lookup"><span data-stu-id="041cc-102">This module supports the Visual Basic language keywords and run-time library members that convert decimal numbers to other bases, numbers to strings, strings to numbers, and one data type to another.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="041cc-103">Este ejemplo se usa el `Hex` función para devolver el valor hexadecimal de un número.</span><span class="sxs-lookup"><span data-stu-id="041cc-103">This example uses the `Hex` function to return the hexadecimal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
    </remarks>
    <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md">
      <span data-ttu-id="041cc-104">Resumen de conversión</span>
      <span class="sxs-lookup">
        <span data-stu-id="041cc-104">Conversion Summary</span>
      </span>
    </related>
    <related type="Article" href="~/docs/visual-basic/language-reference/keywords/index.md">
      <span data-ttu-id="041cc-105">Palabras clave de Visual Basic</span>
      <span class="sxs-lookup">
        <span data-stu-id="041cc-105">Keywords (Visual Basic)</span>
      </span>
    </related>
    <related type="Article" href="~/docs/visual-basic/language-reference/runtime-library-members.md">
      <span data-ttu-id="041cc-106">Miembros de la biblioteca de tiempo de ejecución de Visual Basic</span>
      <span class="sxs-lookup">
        <span data-stu-id="041cc-106">Visual Basic Run-Time Library Members</span>
      </span>
    </related>
  </Docs>
  <Members>
    <Member MemberName="CTypeDynamic">
      <MemberSignature Language="C#" Value="public static object CTypeDynamic (object Expression, Type TargetType);" />
      <MemberSignature Language="ILAsm" Value=".method public static object CTypeDynamic(object Expression, class System.Type TargetType) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.CTypeDynamic(System.Object,System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Function CTypeDynamic (Expression As Object, TargetType As Type) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ CTypeDynamic(System::Object ^ Expression, Type ^ TargetType);" />
      <MemberSignature Language="F#" Value="static member CTypeDynamic : obj * Type -&gt; obj" Usage="Microsoft.VisualBasic.Conversion.CTypeDynamic (Expression, TargetType)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Object" />
        <Parameter Name="TargetType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="Expression">
          <span data-ttu-id="041cc-107">Objeto que se va a convertir.</span>
          <span class="sxs-lookup">
            <span data-stu-id="041cc-107">The object to convert.</span>
          </span>
        </param>
        <param name="TargetType">
          <span data-ttu-id="041cc-108">Tipo al que se va a convertir el objeto.</span>
          <span class="sxs-lookup">
            <span data-stu-id="041cc-108">The type to which to convert the object.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="041cc-109">Convierte un objeto al tipo especificado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="041cc-109">Converts an object to the specified type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="041cc-110">Objeto cuyo tipo en tiempo de ejecución es el tipo de destino solicitado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="041cc-110">An object whose type at run time is the requested target type.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="041cc-111">El `CTypeDynamic` método convierte el objeto pasado como el `Expression` parámetro al tipo especificado por el `TargetType` parámetro.</span><span class="sxs-lookup"><span data-stu-id="041cc-111">The `CTypeDynamic` method converts the object passed as the `Expression` parameter to the type specified by the `TargetType` parameter.</span></span> <span data-ttu-id="041cc-112">Si el objeto es un objeto dinámico, el `CTypeDynamic` método aplica a las conversiones dinámicas disponibles.</span><span class="sxs-lookup"><span data-stu-id="041cc-112">If the object is a dynamic object, the `CTypeDynamic` method applies available dynamic conversions.</span></span>  
  
 <span data-ttu-id="041cc-113">El `CTypeDynamic` método aplica a las conversiones dinámicas de acuerdo con la semántica de conversión definida por el propio objeto.</span><span class="sxs-lookup"><span data-stu-id="041cc-113">The `CTypeDynamic` method applies dynamic conversions in accordance with the conversion semantics defined by the object itself.</span></span> <span data-ttu-id="041cc-114">Si un objeto dinámico se hereda de <xref:System.Dynamic.DynamicObject>, el `CTypeDynamic` método primero intenta realizar la conversión mediante una conversión estática definido por el usuario.</span><span class="sxs-lookup"><span data-stu-id="041cc-114">If a dynamic object inherits from <xref:System.Dynamic.DynamicObject>, the `CTypeDynamic` method first attempts to perform the conversion by using a user-defined, static conversion.</span></span> <span data-ttu-id="041cc-115">Si se produce un error en la conversión definida por el usuario, estática, el `CTypeDynamic` método intenta realizar la conversión mediante conversiones dinámicas.</span><span class="sxs-lookup"><span data-stu-id="041cc-115">If the user-defined, static conversion fails, the `CTypeDynamic` method attempts to perform the conversion by using dynamic conversions.</span></span> <span data-ttu-id="041cc-116">Si implementa un objeto dinámico <xref:System.Dynamic.IDynamicMetaObjectProvider>, el `CTypeDynamic` método da prioridad a las conversiones dinámicas a través de las conversiones estáticas definido por el usuario.</span><span class="sxs-lookup"><span data-stu-id="041cc-116">If a dynamic object implements <xref:System.Dynamic.IDynamicMetaObjectProvider>, the `CTypeDynamic` method gives precedence to dynamic conversions over user-defined, static conversions.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="041cc-117">En el ejemplo siguiente se usa el `CTypeDynamic` método para convertir un objeto dinámico en una cadena mediante la conversión definida por el objeto dinámico.</span><span class="sxs-lookup"><span data-stu-id="041cc-117">The following example uses the `CTypeDynamic` method to convert a dynamic object to a string by using the conversion defined by the dynamic object.</span></span>  
  
```vb  
Imports System.Dynamic  
  
Module Module1  
    Sub Main()  
        Dim dyn As Object = New SampleDynamicObject  
        Dim sampleString = CTypeDynamic(dyn, GetType(String))  
        Console.WriteLine(sampleString)  
    End Sub  
End Module  
  
Class SampleDynamicObject  
    Inherits DynamicObject  
  
    Public Overrides Function TryConvert(ByVal binder As ConvertBinder,  
                                         ByRef result As Object) As Boolean  
  
        If binder.Type = GetType(String) Then  
            result = "Sample String"  
            Return True  
        End If  
  
        Return False  
    End Function  
End Class  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Dynamic.DynamicObject.TryConvert(System.Dynamic.ConvertBinder,System.Object@)" />
        <altmember cref="M:System.Dynamic.DynamicMetaObject.BindConvert(System.Dynamic.ConvertBinder)" />
        <altmember cref="M:Microsoft.VisualBasic.Conversion.CTypeDynamic``1(System.Object)" />
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/early-late-binding/working-with-dynamic-objects.md">
          <span data-ttu-id="041cc-118">Trabajar con objetos dinámicos (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="041cc-118">Working with Dynamic Objects (Visual Basic)</span>
          </span>
        </related>
        <related type="Article" href="~/docs/csharp/programming-guide/types/walkthrough-creating-and-using-dynamic-objects.md">
          <span data-ttu-id="041cc-119">Tutorial: Crear y utilizar objetos dinámicos (C# y Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="041cc-119">Walkthrough: Creating and Using Dynamic Objects (C# and Visual Basic)</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="CTypeDynamic&lt;TargetType&gt;">
      <MemberSignature Language="C#" Value="public static TargetType CTypeDynamic&lt;TargetType&gt; (object Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static !!TargetType CTypeDynamic&lt;TargetType&gt;(object Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.CTypeDynamic``1(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function CTypeDynamic(Of TargetType) (Expression As Object) As TargetType" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TargetType&gt;&#xA; static TargetType CTypeDynamic(System::Object ^ Expression);" />
      <MemberSignature Language="F#" Value="static member CTypeDynamic : obj -&gt; 'argetType" Usage="Microsoft.VisualBasic.Conversion.CTypeDynamic Expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TargetType</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TargetType" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="Expression" Type="System.Object" />
      </Parameters>
      <Docs>
        <typeparam name="TargetType">
          <span data-ttu-id="041cc-120">Tipo al que se va a convertir el objeto.</span>
          <span class="sxs-lookup">
            <span data-stu-id="041cc-120">The type to which to convert the object.</span>
          </span>
        </typeparam>
        <param name="Expression">
          <span data-ttu-id="041cc-121">Objeto que se va a convertir.</span>
          <span class="sxs-lookup">
            <span data-stu-id="041cc-121">The object to convert.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="041cc-122">Convierte un objeto al tipo genérico especificado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="041cc-122">Converts an object to the specified generic type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="041cc-123">Objeto con tipos estáticos como el tipo genérico solicitado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="041cc-123">An object statically typed as the requested generic type.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="041cc-124">El `CTypeDynamic` método convierte el objeto pasado como el `Expression` parámetro al tipo especificado por el tipo del parámetro genérico.</span><span class="sxs-lookup"><span data-stu-id="041cc-124">The `CTypeDynamic` method converts the object passed as the `Expression` parameter to the type specified by the type of the generic parameter.</span></span> <span data-ttu-id="041cc-125">Si el objeto es un objeto dinámico, el `CTypeDynamic` método aplica a las conversiones dinámicas disponibles.</span><span class="sxs-lookup"><span data-stu-id="041cc-125">If the object is a dynamic object, the `CTypeDynamic` method applies available dynamic conversions.</span></span>  
  
 <span data-ttu-id="041cc-126">El `CTypeDynamic` método aplica a las conversiones dinámicas de acuerdo con la semántica de conversión definida por el propio objeto.</span><span class="sxs-lookup"><span data-stu-id="041cc-126">The `CTypeDynamic` method applies dynamic conversions in accordance with the conversion semantics defined by the object itself.</span></span> <span data-ttu-id="041cc-127">Si un objeto dinámico se hereda de <xref:System.Dynamic.DynamicObject>, el `CTypeDynamic` método primero intenta realizar la conversión mediante una conversión estática definido por el usuario.</span><span class="sxs-lookup"><span data-stu-id="041cc-127">If a dynamic object inherits from <xref:System.Dynamic.DynamicObject>, the `CTypeDynamic` method first attempts to perform the conversion by using a user-defined, static conversion.</span></span> <span data-ttu-id="041cc-128">Si se produce un error en la conversión definida por el usuario, estática, el `CTypeDynamic` método intenta realizar la conversión mediante conversiones dinámicas.</span><span class="sxs-lookup"><span data-stu-id="041cc-128">If the user-defined, static conversion fails, the `CTypeDynamic` method attempts to perform the conversion by using dynamic conversions.</span></span> <span data-ttu-id="041cc-129">Si implementa un objeto dinámico <xref:System.Dynamic.IDynamicMetaObjectProvider>, el `CTypeDynamic` método da prioridad a las conversiones dinámicas a través de las conversiones estáticas definido por el usuario.</span><span class="sxs-lookup"><span data-stu-id="041cc-129">If a dynamic object implements <xref:System.Dynamic.IDynamicMetaObjectProvider>, the `CTypeDynamic` method gives precedence to dynamic conversions over user-defined, static conversions.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="041cc-130">En el ejemplo siguiente se usa el `CTypeDynamic` método para convertir un objeto dinámico en una cadena mediante la conversión definida por el objeto dinámico.</span><span class="sxs-lookup"><span data-stu-id="041cc-130">The following example uses the `CTypeDynamic` method to convert a dynamic object to a string by using the conversion defined by the dynamic object.</span></span>  
  
```vb  
Imports System.Dynamic  
  
Module Module1  
    Sub Main()  
        Dim dyn As Object = New SampleDynamicObject  
        Dim str = CTypeDynamic(Of String)(dyn)  
        Console.WriteLine(str)  
    End Sub  
End Module  
  
Class SampleDynamicObject  
    Inherits DynamicObject  
  
    Public Overrides Function TryConvert(ByVal binder As ConvertBinder,  
                                         ByRef result As Object) As Boolean  
  
        If binder.Type = GetType(String) Then  
            result = "Sample String"  
            Return True  
        End If  
  
        Return False  
    End Function  
End Class  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Dynamic.DynamicObject.TryConvert(System.Dynamic.ConvertBinder,System.Object@)" />
        <altmember cref="M:System.Dynamic.DynamicMetaObject.BindConvert(System.Dynamic.ConvertBinder)" />
        <altmember cref="M:Microsoft.VisualBasic.Conversion.CTypeDynamic(System.Object,System.Type)" />
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/early-late-binding/working-with-dynamic-objects.md">
          <span data-ttu-id="041cc-131">Trabajar con objetos dinámicos (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="041cc-131">Working with Dynamic Objects (Visual Basic)</span>
          </span>
        </related>
        <related type="Article" href="~/docs/csharp/programming-guide/types/walkthrough-creating-and-using-dynamic-objects.md">
          <span data-ttu-id="041cc-132">Tutorial: Crear y utilizar objetos dinámicos (C# y Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="041cc-132">Walkthrough: Creating and Using Dynamic Objects (C# and Visual Basic)</span>
          </span>
        </related>
      </Docs>
    </Member>
    <MemberGroup MemberName="ErrorToString">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="041cc-133">Devuelve el mensaje de error que corresponde a un número de error determinado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="041cc-133">Returns the error message that corresponds to a given error number.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ErrorToString">
      <MemberSignature Language="C#" Value="public static string ErrorToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public static string ErrorToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.ErrorToString" />
      <MemberSignature Language="VB.NET" Value="Public Function ErrorToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ ErrorToString();" />
      <MemberSignature Language="F#" Value="static member ErrorToString : unit -&gt; string" Usage="Microsoft.VisualBasic.Conversion.ErrorToString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="041cc-134">Devuelve el mensaje de error que corresponde a un número de error determinado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="041cc-134">Returns the error message that corresponds to a given error number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="041cc-135">Mensaje de error correspondiente al error en tiempo de ejecución más reciente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="041cc-135">The error message that corresponds to the most recent run-time error.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="041cc-136">El `ErrorToString` función examina los valores de propiedad de la `Err` objeto para identificar el error de tiempo de ejecución más reciente.</span><span class="sxs-lookup"><span data-stu-id="041cc-136">The `ErrorToString` function examines the property settings of the `Err` object to identify the most recent run-time error.</span></span> <span data-ttu-id="041cc-137">El valor devuelto de la `ErrorToString` función corresponde a la `Description` propiedad de la `Err` objeto.</span><span class="sxs-lookup"><span data-stu-id="041cc-137">The return value of the `ErrorToString` function corresponds to the `Description` property of the `Err` object.</span></span> <span data-ttu-id="041cc-138">Si no se ha producido ningún error de tiempo de ejecución, `ErrorToString` devuelve una cadena de longitud cero ("").</span><span class="sxs-lookup"><span data-stu-id="041cc-138">If no run-time error has occurred, `ErrorToString` returns a zero-length string ("").</span></span>  
  
 <span data-ttu-id="041cc-139">En la versión 6.0 y versiones anterior de Visual Basic, esta funcionalidad se proporciona mediante el `Error` función.</span><span class="sxs-lookup"><span data-stu-id="041cc-139">In Visual Basic version 6.0 and earlier, this functionality was provided by the `Error` function.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="041cc-140">El siguiente código utiliza el `ErrorToString` función para mostrar mensajes de error que corresponden a los números de error especificado.</span><span class="sxs-lookup"><span data-stu-id="041cc-140">The following code uses the `ErrorToString` function to display error messages that correspond to the specified error numbers.</span></span>  
  
 [!code-vb[VbVbalrCatRef#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="041cc-141">
            <paramref name="ErrorNumber" /> está fuera del intervalo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="041cc-141">
              <paramref name="ErrorNumber" /> is out of range.</span>
          </span>
        </exception>
        <altmember cref="T:Microsoft.VisualBasic.ErrObject" />
        <altmember cref="P:Microsoft.VisualBasic.ErrObject.Description" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <Member MemberName="ErrorToString">
      <MemberSignature Language="C#" Value="public static string ErrorToString (int ErrorNumber);" />
      <MemberSignature Language="ILAsm" Value=".method public static string ErrorToString(int32 ErrorNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.ErrorToString(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function ErrorToString (ErrorNumber As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ ErrorToString(int ErrorNumber);" />
      <MemberSignature Language="F#" Value="static member ErrorToString : int -&gt; string" Usage="Microsoft.VisualBasic.Conversion.ErrorToString ErrorNumber" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ErrorNumber" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="ErrorNumber">
          <span data-ttu-id="041cc-142">Opcional.</span>
          <span class="sxs-lookup">
            <span data-stu-id="041cc-142">Optional.</span>
          </span>
          <span data-ttu-id="041cc-143">Cualquier número de error válido.</span>
          <span class="sxs-lookup">
            <span data-stu-id="041cc-143">Any valid error number.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="041cc-144">Devuelve el mensaje de error que corresponde a un número de error determinado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="041cc-144">Returns the error message that corresponds to a given error number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="041cc-145">Mensaje de error que corresponde a un número de error determinado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="041cc-145">The error message that corresponds to a given error number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="041cc-146">El `ErrorToString` función examina los valores de propiedad de la `Err` objeto para identificar el error de tiempo de ejecución más reciente.</span><span class="sxs-lookup"><span data-stu-id="041cc-146">The `ErrorToString` function examines the property settings of the `Err` object to identify the most recent run-time error.</span></span> <span data-ttu-id="041cc-147">El valor devuelto de la `ErrorToString` función corresponde a la `Description` propiedad de la `Err` objeto.</span><span class="sxs-lookup"><span data-stu-id="041cc-147">The return value of the `ErrorToString` function corresponds to the `Description` property of the `Err` object.</span></span> <span data-ttu-id="041cc-148">Si `ErrorNumber` es un número de error válido pero no está definido, `ErrorToString` devuelve la cadena `"Application-defined or object-defined error."` si `ErrorNumber` no es válido, se produce un error.</span><span class="sxs-lookup"><span data-stu-id="041cc-148">If `ErrorNumber` is a valid error number but is not defined, `ErrorToString` returns the string `"Application-defined or object-defined error."` If `ErrorNumber` is not valid, an error occurs.</span></span> <span data-ttu-id="041cc-149">Si `ErrorNumber` se omite, el mensaje correspondiente a la más reciente se devuelve el error de tiempo de ejecución.</span><span class="sxs-lookup"><span data-stu-id="041cc-149">If `ErrorNumber` is omitted, the message corresponding to the most recent run-time error is returned.</span></span> <span data-ttu-id="041cc-150">Si no se ha producido ningún error de tiempo de ejecución o `ErrorNumber` es 0, `ErrorToString` devuelve una cadena de longitud cero ("").</span><span class="sxs-lookup"><span data-stu-id="041cc-150">If no run-time error has occurred or `ErrorNumber` is 0, `ErrorToString` returns a zero-length string ("").</span></span>  
  
 <span data-ttu-id="041cc-151">En la versión 6.0 y versiones anterior de Visual Basic, esta funcionalidad se proporciona mediante el `Error` función.</span><span class="sxs-lookup"><span data-stu-id="041cc-151">In Visual Basic version 6.0 and earlier, this functionality was provided by the `Error` function.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="041cc-152">El siguiente código utiliza el `ErrorToString` función para mostrar mensajes de error que corresponden a los números de error especificado.</span><span class="sxs-lookup"><span data-stu-id="041cc-152">The following code uses the `ErrorToString` function to display error messages that correspond to the specified error numbers.</span></span>  
  
 [!code-vb[VbVbalrCatRef#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="041cc-153">
            <paramref name="ErrorNumber" /> está fuera del intervalo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="041cc-153">
              <paramref name="ErrorNumber" /> is out of range.</span>
          </span>
        </exception>
        <altmember cref="T:Microsoft.VisualBasic.ErrObject" />
        <altmember cref="P:Microsoft.VisualBasic.ErrObject.Description" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Fix">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="041cc-154">Devuelve la parte correspondiente al entero de un número.</span>
          <span class="sxs-lookup">
            <span data-stu-id="041cc-154">Return the integer portion of a number.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Fix">
      <MemberSignature Language="C#" Value="public static decimal Fix (decimal Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype System.Decimal Fix(valuetype System.Decimal Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Fix(System.Decimal)" />
      <MemberSignature Language="VB.NET" Value="Public Function Fix (Number As Decimal) As Decimal" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Decimal Fix(System::Decimal Number);" />
      <MemberSignature Language="F#" Value="static member Fix : decimal -&gt; decimal" Usage="Microsoft.VisualBasic.Conversion.Fix Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Decimal</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Decimal" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="041cc-155">Obligatorio.</span>
          <span class="sxs-lookup">
            <span data-stu-id="041cc-155">Required.</span>
          </span>
          <span data-ttu-id="041cc-156">Número de tipo <see langword="Double" /> o cualquier expresión numérica válida.</span>
          <span class="sxs-lookup">
            <span data-stu-id="041cc-156">A number of type <see langword="Double" /> or any valid numeric expression.</span>
          </span>
          <span data-ttu-id="041cc-157">Si <c>Number</c> contiene <see langword="Nothing" />, se devuelve <see langword="Nothing" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="041cc-157">If <c>Number</c> contains <see langword="Nothing" />, <see langword="Nothing" /> is returned.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="041cc-158">Devuelve la parte correspondiente al entero de un número.</span>
          <span class="sxs-lookup">
            <span data-stu-id="041cc-158">Return the integer portion of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="041cc-159">Devuelve la parte correspondiente al entero de un número.</span>
          <span class="sxs-lookup">
            <span data-stu-id="041cc-159">Return the integer portion of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="041cc-160">Tanto el `Int` y `Fix` funciones quitan la parte fraccionaria de `Number` y devolver el valor entero resultante.</span><span class="sxs-lookup"><span data-stu-id="041cc-160">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="041cc-161">La diferencia entre `Int` y `Fix` funciones es que, si `Number` es negativo, `Int` devuelve el primer entero negativo menor o igual a `Number`, mientras que `Fix` devuelve el primer entero negativo mayor o igual que `Number`.</span><span class="sxs-lookup"><span data-stu-id="041cc-161">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="041cc-162">Por ejemplo, `Int` convierte -8,4 en -9, y `Fix` convierte -8,4 en -8.</span><span class="sxs-lookup"><span data-stu-id="041cc-162">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="041cc-163">`Fix(number)` es equivalente a `Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="041cc-163">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="041cc-164">Este ejemplo se muestra cómo el `Int` y `Fix` funciones devuelven la parte entera de números.</span><span class="sxs-lookup"><span data-stu-id="041cc-164">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="041cc-165">En el caso de un argumento de número negativo, el `Int` función devuelve el primer entero negativo menor o igual al número; el `Fix` función devuelve el primer entero negativo mayor o igual que el número.</span><span class="sxs-lookup"><span data-stu-id="041cc-165">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="041cc-166">El ejemplo siguiente requiere que especifique `Option Strict Off` porque las conversiones implícitas de tipo `Double` escriba `Integer` no se permiten en `Option Strict On`:</span><span class="sxs-lookup"><span data-stu-id="041cc-166">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="041cc-167">Puede usar el `CInt` función para convertir otros tipos de datos explícitamente al tipo `Integer` con `Option Strict Off`.</span><span class="sxs-lookup"><span data-stu-id="041cc-167">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="041cc-168">Sin embargo, `CInt` redondea al entero más cercano en lugar de truncar la parte fraccionaria de números.</span><span class="sxs-lookup"><span data-stu-id="041cc-168">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="041cc-169">Por ejemplo:</span><span class="sxs-lookup"><span data-stu-id="041cc-169">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="041cc-170">Puede usar el `CInt` función del resultado de una llamada a `Fix` o `Int` para realizar la conversión explícita al entero sin redondear.</span><span class="sxs-lookup"><span data-stu-id="041cc-170">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="041cc-171">Por ejemplo:</span><span class="sxs-lookup"><span data-stu-id="041cc-171">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="041cc-172">Para obtener más información sobre `CInt`, consulte [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span><span class="sxs-lookup"><span data-stu-id="041cc-172">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="041cc-173">No se ha especificado Number.</span>
          <span class="sxs-lookup">
            <span data-stu-id="041cc-173">Number is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="041cc-174">Number no es un tipo numérico.</span>
          <span class="sxs-lookup">
            <span data-stu-id="041cc-174">Number is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">
          <span data-ttu-id="041cc-175">Type Conversion Functions</span>
          <span class="sxs-lookup">
            <span data-stu-id="041cc-175">Type Conversion Functions</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md">
          <span data-ttu-id="041cc-176">Resumen de tipos de datos (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="041cc-176">Data Type Summary (Visual Basic)</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/math-summary.md">
          <span data-ttu-id="041cc-177">Resumen de funciones matemáticas</span>
          <span class="sxs-lookup">
            <span data-stu-id="041cc-177">Math Summary</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/math-functions.md">
          <span data-ttu-id="041cc-178">Funciones matemáticas (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="041cc-178">Math Functions (Visual Basic)</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md">
          <span data-ttu-id="041cc-179">Resumen de conversión</span>
          <span class="sxs-lookup">
            <span data-stu-id="041cc-179">Conversion Summary</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Fix">
      <MemberSignature Language="C#" Value="public static double Fix (double Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static float64 Fix(float64 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Fix(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Fix (Number As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double Fix(double Number);" />
      <MemberSignature Language="F#" Value="static member Fix : double -&gt; double" Usage="Microsoft.VisualBasic.Conversion.Fix Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="041cc-180">Obligatorio.</span>
          <span class="sxs-lookup">
            <span data-stu-id="041cc-180">Required.</span>
          </span>
          <span data-ttu-id="041cc-181">Número de tipo <see langword="Double" /> o cualquier expresión numérica válida.</span>
          <span class="sxs-lookup">
            <span data-stu-id="041cc-181">A number of type <see langword="Double" /> or any valid numeric expression.</span>
          </span>
          <span data-ttu-id="041cc-182">Si <c>Number</c> contiene <see langword="Nothing" />, se devuelve <see langword="Nothing" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="041cc-182">If <c>Number</c> contains <see langword="Nothing" />, <see langword="Nothing" /> is returned.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="041cc-183">Devuelve la parte correspondiente al entero de un número.</span>
          <span class="sxs-lookup">
            <span data-stu-id="041cc-183">Return the integer portion of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="041cc-184">Devuelve la parte correspondiente al entero de un número.</span>
          <span class="sxs-lookup">
            <span data-stu-id="041cc-184">Return the integer portion of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="041cc-185">Tanto el `Int` y `Fix` funciones quitan la parte fraccionaria de `Number` y devolver el valor entero resultante.</span><span class="sxs-lookup"><span data-stu-id="041cc-185">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="041cc-186">La diferencia entre `Int` y `Fix` funciones es que, si `Number` es negativo, `Int` devuelve el primer entero negativo menor o igual a `Number`, mientras que `Fix` devuelve el primer entero negativo mayor o igual que `Number`.</span><span class="sxs-lookup"><span data-stu-id="041cc-186">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="041cc-187">Por ejemplo, `Int` convierte -8,4 en -9, y `Fix` convierte -8,4 en -8.</span><span class="sxs-lookup"><span data-stu-id="041cc-187">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="041cc-188">`Fix(number)` es equivalente a `Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="041cc-188">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="041cc-189">Este ejemplo se muestra cómo el `Int` y `Fix` funciones devuelven la parte entera de números.</span><span class="sxs-lookup"><span data-stu-id="041cc-189">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="041cc-190">En el caso de un argumento de número negativo, el `Int` función devuelve el primer entero negativo menor o igual al número; el `Fix` función devuelve el primer entero negativo mayor o igual que el número.</span><span class="sxs-lookup"><span data-stu-id="041cc-190">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="041cc-191">El ejemplo siguiente requiere que especifique `Option Strict Off` porque las conversiones implícitas de tipo `Double` escriba `Integer` no se permiten en `Option Strict On`:</span><span class="sxs-lookup"><span data-stu-id="041cc-191">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="041cc-192">Puede usar el `CInt` función para convertir otros tipos de datos explícitamente al tipo `Integer` con `Option Strict Off`.</span><span class="sxs-lookup"><span data-stu-id="041cc-192">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="041cc-193">Sin embargo, `CInt` redondea al entero más cercano en lugar de truncar la parte fraccionaria de números.</span><span class="sxs-lookup"><span data-stu-id="041cc-193">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="041cc-194">Por ejemplo:</span><span class="sxs-lookup"><span data-stu-id="041cc-194">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="041cc-195">Puede usar el `CInt` función del resultado de una llamada a `Fix` o `Int` para realizar la conversión explícita al entero sin redondear.</span><span class="sxs-lookup"><span data-stu-id="041cc-195">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="041cc-196">Por ejemplo:</span><span class="sxs-lookup"><span data-stu-id="041cc-196">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="041cc-197">Para obtener más información sobre `CInt`, consulte [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span><span class="sxs-lookup"><span data-stu-id="041cc-197">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="041cc-198">No se ha especificado Number.</span>
          <span class="sxs-lookup">
            <span data-stu-id="041cc-198">Number is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="041cc-199">Number no es un tipo numérico.</span>
          <span class="sxs-lookup">
            <span data-stu-id="041cc-199">Number is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">
          <span data-ttu-id="041cc-200">Type Conversion Functions</span>
          <span class="sxs-lookup">
            <span data-stu-id="041cc-200">Type Conversion Functions</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md">
          <span data-ttu-id="041cc-201">Resumen de tipos de datos (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="041cc-201">Data Type Summary (Visual Basic)</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/math-summary.md">
          <span data-ttu-id="041cc-202">Resumen de funciones matemáticas</span>
          <span class="sxs-lookup">
            <span data-stu-id="041cc-202">Math Summary</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/math-functions.md">
          <span data-ttu-id="041cc-203">Funciones matemáticas (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="041cc-203">Math Functions (Visual Basic)</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md">
          <span data-ttu-id="041cc-204">Resumen de conversión</span>
          <span class="sxs-lookup">
            <span data-stu-id="041cc-204">Conversion Summary</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Fix">
      <MemberSignature Language="C#" Value="public static short Fix (short Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static int16 Fix(int16 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Fix(System.Int16)" />
      <MemberSignature Language="VB.NET" Value="Public Function Fix (Number As Short) As Short" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static short Fix(short Number);" />
      <MemberSignature Language="F#" Value="static member Fix : int16 -&gt; int16" Usage="Microsoft.VisualBasic.Conversion.Fix Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int16</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int16" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="041cc-205">Obligatorio.</span>
          <span class="sxs-lookup">
            <span data-stu-id="041cc-205">Required.</span>
          </span>
          <span data-ttu-id="041cc-206">Número de tipo <see langword="Double" /> o cualquier expresión numérica válida.</span>
          <span class="sxs-lookup">
            <span data-stu-id="041cc-206">A number of type <see langword="Double" /> or any valid numeric expression.</span>
          </span>
          <span data-ttu-id="041cc-207">Si <c>Number</c> contiene <see langword="Nothing" />, se devuelve <see langword="Nothing" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="041cc-207">If <c>Number</c> contains <see langword="Nothing" />, <see langword="Nothing" /> is returned.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="041cc-208">Devuelve la parte correspondiente al entero de un número.</span>
          <span class="sxs-lookup">
            <span data-stu-id="041cc-208">Return the integer portion of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="041cc-209">Devuelve la parte correspondiente al entero de un número.</span>
          <span class="sxs-lookup">
            <span data-stu-id="041cc-209">Return the integer portion of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="041cc-210">Tanto el `Int` y `Fix` funciones quitan la parte fraccionaria de `Number` y devolver el valor entero resultante.</span><span class="sxs-lookup"><span data-stu-id="041cc-210">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="041cc-211">La diferencia entre `Int` y `Fix` funciones es que, si `Number` es negativo, `Int` devuelve el primer entero negativo menor o igual a `Number`, mientras que `Fix` devuelve el primer entero negativo mayor o igual que `Number`.</span><span class="sxs-lookup"><span data-stu-id="041cc-211">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="041cc-212">Por ejemplo, `Int` convierte -8,4 en -9, y `Fix` convierte -8,4 en -8.</span><span class="sxs-lookup"><span data-stu-id="041cc-212">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="041cc-213">`Fix(number)` es equivalente a `Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="041cc-213">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="041cc-214">Este ejemplo se muestra cómo el `Int` y `Fix` funciones devuelven la parte entera de números.</span><span class="sxs-lookup"><span data-stu-id="041cc-214">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="041cc-215">En el caso de un argumento de número negativo, el `Int` función devuelve el primer entero negativo menor o igual al número; el `Fix` función devuelve el primer entero negativo mayor o igual que el número.</span><span class="sxs-lookup"><span data-stu-id="041cc-215">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="041cc-216">El ejemplo siguiente requiere que especifique `Option Strict Off` porque las conversiones implícitas de tipo `Double` escriba `Integer` no se permiten en `Option Strict On`:</span><span class="sxs-lookup"><span data-stu-id="041cc-216">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="041cc-217">Puede usar el `CInt` función para convertir otros tipos de datos explícitamente al tipo `Integer` con `Option Strict Off`.</span><span class="sxs-lookup"><span data-stu-id="041cc-217">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="041cc-218">Sin embargo, `CInt` redondea al entero más cercano en lugar de truncar la parte fraccionaria de números.</span><span class="sxs-lookup"><span data-stu-id="041cc-218">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="041cc-219">Por ejemplo:</span><span class="sxs-lookup"><span data-stu-id="041cc-219">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="041cc-220">Puede usar el `CInt` función del resultado de una llamada a `Fix` o `Int` para realizar la conversión explícita al entero sin redondear.</span><span class="sxs-lookup"><span data-stu-id="041cc-220">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="041cc-221">Por ejemplo:</span><span class="sxs-lookup"><span data-stu-id="041cc-221">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="041cc-222">Para obtener más información sobre `CInt`, consulte [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span><span class="sxs-lookup"><span data-stu-id="041cc-222">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="041cc-223">No se ha especificado Number.</span>
          <span class="sxs-lookup">
            <span data-stu-id="041cc-223">Number is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="041cc-224">Number no es un tipo numérico.</span>
          <span class="sxs-lookup">
            <span data-stu-id="041cc-224">Number is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">
          <span data-ttu-id="041cc-225">Type Conversion Functions</span>
          <span class="sxs-lookup">
            <span data-stu-id="041cc-225">Type Conversion Functions</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md">
          <span data-ttu-id="041cc-226">Resumen de tipos de datos (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="041cc-226">Data Type Summary (Visual Basic)</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/math-summary.md">
          <span data-ttu-id="041cc-227">Resumen de funciones matemáticas</span>
          <span class="sxs-lookup">
            <span data-stu-id="041cc-227">Math Summary</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/math-functions.md">
          <span data-ttu-id="041cc-228">Funciones matemáticas (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="041cc-228">Math Functions (Visual Basic)</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md">
          <span data-ttu-id="041cc-229">Resumen de conversión</span>
          <span class="sxs-lookup">
            <span data-stu-id="041cc-229">Conversion Summary</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Fix">
      <MemberSignature Language="C#" Value="public static int Fix (int Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Fix(int32 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Fix(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Fix (Number As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Fix(int Number);" />
      <MemberSignature Language="F#" Value="static member Fix : int -&gt; int" Usage="Microsoft.VisualBasic.Conversion.Fix Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="041cc-230">Obligatorio.</span>
          <span class="sxs-lookup">
            <span data-stu-id="041cc-230">Required.</span>
          </span>
          <span data-ttu-id="041cc-231">Número de tipo <see langword="Double" /> o cualquier expresión numérica válida.</span>
          <span class="sxs-lookup">
            <span data-stu-id="041cc-231">A number of type <see langword="Double" /> or any valid numeric expression.</span>
          </span>
          <span data-ttu-id="041cc-232">Si <c>Number</c> contiene <see langword="Nothing" />, se devuelve <see langword="Nothing" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="041cc-232">If <c>Number</c> contains <see langword="Nothing" />, <see langword="Nothing" /> is returned.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="041cc-233">Devuelve la parte correspondiente al entero de un número.</span>
          <span class="sxs-lookup">
            <span data-stu-id="041cc-233">Return the integer portion of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="041cc-234">Devuelve la parte correspondiente al entero de un número.</span>
          <span class="sxs-lookup">
            <span data-stu-id="041cc-234">Return the integer portion of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="041cc-235">Tanto el `Int` y `Fix` funciones quitan la parte fraccionaria de `Number` y devolver el valor entero resultante.</span><span class="sxs-lookup"><span data-stu-id="041cc-235">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="041cc-236">La diferencia entre `Int` y `Fix` funciones es que, si `Number` es negativo, `Int` devuelve el primer entero negativo menor o igual a `Number`, mientras que `Fix` devuelve el primer entero negativo mayor o igual que `Number`.</span><span class="sxs-lookup"><span data-stu-id="041cc-236">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="041cc-237">Por ejemplo, `Int` convierte -8,4 en -9, y `Fix` convierte -8,4 en -8.</span><span class="sxs-lookup"><span data-stu-id="041cc-237">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="041cc-238">`Fix(number)` es equivalente a `Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="041cc-238">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="041cc-239">Este ejemplo se muestra cómo el `Int` y `Fix` funciones devuelven la parte entera de números.</span><span class="sxs-lookup"><span data-stu-id="041cc-239">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="041cc-240">En el caso de un argumento de número negativo, el `Int` función devuelve el primer entero negativo menor o igual al número; el `Fix` función devuelve el primer entero negativo mayor o igual que el número.</span><span class="sxs-lookup"><span data-stu-id="041cc-240">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="041cc-241">El ejemplo siguiente requiere que especifique `Option Strict Off` porque las conversiones implícitas de tipo `Double` escriba `Integer` no se permiten en `Option Strict On`:</span><span class="sxs-lookup"><span data-stu-id="041cc-241">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="041cc-242">Puede usar el `CInt` función para convertir otros tipos de datos explícitamente al tipo `Integer` con `Option Strict Off`.</span><span class="sxs-lookup"><span data-stu-id="041cc-242">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="041cc-243">Sin embargo, `CInt` redondea al entero más cercano en lugar de truncar la parte fraccionaria de números.</span><span class="sxs-lookup"><span data-stu-id="041cc-243">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="041cc-244">Por ejemplo:</span><span class="sxs-lookup"><span data-stu-id="041cc-244">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="041cc-245">Puede usar el `CInt` función del resultado de una llamada a `Fix` o `Int` para realizar la conversión explícita al entero sin redondear.</span><span class="sxs-lookup"><span data-stu-id="041cc-245">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="041cc-246">Por ejemplo:</span><span class="sxs-lookup"><span data-stu-id="041cc-246">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="041cc-247">Para obtener más información sobre `CInt`, consulte [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span><span class="sxs-lookup"><span data-stu-id="041cc-247">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="041cc-248">No se ha especificado Number.</span>
          <span class="sxs-lookup">
            <span data-stu-id="041cc-248">Number is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="041cc-249">Number no es un tipo numérico.</span>
          <span class="sxs-lookup">
            <span data-stu-id="041cc-249">Number is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">
          <span data-ttu-id="041cc-250">Type Conversion Functions</span>
          <span class="sxs-lookup">
            <span data-stu-id="041cc-250">Type Conversion Functions</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md">
          <span data-ttu-id="041cc-251">Resumen de tipos de datos (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="041cc-251">Data Type Summary (Visual Basic)</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/math-summary.md">
          <span data-ttu-id="041cc-252">Resumen de funciones matemáticas</span>
          <span class="sxs-lookup">
            <span data-stu-id="041cc-252">Math Summary</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/math-functions.md">
          <span data-ttu-id="041cc-253">Funciones matemáticas (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="041cc-253">Math Functions (Visual Basic)</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md">
          <span data-ttu-id="041cc-254">Resumen de conversión</span>
          <span class="sxs-lookup">
            <span data-stu-id="041cc-254">Conversion Summary</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Fix">
      <MemberSignature Language="C#" Value="public static long Fix (long Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static int64 Fix(int64 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Fix(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Function Fix (Number As Long) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static long Fix(long Number);" />
      <MemberSignature Language="F#" Value="static member Fix : int64 -&gt; int64" Usage="Microsoft.VisualBasic.Conversion.Fix Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="041cc-255">Obligatorio.</span>
          <span class="sxs-lookup">
            <span data-stu-id="041cc-255">Required.</span>
          </span>
          <span data-ttu-id="041cc-256">Número de tipo <see langword="Double" /> o cualquier expresión numérica válida.</span>
          <span class="sxs-lookup">
            <span data-stu-id="041cc-256">A number of type <see langword="Double" /> or any valid numeric expression.</span>
          </span>
          <span data-ttu-id="041cc-257">Si <c>Number</c> contiene <see langword="Nothing" />, se devuelve <see langword="Nothing" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="041cc-257">If <c>Number</c> contains <see langword="Nothing" />, <see langword="Nothing" /> is returned.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="041cc-258">Devuelve la parte correspondiente al entero de un número.</span>
          <span class="sxs-lookup">
            <span data-stu-id="041cc-258">Return the integer portion of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="041cc-259">Devuelve la parte correspondiente al entero de un número.</span>
          <span class="sxs-lookup">
            <span data-stu-id="041cc-259">Return the integer portion of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="041cc-260">Tanto el `Int` y `Fix` funciones quitan la parte fraccionaria de `Number` y devolver el valor entero resultante.</span><span class="sxs-lookup"><span data-stu-id="041cc-260">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="041cc-261">La diferencia entre `Int` y `Fix` funciones es que, si `Number` es negativo, `Int` devuelve el primer entero negativo menor o igual a `Number`, mientras que `Fix` devuelve el primer entero negativo mayor o igual que `Number`.</span><span class="sxs-lookup"><span data-stu-id="041cc-261">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="041cc-262">Por ejemplo, `Int` convierte -8,4 en -9, y `Fix` convierte -8,4 en -8.</span><span class="sxs-lookup"><span data-stu-id="041cc-262">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="041cc-263">`Fix(number)` es equivalente a `Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="041cc-263">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="041cc-264">Este ejemplo se muestra cómo el `Int` y `Fix` funciones devuelven la parte entera de números.</span><span class="sxs-lookup"><span data-stu-id="041cc-264">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="041cc-265">En el caso de un argumento de número negativo, el `Int` función devuelve el primer entero negativo menor o igual al número; el `Fix` función devuelve el primer entero negativo mayor o igual que el número.</span><span class="sxs-lookup"><span data-stu-id="041cc-265">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="041cc-266">El ejemplo siguiente requiere que especifique `Option Strict Off` porque las conversiones implícitas de tipo `Double` escriba `Integer` no se permiten en `Option Strict On`:</span><span class="sxs-lookup"><span data-stu-id="041cc-266">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="041cc-267">Puede usar el `CInt` función para convertir otros tipos de datos explícitamente al tipo `Integer` con `Option Strict Off`.</span><span class="sxs-lookup"><span data-stu-id="041cc-267">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="041cc-268">Sin embargo, `CInt` redondea al entero más cercano en lugar de truncar la parte fraccionaria de números.</span><span class="sxs-lookup"><span data-stu-id="041cc-268">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="041cc-269">Por ejemplo:</span><span class="sxs-lookup"><span data-stu-id="041cc-269">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="041cc-270">Puede usar el `CInt` función del resultado de una llamada a `Fix` o `Int` para realizar la conversión explícita al entero sin redondear.</span><span class="sxs-lookup"><span data-stu-id="041cc-270">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="041cc-271">Por ejemplo:</span><span class="sxs-lookup"><span data-stu-id="041cc-271">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="041cc-272">Para obtener más información sobre `CInt`, consulte [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span><span class="sxs-lookup"><span data-stu-id="041cc-272">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="041cc-273">No se ha especificado Number.</span>
          <span class="sxs-lookup">
            <span data-stu-id="041cc-273">Number is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="041cc-274">Number no es un tipo numérico.</span>
          <span class="sxs-lookup">
            <span data-stu-id="041cc-274">Number is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">
          <span data-ttu-id="041cc-275">Type Conversion Functions</span>
          <span class="sxs-lookup">
            <span data-stu-id="041cc-275">Type Conversion Functions</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md">
          <span data-ttu-id="041cc-276">Resumen de tipos de datos (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="041cc-276">Data Type Summary (Visual Basic)</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/math-summary.md">
          <span data-ttu-id="041cc-277">Resumen de funciones matemáticas</span>
          <span class="sxs-lookup">
            <span data-stu-id="041cc-277">Math Summary</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/math-functions.md">
          <span data-ttu-id="041cc-278">Funciones matemáticas (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="041cc-278">Math Functions (Visual Basic)</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md">
          <span data-ttu-id="041cc-279">Resumen de conversión</span>
          <span class="sxs-lookup">
            <span data-stu-id="041cc-279">Conversion Summary</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Fix">
      <MemberSignature Language="C#" Value="public static object Fix (object Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static object Fix(object Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Fix(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Fix (Number As Object) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ Fix(System::Object ^ Number);" />
      <MemberSignature Language="F#" Value="static member Fix : obj -&gt; obj" Usage="Microsoft.VisualBasic.Conversion.Fix Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="041cc-280">Obligatorio.</span>
          <span class="sxs-lookup">
            <span data-stu-id="041cc-280">Required.</span>
          </span>
          <span data-ttu-id="041cc-281">Número de tipo <see langword="Double" /> o cualquier expresión numérica válida.</span>
          <span class="sxs-lookup">
            <span data-stu-id="041cc-281">A number of type <see langword="Double" /> or any valid numeric expression.</span>
          </span>
          <span data-ttu-id="041cc-282">Si <c>Number</c> contiene <see langword="Nothing" />, se devuelve <see langword="Nothing" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="041cc-282">If <c>Number</c> contains <see langword="Nothing" />, <see langword="Nothing" /> is returned.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="041cc-283">Devuelve la parte correspondiente al entero de un número.</span>
          <span class="sxs-lookup">
            <span data-stu-id="041cc-283">Return the integer portion of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="041cc-284">Devuelve la parte correspondiente al entero de un número.</span>
          <span class="sxs-lookup">
            <span data-stu-id="041cc-284">Return the integer portion of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="041cc-285">Tanto el `Int` y `Fix` funciones quitan la parte fraccionaria de `Number` y devolver el valor entero resultante.</span><span class="sxs-lookup"><span data-stu-id="041cc-285">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="041cc-286">La diferencia entre `Int` y `Fix` funciones es que, si `Number` es negativo, `Int` devuelve el primer entero negativo menor o igual a `Number`, mientras que `Fix` devuelve el primer entero negativo mayor o igual que `Number`.</span><span class="sxs-lookup"><span data-stu-id="041cc-286">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="041cc-287">Por ejemplo, `Int` convierte -8,4 en -9, y `Fix` convierte -8,4 en -8.</span><span class="sxs-lookup"><span data-stu-id="041cc-287">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="041cc-288">`Fix(number)` es equivalente a `Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="041cc-288">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="041cc-289">Este ejemplo se muestra cómo el `Int` y `Fix` funciones devuelven la parte entera de números.</span><span class="sxs-lookup"><span data-stu-id="041cc-289">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="041cc-290">En el caso de un argumento de número negativo, el `Int` función devuelve el primer entero negativo menor o igual al número; el `Fix` función devuelve el primer entero negativo mayor o igual que el número.</span><span class="sxs-lookup"><span data-stu-id="041cc-290">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="041cc-291">El ejemplo siguiente requiere que especifique `Option Strict Off` porque las conversiones implícitas de tipo `Double` escriba `Integer` no se permiten en `Option Strict On`:</span><span class="sxs-lookup"><span data-stu-id="041cc-291">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="041cc-292">Puede usar el `CInt` función para convertir otros tipos de datos explícitamente al tipo `Integer` con `Option Strict Off`.</span><span class="sxs-lookup"><span data-stu-id="041cc-292">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="041cc-293">Sin embargo, `CInt` redondea al entero más cercano en lugar de truncar la parte fraccionaria de números.</span><span class="sxs-lookup"><span data-stu-id="041cc-293">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="041cc-294">Por ejemplo:</span><span class="sxs-lookup"><span data-stu-id="041cc-294">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="041cc-295">Puede usar el `CInt` función del resultado de una llamada a `Fix` o `Int` para realizar la conversión explícita al entero sin redondear.</span><span class="sxs-lookup"><span data-stu-id="041cc-295">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="041cc-296">Por ejemplo:</span><span class="sxs-lookup"><span data-stu-id="041cc-296">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="041cc-297">Para obtener más información sobre `CInt`, consulte [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span><span class="sxs-lookup"><span data-stu-id="041cc-297">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="041cc-298">No se ha especificado Number.</span>
          <span class="sxs-lookup">
            <span data-stu-id="041cc-298">Number is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="041cc-299">Number no es un tipo numérico.</span>
          <span class="sxs-lookup">
            <span data-stu-id="041cc-299">Number is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">
          <span data-ttu-id="041cc-300">Type Conversion Functions</span>
          <span class="sxs-lookup">
            <span data-stu-id="041cc-300">Type Conversion Functions</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md">
          <span data-ttu-id="041cc-301">Resumen de tipos de datos (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="041cc-301">Data Type Summary (Visual Basic)</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/math-summary.md">
          <span data-ttu-id="041cc-302">Resumen de funciones matemáticas</span>
          <span class="sxs-lookup">
            <span data-stu-id="041cc-302">Math Summary</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/math-functions.md">
          <span data-ttu-id="041cc-303">Funciones matemáticas (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="041cc-303">Math Functions (Visual Basic)</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md">
          <span data-ttu-id="041cc-304">Resumen de conversión</span>
          <span class="sxs-lookup">
            <span data-stu-id="041cc-304">Conversion Summary</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Fix">
      <MemberSignature Language="C#" Value="public static float Fix (float Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static float32 Fix(float32 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Fix(System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Function Fix (Number As Single) As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static float Fix(float Number);" />
      <MemberSignature Language="F#" Value="static member Fix : single -&gt; single" Usage="Microsoft.VisualBasic.Conversion.Fix Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="041cc-305">Obligatorio.</span>
          <span class="sxs-lookup">
            <span data-stu-id="041cc-305">Required.</span>
          </span>
          <span data-ttu-id="041cc-306">Número de tipo <see langword="Double" /> o cualquier expresión numérica válida.</span>
          <span class="sxs-lookup">
            <span data-stu-id="041cc-306">A number of type <see langword="Double" /> or any valid numeric expression.</span>
          </span>
          <span data-ttu-id="041cc-307">Si <c>Number</c> contiene <see langword="Nothing" />, se devuelve <see langword="Nothing" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="041cc-307">If <c>Number</c> contains <see langword="Nothing" />, <see langword="Nothing" /> is returned.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="041cc-308">Devuelve la parte correspondiente al entero de un número.</span>
          <span class="sxs-lookup">
            <span data-stu-id="041cc-308">Return the integer portion of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="041cc-309">Devuelve la parte correspondiente al entero de un número.</span>
          <span class="sxs-lookup">
            <span data-stu-id="041cc-309">Return the integer portion of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="041cc-310">Tanto el `Int` y `Fix` funciones quitan la parte fraccionaria de `Number` y devolver el valor entero resultante.</span><span class="sxs-lookup"><span data-stu-id="041cc-310">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="041cc-311">La diferencia entre `Int` y `Fix` funciones es que, si `Number` es negativo, `Int` devuelve el primer entero negativo menor o igual a `Number`, mientras que `Fix` devuelve el primer entero negativo mayor o igual que `Number`.</span><span class="sxs-lookup"><span data-stu-id="041cc-311">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="041cc-312">Por ejemplo, `Int` convierte -8,4 en -9, y `Fix` convierte -8,4 en -8.</span><span class="sxs-lookup"><span data-stu-id="041cc-312">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="041cc-313">`Fix(number)` es equivalente a `Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="041cc-313">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="041cc-314">Este ejemplo se muestra cómo el `Int` y `Fix` funciones devuelven la parte entera de números.</span><span class="sxs-lookup"><span data-stu-id="041cc-314">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="041cc-315">En el caso de un argumento de número negativo, el `Int` función devuelve el primer entero negativo menor o igual al número; el `Fix` función devuelve el primer entero negativo mayor o igual que el número.</span><span class="sxs-lookup"><span data-stu-id="041cc-315">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="041cc-316">El ejemplo siguiente requiere que especifique `Option Strict Off` porque las conversiones implícitas de tipo `Double` escriba `Integer` no se permiten en `Option Strict On`:</span><span class="sxs-lookup"><span data-stu-id="041cc-316">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="041cc-317">Puede usar el `CInt` función para convertir otros tipos de datos explícitamente al tipo `Integer` con `Option Strict Off`.</span><span class="sxs-lookup"><span data-stu-id="041cc-317">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="041cc-318">Sin embargo, `CInt` redondea al entero más cercano en lugar de truncar la parte fraccionaria de números.</span><span class="sxs-lookup"><span data-stu-id="041cc-318">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="041cc-319">Por ejemplo:</span><span class="sxs-lookup"><span data-stu-id="041cc-319">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="041cc-320">Puede usar el `CInt` función del resultado de una llamada a `Fix` o `Int` para realizar la conversión explícita al entero sin redondear.</span><span class="sxs-lookup"><span data-stu-id="041cc-320">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="041cc-321">Por ejemplo:</span><span class="sxs-lookup"><span data-stu-id="041cc-321">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="041cc-322">Para obtener más información sobre `CInt`, consulte [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span><span class="sxs-lookup"><span data-stu-id="041cc-322">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="041cc-323">No se ha especificado Number.</span>
          <span class="sxs-lookup">
            <span data-stu-id="041cc-323">Number is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="041cc-324">Number no es un tipo numérico.</span>
          <span class="sxs-lookup">
            <span data-stu-id="041cc-324">Number is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">
          <span data-ttu-id="041cc-325">Type Conversion Functions</span>
          <span class="sxs-lookup">
            <span data-stu-id="041cc-325">Type Conversion Functions</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md">
          <span data-ttu-id="041cc-326">Resumen de tipos de datos (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="041cc-326">Data Type Summary (Visual Basic)</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/math-summary.md">
          <span data-ttu-id="041cc-327">Resumen de funciones matemáticas</span>
          <span class="sxs-lookup">
            <span data-stu-id="041cc-327">Math Summary</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/math-functions.md">
          <span data-ttu-id="041cc-328">Funciones matemáticas (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="041cc-328">Math Functions (Visual Basic)</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md">
          <span data-ttu-id="041cc-329">Resumen de conversión</span>
          <span class="sxs-lookup">
            <span data-stu-id="041cc-329">Conversion Summary</span>
          </span>
        </related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Hex">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="041cc-330">Devuelve una cadena que representa el valor hexadecimal de un número.</span>
          <span class="sxs-lookup">
            <span data-stu-id="041cc-330">Returns a string representing the hexadecimal value of a number.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Hex">
      <MemberSignature Language="C#" Value="public static string Hex (byte Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Hex(unsigned int8 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Hex(System.Byte)" />
      <MemberSignature Language="VB.NET" Value="Public Function Hex (Number As Byte) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Hex(System::Byte Number);" />
      <MemberSignature Language="F#" Value="static member Hex : byte -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Hex Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Byte" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="041cc-331">Obligatorio.</span>
          <span class="sxs-lookup">
            <span data-stu-id="041cc-331">Required.</span>
          </span>
          <span data-ttu-id="041cc-332">Cualquier expresión numérica o expresión de tipo <see langword="String" /> válida.</span>
          <span class="sxs-lookup">
            <span data-stu-id="041cc-332">Any valid numeric expression or <see langword="String" /> expression.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="041cc-333">Devuelve una cadena que representa el valor hexadecimal de un número.</span>
          <span class="sxs-lookup">
            <span data-stu-id="041cc-333">Returns a string representing the hexadecimal value of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="041cc-334">Devuelve una cadena que representa el valor hexadecimal de un número.</span>
          <span class="sxs-lookup">
            <span data-stu-id="041cc-334">Returns a string representing the hexadecimal value of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="041cc-335">Si `Number` ya no es un número entero, se redondea al número entero más cercano antes de que se va a evaluar.</span><span class="sxs-lookup"><span data-stu-id="041cc-335">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="041cc-336">Si `Number` es</span><span class="sxs-lookup"><span data-stu-id="041cc-336">If `Number` is</span></span>|<span data-ttu-id="041cc-337">HEX devuelve</span><span class="sxs-lookup"><span data-stu-id="041cc-337">Hex returns</span></span>|  
|-|-|  
|<span data-ttu-id="041cc-338">Empty</span><span class="sxs-lookup"><span data-stu-id="041cc-338">Empty</span></span>|<span data-ttu-id="041cc-339">Cero (0)</span><span class="sxs-lookup"><span data-stu-id="041cc-339">Zero (0)</span></span>|  
|<span data-ttu-id="041cc-340">Cualquier valor numérico</span><span class="sxs-lookup"><span data-stu-id="041cc-340">Any numeric value</span></span>|<span data-ttu-id="041cc-341">Hasta dieciséis caracteres hexadecimales</span><span class="sxs-lookup"><span data-stu-id="041cc-341">Up to sixteen hexadecimal characters</span></span>|  
  
 <span data-ttu-id="041cc-342">Puede representar números hexadecimales directamente anteponiendo números en el intervalo correcto con `&H`.</span><span class="sxs-lookup"><span data-stu-id="041cc-342">You can represent hexadecimal numbers directly by preceding numbers in the proper range with `&H`.</span></span> <span data-ttu-id="041cc-343">Por ejemplo, `&H10` representa 16 decimal en notación hexadecimal.</span><span class="sxs-lookup"><span data-stu-id="041cc-343">For example, `&H10` represents decimal 16 in hexadecimal notation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="041cc-344">Este ejemplo se usa el `Hex` función para devolver el valor hexadecimal de un número.</span><span class="sxs-lookup"><span data-stu-id="041cc-344">This example uses the `Hex` function to return the hexadecimal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="041cc-345">No se especificó <paramref name="Number" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="041cc-345">
              <paramref name="Number" /> is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="041cc-346">
            <paramref name="Number" /> no es un tipo numérico.</span>
          <span class="sxs-lookup">
            <span data-stu-id="041cc-346">
              <paramref name="Number" /> is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Oct" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">
          <span data-ttu-id="041cc-347">Type Conversion Functions</span>
          <span class="sxs-lookup">
            <span data-stu-id="041cc-347">Type Conversion Functions</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/how-to-convert-hexadecimal-strings-to-numbers.md">
          <span data-ttu-id="041cc-348">Cómo: Convertir cadenas hexadecimales en números</span>
          <span class="sxs-lookup">
            <span data-stu-id="041cc-348">How to: Convert Hexadecimal Strings to Numbers</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Hex">
      <MemberSignature Language="C#" Value="public static string Hex (short Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Hex(int16 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Hex(System.Int16)" />
      <MemberSignature Language="VB.NET" Value="Public Function Hex (Number As Short) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Hex(short Number);" />
      <MemberSignature Language="F#" Value="static member Hex : int16 -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Hex Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int16" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="041cc-349">Obligatorio.</span>
          <span class="sxs-lookup">
            <span data-stu-id="041cc-349">Required.</span>
          </span>
          <span data-ttu-id="041cc-350">Cualquier expresión numérica o expresión de tipo <see langword="String" /> válida.</span>
          <span class="sxs-lookup">
            <span data-stu-id="041cc-350">Any valid numeric expression or <see langword="String" /> expression.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="041cc-351">Devuelve una cadena que representa el valor hexadecimal de un número.</span>
          <span class="sxs-lookup">
            <span data-stu-id="041cc-351">Returns a string representing the hexadecimal value of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="041cc-352">Devuelve una cadena que representa el valor hexadecimal de un número.</span>
          <span class="sxs-lookup">
            <span data-stu-id="041cc-352">Returns a string representing the hexadecimal value of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="041cc-353">Si `Number` ya no es un número entero, se redondea al número entero más cercano antes de que se va a evaluar.</span><span class="sxs-lookup"><span data-stu-id="041cc-353">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="041cc-354">Si `Number` es</span><span class="sxs-lookup"><span data-stu-id="041cc-354">If `Number` is</span></span>|<span data-ttu-id="041cc-355">HEX devuelve</span><span class="sxs-lookup"><span data-stu-id="041cc-355">Hex returns</span></span>|  
|-|-|  
|<span data-ttu-id="041cc-356">Empty</span><span class="sxs-lookup"><span data-stu-id="041cc-356">Empty</span></span>|<span data-ttu-id="041cc-357">Cero (0)</span><span class="sxs-lookup"><span data-stu-id="041cc-357">Zero (0)</span></span>|  
|<span data-ttu-id="041cc-358">Cualquier valor numérico</span><span class="sxs-lookup"><span data-stu-id="041cc-358">Any numeric value</span></span>|<span data-ttu-id="041cc-359">Hasta dieciséis caracteres hexadecimales</span><span class="sxs-lookup"><span data-stu-id="041cc-359">Up to sixteen hexadecimal characters</span></span>|  
  
 <span data-ttu-id="041cc-360">Puede representar números hexadecimales directamente anteponiendo números en el intervalo correcto con `&H`.</span><span class="sxs-lookup"><span data-stu-id="041cc-360">You can represent hexadecimal numbers directly by preceding numbers in the proper range with `&H`.</span></span> <span data-ttu-id="041cc-361">Por ejemplo, `&H10` representa 16 decimal en notación hexadecimal.</span><span class="sxs-lookup"><span data-stu-id="041cc-361">For example, `&H10` represents decimal 16 in hexadecimal notation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="041cc-362">Este ejemplo se usa el `Hex` función para devolver el valor hexadecimal de un número.</span><span class="sxs-lookup"><span data-stu-id="041cc-362">This example uses the `Hex` function to return the hexadecimal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="041cc-363">No se especificó <paramref name="Number" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="041cc-363">
              <paramref name="Number" /> is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="041cc-364">
            <paramref name="Number" /> no es un tipo numérico.</span>
          <span class="sxs-lookup">
            <span data-stu-id="041cc-364">
              <paramref name="Number" /> is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Oct" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">
          <span data-ttu-id="041cc-365">Type Conversion Functions</span>
          <span class="sxs-lookup">
            <span data-stu-id="041cc-365">Type Conversion Functions</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/how-to-convert-hexadecimal-strings-to-numbers.md">
          <span data-ttu-id="041cc-366">Cómo: Convertir cadenas hexadecimales en números</span>
          <span class="sxs-lookup">
            <span data-stu-id="041cc-366">How to: Convert Hexadecimal Strings to Numbers</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Hex">
      <MemberSignature Language="C#" Value="public static string Hex (int Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Hex(int32 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Hex(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Hex (Number As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Hex(int Number);" />
      <MemberSignature Language="F#" Value="static member Hex : int -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Hex Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="041cc-367">Obligatorio.</span>
          <span class="sxs-lookup">
            <span data-stu-id="041cc-367">Required.</span>
          </span>
          <span data-ttu-id="041cc-368">Cualquier expresión numérica o expresión de tipo <see langword="String" /> válida.</span>
          <span class="sxs-lookup">
            <span data-stu-id="041cc-368">Any valid numeric expression or <see langword="String" /> expression.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="041cc-369">Devuelve una cadena que representa el valor hexadecimal de un número.</span>
          <span class="sxs-lookup">
            <span data-stu-id="041cc-369">Returns a string representing the hexadecimal value of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="041cc-370">Devuelve una cadena que representa el valor hexadecimal de un número.</span>
          <span class="sxs-lookup">
            <span data-stu-id="041cc-370">Returns a string representing the hexadecimal value of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="041cc-371">Si `Number` ya no es un número entero, se redondea al número entero más cercano antes de que se va a evaluar.</span><span class="sxs-lookup"><span data-stu-id="041cc-371">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="041cc-372">Si `Number` es</span><span class="sxs-lookup"><span data-stu-id="041cc-372">If `Number` is</span></span>|<span data-ttu-id="041cc-373">HEX devuelve</span><span class="sxs-lookup"><span data-stu-id="041cc-373">Hex returns</span></span>|  
|-|-|  
|<span data-ttu-id="041cc-374">Empty</span><span class="sxs-lookup"><span data-stu-id="041cc-374">Empty</span></span>|<span data-ttu-id="041cc-375">Cero (0)</span><span class="sxs-lookup"><span data-stu-id="041cc-375">Zero (0)</span></span>|  
|<span data-ttu-id="041cc-376">Cualquier valor numérico</span><span class="sxs-lookup"><span data-stu-id="041cc-376">Any numeric value</span></span>|<span data-ttu-id="041cc-377">Hasta dieciséis caracteres hexadecimales</span><span class="sxs-lookup"><span data-stu-id="041cc-377">Up to sixteen hexadecimal characters</span></span>|  
  
 <span data-ttu-id="041cc-378">Puede representar números hexadecimales directamente anteponiendo números en el intervalo correcto con `&H`.</span><span class="sxs-lookup"><span data-stu-id="041cc-378">You can represent hexadecimal numbers directly by preceding numbers in the proper range with `&H`.</span></span> <span data-ttu-id="041cc-379">Por ejemplo, `&H10` representa 16 decimal en notación hexadecimal.</span><span class="sxs-lookup"><span data-stu-id="041cc-379">For example, `&H10` represents decimal 16 in hexadecimal notation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="041cc-380">Este ejemplo se usa el `Hex` función para devolver el valor hexadecimal de un número.</span><span class="sxs-lookup"><span data-stu-id="041cc-380">This example uses the `Hex` function to return the hexadecimal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="041cc-381">No se especificó <paramref name="Number" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="041cc-381">
              <paramref name="Number" /> is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="041cc-382">
            <paramref name="Number" /> no es un tipo numérico.</span>
          <span class="sxs-lookup">
            <span data-stu-id="041cc-382">
              <paramref name="Number" /> is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Oct" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">
          <span data-ttu-id="041cc-383">Type Conversion Functions</span>
          <span class="sxs-lookup">
            <span data-stu-id="041cc-383">Type Conversion Functions</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/how-to-convert-hexadecimal-strings-to-numbers.md">
          <span data-ttu-id="041cc-384">Cómo: Convertir cadenas hexadecimales en números</span>
          <span class="sxs-lookup">
            <span data-stu-id="041cc-384">How to: Convert Hexadecimal Strings to Numbers</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Hex">
      <MemberSignature Language="C#" Value="public static string Hex (long Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Hex(int64 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Hex(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Function Hex (Number As Long) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Hex(long Number);" />
      <MemberSignature Language="F#" Value="static member Hex : int64 -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Hex Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="041cc-385">Obligatorio.</span>
          <span class="sxs-lookup">
            <span data-stu-id="041cc-385">Required.</span>
          </span>
          <span data-ttu-id="041cc-386">Cualquier expresión numérica o expresión de tipo <see langword="String" /> válida.</span>
          <span class="sxs-lookup">
            <span data-stu-id="041cc-386">Any valid numeric expression or <see langword="String" /> expression.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="041cc-387">Devuelve una cadena que representa el valor hexadecimal de un número.</span>
          <span class="sxs-lookup">
            <span data-stu-id="041cc-387">Returns a string representing the hexadecimal value of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="041cc-388">Devuelve una cadena que representa el valor hexadecimal de un número.</span>
          <span class="sxs-lookup">
            <span data-stu-id="041cc-388">Returns a string representing the hexadecimal value of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="041cc-389">Si `Number` ya no es un número entero, se redondea al número entero más cercano antes de que se va a evaluar.</span><span class="sxs-lookup"><span data-stu-id="041cc-389">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="041cc-390">Si `Number` es</span><span class="sxs-lookup"><span data-stu-id="041cc-390">If `Number` is</span></span>|<span data-ttu-id="041cc-391">HEX devuelve</span><span class="sxs-lookup"><span data-stu-id="041cc-391">Hex returns</span></span>|  
|-|-|  
|<span data-ttu-id="041cc-392">Empty</span><span class="sxs-lookup"><span data-stu-id="041cc-392">Empty</span></span>|<span data-ttu-id="041cc-393">Cero (0)</span><span class="sxs-lookup"><span data-stu-id="041cc-393">Zero (0)</span></span>|  
|<span data-ttu-id="041cc-394">Cualquier valor numérico</span><span class="sxs-lookup"><span data-stu-id="041cc-394">Any numeric value</span></span>|<span data-ttu-id="041cc-395">Hasta dieciséis caracteres hexadecimales</span><span class="sxs-lookup"><span data-stu-id="041cc-395">Up to sixteen hexadecimal characters</span></span>|  
  
 <span data-ttu-id="041cc-396">Puede representar números hexadecimales directamente anteponiendo números en el intervalo correcto con `&H`.</span><span class="sxs-lookup"><span data-stu-id="041cc-396">You can represent hexadecimal numbers directly by preceding numbers in the proper range with `&H`.</span></span> <span data-ttu-id="041cc-397">Por ejemplo, `&H10` representa 16 decimal en notación hexadecimal.</span><span class="sxs-lookup"><span data-stu-id="041cc-397">For example, `&H10` represents decimal 16 in hexadecimal notation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="041cc-398">Este ejemplo se usa el `Hex` función para devolver el valor hexadecimal de un número.</span><span class="sxs-lookup"><span data-stu-id="041cc-398">This example uses the `Hex` function to return the hexadecimal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="041cc-399">No se especificó <paramref name="Number" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="041cc-399">
              <paramref name="Number" /> is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="041cc-400">
            <paramref name="Number" /> no es un tipo numérico.</span>
          <span class="sxs-lookup">
            <span data-stu-id="041cc-400">
              <paramref name="Number" /> is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Oct" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">
          <span data-ttu-id="041cc-401">Type Conversion Functions</span>
          <span class="sxs-lookup">
            <span data-stu-id="041cc-401">Type Conversion Functions</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/how-to-convert-hexadecimal-strings-to-numbers.md">
          <span data-ttu-id="041cc-402">Cómo: Convertir cadenas hexadecimales en números</span>
          <span class="sxs-lookup">
            <span data-stu-id="041cc-402">How to: Convert Hexadecimal Strings to Numbers</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Hex">
      <MemberSignature Language="C#" Value="public static string Hex (object Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Hex(object Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Hex(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Hex (Number As Object) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Hex(System::Object ^ Number);" />
      <MemberSignature Language="F#" Value="static member Hex : obj -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Hex Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="041cc-403">Obligatorio.</span>
          <span class="sxs-lookup">
            <span data-stu-id="041cc-403">Required.</span>
          </span>
          <span data-ttu-id="041cc-404">Cualquier expresión numérica o expresión de tipo <see langword="String" /> válida.</span>
          <span class="sxs-lookup">
            <span data-stu-id="041cc-404">Any valid numeric expression or <see langword="String" /> expression.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="041cc-405">Devuelve una cadena que representa el valor hexadecimal de un número.</span>
          <span class="sxs-lookup">
            <span data-stu-id="041cc-405">Returns a string representing the hexadecimal value of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="041cc-406">Devuelve una cadena que representa el valor hexadecimal de un número.</span>
          <span class="sxs-lookup">
            <span data-stu-id="041cc-406">Returns a string representing the hexadecimal value of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="041cc-407">Si `Number` ya no es un número entero, se redondea al número entero más cercano antes de que se va a evaluar.</span><span class="sxs-lookup"><span data-stu-id="041cc-407">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="041cc-408">Si `Number` es</span><span class="sxs-lookup"><span data-stu-id="041cc-408">If `Number` is</span></span>|<span data-ttu-id="041cc-409">HEX devuelve</span><span class="sxs-lookup"><span data-stu-id="041cc-409">Hex returns</span></span>|  
|-|-|  
|<span data-ttu-id="041cc-410">Empty</span><span class="sxs-lookup"><span data-stu-id="041cc-410">Empty</span></span>|<span data-ttu-id="041cc-411">Cero (0)</span><span class="sxs-lookup"><span data-stu-id="041cc-411">Zero (0)</span></span>|  
|<span data-ttu-id="041cc-412">Cualquier valor numérico</span><span class="sxs-lookup"><span data-stu-id="041cc-412">Any numeric value</span></span>|<span data-ttu-id="041cc-413">Hasta dieciséis caracteres hexadecimales</span><span class="sxs-lookup"><span data-stu-id="041cc-413">Up to sixteen hexadecimal characters</span></span>|  
  
 <span data-ttu-id="041cc-414">Puede representar números hexadecimales directamente anteponiendo números en el intervalo correcto con `&H`.</span><span class="sxs-lookup"><span data-stu-id="041cc-414">You can represent hexadecimal numbers directly by preceding numbers in the proper range with `&H`.</span></span> <span data-ttu-id="041cc-415">Por ejemplo, `&H10` representa 16 decimal en notación hexadecimal.</span><span class="sxs-lookup"><span data-stu-id="041cc-415">For example, `&H10` represents decimal 16 in hexadecimal notation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="041cc-416">Este ejemplo se usa el `Hex` función para devolver el valor hexadecimal de un número.</span><span class="sxs-lookup"><span data-stu-id="041cc-416">This example uses the `Hex` function to return the hexadecimal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="041cc-417">No se especificó <paramref name="Number" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="041cc-417">
              <paramref name="Number" /> is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="041cc-418">
            <paramref name="Number" /> no es un tipo numérico.</span>
          <span class="sxs-lookup">
            <span data-stu-id="041cc-418">
              <paramref name="Number" /> is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Oct" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">
          <span data-ttu-id="041cc-419">Type Conversion Functions</span>
          <span class="sxs-lookup">
            <span data-stu-id="041cc-419">Type Conversion Functions</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/how-to-convert-hexadecimal-strings-to-numbers.md">
          <span data-ttu-id="041cc-420">Cómo: Convertir cadenas hexadecimales en números</span>
          <span class="sxs-lookup">
            <span data-stu-id="041cc-420">How to: Convert Hexadecimal Strings to Numbers</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Hex">
      <MemberSignature Language="C#" Value="public static string Hex (sbyte Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Hex(int8 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Hex(System.SByte)" />
      <MemberSignature Language="VB.NET" Value="Public Function Hex (Number As SByte) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Hex(System::SByte Number);" />
      <MemberSignature Language="F#" Value="static member Hex : sbyte -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Hex Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.SByte" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="041cc-421">Obligatorio.</span>
          <span class="sxs-lookup">
            <span data-stu-id="041cc-421">Required.</span>
          </span>
          <span data-ttu-id="041cc-422">Cualquier expresión numérica o expresión de tipo <see langword="String" /> válida.</span>
          <span class="sxs-lookup">
            <span data-stu-id="041cc-422">Any valid numeric expression or <see langword="String" /> expression.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="041cc-423">Devuelve una cadena que representa el valor hexadecimal de un número.</span>
          <span class="sxs-lookup">
            <span data-stu-id="041cc-423">Returns a string representing the hexadecimal value of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="041cc-424">Devuelve una cadena que representa el valor hexadecimal de un número.</span>
          <span class="sxs-lookup">
            <span data-stu-id="041cc-424">Returns a string representing the hexadecimal value of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="041cc-425">Si `Number` ya no es un número entero, se redondea al número entero más cercano antes de que se va a evaluar.</span><span class="sxs-lookup"><span data-stu-id="041cc-425">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="041cc-426">Si `Number` es</span><span class="sxs-lookup"><span data-stu-id="041cc-426">If `Number` is</span></span>|<span data-ttu-id="041cc-427">HEX devuelve</span><span class="sxs-lookup"><span data-stu-id="041cc-427">Hex returns</span></span>|  
|-|-|  
|<span data-ttu-id="041cc-428">Empty</span><span class="sxs-lookup"><span data-stu-id="041cc-428">Empty</span></span>|<span data-ttu-id="041cc-429">Cero (0)</span><span class="sxs-lookup"><span data-stu-id="041cc-429">Zero (0)</span></span>|  
|<span data-ttu-id="041cc-430">Cualquier valor numérico</span><span class="sxs-lookup"><span data-stu-id="041cc-430">Any numeric value</span></span>|<span data-ttu-id="041cc-431">Hasta dieciséis caracteres hexadecimales</span><span class="sxs-lookup"><span data-stu-id="041cc-431">Up to sixteen hexadecimal characters</span></span>|  
  
 <span data-ttu-id="041cc-432">Puede representar números hexadecimales directamente anteponiendo números en el intervalo correcto con `&H`.</span><span class="sxs-lookup"><span data-stu-id="041cc-432">You can represent hexadecimal numbers directly by preceding numbers in the proper range with `&H`.</span></span> <span data-ttu-id="041cc-433">Por ejemplo, `&H10` representa 16 decimal en notación hexadecimal.</span><span class="sxs-lookup"><span data-stu-id="041cc-433">For example, `&H10` represents decimal 16 in hexadecimal notation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="041cc-434">Este ejemplo se usa el `Hex` función para devolver el valor hexadecimal de un número.</span><span class="sxs-lookup"><span data-stu-id="041cc-434">This example uses the `Hex` function to return the hexadecimal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Conversion.Hex(System.Byte)" />
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="041cc-435">No se especificó <paramref name="Number" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="041cc-435">
              <paramref name="Number" /> is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="041cc-436">
            <paramref name="Number" /> no es un tipo numérico.</span>
          <span class="sxs-lookup">
            <span data-stu-id="041cc-436">
              <paramref name="Number" /> is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Oct" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">
          <span data-ttu-id="041cc-437">Type Conversion Functions</span>
          <span class="sxs-lookup">
            <span data-stu-id="041cc-437">Type Conversion Functions</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/how-to-convert-hexadecimal-strings-to-numbers.md">
          <span data-ttu-id="041cc-438">Cómo: Convertir cadenas hexadecimales en números</span>
          <span class="sxs-lookup">
            <span data-stu-id="041cc-438">How to: Convert Hexadecimal Strings to Numbers</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Hex">
      <MemberSignature Language="C#" Value="public static string Hex (ushort Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Hex(unsigned int16 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Hex(System.UInt16)" />
      <MemberSignature Language="VB.NET" Value="Public Function Hex (Number As UShort) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Hex(System::UInt16 Number);" />
      <MemberSignature Language="F#" Value="static member Hex : uint16 -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Hex Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.UInt16" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="041cc-439">Obligatorio.</span>
          <span class="sxs-lookup">
            <span data-stu-id="041cc-439">Required.</span>
          </span>
          <span data-ttu-id="041cc-440">Cualquier expresión numérica o expresión de tipo <see langword="String" /> válida.</span>
          <span class="sxs-lookup">
            <span data-stu-id="041cc-440">Any valid numeric expression or <see langword="String" /> expression.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="041cc-441">Devuelve una cadena que representa el valor hexadecimal de un número.</span>
          <span class="sxs-lookup">
            <span data-stu-id="041cc-441">Returns a string representing the hexadecimal value of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="041cc-442">Devuelve una cadena que representa el valor hexadecimal de un número.</span>
          <span class="sxs-lookup">
            <span data-stu-id="041cc-442">Returns a string representing the hexadecimal value of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="041cc-443">Si `Number` ya no es un número entero, se redondea al número entero más cercano antes de que se va a evaluar.</span><span class="sxs-lookup"><span data-stu-id="041cc-443">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="041cc-444">Si `Number` es</span><span class="sxs-lookup"><span data-stu-id="041cc-444">If `Number` is</span></span>|<span data-ttu-id="041cc-445">HEX devuelve</span><span class="sxs-lookup"><span data-stu-id="041cc-445">Hex returns</span></span>|  
|-|-|  
|<span data-ttu-id="041cc-446">Empty</span><span class="sxs-lookup"><span data-stu-id="041cc-446">Empty</span></span>|<span data-ttu-id="041cc-447">Cero (0)</span><span class="sxs-lookup"><span data-stu-id="041cc-447">Zero (0)</span></span>|  
|<span data-ttu-id="041cc-448">Cualquier valor numérico</span><span class="sxs-lookup"><span data-stu-id="041cc-448">Any numeric value</span></span>|<span data-ttu-id="041cc-449">Hasta dieciséis caracteres hexadecimales</span><span class="sxs-lookup"><span data-stu-id="041cc-449">Up to sixteen hexadecimal characters</span></span>|  
  
 <span data-ttu-id="041cc-450">Puede representar números hexadecimales directamente anteponiendo números en el intervalo correcto con `&H`.</span><span class="sxs-lookup"><span data-stu-id="041cc-450">You can represent hexadecimal numbers directly by preceding numbers in the proper range with `&H`.</span></span> <span data-ttu-id="041cc-451">Por ejemplo, `&H10` representa 16 decimal en notación hexadecimal.</span><span class="sxs-lookup"><span data-stu-id="041cc-451">For example, `&H10` represents decimal 16 in hexadecimal notation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="041cc-452">Este ejemplo se usa el `Hex` función para devolver el valor hexadecimal de un número.</span><span class="sxs-lookup"><span data-stu-id="041cc-452">This example uses the `Hex` function to return the hexadecimal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Conversion.Hex(System.Int16)" />
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="041cc-453">No se especificó <paramref name="Number" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="041cc-453">
              <paramref name="Number" /> is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="041cc-454">
            <paramref name="Number" /> no es un tipo numérico.</span>
          <span class="sxs-lookup">
            <span data-stu-id="041cc-454">
              <paramref name="Number" /> is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Oct" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">
          <span data-ttu-id="041cc-455">Type Conversion Functions</span>
          <span class="sxs-lookup">
            <span data-stu-id="041cc-455">Type Conversion Functions</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/how-to-convert-hexadecimal-strings-to-numbers.md">
          <span data-ttu-id="041cc-456">Cómo: Convertir cadenas hexadecimales en números</span>
          <span class="sxs-lookup">
            <span data-stu-id="041cc-456">How to: Convert Hexadecimal Strings to Numbers</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Hex">
      <MemberSignature Language="C#" Value="public static string Hex (uint Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Hex(unsigned int32 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Hex(System.UInt32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Hex (Number As UInteger) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Hex(System::UInt32 Number);" />
      <MemberSignature Language="F#" Value="static member Hex : uint32 -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Hex Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.UInt32" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="041cc-457">Obligatorio.</span>
          <span class="sxs-lookup">
            <span data-stu-id="041cc-457">Required.</span>
          </span>
          <span data-ttu-id="041cc-458">Cualquier expresión numérica o expresión de tipo <see langword="String" /> válida.</span>
          <span class="sxs-lookup">
            <span data-stu-id="041cc-458">Any valid numeric expression or <see langword="String" /> expression.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="041cc-459">Devuelve una cadena que representa el valor hexadecimal de un número.</span>
          <span class="sxs-lookup">
            <span data-stu-id="041cc-459">Returns a string representing the hexadecimal value of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="041cc-460">Devuelve una cadena que representa el valor hexadecimal de un número.</span>
          <span class="sxs-lookup">
            <span data-stu-id="041cc-460">Returns a string representing the hexadecimal value of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="041cc-461">Si `Number` ya no es un número entero, se redondea al número entero más cercano antes de que se va a evaluar.</span><span class="sxs-lookup"><span data-stu-id="041cc-461">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="041cc-462">Si `Number` es</span><span class="sxs-lookup"><span data-stu-id="041cc-462">If `Number` is</span></span>|<span data-ttu-id="041cc-463">HEX devuelve</span><span class="sxs-lookup"><span data-stu-id="041cc-463">Hex returns</span></span>|  
|-|-|  
|<span data-ttu-id="041cc-464">Empty</span><span class="sxs-lookup"><span data-stu-id="041cc-464">Empty</span></span>|<span data-ttu-id="041cc-465">Cero (0)</span><span class="sxs-lookup"><span data-stu-id="041cc-465">Zero (0)</span></span>|  
|<span data-ttu-id="041cc-466">Cualquier valor numérico</span><span class="sxs-lookup"><span data-stu-id="041cc-466">Any numeric value</span></span>|<span data-ttu-id="041cc-467">Hasta dieciséis caracteres hexadecimales</span><span class="sxs-lookup"><span data-stu-id="041cc-467">Up to sixteen hexadecimal characters</span></span>|  
  
 <span data-ttu-id="041cc-468">Puede representar números hexadecimales directamente anteponiendo números en el intervalo correcto con `&H`.</span><span class="sxs-lookup"><span data-stu-id="041cc-468">You can represent hexadecimal numbers directly by preceding numbers in the proper range with `&H`.</span></span> <span data-ttu-id="041cc-469">Por ejemplo, `&H10` representa 16 decimal en notación hexadecimal.</span><span class="sxs-lookup"><span data-stu-id="041cc-469">For example, `&H10` represents decimal 16 in hexadecimal notation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="041cc-470">Este ejemplo se usa el `Hex` función para devolver el valor hexadecimal de un número.</span><span class="sxs-lookup"><span data-stu-id="041cc-470">This example uses the `Hex` function to return the hexadecimal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Conversion.Hex(System.Int32)" />
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="041cc-471">No se especificó <paramref name="Number" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="041cc-471">
              <paramref name="Number" /> is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="041cc-472">
            <paramref name="Number" /> no es un tipo numérico.</span>
          <span class="sxs-lookup">
            <span data-stu-id="041cc-472">
              <paramref name="Number" /> is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Oct" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">
          <span data-ttu-id="041cc-473">Type Conversion Functions</span>
          <span class="sxs-lookup">
            <span data-stu-id="041cc-473">Type Conversion Functions</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/how-to-convert-hexadecimal-strings-to-numbers.md">
          <span data-ttu-id="041cc-474">Cómo: Convertir cadenas hexadecimales en números</span>
          <span class="sxs-lookup">
            <span data-stu-id="041cc-474">How to: Convert Hexadecimal Strings to Numbers</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Hex">
      <MemberSignature Language="C#" Value="public static string Hex (ulong Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Hex(unsigned int64 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Hex(System.UInt64)" />
      <MemberSignature Language="VB.NET" Value="Public Function Hex (Number As ULong) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Hex(System::UInt64 Number);" />
      <MemberSignature Language="F#" Value="static member Hex : uint64 -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Hex Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.UInt64" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="041cc-475">Obligatorio.</span>
          <span class="sxs-lookup">
            <span data-stu-id="041cc-475">Required.</span>
          </span>
          <span data-ttu-id="041cc-476">Cualquier expresión numérica o expresión de tipo <see langword="String" /> válida.</span>
          <span class="sxs-lookup">
            <span data-stu-id="041cc-476">Any valid numeric expression or <see langword="String" /> expression.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="041cc-477">Devuelve una cadena que representa el valor hexadecimal de un número.</span>
          <span class="sxs-lookup">
            <span data-stu-id="041cc-477">Returns a string representing the hexadecimal value of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="041cc-478">Devuelve una cadena que representa el valor hexadecimal de un número.</span>
          <span class="sxs-lookup">
            <span data-stu-id="041cc-478">Returns a string representing the hexadecimal value of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="041cc-479">Si `Number` ya no es un número entero, se redondea al número entero más cercano antes de que se va a evaluar.</span><span class="sxs-lookup"><span data-stu-id="041cc-479">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="041cc-480">Si `Number` es</span><span class="sxs-lookup"><span data-stu-id="041cc-480">If `Number` is</span></span>|<span data-ttu-id="041cc-481">HEX devuelve</span><span class="sxs-lookup"><span data-stu-id="041cc-481">Hex returns</span></span>|  
|-|-|  
|<span data-ttu-id="041cc-482">Empty</span><span class="sxs-lookup"><span data-stu-id="041cc-482">Empty</span></span>|<span data-ttu-id="041cc-483">Cero (0)</span><span class="sxs-lookup"><span data-stu-id="041cc-483">Zero (0)</span></span>|  
|<span data-ttu-id="041cc-484">Cualquier valor numérico</span><span class="sxs-lookup"><span data-stu-id="041cc-484">Any numeric value</span></span>|<span data-ttu-id="041cc-485">Hasta dieciséis caracteres hexadecimales</span><span class="sxs-lookup"><span data-stu-id="041cc-485">Up to sixteen hexadecimal characters</span></span>|  
  
 <span data-ttu-id="041cc-486">Puede representar números hexadecimales directamente anteponiendo números en el intervalo correcto con `&H`.</span><span class="sxs-lookup"><span data-stu-id="041cc-486">You can represent hexadecimal numbers directly by preceding numbers in the proper range with `&H`.</span></span> <span data-ttu-id="041cc-487">Por ejemplo, `&H10` representa 16 decimal en notación hexadecimal.</span><span class="sxs-lookup"><span data-stu-id="041cc-487">For example, `&H10` represents decimal 16 in hexadecimal notation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="041cc-488">Este ejemplo se usa el `Hex` función para devolver el valor hexadecimal de un número.</span><span class="sxs-lookup"><span data-stu-id="041cc-488">This example uses the `Hex` function to return the hexadecimal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Conversion.Hex(System.Int64)" />
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="041cc-489">No se especificó <paramref name="Number" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="041cc-489">
              <paramref name="Number" /> is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="041cc-490">
            <paramref name="Number" /> no es un tipo numérico.</span>
          <span class="sxs-lookup">
            <span data-stu-id="041cc-490">
              <paramref name="Number" /> is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Oct" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">
          <span data-ttu-id="041cc-491">Type Conversion Functions</span>
          <span class="sxs-lookup">
            <span data-stu-id="041cc-491">Type Conversion Functions</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/how-to-convert-hexadecimal-strings-to-numbers.md">
          <span data-ttu-id="041cc-492">Cómo: Convertir cadenas hexadecimales en números</span>
          <span class="sxs-lookup">
            <span data-stu-id="041cc-492">How to: Convert Hexadecimal Strings to Numbers</span>
          </span>
        </related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Int">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="041cc-493">Devuelve la parte correspondiente al entero de un número.</span>
          <span class="sxs-lookup">
            <span data-stu-id="041cc-493">Return the integer portion of a number.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Int">
      <MemberSignature Language="C#" Value="public static decimal Int (decimal Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype System.Decimal Int(valuetype System.Decimal Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Int(System.Decimal)" />
      <MemberSignature Language="VB.NET" Value="Public Function Int (Number As Decimal) As Decimal" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Decimal Int(System::Decimal Number);" />
      <MemberSignature Language="F#" Value="static member Int : decimal -&gt; decimal" Usage="Microsoft.VisualBasic.Conversion.Int Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Decimal</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Decimal" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="041cc-494">Obligatorio.</span>
          <span class="sxs-lookup">
            <span data-stu-id="041cc-494">Required.</span>
          </span>
          <span data-ttu-id="041cc-495">Número de tipo <see langword="Double" /> o cualquier expresión numérica válida.</span>
          <span class="sxs-lookup">
            <span data-stu-id="041cc-495">A number of type <see langword="Double" /> or any valid numeric expression.</span>
          </span>
          <span data-ttu-id="041cc-496">Si <c>Number</c> contiene <see langword="Nothing" />, se devuelve <see langword="Nothing" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="041cc-496">If <c>Number</c> contains <see langword="Nothing" />, <see langword="Nothing" /> is returned.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="041cc-497">Devuelve la parte correspondiente al entero de un número.</span>
          <span class="sxs-lookup">
            <span data-stu-id="041cc-497">Return the integer portion of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="041cc-498">Devuelve la parte correspondiente al entero de un número.</span>
          <span class="sxs-lookup">
            <span data-stu-id="041cc-498">Return the integer portion of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="041cc-499">Tanto el `Int` y `Fix` funciones quitan la parte fraccionaria de `Number` y devolver el valor entero resultante.</span><span class="sxs-lookup"><span data-stu-id="041cc-499">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="041cc-500">La diferencia entre `Int` y `Fix` funciones es que, si `Number` es negativo, `Int` devuelve el primer entero negativo menor o igual a `Number`, mientras que `Fix` devuelve el primer entero negativo mayor o igual que `Number`.</span><span class="sxs-lookup"><span data-stu-id="041cc-500">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="041cc-501">Por ejemplo, `Int` convierte -8,4 en -9, y `Fix` convierte -8,4 en -8.</span><span class="sxs-lookup"><span data-stu-id="041cc-501">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="041cc-502">`Fix(number)` es equivalente a `Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="041cc-502">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="041cc-503">Este ejemplo se muestra cómo el `Int` y `Fix` funciones devuelven la parte entera de números.</span><span class="sxs-lookup"><span data-stu-id="041cc-503">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="041cc-504">En el caso de un argumento de número negativo, el `Int` función devuelve el primer entero negativo menor o igual al número; el `Fix` función devuelve el primer entero negativo mayor o igual que el número.</span><span class="sxs-lookup"><span data-stu-id="041cc-504">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="041cc-505">El ejemplo siguiente requiere que especifique `Option Strict Off` porque las conversiones implícitas de tipo `Double` escriba `Integer` no se permiten en `Option Strict On`:</span><span class="sxs-lookup"><span data-stu-id="041cc-505">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="041cc-506">Puede usar el `CInt` función para convertir otros tipos de datos explícitamente al tipo `Integer` con `Option Strict Off`.</span><span class="sxs-lookup"><span data-stu-id="041cc-506">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="041cc-507">Sin embargo, `CInt` redondea al entero más cercano en lugar de truncar la parte fraccionaria de números.</span><span class="sxs-lookup"><span data-stu-id="041cc-507">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="041cc-508">Por ejemplo:</span><span class="sxs-lookup"><span data-stu-id="041cc-508">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="041cc-509">Puede usar el `CInt` función del resultado de una llamada a `Fix` o `Int` para realizar la conversión explícita al entero sin redondear.</span><span class="sxs-lookup"><span data-stu-id="041cc-509">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="041cc-510">Por ejemplo:</span><span class="sxs-lookup"><span data-stu-id="041cc-510">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="041cc-511">Para obtener más información sobre `CInt`, consulte [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span><span class="sxs-lookup"><span data-stu-id="041cc-511">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="041cc-512">No se ha especificado Number.</span>
          <span class="sxs-lookup">
            <span data-stu-id="041cc-512">Number is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="041cc-513">Number no es un tipo numérico.</span>
          <span class="sxs-lookup">
            <span data-stu-id="041cc-513">Number is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">
          <span data-ttu-id="041cc-514">Type Conversion Functions</span>
          <span class="sxs-lookup">
            <span data-stu-id="041cc-514">Type Conversion Functions</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md">
          <span data-ttu-id="041cc-515">Resumen de tipos de datos (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="041cc-515">Data Type Summary (Visual Basic)</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/math-summary.md">
          <span data-ttu-id="041cc-516">Resumen de funciones matemáticas</span>
          <span class="sxs-lookup">
            <span data-stu-id="041cc-516">Math Summary</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/math-functions.md">
          <span data-ttu-id="041cc-517">Funciones matemáticas (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="041cc-517">Math Functions (Visual Basic)</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md">
          <span data-ttu-id="041cc-518">Resumen de conversión</span>
          <span class="sxs-lookup">
            <span data-stu-id="041cc-518">Conversion Summary</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Int">
      <MemberSignature Language="C#" Value="public static double Int (double Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static float64 Int(float64 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Int(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Int (Number As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double Int(double Number);" />
      <MemberSignature Language="F#" Value="static member Int : double -&gt; double" Usage="Microsoft.VisualBasic.Conversion.Int Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="041cc-519">Obligatorio.</span>
          <span class="sxs-lookup">
            <span data-stu-id="041cc-519">Required.</span>
          </span>
          <span data-ttu-id="041cc-520">Número de tipo <see langword="Double" /> o cualquier expresión numérica válida.</span>
          <span class="sxs-lookup">
            <span data-stu-id="041cc-520">A number of type <see langword="Double" /> or any valid numeric expression.</span>
          </span>
          <span data-ttu-id="041cc-521">Si <c>Number</c> contiene <see langword="Nothing" />, se devuelve <see langword="Nothing" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="041cc-521">If <c>Number</c> contains <see langword="Nothing" />, <see langword="Nothing" /> is returned.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="041cc-522">Devuelve la parte correspondiente al entero de un número.</span>
          <span class="sxs-lookup">
            <span data-stu-id="041cc-522">Return the integer portion of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="041cc-523">Devuelve la parte correspondiente al entero de un número.</span>
          <span class="sxs-lookup">
            <span data-stu-id="041cc-523">Return the integer portion of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="041cc-524">Tanto el `Int` y `Fix` funciones quitan la parte fraccionaria de `Number` y devolver el valor entero resultante.</span><span class="sxs-lookup"><span data-stu-id="041cc-524">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="041cc-525">La diferencia entre `Int` y `Fix` funciones es que, si `Number` es negativo, `Int` devuelve el primer entero negativo menor o igual a `Number`, mientras que `Fix` devuelve el primer entero negativo mayor o igual que `Number`.</span><span class="sxs-lookup"><span data-stu-id="041cc-525">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="041cc-526">Por ejemplo, `Int` convierte -8,4 en -9, y `Fix` convierte -8,4 en -8.</span><span class="sxs-lookup"><span data-stu-id="041cc-526">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="041cc-527">`Fix(number)` es equivalente a `Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="041cc-527">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="041cc-528">Este ejemplo se muestra cómo el `Int` y `Fix` funciones devuelven la parte entera de números.</span><span class="sxs-lookup"><span data-stu-id="041cc-528">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="041cc-529">En el caso de un argumento de número negativo, el `Int` función devuelve el primer entero negativo menor o igual al número; el `Fix` función devuelve el primer entero negativo mayor o igual que el número.</span><span class="sxs-lookup"><span data-stu-id="041cc-529">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="041cc-530">El ejemplo siguiente requiere que especifique `Option Strict Off` porque las conversiones implícitas de tipo `Double` escriba `Integer` no se permiten en `Option Strict On`:</span><span class="sxs-lookup"><span data-stu-id="041cc-530">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="041cc-531">Puede usar el `CInt` función para convertir otros tipos de datos explícitamente al tipo `Integer` con `Option Strict Off`.</span><span class="sxs-lookup"><span data-stu-id="041cc-531">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="041cc-532">Sin embargo, `CInt` redondea al entero más cercano en lugar de truncar la parte fraccionaria de números.</span><span class="sxs-lookup"><span data-stu-id="041cc-532">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="041cc-533">Por ejemplo:</span><span class="sxs-lookup"><span data-stu-id="041cc-533">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="041cc-534">Puede usar el `CInt` función del resultado de una llamada a `Fix` o `Int` para realizar la conversión explícita al entero sin redondear.</span><span class="sxs-lookup"><span data-stu-id="041cc-534">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="041cc-535">Por ejemplo:</span><span class="sxs-lookup"><span data-stu-id="041cc-535">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="041cc-536">Para obtener más información sobre `CInt`, consulte [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span><span class="sxs-lookup"><span data-stu-id="041cc-536">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="041cc-537">No se ha especificado Number.</span>
          <span class="sxs-lookup">
            <span data-stu-id="041cc-537">Number is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="041cc-538">Number no es un tipo numérico.</span>
          <span class="sxs-lookup">
            <span data-stu-id="041cc-538">Number is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">
          <span data-ttu-id="041cc-539">Type Conversion Functions</span>
          <span class="sxs-lookup">
            <span data-stu-id="041cc-539">Type Conversion Functions</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md">
          <span data-ttu-id="041cc-540">Resumen de tipos de datos (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="041cc-540">Data Type Summary (Visual Basic)</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/math-summary.md">
          <span data-ttu-id="041cc-541">Resumen de funciones matemáticas</span>
          <span class="sxs-lookup">
            <span data-stu-id="041cc-541">Math Summary</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/math-functions.md">
          <span data-ttu-id="041cc-542">Funciones matemáticas (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="041cc-542">Math Functions (Visual Basic)</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md">
          <span data-ttu-id="041cc-543">Resumen de conversión</span>
          <span class="sxs-lookup">
            <span data-stu-id="041cc-543">Conversion Summary</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Int">
      <MemberSignature Language="C#" Value="public static short Int (short Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static int16 Int(int16 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Int(System.Int16)" />
      <MemberSignature Language="VB.NET" Value="Public Function Int (Number As Short) As Short" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static short Int(short Number);" />
      <MemberSignature Language="F#" Value="static member Int : int16 -&gt; int16" Usage="Microsoft.VisualBasic.Conversion.Int Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int16</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int16" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="041cc-544">Obligatorio.</span>
          <span class="sxs-lookup">
            <span data-stu-id="041cc-544">Required.</span>
          </span>
          <span data-ttu-id="041cc-545">Número de tipo <see langword="Double" /> o cualquier expresión numérica válida.</span>
          <span class="sxs-lookup">
            <span data-stu-id="041cc-545">A number of type <see langword="Double" /> or any valid numeric expression.</span>
          </span>
          <span data-ttu-id="041cc-546">Si <c>Number</c> contiene <see langword="Nothing" />, se devuelve <see langword="Nothing" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="041cc-546">If <c>Number</c> contains <see langword="Nothing" />, <see langword="Nothing" /> is returned.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="041cc-547">Devuelve la parte correspondiente al entero de un número.</span>
          <span class="sxs-lookup">
            <span data-stu-id="041cc-547">Return the integer portion of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="041cc-548">Devuelve la parte correspondiente al entero de un número.</span>
          <span class="sxs-lookup">
            <span data-stu-id="041cc-548">Return the integer portion of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="041cc-549">Tanto el `Int` y `Fix` funciones quitan la parte fraccionaria de `Number` y devolver el valor entero resultante.</span><span class="sxs-lookup"><span data-stu-id="041cc-549">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="041cc-550">La diferencia entre `Int` y `Fix` funciones es que, si `Number` es negativo, `Int` devuelve el primer entero negativo menor o igual a `Number`, mientras que `Fix` devuelve el primer entero negativo mayor o igual que `Number`.</span><span class="sxs-lookup"><span data-stu-id="041cc-550">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="041cc-551">Por ejemplo, `Int` convierte -8,4 en -9, y `Fix` convierte -8,4 en -8.</span><span class="sxs-lookup"><span data-stu-id="041cc-551">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="041cc-552">`Fix(number)` es equivalente a `Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="041cc-552">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="041cc-553">Este ejemplo se muestra cómo el `Int` y `Fix` funciones devuelven la parte entera de números.</span><span class="sxs-lookup"><span data-stu-id="041cc-553">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="041cc-554">En el caso de un argumento de número negativo, el `Int` función devuelve el primer entero negativo menor o igual al número; el `Fix` función devuelve el primer entero negativo mayor o igual que el número.</span><span class="sxs-lookup"><span data-stu-id="041cc-554">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="041cc-555">El ejemplo siguiente requiere que especifique `Option Strict Off` porque las conversiones implícitas de tipo `Double` escriba `Integer` no se permiten en `Option Strict On`:</span><span class="sxs-lookup"><span data-stu-id="041cc-555">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="041cc-556">Puede usar el `CInt` función para convertir otros tipos de datos explícitamente al tipo `Integer` con `Option Strict Off`.</span><span class="sxs-lookup"><span data-stu-id="041cc-556">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="041cc-557">Sin embargo, `CInt` redondea al entero más cercano en lugar de truncar la parte fraccionaria de números.</span><span class="sxs-lookup"><span data-stu-id="041cc-557">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="041cc-558">Por ejemplo:</span><span class="sxs-lookup"><span data-stu-id="041cc-558">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="041cc-559">Puede usar el `CInt` función del resultado de una llamada a `Fix` o `Int` para realizar la conversión explícita al entero sin redondear.</span><span class="sxs-lookup"><span data-stu-id="041cc-559">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="041cc-560">Por ejemplo:</span><span class="sxs-lookup"><span data-stu-id="041cc-560">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="041cc-561">Para obtener más información sobre `CInt`, consulte [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span><span class="sxs-lookup"><span data-stu-id="041cc-561">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="041cc-562">No se ha especificado Number.</span>
          <span class="sxs-lookup">
            <span data-stu-id="041cc-562">Number is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="041cc-563">Number no es un tipo numérico.</span>
          <span class="sxs-lookup">
            <span data-stu-id="041cc-563">Number is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">
          <span data-ttu-id="041cc-564">Type Conversion Functions</span>
          <span class="sxs-lookup">
            <span data-stu-id="041cc-564">Type Conversion Functions</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md">
          <span data-ttu-id="041cc-565">Resumen de tipos de datos (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="041cc-565">Data Type Summary (Visual Basic)</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/math-summary.md">
          <span data-ttu-id="041cc-566">Resumen de funciones matemáticas</span>
          <span class="sxs-lookup">
            <span data-stu-id="041cc-566">Math Summary</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/math-functions.md">
          <span data-ttu-id="041cc-567">Funciones matemáticas (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="041cc-567">Math Functions (Visual Basic)</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md">
          <span data-ttu-id="041cc-568">Resumen de conversión</span>
          <span class="sxs-lookup">
            <span data-stu-id="041cc-568">Conversion Summary</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Int">
      <MemberSignature Language="C#" Value="public static int Int (int Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Int(int32 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Int(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Int (Number As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Int(int Number);" />
      <MemberSignature Language="F#" Value="static member Int : int -&gt; int" Usage="Microsoft.VisualBasic.Conversion.Int Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="041cc-569">Obligatorio.</span>
          <span class="sxs-lookup">
            <span data-stu-id="041cc-569">Required.</span>
          </span>
          <span data-ttu-id="041cc-570">Número de tipo <see langword="Double" /> o cualquier expresión numérica válida.</span>
          <span class="sxs-lookup">
            <span data-stu-id="041cc-570">A number of type <see langword="Double" /> or any valid numeric expression.</span>
          </span>
          <span data-ttu-id="041cc-571">Si <c>Number</c> contiene <see langword="Nothing" />, se devuelve <see langword="Nothing" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="041cc-571">If <c>Number</c> contains <see langword="Nothing" />, <see langword="Nothing" /> is returned.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="041cc-572">Devuelve la parte correspondiente al entero de un número.</span>
          <span class="sxs-lookup">
            <span data-stu-id="041cc-572">Return the integer portion of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="041cc-573">Devuelve la parte correspondiente al entero de un número.</span>
          <span class="sxs-lookup">
            <span data-stu-id="041cc-573">Return the integer portion of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="041cc-574">Tanto el `Int` y `Fix` funciones quitan la parte fraccionaria de `Number` y devolver el valor entero resultante.</span><span class="sxs-lookup"><span data-stu-id="041cc-574">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="041cc-575">La diferencia entre `Int` y `Fix` funciones es que, si `Number` es negativo, `Int` devuelve el primer entero negativo menor o igual a `Number`, mientras que `Fix` devuelve el primer entero negativo mayor o igual que `Number`.</span><span class="sxs-lookup"><span data-stu-id="041cc-575">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="041cc-576">Por ejemplo, `Int` convierte -8,4 en -9, y `Fix` convierte -8,4 en -8.</span><span class="sxs-lookup"><span data-stu-id="041cc-576">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="041cc-577">`Fix(number)` es equivalente a `Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="041cc-577">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="041cc-578">Este ejemplo se muestra cómo el `Int` y `Fix` funciones devuelven la parte entera de números.</span><span class="sxs-lookup"><span data-stu-id="041cc-578">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="041cc-579">En el caso de un argumento de número negativo, el `Int` función devuelve el primer entero negativo menor o igual al número; el `Fix` función devuelve el primer entero negativo mayor o igual que el número.</span><span class="sxs-lookup"><span data-stu-id="041cc-579">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="041cc-580">El ejemplo siguiente requiere que especifique `Option Strict Off` porque las conversiones implícitas de tipo `Double` escriba `Integer` no se permiten en `Option Strict On`:</span><span class="sxs-lookup"><span data-stu-id="041cc-580">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="041cc-581">Puede usar el `CInt` función para convertir otros tipos de datos explícitamente al tipo `Integer` con `Option Strict Off`.</span><span class="sxs-lookup"><span data-stu-id="041cc-581">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="041cc-582">Sin embargo, `CInt` redondea al entero más cercano en lugar de truncar la parte fraccionaria de números.</span><span class="sxs-lookup"><span data-stu-id="041cc-582">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="041cc-583">Por ejemplo:</span><span class="sxs-lookup"><span data-stu-id="041cc-583">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="041cc-584">Puede usar el `CInt` función del resultado de una llamada a `Fix` o `Int` para realizar la conversión explícita al entero sin redondear.</span><span class="sxs-lookup"><span data-stu-id="041cc-584">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="041cc-585">Por ejemplo:</span><span class="sxs-lookup"><span data-stu-id="041cc-585">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="041cc-586">Para obtener más información sobre `CInt`, consulte [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span><span class="sxs-lookup"><span data-stu-id="041cc-586">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="041cc-587">No se ha especificado Number.</span>
          <span class="sxs-lookup">
            <span data-stu-id="041cc-587">Number is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="041cc-588">Number no es un tipo numérico.</span>
          <span class="sxs-lookup">
            <span data-stu-id="041cc-588">Number is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">
          <span data-ttu-id="041cc-589">Type Conversion Functions</span>
          <span class="sxs-lookup">
            <span data-stu-id="041cc-589">Type Conversion Functions</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md">
          <span data-ttu-id="041cc-590">Resumen de tipos de datos (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="041cc-590">Data Type Summary (Visual Basic)</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/math-summary.md">
          <span data-ttu-id="041cc-591">Resumen de funciones matemáticas</span>
          <span class="sxs-lookup">
            <span data-stu-id="041cc-591">Math Summary</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/math-functions.md">
          <span data-ttu-id="041cc-592">Funciones matemáticas (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="041cc-592">Math Functions (Visual Basic)</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md">
          <span data-ttu-id="041cc-593">Resumen de conversión</span>
          <span class="sxs-lookup">
            <span data-stu-id="041cc-593">Conversion Summary</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Int">
      <MemberSignature Language="C#" Value="public static long Int (long Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static int64 Int(int64 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Int(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Function Int (Number As Long) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static long Int(long Number);" />
      <MemberSignature Language="F#" Value="static member Int : int64 -&gt; int64" Usage="Microsoft.VisualBasic.Conversion.Int Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="041cc-594">Obligatorio.</span>
          <span class="sxs-lookup">
            <span data-stu-id="041cc-594">Required.</span>
          </span>
          <span data-ttu-id="041cc-595">Número de tipo <see langword="Double" /> o cualquier expresión numérica válida.</span>
          <span class="sxs-lookup">
            <span data-stu-id="041cc-595">A number of type <see langword="Double" /> or any valid numeric expression.</span>
          </span>
          <span data-ttu-id="041cc-596">Si <c>Number</c> contiene <see langword="Nothing" />, se devuelve <see langword="Nothing" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="041cc-596">If <c>Number</c> contains <see langword="Nothing" />, <see langword="Nothing" /> is returned.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="041cc-597">Devuelve la parte correspondiente al entero de un número.</span>
          <span class="sxs-lookup">
            <span data-stu-id="041cc-597">Return the integer portion of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="041cc-598">Devuelve la parte correspondiente al entero de un número.</span>
          <span class="sxs-lookup">
            <span data-stu-id="041cc-598">Return the integer portion of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="041cc-599">Tanto el `Int` y `Fix` funciones quitan la parte fraccionaria de `Number` y devolver el valor entero resultante.</span><span class="sxs-lookup"><span data-stu-id="041cc-599">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="041cc-600">La diferencia entre `Int` y `Fix` funciones es que, si `Number` es negativo, `Int` devuelve el primer entero negativo menor o igual a `Number`, mientras que `Fix` devuelve el primer entero negativo mayor o igual que `Number`.</span><span class="sxs-lookup"><span data-stu-id="041cc-600">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="041cc-601">Por ejemplo, `Int` convierte -8,4 en -9, y `Fix` convierte -8,4 en -8.</span><span class="sxs-lookup"><span data-stu-id="041cc-601">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="041cc-602">`Fix(number)` es equivalente a `Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="041cc-602">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="041cc-603">Este ejemplo se muestra cómo el `Int` y `Fix` funciones devuelven la parte entera de números.</span><span class="sxs-lookup"><span data-stu-id="041cc-603">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="041cc-604">En el caso de un argumento de número negativo, el `Int` función devuelve el primer entero negativo menor o igual al número; el `Fix` función devuelve el primer entero negativo mayor o igual que el número.</span><span class="sxs-lookup"><span data-stu-id="041cc-604">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="041cc-605">El ejemplo siguiente requiere que especifique `Option Strict Off` porque las conversiones implícitas de tipo `Double` escriba `Integer` no se permiten en `Option Strict On`:</span><span class="sxs-lookup"><span data-stu-id="041cc-605">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="041cc-606">Puede usar el `CInt` función para convertir otros tipos de datos explícitamente al tipo `Integer` con `Option Strict Off`.</span><span class="sxs-lookup"><span data-stu-id="041cc-606">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="041cc-607">Sin embargo, `CInt` redondea al entero más cercano en lugar de truncar la parte fraccionaria de números.</span><span class="sxs-lookup"><span data-stu-id="041cc-607">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="041cc-608">Por ejemplo:</span><span class="sxs-lookup"><span data-stu-id="041cc-608">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="041cc-609">Puede usar el `CInt` función del resultado de una llamada a `Fix` o `Int` para realizar la conversión explícita al entero sin redondear.</span><span class="sxs-lookup"><span data-stu-id="041cc-609">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="041cc-610">Por ejemplo:</span><span class="sxs-lookup"><span data-stu-id="041cc-610">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="041cc-611">Para obtener más información sobre `CInt`, consulte [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span><span class="sxs-lookup"><span data-stu-id="041cc-611">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="041cc-612">No se ha especificado Number.</span>
          <span class="sxs-lookup">
            <span data-stu-id="041cc-612">Number is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="041cc-613">Number no es un tipo numérico.</span>
          <span class="sxs-lookup">
            <span data-stu-id="041cc-613">Number is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">
          <span data-ttu-id="041cc-614">Type Conversion Functions</span>
          <span class="sxs-lookup">
            <span data-stu-id="041cc-614">Type Conversion Functions</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md">
          <span data-ttu-id="041cc-615">Resumen de tipos de datos (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="041cc-615">Data Type Summary (Visual Basic)</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/math-summary.md">
          <span data-ttu-id="041cc-616">Resumen de funciones matemáticas</span>
          <span class="sxs-lookup">
            <span data-stu-id="041cc-616">Math Summary</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/math-functions.md">
          <span data-ttu-id="041cc-617">Funciones matemáticas (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="041cc-617">Math Functions (Visual Basic)</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md">
          <span data-ttu-id="041cc-618">Resumen de conversión</span>
          <span class="sxs-lookup">
            <span data-stu-id="041cc-618">Conversion Summary</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Int">
      <MemberSignature Language="C#" Value="public static object Int (object Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static object Int(object Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Int(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Int (Number As Object) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ Int(System::Object ^ Number);" />
      <MemberSignature Language="F#" Value="static member Int : obj -&gt; obj" Usage="Microsoft.VisualBasic.Conversion.Int Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="041cc-619">Obligatorio.</span>
          <span class="sxs-lookup">
            <span data-stu-id="041cc-619">Required.</span>
          </span>
          <span data-ttu-id="041cc-620">Número de tipo <see langword="Double" /> o cualquier expresión numérica válida.</span>
          <span class="sxs-lookup">
            <span data-stu-id="041cc-620">A number of type <see langword="Double" /> or any valid numeric expression.</span>
          </span>
          <span data-ttu-id="041cc-621">Si <c>Number</c> contiene <see langword="Nothing" />, se devuelve <see langword="Nothing" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="041cc-621">If <c>Number</c> contains <see langword="Nothing" />, <see langword="Nothing" /> is returned.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="041cc-622">Devuelve la parte correspondiente al entero de un número.</span>
          <span class="sxs-lookup">
            <span data-stu-id="041cc-622">Return the integer portion of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="041cc-623">Devuelve la parte correspondiente al entero de un número.</span>
          <span class="sxs-lookup">
            <span data-stu-id="041cc-623">Return the integer portion of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="041cc-624">Tanto el `Int` y `Fix` funciones quitan la parte fraccionaria de `Number` y devolver el valor entero resultante.</span><span class="sxs-lookup"><span data-stu-id="041cc-624">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="041cc-625">La diferencia entre `Int` y `Fix` funciones es que, si `Number` es negativo, `Int` devuelve el primer entero negativo menor o igual a `Number`, mientras que `Fix` devuelve el primer entero negativo mayor o igual que `Number`.</span><span class="sxs-lookup"><span data-stu-id="041cc-625">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="041cc-626">Por ejemplo, `Int` convierte -8,4 en -9, y `Fix` convierte -8,4 en -8.</span><span class="sxs-lookup"><span data-stu-id="041cc-626">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="041cc-627">`Fix(number)` es equivalente a `Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="041cc-627">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="041cc-628">Este ejemplo se muestra cómo el `Int` y `Fix` funciones devuelven la parte entera de números.</span><span class="sxs-lookup"><span data-stu-id="041cc-628">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="041cc-629">En el caso de un argumento de número negativo, el `Int` función devuelve el primer entero negativo menor o igual al número; el `Fix` función devuelve el primer entero negativo mayor o igual que el número.</span><span class="sxs-lookup"><span data-stu-id="041cc-629">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="041cc-630">El ejemplo siguiente requiere que especifique `Option Strict Off` porque las conversiones implícitas de tipo `Double` escriba `Integer` no se permiten en `Option Strict On`:</span><span class="sxs-lookup"><span data-stu-id="041cc-630">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="041cc-631">Puede usar el `CInt` función para convertir otros tipos de datos explícitamente al tipo `Integer` con `Option Strict Off`.</span><span class="sxs-lookup"><span data-stu-id="041cc-631">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="041cc-632">Sin embargo, `CInt` redondea al entero más cercano en lugar de truncar la parte fraccionaria de números.</span><span class="sxs-lookup"><span data-stu-id="041cc-632">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="041cc-633">Por ejemplo:</span><span class="sxs-lookup"><span data-stu-id="041cc-633">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="041cc-634">Puede usar el `CInt` función del resultado de una llamada a `Fix` o `Int` para realizar la conversión explícita al entero sin redondear.</span><span class="sxs-lookup"><span data-stu-id="041cc-634">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="041cc-635">Por ejemplo:</span><span class="sxs-lookup"><span data-stu-id="041cc-635">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="041cc-636">Para obtener más información sobre `CInt`, consulte [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span><span class="sxs-lookup"><span data-stu-id="041cc-636">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="041cc-637">No se ha especificado Number.</span>
          <span class="sxs-lookup">
            <span data-stu-id="041cc-637">Number is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="041cc-638">Number no es un tipo numérico.</span>
          <span class="sxs-lookup">
            <span data-stu-id="041cc-638">Number is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">
          <span data-ttu-id="041cc-639">Type Conversion Functions</span>
          <span class="sxs-lookup">
            <span data-stu-id="041cc-639">Type Conversion Functions</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md">
          <span data-ttu-id="041cc-640">Resumen de tipos de datos (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="041cc-640">Data Type Summary (Visual Basic)</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/math-summary.md">
          <span data-ttu-id="041cc-641">Resumen de funciones matemáticas</span>
          <span class="sxs-lookup">
            <span data-stu-id="041cc-641">Math Summary</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/math-functions.md">
          <span data-ttu-id="041cc-642">Funciones matemáticas (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="041cc-642">Math Functions (Visual Basic)</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md">
          <span data-ttu-id="041cc-643">Resumen de conversión</span>
          <span class="sxs-lookup">
            <span data-stu-id="041cc-643">Conversion Summary</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Int">
      <MemberSignature Language="C#" Value="public static float Int (float Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static float32 Int(float32 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Int(System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Function Int (Number As Single) As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static float Int(float Number);" />
      <MemberSignature Language="F#" Value="static member Int : single -&gt; single" Usage="Microsoft.VisualBasic.Conversion.Int Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="041cc-644">Obligatorio.</span>
          <span class="sxs-lookup">
            <span data-stu-id="041cc-644">Required.</span>
          </span>
          <span data-ttu-id="041cc-645">Número de tipo <see langword="Double" /> o cualquier expresión numérica válida.</span>
          <span class="sxs-lookup">
            <span data-stu-id="041cc-645">A number of type <see langword="Double" /> or any valid numeric expression.</span>
          </span>
          <span data-ttu-id="041cc-646">Si <c>Number</c> contiene <see langword="Nothing" />, se devuelve <see langword="Nothing" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="041cc-646">If <c>Number</c> contains <see langword="Nothing" />, <see langword="Nothing" /> is returned.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="041cc-647">Devuelve la parte correspondiente al entero de un número.</span>
          <span class="sxs-lookup">
            <span data-stu-id="041cc-647">Return the integer portion of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="041cc-648">Devuelve la parte correspondiente al entero de un número.</span>
          <span class="sxs-lookup">
            <span data-stu-id="041cc-648">Return the integer portion of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="041cc-649">Tanto el `Int` y `Fix` funciones quitan la parte fraccionaria de `Number` y devolver el valor entero resultante.</span><span class="sxs-lookup"><span data-stu-id="041cc-649">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="041cc-650">La diferencia entre `Int` y `Fix` funciones es que, si `Number` es negativo, `Int` devuelve el primer entero negativo menor o igual a `Number`, mientras que `Fix` devuelve el primer entero negativo mayor o igual que `Number`.</span><span class="sxs-lookup"><span data-stu-id="041cc-650">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="041cc-651">Por ejemplo, `Int` convierte -8,4 en -9, y `Fix` convierte -8,4 en -8.</span><span class="sxs-lookup"><span data-stu-id="041cc-651">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="041cc-652">`Fix(number)` es equivalente a `Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="041cc-652">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="041cc-653">Este ejemplo se muestra cómo el `Int` y `Fix` funciones devuelven la parte entera de números.</span><span class="sxs-lookup"><span data-stu-id="041cc-653">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="041cc-654">En el caso de un argumento de número negativo, el `Int` función devuelve el primer entero negativo menor o igual al número; el `Fix` función devuelve el primer entero negativo mayor o igual que el número.</span><span class="sxs-lookup"><span data-stu-id="041cc-654">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="041cc-655">El ejemplo siguiente requiere que especifique `Option Strict Off` porque las conversiones implícitas de tipo `Double` escriba `Integer` no se permiten en `Option Strict On`:</span><span class="sxs-lookup"><span data-stu-id="041cc-655">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="041cc-656">Puede usar el `CInt` función para convertir otros tipos de datos explícitamente al tipo `Integer` con `Option Strict Off`.</span><span class="sxs-lookup"><span data-stu-id="041cc-656">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="041cc-657">Sin embargo, `CInt` redondea al entero más cercano en lugar de truncar la parte fraccionaria de números.</span><span class="sxs-lookup"><span data-stu-id="041cc-657">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="041cc-658">Por ejemplo:</span><span class="sxs-lookup"><span data-stu-id="041cc-658">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="041cc-659">Puede usar el `CInt` función del resultado de una llamada a `Fix` o `Int` para realizar la conversión explícita al entero sin redondear.</span><span class="sxs-lookup"><span data-stu-id="041cc-659">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="041cc-660">Por ejemplo:</span><span class="sxs-lookup"><span data-stu-id="041cc-660">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="041cc-661">Para obtener más información sobre `CInt`, consulte [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span><span class="sxs-lookup"><span data-stu-id="041cc-661">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="041cc-662">No se ha especificado Number.</span>
          <span class="sxs-lookup">
            <span data-stu-id="041cc-662">Number is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="041cc-663">Number no es un tipo numérico.</span>
          <span class="sxs-lookup">
            <span data-stu-id="041cc-663">Number is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">
          <span data-ttu-id="041cc-664">Type Conversion Functions</span>
          <span class="sxs-lookup">
            <span data-stu-id="041cc-664">Type Conversion Functions</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md">
          <span data-ttu-id="041cc-665">Resumen de tipos de datos (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="041cc-665">Data Type Summary (Visual Basic)</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/math-summary.md">
          <span data-ttu-id="041cc-666">Resumen de funciones matemáticas</span>
          <span class="sxs-lookup">
            <span data-stu-id="041cc-666">Math Summary</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/math-functions.md">
          <span data-ttu-id="041cc-667">Funciones matemáticas (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="041cc-667">Math Functions (Visual Basic)</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md">
          <span data-ttu-id="041cc-668">Resumen de conversión</span>
          <span class="sxs-lookup">
            <span data-stu-id="041cc-668">Conversion Summary</span>
          </span>
        </related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Oct">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="041cc-669">Devuelve una cadena que representa el valor octal de un número.</span>
          <span class="sxs-lookup">
            <span data-stu-id="041cc-669">Returns a string representing the octal value of a number.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Oct">
      <MemberSignature Language="C#" Value="public static string Oct (byte Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Oct(unsigned int8 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Oct(System.Byte)" />
      <MemberSignature Language="VB.NET" Value="Public Function Oct (Number As Byte) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Oct(System::Byte Number);" />
      <MemberSignature Language="F#" Value="static member Oct : byte -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Oct Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Byte" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="041cc-670">Obligatorio.</span>
          <span class="sxs-lookup">
            <span data-stu-id="041cc-670">Required.</span>
          </span>
          <span data-ttu-id="041cc-671">Cualquier expresión numérica o expresión de tipo <see langword="String" /> válida.</span>
          <span class="sxs-lookup">
            <span data-stu-id="041cc-671">Any valid numeric expression or <see langword="String" /> expression.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="041cc-672">Devuelve una cadena que representa el valor octal de un número.</span>
          <span class="sxs-lookup">
            <span data-stu-id="041cc-672">Returns a string representing the octal value of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="041cc-673">Devuelve una cadena que representa el valor octal de un número.</span>
          <span class="sxs-lookup">
            <span data-stu-id="041cc-673">Returns a string representing the octal value of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="041cc-674">Si `Number` ya no es un número entero, se redondea al número entero más cercano antes de que se va a evaluar.</span><span class="sxs-lookup"><span data-stu-id="041cc-674">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="041cc-675">Si el número es</span><span class="sxs-lookup"><span data-stu-id="041cc-675">If Number is</span></span>|<span data-ttu-id="041cc-676">Valor octal</span><span class="sxs-lookup"><span data-stu-id="041cc-676">Oct returns</span></span>|  
|-|-|  
|<span data-ttu-id="041cc-677">Empty</span><span class="sxs-lookup"><span data-stu-id="041cc-677">Empty</span></span>|<span data-ttu-id="041cc-678">Cero (0)</span><span class="sxs-lookup"><span data-stu-id="041cc-678">Zero (0)</span></span>|  
|<span data-ttu-id="041cc-679">Cualquier otro número</span><span class="sxs-lookup"><span data-stu-id="041cc-679">Any other number</span></span>|<span data-ttu-id="041cc-680">Hasta 22 caracteres octales</span><span class="sxs-lookup"><span data-stu-id="041cc-680">Up to 22 octal characters</span></span>|  
  
 <span data-ttu-id="041cc-681">Puede representar números octales directamente anteponiendo números en el intervalo correcto con `&O`.</span><span class="sxs-lookup"><span data-stu-id="041cc-681">You can represent octal numbers directly by preceding numbers in the proper range with `&O`.</span></span> <span data-ttu-id="041cc-682">Por ejemplo, `&O10` es la notación octal para 8 decimal.</span><span class="sxs-lookup"><span data-stu-id="041cc-682">For example, `&O10` is the octal notation for decimal 8.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="041cc-683">Este ejemplo se usa el `Oct` función para devolver el valor octal de un número.</span><span class="sxs-lookup"><span data-stu-id="041cc-683">This example uses the `Oct` function to return the octal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#30)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="041cc-684">No se especificó <paramref name="Number" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="041cc-684">
              <paramref name="Number" /> is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="041cc-685">
            <paramref name="Number" /> no es un tipo numérico.</span>
          <span class="sxs-lookup">
            <span data-stu-id="041cc-685">
              <paramref name="Number" /> is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Hex" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md">
          <span data-ttu-id="041cc-686">Resumen de conversión</span>
          <span class="sxs-lookup">
            <span data-stu-id="041cc-686">Conversion Summary</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">
          <span data-ttu-id="041cc-687">Type Conversion Functions</span>
          <span class="sxs-lookup">
            <span data-stu-id="041cc-687">Type Conversion Functions</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Oct">
      <MemberSignature Language="C#" Value="public static string Oct (short Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Oct(int16 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Oct(System.Int16)" />
      <MemberSignature Language="VB.NET" Value="Public Function Oct (Number As Short) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Oct(short Number);" />
      <MemberSignature Language="F#" Value="static member Oct : int16 -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Oct Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int16" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="041cc-688">Obligatorio.</span>
          <span class="sxs-lookup">
            <span data-stu-id="041cc-688">Required.</span>
          </span>
          <span data-ttu-id="041cc-689">Cualquier expresión numérica o expresión de tipo <see langword="String" /> válida.</span>
          <span class="sxs-lookup">
            <span data-stu-id="041cc-689">Any valid numeric expression or <see langword="String" /> expression.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="041cc-690">Devuelve una cadena que representa el valor octal de un número.</span>
          <span class="sxs-lookup">
            <span data-stu-id="041cc-690">Returns a string representing the octal value of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="041cc-691">Devuelve una cadena que representa el valor octal de un número.</span>
          <span class="sxs-lookup">
            <span data-stu-id="041cc-691">Returns a string representing the octal value of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="041cc-692">Si `Number` ya no es un número entero, se redondea al número entero más cercano antes de que se va a evaluar.</span><span class="sxs-lookup"><span data-stu-id="041cc-692">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="041cc-693">Si el número es</span><span class="sxs-lookup"><span data-stu-id="041cc-693">If Number is</span></span>|<span data-ttu-id="041cc-694">Valor octal</span><span class="sxs-lookup"><span data-stu-id="041cc-694">Oct returns</span></span>|  
|-|-|  
|<span data-ttu-id="041cc-695">Empty</span><span class="sxs-lookup"><span data-stu-id="041cc-695">Empty</span></span>|<span data-ttu-id="041cc-696">Cero (0)</span><span class="sxs-lookup"><span data-stu-id="041cc-696">Zero (0)</span></span>|  
|<span data-ttu-id="041cc-697">Cualquier otro número</span><span class="sxs-lookup"><span data-stu-id="041cc-697">Any other number</span></span>|<span data-ttu-id="041cc-698">Hasta 22 caracteres octales</span><span class="sxs-lookup"><span data-stu-id="041cc-698">Up to 22 octal characters</span></span>|  
  
 <span data-ttu-id="041cc-699">Puede representar números octales directamente anteponiendo números en el intervalo correcto con `&O`.</span><span class="sxs-lookup"><span data-stu-id="041cc-699">You can represent octal numbers directly by preceding numbers in the proper range with `&O`.</span></span> <span data-ttu-id="041cc-700">Por ejemplo, `&O10` es la notación octal para 8 decimal.</span><span class="sxs-lookup"><span data-stu-id="041cc-700">For example, `&O10` is the octal notation for decimal 8.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="041cc-701">Este ejemplo se usa el `Oct` función para devolver el valor octal de un número.</span><span class="sxs-lookup"><span data-stu-id="041cc-701">This example uses the `Oct` function to return the octal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#30)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="041cc-702">No se especificó <paramref name="Number" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="041cc-702">
              <paramref name="Number" /> is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="041cc-703">
            <paramref name="Number" /> no es un tipo numérico.</span>
          <span class="sxs-lookup">
            <span data-stu-id="041cc-703">
              <paramref name="Number" /> is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Hex" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md">
          <span data-ttu-id="041cc-704">Resumen de conversión</span>
          <span class="sxs-lookup">
            <span data-stu-id="041cc-704">Conversion Summary</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">
          <span data-ttu-id="041cc-705">Type Conversion Functions</span>
          <span class="sxs-lookup">
            <span data-stu-id="041cc-705">Type Conversion Functions</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Oct">
      <MemberSignature Language="C#" Value="public static string Oct (int Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Oct(int32 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Oct(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Oct (Number As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Oct(int Number);" />
      <MemberSignature Language="F#" Value="static member Oct : int -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Oct Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="041cc-706">Obligatorio.</span>
          <span class="sxs-lookup">
            <span data-stu-id="041cc-706">Required.</span>
          </span>
          <span data-ttu-id="041cc-707">Cualquier expresión numérica o expresión de tipo <see langword="String" /> válida.</span>
          <span class="sxs-lookup">
            <span data-stu-id="041cc-707">Any valid numeric expression or <see langword="String" /> expression.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="041cc-708">Devuelve una cadena que representa el valor octal de un número.</span>
          <span class="sxs-lookup">
            <span data-stu-id="041cc-708">Returns a string representing the octal value of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="041cc-709">Devuelve una cadena que representa el valor octal de un número.</span>
          <span class="sxs-lookup">
            <span data-stu-id="041cc-709">Returns a string representing the octal value of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="041cc-710">Si `Number` ya no es un número entero, se redondea al número entero más cercano antes de que se va a evaluar.</span><span class="sxs-lookup"><span data-stu-id="041cc-710">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="041cc-711">Si el número es</span><span class="sxs-lookup"><span data-stu-id="041cc-711">If Number is</span></span>|<span data-ttu-id="041cc-712">Valor octal</span><span class="sxs-lookup"><span data-stu-id="041cc-712">Oct returns</span></span>|  
|-|-|  
|<span data-ttu-id="041cc-713">Empty</span><span class="sxs-lookup"><span data-stu-id="041cc-713">Empty</span></span>|<span data-ttu-id="041cc-714">Cero (0)</span><span class="sxs-lookup"><span data-stu-id="041cc-714">Zero (0)</span></span>|  
|<span data-ttu-id="041cc-715">Cualquier otro número</span><span class="sxs-lookup"><span data-stu-id="041cc-715">Any other number</span></span>|<span data-ttu-id="041cc-716">Hasta 22 caracteres octales</span><span class="sxs-lookup"><span data-stu-id="041cc-716">Up to 22 octal characters</span></span>|  
  
 <span data-ttu-id="041cc-717">Puede representar números octales directamente anteponiendo números en el intervalo correcto con `&O`.</span><span class="sxs-lookup"><span data-stu-id="041cc-717">You can represent octal numbers directly by preceding numbers in the proper range with `&O`.</span></span> <span data-ttu-id="041cc-718">Por ejemplo, `&O10` es la notación octal para 8 decimal.</span><span class="sxs-lookup"><span data-stu-id="041cc-718">For example, `&O10` is the octal notation for decimal 8.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="041cc-719">Este ejemplo se usa el `Oct` función para devolver el valor octal de un número.</span><span class="sxs-lookup"><span data-stu-id="041cc-719">This example uses the `Oct` function to return the octal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#30)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="041cc-720">No se especificó <paramref name="Number" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="041cc-720">
              <paramref name="Number" /> is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="041cc-721">
            <paramref name="Number" /> no es un tipo numérico.</span>
          <span class="sxs-lookup">
            <span data-stu-id="041cc-721">
              <paramref name="Number" /> is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Hex" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md">
          <span data-ttu-id="041cc-722">Resumen de conversión</span>
          <span class="sxs-lookup">
            <span data-stu-id="041cc-722">Conversion Summary</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">
          <span data-ttu-id="041cc-723">Type Conversion Functions</span>
          <span class="sxs-lookup">
            <span data-stu-id="041cc-723">Type Conversion Functions</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Oct">
      <MemberSignature Language="C#" Value="public static string Oct (long Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Oct(int64 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Oct(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Function Oct (Number As Long) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Oct(long Number);" />
      <MemberSignature Language="F#" Value="static member Oct : int64 -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Oct Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="041cc-724">Obligatorio.</span>
          <span class="sxs-lookup">
            <span data-stu-id="041cc-724">Required.</span>
          </span>
          <span data-ttu-id="041cc-725">Cualquier expresión numérica o expresión de tipo <see langword="String" /> válida.</span>
          <span class="sxs-lookup">
            <span data-stu-id="041cc-725">Any valid numeric expression or <see langword="String" /> expression.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="041cc-726">Devuelve una cadena que representa el valor octal de un número.</span>
          <span class="sxs-lookup">
            <span data-stu-id="041cc-726">Returns a string representing the octal value of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="041cc-727">Devuelve una cadena que representa el valor octal de un número.</span>
          <span class="sxs-lookup">
            <span data-stu-id="041cc-727">Returns a string representing the octal value of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="041cc-728">Si `Number` ya no es un número entero, se redondea al número entero más cercano antes de que se va a evaluar.</span><span class="sxs-lookup"><span data-stu-id="041cc-728">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="041cc-729">Si el número es</span><span class="sxs-lookup"><span data-stu-id="041cc-729">If Number is</span></span>|<span data-ttu-id="041cc-730">Valor octal</span><span class="sxs-lookup"><span data-stu-id="041cc-730">Oct returns</span></span>|  
|-|-|  
|<span data-ttu-id="041cc-731">Empty</span><span class="sxs-lookup"><span data-stu-id="041cc-731">Empty</span></span>|<span data-ttu-id="041cc-732">Cero (0)</span><span class="sxs-lookup"><span data-stu-id="041cc-732">Zero (0)</span></span>|  
|<span data-ttu-id="041cc-733">Cualquier otro número</span><span class="sxs-lookup"><span data-stu-id="041cc-733">Any other number</span></span>|<span data-ttu-id="041cc-734">Hasta 22 caracteres octales</span><span class="sxs-lookup"><span data-stu-id="041cc-734">Up to 22 octal characters</span></span>|  
  
 <span data-ttu-id="041cc-735">Puede representar números octales directamente anteponiendo números en el intervalo correcto con `&O`.</span><span class="sxs-lookup"><span data-stu-id="041cc-735">You can represent octal numbers directly by preceding numbers in the proper range with `&O`.</span></span> <span data-ttu-id="041cc-736">Por ejemplo, `&O10` es la notación octal para 8 decimal.</span><span class="sxs-lookup"><span data-stu-id="041cc-736">For example, `&O10` is the octal notation for decimal 8.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="041cc-737">Este ejemplo se usa el `Oct` función para devolver el valor octal de un número.</span><span class="sxs-lookup"><span data-stu-id="041cc-737">This example uses the `Oct` function to return the octal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#30)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="041cc-738">No se especificó <paramref name="Number" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="041cc-738">
              <paramref name="Number" /> is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="041cc-739">
            <paramref name="Number" /> no es un tipo numérico.</span>
          <span class="sxs-lookup">
            <span data-stu-id="041cc-739">
              <paramref name="Number" /> is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Hex" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md">
          <span data-ttu-id="041cc-740">Resumen de conversión</span>
          <span class="sxs-lookup">
            <span data-stu-id="041cc-740">Conversion Summary</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">
          <span data-ttu-id="041cc-741">Type Conversion Functions</span>
          <span class="sxs-lookup">
            <span data-stu-id="041cc-741">Type Conversion Functions</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Oct">
      <MemberSignature Language="C#" Value="public static string Oct (object Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Oct(object Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Oct(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Oct (Number As Object) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Oct(System::Object ^ Number);" />
      <MemberSignature Language="F#" Value="static member Oct : obj -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Oct Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="041cc-742">Obligatorio.</span>
          <span class="sxs-lookup">
            <span data-stu-id="041cc-742">Required.</span>
          </span>
          <span data-ttu-id="041cc-743">Cualquier expresión numérica o expresión de tipo <see langword="String" /> válida.</span>
          <span class="sxs-lookup">
            <span data-stu-id="041cc-743">Any valid numeric expression or <see langword="String" /> expression.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="041cc-744">Devuelve una cadena que representa el valor octal de un número.</span>
          <span class="sxs-lookup">
            <span data-stu-id="041cc-744">Returns a string representing the octal value of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="041cc-745">Devuelve una cadena que representa el valor octal de un número.</span>
          <span class="sxs-lookup">
            <span data-stu-id="041cc-745">Returns a string representing the octal value of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="041cc-746">Si `Number` ya no es un número entero, se redondea al número entero más cercano antes de que se va a evaluar.</span><span class="sxs-lookup"><span data-stu-id="041cc-746">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="041cc-747">Si el número es</span><span class="sxs-lookup"><span data-stu-id="041cc-747">If Number is</span></span>|<span data-ttu-id="041cc-748">Valor octal</span><span class="sxs-lookup"><span data-stu-id="041cc-748">Oct returns</span></span>|  
|-|-|  
|<span data-ttu-id="041cc-749">Empty</span><span class="sxs-lookup"><span data-stu-id="041cc-749">Empty</span></span>|<span data-ttu-id="041cc-750">Cero (0)</span><span class="sxs-lookup"><span data-stu-id="041cc-750">Zero (0)</span></span>|  
|<span data-ttu-id="041cc-751">Cualquier otro número</span><span class="sxs-lookup"><span data-stu-id="041cc-751">Any other number</span></span>|<span data-ttu-id="041cc-752">Hasta 22 caracteres octales</span><span class="sxs-lookup"><span data-stu-id="041cc-752">Up to 22 octal characters</span></span>|  
  
 <span data-ttu-id="041cc-753">Puede representar números octales directamente anteponiendo números en el intervalo correcto con `&O`.</span><span class="sxs-lookup"><span data-stu-id="041cc-753">You can represent octal numbers directly by preceding numbers in the proper range with `&O`.</span></span> <span data-ttu-id="041cc-754">Por ejemplo, `&O10` es la notación octal para 8 decimal.</span><span class="sxs-lookup"><span data-stu-id="041cc-754">For example, `&O10` is the octal notation for decimal 8.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="041cc-755">Este ejemplo se usa el `Oct` función para devolver el valor octal de un número.</span><span class="sxs-lookup"><span data-stu-id="041cc-755">This example uses the `Oct` function to return the octal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#30)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="041cc-756">No se especificó <paramref name="Number" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="041cc-756">
              <paramref name="Number" /> is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="041cc-757">
            <paramref name="Number" /> no es un tipo numérico.</span>
          <span class="sxs-lookup">
            <span data-stu-id="041cc-757">
              <paramref name="Number" /> is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Hex" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md">
          <span data-ttu-id="041cc-758">Resumen de conversión</span>
          <span class="sxs-lookup">
            <span data-stu-id="041cc-758">Conversion Summary</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">
          <span data-ttu-id="041cc-759">Type Conversion Functions</span>
          <span class="sxs-lookup">
            <span data-stu-id="041cc-759">Type Conversion Functions</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Oct">
      <MemberSignature Language="C#" Value="public static string Oct (sbyte Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Oct(int8 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Oct(System.SByte)" />
      <MemberSignature Language="VB.NET" Value="Public Function Oct (Number As SByte) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Oct(System::SByte Number);" />
      <MemberSignature Language="F#" Value="static member Oct : sbyte -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Oct Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.SByte" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="041cc-760">Obligatorio.</span>
          <span class="sxs-lookup">
            <span data-stu-id="041cc-760">Required.</span>
          </span>
          <span data-ttu-id="041cc-761">Cualquier expresión numérica o expresión de tipo <see langword="String" /> válida.</span>
          <span class="sxs-lookup">
            <span data-stu-id="041cc-761">Any valid numeric expression or <see langword="String" /> expression.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="041cc-762">Devuelve una cadena que representa el valor octal de un número.</span>
          <span class="sxs-lookup">
            <span data-stu-id="041cc-762">Returns a string representing the octal value of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="041cc-763">Devuelve una cadena que representa el valor octal de un número.</span>
          <span class="sxs-lookup">
            <span data-stu-id="041cc-763">Returns a string representing the octal value of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="041cc-764">Si `Number` ya no es un número entero, se redondea al número entero más cercano antes de que se va a evaluar.</span><span class="sxs-lookup"><span data-stu-id="041cc-764">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="041cc-765">Si el número es</span><span class="sxs-lookup"><span data-stu-id="041cc-765">If Number is</span></span>|<span data-ttu-id="041cc-766">Valor octal</span><span class="sxs-lookup"><span data-stu-id="041cc-766">Oct returns</span></span>|  
|-|-|  
|<span data-ttu-id="041cc-767">Empty</span><span class="sxs-lookup"><span data-stu-id="041cc-767">Empty</span></span>|<span data-ttu-id="041cc-768">Cero (0)</span><span class="sxs-lookup"><span data-stu-id="041cc-768">Zero (0)</span></span>|  
|<span data-ttu-id="041cc-769">Cualquier otro número</span><span class="sxs-lookup"><span data-stu-id="041cc-769">Any other number</span></span>|<span data-ttu-id="041cc-770">Hasta 22 caracteres octales</span><span class="sxs-lookup"><span data-stu-id="041cc-770">Up to 22 octal characters</span></span>|  
  
 <span data-ttu-id="041cc-771">Puede representar números octales directamente anteponiendo números en el intervalo correcto con `&O`.</span><span class="sxs-lookup"><span data-stu-id="041cc-771">You can represent octal numbers directly by preceding numbers in the proper range with `&O`.</span></span> <span data-ttu-id="041cc-772">Por ejemplo, `&O10` es la notación octal para 8 decimal.</span><span class="sxs-lookup"><span data-stu-id="041cc-772">For example, `&O10` is the octal notation for decimal 8.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="041cc-773">Este ejemplo se usa el `Oct` función para devolver el valor octal de un número.</span><span class="sxs-lookup"><span data-stu-id="041cc-773">This example uses the `Oct` function to return the octal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#30)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Conversion.Oct(System.Byte)" />
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="041cc-774">No se especificó <paramref name="Number" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="041cc-774">
              <paramref name="Number" /> is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="041cc-775">
            <paramref name="Number" /> no es un tipo numérico.</span>
          <span class="sxs-lookup">
            <span data-stu-id="041cc-775">
              <paramref name="Number" /> is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Hex" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md">
          <span data-ttu-id="041cc-776">Resumen de conversión</span>
          <span class="sxs-lookup">
            <span data-stu-id="041cc-776">Conversion Summary</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">
          <span data-ttu-id="041cc-777">Type Conversion Functions</span>
          <span class="sxs-lookup">
            <span data-stu-id="041cc-777">Type Conversion Functions</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Oct">
      <MemberSignature Language="C#" Value="public static string Oct (ushort Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Oct(unsigned int16 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Oct(System.UInt16)" />
      <MemberSignature Language="VB.NET" Value="Public Function Oct (Number As UShort) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Oct(System::UInt16 Number);" />
      <MemberSignature Language="F#" Value="static member Oct : uint16 -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Oct Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.UInt16" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="041cc-778">Obligatorio.</span>
          <span class="sxs-lookup">
            <span data-stu-id="041cc-778">Required.</span>
          </span>
          <span data-ttu-id="041cc-779">Cualquier expresión numérica o expresión de tipo <see langword="String" /> válida.</span>
          <span class="sxs-lookup">
            <span data-stu-id="041cc-779">Any valid numeric expression or <see langword="String" /> expression.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="041cc-780">Devuelve una cadena que representa el valor octal de un número.</span>
          <span class="sxs-lookup">
            <span data-stu-id="041cc-780">Returns a string representing the octal value of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="041cc-781">Devuelve una cadena que representa el valor octal de un número.</span>
          <span class="sxs-lookup">
            <span data-stu-id="041cc-781">Returns a string representing the octal value of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="041cc-782">Si `Number` ya no es un número entero, se redondea al número entero más cercano antes de que se va a evaluar.</span><span class="sxs-lookup"><span data-stu-id="041cc-782">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="041cc-783">Si el número es</span><span class="sxs-lookup"><span data-stu-id="041cc-783">If Number is</span></span>|<span data-ttu-id="041cc-784">Valor octal</span><span class="sxs-lookup"><span data-stu-id="041cc-784">Oct returns</span></span>|  
|-|-|  
|<span data-ttu-id="041cc-785">Empty</span><span class="sxs-lookup"><span data-stu-id="041cc-785">Empty</span></span>|<span data-ttu-id="041cc-786">Cero (0)</span><span class="sxs-lookup"><span data-stu-id="041cc-786">Zero (0)</span></span>|  
|<span data-ttu-id="041cc-787">Cualquier otro número</span><span class="sxs-lookup"><span data-stu-id="041cc-787">Any other number</span></span>|<span data-ttu-id="041cc-788">Hasta 22 caracteres octales</span><span class="sxs-lookup"><span data-stu-id="041cc-788">Up to 22 octal characters</span></span>|  
  
 <span data-ttu-id="041cc-789">Puede representar números octales directamente anteponiendo números en el intervalo correcto con `&O`.</span><span class="sxs-lookup"><span data-stu-id="041cc-789">You can represent octal numbers directly by preceding numbers in the proper range with `&O`.</span></span> <span data-ttu-id="041cc-790">Por ejemplo, `&O10` es la notación octal para 8 decimal.</span><span class="sxs-lookup"><span data-stu-id="041cc-790">For example, `&O10` is the octal notation for decimal 8.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="041cc-791">Este ejemplo se usa el `Oct` función para devolver el valor octal de un número.</span><span class="sxs-lookup"><span data-stu-id="041cc-791">This example uses the `Oct` function to return the octal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#30)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Conversion.Oct(System.Int16)" />
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="041cc-792">No se especificó <paramref name="Number" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="041cc-792">
              <paramref name="Number" /> is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="041cc-793">
            <paramref name="Number" /> no es un tipo numérico.</span>
          <span class="sxs-lookup">
            <span data-stu-id="041cc-793">
              <paramref name="Number" /> is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Hex" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md">
          <span data-ttu-id="041cc-794">Resumen de conversión</span>
          <span class="sxs-lookup">
            <span data-stu-id="041cc-794">Conversion Summary</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">
          <span data-ttu-id="041cc-795">Type Conversion Functions</span>
          <span class="sxs-lookup">
            <span data-stu-id="041cc-795">Type Conversion Functions</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Oct">
      <MemberSignature Language="C#" Value="public static string Oct (uint Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Oct(unsigned int32 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Oct(System.UInt32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Oct (Number As UInteger) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Oct(System::UInt32 Number);" />
      <MemberSignature Language="F#" Value="static member Oct : uint32 -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Oct Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.UInt32" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="041cc-796">Obligatorio.</span>
          <span class="sxs-lookup">
            <span data-stu-id="041cc-796">Required.</span>
          </span>
          <span data-ttu-id="041cc-797">Cualquier expresión numérica o expresión de tipo <see langword="String" /> válida.</span>
          <span class="sxs-lookup">
            <span data-stu-id="041cc-797">Any valid numeric expression or <see langword="String" /> expression.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="041cc-798">Devuelve una cadena que representa el valor octal de un número.</span>
          <span class="sxs-lookup">
            <span data-stu-id="041cc-798">Returns a string representing the octal value of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="041cc-799">Devuelve una cadena que representa el valor octal de un número.</span>
          <span class="sxs-lookup">
            <span data-stu-id="041cc-799">Returns a string representing the octal value of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="041cc-800">Si `Number` ya no es un número entero, se redondea al número entero más cercano antes de que se va a evaluar.</span><span class="sxs-lookup"><span data-stu-id="041cc-800">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="041cc-801">Si el número es</span><span class="sxs-lookup"><span data-stu-id="041cc-801">If Number is</span></span>|<span data-ttu-id="041cc-802">Valor octal</span><span class="sxs-lookup"><span data-stu-id="041cc-802">Oct returns</span></span>|  
|-|-|  
|<span data-ttu-id="041cc-803">Empty</span><span class="sxs-lookup"><span data-stu-id="041cc-803">Empty</span></span>|<span data-ttu-id="041cc-804">Cero (0)</span><span class="sxs-lookup"><span data-stu-id="041cc-804">Zero (0)</span></span>|  
|<span data-ttu-id="041cc-805">Cualquier otro número</span><span class="sxs-lookup"><span data-stu-id="041cc-805">Any other number</span></span>|<span data-ttu-id="041cc-806">Hasta 22 caracteres octales</span><span class="sxs-lookup"><span data-stu-id="041cc-806">Up to 22 octal characters</span></span>|  
  
 <span data-ttu-id="041cc-807">Puede representar números octales directamente anteponiendo números en el intervalo correcto con `&O`.</span><span class="sxs-lookup"><span data-stu-id="041cc-807">You can represent octal numbers directly by preceding numbers in the proper range with `&O`.</span></span> <span data-ttu-id="041cc-808">Por ejemplo, `&O10` es la notación octal para 8 decimal.</span><span class="sxs-lookup"><span data-stu-id="041cc-808">For example, `&O10` is the octal notation for decimal 8.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="041cc-809">Este ejemplo se usa el `Oct` función para devolver el valor octal de un número.</span><span class="sxs-lookup"><span data-stu-id="041cc-809">This example uses the `Oct` function to return the octal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#30)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Conversion.Oct(System.Int32)" />
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="041cc-810">No se especificó <paramref name="Number" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="041cc-810">
              <paramref name="Number" /> is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="041cc-811">
            <paramref name="Number" /> no es un tipo numérico.</span>
          <span class="sxs-lookup">
            <span data-stu-id="041cc-811">
              <paramref name="Number" /> is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Hex" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md">
          <span data-ttu-id="041cc-812">Resumen de conversión</span>
          <span class="sxs-lookup">
            <span data-stu-id="041cc-812">Conversion Summary</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">
          <span data-ttu-id="041cc-813">Type Conversion Functions</span>
          <span class="sxs-lookup">
            <span data-stu-id="041cc-813">Type Conversion Functions</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Oct">
      <MemberSignature Language="C#" Value="public static string Oct (ulong Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Oct(unsigned int64 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Oct(System.UInt64)" />
      <MemberSignature Language="VB.NET" Value="Public Function Oct (Number As ULong) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Oct(System::UInt64 Number);" />
      <MemberSignature Language="F#" Value="static member Oct : uint64 -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Oct Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.UInt64" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="041cc-814">Obligatorio.</span>
          <span class="sxs-lookup">
            <span data-stu-id="041cc-814">Required.</span>
          </span>
          <span data-ttu-id="041cc-815">Cualquier expresión numérica o expresión de tipo <see langword="String" /> válida.</span>
          <span class="sxs-lookup">
            <span data-stu-id="041cc-815">Any valid numeric expression or <see langword="String" /> expression.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="041cc-816">Devuelve una cadena que representa el valor octal de un número.</span>
          <span class="sxs-lookup">
            <span data-stu-id="041cc-816">Returns a string representing the octal value of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="041cc-817">Devuelve una cadena que representa el valor octal de un número.</span>
          <span class="sxs-lookup">
            <span data-stu-id="041cc-817">Returns a string representing the octal value of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="041cc-818">Si `Number` ya no es un número entero, se redondea al número entero más cercano antes de que se va a evaluar.</span><span class="sxs-lookup"><span data-stu-id="041cc-818">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="041cc-819">Si el número es</span><span class="sxs-lookup"><span data-stu-id="041cc-819">If Number is</span></span>|<span data-ttu-id="041cc-820">Valor octal</span><span class="sxs-lookup"><span data-stu-id="041cc-820">Oct returns</span></span>|  
|-|-|  
|<span data-ttu-id="041cc-821">Empty</span><span class="sxs-lookup"><span data-stu-id="041cc-821">Empty</span></span>|<span data-ttu-id="041cc-822">Cero (0)</span><span class="sxs-lookup"><span data-stu-id="041cc-822">Zero (0)</span></span>|  
|<span data-ttu-id="041cc-823">Cualquier otro número</span><span class="sxs-lookup"><span data-stu-id="041cc-823">Any other number</span></span>|<span data-ttu-id="041cc-824">Hasta 22 caracteres octales</span><span class="sxs-lookup"><span data-stu-id="041cc-824">Up to 22 octal characters</span></span>|  
  
 <span data-ttu-id="041cc-825">Puede representar números octales directamente anteponiendo números en el intervalo correcto con `&O`.</span><span class="sxs-lookup"><span data-stu-id="041cc-825">You can represent octal numbers directly by preceding numbers in the proper range with `&O`.</span></span> <span data-ttu-id="041cc-826">Por ejemplo, `&O10` es la notación octal para 8 decimal.</span><span class="sxs-lookup"><span data-stu-id="041cc-826">For example, `&O10` is the octal notation for decimal 8.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="041cc-827">Este ejemplo se usa el `Oct` función para devolver el valor octal de un número.</span><span class="sxs-lookup"><span data-stu-id="041cc-827">This example uses the `Oct` function to return the octal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#30)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Conversion.Oct(System.Int64)" />
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="041cc-828">No se especificó <paramref name="Number" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="041cc-828">
              <paramref name="Number" /> is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="041cc-829">
            <paramref name="Number" /> no es un tipo numérico.</span>
          <span class="sxs-lookup">
            <span data-stu-id="041cc-829">
              <paramref name="Number" /> is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Hex" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md">
          <span data-ttu-id="041cc-830">Resumen de conversión</span>
          <span class="sxs-lookup">
            <span data-stu-id="041cc-830">Conversion Summary</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">
          <span data-ttu-id="041cc-831">Type Conversion Functions</span>
          <span class="sxs-lookup">
            <span data-stu-id="041cc-831">Type Conversion Functions</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Str">
      <MemberSignature Language="C#" Value="public static string Str (object Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Str(object Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Str(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Str (Number As Object) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Str(System::Object ^ Number);" />
      <MemberSignature Language="F#" Value="static member Str : obj -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Str Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="041cc-832">Obligatorio.</span>
          <span class="sxs-lookup">
            <span data-stu-id="041cc-832">Required.</span>
          </span>
          <span data-ttu-id="041cc-833">
            <see langword="Object" /> que contiene cualquier expresión numérica válida.</span>
          <span class="sxs-lookup">
            <span data-stu-id="041cc-833">An <see langword="Object" /> containing any valid numeric expression.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="041cc-834">Devuelve una representación de tipo <see langword="String" /> de un número.</span>
          <span class="sxs-lookup">
            <span data-stu-id="041cc-834">Returns a <see langword="String" /> representation of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="041cc-835">Devuelve una representación de tipo <see langword="String" /> de un número.</span>
          <span class="sxs-lookup">
            <span data-stu-id="041cc-835">Returns a <see langword="String" /> representation of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="041cc-836">Cuando los números se convierten en cadenas, un espacio inicial siempre se reserva para el inicio de sesión de `Number`.</span><span class="sxs-lookup"><span data-stu-id="041cc-836">When numbers are converted to strings, a leading space is always reserved for the sign of `Number`.</span></span> <span data-ttu-id="041cc-837">Si `Number` es positivo, la cadena devuelta contiene un espacio inicial y el signo más es implícito.</span><span class="sxs-lookup"><span data-stu-id="041cc-837">If `Number` is positive, the returned string contains a leading space, and the plus sign is implied.</span></span> <span data-ttu-id="041cc-838">Un número negativo incluirá el signo menos (-) y ningún espacio inicial.</span><span class="sxs-lookup"><span data-stu-id="041cc-838">A negative number will include the minus sign (-) and no leading space.</span></span>  
  
 <span data-ttu-id="041cc-839">Use el `Format` función para convertir valores numéricos que desee con formato como fechas, horas o moneda u otros formatos definidos por el usuario.</span><span class="sxs-lookup"><span data-stu-id="041cc-839">Use the `Format` function to convert numeric values you want formatted as dates, times, or currency or in other user-defined formats.</span></span> <span data-ttu-id="041cc-840">A diferencia de la `Str` función, el `Format` función no incluye un espacio inicial para el inicio de sesión de `Number`.</span><span class="sxs-lookup"><span data-stu-id="041cc-840">Unlike the `Str` function, the `Format` function does not include a leading space for the sign of `Number`.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="041cc-841">El `Str` función reconoce solo el período (`.`) como separador decimal válido.</span><span class="sxs-lookup"><span data-stu-id="041cc-841">The `Str` function recognizes only the period (`.`) as a valid decimal separator.</span></span> <span data-ttu-id="041cc-842">Si se utilizan separadores decimales diferentes (por ejemplo, en aplicaciones internacionales), utilice el `CStr` o `Format` funciones para convertir un número en una cadena.</span><span class="sxs-lookup"><span data-stu-id="041cc-842">If different decimal separators are used (for example, in international applications), use the `CStr` or `Format` functions to convert a number to a string.</span></span> <span data-ttu-id="041cc-843">Para obtener la representación de cadena de un número en una referencia cultural determinada, use el número `ToString(IFormatProvider)` método.</span><span class="sxs-lookup"><span data-stu-id="041cc-843">To get the string representation of a number in a particular culture, use the number's `ToString(IFormatProvider)` method.</span></span> <span data-ttu-id="041cc-844">Por ejemplo, usar <xref:System.Double.ToString%2A> al convertir un valor de tipo `Double` en una cadena.</span><span class="sxs-lookup"><span data-stu-id="041cc-844">For example, use <xref:System.Double.ToString%2A> when converting a value of type `Double` to a string.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="041cc-845">Este ejemplo se usa el `Str` función devuelva un `String` representación de un número.</span><span class="sxs-lookup"><span data-stu-id="041cc-845">This example uses the `Str` function to return a `String` representation of a number.</span></span> <span data-ttu-id="041cc-846">Cuando un número positivo se convierte en una cadena, un espacio inicial siempre está reservado para su inicio de sesión.</span><span class="sxs-lookup"><span data-stu-id="041cc-846">When a positive number is converted to a string, a leading space is always reserved for its sign.</span></span>  
  
 [!code-vb[VbVbalrStrings#1](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="041cc-847">No se especificó <paramref name="Number" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="041cc-847">
              <paramref name="Number" /> is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidCastException">
          <span data-ttu-id="041cc-848">
            <paramref name="Number" /> no es un tipo numérico.</span>
          <span class="sxs-lookup">
            <span data-stu-id="041cc-848">
              <paramref name="Number" /> is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Format(System.Object,System.String)" />
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Val" />
        <altmember cref="T:System.ArgumentNullException" />
        <altmember cref="T:System.InvalidCastException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md">
          <span data-ttu-id="041cc-849">Resumen de conversión</span>
          <span class="sxs-lookup">
            <span data-stu-id="041cc-849">Conversion Summary</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">
          <span data-ttu-id="041cc-850">Type Conversion Functions</span>
          <span class="sxs-lookup">
            <span data-stu-id="041cc-850">Type Conversion Functions</span>
          </span>
        </related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Val">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="041cc-851">Devuelve los números que contiene una cadena como un valor numérico del tipo apropiado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="041cc-851">Returns the numbers contained in a string as a numeric value of appropriate type.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Val">
      <MemberSignature Language="C#" Value="public static int Val (char Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Val(char Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Val(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Function Val (Expression As Char) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Val(char Expression);" />
      <MemberSignature Language="F#" Value="static member Val : char -&gt; int" Usage="Microsoft.VisualBasic.Conversion.Val Expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="Expression">
          <span data-ttu-id="041cc-852">Obligatorio.</span>
          <span class="sxs-lookup">
            <span data-stu-id="041cc-852">Required.</span>
          </span>
          <span data-ttu-id="041cc-853">Cualquier expresión de tipo <see langword="String" />, variable de <see langword="Object" /> o valor de <see langword="Char" /> válido.</span>
          <span class="sxs-lookup">
            <span data-stu-id="041cc-853">Any valid <see langword="String" /> expression, <see langword="Object" /> variable, or <see langword="Char" /> value.</span>
          </span>
          <span data-ttu-id="041cc-854">Si <c>Expression</c> es de tipo <see langword="Object" />, su valor debe ser convertible a <see langword="String" /> o se produce un error <see cref="T:System.ArgumentException" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="041cc-854">If <c>Expression</c> is of type <see langword="Object" />, its value must be convertible to <see langword="String" /> or an <see cref="T:System.ArgumentException" /> error occurs.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="041cc-855">Devuelve los números que contiene una cadena como un valor numérico del tipo apropiado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="041cc-855">Returns the numbers contained in a string as a numeric value of appropriate type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="041cc-856">Devuelve los números que contiene una cadena como un valor numérico del tipo apropiado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="041cc-856">Returns the numbers contained in a string as a numeric value of appropriate type.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="041cc-857">El `Val` función deja de leer la cadena en el primer carácter que no se reconoce como parte de un número.</span><span class="sxs-lookup"><span data-stu-id="041cc-857">The `Val` function stops reading the string at the first character it cannot recognize as part of a number.</span></span> <span data-ttu-id="041cc-858">Símbolos y caracteres que a menudo se consideran parte de los valores numéricos, como signos de dólar y comas, no se reconocen.</span><span class="sxs-lookup"><span data-stu-id="041cc-858">Symbols and characters that are often considered parts of numeric values, such as dollar signs and commas, are not recognized.</span></span> <span data-ttu-id="041cc-859">Sin embargo, la función reconoce los prefijos de base `&O` (para octal) y `&H` (de hexadecimal).</span><span class="sxs-lookup"><span data-stu-id="041cc-859">However, the function recognizes the radix prefixes `&O` (for octal) and `&H` (for hexadecimal).</span></span> <span data-ttu-id="041cc-860">Caracteres de avance de línea, tabulaciones y espacios en blanco se quitan del argumento.</span><span class="sxs-lookup"><span data-stu-id="041cc-860">Blanks, tabs, and linefeed characters are stripped from the argument.</span></span>  
  
 <span data-ttu-id="041cc-861">La siguiente llamada devuelve el valor 1615198.</span><span class="sxs-lookup"><span data-stu-id="041cc-861">The following call returns the value 1615198.</span></span>  
  
```  
  
Val(" 1615 198th Street N.E.")   
```  
  
 <span data-ttu-id="041cc-862">La siguiente llamada devuelve el valor decimal -1.</span><span class="sxs-lookup"><span data-stu-id="041cc-862">The following call returns the decimal value -1.</span></span>  
  
```  
  
Val("&HFFFF")   
```  
  
> [!NOTE]
>  <span data-ttu-id="041cc-863">El `Val` función reconoce solo el período (`.`) como separador decimal válido.</span><span class="sxs-lookup"><span data-stu-id="041cc-863">The `Val` function recognizes only the period (`.`) as a valid decimal separator.</span></span> <span data-ttu-id="041cc-864">Cuando se utilizan separadores decimales diferentes, como en aplicaciones internacionales, utilice `CDbl` o `CInt` en su lugar para convertir una cadena en un número.</span><span class="sxs-lookup"><span data-stu-id="041cc-864">When different decimal separators are used, as in international applications, use `CDbl` or `CInt` instead to convert a string to a number.</span></span> <span data-ttu-id="041cc-865">Para convertir la representación de cadena de un número en una referencia cultural determinada a un valor numérico, use el tipo numérico `Parse(String, IFormatProvider)` método.</span><span class="sxs-lookup"><span data-stu-id="041cc-865">To convert the string representation of a number in a particular culture to a numeric value, use the numeric type's `Parse(String, IFormatProvider)` method.</span></span> <span data-ttu-id="041cc-866">Por ejemplo, usar <xref:System.Double.Parse%2A?displayProperty=nameWithType> al convertir una cadena en un `Double`.</span><span class="sxs-lookup"><span data-stu-id="041cc-866">For example, use <xref:System.Double.Parse%2A?displayProperty=nameWithType> when converting a string to a `Double`.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="041cc-867">Un <xref:System.InvalidCastException> excepción podría producirse en respuesta a determinados formatos de número poco habituales.</span><span class="sxs-lookup"><span data-stu-id="041cc-867">An <xref:System.InvalidCastException> exception might be raised in response to certain uncommon number formats.</span></span> <span data-ttu-id="041cc-868">Por ejemplo, el código siguiente genera esta excepción.</span><span class="sxs-lookup"><span data-stu-id="041cc-868">For example, the following code raises this exception.</span></span>  
>   
>  `' These examples cause run-time errors.`  
>   
>  `'Console.WriteLine(Val("1.34%"))`  
>   
>  `'Console.WriteLine(Val("1.34&"))`  
>   
>  <span data-ttu-id="041cc-869">El conflicto entre el número con formato como un `Double` y `Integer` y `Long` caracteres de tipo podrían ser el compilador detectará si no estuviera contenida en una cadena.</span><span class="sxs-lookup"><span data-stu-id="041cc-869">The conflict between the number formatted as a `Double` and the `Integer` and `Long` type characters would be caught by the compiler if it were not contained in a string.</span></span>  
>   
>  `' These examples cause compiler errors.`  
>   
>  `'Dim m = 1.34%`  
>   
>  `'Dim n = 1.34&`  
  
   
  
## Examples  
 <span data-ttu-id="041cc-870">En el ejemplo siguiente se usa el `Val` función para devolver los números contenidos en cada cadena.</span><span class="sxs-lookup"><span data-stu-id="041cc-870">The following example uses the `Val` function to return the numbers contained in each string.</span></span> <span data-ttu-id="041cc-871">`Val` detiene la conversión en el primer carácter que no se puede interpretar como un dígito numérico, modificador numérico, puntuación numérica o espacio en blanco.</span><span class="sxs-lookup"><span data-stu-id="041cc-871">`Val` stops converting at the first character that cannot be interpreted as a numeric digit, numeric modifier, numeric punctuation, or white space.</span></span>  
  
 [!code-vb[VbVbalrFunctions#54](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#54)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException">
          <span data-ttu-id="041cc-872">
            <paramref name="InputStr" /> es demasiado grande.</span>
          <span class="sxs-lookup">
            <span data-stu-id="041cc-872">
              <paramref name="InputStr" /> is too large.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="041cc-873">
            <paramref name="Expression" /> es un tipo de expresión <see langword="Object" /> que no se puede convertir en <see langword="String" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="041cc-873">
              <paramref name="Expression" /> is an <see langword="Object" /> type expression that is not convertible to <see langword="String" />.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.Conversion.Str(System.Object)" />
        <altmember cref="T:System.OverflowException" />
        <altmember cref="T:System.InvalidCastException" />
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">
          <span data-ttu-id="041cc-874">Type Conversion Functions</span>
          <span class="sxs-lookup">
            <span data-stu-id="041cc-874">Type Conversion Functions</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Val">
      <MemberSignature Language="C#" Value="public static double Val (object Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static float64 Val(object Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Val(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Val (Expression As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double Val(System::Object ^ Expression);" />
      <MemberSignature Language="F#" Value="static member Val : obj -&gt; double" Usage="Microsoft.VisualBasic.Conversion.Val Expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Expression">
          <span data-ttu-id="041cc-875">Obligatorio.</span>
          <span class="sxs-lookup">
            <span data-stu-id="041cc-875">Required.</span>
          </span>
          <span data-ttu-id="041cc-876">Cualquier expresión de tipo <see langword="String" />, variable de <see langword="Object" /> o valor de <see langword="Char" /> válido.</span>
          <span class="sxs-lookup">
            <span data-stu-id="041cc-876">Any valid <see langword="String" /> expression, <see langword="Object" /> variable, or <see langword="Char" /> value.</span>
          </span>
          <span data-ttu-id="041cc-877">Si <c>Expression</c> es de tipo <see langword="Object" />, su valor debe ser convertible a <see langword="String" /> o se produce un error <see cref="T:System.ArgumentException" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="041cc-877">If <c>Expression</c> is of type <see langword="Object" />, its value must be convertible to <see langword="String" /> or an <see cref="T:System.ArgumentException" /> error occurs.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="041cc-878">Devuelve los números que contiene una cadena como un valor numérico del tipo apropiado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="041cc-878">Returns the numbers contained in a string as a numeric value of appropriate type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="041cc-879">Devuelve los números que contiene una cadena como un valor numérico del tipo apropiado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="041cc-879">Returns the numbers contained in a string as a numeric value of appropriate type.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="041cc-880">El `Val` función deja de leer la cadena en el primer carácter que no se reconoce como parte de un número.</span><span class="sxs-lookup"><span data-stu-id="041cc-880">The `Val` function stops reading the string at the first character it cannot recognize as part of a number.</span></span> <span data-ttu-id="041cc-881">Símbolos y caracteres que a menudo se consideran parte de los valores numéricos, como signos de dólar y comas, no se reconocen.</span><span class="sxs-lookup"><span data-stu-id="041cc-881">Symbols and characters that are often considered parts of numeric values, such as dollar signs and commas, are not recognized.</span></span> <span data-ttu-id="041cc-882">Sin embargo, la función reconoce los prefijos de base `&O` (para octal) y `&H` (de hexadecimal).</span><span class="sxs-lookup"><span data-stu-id="041cc-882">However, the function recognizes the radix prefixes `&O` (for octal) and `&H` (for hexadecimal).</span></span> <span data-ttu-id="041cc-883">Caracteres de avance de línea, tabulaciones y espacios en blanco se quitan del argumento.</span><span class="sxs-lookup"><span data-stu-id="041cc-883">Blanks, tabs, and linefeed characters are removed from the argument.</span></span>  
  
 <span data-ttu-id="041cc-884">La siguiente llamada devuelve el valor 1234123.</span><span class="sxs-lookup"><span data-stu-id="041cc-884">The following call returns the value 1234123.</span></span>  
  
```  
  
Val(" 1234 123th Street N.E.")   
```  
  
 <span data-ttu-id="041cc-885">La siguiente llamada devuelve el valor decimal -1.</span><span class="sxs-lookup"><span data-stu-id="041cc-885">The following call returns the decimal value -1.</span></span>  
  
```  
  
Val("&HFFFF")   
```  
  
> [!NOTE]
>  <span data-ttu-id="041cc-886">El `Val` función reconoce solo el período (`.`) como separador decimal válido.</span><span class="sxs-lookup"><span data-stu-id="041cc-886">The `Val` function recognizes only the period (`.`) as a valid decimal separator.</span></span> <span data-ttu-id="041cc-887">Cuando se utilizan otros separadores decimales, como en aplicaciones internacionales, utilice `CDbl` o `CInt` en su lugar para convertir una cadena en un número.</span><span class="sxs-lookup"><span data-stu-id="041cc-887">When other decimal separators are used, as in international applications, use `CDbl` or `CInt` instead to convert a string to a number.</span></span> <span data-ttu-id="041cc-888">Para convertir la representación de cadena de un número en una referencia cultural determinada a un valor numérico, use el tipo numérico `Parse(String, IFormatProvider)` método.</span><span class="sxs-lookup"><span data-stu-id="041cc-888">To convert the string representation of a number in a particular culture to a numeric value, use the numeric type's `Parse(String, IFormatProvider)` method.</span></span> <span data-ttu-id="041cc-889">Por ejemplo, usar <xref:System.Double.Parse%2A?displayProperty=nameWithType> al convertir una cadena en un `Double`.</span><span class="sxs-lookup"><span data-stu-id="041cc-889">For example, use <xref:System.Double.Parse%2A?displayProperty=nameWithType> when converting a string to a `Double`.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="041cc-890">Un <xref:System.InvalidCastException> excepción podría producirse en respuesta a determinados formatos de número poco habituales.</span><span class="sxs-lookup"><span data-stu-id="041cc-890">An <xref:System.InvalidCastException> exception might be raised in response to certain uncommon number formats.</span></span> <span data-ttu-id="041cc-891">Por ejemplo, el código siguiente genera esta excepción.</span><span class="sxs-lookup"><span data-stu-id="041cc-891">For example, the following code raises this exception.</span></span>  
>   
>  `' These examples cause run-time errors.`  
>   
>  `'Console.WriteLine(Val("1.34%"))`  
>   
>  `'Console.WriteLine(Val("1.34&"))`  
>   
>  <span data-ttu-id="041cc-892">El conflicto entre el número con formato como un `Double` y `Integer` y `Long` caracteres de tipo se hubiese capturados por el compilador si el conflicto no se incluían en cadenas.</span><span class="sxs-lookup"><span data-stu-id="041cc-892">The conflict between the number formatted as a `Double` and the `Integer` and `Long` type characters would be caught by the compiler if the conflict were not contained in strings.</span></span>  
>   
>  `' These examples cause compiler errors.`  
>   
>  `'Dim m = 1.34%`  
>   
>  `'Dim n = 1.34&`  
  
   
  
## Examples  
 <span data-ttu-id="041cc-893">En el ejemplo siguiente se usa el `Val` función para devolver los números contenidos en cada cadena.</span><span class="sxs-lookup"><span data-stu-id="041cc-893">The following example uses the `Val` function to return the numbers contained in each string.</span></span> <span data-ttu-id="041cc-894">`Val` detiene la conversión en el primer carácter que no se puede interpretar como un dígito numérico, modificador numérico, puntuación numérica o espacio en blanco.</span><span class="sxs-lookup"><span data-stu-id="041cc-894">`Val` stops converting at the first character that cannot be interpreted as a numeric digit, numeric modifier, numeric punctuation, or white space.</span></span>  
  
 [!code-vb[VbVbalrFunctions#54](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#54)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException">
          <span data-ttu-id="041cc-895">
            <paramref name="InputStr" /> es demasiado grande.</span>
          <span class="sxs-lookup">
            <span data-stu-id="041cc-895">
              <paramref name="InputStr" /> is too large.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="041cc-896">
            <paramref name="Expression" /> es un tipo de expresión <see langword="Object" /> que no se puede convertir en <see langword="String" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="041cc-896">
              <paramref name="Expression" /> is an <see langword="Object" /> type expression that is not convertible to <see langword="String" />.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.Conversion.Str(System.Object)" />
        <altmember cref="T:System.OverflowException" />
        <altmember cref="T:System.InvalidCastException" />
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">
          <span data-ttu-id="041cc-897">Type Conversion Functions</span>
          <span class="sxs-lookup">
            <span data-stu-id="041cc-897">Type Conversion Functions</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Val">
      <MemberSignature Language="C#" Value="public static double Val (string InputStr);" />
      <MemberSignature Language="ILAsm" Value=".method public static float64 Val(string InputStr) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Val(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function Val (InputStr As String) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double Val(System::String ^ InputStr);" />
      <MemberSignature Language="F#" Value="static member Val : string -&gt; double" Usage="Microsoft.VisualBasic.Conversion.Val InputStr" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="InputStr" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="InputStr">
          <span data-ttu-id="041cc-898">Obligatorio.</span>
          <span class="sxs-lookup">
            <span data-stu-id="041cc-898">Required.</span>
          </span>
          <span data-ttu-id="041cc-899">Cualquier expresión de tipo <see langword="String" />, variable de <see langword="Object" /> o valor de <see langword="Char" /> válido.</span>
          <span class="sxs-lookup">
            <span data-stu-id="041cc-899">Any valid <see langword="String" /> expression, <see langword="Object" /> variable, or <see langword="Char" /> value.</span>
          </span>
          <span data-ttu-id="041cc-900">Si <c>Expression</c> es de tipo <see langword="Object" />, su valor debe ser convertible a <see langword="String" /> o se produce un error <see cref="T:System.ArgumentException" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="041cc-900">If <c>Expression</c> is of type <see langword="Object" />, its value must be convertible to <see langword="String" /> or an <see cref="T:System.ArgumentException" /> error occurs.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="041cc-901">Devuelve los números que contiene una cadena como un valor numérico del tipo apropiado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="041cc-901">Returns the numbers contained in a string as a numeric value of appropriate type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="041cc-902">Devuelve los números que contiene una cadena como un valor numérico del tipo apropiado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="041cc-902">Returns the numbers contained in a string as a numeric value of appropriate type.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="041cc-903">El `Val` función deja de leer la cadena en el primer carácter que no se reconoce como parte de un número.</span><span class="sxs-lookup"><span data-stu-id="041cc-903">The `Val` function stops reading the string at the first character it cannot recognize as part of a number.</span></span> <span data-ttu-id="041cc-904">Símbolos y caracteres que a menudo se consideran parte de los valores numéricos, como signos de dólar y comas, no se reconocen.</span><span class="sxs-lookup"><span data-stu-id="041cc-904">Symbols and characters that are often considered parts of numeric values, such as dollar signs and commas, are not recognized.</span></span> <span data-ttu-id="041cc-905">Sin embargo, la función reconoce los prefijos de base `&O` (para octal) y `&H` (de hexadecimal).</span><span class="sxs-lookup"><span data-stu-id="041cc-905">However, the function recognizes the radix prefixes `&O` (for octal) and `&H` (for hexadecimal).</span></span> <span data-ttu-id="041cc-906">Caracteres de avance de línea, tabulaciones y espacios en blanco se quitan del argumento.</span><span class="sxs-lookup"><span data-stu-id="041cc-906">Blanks, tabs, and linefeed characters are removed from the argument.</span></span>  
  
 <span data-ttu-id="041cc-907">La siguiente llamada devuelve el valor 1234123.</span><span class="sxs-lookup"><span data-stu-id="041cc-907">The following call returns the value 1234123.</span></span>  
  
```  
  
Val(" 1234 123th Street N.E.")   
```  
  
 <span data-ttu-id="041cc-908">La siguiente llamada devuelve el valor decimal -1.</span><span class="sxs-lookup"><span data-stu-id="041cc-908">The following call returns the decimal value -1.</span></span>  
  
```  
  
Val("&HFFFF")   
```  
  
> [!NOTE]
>  <span data-ttu-id="041cc-909">El `Val` función reconoce solo el período (`.`) como separador decimal válido.</span><span class="sxs-lookup"><span data-stu-id="041cc-909">The `Val` function recognizes only the period (`.`) as a valid decimal separator.</span></span> <span data-ttu-id="041cc-910">Cuando se utilizan otros separadores decimales, como en aplicaciones internacionales, utilice `CDbl` o `CInt` en su lugar para convertir una cadena en un número.</span><span class="sxs-lookup"><span data-stu-id="041cc-910">When other decimal separators are used, as in international applications, use `CDbl` or `CInt` instead to convert a string to a number.</span></span> <span data-ttu-id="041cc-911">Para convertir la representación de cadena de un número en una referencia cultural determinada a un valor numérico, use el tipo numérico `Parse(String, IFormatProvider)` método.</span><span class="sxs-lookup"><span data-stu-id="041cc-911">To convert the string representation of a number in a particular culture to a numeric value, use the numeric type's `Parse(String, IFormatProvider)` method.</span></span> <span data-ttu-id="041cc-912">Por ejemplo, usar <xref:System.Double.Parse%2A?displayProperty=nameWithType> al convertir una cadena en un `Double`.</span><span class="sxs-lookup"><span data-stu-id="041cc-912">For example, use <xref:System.Double.Parse%2A?displayProperty=nameWithType> when converting a string to a `Double`.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="041cc-913">Un <xref:System.InvalidCastException> excepción podría producirse en respuesta a determinados formatos de número poco habituales.</span><span class="sxs-lookup"><span data-stu-id="041cc-913">An <xref:System.InvalidCastException> exception might be raised in response to certain uncommon number formats.</span></span> <span data-ttu-id="041cc-914">Por ejemplo, el código siguiente genera esta excepción.</span><span class="sxs-lookup"><span data-stu-id="041cc-914">For example, the following code raises this exception.</span></span>  
>   
>  `' These examples cause run-time errors.`  
>   
>  `'Console.WriteLine(Val("1.34%"))`  
>   
>  `'Console.WriteLine(Val("1.34&"))`  
>   
>  <span data-ttu-id="041cc-915">El conflicto entre el número con formato como un `Double` y `Integer` y `Long` caracteres de tipo se hubiese capturados por el compilador si el conflicto no se incluían en cadenas.</span><span class="sxs-lookup"><span data-stu-id="041cc-915">The conflict between the number formatted as a `Double` and the `Integer` and `Long` type characters would be caught by the compiler if the conflict were not contained in strings.</span></span>  
>   
>  `' These examples cause compiler errors.`  
>   
>  `'Dim m = 1.34%`  
>   
>  `'Dim n = 1.34&`  
  
   
  
## Examples  
 <span data-ttu-id="041cc-916">En el ejemplo siguiente se usa el `Val` función para devolver los números contenidos en cada cadena.</span><span class="sxs-lookup"><span data-stu-id="041cc-916">The following example uses the `Val` function to return the numbers contained in each string.</span></span> <span data-ttu-id="041cc-917">`Val` detiene la conversión en el primer carácter que no se puede interpretar como un dígito numérico, modificador numérico, puntuación numérica o espacio en blanco.</span><span class="sxs-lookup"><span data-stu-id="041cc-917">`Val` stops converting at the first character that cannot be interpreted as a numeric digit, numeric modifier, numeric punctuation, or white space.</span></span>  
  
 [!code-vb[VbVbalrFunctions#54](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#54)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException">
          <span data-ttu-id="041cc-918">
            <paramref name="InputStr" /> es demasiado grande.</span>
          <span class="sxs-lookup">
            <span data-stu-id="041cc-918">
              <paramref name="InputStr" /> is too large.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="041cc-919">
            <paramref name="Expression" /> es un tipo de expresión <see langword="Object" /> que no se puede convertir en <see langword="String" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="041cc-919">
              <paramref name="Expression" /> is an <see langword="Object" /> type expression that is not convertible to <see langword="String" />.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.Conversion.Str(System.Object)" />
        <altmember cref="T:System.OverflowException" />
        <altmember cref="T:System.InvalidCastException" />
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">
          <span data-ttu-id="041cc-920">Type Conversion Functions</span>
          <span class="sxs-lookup">
            <span data-stu-id="041cc-920">Type Conversion Functions</span>
          </span>
        </related>
      </Docs>
    </Member>
  </Members>
</Type>