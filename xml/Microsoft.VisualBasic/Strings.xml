<Type Name="Strings" FullName="Microsoft.VisualBasic.Strings">
  <Metadata><Meta Name="ms.openlocfilehash" Value="658fbfb1c662acb281aac80c9ade7559461114ea" /><Meta Name="ms.sourcegitcommit" Value="bc24a3ba616ee1df8b858f9400cae4f058ea3a7e" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="es-ES" /><Meta Name="ms.lasthandoff" Value="06/19/2019" /><Meta Name="ms.locfileid" Value="67238740" /></Metadata><TypeSignature Language="C#" Value="public sealed class Strings" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit Strings extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.VisualBasic.Strings" />
  <TypeSignature Language="VB.NET" Value="Public Module Strings" />
  <TypeSignature Language="C++ CLI" Value="public ref class Strings sealed" />
  <TypeSignature Language="F#" Value="type Strings = class" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.VisualBasic</AssemblyName>
    <AssemblyVersion>7.0.5000.0</AssemblyVersion>
    <AssemblyVersion>8.0.0.0</AssemblyVersion>
    <AssemblyVersion>10.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
    <AssemblyVersion>10.0.4.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-2.2;dotnet-uwp-10.0;netcore-3.0">
      <AttributeName>Microsoft.VisualBasic.CompilerServices.StandardModule</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>El módulo <see langword="Strings" /> contiene procedimientos que se utilizan para llevar a cabo operaciones con cadenas.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este módulo admite las palabras clave del lenguaje Visual Basic y miembros de la biblioteca de tiempo de ejecución que manipulan cadenas.  
  
   
  
## Examples  
 El ejemplo siguiente muestra cómo dividir una cadena en los espacios.  
  
 [!code-vb[VbVbalrStrings#13](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#13)]  
  
 ]]></format>
    </remarks>
    <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md">Resumen de la manipulación de cadenas</related>
    <related type="Article" href="~/docs/visual-basic/language-reference/keywords/index.md">Palabras clave de Visual Basic</related>
    <related type="Article" href="~/docs/visual-basic/language-reference/runtime-library-members.md">Miembros de la biblioteca de tiempo de ejecución de Visual Basic</related>
  </Docs>
  <Members>
    <MemberGroup MemberName="Asc">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Devuelve un valor entero que representa el código de carácter correspondiente a un carácter.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Asc">
      <MemberSignature Language="C#" Value="public static int Asc (char String);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Asc(char String) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Asc(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Function Asc (String As Char) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Asc(char String);" />
      <MemberSignature Language="F#" Value="static member Asc : char -&gt; int" Usage="Microsoft.VisualBasic.Strings.Asc String" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="String" Type="System.Char" Index="0" FrameworkAlternate="netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="String">Obligatorio. Cualquier expresión válida de tipo <see langword="Char" /> o <see langword="String" />. Si <paramref name="String" /> es una expresión de tipo <see langword="String" />, sólo se utiliza el primer carácter de la cadena para la entrada. Si <paramref name="String" /> es <see langword="Nothing" /> o no contiene caracteres, se genera un error <see cref="T:System.ArgumentException" />.</param>
        <summary>Devuelve un valor entero que representa el código de carácter correspondiente a un carácter.</summary>
        <returns>Código de carácter correspondiente a un carácter.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `Asc` Devuelve el *punto de código*, o el código para el carácter de entrada. Esto puede ser 0 a 255 para los valores de caracteres de byte único (SBCS) del conjunto y entre -32768 y 32767 para los valores de caracteres de doble byte (DBCS) del conjunto.  
  
 `AscW` Devuelve el punto de código Unicode del carácter de entrada. Esto puede ser entre 0 y 65535. El valor devuelto es independiente de la configuración de página de código y de referencia cultural del subproceso actual.  
  
> [!NOTE]
>  El `AscB` función de las versiones anteriores de Visual Basic devuelve un código para un byte, en lugar de un carácter. Se utiliza principalmente para convertir cadenas en aplicaciones de caracteres de doble byte (DBCS). Todas las cadenas de Visual Basic 2005 están en Unicode, y `AscB` ya no se admite.  
  
   
  
## Examples  
 En el ejemplo siguiente se usa el `Asc` función devuelva `Integer` códigos correspondientes a la primera letra de cada cadena de caracteres.  
  
 [!code-vb[VbVbalrFunctions#19](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#19)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Chr(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.ChrW(System.Int32)" />
        <altmember cref="N:System.Globalization" />
        <altmember cref="T:System.Globalization.CultureInfo" />
        <altmember cref="P:System.Globalization.TextInfo.ANSICodePage" />
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/index.md">Funciones (Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="Asc">
      <MemberSignature Language="C#" Value="public static int Asc (string String);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Asc(string String) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Asc(System.String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Asc(System::String ^ String);" />
      <MemberSignature Language="F#" Value="static member Asc : string -&gt; int" Usage="Microsoft.VisualBasic.Strings.Asc String" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="String" Type="System.String" Index="0" FrameworkAlternate="netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="String">Obligatorio. Cualquier expresión válida de tipo <see langword="Char" /> o <see langword="String" />. Si <paramref name="String" /> es una expresión de tipo <see langword="String" />, sólo se utiliza el primer carácter de la cadena para la entrada. Si <paramref name="String" /> es <see langword="Nothing" /> o no contiene caracteres, se genera un error <see cref="T:System.ArgumentException" />.</param>
        <summary>Devuelve un valor entero que representa el código de carácter correspondiente a un carácter.</summary>
        <returns>Código de carácter correspondiente a un carácter.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `Asc` Devuelve el *punto de código*, o el código para el carácter de entrada. Esto puede ser 0 a 255 para los valores de caracteres de byte único (SBCS) del conjunto y entre -32768 y 32767 para los valores de caracteres de doble byte (DBCS) del conjunto.  
  
 `AscW` Devuelve el punto de código Unicode del carácter de entrada. Esto puede ser entre 0 y 65535. El valor devuelto es independiente de la configuración de página de código y de referencia cultural del subproceso actual.  
  
> [!NOTE]
>  El `AscB` función de las versiones anteriores de Visual Basic devuelve un código para un byte, en lugar de un carácter. Se utiliza principalmente para convertir cadenas en aplicaciones de caracteres de doble byte (DBCS). Todas las cadenas de Visual Basic 2005 están en Unicode, y `AscB` ya no se admite.  
  
   
  
## Examples  
 En el ejemplo siguiente se usa el `Asc` función devuelva `Integer` códigos correspondientes a la primera letra de cada cadena de caracteres.  
  
 [!code-vb[VbVbalrFunctions#19](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#19)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Chr(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.ChrW(System.Int32)" />
        <altmember cref="N:System.Globalization" />
        <altmember cref="T:System.Globalization.CultureInfo" />
        <altmember cref="P:System.Globalization.TextInfo.ANSICodePage" />
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/index.md">Funciones (Visual Basic)</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="AscW">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Devuelve un valor entero que representa el código de carácter correspondiente a un carácter.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="AscW">
      <MemberSignature Language="C#" Value="public static int AscW (char String);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 AscW(char String) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.AscW(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Function AscW (String As Char) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int AscW(char String);" />
      <MemberSignature Language="F#" Value="static member AscW : char -&gt; int" Usage="Microsoft.VisualBasic.Strings.AscW String" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="String" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="String">Obligatorio. Cualquier expresión válida de tipo <see langword="Char" /> o <see langword="String" />. Si <paramref name="String" /> es una expresión de tipo <see langword="String" />, sólo se utiliza el primer carácter de la cadena para la entrada. Si <paramref name="String" /> es <see langword="Nothing" /> o no contiene caracteres, se genera un error <see cref="T:System.ArgumentException" />.</param>
        <summary>Devuelve un valor entero que representa el código de carácter correspondiente a un carácter.</summary>
        <returns>Código de carácter correspondiente a un carácter.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `Asc` Devuelve el *punto de código*, o el código para el carácter de entrada. Esto puede ser 0 a 255 para los valores de caracteres de byte único (SBCS) del conjunto y entre -32768 y 32767 para los valores de caracteres de doble byte (DBCS) del conjunto.  
  
 `AscW` Devuelve el punto de código Unicode del carácter de entrada. Esto puede ser entre 0 y 65535. El valor devuelto es independiente de la configuración de página de código y de referencia cultural del subproceso actual.  
  
> [!NOTE]
>  El `AscB` función de las versiones anteriores de Visual Basic devuelve un código para un byte, en lugar de un carácter. Se utiliza principalmente para convertir cadenas en aplicaciones de caracteres de doble byte (DBCS). Todas las cadenas de Visual Basic 2005 están en Unicode, y `AscB` ya no se admite.  
  
   
  
## Examples  
 En el ejemplo siguiente se usa el `Asc` función devuelva `Integer` códigos correspondientes a la primera letra de cada cadena de caracteres.  
  
 [!code-vb[VbVbalrFunctions#19](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#19)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Chr(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.ChrW(System.Int32)" />
        <altmember cref="N:System.Globalization" />
        <altmember cref="T:System.Globalization.CultureInfo" />
        <altmember cref="P:System.Globalization.TextInfo.ANSICodePage" />
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/index.md">Funciones (Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="AscW">
      <MemberSignature Language="C#" Value="public static int AscW (string String);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 AscW(string String) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.AscW(System.String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int AscW(System::String ^ String);" />
      <MemberSignature Language="F#" Value="static member AscW : string -&gt; int" Usage="Microsoft.VisualBasic.Strings.AscW String" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="String" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="String">Obligatorio. Cualquier expresión válida de tipo <see langword="Char" /> o <see langword="String" />. Si <paramref name="String" /> es una expresión de tipo <see langword="String" />, sólo se utiliza el primer carácter de la cadena para la entrada. Si <paramref name="String" /> es <see langword="Nothing" /> o no contiene caracteres, se genera un error <see cref="T:System.ArgumentException" />.</param>
        <summary>Devuelve un valor entero que representa el código de carácter correspondiente a un carácter.</summary>
        <returns>Código de carácter correspondiente a un carácter.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `Asc` Devuelve el *punto de código*, o el código para el carácter de entrada. Esto puede ser 0 a 255 para los valores de caracteres de byte único (SBCS) del conjunto y entre -32768 y 32767 para los valores de caracteres de doble byte (DBCS) del conjunto.  
  
 `AscW` Devuelve el punto de código Unicode del carácter de entrada. Esto puede ser entre 0 y 65535. El valor devuelto es independiente de la configuración de página de código y de referencia cultural del subproceso actual.  
  
> [!NOTE]
>  El `AscB` función de las versiones anteriores de Visual Basic devuelve un código para un byte, en lugar de un carácter. Se utiliza principalmente para convertir cadenas en aplicaciones de caracteres de doble byte (DBCS). Todas las cadenas de Visual Basic 2005 están en Unicode, y `AscB` ya no se admite.  
  
   
  
## Examples  
 En el ejemplo siguiente se usa el `Asc` función devuelva `Integer` códigos correspondientes a la primera letra de cada cadena de caracteres.  
  
 [!code-vb[VbVbalrFunctions#19](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#19)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Chr(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.ChrW(System.Int32)" />
        <altmember cref="N:System.Globalization" />
        <altmember cref="T:System.Globalization.CultureInfo" />
        <altmember cref="P:System.Globalization.TextInfo.ANSICodePage" />
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/index.md">Funciones (Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="Chr">
      <MemberSignature Language="C#" Value="public static char Chr (int CharCode);" />
      <MemberSignature Language="ILAsm" Value=".method public static char Chr(int32 CharCode) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Chr(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Chr (CharCode As Integer) As Char" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static char Chr(int CharCode);" />
      <MemberSignature Language="F#" Value="static member Chr : int -&gt; char" Usage="Microsoft.VisualBasic.Strings.Chr CharCode" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="CharCode" Type="System.Int32" Index="0" FrameworkAlternate="netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="CharCode">Obligatorio. Expresión de tipo <see langword="Integer" /> que representa el <c>punto de código</c> o el código del carácter.</param>
        <summary>Devuelve el carácter asociado al código de carácter especificado.</summary>
        <returns>Carácter asociado al código de carácter especificado.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El intervalo asimétrico aceptado para `CharCode` compensa las diferencias de almacenamiento entre el `Short` y `Integer`. Por ejemplo, -29183 es un `Short` pero + 36353 es un `Integer`. Esto también facilita la compatibilidad con Visual Basic 6.0.  
  
 `Chr` usa el <xref:System.Text.Encoding> clase en el <xref:System.Text?displayProperty=nameWithType> establecido de espacio de nombres para determinar si el subproceso actual está utilizando un juego de caracteres de byte único (SBCS) o un carácter de doble byte (DBCS). Luego toma `CharCode` como un código de punto en el conjunto adecuado. El intervalo puede ser de 0 a 255 caracteres SBCS y entre -32768 y 65535 para los caracteres DBCS.  
  
 El valor devuelto depende de la página de códigos para el subproceso actual, que se encuentra en la <xref:System.Globalization.TextInfo.ANSICodePage%2A> propiedad de la <xref:System.Globalization.TextInfo> clase en el <xref:System.Globalization> espacio de nombres. Puede obtener <xref:System.Globalization.TextInfo.ANSICodePage%2A> especificando `System.Globalization.CultureInfo.CurrentCulture.TextInfo.ANSICodePage`.  
  
 `ChrW` toma `CharCode` punto de código como Unicode. El intervalo es independiente de la configuración de página de código y de referencia cultural del subproceso actual. Los valores de -32768 al-1 tratan igual como valores comprendidos entre + 32768 y + 65535.  
  
 Números del 0 al 31 son los mismos que los códigos ASCII no imprimibles estándar. Por ejemplo, `Chr(10)` devuelve un salto de línea.  
  
> [!NOTE]
>  El `ChrB` función en las versiones anteriores de Visual Basic devuelve un solo byte. Se utiliza principalmente para convertir cadenas en aplicaciones de caracteres de doble byte (DBCS). Todas las cadenas en Visual Basic y .NET Framework están en formato Unicode, y `ChrB` ya no se admite.  
  
   
  
## Examples  
 En el ejemplo siguiente se usa el `Chr` función para devolver el carácter asociado con el código de carácter especificado.  
  
 [!code-vb[VbVbalrStrings#7](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#7)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="CharCode" /> &lt; 0 o &gt; 255 para <see langword="Chr" />.</exception>
        <altmember cref="M:Microsoft.VisualBasic.Strings.ChrW(System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Asc" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.AscW" />
        <altmember cref="M:Microsoft.VisualBasic.Conversion.Str(System.Object)" />
        <altmember cref="T:System.Globalization.CultureInfo" />
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md">Resumen de la manipulación de cadenas</related>
      </Docs>
    </Member>
    <Member MemberName="ChrW">
      <MemberSignature Language="C#" Value="public static char ChrW (int CharCode);" />
      <MemberSignature Language="ILAsm" Value=".method public static char ChrW(int32 CharCode) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.ChrW(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function ChrW (CharCode As Integer) As Char" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static char ChrW(int CharCode);" />
      <MemberSignature Language="F#" Value="static member ChrW : int -&gt; char" Usage="Microsoft.VisualBasic.Strings.ChrW CharCode" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="CharCode" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="CharCode">Obligatorio. Expresión de tipo <see langword="Integer" /> que representa el <c>punto de código</c> o el código del carácter.</param>
        <summary>Devuelve el carácter asociado al código de carácter especificado.</summary>
        <returns>Carácter asociado al código de carácter especificado.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El intervalo asimétrico aceptado para `CharCode` compensa las diferencias de almacenamiento entre el `Short` y `Integer`. Por ejemplo, -29183 es un `Short` pero + 36353 es un `Integer`. Esto también facilita la compatibilidad con Visual Basic 6.0.  
  
 `Chr` usa el <xref:System.Text.Encoding> clase en el <xref:System.Text?displayProperty=nameWithType> establecido de espacio de nombres para determinar si el subproceso actual está utilizando un juego de caracteres de byte único (SBCS) o un carácter de doble byte (DBCS). Luego toma `CharCode` como un código de punto en el conjunto adecuado. El intervalo puede ser de 0 a 255 caracteres SBCS y entre -32768 y 65535 para los caracteres DBCS.  
  
 El valor devuelto depende de la página de códigos para el subproceso actual, que se encuentra en la <xref:System.Globalization.TextInfo.ANSICodePage%2A> propiedad de la <xref:System.Globalization.TextInfo> clase en el <xref:System.Globalization> espacio de nombres. Puede obtener <xref:System.Globalization.TextInfo.ANSICodePage%2A> especificando `System.Globalization.CultureInfo.CurrentCulture.TextInfo.ANSICodePage`.  
  
 `ChrW` toma `CharCode` punto de código como Unicode. El intervalo es independiente de la configuración de página de código y de referencia cultural del subproceso actual. Los valores de -32768 al-1 tratan igual como valores comprendidos entre + 32768 y + 65535.  
  
 Números del 0 al 31 son los mismos que los códigos ASCII no imprimibles estándar. Por ejemplo, `Chr(10)` devuelve un salto de línea.  
  
> [!NOTE]
>  El `ChrB` función en las versiones anteriores de Visual Basic devuelve un solo byte. Se utiliza principalmente para convertir cadenas en aplicaciones de caracteres de doble byte (DBCS). Todas las cadenas en Visual Basic y .NET Framework están en formato Unicode, y `ChrB` ya no se admite.  
  
   
  
## Examples  
 En el ejemplo siguiente se usa el `Chr` función para devolver el carácter asociado con el código de carácter especificado.  
  
 [!code-vb[VbVbalrStrings#7](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#7)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="CharCode" /> &lt; -32768 o &gt; 65535 para <see langword="ChrW" />.</exception>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Chr(System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Asc" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.AscW" />
        <altmember cref="M:Microsoft.VisualBasic.Conversion.Str(System.Object)" />
        <altmember cref="T:System.Globalization.CultureInfo" />
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md">Resumen de la manipulación de cadenas</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Filter">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Devuelve una matriz basada en cero que contiene un subconjunto de una matriz <see langword="String" /> basada en criterios de filtro especificados.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Filter">
      <MemberSignature Language="C#" Value="public static string[] Filter (object[] Source, string Match, bool Include = true, Microsoft.VisualBasic.CompareMethod Compare = Microsoft.VisualBasic.CompareMethod.Binary);" />
      <MemberSignature Language="ILAsm" Value=".method public static string[] Filter(object[] Source, string Match, bool Include, valuetype Microsoft.VisualBasic.CompareMethod Compare) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Filter(System.Object[],System.String,System.Boolean,Microsoft.VisualBasic.CompareMethod)" />
      <MemberSignature Language="VB.NET" Value="Public Function Filter (Source As Object(), Match As String, Optional Include As Boolean = true, Optional Compare As CompareMethod = Microsoft.VisualBasic.CompareMethod.Binary) As String()" />
      <MemberSignature Language="F#" Value="static member Filter : obj[] * string * bool * Microsoft.VisualBasic.CompareMethod -&gt; string[]" Usage="Microsoft.VisualBasic.Strings.Filter (Source, Match, Include, Compare)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Source" Type="System.Object[]" Index="0" FrameworkAlternate="netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="Match" Type="System.String" Index="1" FrameworkAlternate="netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="Include" Type="System.Boolean" Index="2" FrameworkAlternate="netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="Compare" Type="Microsoft.VisualBasic.CompareMethod" Index="3" FrameworkAlternate="netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <Attributes>
            <Attribute>
              <AttributeName>Microsoft.VisualBasic.CompilerServices.OptionCompare</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="Source">Obligatorio. Matriz unidimensional de cadenas en la que se va a buscar.</param>
        <param name="Match">Obligatorio. Cadena que se va a buscar.</param>
        <param name="Include">Opcional. Valor de tipo <see langword="Boolean" /> que indica si se van a devolver subcadenas que incluyen o excluyen <paramref name="Match" />. Si el valor de <paramref name="Include" /> es <see langword="True" />, la función <see langword="Filter" /> devuelve el subconjunto de la matriz que contiene <paramref name="Match" /> como subcadena. Si el valor de <paramref name="Include" /> es <see langword="False" />, la función <see langword="Filter" /> devuelve el subconjunto de la matriz que no contiene <paramref name="Match" /> como subcadena.</param>
        <param name="Compare">Opcional. Valor numérico que indica el tipo de comparación de cadenas que se va a utilizar. Consulte los valores en "Configuración".</param>
        <summary>Devuelve una matriz basada en cero que contiene un subconjunto de una matriz <see langword="String" /> basada en criterios de filtro especificados.</summary>
        <returns>Matriz basada en cero que contiene un subconjunto de una matriz <see langword="String" /> basada en criterios de filtro especificados.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si no hay coincidencias de `Match` se encuentran dentro de `Source`, el `Filter` función devuelve una matriz vacía. Se produce un error si `Source` está establecido en `Nothing` o no es una matriz unidimensional.  
  
 La matriz devuelta por la `Filter` función contiene únicamente los elementos suficientes para contener el número de elementos coincidentes.  
  
 El `Compare` argumento puede tener los siguientes valores.  
  
|Constante|Descripción|  
|-|-|  
|Constante|Descripción|  
|`CompareMethod.Binary`|Realiza una comparación binaria|  
|`CompareMethod.Text`|Realiza una comparación textual|  
  
   
  
## Examples  
 En este ejemplo se muestra el uso de la `Filter` función.  
  
 [!code-vb[VbVbalrStrings#24](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#24)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="Source" /> es <see langword="Nothing" /> o no es una matriz unidimensional.</exception>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Replace(System.String,System.String,System.String,System.Int32,System.Int32,Microsoft.VisualBasic.CompareMethod)" />
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md">Resumen de la manipulación de cadenas</related>
      </Docs>
    </Member>
    <Member MemberName="Filter">
      <MemberSignature Language="C#" Value="public static string[] Filter (string[] Source, string Match, bool Include = true, Microsoft.VisualBasic.CompareMethod Compare = Microsoft.VisualBasic.CompareMethod.Binary);" />
      <MemberSignature Language="ILAsm" Value=".method public static string[] Filter(string[] Source, string Match, bool Include, valuetype Microsoft.VisualBasic.CompareMethod Compare) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Filter(System.String[],System.String,System.Boolean,Microsoft.VisualBasic.CompareMethod)" />
      <MemberSignature Language="VB.NET" Value="Public Function Filter (Source As String(), Match As String, Optional Include As Boolean = true, Optional Compare As CompareMethod = Microsoft.VisualBasic.CompareMethod.Binary) As String()" />
      <MemberSignature Language="F#" Value="static member Filter : string[] * string * bool * Microsoft.VisualBasic.CompareMethod -&gt; string[]" Usage="Microsoft.VisualBasic.Strings.Filter (Source, Match, Include, Compare)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Source" Type="System.String[]" Index="0" FrameworkAlternate="netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="Match" Type="System.String" Index="1" FrameworkAlternate="netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="Include" Type="System.Boolean" Index="2" FrameworkAlternate="netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="Compare" Type="Microsoft.VisualBasic.CompareMethod" Index="3" FrameworkAlternate="netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <Attributes>
            <Attribute>
              <AttributeName>Microsoft.VisualBasic.CompilerServices.OptionCompare</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="Source">Obligatorio. Matriz unidimensional de cadenas en la que se va a buscar.</param>
        <param name="Match">Obligatorio. Cadena que se va a buscar.</param>
        <param name="Include">Opcional. Valor de tipo <see langword="Boolean" /> que indica si se van a devolver subcadenas que incluyen o excluyen <paramref name="Match" />. Si el valor de <paramref name="Include" /> es <see langword="True" />, la función <see langword="Filter" /> devuelve el subconjunto de la matriz que contiene <paramref name="Match" /> como subcadena. Si el valor de <paramref name="Include" /> es <see langword="False" />, la función <see langword="Filter" /> devuelve el subconjunto de la matriz que no contiene <paramref name="Match" /> como subcadena.</param>
        <param name="Compare">Opcional. Valor numérico que indica el tipo de comparación de cadenas que se va a utilizar. Consulte los valores en "Configuración".</param>
        <summary>Devuelve una matriz basada en cero que contiene un subconjunto de una matriz <see langword="String" /> basada en criterios de filtro especificados.</summary>
        <returns>Matriz basada en cero que contiene un subconjunto de una matriz <see langword="String" /> basada en criterios de filtro especificados.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si no hay coincidencias de `Match` se encuentran dentro de `Source`, el `Filter` función devuelve una matriz vacía. Se produce un error si `Source` está establecido en `Nothing` o no es una matriz unidimensional.  
  
 La matriz devuelta por la `Filter` función contiene únicamente los elementos suficientes para contener el número de elementos coincidentes.  
  
 El `Compare` argumento puede tener los siguientes valores.  
  
|Constante|Descripción|  
|-|-|  
|`CompareMethod.Binary`|Realiza una comparación binaria|  
|`CompareMethod.Text`|Realiza una comparación textual|  
  
   
  
## Examples  
 En este ejemplo se muestra el uso de la `Filter` función.  
  
 [!code-vb[VbVbalrStrings#24](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#24)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="Source" /> es <see langword="Nothing" /> o no es una matriz unidimensional.</exception>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Replace(System.String,System.String,System.String,System.Int32,System.Int32,Microsoft.VisualBasic.CompareMethod)" />
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md">Resumen de la manipulación de cadenas</related>
      </Docs>
    </Member>
    <Member MemberName="Format">
      <MemberSignature Language="C#" Value="public static string Format (object Expression, string Style = &quot;&quot;);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Format(object Expression, string Style) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Format(System.Object,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function Format (Expression As Object, Optional Style As String = &quot;&quot;) As String" />
      <MemberSignature Language="F#" Value="static member Format : obj * string -&gt; string" Usage="Microsoft.VisualBasic.Strings.Format (Expression, Style)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Object" Index="0" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0" />
        <Parameter Name="Style" Type="System.String" Index="1" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0" />
      </Parameters>
      <Docs>
        <param name="Expression">Obligatorio. Cualquier expresión válida.</param>
        <param name="Style">Opcional. Expresión válida de formato de tipo <see langword="String" /> con nombre o definida por el usuario.</param>
        <summary>Devuelve una cadena con el formato que especifiquen las instrucciones contenidas en una expresión <see langword="String" /> de formato.</summary>
        <returns>Cadena con el formato que especifiquen las instrucciones contenidas en una expresión <see langword="String" /> de formato.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.String.Format%2A?displayProperty=nameWithType> método también proporciona una funcionalidad similar.  
  
 Si se da formato a una cadena numérica no localizada, debe usar un formato numérico definido por el usuario para garantizar que tiene el aspecto deseado.  
  
 Si se intenta dar formato a un número sin especificar `Style`, `Format` función proporciona una funcionalidad similar a la `Str` funcione, aunque es compatible con todo el mundo. Sin embargo, los números positivos con formato de cadena utilizando el `Format` función no incluya un espacio inicial reservado para el signo del valor; los que se convierten usando el `Str` función conservar el espacio inicial.  
  
## <a name="different-formats-for-different-numeric-values"></a>Formatos distintos para diferentes valores numéricos  
 Una expresión de formato definido por el usuario para números puede tener de uno a tres secciones separadas por punto y coma. Si el `Style` argumento de la `Format` función contiene uno de los formatos numéricos predefinidos, se permite solo una sección.  
  
|Si usa|Éste es el resultado|  
|-|-|  
|Solo una sección|La expresión de formato se aplica a todos los valores.|  
|Dos secciones|La primera sección se aplica a valores positivos y ceros; el segundo se aplica a valores negativos.|  
|Tres secciones.|La primera sección se aplica a valores positivos, la segunda se aplica a valores negativos y la tercera se aplica a los ceros.|  
  
 El siguiente ejemplo tiene dos secciones: la primera define el formato para valores positivos y ceros; la segunda sección define el formato para los valores negativos. Puesto que la `Style` argumento de la `Format` función toma una cadena, se encierra entre comillas.  
  
 [!code-vb[VbVbalrStrings#18](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#18)]  
  
 Si incluye un punto y coma sin nada entre ellos, la sección que falta se imprime con el formato de los valores positivos. Por ejemplo, el siguiente formato muestra positivo y negativo, con el formato de la primera sección y muestra `Zero` si el valor es cero.  
  
 [!code-vb[VbVbalrStrings#19](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#19)]  
  
## <a name="predefined-numeric-formats"></a>Formatos numéricos predefinidos  
 En la tabla siguiente identifica los nombres de formato numérico predefinidos. Se pueden utilizar por su nombre como el `Style` argumento para el `Format` función:  
  
|Nombre de formato|Descripción|  
|-|-|  
|`General Number`, `G`o `g`|Muestra el número sin separadores de miles.<br /><br /> Por ejemplo, `Format(&H3FA, "g")` devuelve `1018`.|  
|`Currency`, `C`o `c`|Muestra el número con separador de miles, si es necesario; muestra dos dígitos a la derecha del separador decimal. Salida se basa en la configuración regional del sistema.<br /><br /> Por ejemplo, `Format(1234567, "c")` devuelve `$1,234,567.00`.|  
|`Fixed`, `F`o `f`|Muestra al menos un dígito a la izquierda y dos dígitos a la derecha del separador decimal.<br /><br /> Por ejemplo, `Format(1234567, "f")` devuelve `1234567.00`.|  
|`Standard`, `N`o `n`|Muestra el número con separador de miles, al menos un dígito a la izquierda y dos dígitos a la derecha del separador decimal.<br /><br /> Por ejemplo, `Format(1234567, "n")` devuelve `1,234,567.00`.|  
|`Percent`|Muestra el número multiplicado por 100 con un signo de porcentaje (%) anexa inmediatamente a la derecha; siempre muestra dos dígitos a la derecha del separador decimal.<br /><br /> Por ejemplo, `Format(0.4744, "Percent")` devuelve `47.44%`.|  
|`P`, o `p`|Muestra el número con separador de miles multiplicado por 100 con un signo de porcentaje (%) anexa a la derecha y separado por un espacio único. siempre muestra dos dígitos a la derecha del separador decimal.<br /><br /> Por ejemplo, `Format(0.80345, "p")` devuelve `80.35 %`.|  
|`Scientific`|Utiliza la notación científica estándar, con dos dígitos significativos.<br /><br /> Por ejemplo, `Format(1234567, "Scientific")` devuelve `1.23E+06`.|  
|`E`, o `e`|Utiliza la notación científica estándar, con seis dígitos significativos.<br /><br /> Por ejemplo, `Format(1234567, "e")` devuelve `1.234567e+006`.|  
|`D`, o `d`|Muestra el número como una cadena que contiene el valor del número en formato Decimal (base 10). Esta opción se admite para los tipos enteros (`Byte`, `Short`, `Integer`, `Long`) solo.<br /><br /> Por ejemplo, `Format(&H7F, "d")` devuelve `127`.|  
|`X`, o `x`|Muestra el número como una cadena que contiene el valor del número en formato Hexadecimal (base 16). Esta opción se admite para los tipos enteros (`Byte`, `Short`, `Integer`, `Long`) solo.<br /><br /> Por ejemplo, `Format(127, "x")` devuelve `7f`.|  
|`Yes/No`|Muestra `No` si el número es 0; en caso contrario, muestra `Yes`.<br /><br /> Por ejemplo, `Format(0, "Yes/No")` devuelve `No`.|  
|`True/False`|Muestra `False` si el número es 0; en caso contrario, muestra `True`.<br /><br /> Por ejemplo, `Format(1, "True/False")` devuelve `True`.|  
|`On/Off`|Muestra `Off` si el número es 0; en caso contrario, muestra `On`.<br /><br /> Por ejemplo, `Format(1, "On/Off")` devuelve `On`.|  
  
### <a name="smart-device-developer-notes"></a>Notas de desarrollador de dispositivos inteligentes  
 El `Yes/No`, `True/False`, y `On/Off` formatos no son compatibles.  
  
## <a name="user-defined-numeric-formats"></a>Formatos numéricos definidos por el usuario  
 En la tabla siguiente identifica los caracteres que puede usar para crear formatos de número definido por el usuario. Se pueden utilizar para compilar el `Style` argumento para el `Format` función:  
  
|Carácter|Descripción|  
|-|-|  
|Ninguna|Muestra el número sin formato.|  
|(`0`)|Marcador de posición de dígito. Muestra un dígito o un cero. Si la expresión tiene un dígito en la posición donde aparece el cero en la cadena de formato, que se muestre; en caso contrario, se muestra un cero en esa posición.<br /><br /> Si el número tiene menos dígitos que son ceros (en cualquier lado del separador decimal) en la expresión de formato muestra ceros iniciales o finales. Si el número tiene más dígitos a la derecha del separador decimal que ceros hay a la derecha del separador decimal en la expresión de formato redondea el número con tantos decimales como ceros haya. Si el número tiene más dígitos a la izquierda del separador decimal que ceros hay a la izquierda del separador decimal en la expresión de formato, muestran los dígitos adicionales sin modificación.|  
|(`#`)|Marcador de posición de dígito. Muestra un dígito o nada. Si la expresión tiene un dígito en la posición donde la `#` carácter aparece en la cadena de formato, lo muestra; de lo contrario, se muestra nada en esa posición.<br /><br /> Este símbolo funciona como el `0` marcador de posición de dígitos, salvo que los ceros iniciales y finales no se muestran si el número tiene menos dígitos que hay `#` caracteres a ambos lados del separador decimal en la expresión de formato.|  
|(`.`)|Marcador de posición decimal. El marcador de posición decimal determina cuántos dígitos se muestran a la izquierda y derecha del separador decimal. Si la expresión de formato contiene únicamente `#` caracteres a la izquierda de este símbolo; los números menores que 1 comienzan con un separador decimal. Para mostrar un cero inicial con números fraccionarios, utilice un cero como el primer marcador de posición de dígitos a la izquierda del separador decimal. En algunas configuraciones regionales se utiliza una coma como separador decimal. El carácter real utilizado como marcador de posición decimal en la salida con formato depende el formato de número que reconozca el sistema. Por lo tanto, debe usar el período como el marcador de posición decimal en los formatos incluso si se encuentra en una configuración regional que usa una coma como separador decimal. La cadena con formato aparecerá en el formato correcto para la configuración regional.|  
|(`%`)|Marcador de posición de porcentaje. La expresión se multiplica por 100. El carácter de porcentaje (`%`) se inserta en la posición donde aparece en la cadena de formato.|  
|(`,`)|Separador de miles. El separador de miles separa los millares de las centenas en un número que tiene cuatro o más posiciones a la izquierda del separador decimal. Uso estándar del separador de miles se especifica si el formato contiene un separador de miles rodeado de marcadores de posición de dígitos (`0` o `#`).<br /><br /> Un separador de miles inmediatamente a la izquierda del separador decimal (o si no se especifica un valor decimal) o como el extremo derecho de caracteres de la cadena significa "escalar el número dividiéndolo por 1000, redondeándolo como sea preciso". Números de menores que 1000 pero mayores o iguales que 500 se muestran como `1`y los números menores que 500 se muestran como `0`. Dos separadores de miles adyacentes en esta posición escalar por un factor de 1 millón y un factor adicional de 1000 por cada separador adicional.<br /><br /> Varios separadores en la posición situada en la cadena o en cualquier posición que no sea inmediatamente a la izquierda del separador decimal se tratan simplemente como si especificaran el uso de un separador de miles. En algunas configuraciones regionales se utiliza un punto como separador de miles. El carácter real utilizado como separador de miles en la salida con formato depende del formato de número que reconozca el sistema. Por lo tanto, debe usar la coma como separador de miles en sus formatos incluso si se encuentra en una configuración regional que utiliza un punto como separador de miles. La cadena con formato aparecerá en el formato correcto para la configuración regional.<br /><br /> Por ejemplo, considere las tres cadenas de formato siguientes:<br /><br /> -   `"#,0."`, que utiliza el separador de miles para dar formato al número 100 millones como la cadena "100,000,000".<br />-   `"#0,."`, que utiliza una escala por un factor de mil para dar formato al número 100 millones como la cadena "100000".<br />-   `"#,0,."`, que utiliza el separador de miles y escala por un factor de mil para dar formato al número 100 millones como la cadena "100,000".|  
|(`:`)|Separador de hora. En algunas configuraciones regionales, otros caracteres pueden usarse para representar el separador de hora. El separador de hora separa horas, minutos y segundos cuando se da formato a valores de tiempo. El carácter real utilizado como separador de hora en formato de salida viene determinada por la configuración del sistema.|  
|(`/`)|Separador de fecha. En algunas configuraciones regionales, otros caracteres pueden usarse para representar el separador de fecha. El separador de fecha separa el día, mes y año cuando se da formato a valores de fecha. El carácter real utilizado como separador de fecha en formato de salida viene determinada por la configuración del sistema.|  
|(`E-``E+``e-``e+`)|Formato científico. Si la expresión de formato contiene al menos un marcador de posición de dígitos (`0` o `#`) a la izquierda del `E-`, `E+`, `e-`, o `e+`, se muestra el número en formato científico y `E` o `e` se inserta entre el número y su exponente. El número de marcadores de posición de dígitos a la izquierda determina el número de dígitos del exponente. Use `E-` o `e-` para colocar un signo menos junto a los exponentes negativos. Use `E+` o `e+` para colocar un signo menos junto a los exponentes negativos y un signo más junto a los exponentes positivos. También debe incluir marcadores de posición de dígitos a la derecha de este símbolo para obtener el formato correcto.|  
|`-` `+` `$` ( )|Caracteres literales. Estos caracteres se muestran tal y como se escribió en la cadena de formato. Para mostrar un carácter distinto de los enumerados, precedidos por una barra diagonal inversa (`\`) o escríbala entre comillas dobles ("").|  
|(`\`)|Muestra el siguiente carácter en la cadena de formato. Para mostrar un carácter que tiene un significado especial como carácter literal, precedidos por una barra diagonal inversa (`\`). No se muestra la barra diagonal. Con una barra diagonal inversa es equivalente a delimitar el siguiente carácter entre comillas dobles. Para mostrar una barra diagonal inversa, utilice dos barras diagonales inversas (`\\`).<br /><br /> Ejemplos de caracteres que no se puede mostrar como caracteres literales son los caracteres de formato de fecha y hora de formato (`a`, `c`, `d`, `h`, `m`, `n`, `p`, `q`, `s`, `t`, `w`, `y`, `/`, y `:`), los caracteres de formato numérico (`#`, `0`, `%`, `E`, `e`, coma y punto) y los caracteres de formato de cadena (`@`, `&`, `<`, `>`, y `!`).|  
|(`"``ABC``"`)|Muestra la cadena dentro de las comillas dobles (""). Para incluir una cadena en el argumento de estilo de código, debe usar `Chr(34)` para delimitar el texto (`34` es el código de carácter para las comillas (")).|  
  
### <a name="legacy-code-example"></a>Ejemplo de código heredado  
 En la tabla siguiente contiene algunos ejemplos de expresiones de formato para números. (Todos estos ejemplos se asume que la configuración regional de su sistema es inglés de Estados Unidos) La primera columna contiene las cadenas de formato para el `Style` argumento de la `Format` función; las demás columnas contienen la salida resultante si los datos con formato tienen el valor dado en los encabezados de columna.  
  
|Formato (`Style`)|el formato "5"|el formato "-5"|el formato "0,5"|  
|-|-|-|-|  
|`Zero-length string ("")`|`5`|`-5`|`0.5`|  
|`0`|`5`|`-5`|`1`|  
|`0.00`|`5.00`|`-5.00`|`0.50`|  
|`#,##0`|`5`|`-5`|`1`|  
|`$#,##0;($#,##0)`|`$5`|`($5)`|`$1`|  
|`$#,##0.00;($#,##0.00)`|`$5.00`|`($5.00)`|`$0.50`|  
|`0%`|`500%`|`-500%`|`50%`|  
|`0.00%`|`500.00%`|`-500.00%`|`50.00%`|  
|`0.00E+00`|`5.00E+00`|`-5.00E+00`|`5.00E-01`|  
|`0.00E-00`|`5.00E00`|`-5.00E00`|`5.00E-01`|  
  
## <a name="predefined-datetime-formats"></a>Formatos de fecha y hora predefinidos  
 En la tabla siguiente identifica la fecha predefinidos y los nombres de formato de hora. Se pueden utilizar por su nombre como argumento de estilo para el `Format` función:  
  
|Nombre de formato|Descripción|  
|-|-|  
|`General Date`, o `G`|Muestra una fecha u hora. Por ejemplo: `3/12/2008 11:07:31 AM`. Presentación de la fecha viene determinada por el valor de referencia cultural actual de la aplicación.|  
|`Long Date`, `Medium Date`o `D`|Muestra una fecha según el formato de fecha larga de la referencia cultural actual. Por ejemplo: `Wednesday, March 12, 2008`.|  
|`Short Date`, o `d`|Muestra una fecha con formato de fecha corta de la referencia cultural actual. Por ejemplo: `3/12/2008`.<br /><br /> El `d` carácter muestra el día en un formato de fecha definido por el usuario.|  
|`Long Time`, `Medium Time`o `T`|Muestra una hora con formato de hora larga de la referencia cultural actual; Normalmente incluye horas, minutos y segundos. Por ejemplo: `11:07:31 AM`.|  
|`Short Time` o `t`|Muestra una hora con formato de hora corta de la referencia cultural actual. Por ejemplo: `11:07 AM`.<br /><br /> El `t` caracteres muestra `AM` o `PM` valores para las configuraciones regionales que utilizan un reloj de 12 horas en un formato de hora definido por el usuario.|  
|`f`|Muestra la fecha larga y hora corta según el formato de la referencia cultural actual. Por ejemplo: `Wednesday, March 12, 2008 11:07 AM`.|  
|`F`|Muestra la fecha larga y hora larga según el formato de la referencia cultural actual. Por ejemplo: `Wednesday, March 12, 2008 11:07:31 AM`.|  
|`g`|Muestra la fecha corta y hora corta según el formato de la referencia cultural actual. Por ejemplo: `3/12/2008 11:07 AM`.|  
|`M`, `m`|Muestra el mes y día de una fecha. Por ejemplo: `March 12`.<br /><br /> El `M` carácter muestra el mes en un formato de fecha definido por el usuario. El `m` carácter muestra los minutos en un formato de hora definido por el usuario.|  
|`R`, `r`|Da formato a la fecha según la <xref:System.Globalization.DateTimeFormatInfo.RFC1123Pattern%2A> propiedad. Por ejemplo: `Wed, 12 Mar 2008 11:07:31 GMT`. La fecha con formato no ajusta el valor de la fecha y hora. Debe ajustar el valor de fecha y hora a GMT antes de llamar a la `Format` función.|  
|`s`|Da formato a la fecha y hora como un índice ordenable. Por ejemplo: `2008-03-12T11:07:31`.<br /><br /> El `s` carácter muestra los segundos en un formato de hora definido por el usuario.|  
|`u`|Da formato a la fecha y hora como índice GMT que se puede ordenar. Por ejemplo: `2008-03-12 11:07:31Z`.|  
|`U`|Da formato a la fecha y hora con la fecha larga y hora larga GMT. Por ejemplo: `Wednesday, March 12, 2008 6:07:31 PM`.|  
|`Y`, `y`|Da formato a la fecha como el año y mes. Por ejemplo: `March, 2008`.<br /><br /> El `Y` y `y` caracteres mostrarán el año en un formato de fecha definido por el usuario.|  
  
 Para obtener más información acerca de la información de referencia cultural actual de la aplicación, consulte [cómo afecta a cadenas de referencia cultural en Visual Basic](~/docs/visual-basic/programming-guide/language-features/strings/how-culture-affects-strings.md).  
  
## <a name="user-defined-datetime-formats"></a>Formatos de fecha y hora definidos por el usuario  
 La siguiente tabla muestra caracteres que puede usar para crear formatos de fecha y hora definidos por el usuario. A diferencia de las versiones anteriores de Visual Basic, estos caracteres de formato distinguen mayúsculas de minúsculas.  
  
|Carácter|Descripción|  
|-|-|  
|(`:`)|Separador de hora. En algunas configuraciones regionales, otros caracteres pueden usarse para representar el separador de hora. El separador de hora separa horas, minutos y segundos cuando se da formato a valores de tiempo. El carácter real que se usa como separador de hora en formato de salida viene determinada por el valor de referencia cultural actual de la aplicación.|  
|(`/`)|Separador de fecha. En algunas configuraciones regionales, otros caracteres pueden usarse para representar el separador de fecha. El separador de fecha separa el día, mes y año cuando se da formato a valores de fecha. El carácter real que se usa como separador de fecha en la salida con formato viene determinada por la referencia cultural actual de la aplicación.|  
|(`%`)|Se utiliza para indicar que se debe leer el siguiente carácter como un formato de letra única sin tener en cuenta las letras. También se utiliza para indicar que un formato de letra única se lee como formato definido por el usuario. Consulte la información siguiente para obtener más detalles.|  
|`d`|Muestra el día como un número sin cero inicial (por ejemplo, `1`). Use `%d` si es el único carácter en su formato numérico definido por el usuario.|  
|`dd`|Muestra el día como un número con un cero a la izquierda (por ejemplo, `01`).|  
|`ddd`|Muestra el día como una abreviatura (por ejemplo, `Sun`).|  
|`dddd`|Muestra el día como un nombre completo (por ejemplo, `Sunday`).|  
|`M`|Muestra el mes como un número sin cero inicial (por ejemplo, enero se representa como `1`). Use `%M` si es el único carácter en su formato numérico definido por el usuario.|  
|`MM`|Muestra el mes como un número con un cero a la izquierda (por ejemplo, `01/12/01`).|  
|`MMM`|Muestra el mes como una abreviatura (por ejemplo, `Jan`).|  
|`MMMM`|Muestra el mes como un nombre completo del mes (por ejemplo, `January`).|  
|`gg`|Muestra la cadena de período/era (por ejemplo, `A.D.`).|  
|`h`|Muestra la hora como un número sin ceros utilizando el reloj de 12 horas (por ejemplo, `1:15:15 PM`). Use `%h` si es el único carácter en su formato numérico definido por el usuario.|  
|`hh`|Muestra la hora como un número con ceros utilizando el reloj de 12 horas (por ejemplo, `01:15:15 PM`).|  
|`H`|Muestra la hora como un número sin ceros utilizando el reloj de 24 horas (por ejemplo, `1:15:15`). Use `%H` si es el único carácter en su formato numérico definido por el usuario.|  
|`HH`|Muestra la hora como un número con ceros utilizando el reloj de 24 horas (por ejemplo, `01:15:15`).|  
|`m`|Muestra el minuto como un número sin ceros iniciales (por ejemplo, `12:1:15`). Use `%m` si es el único carácter en su formato numérico definido por el usuario.|  
|`mm`|Muestra el minuto como un número con ceros iniciales (por ejemplo, `12:01:15`).|  
|`s`|Muestra el segundo como un número sin ceros iniciales (por ejemplo, `12:15:5`). Use `%s` si es el único carácter en su formato numérico definido por el usuario.|  
|`ss`|Muestra el segundo como un número con ceros iniciales (por ejemplo, `12:15:05`).|  
|`f`|Muestra fracciones de segundos. Por ejemplo `ff` muestra centésimas de segundo, mientras que `ffff` muestra diez milésimas de segundos. Puede utilizar hasta siete `f` símbolos en el formato definido por el usuario. Use `%f` si es el único carácter en su formato numérico definido por el usuario.|  
|`t`|Utiliza el reloj de 12 horas y se muestra en mayúscula `A` para cualquier hora antes del mediodía; muestra una mayúscula `P` para cualquier hora entre el mediodía y las 11:59 P.M. Use `%t` si es el único carácter en su formato numérico definido por el usuario.|  
|`tt`|Las configuraciones regionales que utilizan un reloj de 12 horas, muestra una mayúscula `AM` con las horas antes del mediodía; muestra una mayúscula `PM` con cualquier hora entre el mediodía y las 11:59 P.M.<br /><br /> Las configuraciones regionales que utilizan un reloj de 24 horas, no muestra nada.|  
|`y`|Muestra el número de año (0-9) sin ceros iniciales. Use `%y` si es el único carácter en su formato numérico definido por el usuario.|  
|`yy`|Muestra el año en formato numérico de dos dígitos con un cero inicial, si procede.|  
|`yyy`|Muestra el año en formato numérico de cuatro dígitos.|  
|`yyyy`|Muestra el año en formato numérico de cuatro dígitos.|  
|`z`|Muestra el desplazamiento de zona horaria sin un cero inicial (por ejemplo, `-8`). Use `%z` si es el único carácter en su formato numérico definido por el usuario.|  
|`zz`|Muestra el desplazamiento de zona horaria con un cero inicial (por ejemplo, `-08`)|  
|`zzz`|Muestra el desplazamiento de zona horaria completo (por ejemplo, `-08:00`)|  
  
### <a name="legacy-code-example"></a>Ejemplo de código heredado  
 Los siguientes son ejemplos de definido por el usuario formatos de fecha y hora para `December 7, 1958, 8:50 PM, 35 seconds`:  
  
|Formato|Muestra|  
|-|-|  
|`M/d/yy`|`12/7/58`|  
|`d-MMM`|`7-Dec`|  
|`d-MMMM-yy`|`7-December-58`|  
|`d MMMM`|`7 December`|  
|`MMMM yy`|`December 58`|  
|`hh:mm tt`|`08:50 PM`|  
|`h:mm:ss t`|`8:50:35 P`|  
|`H:mm`|`20:50`|  
|`H:mm:ss`|`20:50:35`|  
|`M/d/yyyy H:mm`|`12/7/1958 20:50`|  
  
### <a name="smart-device-developer-notes"></a>Notas de desarrollador de dispositivos inteligentes  
 La resolución de tiempo mínimo para un dispositivo viene determinada por el fabricante del dispositivo. Si la resolución de tiempo para el dispositivo es bastante general el `f` formato carácter devuelve 0 cuando se ejecuta en ese dispositivo.  
  
   
  
## Examples  
 En este ejemplo se muestran los diversos usos de la función `Format` para dar formato a valores tanto con formatos `String` como otros definidos por el usuario. Para el separador de fecha (`/`), hora (`:`) e indicadores de a.m./p.m. (`t` y `tt`), el formato de salida que muestre su sistema dependerá de la configuración regional que use el código. Cuando las horas y fechas se muestren en el entorno de desarrollo, se utilizará el formato de fecha y hora corta de la configuración regional del código.  
  
> [!NOTE]
>  Para configuraciones regionales que utilizan un reloj de 24 horas, los indicadores de a.m./p.m. (`t` y `tt`) no muestran nada.  
  
 [!code-vb[VbVbalrStrings#27](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#27)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.String.Format(System.String,System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Conversion.Str(System.Object)" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md">Resumen de la manipulación de cadenas</related>
      </Docs>
    </Member>
    <Member MemberName="FormatCurrency">
      <MemberSignature Language="C#" Value="public static string FormatCurrency (object Expression, int NumDigitsAfterDecimal = -1, Microsoft.VisualBasic.TriState IncludeLeadingDigit = Microsoft.VisualBasic.TriState.UseDefault, Microsoft.VisualBasic.TriState UseParensForNegativeNumbers = Microsoft.VisualBasic.TriState.UseDefault, Microsoft.VisualBasic.TriState GroupDigits = Microsoft.VisualBasic.TriState.UseDefault);" />
      <MemberSignature Language="ILAsm" Value=".method public static string FormatCurrency(object Expression, int32 NumDigitsAfterDecimal, valuetype Microsoft.VisualBasic.TriState IncludeLeadingDigit, valuetype Microsoft.VisualBasic.TriState UseParensForNegativeNumbers, valuetype Microsoft.VisualBasic.TriState GroupDigits) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.FormatCurrency(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)" />
      <MemberSignature Language="VB.NET" Value="Public Function FormatCurrency (Expression As Object, Optional NumDigitsAfterDecimal As Integer = -1, Optional IncludeLeadingDigit As TriState = Microsoft.VisualBasic.TriState.UseDefault, Optional UseParensForNegativeNumbers As TriState = Microsoft.VisualBasic.TriState.UseDefault, Optional GroupDigits As TriState = Microsoft.VisualBasic.TriState.UseDefault) As String" />
      <MemberSignature Language="F#" Value="static member FormatCurrency : obj * int * Microsoft.VisualBasic.TriState * Microsoft.VisualBasic.TriState * Microsoft.VisualBasic.TriState -&gt; string" Usage="Microsoft.VisualBasic.Strings.FormatCurrency (Expression, NumDigitsAfterDecimal, IncludeLeadingDigit, UseParensForNegativeNumbers, GroupDigits)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Object" Index="0" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0" />
        <Parameter Name="NumDigitsAfterDecimal" Type="System.Int32" Index="1" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0" />
        <Parameter Name="IncludeLeadingDigit" Type="Microsoft.VisualBasic.TriState" Index="2" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0" />
        <Parameter Name="UseParensForNegativeNumbers" Type="Microsoft.VisualBasic.TriState" Index="3" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0" />
        <Parameter Name="GroupDigits" Type="Microsoft.VisualBasic.TriState" Index="4" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0" />
      </Parameters>
      <Docs>
        <param name="Expression">Obligatorio. Expresión a la que se debe dar formato.</param>
        <param name="NumDigitsAfterDecimal">Opcional. Valor numérico que indica el número de posiciones que se muestran a la derecha del separador decimal. El valor predeterminado es -1, que indica que se utiliza la configuración regional del equipo.</param>
        <param name="IncludeLeadingDigit">Opcional. Enumeración de <see cref="T:Microsoft.VisualBasic.TriState" /> que indica si se muestra un cero inicial o no para los valores fraccionarios. Vea los valores en la sección "Comentarios".</param>
        <param name="UseParensForNegativeNumbers">Opcional. Enumeración <see cref="T:Microsoft.VisualBasic.TriState" /> que indica si los valores negativos se van a colocar entre paréntesis o no. Vea los valores en la sección "Comentarios".</param>
        <param name="GroupDigits">Opcional. Enumeración <see cref="T:Microsoft.VisualBasic.TriState" /> que indica si los números se agrupan o no mediante el delimitador de grupo especificado en la configuración regional del equipo. Vea los valores en la sección "Comentarios".</param>
        <summary>Devuelve una expresión con formato de moneda en la que se utilizará el símbolo de moneda que se haya definido en el panel de control del sistema.</summary>
        <returns>Expresión con formato de moneda en la que se utilizará el símbolo de moneda que se haya definido en el panel de control del sistema.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cuando se omiten uno o más argumentos opcionales, valores de configuración regional coincidente del equipo se usan en su lugar.  
  
 La posición del símbolo de moneda en relación con el valor de moneda viene determinada por la configuración regional del sistema.  
  
> [!NOTE]
>  Toda la información de configuración procede de la configuración regional de la aplicación. De forma predeterminada, que será la configuración regional establecida en el panel de control. Sin embargo, se puede cambiar mediante programación utilizando .NET Framework, excepto el cero inicial, que procede la `Number` ficha.  
  
 El `IncludeLeadingDigit`, `UseParensForNegativeNumbers`, y `GroupDigits` argumentos toman los siguientes valores de enumeración de tres estados.  
  
|Valor|Descripción|  
|-|-|  
|`TriState.True`|True|  
|`TriState.False`|False|  
|`TriState.UseDefault`|Configuración regional del equipo|  
  
   
  
## Examples  
 En el siguiente ejemplo se muestra el uso de la función `FormatCurrency`.  
  
 [!code-vb[VbVbalrStrings#32](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#32)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">El número de dígitos situados a continuación del signo decimal es mayor que 99.</exception>
        <exception cref="T:System.InvalidCastException">El tipo no es numérico.</exception>
        <altmember cref="M:Microsoft.VisualBasic.Strings.FormatDateTime(System.DateTime,Microsoft.VisualBasic.DateFormat)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.FormatNumber(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.FormatPercent(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)" />
        <altmember cref="T:Microsoft.VisualBasic.TriState" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Format(System.Object,System.String)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.InvalidCastException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md">Manipulación de cadenas</related>
      </Docs>
    </Member>
    <Member MemberName="FormatDateTime">
      <MemberSignature Language="C#" Value="public static string FormatDateTime (DateTime Expression, Microsoft.VisualBasic.DateFormat NamedFormat = Microsoft.VisualBasic.DateFormat.GeneralDate);" />
      <MemberSignature Language="ILAsm" Value=".method public static string FormatDateTime(valuetype System.DateTime Expression, valuetype Microsoft.VisualBasic.DateFormat NamedFormat) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.FormatDateTime(System.DateTime,Microsoft.VisualBasic.DateFormat)" />
      <MemberSignature Language="VB.NET" Value="Public Function FormatDateTime (Expression As DateTime, Optional NamedFormat As DateFormat = Microsoft.VisualBasic.DateFormat.GeneralDate) As String" />
      <MemberSignature Language="F#" Value="static member FormatDateTime : DateTime * Microsoft.VisualBasic.DateFormat -&gt; string" Usage="Microsoft.VisualBasic.Strings.FormatDateTime (Expression, NamedFormat)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.DateTime" Index="0" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0" />
        <Parameter Name="NamedFormat" Type="Microsoft.VisualBasic.DateFormat" Index="1" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0" />
      </Parameters>
      <Docs>
        <param name="Expression">Obligatorio. Expresión de <see langword="Date" /> a la que se va a aplicar formato.</param>
        <param name="NamedFormat">Opcional. Valor numérico que indica el formato de fecha y hora utilizado. Si se omite, se utiliza <see langword="DateFormat.GeneralDate" />.</param>
        <summary>Devuelve una expresión de cadena que representa un valor de fecha u hora.</summary>
        <returns>Expresión de cadena que representa un valor de fecha u hora.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El `Date` tipo de datos siempre contiene información de fecha y hora. Para fines de conversión de tipos, Visual Basic considera 1/1/1 (1 de enero del año 1) tenga un valor neutro para que la fecha y 00:00:00 (medianoche) como un valor neutro por vez. Si aplica formato a un `Date` valor como una cadena de fecha y hora, `FormatDateTime` no incluye valores neutrales en la cadena resultante. Por ejemplo, si convierte #1/1/0001 9:30:00 # en una cadena, el resultado es "9:30:00 AM"; se suprime la información de fecha. Sin embargo, la información de fecha aún está presente en el original `Date` valor y se pueden recuperar con funciones como `DatePart`.  
  
> [!NOTE]
>  Si se pasa el `Expression` argumento como un `String` literal, `FormatDateTime` lo interpreta según el <xref:System.Globalization.CultureInfo.CurrentCulture%2A> configuración de la aplicación. Sin embargo, si se pasa como un `Date` literal, utilice el formato #mm/dd/aaaa #, porque `FormatDateTime` siempre interpreta un `Date` literal según la referencia cultural de inglés (Estados Unidos). Esto es necesario porque, si una aplicación se desarrolla y codifica con `Date` literales de una referencia cultural, pero, a continuación, se ejecuta en una plataforma con una referencia cultural diferente, el `Date` literales se podrían analizar correctamente.  
  
 El `NamedFormat` argumento tiene las siguientes opciones.  
  
|Constante|Descripción|  
|-|-|  
|`DateFormat.GeneralDate`|Mostrar una fecha u hora. Mostrar una parte de fecha como una fecha corta. Si hay una parte horaria, mostrarlo como mucho tiempo. Si está presente, se muestran ambas partes.|  
|`DateFormat.LongDate`|Mostrar una fecha con el formato de fecha larga especificado en la configuración regional del equipo.|  
|`DateFormat.ShortDate`|Mostrar una fecha con el formato de fecha corta especificado en la configuración regional del equipo.|  
|`DateFormat.LongTime`|Muestra una hora con el formato de hora especificado en la configuración regional del equipo.|  
|`DateFormat.ShortTime`|Muestra una hora con el formato de 24 horas (hh: mm).|  
  
   
  
## Examples  
 En este ejemplo se muestra el uso de la `FormatDateTime` función.  
  
 [!code-vb[VbVbalrStrings#3](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">El valor de <paramref name="NamedFormat" /> no es válido.</exception>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Format(System.Object,System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.FormatCurrency(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.FormatNumber(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.FormatPercent(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.DatePart(Microsoft.VisualBasic.DateInterval,System.DateTime,Microsoft.VisualBasic.FirstDayOfWeek,Microsoft.VisualBasic.FirstWeekOfYear)" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md">Resumen de la manipulación de cadenas</related>
      </Docs>
    </Member>
    <Member MemberName="FormatNumber">
      <MemberSignature Language="C#" Value="public static string FormatNumber (object Expression, int NumDigitsAfterDecimal = -1, Microsoft.VisualBasic.TriState IncludeLeadingDigit = Microsoft.VisualBasic.TriState.UseDefault, Microsoft.VisualBasic.TriState UseParensForNegativeNumbers = Microsoft.VisualBasic.TriState.UseDefault, Microsoft.VisualBasic.TriState GroupDigits = Microsoft.VisualBasic.TriState.UseDefault);" />
      <MemberSignature Language="ILAsm" Value=".method public static string FormatNumber(object Expression, int32 NumDigitsAfterDecimal, valuetype Microsoft.VisualBasic.TriState IncludeLeadingDigit, valuetype Microsoft.VisualBasic.TriState UseParensForNegativeNumbers, valuetype Microsoft.VisualBasic.TriState GroupDigits) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.FormatNumber(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)" />
      <MemberSignature Language="VB.NET" Value="Public Function FormatNumber (Expression As Object, Optional NumDigitsAfterDecimal As Integer = -1, Optional IncludeLeadingDigit As TriState = Microsoft.VisualBasic.TriState.UseDefault, Optional UseParensForNegativeNumbers As TriState = Microsoft.VisualBasic.TriState.UseDefault, Optional GroupDigits As TriState = Microsoft.VisualBasic.TriState.UseDefault) As String" />
      <MemberSignature Language="F#" Value="static member FormatNumber : obj * int * Microsoft.VisualBasic.TriState * Microsoft.VisualBasic.TriState * Microsoft.VisualBasic.TriState -&gt; string" Usage="Microsoft.VisualBasic.Strings.FormatNumber (Expression, NumDigitsAfterDecimal, IncludeLeadingDigit, UseParensForNegativeNumbers, GroupDigits)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Object" Index="0" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0" />
        <Parameter Name="NumDigitsAfterDecimal" Type="System.Int32" Index="1" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0" />
        <Parameter Name="IncludeLeadingDigit" Type="Microsoft.VisualBasic.TriState" Index="2" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0" />
        <Parameter Name="UseParensForNegativeNumbers" Type="Microsoft.VisualBasic.TriState" Index="3" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0" />
        <Parameter Name="GroupDigits" Type="Microsoft.VisualBasic.TriState" Index="4" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0" />
      </Parameters>
      <Docs>
        <param name="Expression">Obligatorio. Expresión a la que se debe dar formato.</param>
        <param name="NumDigitsAfterDecimal">Opcional. Valor numérico que indica el número de posiciones que se muestran a la derecha del separador decimal. El valor predeterminado es -1, que indica que se utiliza la configuración regional del equipo.</param>
        <param name="IncludeLeadingDigit">Opcional. Constante <see cref="T:Microsoft.VisualBasic.TriState" /> que indica si se muestra un 0 inicial para los valores fraccionarios. Consulte los valores en "Configuración".</param>
        <param name="UseParensForNegativeNumbers">Opcional. Constante <see cref="T:Microsoft.VisualBasic.TriState" /> que indica si los valores negativos se van a colocar entre paréntesis. Consulte los valores en "Configuración".</param>
        <param name="GroupDigits">Opcional. Constante <see cref="T:Microsoft.VisualBasic.TriState" /> que indica si los números se agrupan o no mediante el delimitador de grupo especificado en la configuración regional. Consulte los valores en "Configuración".</param>
        <summary>Devuelve una expresión con formato de número.</summary>
        <returns>Expresión con formato de número.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cuando uno o más argumentos opcionales se omiten los valores de los argumentos omitidos se proporcionan mediante la configuración regional.  
  
> [!NOTE]
>  Toda la información de configuración procede de la configuración regional de la aplicación. De forma predeterminada, que será la configuración regional establecida en el panel de control. Sin embargo, se puede cambiar mediante programación con .NET Framework.  
  
 El `IncludeLeadingDigit`, `UseParensForNegativeNumbers`, y `GroupDigits` argumentos con los siguientes valores.  
  
|Constante|Descripción|  
|-|-|  
|`TriState.True`|True|  
|`TriState.False`|False|  
|`TriState.UseDefault`|Configuración regional del equipo|  
  
   
  
## Examples  
 Este ejemplo se muestra el `FormatNumber` función.  
  
 [!code-vb[VbVbalrStrings#15](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#15)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidCastException">El tipo no es numérico.</exception>
        <altmember cref="M:Microsoft.VisualBasic.Strings.FormatCurrency(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.FormatDateTime(System.DateTime,Microsoft.VisualBasic.DateFormat)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.FormatPercent(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)" />
        <altmember cref="T:Microsoft.VisualBasic.TriState" />
        <altmember cref="T:System.InvalidCastException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md">Resumen de la manipulación de cadenas</related>
      </Docs>
    </Member>
    <Member MemberName="FormatPercent">
      <MemberSignature Language="C#" Value="public static string FormatPercent (object Expression, int NumDigitsAfterDecimal = -1, Microsoft.VisualBasic.TriState IncludeLeadingDigit = Microsoft.VisualBasic.TriState.UseDefault, Microsoft.VisualBasic.TriState UseParensForNegativeNumbers = Microsoft.VisualBasic.TriState.UseDefault, Microsoft.VisualBasic.TriState GroupDigits = Microsoft.VisualBasic.TriState.UseDefault);" />
      <MemberSignature Language="ILAsm" Value=".method public static string FormatPercent(object Expression, int32 NumDigitsAfterDecimal, valuetype Microsoft.VisualBasic.TriState IncludeLeadingDigit, valuetype Microsoft.VisualBasic.TriState UseParensForNegativeNumbers, valuetype Microsoft.VisualBasic.TriState GroupDigits) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.FormatPercent(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)" />
      <MemberSignature Language="VB.NET" Value="Public Function FormatPercent (Expression As Object, Optional NumDigitsAfterDecimal As Integer = -1, Optional IncludeLeadingDigit As TriState = Microsoft.VisualBasic.TriState.UseDefault, Optional UseParensForNegativeNumbers As TriState = Microsoft.VisualBasic.TriState.UseDefault, Optional GroupDigits As TriState = Microsoft.VisualBasic.TriState.UseDefault) As String" />
      <MemberSignature Language="F#" Value="static member FormatPercent : obj * int * Microsoft.VisualBasic.TriState * Microsoft.VisualBasic.TriState * Microsoft.VisualBasic.TriState -&gt; string" Usage="Microsoft.VisualBasic.Strings.FormatPercent (Expression, NumDigitsAfterDecimal, IncludeLeadingDigit, UseParensForNegativeNumbers, GroupDigits)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Object" Index="0" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0" />
        <Parameter Name="NumDigitsAfterDecimal" Type="System.Int32" Index="1" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0" />
        <Parameter Name="IncludeLeadingDigit" Type="Microsoft.VisualBasic.TriState" Index="2" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0" />
        <Parameter Name="UseParensForNegativeNumbers" Type="Microsoft.VisualBasic.TriState" Index="3" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0" />
        <Parameter Name="GroupDigits" Type="Microsoft.VisualBasic.TriState" Index="4" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0" />
      </Parameters>
      <Docs>
        <param name="Expression">Obligatorio. Expresión a la que se debe dar formato.</param>
        <param name="NumDigitsAfterDecimal">Opcional. Valor numérico que indica cuántos lugares a la derecha del decimal se muestran. El valor predeterminado es -1, que indica que se utiliza la configuración regional.</param>
        <param name="IncludeLeadingDigit">Opcional. Constante <see cref="T:Microsoft.VisualBasic.TriState" /> que indica si se debe o no mostrar un cero inicial en los valores fraccionarios. Consulte los valores en "Configuración".</param>
        <param name="UseParensForNegativeNumbers">Opcional. <see cref="T:Microsoft.VisualBasic.TriState" /> constante que indica si hay que poner los valores negativos entre paréntesis. Consulte los valores en "Configuración".</param>
        <param name="GroupDigits">Opcional. Constante <see cref="T:Microsoft.VisualBasic.TriState" /> que indica si los números se agrupan o no mediante el delimitador de grupo especificado en la configuración regional. Consulte los valores en "Configuración".</param>
        <summary>Devuelve una expresión con formato de porcentaje (es decir, multiplicada por 100) con un carácter % final.</summary>
        <returns>Expresión con formato de porcentaje (es decir, multiplicada por 100) con un carácter % final.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cuando se omiten uno o más argumentos opcionales, se proporcionan los valores de los argumentos omitidos por la configuración regional.  
  
> [!NOTE]
>  Toda la información de configuración procede de la configuración regional de la aplicación. De forma predeterminada, que será la configuración regional establecida en el panel de control. Sin embargo, se puede cambiar mediante programación con .NET Framework.  
  
 El `IncludeLeadingDigit`, `UseParensForNegativeNumbers`, y `GroupDigits` argumentos con los siguientes valores.  
  
|Constante|Descripción|  
|-|-|  
|`TriState.True`|True|  
|`TriState.False`|False|  
|`TriState.Default`|Configuración regional del equipo|  
  
   
  
## Examples  
 En este ejemplo se muestra el uso de la `FormatPercent` función.  
  
 [!code-vb[VbVbalrStrings#28](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#28)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidCastException">El tipo no es numérico.</exception>
        <altmember cref="M:Microsoft.VisualBasic.Strings.FormatCurrency(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.FormatDateTime(System.DateTime,Microsoft.VisualBasic.DateFormat)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.FormatNumber(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Format(System.Object,System.String)" />
        <altmember cref="T:Microsoft.VisualBasic.TriState" />
        <altmember cref="T:System.InvalidCastException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md">Resumen de la manipulación de cadenas</related>
      </Docs>
    </Member>
    <Member MemberName="GetChar">
      <MemberSignature Language="C#" Value="public static char GetChar (string str, int Index);" />
      <MemberSignature Language="ILAsm" Value=".method public static char GetChar(string str, int32 Index) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.GetChar(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetChar (str As String, Index As Integer) As Char" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static char GetChar(System::String ^ str, int Index);" />
      <MemberSignature Language="F#" Value="static member GetChar : string * int -&gt; char" Usage="Microsoft.VisualBasic.Strings.GetChar (str, Index)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="str" Type="System.String" Index="0" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0" />
        <Parameter Name="Index" Type="System.Int32" Index="1" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0" />
      </Parameters>
      <Docs>
        <param name="str">Obligatorio. Cualquier expresión de <see langword="String" /> válida.</param>
        <param name="Index">Obligatorio. Expresión <see langword="Integer" />. Índice (de base 1) del carácter de <paramref name="str" /> que se va a devolver.</param>
        <summary>Devuelve un valor de <see langword="Char" /> que representa el carácter correspondiente al índice especificado en la cadena proporcionada.</summary>
        <returns>Devuelve un valor de <see langword="Char" /> que representa el carácter correspondiente al índice especificado en la cadena proporcionada.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si `Index` es menor que 1 o mayor que el índice del último carácter en `str`, un `ArgumentException` se produce.  
  
   
  
## Examples  
 En este ejemplo se muestra cómo usar el `GetChar` función para devolver un carácter de un índice especificado en un `String`.  
  
 [!code-vb[VbVbalrStrings#23](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#23)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="str" /> es <see langword="Nothing" />, <paramref name="Index" /> &lt; 1, o <paramref name="Index" /> es mayor que el índice del último carácter de <paramref name="str" />.</exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Mid" />
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md">Resumen de la manipulación de cadenas</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="InStr">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Devuelve un entero que especifica la posición inicial de la primera aparición de una cadena dentro de otra.  El entero es un índice basado en uno, si se encuentra una coincidencia.  Si no se encuentra ninguna coincidencia, la función devuelve cero.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="InStr">
      <MemberSignature Language="C#" Value="public static int InStr (string String1, string String2, Microsoft.VisualBasic.CompareMethod Compare = Microsoft.VisualBasic.CompareMethod.Binary);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 InStr(string String1, string String2, valuetype Microsoft.VisualBasic.CompareMethod Compare) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.InStr(System.String,System.String,Microsoft.VisualBasic.CompareMethod)" />
      <MemberSignature Language="VB.NET" Value="Public Function InStr (String1 As String, String2 As String, Optional Compare As CompareMethod = Microsoft.VisualBasic.CompareMethod.Binary) As Integer" />
      <MemberSignature Language="F#" Value="static member InStr : string * string * Microsoft.VisualBasic.CompareMethod -&gt; int" Usage="Microsoft.VisualBasic.Strings.InStr (String1, String2, Compare)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="String1" Type="System.String" Index="0" FrameworkAlternate="netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="String2" Type="System.String" Index="1" FrameworkAlternate="netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="Compare" Type="Microsoft.VisualBasic.CompareMethod" Index="2" FrameworkAlternate="netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <Attributes>
            <Attribute>
              <AttributeName>Microsoft.VisualBasic.CompilerServices.OptionCompare</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="String1">Obligatorio. Expresión de tipo <see langword="String" /> en la que se va a buscar.</param>
        <param name="String2">Obligatorio. Expresión de tipo <see langword="String" /> que se va a buscar.</param>
        <param name="Compare">Opcional. Especifica el tipo de comparación de cadenas. Si se omite <paramref name="Compare" />, la configuración de <see langword="Option Compare" /> determina el tipo de comparación.</param>
        <summary>Devuelve un entero que especifica la posición inicial de la primera aparición de una cadena dentro de otra.</summary>
        <returns><list type="table">
            <item>
              <term> Si 
 </term>
              <description> InStr devuelve 
 </description>
            </item>
            <item>
              <term>
                <paramref name="String1" /> es de longitud cero o <see langword="Nothing" /></term>
              <description> 0 
 </description>
            </item>
            <item>
              <term>
                <paramref name="String2" /> es de longitud cero o <see langword="Nothing" /></term>
              <description> La posición inicial para la búsqueda, que establece como valor predeterminado a la posición del primer carácter.  
  
 </description>
            </item>
            <item>
              <term>No se encuentra 
                <paramref name="String2" />. 
 </term>
              <description> 0 
 </description>
            </item>
            <item>
              <term>
                <paramref name="String2" /> se encuentra dentro de <paramref name="String1" />.</term>
              <description> Posición donde empieza la coincidencia 
 </description>
            </item>
            <item>
              <term></term>
              <description></description>
            </item>
          </list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Normalmente, el `InStr` función se utiliza cuando el análisis de cadenas.  
  
> [!NOTE]
>  El `InStrB` función en las versiones anteriores de Visual Basic devuelven un número de bytes en lugar de una posición de carácter. Se utiliza principalmente para convertir cadenas en aplicaciones de caracteres de doble byte (DBCS). Todas las cadenas de Visual Basic 2005 están en Unicode, y `InStrB` ya no se admite.  
  
 La configuración del argumento `Compare` es:  
  
|Constante|Valor|Descripción|  
|-|-|-|  
|`Binary`|0|Realiza una comparación binaria|  
|`Text`|1|Realiza una comparación de texto|  
  
   
  
## Examples  
 En este ejemplo se usa la función `InStr` para devolver la posición de la primera aparición de una cadena dentro de otra.  
  
 [!code-vb[VbVbalrStrings#8](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#8)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Strings.InStrRev(System.String,System.String,System.Int32,Microsoft.VisualBasic.CompareMethod)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.StrComp(System.String,System.String,Microsoft.VisualBasic.CompareMethod)" />
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/index.md">Cadenas en Visual Basic</related>
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/introduction-to-strings.md">Introducción a las cadenas en Visual Basic</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/statements/option-compare-statement.md">Option Compare (Instrucción)</related>
      </Docs>
    </Member>
    <Member MemberName="InStr">
      <MemberSignature Language="C#" Value="public static int InStr (int Start, string String1, string String2, Microsoft.VisualBasic.CompareMethod Compare = Microsoft.VisualBasic.CompareMethod.Binary);" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netframework-1.1;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 InStr(int32 Start, string String1, string String2, valuetype Microsoft.VisualBasic.CompareMethod Compare) cil managed" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.InStr(System.Int32,System.String,System.String,Microsoft.VisualBasic.CompareMethod)" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberSignature Language="VB.NET" Value="Public Function InStr (Start As Integer, String1 As String, String2 As String, Optional Compare As CompareMethod = Microsoft.VisualBasic.CompareMethod.Binary) As Integer" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netframework-1.1;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberSignature Language="F#" Value="static member InStr : int * string * string * Microsoft.VisualBasic.CompareMethod -&gt; int" Usage="Microsoft.VisualBasic.Strings.InStr (Start, String1, String2, Compare)" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberSignature Language="C#" Value="public static int InStr (int StartPos, string String1, string String2, Microsoft.VisualBasic.CompareMethod Compare = Microsoft.VisualBasic.CompareMethod.Binary);" FrameworkAlternate="netcore-3.0" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 InStr(int32 StartPos, string String1, string String2, valuetype Microsoft.VisualBasic.CompareMethod Compare) cil managed" FrameworkAlternate="netcore-3.0" />
      <MemberSignature Language="VB.NET" Value="Public Function InStr (StartPos As Integer, String1 As String, String2 As String, Optional Compare As CompareMethod = Microsoft.VisualBasic.CompareMethod.Binary) As Integer" FrameworkAlternate="netcore-3.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Start" Type="System.Int32" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netframework-1.1;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="StartPos" Type="System.Int32" Index="0" FrameworkAlternate="netcore-3.0" />
        <Parameter Name="String1" Type="System.String" Index="1" FrameworkAlternate="netcore-3.0;netframework-1.1;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="String2" Type="System.String" Index="2" FrameworkAlternate="netcore-3.0;netframework-1.1;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="Compare" Type="Microsoft.VisualBasic.CompareMethod" Index="3" FrameworkAlternate="netcore-3.0;netframework-1.1;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <Attributes>
            <Attribute>
              <AttributeName>Microsoft.VisualBasic.CompilerServices.OptionCompare</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="Start">Opcional. Expresión numérica que establece la posición inicial de cada búsqueda. Si se omite, la búsqueda comienza en la posición del primer carácter. El índice de inicio es de base 1.</param>
        <param name="StartPos">To be added.</param>
        <param name="String1">Obligatorio. Expresión de tipo <see langword="String" /> en la que se va a buscar.</param>
        <param name="String2">Obligatorio. Expresión de tipo <see langword="String" /> que se va a buscar.</param>
        <param name="Compare">Opcional. Especifica el tipo de comparación de cadenas. Si se omite <paramref name="Compare" />, la configuración de <see langword="Option Compare" /> determina el tipo de comparación.</param>
        <summary>Devuelve un entero que especifica la posición inicial de la primera aparición de una cadena dentro de otra.</summary>
        <returns><list type="table">
            <item>
              <term> Si 
 </term>
              <description> InStr devuelve 
 </description>
            </item>
            <item>
              <term>
                <paramref name="String1" /> es de longitud cero o <see langword="Nothing" /></term>
              <description> 0 
 </description>
            </item>
            <item>
              <term>
                <paramref name="String2" /> es de longitud cero o <see langword="Nothing" /></term>
              <description>
                <paramref name="start" />
              </description>
            </item>
            <item>
              <term>No se encuentra 
                <paramref name="String2" />. 
 </term>
              <description> 0 
 </description>
            </item>
            <item>
              <term>
                <paramref name="String2" /> se encuentra dentro de <paramref name="String1" />.</term>
              <description> Posición donde empieza la coincidencia 
 </description>
            </item>
            <item>
              <term>
                <paramref name="Start" /> &gt; longitud de <paramref name="String1" /></term>
              <description> 0 
 </description>
            </item>
          </list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Normalmente, el `InStr` función se utiliza cuando el análisis de cadenas.  
  
> [!NOTE]
>  El `InStrB` función en las versiones anteriores de Visual Basic devuelven un número de bytes en lugar de una posición de carácter. Se utiliza principalmente para convertir cadenas en aplicaciones de caracteres de doble byte (DBCS). Todas las cadenas de Visual Basic 2005 están en Unicode, y `InStrB` ya no se admite.  
  
 La configuración del argumento `Compare` es:  
  
|Constante|Valor|Descripción|  
|-|-|-|  
|`Binary`|0|Realiza una comparación binaria|  
|`Text`|1|Realiza una comparación de texto|  
  
   
  
## Examples  
 En este ejemplo se usa la función `InStr` para devolver la posición de la primera aparición de una cadena dentro de otra.  
  
 [!code-vb[VbVbalrStrings#8](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#8)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="Start" /> &lt; 1.</exception>
        <altmember cref="M:Microsoft.VisualBasic.Strings.InStrRev(System.String,System.String,System.Int32,Microsoft.VisualBasic.CompareMethod)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.StrComp(System.String,System.String,Microsoft.VisualBasic.CompareMethod)" />
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/index.md">Cadenas en Visual Basic</related>
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/introduction-to-strings.md">Introducción a las cadenas en Visual Basic</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/statements/option-compare-statement.md">Option Compare (Instrucción)</related>
      </Docs>
    </Member>
    <Member MemberName="InStrRev">
      <MemberSignature Language="C#" Value="public static int InStrRev (string StringCheck, string StringMatch, int Start = -1, Microsoft.VisualBasic.CompareMethod Compare = Microsoft.VisualBasic.CompareMethod.Binary);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 InStrRev(string StringCheck, string StringMatch, int32 Start, valuetype Microsoft.VisualBasic.CompareMethod Compare) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.InStrRev(System.String,System.String,System.Int32,Microsoft.VisualBasic.CompareMethod)" />
      <MemberSignature Language="VB.NET" Value="Public Function InStrRev (StringCheck As String, StringMatch As String, Optional Start As Integer = -1, Optional Compare As CompareMethod = Microsoft.VisualBasic.CompareMethod.Binary) As Integer" />
      <MemberSignature Language="F#" Value="static member InStrRev : string * string * int * Microsoft.VisualBasic.CompareMethod -&gt; int" Usage="Microsoft.VisualBasic.Strings.InStrRev (StringCheck, StringMatch, Start, Compare)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="StringCheck" Type="System.String" Index="0" FrameworkAlternate="netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="StringMatch" Type="System.String" Index="1" FrameworkAlternate="netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="Start" Type="System.Int32" Index="2" FrameworkAlternate="netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="Compare" Type="Microsoft.VisualBasic.CompareMethod" Index="3" FrameworkAlternate="netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <Attributes>
            <Attribute>
              <AttributeName>Microsoft.VisualBasic.CompilerServices.OptionCompare</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="StringCheck">Obligatorio. Expresión de cadena en la que se va a buscar.</param>
        <param name="StringMatch">Obligatorio. Expresión de cadena que se va a buscar.</param>
        <param name="Start">Opcional. Expresión numérica que establece la posición inicial de base 1 para cada búsqueda, empezando por el lado izquierdo de la cadena. Si se omite <paramref name="Start" />, se utiliza -1, lo que significa que la búsqueda comienza en la posición del último carácter. A continuación, la búsqueda se realiza de derecha a izquierda.</param>
        <param name="Compare">Opcional. Valor numérico que indica el tipo de comparación que se va a utilizar al evaluar subcadenas. Si se omite, se realiza una comparación binaria. Para obtener los valores, vea Configuración.</param>
        <summary>Devuelve la posición de la primera aparición de una cadena dentro de otra, comenzando por el extremo derecho de la cadena.</summary>
        <returns><list type="table">
            <item>
              <term> Si 
 </term>
              <description> InStrRev devolverá: 
 </description>
            </item>
            <item>
              <term>
                <paramref name="StringCheck" /> tiene longitud cero 
 </term>
              <description> 0 
 </description>
            </item>
            <item>
              <term>
                <paramref name="StringMatch" /> tiene longitud cero 
 </term>
              <description>
                <paramref name="Start" />
              </description>
            </item>
            <item>
              <term>No se encuentra 
                <paramref name="StringMatch" />. 
 </term>
              <description> 0 
 </description>
            </item>
            <item>
              <term>
                <paramref name="StringMatch" /> se encuentra dentro de <paramref name="StringCheck" />.</term>
              <description> La posición en la que se localice la primera coincidencia, comenzando por el extremo derecho de la cadena  
  
 </description>
            </item>
            <item>
              <term>
                <paramref name="Start" /> es mayor que la longitud de <paramref name="StringMatch" /></term>
              <description> 0 
 </description>
            </item>
          </list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Tenga en cuenta que la sintaxis de la `InStrRev` función no es igual que la sintaxis de la `InStr` función.  
  
 El `Compare` argumento puede tener los siguientes valores.  
  
|Constante|Descripción|  
|-|-|  
|`Binary`|Realiza una comparación binaria.|  
|`Text`|Realiza una comparación textual.|  
  
   
  
## Examples  
 En este ejemplo se muestra el uso de la `InStrRev` función.  
  
 [!code-vb[VbVbalrStrings#26](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#26)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="Start" /> = 0 o <paramref name="Start" /> &lt; -1.</exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.InStr" />
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/index.md">Cadenas en Visual Basic</related>
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/introduction-to-strings.md">Introducción a las cadenas en Visual Basic</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Join">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Devuelve una cadena creada a partir de la combinación de varias subcadenas contenidas en una matriz.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Join">
      <MemberSignature Language="C#" Value="public static string Join (object[] SourceArray, string Delimiter = &quot; &quot;);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Join(object[] SourceArray, string Delimiter) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Join(System.Object[],System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function Join (SourceArray As Object(), Optional Delimiter As String = &quot; &quot;) As String" />
      <MemberSignature Language="F#" Value="static member Join : obj[] * string -&gt; string" Usage="Microsoft.VisualBasic.Strings.Join (SourceArray, Delimiter)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="SourceArray" Type="System.Object[]" Index="0" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0" />
        <Parameter Name="Delimiter" Type="System.String" Index="1" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0" />
      </Parameters>
      <Docs>
        <param name="SourceArray">Obligatorio. Matriz unidimensional que contiene las subcadenas que se van a unir.</param>
        <param name="Delimiter">Opcional. Cualquier cadena que se utilice para separar las subcadenas en la cadena devuelta. Si se omite, se utiliza el carácter de espacio (" "). Si <paramref name="Delimiter" /> es una cadena de longitud cero ("") o <see langword="Nothing" />, todos los elementos de la lista se concatenan sin delimitadores.</param>
        <summary>Devuelve una cadena creada a partir de la combinación de varias subcadenas contenidas en una matriz.</summary>
        <returns>Cadena creada a partir de la combinación de varias subcadenas contenidas en una matriz.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Hay una paridad entre la `Join` y `Split` funciones. El `Join` función toma una matriz de cadenas y las combina con una cadena de delimitación para devolver una sola cadena. El `Split` función toma una cadena y la separa en el delimitador para devolver una matriz de cadenas. Sin embargo, una diferencia clave es que `Join` puede concatenar cadenas con cualquier cadena de delimitación, `Split` puede separar solo cadenas mediante un delimitador de carácter único.  
  
   
  
## Examples  
 En el ejemplo siguiente se muestra cómo usar el `Join` función para crear una lista de varias cadenas.  
  
 [!code-vb[VbVbalrStrings#10](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#10)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="SourceArray" /> no es unidimensional.</exception>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Split(System.String,System.String,System.Int32,Microsoft.VisualBasic.CompareMethod)" />
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md">Resumen de la manipulación de cadenas</related>
      </Docs>
    </Member>
    <Member MemberName="Join">
      <MemberSignature Language="C#" Value="public static string Join (string[] SourceArray, string Delimiter = &quot; &quot;);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Join(string[] SourceArray, string Delimiter) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Join(System.String[],System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function Join (SourceArray As String(), Optional Delimiter As String = &quot; &quot;) As String" />
      <MemberSignature Language="F#" Value="static member Join : string[] * string -&gt; string" Usage="Microsoft.VisualBasic.Strings.Join (SourceArray, Delimiter)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="SourceArray" Type="System.String[]" Index="0" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0" />
        <Parameter Name="Delimiter" Type="System.String" Index="1" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0" />
      </Parameters>
      <Docs>
        <param name="SourceArray">Obligatorio. Matriz unidimensional que contiene las subcadenas que se van a unir.</param>
        <param name="Delimiter">Opcional. Cualquier cadena que se utilice para separar las subcadenas en la cadena devuelta. Si se omite, se utiliza el carácter de espacio (" "). Si <paramref name="Delimiter" /> es una cadena de longitud cero ("") o <see langword="Nothing" />, todos los elementos de la lista se concatenan sin delimitadores.</param>
        <summary>Devuelve una cadena creada a partir de la combinación de varias subcadenas contenidas en una matriz.</summary>
        <returns>Cadena creada a partir de la combinación de varias subcadenas contenidas en una matriz.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Hay una paridad entre la `Join` y `Split` funciones. El `Join` función toma una matriz de cadenas y las combina con una cadena de delimitación para devolver una sola cadena. El `Split` función toma una cadena y la separa en el delimitador para devolver una matriz de cadenas. Sin embargo, una diferencia clave es que `Join` puede concatenar cadenas con cualquier cadena de delimitación, `Split` puede separar solo cadenas mediante un delimitador de carácter único.  
  
   
  
## Examples  
 En el ejemplo siguiente se muestra cómo usar el `Join` función para crear una lista de varias cadenas.  
  
 [!code-vb[VbVbalrStrings#10](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#10)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="SourceArray" /> no es unidimensional.</exception>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Split(System.String,System.String,System.Int32,Microsoft.VisualBasic.CompareMethod)" />
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md">Resumen de la manipulación de cadenas</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="LCase">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Devuelve una cadena o un carácter convertidos en minúscula.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="LCase">
      <MemberSignature Language="C#" Value="public static char LCase (char Value);" />
      <MemberSignature Language="ILAsm" Value=".method public static char LCase(char Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.LCase(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Function LCase (Value As Char) As Char" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static char LCase(char Value);" />
      <MemberSignature Language="F#" Value="static member LCase : char -&gt; char" Usage="Microsoft.VisualBasic.Strings.LCase Value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Value" Type="System.Char" Index="0" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0" />
      </Parameters>
      <Docs>
        <param name="Value">Obligatorio. Cualquier expresión válida de tipo <see langword="String" /> o <see langword="Char" />.</param>
        <summary>Devuelve una cadena o un carácter convertidos en minúscula.</summary>
        <returns>Cadena o un carácter convertidos en minúscula.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Solo las letras mayúsculas se convierten a minúsculas; todas las letras minúsculas y los caracteres que permanecen sin cambios.  
  
 Esta función usa la información de referencia cultural de la aplicación al manipular la cadena para que los cambios de mayúsculas son adecuados para la configuración regional en el que se utiliza la aplicación.  
  
> [!IMPORTANT]
>  Si la aplicación toma decisiones de seguridad en función del resultado de una comparación o la operación de cambio de mayúsculas y, a continuación, la operación debe utilizar el <xref:System.String.Compare%2A?displayProperty=nameWithType> método y pase <xref:System.StringComparison.Ordinal> o <xref:System.StringComparison.OrdinalIgnoreCase> para el `comparisonType` argumento. Para obtener más información, consulte [cómo afecta a cadenas de referencia cultural en Visual Basic](~/docs/visual-basic/programming-guide/language-features/strings/how-culture-affects-strings.md).  
  
   
  
## Examples  
 Este ejemplo se usa el `LCase` función para devolver una versión en minúsculas de una cadena.  
  
 [!code-vb[VbVbalrStrings#12](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#12)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.UCase" />
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/index.md">Cadenas en Visual Basic</related>
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/introduction-to-strings.md">Introducción a las cadenas en Visual Basic</related>
      </Docs>
    </Member>
    <Member MemberName="LCase">
      <MemberSignature Language="C#" Value="public static string LCase (string Value);" />
      <MemberSignature Language="ILAsm" Value=".method public static string LCase(string Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.LCase(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function LCase (Value As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ LCase(System::String ^ Value);" />
      <MemberSignature Language="F#" Value="static member LCase : string -&gt; string" Usage="Microsoft.VisualBasic.Strings.LCase Value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Value" Type="System.String" Index="0" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0" />
      </Parameters>
      <Docs>
        <param name="Value">Obligatorio. Cualquier expresión válida de tipo <see langword="String" /> o <see langword="Char" />.</param>
        <summary>Devuelve una cadena o un carácter convertidos en minúscula.</summary>
        <returns>Cadena o un carácter convertidos en minúscula.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Solo las letras mayúsculas se convierten a minúsculas; todas las letras minúsculas y los caracteres que permanecen sin cambios.  
  
 Esta función usa la información de referencia cultural de la aplicación al manipular la cadena para que los cambios de mayúsculas son adecuados para la configuración regional en el que se utiliza la aplicación.  
  
> [!IMPORTANT]
>  Si la aplicación toma decisiones de seguridad en función del resultado de una comparación o la operación de cambio de mayúsculas y, a continuación, la operación debe utilizar el <xref:System.String.Compare%2A?displayProperty=nameWithType> método y pase <xref:System.StringComparison.Ordinal> o <xref:System.StringComparison.OrdinalIgnoreCase> para el `comparisonType` argumento. Para obtener más información, consulte [cómo afecta a cadenas de referencia cultural en Visual Basic](~/docs/visual-basic/programming-guide/language-features/strings/how-culture-affects-strings.md).  
  
   
  
## Examples  
 Este ejemplo se usa el `LCase` función para devolver una versión en minúsculas de una cadena.  
  
 [!code-vb[VbVbalrStrings#12](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#12)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.UCase" />
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/index.md">Cadenas en Visual Basic</related>
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/introduction-to-strings.md">Introducción a las cadenas en Visual Basic</related>
      </Docs>
    </Member>
    <Member MemberName="Left">
      <MemberSignature Language="C#" Value="public static string Left (string str, int Length);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Left(string str, int32 Length) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Left(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Left (str As String, Length As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Left(System::String ^ str, int Length);" />
      <MemberSignature Language="F#" Value="static member Left : string * int -&gt; string" Usage="Microsoft.VisualBasic.Strings.Left (str, Length)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="str" Type="System.String" Index="0" FrameworkAlternate="netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="Length" Type="System.Int32" Index="1" FrameworkAlternate="netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="str">Obligatorio. Expresión de tipo <see langword="String" /> de la que se devuelven los caracteres situados más a la izquierda.</param>
        <param name="Length">Obligatorio. Expresión <see langword="Integer" />. Expresión numérica que indica el número de caracteres que se van a devolver. Si es 0, se devuelve una cadena de longitud cero (""). Si es mayor o igual que el número de caracteres en <paramref name="str" />, se devuelve la cadena completa.</param>
        <summary>Devuelve una cadena que contiene un número especificado de caracteres a partir del lado izquierdo de una cadena.</summary>
        <returns>Cadena que contiene un número especificado de caracteres a partir del lado izquierdo de una cadena.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Para determinar el número de caracteres de `str`, utilice el `Len` función. Si se utiliza en una aplicación de Windows Forms o cualquier otra clase que tiene un `Left` propiedad, debe calificar totalmente la función con `Microsoft.VisualBasic.Left`.  
  
> [!NOTE]
>  El `LeftB` función en las versiones anteriores de Visual Basic, devuelve una cadena en bytes, en lugar de caracteres. Se utiliza principalmente para convertir cadenas en aplicaciones de caracteres de doble byte (DBCS). Todas las cadenas en Visual Basic actuales están en Unicode, y `LeftB` ya no se admite.  
  
   
  
## Examples  
 En este ejemplo se muestra el uso de la `Left` función para devolver una subcadena de una determinada `String`. En una clase que tiene un `Left` propiedad, puede ser necesario completar la `Left` función.  
  
 [!code-vb[VbVbalrStrings#20](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#20)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="Length" /> &lt; 0.</exception>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Right(System.String,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Len" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Mid" />
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md">Resumen de la manipulación de cadenas</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Len">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Devuelve un entero que contiene el número de caracteres de una cadena o el número nominal de bytes necesarios para almacenar una variable.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Len">
      <MemberSignature Language="C#" Value="public static int Len (bool Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Len(bool Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Len(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function Len (Expression As Boolean) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Len(bool Expression);" />
      <MemberSignature Language="F#" Value="static member Len : bool -&gt; int" Usage="Microsoft.VisualBasic.Strings.Len Expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Boolean" Index="0" FrameworkAlternate="netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="Expression">Cualquier expresión de tipo <see langword="String" /> o nombre de variable válidos. Si <paramref name="Expression" /> es del tipo <see langword="Object" />, la función <see langword="Len" /> devuelve el tamaño con el que la función <see langword="FilePut" /> escribirá en el archivo.</param>
        <summary>Devuelve un entero que contiene el número de caracteres de una cadena o el número nominal de bytes necesarios para almacenar una variable.</summary>
        <returns>Número entero que contiene el número de caracteres de una cadena o el número nominal de bytes necesarios para almacenar una variable.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Con tipos definidos por el usuario y `Object` variables, la `Len` función devuelve el tamaño que se escribirá en el archivo por el `FilePut` función. Si un `Object` contiene un `String`, devolverá la longitud de la cadena. Si un `Object` contiene cualquier otro tipo, devolverá el tamaño del objeto tal como se escribirá en el archivo por el `FilePut` función.  
  
 El `VBFixedString` atributo puede aplicarse a campos de cadena de objetos para indicar el tamaño de la cadena, en bytes, cuando se escribe en el disco. El `Len` función usa el `VBFixedString` atributo, si está disponible, al determinar el tamaño de `Object` variables.  
  
> [!NOTE]
>  El `Len` función puede no ser capaz de determinar el número real de bytes de almacenamiento necesarios cuando se usa con cadenas de longitud variable en tipos de datos definido por el usuario.  
  
> [!NOTE]
>  El `LenB` función en versiones anteriores de Visual Basic, devuelve el número de bytes en una cadena en lugar de caracteres. Se utiliza principalmente para convertir cadenas en aplicaciones de caracteres de doble byte (DBCS). Todas las cadenas en Visual Basic actuales están en Unicode, y `LenB` ya no se admite.  
  
## <a name="smart-device-developer-notes"></a>Notas de desarrollador de dispositivos inteligentes  
 El `Len` función acepta solo `String` y `Object` variables como parámetros. Si un `Object` contiene un `String`, devolverá la longitud de la `String`. Si un parámetro es un valor NULL `Object` referencia, la función devuelve cero. Si un `Object` contiene cualquier otro tipo, se produce una excepción.  
  
   
  
## Examples  
 En este ejemplo se utiliza `Len` para devolver el número de caracteres de una cadena:  
  
 [!code-vb[VbVbalrStrings#33](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#33)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Len" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md">Resumen de la manipulación de cadenas</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md">Resumen de tipos de datos (Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="Len">
      <MemberSignature Language="C#" Value="public static int Len (byte Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Len(unsigned int8 Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Len(System.Byte)" />
      <MemberSignature Language="VB.NET" Value="Public Function Len (Expression As Byte) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Len(System::Byte Expression);" />
      <MemberSignature Language="F#" Value="static member Len : byte -&gt; int" Usage="Microsoft.VisualBasic.Strings.Len Expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Byte" Index="0" FrameworkAlternate="netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="Expression">Cualquier expresión de tipo <see langword="String" /> o nombre de variable válidos. Si <paramref name="Expression" /> es del tipo <see langword="Object" />, la función <see langword="Len" /> devuelve el tamaño con el que la función <see langword="FilePut" /> escribirá en el archivo.</param>
        <summary>Devuelve un entero que contiene el número de caracteres de una cadena o el número nominal de bytes necesarios para almacenar una variable.</summary>
        <returns>Número entero que contiene el número de caracteres de una cadena o el número nominal de bytes necesarios para almacenar una variable.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Con tipos definidos por el usuario y `Object` variables, la `Len` función devuelve el tamaño que se escribirá en el archivo por el `FilePut` función. Si un `Object` contiene un `String`, devolverá la longitud de la cadena. Si un `Object` contiene cualquier otro tipo, devolverá el tamaño del objeto tal como se escribirá en el archivo por el `FilePut` función.  
  
 El `VBFixedString` atributo puede aplicarse a campos de cadena de objetos para indicar el tamaño de la cadena, en bytes, cuando se escribe en el disco. El `Len` función usa el `VBFixedString` atributo, si está disponible, al determinar el tamaño de `Object` variables.  
  
> [!NOTE]
>  El `Len` función puede no ser capaz de determinar el número real de bytes de almacenamiento necesarios cuando se usa con cadenas de longitud variable en tipos de datos definido por el usuario.  
  
> [!NOTE]
>  El `LenB` función en versiones anteriores de Visual Basic, devuelve el número de bytes en una cadena en lugar de caracteres. Se utiliza principalmente para convertir cadenas en aplicaciones de caracteres de doble byte (DBCS). Todas las cadenas en Visual Basic actuales están en Unicode, y `LenB` ya no se admite.  
  
## <a name="smart-device-developer-notes"></a>Notas de desarrollador de dispositivos inteligentes  
 El `Len` función acepta solo `String` y `Object` variables como parámetros. Si un `Object` contiene un `String`, devolverá la longitud de la `String`. Si un parámetro es un valor NULL `Object` referencia, la función devuelve cero. Si un `Object` contiene cualquier otro tipo, se produce una excepción.  
  
   
  
## Examples  
 En este ejemplo se utiliza `Len` para devolver el número de caracteres de una cadena:  
  
 [!code-vb[VbVbalrStrings#33](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#33)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Len" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md">Resumen de la manipulación de cadenas</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md">Resumen de tipos de datos (Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="Len">
      <MemberSignature Language="C#" Value="public static int Len (char Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Len(char Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Len(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Function Len (Expression As Char) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Len(char Expression);" />
      <MemberSignature Language="F#" Value="static member Len : char -&gt; int" Usage="Microsoft.VisualBasic.Strings.Len Expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Char" Index="0" FrameworkAlternate="netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="Expression">Cualquier expresión de tipo <see langword="String" /> o nombre de variable válidos. Si <paramref name="Expression" /> es del tipo <see langword="Object" />, la función <see langword="Len" /> devuelve el tamaño con el que la función <see langword="FilePut" /> escribirá en el archivo.</param>
        <summary>Devuelve un entero que contiene el número de caracteres de una cadena o el número nominal de bytes necesarios para almacenar una variable.</summary>
        <returns>Número entero que contiene el número de caracteres de una cadena o el número nominal de bytes necesarios para almacenar una variable.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Con tipos definidos por el usuario y `Object` variables, la `Len` función devuelve el tamaño que se escribirá en el archivo por el `FilePut` función. Si un `Object` contiene un `String`, devolverá la longitud de la cadena. Si un `Object` contiene cualquier otro tipo, devolverá el tamaño del objeto tal como se escribirá en el archivo por el `FilePut` función.  
  
 El `VBFixedString` atributo puede aplicarse a campos de cadena de objetos para indicar el tamaño de la cadena, en bytes, cuando se escribe en el disco. El `Len` función usa el `VBFixedString` atributo, si está disponible, al determinar el tamaño de `Object` variables.  
  
> [!NOTE]
>  El `Len` función puede no ser capaz de determinar el número real de bytes de almacenamiento necesarios cuando se usa con cadenas de longitud variable en tipos de datos definido por el usuario.  
  
> [!NOTE]
>  El `LenB` función en versiones anteriores de Visual Basic, devuelve el número de bytes en una cadena en lugar de caracteres. Se utiliza principalmente para convertir cadenas en aplicaciones de caracteres de doble byte (DBCS). Todas las cadenas en Visual Basic actuales están en Unicode, y `LenB` ya no se admite.  
  
## <a name="smart-device-developer-notes"></a>Notas de desarrollador de dispositivos inteligentes  
 El `Len` función acepta solo `String` y `Object` variables como parámetros. Si un `Object` contiene un `String`, devolverá la longitud de la `String`. Si un parámetro es un valor NULL `Object` referencia, la función devuelve cero. Si un `Object` contiene cualquier otro tipo, se produce una excepción.  
  
   
  
## Examples  
 En este ejemplo se utiliza `Len` para devolver el número de caracteres de una cadena:  
  
 [!code-vb[VbVbalrStrings#33](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#33)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Len" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md">Resumen de la manipulación de cadenas</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md">Resumen de tipos de datos (Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="Len">
      <MemberSignature Language="C#" Value="public static int Len (DateTime Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Len(valuetype System.DateTime Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Len(System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Function Len (Expression As DateTime) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Len(DateTime Expression);" />
      <MemberSignature Language="F#" Value="static member Len : DateTime -&gt; int" Usage="Microsoft.VisualBasic.Strings.Len Expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.DateTime" Index="0" FrameworkAlternate="netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="Expression">Cualquier expresión de tipo <see langword="String" /> o nombre de variable válidos. Si <paramref name="Expression" /> es del tipo <see langword="Object" />, la función <see langword="Len" /> devuelve el tamaño con el que la función <see langword="FilePut" /> escribirá en el archivo.</param>
        <summary>Devuelve un entero que contiene el número de caracteres de una cadena o el número nominal de bytes necesarios para almacenar una variable.</summary>
        <returns>Número entero que contiene el número de caracteres de una cadena o el número nominal de bytes necesarios para almacenar una variable.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Con tipos definidos por el usuario y `Object` variables, la `Len` función devuelve el tamaño que se escribirá en el archivo por el `FilePut` función. Si un `Object` contiene un `String`, devolverá la longitud de la cadena. Si un `Object` contiene cualquier otro tipo, devolverá el tamaño del objeto tal como se escribirá en el archivo por el `FilePut` función.  
  
 El `VBFixedString` atributo puede aplicarse a campos de cadena de objetos para indicar el tamaño de la cadena, en bytes, cuando se escribe en el disco. El `Len` función usa el `VBFixedString` atributo, si está disponible, al determinar el tamaño de `Object` variables.  
  
> [!NOTE]
>  El `Len` función puede no ser capaz de determinar el número real de bytes de almacenamiento necesarios cuando se usa con cadenas de longitud variable en tipos de datos definido por el usuario.  
  
> [!NOTE]
>  El `LenB` función en versiones anteriores de Visual Basic, devuelve el número de bytes en una cadena en lugar de caracteres. Se utiliza principalmente para convertir cadenas en aplicaciones de caracteres de doble byte (DBCS). Todas las cadenas en Visual Basic actuales están en Unicode, y `LenB` ya no se admite.  
  
## <a name="smart-device-developer-notes"></a>Notas de desarrollador de dispositivos inteligentes  
 El `Len` función acepta solo `String` y `Object` variables como parámetros. Si un `Object` contiene un `String`, devolverá la longitud de la `String`. Si un parámetro es un valor NULL `Object` referencia, la función devuelve cero. Si un `Object` contiene cualquier otro tipo, se produce una excepción.  
  
   
  
## Examples  
 En este ejemplo se utiliza `Len` para devolver el número de caracteres de una cadena:  
  
 [!code-vb[VbVbalrStrings#33](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#33)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Len" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md">Resumen de la manipulación de cadenas</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md">Resumen de tipos de datos (Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="Len">
      <MemberSignature Language="C#" Value="public static int Len (decimal Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Len(valuetype System.Decimal Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Len(System.Decimal)" />
      <MemberSignature Language="VB.NET" Value="Public Function Len (Expression As Decimal) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Len(System::Decimal Expression);" />
      <MemberSignature Language="F#" Value="static member Len : decimal -&gt; int" Usage="Microsoft.VisualBasic.Strings.Len Expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Decimal" Index="0" FrameworkAlternate="netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="Expression">Cualquier expresión de tipo <see langword="String" /> o nombre de variable válidos. Si <paramref name="Expression" /> es del tipo <see langword="Object" />, la función <see langword="Len" /> devuelve el tamaño con el que la función <see langword="FilePut" /> escribirá en el archivo.</param>
        <summary>Devuelve un entero que contiene el número de caracteres de una cadena o el número nominal de bytes necesarios para almacenar una variable.</summary>
        <returns>Número entero que contiene el número de caracteres de una cadena o el número nominal de bytes necesarios para almacenar una variable.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Con tipos definidos por el usuario y `Object` variables, la `Len` función devuelve el tamaño que se escribirá en el archivo por el `FilePut` función. Si un `Object` contiene un `String`, devolverá la longitud de la cadena. Si un `Object` contiene cualquier otro tipo, devolverá el tamaño del objeto tal como se escribirá en el archivo por el `FilePut` función.  
  
 El `VBFixedString` atributo puede aplicarse a campos de cadena de objetos para indicar el tamaño de la cadena, en bytes, cuando se escribe en el disco. El `Len` función usa el `VBFixedString` atributo, si está disponible, al determinar el tamaño de `Object` variables.  
  
> [!NOTE]
>  El `Len` función puede no ser capaz de determinar el número real de bytes de almacenamiento necesarios cuando se usa con cadenas de longitud variable en tipos de datos definido por el usuario.  
  
> [!NOTE]
>  El `LenB` función en versiones anteriores de Visual Basic, devuelve el número de bytes en una cadena en lugar de caracteres. Se utiliza principalmente para convertir cadenas en aplicaciones de caracteres de doble byte (DBCS). Todas las cadenas en Visual Basic actuales están en Unicode, y `LenB` ya no se admite.  
  
## <a name="smart-device-developer-notes"></a>Notas de desarrollador de dispositivos inteligentes  
 El `Len` función acepta solo `String` y `Object` variables como parámetros. Si un `Object` contiene un `String`, devolverá la longitud de la `String`. Si un parámetro es un valor NULL `Object` referencia, la función devuelve cero. Si un `Object` contiene cualquier otro tipo, se produce una excepción.  
  
   
  
## Examples  
 En este ejemplo se utiliza `Len` para devolver el número de caracteres de una cadena:  
  
 [!code-vb[VbVbalrStrings#33](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#33)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Len" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md">Resumen de la manipulación de cadenas</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md">Resumen de tipos de datos (Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="Len">
      <MemberSignature Language="C#" Value="public static int Len (double Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Len(float64 Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Len(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Len (Expression As Double) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Len(double Expression);" />
      <MemberSignature Language="F#" Value="static member Len : double -&gt; int" Usage="Microsoft.VisualBasic.Strings.Len Expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Double" Index="0" FrameworkAlternate="netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="Expression">Cualquier expresión de tipo <see langword="String" /> o nombre de variable válidos. Si <paramref name="Expression" /> es del tipo <see langword="Object" />, la función <see langword="Len" /> devuelve el tamaño con el que la función <see langword="FilePut" /> escribirá en el archivo.</param>
        <summary>Devuelve un entero que contiene el número de caracteres de una cadena o el número nominal de bytes necesarios para almacenar una variable.</summary>
        <returns>Número entero que contiene el número de caracteres de una cadena o el número nominal de bytes necesarios para almacenar una variable.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Con tipos definidos por el usuario y `Object` variables, la `Len` función devuelve el tamaño que se escribirá en el archivo por el `FilePut` función. Si un `Object` contiene un `String`, devolverá la longitud de la cadena. Si un `Object` contiene cualquier otro tipo, devolverá el tamaño del objeto tal como se escribirá en el archivo por el `FilePut` función.  
  
 El `VBFixedString` atributo puede aplicarse a campos de cadena de objetos para indicar el tamaño de la cadena, en bytes, cuando se escribe en el disco. El `Len` función usa el `VBFixedString` atributo, si está disponible, al determinar el tamaño de `Object` variables.  
  
> [!NOTE]
>  El `Len` función puede no ser capaz de determinar el número real de bytes de almacenamiento necesarios cuando se usa con cadenas de longitud variable en tipos de datos definido por el usuario.  
  
> [!NOTE]
>  El `LenB` función en versiones anteriores de Visual Basic, devuelve el número de bytes en una cadena en lugar de caracteres. Se utiliza principalmente para convertir cadenas en aplicaciones de caracteres de doble byte (DBCS). Todas las cadenas en Visual Basic actuales están en Unicode, y `LenB` ya no se admite.  
  
## <a name="smart-device-developer-notes"></a>Notas de desarrollador de dispositivos inteligentes  
 El `Len` función acepta solo `String` y `Object` variables como parámetros. Si un `Object` contiene un `String`, devolverá la longitud de la `String`. Si un parámetro es un valor NULL `Object` referencia, la función devuelve cero. Si un `Object` contiene cualquier otro tipo, se produce una excepción.  
  
   
  
## Examples  
 En este ejemplo se utiliza `Len` para devolver el número de caracteres de una cadena:  
  
 [!code-vb[VbVbalrStrings#33](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#33)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Len" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md">Resumen de la manipulación de cadenas</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md">Resumen de tipos de datos (Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="Len">
      <MemberSignature Language="C#" Value="public static int Len (short Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Len(int16 Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Len(System.Int16)" />
      <MemberSignature Language="VB.NET" Value="Public Function Len (Expression As Short) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Len(short Expression);" />
      <MemberSignature Language="F#" Value="static member Len : int16 -&gt; int" Usage="Microsoft.VisualBasic.Strings.Len Expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Int16" Index="0" FrameworkAlternate="netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="Expression">Cualquier expresión de tipo <see langword="String" /> o nombre de variable válidos. Si <paramref name="Expression" /> es del tipo <see langword="Object" />, la función <see langword="Len" /> devuelve el tamaño con el que la función <see langword="FilePut" /> escribirá en el archivo.</param>
        <summary>Devuelve un entero que contiene el número de caracteres de una cadena o el número nominal de bytes necesarios para almacenar una variable.</summary>
        <returns>Número entero que contiene el número de caracteres de una cadena o el número nominal de bytes necesarios para almacenar una variable.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Con tipos definidos por el usuario y `Object` variables, la `Len` función devuelve el tamaño que se escribirá en el archivo por el `FilePut` función. Si un `Object` contiene un `String`, devolverá la longitud de la cadena. Si un `Object` contiene cualquier otro tipo, devolverá el tamaño del objeto tal como se escribirá en el archivo por el `FilePut` función.  
  
 El `VBFixedString` atributo puede aplicarse a campos de cadena de objetos para indicar el tamaño de la cadena, en bytes, cuando se escribe en el disco. El `Len` función usa el `VBFixedString` atributo, si está disponible, al determinar el tamaño de `Object` variables.  
  
> [!NOTE]
>  El `Len` función puede no ser capaz de determinar el número real de bytes de almacenamiento necesarios cuando se usa con cadenas de longitud variable en tipos de datos definido por el usuario.  
  
> [!NOTE]
>  El `LenB` función en versiones anteriores de Visual Basic, devuelve el número de bytes en una cadena en lugar de caracteres. Se utiliza principalmente para convertir cadenas en aplicaciones de caracteres de doble byte (DBCS). Todas las cadenas en Visual Basic actuales están en Unicode, y `LenB` ya no se admite.  
  
## <a name="smart-device-developer-notes"></a>Notas de desarrollador de dispositivos inteligentes  
 El `Len` función acepta solo `String` y `Object` variables como parámetros. Si un `Object` contiene un `String`, devolverá la longitud de la `String`. Si un parámetro es un valor NULL `Object` referencia, la función devuelve cero. Si un `Object` contiene cualquier otro tipo, se produce una excepción.  
  
   
  
## Examples  
 En este ejemplo se utiliza `Len` para devolver el número de caracteres de una cadena:  
  
 [!code-vb[VbVbalrStrings#33](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#33)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Len" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md">Resumen de la manipulación de cadenas</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md">Resumen de tipos de datos (Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="Len">
      <MemberSignature Language="C#" Value="public static int Len (int Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Len(int32 Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Len(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Len (Expression As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Len(int Expression);" />
      <MemberSignature Language="F#" Value="static member Len : int -&gt; int" Usage="Microsoft.VisualBasic.Strings.Len Expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Int32" Index="0" FrameworkAlternate="netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="Expression">Cualquier expresión de tipo <see langword="String" /> o nombre de variable válidos. Si <paramref name="Expression" /> es del tipo <see langword="Object" />, la función <see langword="Len" /> devuelve el tamaño con el que la función <see langword="FilePut" /> escribirá en el archivo.</param>
        <summary>Devuelve un entero que contiene el número de caracteres de una cadena o el número nominal de bytes necesarios para almacenar una variable.</summary>
        <returns>Número entero que contiene el número de caracteres de una cadena o el número nominal de bytes necesarios para almacenar una variable.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Con tipos definidos por el usuario y `Object` variables, la `Len` función devuelve el tamaño que se escribirá en el archivo por el `FilePut` función. Si un `Object` contiene un `String`, devolverá la longitud de la cadena. Si un `Object` contiene cualquier otro tipo, devolverá el tamaño del objeto tal como se escribirá en el archivo por el `FilePut` función.  
  
 El `VBFixedString` atributo puede aplicarse a campos de cadena de objetos para indicar el tamaño de la cadena, en bytes, cuando se escribe en el disco. El `Len` función usa el `VBFixedString` atributo, si está disponible, al determinar el tamaño de `Object` variables.  
  
> [!NOTE]
>  El `Len` función puede no ser capaz de determinar el número real de bytes de almacenamiento necesarios cuando se usa con cadenas de longitud variable en tipos de datos definido por el usuario.  
  
> [!NOTE]
>  El `LenB` función en versiones anteriores de Visual Basic, devuelve el número de bytes en una cadena en lugar de caracteres. Se utiliza principalmente para convertir cadenas en aplicaciones de caracteres de doble byte (DBCS). Todas las cadenas en Visual Basic actuales están en Unicode, y `LenB` ya no se admite.  
  
## <a name="smart-device-developer-notes"></a>Notas de desarrollador de dispositivos inteligentes  
 El `Len` función acepta solo `String` y `Object` variables como parámetros. Si un `Object` contiene un `String`, devolverá la longitud de la `String`. Si un parámetro es un valor NULL `Object` referencia, la función devuelve cero. Si un `Object` contiene cualquier otro tipo, se produce una excepción.  
  
   
  
## Examples  
 En este ejemplo se utiliza `Len` para devolver el número de caracteres de una cadena:  
  
 [!code-vb[VbVbalrStrings#33](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#33)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Len" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md">Resumen de la manipulación de cadenas</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md">Resumen de tipos de datos (Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="Len">
      <MemberSignature Language="C#" Value="public static int Len (long Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Len(int64 Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Len(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Function Len (Expression As Long) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Len(long Expression);" />
      <MemberSignature Language="F#" Value="static member Len : int64 -&gt; int" Usage="Microsoft.VisualBasic.Strings.Len Expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Int64" Index="0" FrameworkAlternate="netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="Expression">Cualquier expresión de tipo <see langword="String" /> o nombre de variable válidos. Si <paramref name="Expression" /> es del tipo <see langword="Object" />, la función <see langword="Len" /> devuelve el tamaño con el que la función <see langword="FilePut" /> escribirá en el archivo.</param>
        <summary>Devuelve un entero que contiene el número de caracteres de una cadena o el número nominal de bytes necesarios para almacenar una variable.</summary>
        <returns>Número entero que contiene el número de caracteres de una cadena o el número nominal de bytes necesarios para almacenar una variable.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Con tipos definidos por el usuario y `Object` variables, la `Len` función devuelve el tamaño que se escribirá en el archivo por el `FilePut` función. Si un `Object` contiene un `String`, devolverá la longitud de la cadena. Si un `Object` contiene cualquier otro tipo, devolverá el tamaño del objeto tal como se escribirá en el archivo por el `FilePut` función.  
  
 El `VBFixedString` atributo puede aplicarse a campos de cadena de objetos para indicar el tamaño de la cadena, en bytes, cuando se escribe en el disco. El `Len` función usa el `VBFixedString` atributo, si está disponible, al determinar el tamaño de `Object` variables.  
  
> [!NOTE]
>  El `Len` función puede no ser capaz de determinar el número real de bytes de almacenamiento necesarios cuando se usa con cadenas de longitud variable en tipos de datos definido por el usuario.  
  
> [!NOTE]
>  El `LenB` función en versiones anteriores de Visual Basic, devuelve el número de bytes en una cadena en lugar de caracteres. Se utiliza principalmente para convertir cadenas en aplicaciones de caracteres de doble byte (DBCS). Todas las cadenas en Visual Basic actuales están en Unicode, y `LenB` ya no se admite.  
  
## <a name="smart-device-developer-notes"></a>Notas de desarrollador de dispositivos inteligentes  
 El `Len` función acepta solo `String` y `Object` variables como parámetros. Si un `Object` contiene un `String`, devolverá la longitud de la `String`. Si un parámetro es un valor NULL `Object` referencia, la función devuelve cero. Si un `Object` contiene cualquier otro tipo, se produce una excepción.  
  
   
  
## Examples  
 En este ejemplo se utiliza `Len` para devolver el número de caracteres de una cadena:  
  
 [!code-vb[VbVbalrStrings#33](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#33)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Len" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md">Resumen de la manipulación de cadenas</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md">Resumen de tipos de datos (Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="Len">
      <MemberSignature Language="C#" Value="public static int Len (object Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Len(object Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Len(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Len (Expression As Object) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Len(System::Object ^ Expression);" />
      <MemberSignature Language="F#" Value="static member Len : obj -&gt; int" Usage="Microsoft.VisualBasic.Strings.Len Expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Object" Index="0" FrameworkAlternate="netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="Expression">Cualquier expresión de tipo <see langword="String" /> o nombre de variable válidos. Si <paramref name="Expression" /> es del tipo <see langword="Object" />, la función <see langword="Len" /> devuelve el tamaño con el que la función <see langword="FilePut" /> escribirá en el archivo.</param>
        <summary>Devuelve un entero que contiene el número de caracteres de una cadena o el número nominal de bytes necesarios para almacenar una variable.</summary>
        <returns>Número entero que contiene el número de caracteres de una cadena o el número nominal de bytes necesarios para almacenar una variable.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Con tipos definidos por el usuario y `Object` variables, la `Len` función devuelve el tamaño que se escribirá en el archivo por el `FilePut` función. Si un `Object` contiene un `String`, devolverá la longitud de la cadena. Si un `Object` contiene cualquier otro tipo, devolverá el tamaño del objeto tal como se escribirá en el archivo por el `FilePut` función.  
  
 El `VBFixedString` atributo puede aplicarse a campos de cadena de objetos para indicar el tamaño de la cadena, en bytes, cuando se escribe en el disco. El `Len` función usa el `VBFixedString` atributo, si está disponible, al determinar el tamaño de `Object` variables.  
  
> [!NOTE]
>  El `Len` función puede no ser capaz de determinar el número real de bytes de almacenamiento necesarios cuando se usa con cadenas de longitud variable en tipos de datos definido por el usuario.  
  
> [!NOTE]
>  El `LenB` función en versiones anteriores de Visual Basic, devuelve el número de bytes en una cadena en lugar de caracteres. Se utiliza principalmente para convertir cadenas en aplicaciones de caracteres de doble byte (DBCS). Todas las cadenas en Visual Basic actuales están en Unicode, y `LenB` ya no se admite.  
  
## <a name="smart-device-developer-notes"></a>Notas de desarrollador de dispositivos inteligentes  
 El `Len` función acepta solo `String` y `Object` variables como parámetros. Si un `Object` contiene un `String`, devolverá la longitud de la `String`. Si un parámetro es un valor NULL `Object` referencia, la función devuelve cero. Si un `Object` contiene cualquier otro tipo, se produce una excepción.  
  
   
  
## Examples  
 En este ejemplo se utiliza `Len` para devolver el número de caracteres de una cadena:  
  
 [!code-vb[VbVbalrStrings#33](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#33)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Len" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md">Resumen de la manipulación de cadenas</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md">Resumen de tipos de datos (Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="Len">
      <MemberSignature Language="C#" Value="public static int Len (sbyte Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Len(int8 Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Len(System.SByte)" />
      <MemberSignature Language="VB.NET" Value="Public Function Len (Expression As SByte) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Len(System::SByte Expression);" />
      <MemberSignature Language="F#" Value="static member Len : sbyte -&gt; int" Usage="Microsoft.VisualBasic.Strings.Len Expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.SByte" Index="0" FrameworkAlternate="netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="Expression">Cualquier expresión de tipo <see langword="String" /> o nombre de variable válidos. Si <paramref name="Expression" /> es del tipo <see langword="Object" />, la función <see langword="Len" /> devuelve el tamaño con el que la función <see langword="FilePut" /> escribirá en el archivo.</param>
        <summary>Devuelve un entero que contiene el número de caracteres de una cadena o el número nominal de bytes necesarios para almacenar una variable.</summary>
        <returns>Número entero que contiene el número de caracteres de una cadena o el número nominal de bytes necesarios para almacenar una variable.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Con tipos definidos por el usuario y `Object` variables, la `Len` función devuelve el tamaño que se escribirá en el archivo por el `FilePut` función. Si un `Object` contiene un `String`, devolverá la longitud de la cadena. Si un `Object` contiene cualquier otro tipo, devolverá el tamaño del objeto tal como se escribirá en el archivo por el `FilePut` función.  
  
 El `VBFixedString` atributo puede aplicarse a campos de cadena de objetos para indicar el tamaño de la cadena, en bytes, cuando se escribe en el disco. El `Len` función usa el `VBFixedString` atributo, si está disponible, al determinar el tamaño de `Object` variables.  
  
> [!NOTE]
>  El `Len` función puede no ser capaz de determinar el número real de bytes de almacenamiento necesarios cuando se usa con cadenas de longitud variable en tipos de datos definido por el usuario.  
  
> [!NOTE]
>  El `LenB` función en versiones anteriores de Visual Basic, devuelve el número de bytes en una cadena en lugar de caracteres. Se utiliza principalmente para convertir cadenas en aplicaciones de caracteres de doble byte (DBCS). Todas las cadenas en Visual Basic actuales están en Unicode, y `LenB` ya no se admite.  
  
## <a name="smart-device-developer-notes"></a>Notas de desarrollador de dispositivos inteligentes  
 El `Len` función acepta solo `String` y `Object` variables como parámetros. Si un `Object` contiene un `String`, devolverá la longitud de la `String`. Si un parámetro es un valor NULL `Object` referencia, la función devuelve cero. Si un `Object` contiene cualquier otro tipo, se produce una excepción.  
  
   
  
## Examples  
 En este ejemplo se utiliza `Len` para devolver el número de caracteres de una cadena:  
  
 [!code-vb[VbVbalrStrings#33](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#33)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Strings.Len(System.Byte)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Len" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md">Resumen de la manipulación de cadenas</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md">Resumen de tipos de datos (Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="Len">
      <MemberSignature Language="C#" Value="public static int Len (float Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Len(float32 Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Len(System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Function Len (Expression As Single) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Len(float Expression);" />
      <MemberSignature Language="F#" Value="static member Len : single -&gt; int" Usage="Microsoft.VisualBasic.Strings.Len Expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Single" Index="0" FrameworkAlternate="netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="Expression">Cualquier expresión de tipo <see langword="String" /> o nombre de variable válidos. Si <paramref name="Expression" /> es del tipo <see langword="Object" />, la función <see langword="Len" /> devuelve el tamaño con el que la función <see langword="FilePut" /> escribirá en el archivo.</param>
        <summary>Devuelve un entero que contiene el número de caracteres de una cadena o el número nominal de bytes necesarios para almacenar una variable.</summary>
        <returns>Número entero que contiene el número de caracteres de una cadena o el número nominal de bytes necesarios para almacenar una variable.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Con tipos definidos por el usuario y `Object` variables, la `Len` función devuelve el tamaño que se escribirá en el archivo por el `FilePut` función. Si un `Object` contiene un `String`, devolverá la longitud de la cadena. Si un `Object` contiene cualquier otro tipo, devolverá el tamaño del objeto tal como se escribirá en el archivo por el `FilePut` función.  
  
 El `VBFixedString` atributo puede aplicarse a campos de cadena de objetos para indicar el tamaño de la cadena, en bytes, cuando se escribe en el disco. El `Len` función usa el `VBFixedString` atributo, si está disponible, al determinar el tamaño de `Object` variables.  
  
> [!NOTE]
>  El `Len` función puede no ser capaz de determinar el número real de bytes de almacenamiento necesarios cuando se usa con cadenas de longitud variable en tipos de datos definido por el usuario.  
  
> [!NOTE]
>  El `LenB` función en versiones anteriores de Visual Basic, devuelve el número de bytes en una cadena en lugar de caracteres. Se utiliza principalmente para convertir cadenas en aplicaciones de caracteres de doble byte (DBCS). Todas las cadenas en Visual Basic actuales están en Unicode, y `LenB` ya no se admite.  
  
## <a name="smart-device-developer-notes"></a>Notas de desarrollador de dispositivos inteligentes  
 El `Len` función acepta solo `String` y `Object` variables como parámetros. Si un `Object` contiene un `String`, devolverá la longitud de la `String`. Si un parámetro es un valor NULL `Object` referencia, la función devuelve cero. Si un `Object` contiene cualquier otro tipo, se produce una excepción.  
  
   
  
## Examples  
 En este ejemplo se utiliza `Len` para devolver el número de caracteres de una cadena:  
  
 [!code-vb[VbVbalrStrings#33](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#33)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Len" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md">Resumen de la manipulación de cadenas</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md">Resumen de tipos de datos (Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="Len">
      <MemberSignature Language="C#" Value="public static int Len (string Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Len(string Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Len(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function Len (Expression As String) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Len(System::String ^ Expression);" />
      <MemberSignature Language="F#" Value="static member Len : string -&gt; int" Usage="Microsoft.VisualBasic.Strings.Len Expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.String" Index="0" FrameworkAlternate="netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="Expression">Cualquier expresión de tipo <see langword="String" /> o nombre de variable válidos. Si <paramref name="Expression" /> es del tipo <see langword="Object" />, la función <see langword="Len" /> devuelve el tamaño con el que la función <see langword="FilePut" /> escribirá en el archivo.</param>
        <summary>Devuelve un entero que contiene el número de caracteres de una cadena o el número nominal de bytes necesarios para almacenar una variable.</summary>
        <returns>Número entero que contiene el número de caracteres de una cadena o el número nominal de bytes necesarios para almacenar una variable.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Con tipos definidos por el usuario y `Object` variables, la `Len` función devuelve el tamaño que se escribirá en el archivo por el `FilePut` función. Si un `Object` contiene un `String`, devolverá la longitud de la cadena. Si un `Object` contiene cualquier otro tipo, devolverá el tamaño del objeto tal como se escribirá en el archivo por el `FilePut` función.  
  
 El `VBFixedString` atributo puede aplicarse a campos de cadena de objetos para indicar el tamaño de la cadena, en bytes, cuando se escribe en el disco. El `Len` función usa el `VBFixedString` atributo, si está disponible, al determinar el tamaño de `Object` variables.  
  
> [!NOTE]
>  El `Len` función puede no ser capaz de determinar el número real de bytes de almacenamiento necesarios cuando se usa con cadenas de longitud variable en tipos de datos definido por el usuario.  
  
> [!NOTE]
>  El `LenB` función en versiones anteriores de Visual Basic, devuelve el número de bytes en una cadena en lugar de caracteres. Se utiliza principalmente para convertir cadenas en aplicaciones de caracteres de doble byte (DBCS). Todas las cadenas en Visual Basic actuales están en Unicode, y `LenB` ya no se admite.  
  
## <a name="smart-device-developer-notes"></a>Notas de desarrollador de dispositivos inteligentes  
 El `Len` función acepta solo `String` y `Object` variables como parámetros. Si un `Object` contiene un `String`, devolverá la longitud de la `String`. Si un parámetro es un valor NULL `Object` referencia, la función devuelve cero. Si un `Object` contiene cualquier otro tipo, se produce una excepción.  
  
   
  
## Examples  
 En este ejemplo se utiliza `Len` para devolver el número de caracteres de una cadena:  
  
 [!code-vb[VbVbalrStrings#33](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#33)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Len" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md">Resumen de la manipulación de cadenas</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md">Resumen de tipos de datos (Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="Len">
      <MemberSignature Language="C#" Value="public static int Len (ushort Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Len(unsigned int16 Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Len(System.UInt16)" />
      <MemberSignature Language="VB.NET" Value="Public Function Len (Expression As UShort) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Len(System::UInt16 Expression);" />
      <MemberSignature Language="F#" Value="static member Len : uint16 -&gt; int" Usage="Microsoft.VisualBasic.Strings.Len Expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.UInt16" Index="0" FrameworkAlternate="netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="Expression">Cualquier expresión de tipo <see langword="String" /> o nombre de variable válidos. Si <paramref name="Expression" /> es del tipo <see langword="Object" />, la función <see langword="Len" /> devuelve el tamaño con el que la función <see langword="FilePut" /> escribirá en el archivo.</param>
        <summary>Devuelve un entero que contiene el número de caracteres de una cadena o el número nominal de bytes necesarios para almacenar una variable.</summary>
        <returns>Número entero que contiene el número de caracteres de una cadena o el número nominal de bytes necesarios para almacenar una variable.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Con tipos definidos por el usuario y `Object` variables, la `Len` función devuelve el tamaño que se escribirá en el archivo por el `FilePut` función. Si un `Object` contiene un `String`, devolverá la longitud de la cadena. Si un `Object` contiene cualquier otro tipo, devolverá el tamaño del objeto tal como se escribirá en el archivo por el `FilePut` función.  
  
 El `VBFixedString` atributo puede aplicarse a campos de cadena de objetos para indicar el tamaño de la cadena, en bytes, cuando se escribe en el disco. El `Len` función usa el `VBFixedString` atributo, si está disponible, al determinar el tamaño de `Object` variables.  
  
> [!NOTE]
>  El `Len` función puede no ser capaz de determinar el número real de bytes de almacenamiento necesarios cuando se usa con cadenas de longitud variable en tipos de datos definido por el usuario.  
  
> [!NOTE]
>  El `LenB` función en versiones anteriores de Visual Basic, devuelve el número de bytes en una cadena en lugar de caracteres. Se utiliza principalmente para convertir cadenas en aplicaciones de caracteres de doble byte (DBCS). Todas las cadenas en Visual Basic actuales están en Unicode, y `LenB` ya no se admite.  
  
## <a name="smart-device-developer-notes"></a>Notas de desarrollador de dispositivos inteligentes  
 El `Len` función acepta solo `String` y `Object` variables como parámetros. Si un `Object` contiene un `String`, devolverá la longitud de la `String`. Si un parámetro es un valor NULL `Object` referencia, la función devuelve cero. Si un `Object` contiene cualquier otro tipo, se produce una excepción.  
  
   
  
## Examples  
 En este ejemplo se utiliza `Len` para devolver el número de caracteres de una cadena:  
  
 [!code-vb[VbVbalrStrings#33](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#33)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Strings.Len(System.Int16)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Len" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md">Resumen de la manipulación de cadenas</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md">Resumen de tipos de datos (Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="Len">
      <MemberSignature Language="C#" Value="public static int Len (uint Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Len(unsigned int32 Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Len(System.UInt32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Len (Expression As UInteger) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Len(System::UInt32 Expression);" />
      <MemberSignature Language="F#" Value="static member Len : uint32 -&gt; int" Usage="Microsoft.VisualBasic.Strings.Len Expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.UInt32" Index="0" FrameworkAlternate="netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="Expression">Cualquier expresión de tipo <see langword="String" /> o nombre de variable válidos. Si <paramref name="Expression" /> es del tipo <see langword="Object" />, la función <see langword="Len" /> devuelve el tamaño con el que la función <see langword="FilePut" /> escribirá en el archivo.</param>
        <summary>Devuelve un entero que contiene el número de caracteres de una cadena o el número nominal de bytes necesarios para almacenar una variable.</summary>
        <returns>Número entero que contiene el número de caracteres de una cadena o el número nominal de bytes necesarios para almacenar una variable.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Con tipos definidos por el usuario y `Object` variables, la `Len` función devuelve el tamaño que se escribirá en el archivo por el `FilePut` función. Si un `Object` contiene un `String`, devolverá la longitud de la cadena. Si un `Object` contiene cualquier otro tipo, devolverá el tamaño del objeto tal como se escribirá en el archivo por el `FilePut` función.  
  
 El `VBFixedString` atributo puede aplicarse a campos de cadena de objetos para indicar el tamaño de la cadena, en bytes, cuando se escribe en el disco. El `Len` función usa el `VBFixedString` atributo, si está disponible, al determinar el tamaño de `Object` variables.  
  
> [!NOTE]
>  El `Len` función puede no ser capaz de determinar el número real de bytes de almacenamiento necesarios cuando se usa con cadenas de longitud variable en tipos de datos definido por el usuario.  
  
> [!NOTE]
>  El `LenB` función en versiones anteriores de Visual Basic, devuelve el número de bytes en una cadena en lugar de caracteres. Se utiliza principalmente para convertir cadenas en aplicaciones de caracteres de doble byte (DBCS). Todas las cadenas en Visual Basic actuales están en Unicode, y `LenB` ya no se admite.  
  
## <a name="smart-device-developer-notes"></a>Notas de desarrollador de dispositivos inteligentes  
 El `Len` función acepta solo `String` y `Object` variables como parámetros. Si un `Object` contiene un `String`, devolverá la longitud de la `String`. Si un parámetro es un valor NULL `Object` referencia, la función devuelve cero. Si un `Object` contiene cualquier otro tipo, se produce una excepción.  
  
   
  
## Examples  
 En este ejemplo se utiliza `Len` para devolver el número de caracteres de una cadena:  
  
 [!code-vb[VbVbalrStrings#33](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#33)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Strings.Len(System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Len" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md">Resumen de la manipulación de cadenas</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md">Resumen de tipos de datos (Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="Len">
      <MemberSignature Language="C#" Value="public static int Len (ulong Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Len(unsigned int64 Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Len(System.UInt64)" />
      <MemberSignature Language="VB.NET" Value="Public Function Len (Expression As ULong) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Len(System::UInt64 Expression);" />
      <MemberSignature Language="F#" Value="static member Len : uint64 -&gt; int" Usage="Microsoft.VisualBasic.Strings.Len Expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.UInt64" Index="0" FrameworkAlternate="netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="Expression">Cualquier expresión de tipo <see langword="String" /> o nombre de variable válidos. Si <paramref name="Expression" /> es del tipo <see langword="Object" />, la función <see langword="Len" /> devuelve el tamaño con el que la función <see langword="FilePut" /> escribirá en el archivo.</param>
        <summary>Devuelve un entero que contiene el número de caracteres de una cadena o el número nominal de bytes necesarios para almacenar una variable.</summary>
        <returns>Número entero que contiene el número de caracteres de una cadena o el número nominal de bytes necesarios para almacenar una variable.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Con tipos definidos por el usuario y `Object` variables, la `Len` función devuelve el tamaño que se escribirá en el archivo por el `FilePut` función. Si un `Object` contiene un `String`, devolverá la longitud de la cadena. Si un `Object` contiene cualquier otro tipo, devolverá el tamaño del objeto tal como se escribirá en el archivo por el `FilePut` función.  
  
 El `VBFixedString` atributo puede aplicarse a campos de cadena de objetos para indicar el tamaño de la cadena, en bytes, cuando se escribe en el disco. El `Len` función usa el `VBFixedString` atributo, si está disponible, al determinar el tamaño de `Object` variables.  
  
> [!NOTE]
>  El `Len` función puede no ser capaz de determinar el número real de bytes de almacenamiento necesarios cuando se usa con cadenas de longitud variable en tipos de datos definido por el usuario.  
  
> [!NOTE]
>  El `LenB` función en versiones anteriores de Visual Basic, devuelve el número de bytes en una cadena en lugar de caracteres. Se utiliza principalmente para convertir cadenas en aplicaciones de caracteres de doble byte (DBCS). Todas las cadenas en Visual Basic actuales están en Unicode, y `LenB` ya no se admite.  
  
## <a name="smart-device-developer-notes"></a>Notas de desarrollador de dispositivos inteligentes  
 El `Len` función acepta solo `String` y `Object` variables como parámetros. Si un `Object` contiene un `String`, devolverá la longitud de la `String`. Si un parámetro es un valor NULL `Object` referencia, la función devuelve cero. Si un `Object` contiene cualquier otro tipo, se produce una excepción.  
  
   
  
## Examples  
 En este ejemplo se utiliza `Len` para devolver el número de caracteres de una cadena:  
  
 [!code-vb[VbVbalrStrings#33](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#33)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Strings.Len(System.Int64)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Len" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md">Resumen de la manipulación de cadenas</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md">Resumen de tipos de datos (Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="LSet">
      <MemberSignature Language="C#" Value="public static string LSet (string Source, int Length);" />
      <MemberSignature Language="ILAsm" Value=".method public static string LSet(string Source, int32 Length) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.LSet(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function LSet (Source As String, Length As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ LSet(System::String ^ Source, int Length);" />
      <MemberSignature Language="F#" Value="static member LSet : string * int -&gt; string" Usage="Microsoft.VisualBasic.Strings.LSet (Source, Length)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Source" Type="System.String" Index="0" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0" />
        <Parameter Name="Length" Type="System.Int32" Index="1" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0" />
      </Parameters>
      <Docs>
        <param name="Source">Obligatorio. Expresión <see langword="String" />. Nombre de variable de cadena.</param>
        <param name="Length">Obligatorio. Expresión <see langword="Integer" />. Longitud de la cadena devuelta.</param>
        <summary>Devuelve una cadena alineada a la izquierda que contiene la cadena especificada ajustada a la longitud indicada.</summary>
        <returns>Cadena alineada a la izquierda que contiene la cadena especificada ajustada a la longitud indicada.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si la cadena especificada es mayor que la longitud especificada, se acorta la cadena devuelta a la longitud especificada. Si la cadena especificada es menor que la longitud especificada, se agregan espacios en el extremo derecho de la cadena devuelta hasta alcanzar la longitud adecuada.  
  
   
  
## Examples  
 En este ejemplo se muestra el uso de la `LSet` función.  
  
 [!code-vb[VbVbalrStrings#11](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#11)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Strings.RSet(System.String,System.Int32)" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md">Resumen de la manipulación de cadenas</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md">Resumen de tipos de datos (Visual Basic)</related>
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/data-types/efficient-use-of-data-types.md">Uso eficiente de los tipos de datos</related>
      </Docs>
    </Member>
    <Member MemberName="LTrim">
      <MemberSignature Language="C#" Value="public static string LTrim (string str);" />
      <MemberSignature Language="ILAsm" Value=".method public static string LTrim(string str) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.LTrim(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function LTrim (str As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ LTrim(System::String ^ str);" />
      <MemberSignature Language="F#" Value="static member LTrim : string -&gt; string" Usage="Microsoft.VisualBasic.Strings.LTrim str" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="str" Type="System.String" Index="0" FrameworkAlternate="netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="str">Obligatorio. Cualquier expresión de <see langword="String" /> válida.</param>
        <summary>Devuelve una cadena que contiene una copia de una cadena especificada sin espacios iniciales (<see langword="LTrim" />), sin espacios finales (<see langword="RTrim" />) o sin espacios iniciales ni finales (<see langword="Trim" />).</summary>
        <returns>Cadena que contiene una copia de una cadena especificada sin espacios iniciales (<see langword="LTrim" />), sin espacios finales (<see langword="RTrim" />) o sin espacios iniciales ni finales (<see langword="Trim" />).</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El `LTrim`, `RTrim`, y `Trim` funciones quitan los espacios de los extremos de las cadenas.  
  
   
  
## Examples  
 En este ejemplo se usa la función `LTrim` para quitar los espacios iniciales y la función `RTrim` para quitar los espacios finales de una variable de cadena. También se usa la función `Trim` para quitar ambos tipos de espacios.  
  
 [!code-vb[VbVbalrStrings#25](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#25)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Trim(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.RTrim(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Left(System.String,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Right(System.String,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Space(System.Int32)" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md">Resumen de la manipulación de cadenas</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Mid">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Devuelve una cadena que contiene caracteres de una cadena especificada.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Mid">
      <MemberSignature Language="C#" Value="public static string Mid (string str, int Start);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Mid(string str, int32 Start) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Mid(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Mid (str As String, Start As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Mid(System::String ^ str, int Start);" />
      <MemberSignature Language="F#" Value="static member Mid : string * int -&gt; string" Usage="Microsoft.VisualBasic.Strings.Mid (str, Start)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="str" Type="System.String" Index="0" FrameworkAlternate="netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="Start" Type="System.Int32" Index="1" FrameworkAlternate="netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="str">Obligatorio. Expresión de tipo <see langword="String" /> de la que se devuelven caracteres.</param>
        <param name="Start">Obligatorio. Expresión <see langword="Integer" />. Posición inicial de los caracteres que se van a devolver. Si <paramref name="Start" /> es mayor que el número de caracteres de <paramref name="str" />, la función <see langword="Mid" /> devuelve una cadena de longitud cero (""). <paramref name="Start" /> se basa en uno.</param>
        <summary>Devuelve una cadena que contiene todos los caracteres a partir de la posición especificada de una cadena.</summary>
        <returns>Una cadena que consta de todos los caracteres a partir de la posición especificada en la cadena.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Para determinar el número de caracteres de `str`, utilice el `Len` función.  
  
 Visual Basic tiene un `Mid` función y un `Mid` instrucción. Estos elementos funcionan en un número especificado de caracteres en una cadena, pero la `Mid` función devuelve los caracteres mientras el `Mid` instrucción reemplaza los caracteres. Para obtener más información, consulte [Mid (instrucción)](~/docs/visual-basic/language-reference/statements/mid-statement.md).  
  
> [!NOTE]
>  El `MidB` función en las versiones anteriores de Visual Basic, devuelve una cadena en bytes, en lugar de caracteres. Se utiliza principalmente para convertir cadenas en aplicaciones de caracteres de doble byte (DBCS). Todas las cadenas en Visual Basic están en Unicode, y `MidB` ya no se admite.  
  
   
  
## Examples  
 La última línea en este ejemplo utiliza esta sobrecarga de la `Mid` función para devolver los caracteres de la quinto y posteriores de una cadena.  
  
 [!code-vb[VbVbalrStrings#17](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#17)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="Start" /> &lt;= 0 o <paramref name="Length" /> &lt; 0.</exception>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Left(System.String,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Len" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Trim(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.LTrim(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.RTrim(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Right(System.String,System.Int32)" />
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md">Resumen de la manipulación de cadenas</related>
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/index.md">Cadenas en Visual Basic</related>
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/introduction-to-strings.md">Introducción a las cadenas en Visual Basic</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/statements/mid-statement.md">Mid (Instrucción)</related>
      </Docs>
    </Member>
    <Member MemberName="Mid">
      <MemberSignature Language="C#" Value="public static string Mid (string str, int Start, int Length);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Mid(string str, int32 Start, int32 Length) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Mid(System.String,System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Mid (str As String, Start As Integer, Length As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Mid(System::String ^ str, int Start, int Length);" />
      <MemberSignature Language="F#" Value="static member Mid : string * int * int -&gt; string" Usage="Microsoft.VisualBasic.Strings.Mid (str, Start, Length)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="str" Type="System.String" Index="0" FrameworkAlternate="netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="Start" Type="System.Int32" Index="1" FrameworkAlternate="netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="Length" Type="System.Int32" Index="2" FrameworkAlternate="netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="str">Obligatorio. Expresión de tipo <see langword="String" /> de la que se devuelven caracteres.</param>
        <param name="Start">Obligatorio. Expresión <see langword="Integer" />. Posición inicial de los caracteres que se van a devolver. Si <paramref name="Start" /> es mayor que el número de caracteres de <paramref name="str" />, la función <see langword="Mid" /> devuelve una cadena de longitud cero (""). <paramref name="Start" /> se basa en uno.</param>
        <param name="Length">Opcional. Expresión <see langword="Integer" />. Número de caracteres que se van a devolver. Si se omite o si hay un número de caracteres menor que <paramref name="Length" /> en el texto (incluido el carácter situado en la posición <paramref name="Start" />), se devuelven todos los caracteres desde la posición inicial hasta la posición final de la cadena.</param>
        <summary>Devuelve una cadena que contiene un número de caracteres especificado a partir de una posición especificada de una cadena.</summary>
        <returns>Una cadena que consta del número especificado de caracteres a partir de la posición especificada en la cadena.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Para determinar el número de caracteres de `str`, utilice el `Len` función.  
  
 Visual Basic tiene un `Mid` función y un `Mid` instrucción. Estos elementos funcionan en un número especificado de caracteres en una cadena, pero la `Mid` función devuelve los caracteres mientras el `Mid` instrucción reemplaza los caracteres. Para obtener más información, consulte [Mid (instrucción)](~/docs/visual-basic/language-reference/statements/mid-statement.md).  
  
> [!NOTE]
>  El `MidB` función en las versiones anteriores de Visual Basic, devuelve una cadena en bytes, en lugar de caracteres. Se utiliza principalmente para convertir cadenas en aplicaciones de caracteres de doble byte (DBCS). Todas las cadenas en Visual Basic están en Unicode, y `MidB` ya no se admite.  
  
   
  
## Examples  
 Los dos primeros `Mid` funciones en este ejemplo devuelven el número especificado de caracteres de una cadena, empezando en la posición especificada. (Se muestra la última función la <xref:Microsoft.VisualBasic.Strings.Mid%28System.String%2CSystem.Int32%29> sobrecargan y solo se especifica el punto de partida para la extracción de cadena.)  
  
 [!code-vb[VbVbalrStrings#17](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#17)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="Start" /> &lt;= 0 o <paramref name="Length" /> &lt; 0.</exception>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Left(System.String,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Len" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Trim(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.LTrim(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.RTrim(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Right(System.String,System.Int32)" />
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md">Resumen de la manipulación de cadenas</related>
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/index.md">Cadenas en Visual Basic</related>
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/introduction-to-strings.md">Introducción a las cadenas en Visual Basic</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/statements/mid-statement.md">Mid (Instrucción)</related>
      </Docs>
    </Member>
    <Member MemberName="Replace">
      <MemberSignature Language="C#" Value="public static string Replace (string Expression, string Find, string Replacement, int Start = 1, int Count = -1, Microsoft.VisualBasic.CompareMethod Compare = Microsoft.VisualBasic.CompareMethod.Binary);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Replace(string Expression, string Find, string Replacement, int32 Start, int32 Count, valuetype Microsoft.VisualBasic.CompareMethod Compare) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Replace(System.String,System.String,System.String,System.Int32,System.Int32,Microsoft.VisualBasic.CompareMethod)" />
      <MemberSignature Language="VB.NET" Value="Public Function Replace (Expression As String, Find As String, Replacement As String, Optional Start As Integer = 1, Optional Count As Integer = -1, Optional Compare As CompareMethod = Microsoft.VisualBasic.CompareMethod.Binary) As String" />
      <MemberSignature Language="F#" Value="static member Replace : string * string * string * int * int * Microsoft.VisualBasic.CompareMethod -&gt; string" Usage="Microsoft.VisualBasic.Strings.Replace (Expression, Find, Replacement, Start, Count, Compare)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.String" Index="0" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0" />
        <Parameter Name="Find" Type="System.String" Index="1" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0" />
        <Parameter Name="Replacement" Type="System.String" Index="2" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0" />
        <Parameter Name="Start" Type="System.Int32" Index="3" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0" />
        <Parameter Name="Count" Type="System.Int32" Index="4" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0" />
        <Parameter Name="Compare" Type="Microsoft.VisualBasic.CompareMethod" Index="5" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0">
          <Attributes>
            <Attribute>
              <AttributeName>Microsoft.VisualBasic.CompilerServices.OptionCompare</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="Expression">Obligatorio. Expresión de cadena que contiene la subcadena que se va a reemplazar.</param>
        <param name="Find">Obligatorio. Subcadena que se va a buscar.</param>
        <param name="Replacement">Obligatorio. Subcadena de reemplazo.</param>
        <param name="Start">Opcional. Posición dentro de <paramref name="Expression" /> que inicia una subcadena usada para el reemplazo. El valor devuelto de <see langword="Replace" /> es una cadena que comienza en <paramref name="Start" />, con substituciones adecuadas. Si se omite, se supone que el valor es 1.</param>
        <param name="Count">Opcional. Número de reemplazos de subcadena que se van a realizar. Si se omite, el valor predeterminado es -1, lo que significa que se van a realizar todos los reemplazos posibles.</param>
        <param name="Compare">Opcional. Valor numérico que indica el tipo de comparación que se va a utilizar al evaluar subcadenas. Para obtener los valores, vea Configuración.</param>
        <summary>Devuelve una cadena en la que la subcadena especificada se reemplaza determinado número de veces por otra subcadena.</summary>
        <returns><see langword="Replace" /> devuelve los siguientes valores.  
  
 <list type="table"><item><term> Si 
 </term><description> Replace devolverá: 
 </description></item><item><term><paramref name="Find" /> es de longitud cero o <see langword="Nothing" /></term><description> Copia de <paramref name="Expression" /></description></item><item><term><paramref name="Replace" /> tiene longitud cero 
 </term><description> Copia de <paramref name="Expression" /> sin apariciones de <paramref name="Find" /></description></item><item><term><paramref name="Expression" /> es de longitud cero o <see langword="Nothing" />, o bien <paramref name="Start" /> es mayor que la longitud de <paramref name="Expression" /></term><description><see langword="Nothing" /></description></item><item><term><paramref name="Count" /> es igual a 0, 
 </term><description> Copia de <paramref name="Expression" /></description></item></list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El valor devuelto de la `Replace` función es una cadena que comienza en la posición especificada por `Start` y termina al final de la `Expression` cadena, con las sustituciones según lo especificado por el `Find` y `Replace` valores.  
  
 El `Compare` argumento puede tener los siguientes valores.  
  
|Constante|Descripción|  
|-|-|  
|`Binary`|Realiza una comparación binaria|  
|`Text`|Realiza una comparación textual|  
  
   
  
## Examples  
 Este ejemplo se muestra el `Replace` función.  
  
```vb  
Dim TestString As String = "Shopping List"  
' Returns "Shipping List".  
Dim aString As String = Replace(TestString, "o", "i")  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="Count" /> &lt; -1 o <paramref name="Start" /> &lt;= 0.</exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Filter" />
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md">Resumen de la manipulación de cadenas</related>
      </Docs>
    </Member>
    <Member MemberName="Right">
      <MemberSignature Language="C#" Value="public static string Right (string str, int Length);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Right(string str, int32 Length) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Right(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Right (str As String, Length As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Right(System::String ^ str, int Length);" />
      <MemberSignature Language="F#" Value="static member Right : string * int -&gt; string" Usage="Microsoft.VisualBasic.Strings.Right (str, Length)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="str" Type="System.String" Index="0" FrameworkAlternate="netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="Length" Type="System.Int32" Index="1" FrameworkAlternate="netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="str">Obligatorio. Expresión de tipo <see langword="String" /> de la que se devuelven los caracteres situados más a la derecha.</param>
        <param name="Length">Obligatorio. <see langword="Integer" />. Expresión numérica que indica el número de caracteres que se van a devolver. Si es 0, se devuelve una cadena de longitud cero (""). Si es mayor o igual que el número de caracteres en <paramref name="str" />, se devuelve la cadena completa.</param>
        <summary>Devuelve una cadena que contiene un número especificado de caracteres desde el lado derecho de una cadena.</summary>
        <returns>Cadena que contiene un número especificado de caracteres desde el lado derecho de una cadena.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Para determinar el número de caracteres de `str`, utilice el `Len` función. Si se utiliza en un formulario de Windows, o cualquier otra clase que tiene un `Right` propiedad, debe calificar totalmente la función con `Microsoft.VisualBasic.Strings.Right`.  
  
> [!NOTE]
>  El `RightB` función en las versiones anteriores de Visual Basic, devuelve una cadena en bytes, en lugar de caracteres. Se utiliza principalmente para convertir cadenas en aplicaciones de caracteres de doble byte (DBCS). Todas las cadenas en Visual Basic actuales están en Unicode, y `RightB` ya no se admite.  
  
   
  
## Examples  
 En este ejemplo se muestra el uso de la `Right` función para devolver una subcadena de una determinada `String`. En una clase que tiene un `Right` propiedad, puede ser necesario completar la `Right` función.  
  
 [!code-vb[VbVbalrStrings#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#21)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="Length" /> &lt; 0.</exception>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Left(System.String,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Len" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Mid" />
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md">Resumen de la manipulación de cadenas</related>
      </Docs>
    </Member>
    <Member MemberName="RSet">
      <MemberSignature Language="C#" Value="public static string RSet (string Source, int Length);" />
      <MemberSignature Language="ILAsm" Value=".method public static string RSet(string Source, int32 Length) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.RSet(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function RSet (Source As String, Length As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ RSet(System::String ^ Source, int Length);" />
      <MemberSignature Language="F#" Value="static member RSet : string * int -&gt; string" Usage="Microsoft.VisualBasic.Strings.RSet (Source, Length)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Source" Type="System.String" Index="0" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0" />
        <Parameter Name="Length" Type="System.Int32" Index="1" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0" />
      </Parameters>
      <Docs>
        <param name="Source">Obligatorio. Expresión <see langword="String" />. Nombre de variable de cadena.</param>
        <param name="Length">Obligatorio. Expresión <see langword="Integer" />. Longitud de la cadena devuelta.</param>
        <summary>Devuelve una cadena alineada a la derecha que contiene la cadena especificada y con la longitud especificada.</summary>
        <returns>Cadena alineada a la derecha que contiene la cadena especificada y con la longitud especificada.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si `Source` es mayor que `Length`, `RSet` coloca los caracteres más a la izquierda hasta alcanzar la longitud de `Source`, en la cadena devuelta. Si la cadena especificada es menor que la longitud especificada, se agregan espacios al extremo izquierdo de la cadena hasta alcanzar la longitud adecuada. Si la cadena especificada es mayor que la longitud especificada, se ha reducido a la longitud especificada.  
  
   
  
## Examples  
 En este ejemplo se muestra el uso de la `RSet` función.  
  
 [!code-vb[VbVbalrStrings#9](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#9)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Strings.LSet(System.String,System.Int32)" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md">Resumen de la manipulación de cadenas</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md">Resumen de tipos de datos (Visual Basic)</related>
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/data-types/efficient-use-of-data-types.md">Uso eficiente de los tipos de datos</related>
      </Docs>
    </Member>
    <Member MemberName="RTrim">
      <MemberSignature Language="C#" Value="public static string RTrim (string str);" />
      <MemberSignature Language="ILAsm" Value=".method public static string RTrim(string str) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.RTrim(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function RTrim (str As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ RTrim(System::String ^ str);" />
      <MemberSignature Language="F#" Value="static member RTrim : string -&gt; string" Usage="Microsoft.VisualBasic.Strings.RTrim str" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="str" Type="System.String" Index="0" FrameworkAlternate="netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="str">Obligatorio. Cualquier expresión de <see langword="String" /> válida.</param>
        <summary>Devuelve una cadena que contiene una copia de una cadena especificada sin espacios iniciales (<see langword="LTrim" />), sin espacios finales (<see langword="RTrim" />) o sin espacios iniciales ni finales (<see langword="Trim" />).</summary>
        <returns>Cadena que contiene una copia de una cadena especificada sin espacios iniciales (<see langword="LTrim" />), sin espacios finales (<see langword="RTrim" />) o sin espacios iniciales ni finales (<see langword="Trim" />).</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El `LTrim`, `RTrim`, y `Trim` funciones quitan los espacios de los extremos de las cadenas.  
  
   
  
## Examples  
 En este ejemplo se usa la función `LTrim` para quitar los espacios iniciales y la función `RTrim` para quitar los espacios finales de una variable de cadena. También se usa la función `Trim` para quitar ambos tipos de espacios.  
  
 [!code-vb[VbVbalrStrings#25](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#25)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Trim(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.LTrim(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Left(System.String,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Right(System.String,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Space(System.Int32)" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md">Resumen de la manipulación de cadenas</related>
      </Docs>
    </Member>
    <Member MemberName="Space">
      <MemberSignature Language="C#" Value="public static string Space (int Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Space(int32 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Space(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Space (Number As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Space(int Number);" />
      <MemberSignature Language="F#" Value="static member Space : int -&gt; string" Usage="Microsoft.VisualBasic.Strings.Space Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int32" Index="0" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0" />
      </Parameters>
      <Docs>
        <param name="Number">Obligatorio. Expresión <see langword="Integer" />. Número de espacios deseados en la cadena.</param>
        <summary>Devuelve una cadena que consta del número especificado de espacios.</summary>
        <returns>Cadena que consta del número especificado de espacios.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El `Space` función es útil para el formato de salida y eliminar datos de cadenas de longitud fija.  
  
   
  
## Examples  
 Este ejemplo se usa el `Space` función para devolver una cadena que consta de un número especificado de espacios.  
  
 [!code-vb[VbVbalrStrings#2](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="Number" /> &lt; 0.</exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.SPC(System.Int16)" />
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md">Resumen de la manipulación de cadenas</related>
      </Docs>
    </Member>
    <Member MemberName="Split">
      <MemberSignature Language="C#" Value="public static string[] Split (string Expression, string Delimiter = &quot; &quot;, int Limit = -1, Microsoft.VisualBasic.CompareMethod Compare = Microsoft.VisualBasic.CompareMethod.Binary);" />
      <MemberSignature Language="ILAsm" Value=".method public static string[] Split(string Expression, string Delimiter, int32 Limit, valuetype Microsoft.VisualBasic.CompareMethod Compare) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Split(System.String,System.String,System.Int32,Microsoft.VisualBasic.CompareMethod)" />
      <MemberSignature Language="VB.NET" Value="Public Function Split (Expression As String, Optional Delimiter As String = &quot; &quot;, Optional Limit As Integer = -1, Optional Compare As CompareMethod = Microsoft.VisualBasic.CompareMethod.Binary) As String()" />
      <MemberSignature Language="F#" Value="static member Split : string * string * int * Microsoft.VisualBasic.CompareMethod -&gt; string[]" Usage="Microsoft.VisualBasic.Strings.Split (Expression, Delimiter, Limit, Compare)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.String" Index="0" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0" />
        <Parameter Name="Delimiter" Type="System.String" Index="1" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0" />
        <Parameter Name="Limit" Type="System.Int32" Index="2" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0" />
        <Parameter Name="Compare" Type="Microsoft.VisualBasic.CompareMethod" Index="3" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0">
          <Attributes>
            <Attribute>
              <AttributeName>Microsoft.VisualBasic.CompilerServices.OptionCompare</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="Expression">Obligatorio. Expresión de tipo <see langword="String" /> que contiene subcadenas y delimitadores.</param>
        <param name="Delimiter">Opcional. Cualquier carácter individual que se utilice para identificar los límites de las subcadenas. Si se omite <paramref name="Delimiter" />, se supone que el carácter de espacio (" ") es el delimitador.</param>
        <param name="Limit">Opcional. Número máximo de subcadenas en las que se debe dividir la cadena de entrada. El valor predeterminado es -1, que indica que la cadena de entrada se debe dividir cada vez que aparece la cadena <paramref name="Delimiter" />.</param>
        <param name="Compare">Opcional. Valor numérico que indica la comparación que se va a utilizar al evaluar subcadenas. Consulte los valores en "Configuración".</param>
        <summary>Devuelve una matriz unidimensional basada en cero que contiene un número especificado de subcadenas.</summary>
        <returns>Matriz de tipo<see langword="String" /> . Si <paramref name="Expression" /> es una cadena de longitud cero (""), <see langword="Split" /> devuelve una matriz de un solo elemento que contiene una cadena de longitud cero. Si <paramref name="Delimiter" /> es una cadena de longitud cero o si no aparece en <paramref name="Expression" />, <see langword="Split" /> devuelve una matriz de un solo elemento que contiene toda la cadena <paramref name="Expression" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 De forma predeterminada, o cuando `Limit` es igual a -1, el `Split` función divide la cadena de entrada en todas las apariciones de la cadena de delimitador y devuelve las subcadenas en una matriz. Cuando el `Limit` parámetro es mayor que cero, el `Split` función divide la cadena en la primera `Limit`-1 apariciones del delimitador y devuelve una matriz con las subcadenas resultantes. Por ejemplo, `Split("a:b:c", ":")` devuelve la matriz `{"a", "b", "c"}`, mientras que `Split("a:b:c", ":", 2)` devuelve la matriz `{"a", "b:c"}`.  
  
 Cuando el `Split` función encuentra dos delimitadores de una fila o un delimitador al principio o al final de la cadena, interpreta como que rodean una cadena vacía (""). Por ejemplo, `Split("xx", "x")` devuelve una matriz que contiene tres cadenas vacías: uno entre el principio de la cadena y la primera "x", uno entre las dos "cadenas x" y otro entre la última "x" y el final de la cadena.  
  
 Esta tabla se muestra cómo opcional `Delimiter`, `Limit`, y `Compare` parámetros pueden cambiar el comportamiento de la `Split` función.  
  
|Llamada de división|Valor devuelto|  
|-|-|  
|`Split("42, 12, 19")`|{"42," , "12," , "19"}|  
|`Split("42, 12, 19", ", ")`|{"42", "12", "19"}|  
|`Split("42, 12, 19", ", ", 2)`|{"42", "12, 19"}|  
|`Split("192.168.0.1", ".")`|{"192", "168", "0", "1"}|  
|`Split("Alice and Bob", " AND ")`|{"Alice y Bob"}|  
|`Split("Alice and Bob", " AND ", ,CompareMethod.Text)`|{"Alice", "Cris"}|  
|`Split("someone@example.com", "@",1)`|{"someone@example.com"}|  
|`Split("someone@example.com", "@",2)`|{"someone", "example.com"}|  
  
 El `Compare` argumento puede tener los siguientes valores.  
  
|Constante|Descripción|Valor|  
|-|-|-|  
|`CompareMethod.Binary`|Realiza una comparación binaria|0|  
|`CompareMethod.Text`|Realiza una comparación textual|1|  
  
   
  
## Examples  
 El ejemplo siguiente muestra cómo dividir una cadena en los espacios.  
  
 [!code-vb[VbVbalrStrings#13](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#13)]  
  
 El ejemplo siguiente muestra cómo dividir cadenas con varios delimitadores en una fila y filtrar las cadenas vacías.  
  
 [!code-vb[VbVbalrStrings#14](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#14)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Join" />
        <altmember cref="T:Microsoft.VisualBasic.CompareMethod" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md">Resumen de la manipulación de cadenas</related>
      </Docs>
    </Member>
    <Member MemberName="StrComp">
      <MemberSignature Language="C#" Value="public static int StrComp (string String1, string String2, Microsoft.VisualBasic.CompareMethod Compare = Microsoft.VisualBasic.CompareMethod.Binary);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 StrComp(string String1, string String2, valuetype Microsoft.VisualBasic.CompareMethod Compare) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.StrComp(System.String,System.String,Microsoft.VisualBasic.CompareMethod)" />
      <MemberSignature Language="VB.NET" Value="Public Function StrComp (String1 As String, String2 As String, Optional Compare As CompareMethod = Microsoft.VisualBasic.CompareMethod.Binary) As Integer" />
      <MemberSignature Language="F#" Value="static member StrComp : string * string * Microsoft.VisualBasic.CompareMethod -&gt; int" Usage="Microsoft.VisualBasic.Strings.StrComp (String1, String2, Compare)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="String1" Type="System.String" Index="0" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0" />
        <Parameter Name="String2" Type="System.String" Index="1" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0" />
        <Parameter Name="Compare" Type="Microsoft.VisualBasic.CompareMethod" Index="2" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0">
          <Attributes>
            <Attribute>
              <AttributeName>Microsoft.VisualBasic.CompilerServices.OptionCompare</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="String1">Obligatorio. Cualquier expresión de <see langword="String" /> válida.</param>
        <param name="String2">Obligatorio. Cualquier expresión de <see langword="String" /> válida.</param>
        <param name="Compare">Opcional. Especifica el tipo de comparación de cadenas. Si se omite <paramref name="Compare" />, la configuración de <see langword="Option Compare" /> determina el tipo de comparación.</param>
        <summary>Devuelve un valor, -1, 0 ó 1, que indica el resultado de una comparación de cadena.</summary>
        <returns>La función <see langword="StrComp" /> devuelve los siguientes valores.  
  
 <list type="table"><item><term> Si 
 </term><description> StrComp devuelve 
 </description></item><item><term><paramref name="String1" /> se ordena delante de <paramref name="String2" /></term><description> -1 
 </description></item><item><term><paramref name="String1" /> es igual a <paramref name="String2" /></term><description> 0 
 </description></item><item><term><paramref name="String1" /> se ordena después de <paramref name="String2" /></term><description> 1 
 </description></item></list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Las cadenas se comparan por valores alfanuméricos empezando por el primer carácter. Para obtener más información sobre comparaciones binarias, las comparaciones de texto y criterio de ordenación, vea [instrucción Option Compare](~/docs/visual-basic/language-reference/statements/option-compare-statement.md).  
  
 La configuración del argumento `Compare` es:  
  
|Constante|Descripción|  
|-|-|  
|`Binary`|Realiza una comparación binaria, según un criterio de ordenación que se deriva de las representaciones binarias internas de los caracteres.|  
|`Text`|Realiza una comparación de texto, según un criterio de ordenación de texto de mayúsculas y minúsculas determinado por el sistema `LocaleID` valor.|  
  
   
  
## Examples  
 Este ejemplo se usa el `StrComp` función para devolver los resultados de una comparación de cadenas.  
  
 [!code-vb[VbVbalrStrings#22](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#22)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">El valor de <paramref name="Compare" /> no es válido.</exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.InStr" />
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md">Resumen de la manipulación de cadenas</related>
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/index.md">Cadenas en Visual Basic</related>
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/introduction-to-strings.md">Introducción a las cadenas en Visual Basic</related>
      </Docs>
    </Member>
    <Member MemberName="StrConv">
      <MemberSignature Language="C#" Value="public static string StrConv (string str, Microsoft.VisualBasic.VbStrConv Conversion, int LocaleID = 0);" />
      <MemberSignature Language="ILAsm" Value=".method public static string StrConv(string str, valuetype Microsoft.VisualBasic.VbStrConv Conversion, int32 LocaleID) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.StrConv(System.String,Microsoft.VisualBasic.VbStrConv,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function StrConv (str As String, Conversion As VbStrConv, Optional LocaleID As Integer = 0) As String" />
      <MemberSignature Language="F#" Value="static member StrConv : string * Microsoft.VisualBasic.VbStrConv * int -&gt; string" Usage="Microsoft.VisualBasic.Strings.StrConv (str, Conversion, LocaleID)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="str" Type="System.String" Index="0" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0" />
        <Parameter Name="Conversion" Type="Microsoft.VisualBasic.VbStrConv" Index="1" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0" />
        <Parameter Name="LocaleID" Type="System.Int32" Index="2" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0" />
      </Parameters>
      <Docs>
        <param name="str">Obligatorio. Expresión de tipo <see langword="String" /> que se va a convertir.</param>
        <param name="Conversion">Obligatorio. Miembro <see cref="T:Microsoft.VisualBasic.VbStrConv" />. Valor de enumeración que especifica el tipo de conversión que se va a realizar.</param>
        <param name="LocaleID">Opcional. Valor de <see langword="LocaleID" /> si difiere del valor de <see langword="LocaleID" /> del sistema. (El valor de <see langword="LocaleID" /> del sistema es el valor predeterminado.)</param>
        <summary>Devuelve una cadena convertida según se ha especificado.</summary>
        <returns>Cadena convertida según se ha especificado.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Las constantes `VbStrConv.Wide`, `VbStrConv.Narrow`, `VbStrConv.SimplifiedChinese`, `VbStrConv.TraditionalChinese`, `VbStrConv.Katakana`, y `VbStrConv.Hiragana` puede provocar errores de tiempo de ejecución cuando se utilizan en las configuraciones regionales que no son aplicables, pero no siempre: las constantes `VbStrConv.Katakana` y `VbStrConv.Hiragana`puede utilizarse en un sistema que no es japonés con instalado el paquete de idioma japonés. Además, el uso de las constantes `VbStrConv.Wide` y `VbStrConv.Narrow` es compatible con cualquier sistema con un idioma asiáticos orientales instalado.  
  
 Esta función usa la información de referencia cultural de la aplicación al manipular la cadena para que los cambios de mayúsculas son adecuados para la configuración regional en el que se utiliza la aplicación.  
  
> [!IMPORTANT]
>  Si la aplicación toma decisiones de seguridad en función del resultado de una comparación o la operación de cambio de mayúsculas y, a continuación, la operación debe utilizar el <xref:System.String.Compare%2A?displayProperty=nameWithType> método y pase <xref:System.StringComparison.Ordinal> o <xref:System.StringComparison.OrdinalIgnoreCase> para el `comparisonType` argumento. Para obtener más información, consulte [cómo afecta a cadenas de referencia cultural en Visual Basic](~/docs/visual-basic/programming-guide/language-features/strings/how-culture-affects-strings.md).  
  
 La configuración del argumento `Conversion` es:  
  
|Miembro de enumeración|Descripción|  
|-|-|  
|`VbStrConv.None`|No realiza ninguna conversión|  
|`VbStrConv.LinguisticCasing`|Utiliza reglas lingüísticas de mayúsculas y minúsculas, en lugar de sistema de archivos (valor predeterminado). Válido con `VbStrConv.UpperCase` y `VbStrConv.LowerCase` sólo.|  
|`VbStrConv.UpperCase`|Convierte la cadena a mayúsculas.|  
|`VbStrConv.LowerCase`|Convierte la cadena a minúsculas.|  
|`VbStrConv.ProperCase`|Convierte la primera letra de cada palabra de la cadena a mayúsculas.|  
|`VbStrConv.Wide` <sup>*</sup>|Convierte estrechos (ancho medio) de caracteres en la cadena de caracteres anchos (ancho completo). [!INCLUDE[vbstrconv-wide](~/includes/vbstrconv-wide-md.md)]|  
|`VbStrConv.Narrow` <sup>*</sup>|Convierte los caracteres anchos (dos bytes) en la cadena de caracteres estrechos (ancho medio).|  
|`VbStrConv.Katakana` <sup>**</sup>|Convierte los caracteres Hiragana de la cadena en caracteres Katakana.|  
|`VbStrConv.Hiragana` <sup>**</sup>|Convierte los caracteres Katakana de la cadena en caracteres Hiragana.|  
|`VbStrConv.SimplifiedChinese` <sup>*</sup>|Convierte caracteres de chino tradicional a chino simplificado.|  
|`VbStrConv.TraditionalChinese` <sup>*</sup>|Convierte caracteres de chino simplificado en chino tradicional.|  
  
 <sup>*</sup> Se aplica a las configuraciones regionales asiáticas.  
  
 <sup>**</sup> Solo se aplica a Japón.  
  
> [!NOTE]
>  Estas constantes se especifican en .NET Framework common language runtime. Como resultado, puede utilizarse en cualquier parte del código en lugar de los valores reales. La mayoría se puede combinar (por ejemplo, `UpperCase + Wide`), excepto cuando son mutuamente excluyentes (por ejemplo, `VbStrConv.Wide + VbStrConv.Narrow`).  
  
 Estos son los separadores de palabra válido de mayúsculas y minúsculas correctas: Null (`Chr$(0)`), tabulación horizontal (`Chr$(9)`), avance de línea (`Chr$(10)`), tabulación vertical (`Chr$(11)`), avance de página (`Chr$(12)`), retorno de carro (`Chr$(13)`), espacio (juego de caracteres de byte único) (`Chr$(32)`). El valor real de un espacio, lo que puede ser completo o medio, varía según el país o región Asia oriental.  
  
   
  
## Examples  
 En este ejemplo convierte texto en letras minúsculas.  
  
 [!code-vb[VbVbalrStrings#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#6)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="LocaleID" /> no admitido, <paramref name="Conversion" /> &lt; 0 o &gt; 2048, o conversión no admitida para la configuración regional especificada.</exception>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Chr(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.ChrW(System.Int32)" />
        <altmember cref="T:System.String" />
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md">Resumen de la manipulación de cadenas</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">Type Conversion Functions</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="StrDup">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Devuelve una cadena o un objeto que se compone del carácter especificado repetido el número de veces especificado.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="StrDup">
      <MemberSignature Language="C#" Value="public static string StrDup (int Number, char Character);" />
      <MemberSignature Language="ILAsm" Value=".method public static string StrDup(int32 Number, char Character) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.StrDup(System.Int32,System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Function StrDup (Number As Integer, Character As Char) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ StrDup(int Number, char Character);" />
      <MemberSignature Language="F#" Value="static member StrDup : int * char -&gt; string" Usage="Microsoft.VisualBasic.Strings.StrDup (Number, Character)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int32" Index="0" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0" />
        <Parameter Name="Character" Type="System.Char" Index="1" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0" />
      </Parameters>
      <Docs>
        <param name="Number">Obligatorio. Expresión <see langword="Integer" />. Longitud de la cadena que se va a devolver.</param>
        <param name="Character">Obligatorio. Cualquier expresión válida de tipo <see langword="Char" />, <see langword="String" /> u <see langword="Object" />. Se utilizará sólo el primer carácter de la expresión. Si el carácter es de tipo <see langword="Object" />, debe contener un valor de <see langword="Char" /> o de <see langword="String" />.</param>
        <summary>Devuelve una cadena o un objeto que se compone del carácter especificado repetido el número de veces especificado.</summary>
        <returns>Cadena o un objeto que se compone del carácter especificado repetido el número de veces especificado.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Esta función devuelve un `String` formada por caracteres repetidos. El carácter que conforma la cadena es el primer carácter de la `Character` se duplica el argumento y lo `Number` veces.  
  
   
  
## Examples  
 Este ejemplo se usa el `StrDup` duplicado de función para devolver una cadena de caracteres.  
  
 [!code-vb[VbVbalrStrings#34](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#34)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="Number" /> es menor que 0 o el tipo <paramref name="Character" /> no es válido.</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="Character" /> es <see langword="Nothing" />.</exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.SPC(System.Int16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md">Resumen de la manipulación de cadenas</related>
      </Docs>
    </Member>
    <Member MemberName="StrDup">
      <MemberSignature Language="C#" Value="public static object StrDup (int Number, object Character);" />
      <MemberSignature Language="ILAsm" Value=".method public static object StrDup(int32 Number, object Character) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.StrDup(System.Int32,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function StrDup (Number As Integer, Character As Object) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ StrDup(int Number, System::Object ^ Character);" />
      <MemberSignature Language="F#" Value="static member StrDup : int * obj -&gt; obj" Usage="Microsoft.VisualBasic.Strings.StrDup (Number, Character)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int32" Index="0" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0" />
        <Parameter Name="Character" Type="System.Object" Index="1" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0" />
      </Parameters>
      <Docs>
        <param name="Number">Obligatorio. Expresión <see langword="Integer" />. Longitud de la cadena que se va a devolver.</param>
        <param name="Character">Obligatorio. Cualquier expresión válida de tipo <see langword="Char" />, <see langword="String" /> u <see langword="Object" />. Se utilizará sólo el primer carácter de la expresión. Si el carácter es de tipo <see langword="Object" />, debe contener un valor de <see langword="Char" /> o de <see langword="String" />.</param>
        <summary>Devuelve una cadena o un objeto que se compone del carácter especificado repetido el número de veces especificado.</summary>
        <returns>Cadena o un objeto que se compone del carácter especificado repetido el número de veces especificado.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Esta función devuelve un `String` formada por caracteres repetidos. El carácter que conforma la cadena es el primer carácter de la `Character` se duplica el argumento y lo `Number` veces.  
  
   
  
## Examples  
 Este ejemplo se usa el `StrDup` duplicado de función para devolver una cadena de caracteres.  
  
 [!code-vb[VbVbalrStrings#34](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#34)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="Number" /> es menor que 0 o el tipo <paramref name="Character" /> no es válido.</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="Character" /> es <see langword="Nothing" />.</exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.SPC(System.Int16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md">Resumen de la manipulación de cadenas</related>
      </Docs>
    </Member>
    <Member MemberName="StrDup">
      <MemberSignature Language="C#" Value="public static string StrDup (int Number, string Character);" />
      <MemberSignature Language="ILAsm" Value=".method public static string StrDup(int32 Number, string Character) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.StrDup(System.Int32,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function StrDup (Number As Integer, Character As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ StrDup(int Number, System::String ^ Character);" />
      <MemberSignature Language="F#" Value="static member StrDup : int * string -&gt; string" Usage="Microsoft.VisualBasic.Strings.StrDup (Number, Character)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int32" Index="0" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0" />
        <Parameter Name="Character" Type="System.String" Index="1" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0" />
      </Parameters>
      <Docs>
        <param name="Number">Obligatorio. Expresión <see langword="Integer" />. Longitud de la cadena que se va a devolver.</param>
        <param name="Character">Obligatorio. Cualquier expresión válida de tipo <see langword="Char" />, <see langword="String" /> u <see langword="Object" />. Se utilizará sólo el primer carácter de la expresión. Si el carácter es de tipo <see langword="Object" />, debe contener un valor de <see langword="Char" /> o de <see langword="String" />.</param>
        <summary>Devuelve una cadena o un objeto que se compone del carácter especificado repetido el número de veces especificado.</summary>
        <returns>Cadena o un objeto que se compone del carácter especificado repetido el número de veces especificado.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Esta función devuelve un `String` formada por caracteres repetidos. El carácter que conforma la cadena es el primer carácter de la `Character` se duplica el argumento y lo `Number` veces.  
  
   
  
## Examples  
 Este ejemplo se usa el `StrDup` duplicado de función para devolver una cadena de caracteres.  
  
 [!code-vb[VbVbalrStrings#34](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#34)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="Number" /> es menor que 0 o el tipo <paramref name="Character" /> no es válido.</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="Character" /> es <see langword="Nothing" />.</exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.SPC(System.Int16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md">Resumen de la manipulación de cadenas</related>
      </Docs>
    </Member>
    <Member MemberName="StrReverse">
      <MemberSignature Language="C#" Value="public static string StrReverse (string Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static string StrReverse(string Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.StrReverse(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function StrReverse (Expression As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ StrReverse(System::String ^ Expression);" />
      <MemberSignature Language="F#" Value="static member StrReverse : string -&gt; string" Usage="Microsoft.VisualBasic.Strings.StrReverse Expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.String" Index="0" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0" />
      </Parameters>
      <Docs>
        <param name="Expression">Obligatorio. Expresión de cadena cuyos caracteres se van a invertir. Si <paramref name="Expression" /> es una cadena de longitud cero (""), se devuelve una cadena de longitud cero.</param>
        <summary>Devuelve una cadena en la que se invierte el orden de los caracteres de la cadena especificada.</summary>
        <returns>Cadena en la que se invierte el orden de los caracteres de la cadena especificada.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El `StrReverse` función devuelve una cadena que contiene los mismos caracteres que `Expression`, pero en orden inverso.  
  
   
  
## Examples  
 [!code-vb[VbVbalrStrings#29](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#29)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Strings.InStrRev(System.String,System.String,System.Int32,Microsoft.VisualBasic.CompareMethod)" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md">Resumen de la manipulación de cadenas</related>
      </Docs>
    </Member>
    <Member MemberName="Trim">
      <MemberSignature Language="C#" Value="public static string Trim (string str);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Trim(string str) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Trim(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function Trim (str As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Trim(System::String ^ str);" />
      <MemberSignature Language="F#" Value="static member Trim : string -&gt; string" Usage="Microsoft.VisualBasic.Strings.Trim str" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="str" Type="System.String" Index="0" FrameworkAlternate="netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="str">Obligatorio. Cualquier expresión de <see langword="String" /> válida.</param>
        <summary>Devuelve una cadena que contiene una copia de una cadena especificada sin espacios iniciales (<see langword="LTrim" />), sin espacios finales (<see langword="RTrim" />) o sin espacios iniciales ni finales (<see langword="Trim" />).</summary>
        <returns>Cadena que contiene una copia de una cadena especificada sin espacios iniciales (<see langword="LTrim" />), sin espacios finales (<see langword="RTrim" />) o sin espacios iniciales ni finales (<see langword="Trim" />).</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El `LTrim`, `RTrim`, y `Trim` funciones quitan los espacios de los extremos de las cadenas.  
  
   
  
## Examples  
 En este ejemplo se usa la función `LTrim` para quitar los espacios iniciales y la función `RTrim` para quitar los espacios finales de una variable de cadena. También se usa la función `Trim` para quitar ambos tipos de espacios.  
  
 [!code-vb[VbVbalrStrings#25](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#25)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Strings.RTrim(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.LTrim(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Left(System.String,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Right(System.String,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Space(System.Int32)" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md">Resumen de la manipulación de cadenas</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="UCase">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Devuelve una cadena o un carácter que contiene la cadena especificada convertida en mayúsculas.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="UCase">
      <MemberSignature Language="C#" Value="public static char UCase (char Value);" />
      <MemberSignature Language="ILAsm" Value=".method public static char UCase(char Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.UCase(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Function UCase (Value As Char) As Char" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static char UCase(char Value);" />
      <MemberSignature Language="F#" Value="static member UCase : char -&gt; char" Usage="Microsoft.VisualBasic.Strings.UCase Value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Value" Type="System.Char" Index="0" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0" />
      </Parameters>
      <Docs>
        <param name="Value">Obligatorio. Cualquier expresión válida de tipo <see langword="String" /> o <see langword="Char" />.</param>
        <summary>Devuelve una cadena o un carácter que contiene la cadena especificada convertida en mayúsculas.</summary>
        <returns>Cadena o un carácter que contiene la cadena especificada convertida en mayúsculas.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Solo letras minúsculas se convierten a mayúsculas; todas las letras en mayúscula y los caracteres permanecen sin cambios.  
  
 Esta función usa la información de referencia cultural de la aplicación al manipular la cadena para que los cambios de mayúsculas son adecuados para la configuración regional en el que se utiliza la aplicación.  
  
> [!IMPORTANT]
>  Si la aplicación toma decisiones de seguridad en función del resultado de una comparación o la operación de cambio de mayúsculas y, a continuación, la operación debe utilizar el <xref:System.String.Compare%2A?displayProperty=nameWithType> método y pase <xref:System.StringComparison.Ordinal> o <xref:System.StringComparison.OrdinalIgnoreCase> para el `comparisonType` argumento. Para obtener más información, consulte [cómo afecta a cadenas de referencia cultural en Visual Basic](~/docs/visual-basic/programming-guide/language-features/strings/how-culture-affects-strings.md).  
  
   
  
## Examples  
 En este ejemplo se utiliza la función `UCase` para devolver la versión en mayúsculas de una cadena.  
  
 [!code-vb[VbVbalrStrings#31](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#31)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.LCase" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md">Resumen de la manipulación de cadenas</related>
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/index.md">Cadenas en Visual Basic</related>
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/introduction-to-strings.md">Introducción a las cadenas en Visual Basic</related>
      </Docs>
    </Member>
    <Member MemberName="UCase">
      <MemberSignature Language="C#" Value="public static string UCase (string Value);" />
      <MemberSignature Language="ILAsm" Value=".method public static string UCase(string Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.UCase(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function UCase (Value As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ UCase(System::String ^ Value);" />
      <MemberSignature Language="F#" Value="static member UCase : string -&gt; string" Usage="Microsoft.VisualBasic.Strings.UCase Value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Value" Type="System.String" Index="0" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0" />
      </Parameters>
      <Docs>
        <param name="Value">Obligatorio. Cualquier expresión válida de tipo <see langword="String" /> o <see langword="Char" />.</param>
        <summary>Devuelve una cadena o un carácter que contiene la cadena especificada convertida en mayúsculas.</summary>
        <returns>Cadena o un carácter que contiene la cadena especificada convertida en mayúsculas.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Solo letras minúsculas se convierten a mayúsculas; todas las letras en mayúscula y los caracteres permanecen sin cambios.  
  
 Esta función usa la información de referencia cultural de la aplicación al manipular la cadena para que los cambios de mayúsculas son adecuados para la configuración regional en el que se utiliza la aplicación.  
  
> [!IMPORTANT]
>  Si la aplicación toma decisiones de seguridad en función del resultado de una comparación o la operación de cambio de mayúsculas y, a continuación, la operación debe utilizar el <xref:System.String.Compare%2A?displayProperty=nameWithType> método y pase <xref:System.StringComparison.Ordinal> o <xref:System.StringComparison.OrdinalIgnoreCase> para el `comparisonType` argumento. Para obtener más información, consulte [cómo afecta a cadenas de referencia cultural en Visual Basic](~/docs/visual-basic/programming-guide/language-features/strings/how-culture-affects-strings.md).  
  
   
  
## Examples  
 En este ejemplo se utiliza la función `UCase` para devolver la versión en mayúsculas de una cadena.  
  
 [!code-vb[VbVbalrStrings#31](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#31)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.LCase" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md">Resumen de la manipulación de cadenas</related>
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/index.md">Cadenas en Visual Basic</related>
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/introduction-to-strings.md">Introducción a las cadenas en Visual Basic</related>
      </Docs>
    </Member>
  </Members>
</Type>