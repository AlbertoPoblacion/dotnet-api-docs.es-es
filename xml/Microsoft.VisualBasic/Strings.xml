<Type Name="Strings" FullName="Microsoft.VisualBasic.Strings">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="db4fae13571ff6b7294ab82426f23ca45d4ba9ec" />
    <Meta Name="ms.sourcegitcommit" Value="5a49536d99d2d0b54e4cb7280870903e043272df" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="es-ES" />
    <Meta Name="ms.lasthandoff" Value="07/03/2018" />
    <Meta Name="ms.locfileid" Value="37710589" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class Strings" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit Strings extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.VisualBasic.Strings" />
  <TypeSignature Language="VB.NET" Value="Public Module Strings" />
  <TypeSignature Language="C++ CLI" Value="public ref class Strings sealed" />
  <TypeSignature Language="F#" Value="type Strings = class" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.VisualBasic</AssemblyName>
    <AssemblyVersion>7.0.5000.0</AssemblyVersion>
    <AssemblyVersion>8.0.0.0</AssemblyVersion>
    <AssemblyVersion>10.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>Microsoft.VisualBasic.CompilerServices.StandardModule</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <span data-ttu-id="267d1-101">The <see langword="Strings" /> module contains procedures used to perform string operations.</span>
      <span class="sxs-lookup">
        <span data-stu-id="267d1-101">The <see langword="Strings" /> module contains procedures used to perform string operations.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="267d1-102">Este módulo admite las palabras clave del lenguaje Visual Basic y miembros de la biblioteca de tiempo de ejecución que manipulan cadenas.</span><span class="sxs-lookup"><span data-stu-id="267d1-102">This module supports the Visual Basic language keywords and run-time library members that manipulate strings.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="267d1-103">El ejemplo siguiente muestra cómo dividir una cadena en los espacios.</span><span class="sxs-lookup"><span data-stu-id="267d1-103">The following example demonstrates how to split a string at its spaces.</span></span>  
  
 [!code-vb[VbVbalrStrings#13](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#13)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName="Asc">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="267d1-104">Returns an <see langword="Integer" /> value representing the character code corresponding to a character.</span>
          <span class="sxs-lookup">
            <span data-stu-id="267d1-104">Returns an <see langword="Integer" /> value representing the character code corresponding to a character.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Asc">
      <MemberSignature Language="C#" Value="public static int Asc (char String);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Asc(char String) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Asc(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Function Asc (String As Char) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Asc(char String);" />
      <MemberSignature Language="F#" Value="static member Asc : char -&gt; int" Usage="Microsoft.VisualBasic.Strings.Asc String" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="String" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="String">
          <span data-ttu-id="267d1-105">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="267d1-105">Required.</span>
          </span>
          <span data-ttu-id="267d1-106">Any valid <see langword="Char" /> or <see langword="String" /> expression.</span>
          <span class="sxs-lookup">
            <span data-stu-id="267d1-106">Any valid <see langword="Char" /> or <see langword="String" /> expression.</span>
          </span>
          <span data-ttu-id="267d1-107">If <c>String</c> is a <see langword="String" /> expression, only the first character of the string is used for input.</span>
          <span class="sxs-lookup">
            <span data-stu-id="267d1-107">If <c>String</c> is a <see langword="String" /> expression, only the first character of the string is used for input.</span>
          </span>
          <span data-ttu-id="267d1-108">If <c>String</c> is <see langword="Nothing" /> or contains no characters, an <see cref="T:System.ArgumentException" /> error occurs.</span>
          <span class="sxs-lookup">
            <span data-stu-id="267d1-108">If <c>String</c> is <see langword="Nothing" /> or contains no characters, an <see cref="T:System.ArgumentException" /> error occurs.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="267d1-109">Returns an <see langword="Integer" /> value representing the character code corresponding to a character.</span>
          <span class="sxs-lookup">
            <span data-stu-id="267d1-109">Returns an <see langword="Integer" /> value representing the character code corresponding to a character.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="267d1-110">Returns an <see langword="Integer" /> value representing the character code corresponding to a character.</span>
          <span class="sxs-lookup">
            <span data-stu-id="267d1-110">Returns an <see langword="Integer" /> value representing the character code corresponding to a character.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="267d1-111">`Asc` Devuelve el *punto de código*, o el código para el carácter de entrada.</span><span class="sxs-lookup"><span data-stu-id="267d1-111">`Asc` returns the *code point*, or character code, for the input character.</span></span> <span data-ttu-id="267d1-112">Esto puede ser 0 a 255 para los valores de caracteres de byte único (SBCS) del conjunto y entre -32768 y 32767 para los valores de caracteres de doble byte (DBCS) del conjunto.</span><span class="sxs-lookup"><span data-stu-id="267d1-112">This can be 0 through 255 for single-byte character set (SBCS) values and -32768 through 32767 for double-byte character set (DBCS) values.</span></span>  
  
 <span data-ttu-id="267d1-113">`AscW` Devuelve el punto de código Unicode del carácter de entrada.</span><span class="sxs-lookup"><span data-stu-id="267d1-113">`AscW` returns the Unicode code point for the input character.</span></span> <span data-ttu-id="267d1-114">Esto puede ser entre 0 y 65535.</span><span class="sxs-lookup"><span data-stu-id="267d1-114">This can be 0 through 65535.</span></span> <span data-ttu-id="267d1-115">El valor devuelto es independiente de la configuración de página de código y de referencia cultural del subproceso actual.</span><span class="sxs-lookup"><span data-stu-id="267d1-115">The returned value is independent of the culture and code page settings for the current thread.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="267d1-116">El `AscB` función de las versiones anteriores de Visual Basic devuelve un código para un byte, en lugar de un carácter.</span><span class="sxs-lookup"><span data-stu-id="267d1-116">The `AscB` function of earlier versions of Visual Basic returns a code for a byte, rather than a character.</span></span> <span data-ttu-id="267d1-117">Se utiliza principalmente para convertir cadenas en aplicaciones de caracteres de doble byte (DBCS).</span><span class="sxs-lookup"><span data-stu-id="267d1-117">It is used primarily for converting strings in double-byte character set (DBCS) applications.</span></span> <span data-ttu-id="267d1-118">Todas las cadenas de Visual Basic 2005 están en Unicode, y `AscB` ya no se admite.</span><span class="sxs-lookup"><span data-stu-id="267d1-118">All Visual Basic 2005 strings are in Unicode, and `AscB` is no longer supported.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="267d1-119">En el ejemplo siguiente se usa el `Asc` función devuelva `Integer` códigos correspondientes a la primera letra de cada cadena de caracteres.</span><span class="sxs-lookup"><span data-stu-id="267d1-119">The following example uses the `Asc` function to return `Integer` character codes corresponding to the first letter in each string.</span></span>  
  
 [!code-vb[VbVbalrFunctions#19](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#19)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Chr(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.ChrW(System.Int32)" />
        <altmember cref="N:System.Globalization" />
        <altmember cref="T:System.Globalization.CultureInfo" />
        <altmember cref="P:System.Globalization.TextInfo.ANSICodePage" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <Member MemberName="Asc">
      <MemberSignature Language="C#" Value="public static int Asc (string String);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Asc(string String) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Asc(System.String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Asc(System::String ^ String);" />
      <MemberSignature Language="F#" Value="static member Asc : string -&gt; int" Usage="Microsoft.VisualBasic.Strings.Asc String" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="String" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="String">
          <span data-ttu-id="267d1-120">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="267d1-120">Required.</span>
          </span>
          <span data-ttu-id="267d1-121">Any valid <see langword="Char" /> or <see langword="String" /> expression.</span>
          <span class="sxs-lookup">
            <span data-stu-id="267d1-121">Any valid <see langword="Char" /> or <see langword="String" /> expression.</span>
          </span>
          <span data-ttu-id="267d1-122">If <c>String</c> is a <see langword="String" /> expression, only the first character of the string is used for input.</span>
          <span class="sxs-lookup">
            <span data-stu-id="267d1-122">If <c>String</c> is a <see langword="String" /> expression, only the first character of the string is used for input.</span>
          </span>
          <span data-ttu-id="267d1-123">If <c>String</c> is <see langword="Nothing" /> or contains no characters, an <see cref="T:System.ArgumentException" /> error occurs.</span>
          <span class="sxs-lookup">
            <span data-stu-id="267d1-123">If <c>String</c> is <see langword="Nothing" /> or contains no characters, an <see cref="T:System.ArgumentException" /> error occurs.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="267d1-124">Returns an <see langword="Integer" /> value representing the character code corresponding to a character.</span>
          <span class="sxs-lookup">
            <span data-stu-id="267d1-124">Returns an <see langword="Integer" /> value representing the character code corresponding to a character.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="267d1-125">Returns an <see langword="Integer" /> value representing the character code corresponding to a character.</span>
          <span class="sxs-lookup">
            <span data-stu-id="267d1-125">Returns an <see langword="Integer" /> value representing the character code corresponding to a character.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="267d1-126">`Asc` Devuelve el *punto de código*, o el código para el carácter de entrada.</span><span class="sxs-lookup"><span data-stu-id="267d1-126">`Asc` returns the *code point*, or character code, for the input character.</span></span> <span data-ttu-id="267d1-127">Esto puede ser 0 a 255 para los valores de caracteres de byte único (SBCS) del conjunto y entre -32768 y 32767 para los valores de caracteres de doble byte (DBCS) del conjunto.</span><span class="sxs-lookup"><span data-stu-id="267d1-127">This can be 0 through 255 for single-byte character set (SBCS) values and -32768 through 32767 for double-byte character set (DBCS) values.</span></span>  
  
 <span data-ttu-id="267d1-128">`AscW` Devuelve el punto de código Unicode del carácter de entrada.</span><span class="sxs-lookup"><span data-stu-id="267d1-128">`AscW` returns the Unicode code point for the input character.</span></span> <span data-ttu-id="267d1-129">Esto puede ser entre 0 y 65535.</span><span class="sxs-lookup"><span data-stu-id="267d1-129">This can be 0 through 65535.</span></span> <span data-ttu-id="267d1-130">El valor devuelto es independiente de la configuración de página de código y de referencia cultural del subproceso actual.</span><span class="sxs-lookup"><span data-stu-id="267d1-130">The returned value is independent of the culture and code page settings for the current thread.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="267d1-131">El `AscB` función de las versiones anteriores de Visual Basic devuelve un código para un byte, en lugar de un carácter.</span><span class="sxs-lookup"><span data-stu-id="267d1-131">The `AscB` function of earlier versions of Visual Basic returns a code for a byte, rather than a character.</span></span> <span data-ttu-id="267d1-132">Se utiliza principalmente para convertir cadenas en aplicaciones de caracteres de doble byte (DBCS).</span><span class="sxs-lookup"><span data-stu-id="267d1-132">It is used primarily for converting strings in double-byte character set (DBCS) applications.</span></span> <span data-ttu-id="267d1-133">Todas las cadenas de Visual Basic 2005 están en Unicode, y `AscB` ya no se admite.</span><span class="sxs-lookup"><span data-stu-id="267d1-133">All Visual Basic 2005 strings are in Unicode, and `AscB` is no longer supported.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="267d1-134">En el ejemplo siguiente se usa el `Asc` función devuelva `Integer` códigos correspondientes a la primera letra de cada cadena de caracteres.</span><span class="sxs-lookup"><span data-stu-id="267d1-134">The following example uses the `Asc` function to return `Integer` character codes corresponding to the first letter in each string.</span></span>  
  
 [!code-vb[VbVbalrFunctions#19](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#19)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Chr(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.ChrW(System.Int32)" />
        <altmember cref="N:System.Globalization" />
        <altmember cref="T:System.Globalization.CultureInfo" />
        <altmember cref="P:System.Globalization.TextInfo.ANSICodePage" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <MemberGroup MemberName="AscW">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="267d1-135">Returns an <see langword="Integer" /> value representing the character code corresponding to a character.</span>
          <span class="sxs-lookup">
            <span data-stu-id="267d1-135">Returns an <see langword="Integer" /> value representing the character code corresponding to a character.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="AscW">
      <MemberSignature Language="C#" Value="public static int AscW (char String);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 AscW(char String) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.AscW(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Function AscW (String As Char) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int AscW(char String);" />
      <MemberSignature Language="F#" Value="static member AscW : char -&gt; int" Usage="Microsoft.VisualBasic.Strings.AscW String" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="String" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="String">
          <span data-ttu-id="267d1-136">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="267d1-136">Required.</span>
          </span>
          <span data-ttu-id="267d1-137">Any valid <see langword="Char" /> or <see langword="String" /> expression.</span>
          <span class="sxs-lookup">
            <span data-stu-id="267d1-137">Any valid <see langword="Char" /> or <see langword="String" /> expression.</span>
          </span>
          <span data-ttu-id="267d1-138">If <c>String</c> is a <see langword="String" /> expression, only the first character of the string is used for input.</span>
          <span class="sxs-lookup">
            <span data-stu-id="267d1-138">If <c>String</c> is a <see langword="String" /> expression, only the first character of the string is used for input.</span>
          </span>
          <span data-ttu-id="267d1-139">If <c>String</c> is <see langword="Nothing" /> or contains no characters, an <see cref="T:System.ArgumentException" /> error occurs.</span>
          <span class="sxs-lookup">
            <span data-stu-id="267d1-139">If <c>String</c> is <see langword="Nothing" /> or contains no characters, an <see cref="T:System.ArgumentException" /> error occurs.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="267d1-140">Returns an <see langword="Integer" /> value representing the character code corresponding to a character.</span>
          <span class="sxs-lookup">
            <span data-stu-id="267d1-140">Returns an <see langword="Integer" /> value representing the character code corresponding to a character.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="267d1-141">Returns an <see langword="Integer" /> value representing the character code corresponding to a character.</span>
          <span class="sxs-lookup">
            <span data-stu-id="267d1-141">Returns an <see langword="Integer" /> value representing the character code corresponding to a character.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="267d1-142">`Asc` Devuelve el *punto de código*, o el código para el carácter de entrada.</span><span class="sxs-lookup"><span data-stu-id="267d1-142">`Asc` returns the *code point*, or character code, for the input character.</span></span> <span data-ttu-id="267d1-143">Esto puede ser 0 a 255 para los valores de caracteres de byte único (SBCS) del conjunto y entre -32768 y 32767 para los valores de caracteres de doble byte (DBCS) del conjunto.</span><span class="sxs-lookup"><span data-stu-id="267d1-143">This can be 0 through 255 for single-byte character set (SBCS) values and -32768 through 32767 for double-byte character set (DBCS) values.</span></span>  
  
 <span data-ttu-id="267d1-144">`AscW` Devuelve el punto de código Unicode del carácter de entrada.</span><span class="sxs-lookup"><span data-stu-id="267d1-144">`AscW` returns the Unicode code point for the input character.</span></span> <span data-ttu-id="267d1-145">Esto puede ser entre 0 y 65535.</span><span class="sxs-lookup"><span data-stu-id="267d1-145">This can be 0 through 65535.</span></span> <span data-ttu-id="267d1-146">El valor devuelto es independiente de la configuración de página de código y de referencia cultural del subproceso actual.</span><span class="sxs-lookup"><span data-stu-id="267d1-146">The returned value is independent of the culture and code page settings for the current thread.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="267d1-147">El `AscB` función de las versiones anteriores de Visual Basic devuelve un código para un byte, en lugar de un carácter.</span><span class="sxs-lookup"><span data-stu-id="267d1-147">The `AscB` function of earlier versions of Visual Basic returns a code for a byte, rather than a character.</span></span> <span data-ttu-id="267d1-148">Se utiliza principalmente para convertir cadenas en aplicaciones de caracteres de doble byte (DBCS).</span><span class="sxs-lookup"><span data-stu-id="267d1-148">It is used primarily for converting strings in double-byte character set (DBCS) applications.</span></span> <span data-ttu-id="267d1-149">Todas las cadenas de Visual Basic 2005 están en Unicode, y `AscB` ya no se admite.</span><span class="sxs-lookup"><span data-stu-id="267d1-149">All Visual Basic 2005 strings are in Unicode, and `AscB` is no longer supported.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="267d1-150">En el ejemplo siguiente se usa el `Asc` función devuelva `Integer` códigos correspondientes a la primera letra de cada cadena de caracteres.</span><span class="sxs-lookup"><span data-stu-id="267d1-150">The following example uses the `Asc` function to return `Integer` character codes corresponding to the first letter in each string.</span></span>  
  
 [!code-vb[VbVbalrFunctions#19](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#19)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Chr(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.ChrW(System.Int32)" />
        <altmember cref="N:System.Globalization" />
        <altmember cref="T:System.Globalization.CultureInfo" />
        <altmember cref="P:System.Globalization.TextInfo.ANSICodePage" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <Member MemberName="AscW">
      <MemberSignature Language="C#" Value="public static int AscW (string String);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 AscW(string String) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.AscW(System.String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int AscW(System::String ^ String);" />
      <MemberSignature Language="F#" Value="static member AscW : string -&gt; int" Usage="Microsoft.VisualBasic.Strings.AscW String" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="String" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="String">
          <span data-ttu-id="267d1-151">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="267d1-151">Required.</span>
          </span>
          <span data-ttu-id="267d1-152">Any valid <see langword="Char" /> or <see langword="String" /> expression.</span>
          <span class="sxs-lookup">
            <span data-stu-id="267d1-152">Any valid <see langword="Char" /> or <see langword="String" /> expression.</span>
          </span>
          <span data-ttu-id="267d1-153">If <c>String</c> is a <see langword="String" /> expression, only the first character of the string is used for input.</span>
          <span class="sxs-lookup">
            <span data-stu-id="267d1-153">If <c>String</c> is a <see langword="String" /> expression, only the first character of the string is used for input.</span>
          </span>
          <span data-ttu-id="267d1-154">If <c>String</c> is <see langword="Nothing" /> or contains no characters, an <see cref="T:System.ArgumentException" /> error occurs.</span>
          <span class="sxs-lookup">
            <span data-stu-id="267d1-154">If <c>String</c> is <see langword="Nothing" /> or contains no characters, an <see cref="T:System.ArgumentException" /> error occurs.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="267d1-155">Returns an <see langword="Integer" /> value representing the character code corresponding to a character.</span>
          <span class="sxs-lookup">
            <span data-stu-id="267d1-155">Returns an <see langword="Integer" /> value representing the character code corresponding to a character.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="267d1-156">Returns an <see langword="Integer" /> value representing the character code corresponding to a character.</span>
          <span class="sxs-lookup">
            <span data-stu-id="267d1-156">Returns an <see langword="Integer" /> value representing the character code corresponding to a character.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="267d1-157">`Asc` Devuelve el *punto de código*, o el código para el carácter de entrada.</span><span class="sxs-lookup"><span data-stu-id="267d1-157">`Asc` returns the *code point*, or character code, for the input character.</span></span> <span data-ttu-id="267d1-158">Esto puede ser 0 a 255 para los valores de caracteres de byte único (SBCS) del conjunto y entre -32768 y 32767 para los valores de caracteres de doble byte (DBCS) del conjunto.</span><span class="sxs-lookup"><span data-stu-id="267d1-158">This can be 0 through 255 for single-byte character set (SBCS) values and -32768 through 32767 for double-byte character set (DBCS) values.</span></span>  
  
 <span data-ttu-id="267d1-159">`AscW` Devuelve el punto de código Unicode del carácter de entrada.</span><span class="sxs-lookup"><span data-stu-id="267d1-159">`AscW` returns the Unicode code point for the input character.</span></span> <span data-ttu-id="267d1-160">Esto puede ser entre 0 y 65535.</span><span class="sxs-lookup"><span data-stu-id="267d1-160">This can be 0 through 65535.</span></span> <span data-ttu-id="267d1-161">El valor devuelto es independiente de la configuración de página de código y de referencia cultural del subproceso actual.</span><span class="sxs-lookup"><span data-stu-id="267d1-161">The returned value is independent of the culture and code page settings for the current thread.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="267d1-162">El `AscB` función de las versiones anteriores de Visual Basic devuelve un código para un byte, en lugar de un carácter.</span><span class="sxs-lookup"><span data-stu-id="267d1-162">The `AscB` function of earlier versions of Visual Basic returns a code for a byte, rather than a character.</span></span> <span data-ttu-id="267d1-163">Se utiliza principalmente para convertir cadenas en aplicaciones de caracteres de doble byte (DBCS).</span><span class="sxs-lookup"><span data-stu-id="267d1-163">It is used primarily for converting strings in double-byte character set (DBCS) applications.</span></span> <span data-ttu-id="267d1-164">Todas las cadenas de Visual Basic 2005 están en Unicode, y `AscB` ya no se admite.</span><span class="sxs-lookup"><span data-stu-id="267d1-164">All Visual Basic 2005 strings are in Unicode, and `AscB` is no longer supported.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="267d1-165">En el ejemplo siguiente se usa el `Asc` función devuelva `Integer` códigos correspondientes a la primera letra de cada cadena de caracteres.</span><span class="sxs-lookup"><span data-stu-id="267d1-165">The following example uses the `Asc` function to return `Integer` character codes corresponding to the first letter in each string.</span></span>  
  
 [!code-vb[VbVbalrFunctions#19](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#19)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Chr(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.ChrW(System.Int32)" />
        <altmember cref="N:System.Globalization" />
        <altmember cref="T:System.Globalization.CultureInfo" />
        <altmember cref="P:System.Globalization.TextInfo.ANSICodePage" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <Member MemberName="Chr">
      <MemberSignature Language="C#" Value="public static char Chr (int CharCode);" />
      <MemberSignature Language="ILAsm" Value=".method public static char Chr(int32 CharCode) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Chr(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Chr (CharCode As Integer) As Char" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static char Chr(int CharCode);" />
      <MemberSignature Language="F#" Value="static member Chr : int -&gt; char" Usage="Microsoft.VisualBasic.Strings.Chr CharCode" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="CharCode" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="CharCode">
          <span data-ttu-id="267d1-166">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="267d1-166">Required.</span>
          </span>
          <span data-ttu-id="267d1-167">An <see langword="Integer" /> expression representing the <c>code point</c>, or character code, for the character.</span>
          <span class="sxs-lookup">
            <span data-stu-id="267d1-167">An <see langword="Integer" /> expression representing the <c>code point</c>, or character code, for the character.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="267d1-168">Returns the character associated with the specified character code.</span>
          <span class="sxs-lookup">
            <span data-stu-id="267d1-168">Returns the character associated with the specified character code.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="267d1-169">Returns the character associated with the specified character code.</span>
          <span class="sxs-lookup">
            <span data-stu-id="267d1-169">Returns the character associated with the specified character code.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="267d1-170">El intervalo asimétrico aceptado para `CharCode` compensa las diferencias de almacenamiento entre el `Short` y `Integer`.</span><span class="sxs-lookup"><span data-stu-id="267d1-170">The asymmetric range accepted for `CharCode` compensates for the storage differences between the `Short` and the `Integer`.</span></span> <span data-ttu-id="267d1-171">Por ejemplo, -29183 es un `Short` pero + 36353 es un `Integer`.</span><span class="sxs-lookup"><span data-stu-id="267d1-171">For example, -29183 is a `Short` but +36353 is an `Integer`.</span></span> <span data-ttu-id="267d1-172">Esto también facilita la compatibilidad con Visual Basic 6.0.</span><span class="sxs-lookup"><span data-stu-id="267d1-172">This also facilitates compatibility with Visual Basic 6.0.</span></span>  
  
 <span data-ttu-id="267d1-173">`Chr` usa el <xref:System.Text.Encoding> clase en el <xref:System.Text?displayProperty=nameWithType> establecido de espacio de nombres para determinar si el subproceso actual está utilizando un juego de caracteres de byte único (SBCS) o un carácter de doble byte (DBCS).</span><span class="sxs-lookup"><span data-stu-id="267d1-173">`Chr` uses the <xref:System.Text.Encoding> class in the <xref:System.Text?displayProperty=nameWithType> namespace to determine if the current thread is using a single-byte character set (SBCS) or a double-byte character set (DBCS).</span></span> <span data-ttu-id="267d1-174">Luego toma `CharCode` como un código de punto en el conjunto adecuado.</span><span class="sxs-lookup"><span data-stu-id="267d1-174">It then takes `CharCode` as a code point in the appropriate set.</span></span> <span data-ttu-id="267d1-175">El intervalo puede ser de 0 a 255 caracteres SBCS y entre -32768 y 65535 para los caracteres DBCS.</span><span class="sxs-lookup"><span data-stu-id="267d1-175">The range can be 0 through 255 for SBCS characters and -32768 through 65535 for DBCS characters.</span></span>  
  
 <span data-ttu-id="267d1-176">El valor devuelto depende de la página de códigos para el subproceso actual, que se encuentra en la <xref:System.Globalization.TextInfo.ANSICodePage%2A> propiedad de la <xref:System.Globalization.TextInfo> clase en el <xref:System.Globalization> espacio de nombres.</span><span class="sxs-lookup"><span data-stu-id="267d1-176">The returned value depends on the code page for the current thread, which is contained in the <xref:System.Globalization.TextInfo.ANSICodePage%2A> property of the <xref:System.Globalization.TextInfo> class in the <xref:System.Globalization> namespace.</span></span> <span data-ttu-id="267d1-177">Puede obtener <xref:System.Globalization.TextInfo.ANSICodePage%2A> especificando `System.Globalization.CultureInfo.CurrentCulture.TextInfo.ANSICodePage`.</span><span class="sxs-lookup"><span data-stu-id="267d1-177">You can obtain <xref:System.Globalization.TextInfo.ANSICodePage%2A> by specifying `System.Globalization.CultureInfo.CurrentCulture.TextInfo.ANSICodePage`.</span></span>  
  
 <span data-ttu-id="267d1-178">`ChrW` toma `CharCode` punto de código como Unicode.</span><span class="sxs-lookup"><span data-stu-id="267d1-178">`ChrW` takes `CharCode` as a Unicode code point.</span></span> <span data-ttu-id="267d1-179">El intervalo es independiente de la configuración de página de código y de referencia cultural del subproceso actual.</span><span class="sxs-lookup"><span data-stu-id="267d1-179">The range is independent of the culture and code page settings for the current thread.</span></span> <span data-ttu-id="267d1-180">Los valores de -32768 al-1 tratan igual como valores comprendidos entre + 32768 y + 65535.</span><span class="sxs-lookup"><span data-stu-id="267d1-180">Values from -32768 through -1 are treated the same as values in the range +32768 through +65535.</span></span>  
  
 <span data-ttu-id="267d1-181">Números del 0 al 31 son los mismos que los códigos ASCII no imprimibles estándar.</span><span class="sxs-lookup"><span data-stu-id="267d1-181">Numbers from 0 through 31 are the same as standard nonprintable ASCII codes.</span></span> <span data-ttu-id="267d1-182">Por ejemplo, `Chr(10)` devuelve un salto de línea.</span><span class="sxs-lookup"><span data-stu-id="267d1-182">For example, `Chr(10)` returns a line feed character.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="267d1-183">El `ChrB` función en las versiones anteriores de Visual Basic devuelve un solo byte.</span><span class="sxs-lookup"><span data-stu-id="267d1-183">The `ChrB` function in earlier versions of Visual Basic returns a single byte.</span></span> <span data-ttu-id="267d1-184">Se utiliza principalmente para convertir cadenas en aplicaciones de caracteres de doble byte (DBCS).</span><span class="sxs-lookup"><span data-stu-id="267d1-184">It is used primarily for converting strings in double-byte character set (DBCS) applications.</span></span> <span data-ttu-id="267d1-185">Todas las cadenas en Visual Basic y .NET Framework están en formato Unicode, y `ChrB` ya no se admite.</span><span class="sxs-lookup"><span data-stu-id="267d1-185">All strings in Visual Basic and the .NET Framework are in Unicode, and `ChrB` is no longer supported.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="267d1-186">En el ejemplo siguiente se usa el `Chr` función para devolver el carácter asociado con el código de carácter especificado.</span><span class="sxs-lookup"><span data-stu-id="267d1-186">The following example uses the `Chr` function to return the character associated with the specified character code.</span></span>  
  
 [!code-vb[VbVbalrStrings#7](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#7)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="267d1-187">
            <paramref name="CharCode" /> &lt; 0 or &gt; 255 for <see langword="Chr" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="267d1-187">
              <paramref name="CharCode" /> &lt; 0 or &gt; 255 for <see langword="Chr" />.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.Strings.ChrW(System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Asc" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.AscW" />
        <altmember cref="M:Microsoft.VisualBasic.Conversion.Str(System.Object)" />
        <altmember cref="T:System.Globalization.CultureInfo" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <Member MemberName="ChrW">
      <MemberSignature Language="C#" Value="public static char ChrW (int CharCode);" />
      <MemberSignature Language="ILAsm" Value=".method public static char ChrW(int32 CharCode) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.ChrW(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function ChrW (CharCode As Integer) As Char" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static char ChrW(int CharCode);" />
      <MemberSignature Language="F#" Value="static member ChrW : int -&gt; char" Usage="Microsoft.VisualBasic.Strings.ChrW CharCode" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="CharCode" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="CharCode">
          <span data-ttu-id="267d1-188">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="267d1-188">Required.</span>
          </span>
          <span data-ttu-id="267d1-189">An <see langword="Integer" /> expression representing the <c>code point</c>, or character code, for the character.</span>
          <span class="sxs-lookup">
            <span data-stu-id="267d1-189">An <see langword="Integer" /> expression representing the <c>code point</c>, or character code, for the character.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="267d1-190">Returns the character associated with the specified character code.</span>
          <span class="sxs-lookup">
            <span data-stu-id="267d1-190">Returns the character associated with the specified character code.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="267d1-191">Returns the character associated with the specified character code.</span>
          <span class="sxs-lookup">
            <span data-stu-id="267d1-191">Returns the character associated with the specified character code.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="267d1-192">El intervalo asimétrico aceptado para `CharCode` compensa las diferencias de almacenamiento entre el `Short` y `Integer`.</span><span class="sxs-lookup"><span data-stu-id="267d1-192">The asymmetric range accepted for `CharCode` compensates for the storage differences between the `Short` and the `Integer`.</span></span> <span data-ttu-id="267d1-193">Por ejemplo, -29183 es un `Short` pero + 36353 es un `Integer`.</span><span class="sxs-lookup"><span data-stu-id="267d1-193">For example, -29183 is a `Short` but +36353 is an `Integer`.</span></span> <span data-ttu-id="267d1-194">Esto también facilita la compatibilidad con Visual Basic 6.0.</span><span class="sxs-lookup"><span data-stu-id="267d1-194">This also facilitates compatibility with Visual Basic 6.0.</span></span>  
  
 <span data-ttu-id="267d1-195">`Chr` usa el <xref:System.Text.Encoding> clase en el <xref:System.Text?displayProperty=nameWithType> establecido de espacio de nombres para determinar si el subproceso actual está utilizando un juego de caracteres de byte único (SBCS) o un carácter de doble byte (DBCS).</span><span class="sxs-lookup"><span data-stu-id="267d1-195">`Chr` uses the <xref:System.Text.Encoding> class in the <xref:System.Text?displayProperty=nameWithType> namespace to determine if the current thread is using a single-byte character set (SBCS) or a double-byte character set (DBCS).</span></span> <span data-ttu-id="267d1-196">Luego toma `CharCode` como un código de punto en el conjunto adecuado.</span><span class="sxs-lookup"><span data-stu-id="267d1-196">It then takes `CharCode` as a code point in the appropriate set.</span></span> <span data-ttu-id="267d1-197">El intervalo puede ser de 0 a 255 caracteres SBCS y entre -32768 y 65535 para los caracteres DBCS.</span><span class="sxs-lookup"><span data-stu-id="267d1-197">The range can be 0 through 255 for SBCS characters and -32768 through 65535 for DBCS characters.</span></span>  
  
 <span data-ttu-id="267d1-198">El valor devuelto depende de la página de códigos para el subproceso actual, que se encuentra en la <xref:System.Globalization.TextInfo.ANSICodePage%2A> propiedad de la <xref:System.Globalization.TextInfo> clase en el <xref:System.Globalization> espacio de nombres.</span><span class="sxs-lookup"><span data-stu-id="267d1-198">The returned value depends on the code page for the current thread, which is contained in the <xref:System.Globalization.TextInfo.ANSICodePage%2A> property of the <xref:System.Globalization.TextInfo> class in the <xref:System.Globalization> namespace.</span></span> <span data-ttu-id="267d1-199">Puede obtener <xref:System.Globalization.TextInfo.ANSICodePage%2A> especificando `System.Globalization.CultureInfo.CurrentCulture.TextInfo.ANSICodePage`.</span><span class="sxs-lookup"><span data-stu-id="267d1-199">You can obtain <xref:System.Globalization.TextInfo.ANSICodePage%2A> by specifying `System.Globalization.CultureInfo.CurrentCulture.TextInfo.ANSICodePage`.</span></span>  
  
 <span data-ttu-id="267d1-200">`ChrW` toma `CharCode` punto de código como Unicode.</span><span class="sxs-lookup"><span data-stu-id="267d1-200">`ChrW` takes `CharCode` as a Unicode code point.</span></span> <span data-ttu-id="267d1-201">El intervalo es independiente de la configuración de página de código y de referencia cultural del subproceso actual.</span><span class="sxs-lookup"><span data-stu-id="267d1-201">The range is independent of the culture and code page settings for the current thread.</span></span> <span data-ttu-id="267d1-202">Los valores de -32768 al-1 tratan igual como valores comprendidos entre + 32768 y + 65535.</span><span class="sxs-lookup"><span data-stu-id="267d1-202">Values from -32768 through -1 are treated the same as values in the range +32768 through +65535.</span></span>  
  
 <span data-ttu-id="267d1-203">Números del 0 al 31 son los mismos que los códigos ASCII no imprimibles estándar.</span><span class="sxs-lookup"><span data-stu-id="267d1-203">Numbers from 0 through 31 are the same as standard nonprintable ASCII codes.</span></span> <span data-ttu-id="267d1-204">Por ejemplo, `Chr(10)` devuelve un salto de línea.</span><span class="sxs-lookup"><span data-stu-id="267d1-204">For example, `Chr(10)` returns a line feed character.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="267d1-205">El `ChrB` función en las versiones anteriores de Visual Basic devuelve un solo byte.</span><span class="sxs-lookup"><span data-stu-id="267d1-205">The `ChrB` function in earlier versions of Visual Basic returns a single byte.</span></span> <span data-ttu-id="267d1-206">Se utiliza principalmente para convertir cadenas en aplicaciones de caracteres de doble byte (DBCS).</span><span class="sxs-lookup"><span data-stu-id="267d1-206">It is used primarily for converting strings in double-byte character set (DBCS) applications.</span></span> <span data-ttu-id="267d1-207">Todas las cadenas en Visual Basic y .NET Framework están en formato Unicode, y `ChrB` ya no se admite.</span><span class="sxs-lookup"><span data-stu-id="267d1-207">All strings in Visual Basic and the .NET Framework are in Unicode, and `ChrB` is no longer supported.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="267d1-208">En el ejemplo siguiente se usa el `Chr` función para devolver el carácter asociado con el código de carácter especificado.</span><span class="sxs-lookup"><span data-stu-id="267d1-208">The following example uses the `Chr` function to return the character associated with the specified character code.</span></span>  
  
 [!code-vb[VbVbalrStrings#7](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#7)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="267d1-209">
            <paramref name="CharCode" /> &lt; -32768 or &gt; 65535 for <see langword="ChrW" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="267d1-209">
              <paramref name="CharCode" /> &lt; -32768 or &gt; 65535 for <see langword="ChrW" />.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Chr(System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Asc" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.AscW" />
        <altmember cref="M:Microsoft.VisualBasic.Conversion.Str(System.Object)" />
        <altmember cref="T:System.Globalization.CultureInfo" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Filter">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="267d1-210">Returns a zero-based array containing a subset of a <see langword="String" /> array based on specified filter criteria.</span>
          <span class="sxs-lookup">
            <span data-stu-id="267d1-210">Returns a zero-based array containing a subset of a <see langword="String" /> array based on specified filter criteria.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Filter">
      <MemberSignature Language="C#" Value="public static string[] Filter (object[] Source, string Match, bool Include = true, Microsoft.VisualBasic.CompareMethod Compare = Microsoft.VisualBasic.CompareMethod.Binary);" />
      <MemberSignature Language="ILAsm" Value=".method public static string[] Filter(object[] Source, string Match, bool Include, valuetype Microsoft.VisualBasic.CompareMethod Compare) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Filter(System.Object[],System.String,System.Boolean,Microsoft.VisualBasic.CompareMethod)" />
      <MemberSignature Language="VB.NET" Value="Public Function Filter (Source As Object(), Match As String, Optional Include As Boolean = true, Optional Compare As CompareMethod = Microsoft.VisualBasic.CompareMethod.Binary) As String()" />
      <MemberSignature Language="F#" Value="static member Filter : obj[] * string * bool * Microsoft.VisualBasic.CompareMethod -&gt; string[]" Usage="Microsoft.VisualBasic.Strings.Filter (Source, Match, Include, Compare)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Source" Type="System.Object[]" />
        <Parameter Name="Match" Type="System.String" />
        <Parameter Name="Include" Type="System.Boolean" />
        <Parameter Name="Compare" Type="Microsoft.VisualBasic.CompareMethod">
          <Attributes>
            <Attribute>
              <AttributeName>Microsoft.VisualBasic.CompilerServices.OptionCompare</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="Source">
          <span data-ttu-id="267d1-211">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="267d1-211">Required.</span>
          </span>
          <span data-ttu-id="267d1-212">One-dimensional array of strings to be searched.</span>
          <span class="sxs-lookup">
            <span data-stu-id="267d1-212">One-dimensional array of strings to be searched.</span>
          </span>
        </param>
        <param name="Match">
          <span data-ttu-id="267d1-213">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="267d1-213">Required.</span>
          </span>
          <span data-ttu-id="267d1-214">String to search for.</span>
          <span class="sxs-lookup">
            <span data-stu-id="267d1-214">String to search for.</span>
          </span>
        </param>
        <param name="Include">
          <span data-ttu-id="267d1-215">Optional.</span>
          <span class="sxs-lookup">
            <span data-stu-id="267d1-215">Optional.</span>
          </span>
          <span data-ttu-id="267d1-216">
            <see langword="Boolean" /> value indicating whether to return substrings that include or exclude <c>Match</c>.</span>
          <span class="sxs-lookup">
            <span data-stu-id="267d1-216">
              <see langword="Boolean" /> value indicating whether to return substrings that include or exclude <c>Match</c>.</span>
          </span>
          <span data-ttu-id="267d1-217">If <c>Include</c> is <see langword="True" />, the <see langword="Filter" /> function returns the subset of the array that contains <c>Match</c> as a substring.</span>
          <span class="sxs-lookup">
            <span data-stu-id="267d1-217">If <c>Include</c> is <see langword="True" />, the <see langword="Filter" /> function returns the subset of the array that contains <c>Match</c> as a substring.</span>
          </span>
          <span data-ttu-id="267d1-218">If <c>Include</c> is <see langword="False" />, the <see langword="Filter" /> function returns the subset of the array that does not contain <c>Match</c> as a substring.</span>
          <span class="sxs-lookup">
            <span data-stu-id="267d1-218">If <c>Include</c> is <see langword="False" />, the <see langword="Filter" /> function returns the subset of the array that does not contain <c>Match</c> as a substring.</span>
          </span>
        </param>
        <param name="Compare">
          <span data-ttu-id="267d1-219">Optional.</span>
          <span class="sxs-lookup">
            <span data-stu-id="267d1-219">Optional.</span>
          </span>
          <span data-ttu-id="267d1-220">Numeric value indicating the kind of string comparison to use.</span>
          <span class="sxs-lookup">
            <span data-stu-id="267d1-220">Numeric value indicating the kind of string comparison to use.</span>
          </span>
          <span data-ttu-id="267d1-221">See "Settings" for values.</span>
          <span class="sxs-lookup">
            <span data-stu-id="267d1-221">See "Settings" for values.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="267d1-222">Returns a zero-based array containing a subset of a <see langword="String" /> array based on specified filter criteria.</span>
          <span class="sxs-lookup">
            <span data-stu-id="267d1-222">Returns a zero-based array containing a subset of a <see langword="String" /> array based on specified filter criteria.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="267d1-223">Returns a zero-based array containing a subset of a <see langword="String" /> array based on specified filter criteria.</span>
          <span class="sxs-lookup">
            <span data-stu-id="267d1-223">Returns a zero-based array containing a subset of a <see langword="String" /> array based on specified filter criteria.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="267d1-224">Si no hay coincidencias de `Match` se encuentran dentro de `Source`, el `Filter` función devuelve una matriz vacía.</span><span class="sxs-lookup"><span data-stu-id="267d1-224">If no matches of `Match` are found within `Source`, the `Filter` function returns an empty array.</span></span> <span data-ttu-id="267d1-225">Se produce un error si `Source` está establecido en `Nothing` o no es una matriz unidimensional.</span><span class="sxs-lookup"><span data-stu-id="267d1-225">An error occurs if `Source` is set to `Nothing` or is not a one-dimensional array.</span></span>  
  
 <span data-ttu-id="267d1-226">La matriz devuelta por la `Filter` función contiene únicamente los elementos suficientes para contener el número de elementos coincidentes.</span><span class="sxs-lookup"><span data-stu-id="267d1-226">The array returned by the `Filter` function contains only enough elements to contain the number of matched items.</span></span>  
  
 <span data-ttu-id="267d1-227">El `Compare` argumento puede tener los siguientes valores.</span><span class="sxs-lookup"><span data-stu-id="267d1-227">The `Compare` argument can have the following values.</span></span>  
  
|<span data-ttu-id="267d1-228">Constante</span><span class="sxs-lookup"><span data-stu-id="267d1-228">Constant</span></span>|<span data-ttu-id="267d1-229">Descripción</span><span class="sxs-lookup"><span data-stu-id="267d1-229">Description</span></span>|  
|-|-|  
|<span data-ttu-id="267d1-230">Constante</span><span class="sxs-lookup"><span data-stu-id="267d1-230">Constant</span></span>|<span data-ttu-id="267d1-231">Descripción</span><span class="sxs-lookup"><span data-stu-id="267d1-231">Description</span></span>|  
|`CompareMethod.Binary`|<span data-ttu-id="267d1-232">Realiza una comparación binaria</span><span class="sxs-lookup"><span data-stu-id="267d1-232">Performs a binary comparison</span></span>|  
|`CompareMethod.Text`|<span data-ttu-id="267d1-233">Realiza una comparación textual</span><span class="sxs-lookup"><span data-stu-id="267d1-233">Performs a textual comparison</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="267d1-234">En este ejemplo se muestra el uso de la `Filter` función.</span><span class="sxs-lookup"><span data-stu-id="267d1-234">This example demonstrates the use of the `Filter` function.</span></span>  
  
 [!code-vb[VbVbalrStrings#24](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#24)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="267d1-235">
            <paramref name="Source" /> is <see langword="Nothing" /> or is not a one-dimensional array.</span>
          <span class="sxs-lookup">
            <span data-stu-id="267d1-235">
              <paramref name="Source" /> is <see langword="Nothing" /> or is not a one-dimensional array.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Replace(System.String,System.String,System.String,System.Int32,System.Int32,Microsoft.VisualBasic.CompareMethod)" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <Member MemberName="Filter">
      <MemberSignature Language="C#" Value="public static string[] Filter (string[] Source, string Match, bool Include = true, Microsoft.VisualBasic.CompareMethod Compare = Microsoft.VisualBasic.CompareMethod.Binary);" />
      <MemberSignature Language="ILAsm" Value=".method public static string[] Filter(string[] Source, string Match, bool Include, valuetype Microsoft.VisualBasic.CompareMethod Compare) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Filter(System.String[],System.String,System.Boolean,Microsoft.VisualBasic.CompareMethod)" />
      <MemberSignature Language="VB.NET" Value="Public Function Filter (Source As String(), Match As String, Optional Include As Boolean = true, Optional Compare As CompareMethod = Microsoft.VisualBasic.CompareMethod.Binary) As String()" />
      <MemberSignature Language="F#" Value="static member Filter : string[] * string * bool * Microsoft.VisualBasic.CompareMethod -&gt; string[]" Usage="Microsoft.VisualBasic.Strings.Filter (Source, Match, Include, Compare)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Source" Type="System.String[]" />
        <Parameter Name="Match" Type="System.String" />
        <Parameter Name="Include" Type="System.Boolean" />
        <Parameter Name="Compare" Type="Microsoft.VisualBasic.CompareMethod">
          <Attributes>
            <Attribute>
              <AttributeName>Microsoft.VisualBasic.CompilerServices.OptionCompare</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="Source">
          <span data-ttu-id="267d1-236">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="267d1-236">Required.</span>
          </span>
          <span data-ttu-id="267d1-237">One-dimensional array of strings to be searched.</span>
          <span class="sxs-lookup">
            <span data-stu-id="267d1-237">One-dimensional array of strings to be searched.</span>
          </span>
        </param>
        <param name="Match">
          <span data-ttu-id="267d1-238">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="267d1-238">Required.</span>
          </span>
          <span data-ttu-id="267d1-239">String to search for.</span>
          <span class="sxs-lookup">
            <span data-stu-id="267d1-239">String to search for.</span>
          </span>
        </param>
        <param name="Include">
          <span data-ttu-id="267d1-240">Optional.</span>
          <span class="sxs-lookup">
            <span data-stu-id="267d1-240">Optional.</span>
          </span>
          <span data-ttu-id="267d1-241">
            <see langword="Boolean" /> value indicating whether to return substrings that include or exclude <c>Match</c>.</span>
          <span class="sxs-lookup">
            <span data-stu-id="267d1-241">
              <see langword="Boolean" /> value indicating whether to return substrings that include or exclude <c>Match</c>.</span>
          </span>
          <span data-ttu-id="267d1-242">If <c>Include</c> is <see langword="True" />, the <see langword="Filter" /> function returns the subset of the array that contains <c>Match</c> as a substring.</span>
          <span class="sxs-lookup">
            <span data-stu-id="267d1-242">If <c>Include</c> is <see langword="True" />, the <see langword="Filter" /> function returns the subset of the array that contains <c>Match</c> as a substring.</span>
          </span>
          <span data-ttu-id="267d1-243">If <c>Include</c> is <see langword="False" />, the <see langword="Filter" /> function returns the subset of the array that does not contain <c>Match</c> as a substring.</span>
          <span class="sxs-lookup">
            <span data-stu-id="267d1-243">If <c>Include</c> is <see langword="False" />, the <see langword="Filter" /> function returns the subset of the array that does not contain <c>Match</c> as a substring.</span>
          </span>
        </param>
        <param name="Compare">
          <span data-ttu-id="267d1-244">Optional.</span>
          <span class="sxs-lookup">
            <span data-stu-id="267d1-244">Optional.</span>
          </span>
          <span data-ttu-id="267d1-245">Numeric value indicating the kind of string comparison to use.</span>
          <span class="sxs-lookup">
            <span data-stu-id="267d1-245">Numeric value indicating the kind of string comparison to use.</span>
          </span>
          <span data-ttu-id="267d1-246">See "Settings" for values.</span>
          <span class="sxs-lookup">
            <span data-stu-id="267d1-246">See "Settings" for values.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="267d1-247">Returns a zero-based array containing a subset of a <see langword="String" /> array based on specified filter criteria.</span>
          <span class="sxs-lookup">
            <span data-stu-id="267d1-247">Returns a zero-based array containing a subset of a <see langword="String" /> array based on specified filter criteria.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="267d1-248">Returns a zero-based array containing a subset of a <see langword="String" /> array based on specified filter criteria.</span>
          <span class="sxs-lookup">
            <span data-stu-id="267d1-248">Returns a zero-based array containing a subset of a <see langword="String" /> array based on specified filter criteria.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="267d1-249">Si no hay coincidencias de `Match` se encuentran dentro de `Source`, el `Filter` función devuelve una matriz vacía.</span><span class="sxs-lookup"><span data-stu-id="267d1-249">If no matches of `Match` are found within `Source`, the `Filter` function returns an empty array.</span></span> <span data-ttu-id="267d1-250">Se produce un error si `Source` está establecido en `Nothing` o no es una matriz unidimensional.</span><span class="sxs-lookup"><span data-stu-id="267d1-250">An error occurs if `Source` is set to `Nothing` or is not a one-dimensional array.</span></span>  
  
 <span data-ttu-id="267d1-251">La matriz devuelta por la `Filter` función contiene únicamente los elementos suficientes para contener el número de elementos coincidentes.</span><span class="sxs-lookup"><span data-stu-id="267d1-251">The array returned by the `Filter` function contains only enough elements to contain the number of matched items.</span></span>  
  
 <span data-ttu-id="267d1-252">El `Compare` argumento puede tener los siguientes valores.</span><span class="sxs-lookup"><span data-stu-id="267d1-252">The `Compare` argument can have the following values.</span></span>  
  
|<span data-ttu-id="267d1-253">Constante</span><span class="sxs-lookup"><span data-stu-id="267d1-253">Constant</span></span>|<span data-ttu-id="267d1-254">Descripción</span><span class="sxs-lookup"><span data-stu-id="267d1-254">Description</span></span>|  
|-|-|  
|`CompareMethod.Binary`|<span data-ttu-id="267d1-255">Realiza una comparación binaria</span><span class="sxs-lookup"><span data-stu-id="267d1-255">Performs a binary comparison</span></span>|  
|`CompareMethod.Text`|<span data-ttu-id="267d1-256">Realiza una comparación textual</span><span class="sxs-lookup"><span data-stu-id="267d1-256">Performs a textual comparison</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="267d1-257">En este ejemplo se muestra el uso de la `Filter` función.</span><span class="sxs-lookup"><span data-stu-id="267d1-257">This example demonstrates the use of the `Filter` function.</span></span>  
  
 [!code-vb[VbVbalrStrings#24](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#24)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="267d1-258">
            <paramref name="Source" /> is <see langword="Nothing" /> or is not a one-dimensional array.</span>
          <span class="sxs-lookup">
            <span data-stu-id="267d1-258">
              <paramref name="Source" /> is <see langword="Nothing" /> or is not a one-dimensional array.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Replace(System.String,System.String,System.String,System.Int32,System.Int32,Microsoft.VisualBasic.CompareMethod)" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <Member MemberName="Format">
      <MemberSignature Language="C#" Value="public static string Format (object Expression, string Style = &quot;&quot;);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Format(object Expression, string Style) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Format(System.Object,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function Format (Expression As Object, Optional Style As String = &quot;&quot;) As String" />
      <MemberSignature Language="F#" Value="static member Format : obj * string -&gt; string" Usage="Microsoft.VisualBasic.Strings.Format (Expression, Style)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Object" />
        <Parameter Name="Style" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="Expression">
          <span data-ttu-id="267d1-259">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="267d1-259">Required.</span>
          </span>
          <span data-ttu-id="267d1-260">Any valid expression.</span>
          <span class="sxs-lookup">
            <span data-stu-id="267d1-260">Any valid expression.</span>
          </span>
        </param>
        <param name="Style">
          <span data-ttu-id="267d1-261">Optional.</span>
          <span class="sxs-lookup">
            <span data-stu-id="267d1-261">Optional.</span>
          </span>
          <span data-ttu-id="267d1-262">A valid named or user-defined format <see langword="String" /> expression.</span>
          <span class="sxs-lookup">
            <span data-stu-id="267d1-262">A valid named or user-defined format <see langword="String" /> expression.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="267d1-263">Returns a string formatted according to instructions contained in a format <see langword="String" /> expression.</span>
          <span class="sxs-lookup">
            <span data-stu-id="267d1-263">Returns a string formatted according to instructions contained in a format <see langword="String" /> expression.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="267d1-264">Returns a string formatted according to instructions contained in a format <see langword="String" /> expression.</span>
          <span class="sxs-lookup">
            <span data-stu-id="267d1-264">Returns a string formatted according to instructions contained in a format <see langword="String" /> expression.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="267d1-265">El <xref:System.String.Format%2A?displayProperty=nameWithType> método también proporciona una funcionalidad similar.</span><span class="sxs-lookup"><span data-stu-id="267d1-265">The <xref:System.String.Format%2A?displayProperty=nameWithType> method also provides similar functionality.</span></span>  
  
 <span data-ttu-id="267d1-266">Si se da formato a una cadena numérica no localizada, debe usar un formato numérico definido por el usuario para garantizar que tiene el aspecto deseado.</span><span class="sxs-lookup"><span data-stu-id="267d1-266">If you are formatting a nonlocalized numeric string, you should use a user-defined numeric format to ensure that you get the look you want.</span></span>  
  
 <span data-ttu-id="267d1-267">Si se intenta dar formato a un número sin especificar `Style`, `Format` función proporciona una funcionalidad similar a la `Str` funcione, aunque es compatible con todo el mundo.</span><span class="sxs-lookup"><span data-stu-id="267d1-267">If you try to format a number without specifying `Style`, the `Format` function provides functionality similar to the `Str` function, although it is internationally aware.</span></span> <span data-ttu-id="267d1-268">Sin embargo, los números positivos con formato de cadena utilizando el `Format` función no incluya un espacio inicial reservado para el signo del valor; los que se convierten usando el `Str` función conservar el espacio inicial.</span><span class="sxs-lookup"><span data-stu-id="267d1-268">However, positive numbers formatted as strings using the `Format` function don't include a leading space reserved for the sign of the value; those converted using the `Str` function retain the leading space.</span></span>  
  
## <a name="different-formats-for-different-numeric-values"></a><span data-ttu-id="267d1-269">Formatos distintos para diferentes valores numéricos</span><span class="sxs-lookup"><span data-stu-id="267d1-269">Different Formats for Different Numeric Values</span></span>  
 <span data-ttu-id="267d1-270">Una expresión de formato definido por el usuario para números puede tener de uno a tres secciones separadas por punto y coma.</span><span class="sxs-lookup"><span data-stu-id="267d1-270">A user-defined format expression for numbers can have from one to three sections separated by semicolons.</span></span> <span data-ttu-id="267d1-271">Si el `Style` argumento de la `Format` función contiene uno de los formatos numéricos predefinidos, se permite solo una sección.</span><span class="sxs-lookup"><span data-stu-id="267d1-271">If the `Style` argument of the `Format` function contains one of the predefined numeric formats, only one section is allowed.</span></span>  
  
|<span data-ttu-id="267d1-272">Si usa</span><span class="sxs-lookup"><span data-stu-id="267d1-272">If you use</span></span>|<span data-ttu-id="267d1-273">Éste es el resultado</span><span class="sxs-lookup"><span data-stu-id="267d1-273">This is the result</span></span>|  
|-|-|  
|<span data-ttu-id="267d1-274">Solo una sección</span><span class="sxs-lookup"><span data-stu-id="267d1-274">One section only</span></span>|<span data-ttu-id="267d1-275">La expresión de formato se aplica a todos los valores.</span><span class="sxs-lookup"><span data-stu-id="267d1-275">The format expression applies to all values.</span></span>|  
|<span data-ttu-id="267d1-276">Dos secciones</span><span class="sxs-lookup"><span data-stu-id="267d1-276">Two sections</span></span>|<span data-ttu-id="267d1-277">La primera sección se aplica a valores positivos y ceros; el segundo se aplica a valores negativos.</span><span class="sxs-lookup"><span data-stu-id="267d1-277">The first section applies to positive values and zeros; the second applies to negative values.</span></span>|  
|<span data-ttu-id="267d1-278">Tres secciones.</span><span class="sxs-lookup"><span data-stu-id="267d1-278">Three sections</span></span>|<span data-ttu-id="267d1-279">La primera sección se aplica a valores positivos, la segunda se aplica a valores negativos y la tercera se aplica a los ceros.</span><span class="sxs-lookup"><span data-stu-id="267d1-279">The first section applies to positive values, the second applies to negative values, and the third applies to zeros.</span></span>|  
  
 <span data-ttu-id="267d1-280">El siguiente ejemplo tiene dos secciones: la primera define el formato para valores positivos y ceros; la segunda sección define el formato para los valores negativos.</span><span class="sxs-lookup"><span data-stu-id="267d1-280">The following example has two sections: the first defines the format for positive values and zeros; the second section defines the format for negative values.</span></span> <span data-ttu-id="267d1-281">Puesto que la `Style` argumento de la `Format` función toma una cadena, se encierra entre comillas.</span><span class="sxs-lookup"><span data-stu-id="267d1-281">Since the `Style` argument of the `Format` function takes a string, it is enclosed by quotation marks.</span></span>  
  
 [!code-vb[VbVbalrStrings#18](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#18)]  
  
 <span data-ttu-id="267d1-282">Si incluye un punto y coma sin nada entre ellos, la sección que falta se imprime con el formato de los valores positivos.</span><span class="sxs-lookup"><span data-stu-id="267d1-282">If you include semicolons with nothing between them, the missing section is printed using the format of the positive value.</span></span> <span data-ttu-id="267d1-283">Por ejemplo, el siguiente formato muestra positivo y negativo, con el formato de la primera sección y muestra `Zero` si el valor es cero.</span><span class="sxs-lookup"><span data-stu-id="267d1-283">For example, the following format displays positive and negative values using the format in the first section and displays `Zero` if the value is zero.</span></span>  
  
 [!code-vb[VbVbalrStrings#19](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#19)]  
  
## <a name="predefined-numeric-formats"></a><span data-ttu-id="267d1-284">Formatos numéricos predefinidos</span><span class="sxs-lookup"><span data-stu-id="267d1-284">Predefined Numeric Formats</span></span>  
 <span data-ttu-id="267d1-285">En la tabla siguiente identifica los nombres de formato numérico predefinidos.</span><span class="sxs-lookup"><span data-stu-id="267d1-285">The following table identifies the predefined numeric format names.</span></span> <span data-ttu-id="267d1-286">Se pueden utilizar por su nombre como el `Style` argumento para el `Format` función:</span><span class="sxs-lookup"><span data-stu-id="267d1-286">These may be used by name as the `Style` argument for the `Format` function:</span></span>  
  
|<span data-ttu-id="267d1-287">Nombre de formato</span><span class="sxs-lookup"><span data-stu-id="267d1-287">Format name</span></span>|<span data-ttu-id="267d1-288">Descripción</span><span class="sxs-lookup"><span data-stu-id="267d1-288">Description</span></span>|  
|-|-|  
|<span data-ttu-id="267d1-289">`General Number`, `G`o `g`</span><span class="sxs-lookup"><span data-stu-id="267d1-289">`General Number`, `G`, or `g`</span></span>|<span data-ttu-id="267d1-290">Muestra el número sin separadores de miles.</span><span class="sxs-lookup"><span data-stu-id="267d1-290">Displays number with no thousand separator.</span></span><br /><br /> <span data-ttu-id="267d1-291">Por ejemplo, `Format(&H3FA, "g")` devuelve `1018`.</span><span class="sxs-lookup"><span data-stu-id="267d1-291">For example, `Format(&H3FA, "g")` returns `1018`.</span></span>|  
|<span data-ttu-id="267d1-292">`Currency`, `C`o `c`</span><span class="sxs-lookup"><span data-stu-id="267d1-292">`Currency`, `C`, or `c`</span></span>|<span data-ttu-id="267d1-293">Muestra el número con separador de miles, si es necesario; muestra dos dígitos a la derecha del separador decimal.</span><span class="sxs-lookup"><span data-stu-id="267d1-293">Displays number with thousand separator, if appropriate; displays two digits to the right of the decimal separator.</span></span> <span data-ttu-id="267d1-294">Salida se basa en la configuración regional del sistema.</span><span class="sxs-lookup"><span data-stu-id="267d1-294">Output is based on system locale settings.</span></span><br /><br /> <span data-ttu-id="267d1-295">Por ejemplo, `Format(1234567, "c")` devuelve `$1,234,567.00`.</span><span class="sxs-lookup"><span data-stu-id="267d1-295">For example, `Format(1234567, "c")` returns `$1,234,567.00`.</span></span>|  
|<span data-ttu-id="267d1-296">`Fixed`, `F`o `f`</span><span class="sxs-lookup"><span data-stu-id="267d1-296">`Fixed`, `F`, or `f`</span></span>|<span data-ttu-id="267d1-297">Muestra al menos un dígito a la izquierda y dos dígitos a la derecha del separador decimal.</span><span class="sxs-lookup"><span data-stu-id="267d1-297">Displays at least one digit to the left and two digits to the right of the decimal separator.</span></span><br /><br /> <span data-ttu-id="267d1-298">Por ejemplo, `Format(1234567, "f")` devuelve `1234567.00`.</span><span class="sxs-lookup"><span data-stu-id="267d1-298">For example, `Format(1234567, "f")` returns `1234567.00`.</span></span>|  
|<span data-ttu-id="267d1-299">`Standard`, `N`o `n`</span><span class="sxs-lookup"><span data-stu-id="267d1-299">`Standard`, `N`, or `n`</span></span>|<span data-ttu-id="267d1-300">Muestra el número con separador de miles, al menos un dígito a la izquierda y dos dígitos a la derecha del separador decimal.</span><span class="sxs-lookup"><span data-stu-id="267d1-300">Displays number with thousand separator, at least one digit to the left and two digits to the right of the decimal separator.</span></span><br /><br /> <span data-ttu-id="267d1-301">Por ejemplo, `Format(1234567, "n")` devuelve `1,234,567.00`.</span><span class="sxs-lookup"><span data-stu-id="267d1-301">For example, `Format(1234567, "n")` returns `1,234,567.00`.</span></span>|  
|`Percent`|<span data-ttu-id="267d1-302">Muestra el número multiplicado por 100 con un signo de porcentaje (%) anexado inmediatamente a la derecha; siempre muestra dos dígitos a la derecha del separador decimal.</span><span class="sxs-lookup"><span data-stu-id="267d1-302">Displays number multiplied by 100 with a percent sign (%) appended immediately to the right; always displays two digits to the right of the decimal separator.</span></span><br /><br /> <span data-ttu-id="267d1-303">Por ejemplo, `Format(0.4744, "Percent")` devuelve `47.44%`.</span><span class="sxs-lookup"><span data-stu-id="267d1-303">For example, `Format(0.4744, "Percent")` returns `47.44%`.</span></span>|  
|<span data-ttu-id="267d1-304">`P`, o `p`</span><span class="sxs-lookup"><span data-stu-id="267d1-304">`P`, or `p`</span></span>|<span data-ttu-id="267d1-305">Muestra el número con separador de miles multiplicado por 100 con un signo de porcentaje (%) anexado a la derecha y separado por un único espacio; siempre muestra dos dígitos a la derecha del separador decimal.</span><span class="sxs-lookup"><span data-stu-id="267d1-305">Displays number with thousandths separator multiplied by 100 with a percent sign (%) appended to the right and separated by a single space; always displays two digits to the right of the decimal separator.</span></span><br /><br /> <span data-ttu-id="267d1-306">Por ejemplo, `Format(0.80345, "p")` devuelve `80.35 %`.</span><span class="sxs-lookup"><span data-stu-id="267d1-306">For example, `Format(0.80345, "p")` returns `80.35 %`.</span></span>|  
|`Scientific`|<span data-ttu-id="267d1-307">Utiliza la notación científica estándar, con dos dígitos significativos.</span><span class="sxs-lookup"><span data-stu-id="267d1-307">Uses standard scientific notation, providing two significant digits.</span></span><br /><br /> <span data-ttu-id="267d1-308">Por ejemplo, `Format(1234567, "Scientific")` devuelve `1.23E+06`.</span><span class="sxs-lookup"><span data-stu-id="267d1-308">For example, `Format(1234567, "Scientific")` returns `1.23E+06`.</span></span>|  
|<span data-ttu-id="267d1-309">`E`, o `e`</span><span class="sxs-lookup"><span data-stu-id="267d1-309">`E`, or `e`</span></span>|<span data-ttu-id="267d1-310">Utiliza la notación científica estándar, con seis dígitos significativos.</span><span class="sxs-lookup"><span data-stu-id="267d1-310">Uses standard scientific notation, providing six significant digits.</span></span><br /><br /> <span data-ttu-id="267d1-311">Por ejemplo, `Format(1234567, "e")` devuelve `1.234567e+006`.</span><span class="sxs-lookup"><span data-stu-id="267d1-311">For example, `Format(1234567, "e")` returns `1.234567e+006`.</span></span>|  
|<span data-ttu-id="267d1-312">`D`, o `d`</span><span class="sxs-lookup"><span data-stu-id="267d1-312">`D`, or `d`</span></span>|<span data-ttu-id="267d1-313">Muestra el número como una cadena que contiene el valor del número en formato Decimal (base 10).</span><span class="sxs-lookup"><span data-stu-id="267d1-313">Displays number as a string that contains the value of the number in Decimal (base 10) format.</span></span> <span data-ttu-id="267d1-314">Esta opción se admite para los tipos enteros (`Byte`, `Short`, `Integer`, `Long`) solo.</span><span class="sxs-lookup"><span data-stu-id="267d1-314">This option is supported for integral types (`Byte`, `Short`, `Integer`, `Long`) only.</span></span><br /><br /> <span data-ttu-id="267d1-315">Por ejemplo, `Format(&H7F, "d")` devuelve `127`.</span><span class="sxs-lookup"><span data-stu-id="267d1-315">For example, `Format(&H7F, "d")` returns `127`.</span></span>|  
|<span data-ttu-id="267d1-316">`X`, o `x`</span><span class="sxs-lookup"><span data-stu-id="267d1-316">`X`, or `x`</span></span>|<span data-ttu-id="267d1-317">Muestra el número como una cadena que contiene el valor del número en formato Hexadecimal (base 16).</span><span class="sxs-lookup"><span data-stu-id="267d1-317">Displays number as a string that contains the value of the number in Hexadecimal (base 16) format.</span></span> <span data-ttu-id="267d1-318">Esta opción se admite para los tipos enteros (`Byte`, `Short`, `Integer`, `Long`) solo.</span><span class="sxs-lookup"><span data-stu-id="267d1-318">This option is supported for integral types (`Byte`, `Short`, `Integer`, `Long`) only.</span></span><br /><br /> <span data-ttu-id="267d1-319">Por ejemplo, `Format(127, "x")` devuelve `7f`.</span><span class="sxs-lookup"><span data-stu-id="267d1-319">For example, `Format(127, "x")` returns `7f`.</span></span>|  
|`Yes/No`|<span data-ttu-id="267d1-320">Muestra `No` si el número es 0; en caso contrario, muestra `Yes`.</span><span class="sxs-lookup"><span data-stu-id="267d1-320">Displays `No` if number is 0; otherwise, displays `Yes`.</span></span><br /><br /> <span data-ttu-id="267d1-321">Por ejemplo, `Format(0, "Yes/No")` devuelve `No`.</span><span class="sxs-lookup"><span data-stu-id="267d1-321">For example, `Format(0, "Yes/No")` returns `No`.</span></span>|  
|`True/False`|<span data-ttu-id="267d1-322">Muestra `False` si el número es 0; en caso contrario, muestra `True`.</span><span class="sxs-lookup"><span data-stu-id="267d1-322">Displays `False` if number is 0; otherwise, displays `True`.</span></span><br /><br /> <span data-ttu-id="267d1-323">Por ejemplo, `Format(1, "True/False")` devuelve `True`.</span><span class="sxs-lookup"><span data-stu-id="267d1-323">For example, `Format(1, "True/False")` returns `True`.</span></span>|  
|`On/Off`|<span data-ttu-id="267d1-324">Muestra `Off` si el número es 0; en caso contrario, muestra `On`.</span><span class="sxs-lookup"><span data-stu-id="267d1-324">Displays `Off` if number is 0; otherwise, displays `On`.</span></span><br /><br /> <span data-ttu-id="267d1-325">Por ejemplo, `Format(1, "On/Off")` devuelve `On`.</span><span class="sxs-lookup"><span data-stu-id="267d1-325">For example, `Format(1, "On/Off")` returns `On`.</span></span>|  
  
### <a name="smart-device-developer-notes"></a><span data-ttu-id="267d1-326">Notas de desarrollador de dispositivos inteligentes</span><span class="sxs-lookup"><span data-stu-id="267d1-326">Smart Device Developer Notes</span></span>  
 <span data-ttu-id="267d1-327">El `Yes/No`, `True/False`, y `On/Off` formatos no son compatibles.</span><span class="sxs-lookup"><span data-stu-id="267d1-327">The `Yes/No`, `True/False`, and `On/Off` formats are not supported.</span></span>  
  
## <a name="user-defined-numeric-formats"></a><span data-ttu-id="267d1-328">Formatos numéricos definidos por el usuario</span><span class="sxs-lookup"><span data-stu-id="267d1-328">User-Defined Numeric Formats</span></span>  
 <span data-ttu-id="267d1-329">En la tabla siguiente identifica los caracteres que puede usar para crear formatos de número definido por el usuario.</span><span class="sxs-lookup"><span data-stu-id="267d1-329">The following table identifies characters you can use to create user-defined number formats.</span></span> <span data-ttu-id="267d1-330">Se pueden utilizar para compilar el `Style` argumento para el `Format` función:</span><span class="sxs-lookup"><span data-stu-id="267d1-330">These may be used to build the `Style` argument for the `Format` function:</span></span>  
  
|<span data-ttu-id="267d1-331">Carácter</span><span class="sxs-lookup"><span data-stu-id="267d1-331">Character</span></span>|<span data-ttu-id="267d1-332">Descripción</span><span class="sxs-lookup"><span data-stu-id="267d1-332">Description</span></span>|  
|-|-|  
|<span data-ttu-id="267d1-333">Ninguna</span><span class="sxs-lookup"><span data-stu-id="267d1-333">None</span></span>|<span data-ttu-id="267d1-334">Muestra el número sin formato.</span><span class="sxs-lookup"><span data-stu-id="267d1-334">Displays the number with no formatting.</span></span>|  
|<span data-ttu-id="267d1-335">(`0`)</span><span class="sxs-lookup"><span data-stu-id="267d1-335">(`0`)</span></span>|<span data-ttu-id="267d1-336">Marcador de posición de dígito.</span><span class="sxs-lookup"><span data-stu-id="267d1-336">Digit placeholder.</span></span> <span data-ttu-id="267d1-337">Muestra un dígito o un cero.</span><span class="sxs-lookup"><span data-stu-id="267d1-337">Displays a digit or a zero.</span></span> <span data-ttu-id="267d1-338">Si la expresión tiene un dígito en la posición donde aparece el cero en la cadena de formato, que se muestre; en caso contrario, se muestra un cero en esa posición.</span><span class="sxs-lookup"><span data-stu-id="267d1-338">If the expression has a digit in the position where the zero appears in the format string, display it; otherwise, displays a zero in that position.</span></span><br /><br /> <span data-ttu-id="267d1-339">Si el número tiene menos dígitos que son ceros (en cualquier lado del separador decimal) en la expresión de formato muestra ceros iniciales o finales.</span><span class="sxs-lookup"><span data-stu-id="267d1-339">If the number has fewer digits than there are zeros (on either side of the decimal) in the format expression, displays leading or trailing zeros.</span></span> <span data-ttu-id="267d1-340">Si el número tiene más dígitos a la derecha del separador decimal que ceros hay a la derecha del separador decimal en la expresión de formato redondea el número con tantos decimales como ceros haya.</span><span class="sxs-lookup"><span data-stu-id="267d1-340">If the number has more digits to the right of the decimal separator than there are zeros to the right of the decimal separator in the format expression, rounds the number to as many decimal places as there are zeros.</span></span> <span data-ttu-id="267d1-341">Si el número tiene más dígitos a la izquierda del separador decimal que ceros hay a la izquierda del separador decimal en la expresión de formato, muestran los dígitos adicionales sin modificación.</span><span class="sxs-lookup"><span data-stu-id="267d1-341">If the number has more digits to the left of the decimal separator than there are zeros to the left of the decimal separator in the format expression, displays the extra digits without modification.</span></span>|  
|<span data-ttu-id="267d1-342">(`#`)</span><span class="sxs-lookup"><span data-stu-id="267d1-342">(`#`)</span></span>|<span data-ttu-id="267d1-343">Marcador de posición de dígito.</span><span class="sxs-lookup"><span data-stu-id="267d1-343">Digit placeholder.</span></span> <span data-ttu-id="267d1-344">Muestra un dígito o nada.</span><span class="sxs-lookup"><span data-stu-id="267d1-344">Displays a digit or nothing.</span></span> <span data-ttu-id="267d1-345">Si la expresión tiene un dígito en la posición donde la `#` carácter aparece en la cadena de formato, lo muestra; de lo contrario, se muestra nada en esa posición.</span><span class="sxs-lookup"><span data-stu-id="267d1-345">If the expression has a digit in the position where the `#` character appears in the format string, displays it; otherwise, displays nothing in that position.</span></span><br /><br /> <span data-ttu-id="267d1-346">Este símbolo funciona como el `0` marcador de posición de dígitos, salvo que los ceros iniciales y finales no se muestran si el número tiene menos dígitos que hay `#` caracteres a ambos lados del separador decimal en la expresión de formato.</span><span class="sxs-lookup"><span data-stu-id="267d1-346">This symbol works like the `0` digit placeholder, except that leading and trailing zeros aren't displayed if the number has fewer digits than there are `#` characters on either side of the decimal separator in the format expression.</span></span>|  
|<span data-ttu-id="267d1-347">(`.`)</span><span class="sxs-lookup"><span data-stu-id="267d1-347">(`.`)</span></span>|<span data-ttu-id="267d1-348">Marcador de posición decimal.</span><span class="sxs-lookup"><span data-stu-id="267d1-348">Decimal placeholder.</span></span> <span data-ttu-id="267d1-349">El marcador de posición decimal determina cuántos dígitos se muestran a la izquierda y derecha del separador decimal.</span><span class="sxs-lookup"><span data-stu-id="267d1-349">The decimal placeholder determines how many digits are displayed to the left and right of the decimal separator.</span></span> <span data-ttu-id="267d1-350">Si la expresión de formato contiene únicamente `#` caracteres a la izquierda de este símbolo; los números menores que 1 comienzan con un separador decimal.</span><span class="sxs-lookup"><span data-stu-id="267d1-350">If the format expression contains only `#` characters to the left of this symbol; numbers smaller than 1 begin with a decimal separator.</span></span> <span data-ttu-id="267d1-351">Para mostrar un cero inicial con números fraccionarios, utilice un cero como el primer marcador de posición de dígitos a la izquierda del separador decimal.</span><span class="sxs-lookup"><span data-stu-id="267d1-351">To display a leading zero displayed with fractional numbers, use zero as the first digit placeholder to the left of the decimal separator.</span></span> <span data-ttu-id="267d1-352">En algunas configuraciones regionales se utiliza una coma como separador decimal.</span><span class="sxs-lookup"><span data-stu-id="267d1-352">In some locales, a comma is used as the decimal separator.</span></span> <span data-ttu-id="267d1-353">El carácter real utilizado como marcador de posición decimal en la salida con formato depende el formato de número que reconozca el sistema.</span><span class="sxs-lookup"><span data-stu-id="267d1-353">The actual character used as a decimal placeholder in the formatted output depends on the number format recognized by your system.</span></span> <span data-ttu-id="267d1-354">Por lo tanto, debe usar el período como el marcador de posición decimal en los formatos incluso si se encuentra en una configuración regional que usa una coma como separador decimal.</span><span class="sxs-lookup"><span data-stu-id="267d1-354">Thus, you should use the period as the decimal placeholder in your formats even if you are in a locale that uses a comma as a decimal placeholder.</span></span> <span data-ttu-id="267d1-355">La cadena con formato aparecerá en el formato correcto para la configuración regional.</span><span class="sxs-lookup"><span data-stu-id="267d1-355">The formatted string will appear in the format correct for the locale.</span></span>|  
|<span data-ttu-id="267d1-356">(`%`)</span><span class="sxs-lookup"><span data-stu-id="267d1-356">(`%`)</span></span>|<span data-ttu-id="267d1-357">Marcador de posición de porcentaje.</span><span class="sxs-lookup"><span data-stu-id="267d1-357">Percent placeholder.</span></span> <span data-ttu-id="267d1-358">La expresión se multiplica por 100.</span><span class="sxs-lookup"><span data-stu-id="267d1-358">Multiplies the expression by 100.</span></span> <span data-ttu-id="267d1-359">El carácter de porcentaje (`%`) se inserta en la posición donde aparece en la cadena de formato.</span><span class="sxs-lookup"><span data-stu-id="267d1-359">The percent character (`%`) is inserted in the position where it appears in the format string.</span></span>|  
|<span data-ttu-id="267d1-360">(`,`)</span><span class="sxs-lookup"><span data-stu-id="267d1-360">(`,`)</span></span>|<span data-ttu-id="267d1-361">Separador de miles.</span><span class="sxs-lookup"><span data-stu-id="267d1-361">Thousand separator.</span></span> <span data-ttu-id="267d1-362">El separador de miles separa los millares de las centenas en un número que tiene cuatro o más posiciones a la izquierda del separador decimal.</span><span class="sxs-lookup"><span data-stu-id="267d1-362">The thousand separator separates thousands from hundreds within a number that has four or more places to the left of the decimal separator.</span></span> <span data-ttu-id="267d1-363">Uso estándar del separador de miles se especifica si el formato contiene un separador de miles rodeado de marcadores de posición de dígitos (`0` o `#`).</span><span class="sxs-lookup"><span data-stu-id="267d1-363">Standard use of the thousand separator is specified if the format contains a thousand separator surrounded by digit placeholders (`0` or `#`).</span></span><br /><br /> <span data-ttu-id="267d1-364">Un separador de miles inmediatamente a la izquierda del separador decimal (o si no se especifica un valor decimal) o como el extremo derecho de caracteres de la cadena significa "escalar el número dividiéndolo por 1000, redondeándolo como sea preciso".</span><span class="sxs-lookup"><span data-stu-id="267d1-364">A thousand separator immediately to the left of the decimal separator (whether or not a decimal is specified) or as the rightmost character in the string means "scale the number by dividing it by 1,000, rounding as needed."</span></span> <span data-ttu-id="267d1-365">Números de menores que 1000 pero mayores o iguales que 500 se muestran como `1`y los números menores que 500 se muestran como `0`.</span><span class="sxs-lookup"><span data-stu-id="267d1-365">Numbers smaller than 1,000 but greater or equal to 500 are displayed as `1`, and numbers smaller than 500 are displayed as `0`.</span></span> <span data-ttu-id="267d1-366">Dos separadores de miles adyacentes en esta posición escalar por un factor de 1 millón y un factor adicional de 1000 por cada separador adicional.</span><span class="sxs-lookup"><span data-stu-id="267d1-366">Two adjacent thousand separators in this position scale by a factor of 1 million, and an additional factor of 1,000 for each additional separator.</span></span><br /><br /> <span data-ttu-id="267d1-367">Varios separadores en la posición situada en la cadena o en cualquier posición que no sea inmediatamente a la izquierda del separador decimal se tratan simplemente como si especificaran el uso de un separador de miles.</span><span class="sxs-lookup"><span data-stu-id="267d1-367">Multiple separators in any position other than immediately to the left of the decimal separator or the rightmost position in the string are treated simply as specifying the use of a thousand separator.</span></span> <span data-ttu-id="267d1-368">En algunas configuraciones regionales se utiliza un punto como separador de miles.</span><span class="sxs-lookup"><span data-stu-id="267d1-368">In some locales, a period is used as a thousand separator.</span></span> <span data-ttu-id="267d1-369">El carácter real utilizado como separador de miles en la salida con formato depende del formato de número que reconozca el sistema.</span><span class="sxs-lookup"><span data-stu-id="267d1-369">The actual character used as the thousand separator in the formatted output depends on the Number Format recognized by your system.</span></span> <span data-ttu-id="267d1-370">Por lo tanto, debe usar la coma como separador de miles en sus formatos incluso si se encuentra en una configuración regional que utiliza un punto como separador de miles.</span><span class="sxs-lookup"><span data-stu-id="267d1-370">Thus, you should use the comma as the thousand separator in your formats even if you are in a locale that uses a period as a thousand separator.</span></span> <span data-ttu-id="267d1-371">La cadena con formato aparecerá en el formato correcto para la configuración regional.</span><span class="sxs-lookup"><span data-stu-id="267d1-371">The formatted string will appear in the format correct for the locale.</span></span><br /><br /> <span data-ttu-id="267d1-372">Por ejemplo, considere las tres cadenas de formato siguientes:</span><span class="sxs-lookup"><span data-stu-id="267d1-372">For example, consider the three following format strings:</span></span><br /><br /> <span data-ttu-id="267d1-373">-   `"#,0."`, que utiliza el separador de miles para dar formato al número 100 millones como la cadena "100,000,000".</span><span class="sxs-lookup"><span data-stu-id="267d1-373">-   `"#,0."`, which uses the thousands separator to format the number 100 million as the string "100,000,000".</span></span><br /><span data-ttu-id="267d1-374">-   `"#0,."`, que utiliza una escala por un factor de mil para dar formato al número 100 millones como la cadena "100000".</span><span class="sxs-lookup"><span data-stu-id="267d1-374">-   `"#0,."`, which uses scaling by a factor of one thousand to format the number 100 million as the string "100000".</span></span><br /><span data-ttu-id="267d1-375">-   `"#,0,."`, que utiliza el separador de miles y escala por un factor de mil para dar formato al número 100 millones como la cadena "100,000".</span><span class="sxs-lookup"><span data-stu-id="267d1-375">-   `"#,0,."`, which uses the thousands separator and scaling by one thousand to format the number 100 million as the string "100,000".</span></span>|  
|<span data-ttu-id="267d1-376">(`:`)</span><span class="sxs-lookup"><span data-stu-id="267d1-376">(`:`)</span></span>|<span data-ttu-id="267d1-377">Separador de hora.</span><span class="sxs-lookup"><span data-stu-id="267d1-377">Time separator.</span></span> <span data-ttu-id="267d1-378">En algunas configuraciones regionales, otros caracteres pueden usarse para representar el separador de hora.</span><span class="sxs-lookup"><span data-stu-id="267d1-378">In some locales, other characters may be used to represent the time separator.</span></span> <span data-ttu-id="267d1-379">El separador de hora separa horas, minutos y segundos cuando se da formato a valores de tiempo.</span><span class="sxs-lookup"><span data-stu-id="267d1-379">The time separator separates hours, minutes, and seconds when time values are formatted.</span></span> <span data-ttu-id="267d1-380">El carácter real utilizado como separador de hora en formato de salida viene determinada por la configuración del sistema.</span><span class="sxs-lookup"><span data-stu-id="267d1-380">The actual character used as the time separator in formatted output is determined by your system settings.</span></span>|  
|<span data-ttu-id="267d1-381">(`/`)</span><span class="sxs-lookup"><span data-stu-id="267d1-381">(`/`)</span></span>|<span data-ttu-id="267d1-382">Separador de fecha.</span><span class="sxs-lookup"><span data-stu-id="267d1-382">Date separator.</span></span> <span data-ttu-id="267d1-383">En algunas configuraciones regionales, otros caracteres pueden usarse para representar el separador de fecha.</span><span class="sxs-lookup"><span data-stu-id="267d1-383">In some locales, other characters may be used to represent the date separator.</span></span> <span data-ttu-id="267d1-384">El separador de fecha separa el día, mes y año cuando se da formato a valores de fecha.</span><span class="sxs-lookup"><span data-stu-id="267d1-384">The date separator separates the day, month, and year when date values are formatted.</span></span> <span data-ttu-id="267d1-385">El carácter real utilizado como separador de fecha en formato de salida viene determinada por la configuración del sistema.</span><span class="sxs-lookup"><span data-stu-id="267d1-385">The actual character used as the date separator in formatted output is determined by your system settings.</span></span>|  
|<span data-ttu-id="267d1-386">(`E-``E+``e-``e+`)</span><span class="sxs-lookup"><span data-stu-id="267d1-386">(`E-``E+``e-``e+`)</span></span>|<span data-ttu-id="267d1-387">Formato científico.</span><span class="sxs-lookup"><span data-stu-id="267d1-387">Scientific format.</span></span> <span data-ttu-id="267d1-388">Si la expresión de formato contiene al menos un marcador de posición de dígitos (`0` o `#`) a la izquierda del `E-`, `E+`, `e-`, o `e+`, se muestra el número en formato científico y `E` o `e` se inserta entre el número y su exponente.</span><span class="sxs-lookup"><span data-stu-id="267d1-388">If the format expression contains at least one digit placeholder (`0` or `#`) to the left of `E-`, `E+`, `e-`, or `e+`, the number is displayed in scientific format and `E` or `e` is inserted between the number and its exponent.</span></span> <span data-ttu-id="267d1-389">El número de marcadores de posición de dígitos a la izquierda determina el número de dígitos del exponente.</span><span class="sxs-lookup"><span data-stu-id="267d1-389">The number of digit placeholders to the left determines the number of digits in the exponent.</span></span> <span data-ttu-id="267d1-390">Use `E-` o `e-` para colocar un signo menos junto a los exponentes negativos.</span><span class="sxs-lookup"><span data-stu-id="267d1-390">Use `E-` or `e-` to place a minus sign next to negative exponents.</span></span> <span data-ttu-id="267d1-391">Use `E+` o `e+` para colocar un signo menos junto a los exponentes negativos y un signo más junto a los exponentes positivos.</span><span class="sxs-lookup"><span data-stu-id="267d1-391">Use `E+` or `e+` to place a minus sign next to negative exponents and a plus sign next to positive exponents.</span></span> <span data-ttu-id="267d1-392">También debe incluir marcadores de posición de dígitos a la derecha de este símbolo para obtener el formato correcto.</span><span class="sxs-lookup"><span data-stu-id="267d1-392">You must also include digit placeholders to the right of this symbol to get correct formatting.</span></span>|  
|<span data-ttu-id="267d1-393">`-` `+` `$` ( )</span><span class="sxs-lookup"><span data-stu-id="267d1-393">`-` `+` `$` ( )</span></span>|<span data-ttu-id="267d1-394">Caracteres literales.</span><span class="sxs-lookup"><span data-stu-id="267d1-394">Literal characters.</span></span> <span data-ttu-id="267d1-395">Estos caracteres se muestran tal y como se escribió en la cadena de formato.</span><span class="sxs-lookup"><span data-stu-id="267d1-395">These characters are displayed exactly as typed in the format string.</span></span> <span data-ttu-id="267d1-396">Para mostrar un carácter distinto de los enumerados, precedidos por una barra diagonal inversa (`\`) o escríbala entre comillas dobles ("").</span><span class="sxs-lookup"><span data-stu-id="267d1-396">To display a character other than one of those listed, precede it with a backslash (`\`) or enclose it in double quotation marks (" ").</span></span>|  
|<span data-ttu-id="267d1-397">(`\`)</span><span class="sxs-lookup"><span data-stu-id="267d1-397">(`\`)</span></span>|<span data-ttu-id="267d1-398">Muestra el siguiente carácter en la cadena de formato.</span><span class="sxs-lookup"><span data-stu-id="267d1-398">Displays the next character in the format string.</span></span> <span data-ttu-id="267d1-399">Para mostrar un carácter que tiene un significado especial como carácter literal, precedidos por una barra diagonal inversa (`\`).</span><span class="sxs-lookup"><span data-stu-id="267d1-399">To display a character that has special meaning as a literal character, precede it with a backslash (`\`).</span></span> <span data-ttu-id="267d1-400">No se muestra la barra diagonal.</span><span class="sxs-lookup"><span data-stu-id="267d1-400">The backslash itself isn't displayed.</span></span> <span data-ttu-id="267d1-401">Con una barra diagonal inversa es equivalente a delimitar el siguiente carácter entre comillas dobles.</span><span class="sxs-lookup"><span data-stu-id="267d1-401">Using a backslash is the same as enclosing the next character in double quotation marks.</span></span> <span data-ttu-id="267d1-402">Para mostrar una barra diagonal inversa, utilice dos barras diagonales inversas (`\\`).</span><span class="sxs-lookup"><span data-stu-id="267d1-402">To display a backslash, use two backslashes (`\\`).</span></span><br /><br /> <span data-ttu-id="267d1-403">Ejemplos de caracteres que no se puede mostrar como caracteres literales son los caracteres de formato de fecha y hora de formato (`a`, `c`, `d`, `h`, `m`, `n`, `p`, `q`, `s`, `t`, `w`, `y`, `/`, y `:`), los caracteres de formato numérico (`#`, `0`, `%`, `E`, `e`, coma y punto) y los caracteres de formato de cadena (`@`, `&`, `<`, `>`, y `!`).</span><span class="sxs-lookup"><span data-stu-id="267d1-403">Examples of characters that can't be displayed as literal characters are the date-formatting and time-formatting characters (`a`, `c`, `d`, `h`, `m`, `n`, `p`, `q`, `s`, `t`, `w`, `y`, `/`, and `:`), the numeric-formatting characters (`#`, `0`, `%`, `E`, `e`, comma, and period), and the string-formatting characters (`@`, `&`, `<`, `>`, and `!`).</span></span>|  
|<span data-ttu-id="267d1-404">(`"``ABC``"`)</span><span class="sxs-lookup"><span data-stu-id="267d1-404">(`"``ABC``"`)</span></span>|<span data-ttu-id="267d1-405">Muestra la cadena dentro de las comillas dobles ("").</span><span class="sxs-lookup"><span data-stu-id="267d1-405">Displays the string inside the double quotation marks (" ").</span></span> <span data-ttu-id="267d1-406">Para incluir una cadena en el argumento de estilo de código, debe usar `Chr(34)` para delimitar el texto (`34` es el código de carácter para las comillas (")).</span><span class="sxs-lookup"><span data-stu-id="267d1-406">To include a string in the style argument from within code, you must use `Chr(34)` to enclose the text (`34` is the character code for a quotation mark (")).</span></span>|  
  
### <a name="legacy-code-example"></a><span data-ttu-id="267d1-407">Ejemplo de código heredado</span><span class="sxs-lookup"><span data-stu-id="267d1-407">Legacy Code Example</span></span>  
 <span data-ttu-id="267d1-408">En la tabla siguiente contiene algunos ejemplos de expresiones de formato para números.</span><span class="sxs-lookup"><span data-stu-id="267d1-408">The following table contains some sample format expressions for numbers.</span></span> <span data-ttu-id="267d1-409">(Todos estos ejemplos se asume que la configuración regional de su sistema es inglés de Estados Unidos) La primera columna contiene las cadenas de formato para el `Style` argumento de la `Format` función; las demás columnas contienen la salida resultante si los datos con formato tienen el valor dado en los encabezados de columna.</span><span class="sxs-lookup"><span data-stu-id="267d1-409">(These examples all assume that your system's locale setting is English-U.S.) The first column contains the format strings for the `Style` argument of the `Format` function; the other columns contain the resulting output if the formatted data has the value given in the column headings.</span></span>  
  
|<span data-ttu-id="267d1-410">Formato (`Style`)</span><span class="sxs-lookup"><span data-stu-id="267d1-410">Format (`Style`)</span></span>|<span data-ttu-id="267d1-411">el formato "5"</span><span class="sxs-lookup"><span data-stu-id="267d1-411">"5" formatted as</span></span>|<span data-ttu-id="267d1-412">el formato "-5"</span><span class="sxs-lookup"><span data-stu-id="267d1-412">"-5" formatted as</span></span>|<span data-ttu-id="267d1-413">el formato "0,5"</span><span class="sxs-lookup"><span data-stu-id="267d1-413">"0.5" formatted as</span></span>|  
|-|-|-|-|  
|`Zero-length string ("")`|`5`|`-5`|`0.5`|  
|`0`|`5`|`-5`|`1`|  
|`0.00`|`5.00`|`-5.00`|`0.50`|  
|`#,##0`|`5`|`-5`|`1`|  
|`$#,##0;($#,##0)`|`$5`|`($5)`|`$1`|  
|`$#,##0.00;($#,##0.00)`|`$5.00`|`($5.00)`|`$0.50`|  
|`0%`|`500%`|`-500%`|`50%`|  
|`0.00%`|`500.00%`|`-500.00%`|`50.00%`|  
|`0.00E+00`|`5.00E+00`|`-5.00E+00`|`5.00E-01`|  
|`0.00E-00`|`5.00E00`|`-5.00E00`|`5.00E-01`|  
  
## <a name="predefined-datetime-formats"></a><span data-ttu-id="267d1-414">Formatos de fecha y hora predefinidos</span><span class="sxs-lookup"><span data-stu-id="267d1-414">Predefined Date/Time Formats</span></span>  
 <span data-ttu-id="267d1-415">En la tabla siguiente identifica la fecha predefinidos y los nombres de formato de hora.</span><span class="sxs-lookup"><span data-stu-id="267d1-415">The following table identifies the predefined date and time format names.</span></span> <span data-ttu-id="267d1-416">Se pueden utilizar por su nombre como argumento de estilo para el `Format` función:</span><span class="sxs-lookup"><span data-stu-id="267d1-416">These may be used by name as the style argument for the `Format` function:</span></span>  
  
|<span data-ttu-id="267d1-417">Nombre de formato</span><span class="sxs-lookup"><span data-stu-id="267d1-417">Format Name</span></span>|<span data-ttu-id="267d1-418">Descripción</span><span class="sxs-lookup"><span data-stu-id="267d1-418">Description</span></span>|  
|-|-|  
|<span data-ttu-id="267d1-419">`General Date`, o `G`</span><span class="sxs-lookup"><span data-stu-id="267d1-419">`General Date`, or `G`</span></span>|<span data-ttu-id="267d1-420">Muestra una fecha u hora.</span><span class="sxs-lookup"><span data-stu-id="267d1-420">Displays a date and/or time.</span></span> <span data-ttu-id="267d1-421">Por ejemplo: `3/12/2008 11:07:31 AM`.</span><span class="sxs-lookup"><span data-stu-id="267d1-421">For example, `3/12/2008 11:07:31 AM`.</span></span> <span data-ttu-id="267d1-422">Presentación de la fecha viene determinada por el valor de referencia cultural actual de la aplicación.</span><span class="sxs-lookup"><span data-stu-id="267d1-422">Date display is determined by your application's current culture value.</span></span>|  
|<span data-ttu-id="267d1-423">`Long Date`, `Medium Date`o `D`</span><span class="sxs-lookup"><span data-stu-id="267d1-423">`Long Date`, `Medium Date`, or `D`</span></span>|<span data-ttu-id="267d1-424">Muestra una fecha según el formato de fecha larga de la referencia cultural actual.</span><span class="sxs-lookup"><span data-stu-id="267d1-424">Displays a date according to your current culture's long date format.</span></span> <span data-ttu-id="267d1-425">Por ejemplo: `Wednesday, March 12, 2008`.</span><span class="sxs-lookup"><span data-stu-id="267d1-425">For example, `Wednesday, March 12, 2008`.</span></span>|  
|<span data-ttu-id="267d1-426">`Short Date`, o `d`</span><span class="sxs-lookup"><span data-stu-id="267d1-426">`Short Date`, or `d`</span></span>|<span data-ttu-id="267d1-427">Muestra una fecha con formato de fecha corta de la referencia cultural actual.</span><span class="sxs-lookup"><span data-stu-id="267d1-427">Displays a date using your current culture's short date format.</span></span> <span data-ttu-id="267d1-428">Por ejemplo: `3/12/2008`.</span><span class="sxs-lookup"><span data-stu-id="267d1-428">For example, `3/12/2008`.</span></span><br /><br /> <span data-ttu-id="267d1-429">El `d` carácter muestra el día en un formato de fecha definido por el usuario.</span><span class="sxs-lookup"><span data-stu-id="267d1-429">The `d` character displays the day in a user-defined date format.</span></span>|  
|<span data-ttu-id="267d1-430">`Long Time`, `Medium Time`o `T`</span><span class="sxs-lookup"><span data-stu-id="267d1-430">`Long Time`, `Medium Time`, or `T`</span></span>|<span data-ttu-id="267d1-431">Muestra una hora con formato de hora larga de la referencia cultural actual; Normalmente incluye horas, minutos y segundos.</span><span class="sxs-lookup"><span data-stu-id="267d1-431">Displays a time using your current culture's long time format; typically includes hours, minutes, seconds.</span></span> <span data-ttu-id="267d1-432">Por ejemplo: `11:07:31 AM`.</span><span class="sxs-lookup"><span data-stu-id="267d1-432">For example, `11:07:31 AM`.</span></span>|  
|<span data-ttu-id="267d1-433">`Short Time` o `t`</span><span class="sxs-lookup"><span data-stu-id="267d1-433">`Short Time` or `t`</span></span>|<span data-ttu-id="267d1-434">Muestra una hora con formato de hora corta de la referencia cultural actual.</span><span class="sxs-lookup"><span data-stu-id="267d1-434">Displays a time using your current culture's short time format.</span></span> <span data-ttu-id="267d1-435">Por ejemplo: `11:07 AM`.</span><span class="sxs-lookup"><span data-stu-id="267d1-435">For example, `11:07 AM`.</span></span><br /><br /> <span data-ttu-id="267d1-436">El `t` caracteres muestra `AM` o `PM` valores para las configuraciones regionales que utilizan un reloj de 12 horas en un formato de hora definido por el usuario.</span><span class="sxs-lookup"><span data-stu-id="267d1-436">The `t` character displays `AM` or `PM` values for locales that use a 12-hour clock in a user-defined time format.</span></span>|  
|`f`|<span data-ttu-id="267d1-437">Muestra la fecha larga y hora corta según el formato de la referencia cultural actual.</span><span class="sxs-lookup"><span data-stu-id="267d1-437">Displays the long date and short time according to your current culture's format.</span></span> <span data-ttu-id="267d1-438">Por ejemplo: `Wednesday, March 12, 2008 11:07 AM`.</span><span class="sxs-lookup"><span data-stu-id="267d1-438">For example, `Wednesday, March 12, 2008 11:07 AM`.</span></span>|  
|`F`|<span data-ttu-id="267d1-439">Muestra la fecha larga y hora larga según el formato de la referencia cultural actual.</span><span class="sxs-lookup"><span data-stu-id="267d1-439">Displays the long date and long time according to your current culture's format.</span></span> <span data-ttu-id="267d1-440">Por ejemplo: `Wednesday, March 12, 2008 11:07:31 AM`.</span><span class="sxs-lookup"><span data-stu-id="267d1-440">For example, `Wednesday, March 12, 2008 11:07:31 AM`.</span></span>|  
|`g`|<span data-ttu-id="267d1-441">Muestra la fecha corta y hora corta según el formato de la referencia cultural actual.</span><span class="sxs-lookup"><span data-stu-id="267d1-441">Displays the short date and short time according to your current culture's format.</span></span> <span data-ttu-id="267d1-442">Por ejemplo: `3/12/2008 11:07 AM`.</span><span class="sxs-lookup"><span data-stu-id="267d1-442">For example, `3/12/2008 11:07 AM`.</span></span>|  
|<span data-ttu-id="267d1-443">`M`, `m`</span><span class="sxs-lookup"><span data-stu-id="267d1-443">`M`, `m`</span></span>|<span data-ttu-id="267d1-444">Muestra el mes y día de una fecha.</span><span class="sxs-lookup"><span data-stu-id="267d1-444">Displays the month and the day of a date.</span></span> <span data-ttu-id="267d1-445">Por ejemplo: `March 12`.</span><span class="sxs-lookup"><span data-stu-id="267d1-445">For example, `March 12`.</span></span><br /><br /> <span data-ttu-id="267d1-446">El `M` carácter muestra el mes en un formato de fecha definido por el usuario.</span><span class="sxs-lookup"><span data-stu-id="267d1-446">The `M` character displays the month in a user-defined date format.</span></span> <span data-ttu-id="267d1-447">El `m` carácter muestra los minutos en un formato de hora definido por el usuario.</span><span class="sxs-lookup"><span data-stu-id="267d1-447">The `m` character displays the minutes in a user-defined time format.</span></span>|  
|<span data-ttu-id="267d1-448">`R`, `r`</span><span class="sxs-lookup"><span data-stu-id="267d1-448">`R`, `r`</span></span>|<span data-ttu-id="267d1-449">Da formato a la fecha según la <xref:System.Globalization.DateTimeFormatInfo.RFC1123Pattern%2A> propiedad.</span><span class="sxs-lookup"><span data-stu-id="267d1-449">Formats the date according to the <xref:System.Globalization.DateTimeFormatInfo.RFC1123Pattern%2A> property.</span></span> <span data-ttu-id="267d1-450">Por ejemplo: `Wed, 12 Mar 2008 11:07:31 GMT`.</span><span class="sxs-lookup"><span data-stu-id="267d1-450">For example, `Wed, 12 Mar 2008 11:07:31 GMT`.</span></span> <span data-ttu-id="267d1-451">La fecha con formato no ajusta el valor de la fecha y hora.</span><span class="sxs-lookup"><span data-stu-id="267d1-451">The formatted date does not adjust the value of the date and time.</span></span> <span data-ttu-id="267d1-452">Debe ajustar el valor de fecha y hora a GMT antes de llamar a la `Format` función.</span><span class="sxs-lookup"><span data-stu-id="267d1-452">You must adjust the Date/Time value to GMT before calling the `Format` function.</span></span>|  
|`s`|<span data-ttu-id="267d1-453">Da formato a la fecha y hora como un índice ordenable.</span><span class="sxs-lookup"><span data-stu-id="267d1-453">Formats the date and time as a sortable index.</span></span> <span data-ttu-id="267d1-454">Por ejemplo: `2008-03-12T11:07:31`.</span><span class="sxs-lookup"><span data-stu-id="267d1-454">For example, `2008-03-12T11:07:31`.</span></span><br /><br /> <span data-ttu-id="267d1-455">El `s` carácter muestra los segundos en un formato de hora definido por el usuario.</span><span class="sxs-lookup"><span data-stu-id="267d1-455">The `s` character displays the seconds in a user-defined time format.</span></span>|  
|`u`|<span data-ttu-id="267d1-456">Da formato a la fecha y hora como índice GMT que se puede ordenar.</span><span class="sxs-lookup"><span data-stu-id="267d1-456">Formats the date and time as a GMT sortable index.</span></span> <span data-ttu-id="267d1-457">Por ejemplo: `2008-03-12 11:07:31Z`.</span><span class="sxs-lookup"><span data-stu-id="267d1-457">For example, `2008-03-12 11:07:31Z`.</span></span>|  
|`U`|<span data-ttu-id="267d1-458">Da formato a la fecha y hora con la fecha larga y hora larga GMT.</span><span class="sxs-lookup"><span data-stu-id="267d1-458">Formats the date and time with the long date and long time as GMT.</span></span> <span data-ttu-id="267d1-459">Por ejemplo: `Wednesday, March 12, 2008 6:07:31 PM`.</span><span class="sxs-lookup"><span data-stu-id="267d1-459">For example, `Wednesday, March 12, 2008 6:07:31 PM`.</span></span>|  
|<span data-ttu-id="267d1-460">`Y`, `y`</span><span class="sxs-lookup"><span data-stu-id="267d1-460">`Y`, `y`</span></span>|<span data-ttu-id="267d1-461">Da formato a la fecha como el año y mes.</span><span class="sxs-lookup"><span data-stu-id="267d1-461">Formats the date as the year and month.</span></span> <span data-ttu-id="267d1-462">Por ejemplo: `March, 2008`.</span><span class="sxs-lookup"><span data-stu-id="267d1-462">For example, `March, 2008`.</span></span><br /><br /> <span data-ttu-id="267d1-463">El `Y` y `y` caracteres mostrarán el año en un formato de fecha definido por el usuario.</span><span class="sxs-lookup"><span data-stu-id="267d1-463">The `Y` and `y` characters display the year in a user-defined date format.</span></span>|  
  
 <span data-ttu-id="267d1-464">Para obtener más información acerca de la información de referencia cultural actual de la aplicación, consulte [cómo afecta a cadenas de referencia cultural en Visual Basic](~/docs/visual-basic/programming-guide/language-features/strings/how-culture-affects-strings.md).</span><span class="sxs-lookup"><span data-stu-id="267d1-464">For more information about the application's current culture information, see [How Culture Affects Strings in Visual Basic](~/docs/visual-basic/programming-guide/language-features/strings/how-culture-affects-strings.md).</span></span>  
  
## <a name="user-defined-datetime-formats"></a><span data-ttu-id="267d1-465">Formatos de fecha y hora definidos por el usuario</span><span class="sxs-lookup"><span data-stu-id="267d1-465">User-Defined Date/Time Formats</span></span>  
 <span data-ttu-id="267d1-466">La siguiente tabla muestra caracteres que puede usar para crear formatos de fecha y hora definidos por el usuario.</span><span class="sxs-lookup"><span data-stu-id="267d1-466">The following table shows characters you can use to create user-defined date/time formats.</span></span> <span data-ttu-id="267d1-467">A diferencia de las versiones anteriores de Visual Basic, estos caracteres de formato distinguen mayúsculas de minúsculas.</span><span class="sxs-lookup"><span data-stu-id="267d1-467">Unlike in earlier versions of Visual Basic, these format characters are case-sensitive.</span></span>  
  
|<span data-ttu-id="267d1-468">Carácter</span><span class="sxs-lookup"><span data-stu-id="267d1-468">Character</span></span>|<span data-ttu-id="267d1-469">Descripción</span><span class="sxs-lookup"><span data-stu-id="267d1-469">Description</span></span>|  
|-|-|  
|<span data-ttu-id="267d1-470">(`:`)</span><span class="sxs-lookup"><span data-stu-id="267d1-470">(`:`)</span></span>|<span data-ttu-id="267d1-471">Separador de hora.</span><span class="sxs-lookup"><span data-stu-id="267d1-471">Time separator.</span></span> <span data-ttu-id="267d1-472">En algunas configuraciones regionales, otros caracteres pueden usarse para representar el separador de hora.</span><span class="sxs-lookup"><span data-stu-id="267d1-472">In some locales, other characters may be used to represent the time separator.</span></span> <span data-ttu-id="267d1-473">El separador de hora separa horas, minutos y segundos cuando se da formato a valores de tiempo.</span><span class="sxs-lookup"><span data-stu-id="267d1-473">The time separator separates hours, minutes, and seconds when time values are formatted.</span></span> <span data-ttu-id="267d1-474">El carácter real que se usa como separador de hora en formato de salida viene determinada por el valor de referencia cultural actual de la aplicación.</span><span class="sxs-lookup"><span data-stu-id="267d1-474">The actual character that is used as the time separator in formatted output is determined by your application's current culture value.</span></span>|  
|<span data-ttu-id="267d1-475">(`/`)</span><span class="sxs-lookup"><span data-stu-id="267d1-475">(`/`)</span></span>|<span data-ttu-id="267d1-476">Separador de fecha.</span><span class="sxs-lookup"><span data-stu-id="267d1-476">Date separator.</span></span> <span data-ttu-id="267d1-477">En algunas configuraciones regionales, otros caracteres pueden usarse para representar el separador de fecha.</span><span class="sxs-lookup"><span data-stu-id="267d1-477">In some locales, other characters may be used to represent the date separator.</span></span> <span data-ttu-id="267d1-478">El separador de fecha separa el día, mes y año cuando se da formato a valores de fecha.</span><span class="sxs-lookup"><span data-stu-id="267d1-478">The date separator separates the day, month, and year when date values are formatted.</span></span> <span data-ttu-id="267d1-479">El carácter real que se usa como separador de fecha en la salida con formato viene determinada por la referencia cultural actual de la aplicación.</span><span class="sxs-lookup"><span data-stu-id="267d1-479">The actual character that is used as the date separator in formatted output is determined by your application's current culture.</span></span>|  
|<span data-ttu-id="267d1-480">(`%`)</span><span class="sxs-lookup"><span data-stu-id="267d1-480">(`%`)</span></span>|<span data-ttu-id="267d1-481">Se utiliza para indicar que se debe leer el siguiente carácter como un formato de letra única sin tener en cuenta las letras.</span><span class="sxs-lookup"><span data-stu-id="267d1-481">Used to indicate that the following character should be read as a single-letter format without regard to any trailing letters.</span></span> <span data-ttu-id="267d1-482">También se utiliza para indicar que un formato de letra única se lee como formato definido por el usuario.</span><span class="sxs-lookup"><span data-stu-id="267d1-482">Also used to indicate that a single-letter format is read as a user-defined format.</span></span> <span data-ttu-id="267d1-483">Consulte la información siguiente para obtener más detalles.</span><span class="sxs-lookup"><span data-stu-id="267d1-483">See what follows for additional details.</span></span>|  
|`d`|<span data-ttu-id="267d1-484">Muestra el día como un número sin cero inicial (por ejemplo, `1`).</span><span class="sxs-lookup"><span data-stu-id="267d1-484">Displays the day as a number without a leading zero (for example, `1`).</span></span> <span data-ttu-id="267d1-485">Use `%d` si es el único carácter en su formato numérico definido por el usuario.</span><span class="sxs-lookup"><span data-stu-id="267d1-485">Use `%d` if this is the only character in your user-defined numeric format.</span></span>|  
|`dd`|<span data-ttu-id="267d1-486">Muestra el día como un número con un cero a la izquierda (por ejemplo, `01`).</span><span class="sxs-lookup"><span data-stu-id="267d1-486">Displays the day as a number with a leading zero (for example, `01`).</span></span>|  
|`ddd`|<span data-ttu-id="267d1-487">Muestra el día como una abreviatura (por ejemplo, `Sun`).</span><span class="sxs-lookup"><span data-stu-id="267d1-487">Displays the day as an abbreviation (for example, `Sun`).</span></span>|  
|`dddd`|<span data-ttu-id="267d1-488">Muestra el día como un nombre completo (por ejemplo, `Sunday`).</span><span class="sxs-lookup"><span data-stu-id="267d1-488">Displays the day as a full name (for example, `Sunday`).</span></span>|  
|`M`|<span data-ttu-id="267d1-489">Muestra el mes como un número sin cero inicial (por ejemplo, enero se representa como `1`).</span><span class="sxs-lookup"><span data-stu-id="267d1-489">Displays the month as a number without a leading zero (for example, January is represented as `1`).</span></span> <span data-ttu-id="267d1-490">Use `%M` si es el único carácter en su formato numérico definido por el usuario.</span><span class="sxs-lookup"><span data-stu-id="267d1-490">Use `%M` if this is the only character in your user-defined numeric format.</span></span>|  
|`MM`|<span data-ttu-id="267d1-491">Muestra el mes como un número con un cero a la izquierda (por ejemplo, `01/12/01`).</span><span class="sxs-lookup"><span data-stu-id="267d1-491">Displays the month as a number with a leading zero (for example, `01/12/01`).</span></span>|  
|`MMM`|<span data-ttu-id="267d1-492">Muestra el mes como una abreviatura (por ejemplo, `Jan`).</span><span class="sxs-lookup"><span data-stu-id="267d1-492">Displays the month as an abbreviation (for example, `Jan`).</span></span>|  
|`MMMM`|<span data-ttu-id="267d1-493">Muestra el mes como un nombre completo del mes (por ejemplo, `January`).</span><span class="sxs-lookup"><span data-stu-id="267d1-493">Displays the month as a full month name (for example, `January`).</span></span>|  
|`gg`|<span data-ttu-id="267d1-494">Muestra la cadena de período/era (por ejemplo, `A.D.`).</span><span class="sxs-lookup"><span data-stu-id="267d1-494">Displays the period/era string (for example, `A.D.`).</span></span>|  
|`h`|<span data-ttu-id="267d1-495">Muestra la hora como un número sin ceros utilizando el reloj de 12 horas (por ejemplo, `1:15:15 PM`).</span><span class="sxs-lookup"><span data-stu-id="267d1-495">Displays the hour as a number without leading zeros using the 12-hour clock (for example, `1:15:15 PM`).</span></span> <span data-ttu-id="267d1-496">Use `%h` si es el único carácter en su formato numérico definido por el usuario.</span><span class="sxs-lookup"><span data-stu-id="267d1-496">Use `%h` if this is the only character in your user-defined numeric format.</span></span>|  
|`hh`|<span data-ttu-id="267d1-497">Muestra la hora como un número con ceros utilizando el reloj de 12 horas (por ejemplo, `01:15:15 PM`).</span><span class="sxs-lookup"><span data-stu-id="267d1-497">Displays the hour as a number with leading zeros using the 12-hour clock (for example, `01:15:15 PM`).</span></span>|  
|`H`|<span data-ttu-id="267d1-498">Muestra la hora como un número sin ceros utilizando el reloj de 24 horas (por ejemplo, `1:15:15`).</span><span class="sxs-lookup"><span data-stu-id="267d1-498">Displays the hour as a number without leading zeros using the 24-hour clock (for example, `1:15:15`).</span></span> <span data-ttu-id="267d1-499">Use `%H` si es el único carácter en su formato numérico definido por el usuario.</span><span class="sxs-lookup"><span data-stu-id="267d1-499">Use `%H` if this is the only character in your user-defined numeric format.</span></span>|  
|`HH`|<span data-ttu-id="267d1-500">Muestra la hora como un número con ceros utilizando el reloj de 24 horas (por ejemplo, `01:15:15`).</span><span class="sxs-lookup"><span data-stu-id="267d1-500">Displays the hour as a number with leading zeros using the 24-hour clock (for example, `01:15:15`).</span></span>|  
|`m`|<span data-ttu-id="267d1-501">Muestra el minuto como un número sin ceros iniciales (por ejemplo, `12:1:15`).</span><span class="sxs-lookup"><span data-stu-id="267d1-501">Displays the minute as a number without leading zeros (for example, `12:1:15`).</span></span> <span data-ttu-id="267d1-502">Use `%m` si es el único carácter en su formato numérico definido por el usuario.</span><span class="sxs-lookup"><span data-stu-id="267d1-502">Use `%m` if this is the only character in your user-defined numeric format.</span></span>|  
|`mm`|<span data-ttu-id="267d1-503">Muestra el minuto como un número con ceros iniciales (por ejemplo, `12:01:15`).</span><span class="sxs-lookup"><span data-stu-id="267d1-503">Displays the minute as a number with leading zeros (for example, `12:01:15`).</span></span>|  
|`s`|<span data-ttu-id="267d1-504">Muestra el segundo como un número sin ceros iniciales (por ejemplo, `12:15:5`).</span><span class="sxs-lookup"><span data-stu-id="267d1-504">Displays the second as a number without leading zeros (for example, `12:15:5`).</span></span> <span data-ttu-id="267d1-505">Use `%s` si es el único carácter en su formato numérico definido por el usuario.</span><span class="sxs-lookup"><span data-stu-id="267d1-505">Use `%s` if this is the only character in your user-defined numeric format.</span></span>|  
|`ss`|<span data-ttu-id="267d1-506">Muestra el segundo como un número con ceros iniciales (por ejemplo, `12:15:05`).</span><span class="sxs-lookup"><span data-stu-id="267d1-506">Displays the second as a number with leading zeros (for example, `12:15:05`).</span></span>|  
|`f`|<span data-ttu-id="267d1-507">Muestra fracciones de segundos.</span><span class="sxs-lookup"><span data-stu-id="267d1-507">Displays fractions of seconds.</span></span> <span data-ttu-id="267d1-508">Por ejemplo `ff` muestra centésimas de segundo, mientras que `ffff` muestra diez milésimas de segundos.</span><span class="sxs-lookup"><span data-stu-id="267d1-508">For example `ff` displays hundredths of seconds, whereas `ffff` displays ten-thousandths of seconds.</span></span> <span data-ttu-id="267d1-509">Puede utilizar hasta siete `f` símbolos en el formato definido por el usuario.</span><span class="sxs-lookup"><span data-stu-id="267d1-509">You may use up to seven `f` symbols in your user-defined format.</span></span> <span data-ttu-id="267d1-510">Use `%f` si es el único carácter en su formato numérico definido por el usuario.</span><span class="sxs-lookup"><span data-stu-id="267d1-510">Use `%f` if this is the only character in your user-defined numeric format.</span></span>|  
|`t`|<span data-ttu-id="267d1-511">Utiliza el reloj de 12 horas y se muestra en mayúscula `A` para cualquier hora antes del mediodía; muestra una mayúscula `P` para cualquier hora entre el mediodía y las 11:59 P.M.</span><span class="sxs-lookup"><span data-stu-id="267d1-511">Uses the 12-hour clock and displays an uppercase `A` for any hour before noon; displays an uppercase `P` for any hour between noon and 11:59 P.M.</span></span> <span data-ttu-id="267d1-512">Use `%t` si es el único carácter en su formato numérico definido por el usuario.</span><span class="sxs-lookup"><span data-stu-id="267d1-512">Use `%t` if this is the only character in your user-defined numeric format.</span></span>|  
|`tt`|<span data-ttu-id="267d1-513">Las configuraciones regionales que utilizan un reloj de 12 horas, muestra una mayúscula `AM` con las horas antes del mediodía; muestra una mayúscula `PM` con cualquier hora entre el mediodía y las 11:59 P.M.</span><span class="sxs-lookup"><span data-stu-id="267d1-513">For locales that use a 12-hour clock, displays an uppercase `AM` with any hour before noon; displays an uppercase `PM` with any hour between noon and 11:59 P.M.</span></span><br /><br /> <span data-ttu-id="267d1-514">Las configuraciones regionales que utilizan un reloj de 24 horas, no muestra nada.</span><span class="sxs-lookup"><span data-stu-id="267d1-514">For locales that use a 24-hour clock, displays nothing.</span></span>|  
|`y`|<span data-ttu-id="267d1-515">Muestra el número de año (0-9) sin ceros iniciales.</span><span class="sxs-lookup"><span data-stu-id="267d1-515">Displays the year number (0-9) without leading zeros.</span></span> <span data-ttu-id="267d1-516">Use `%y` si es el único carácter en su formato numérico definido por el usuario.</span><span class="sxs-lookup"><span data-stu-id="267d1-516">Use `%y` if this is the only character in your user-defined numeric format.</span></span>|  
|`yy`|<span data-ttu-id="267d1-517">Muestra el año en formato numérico de dos dígitos con un cero inicial, si procede.</span><span class="sxs-lookup"><span data-stu-id="267d1-517">Displays the year in two-digit numeric format with a leading zero, if applicable.</span></span>|  
|`yyy`|<span data-ttu-id="267d1-518">Muestra el año en formato numérico de cuatro dígitos.</span><span class="sxs-lookup"><span data-stu-id="267d1-518">Displays the year in four-digit numeric format.</span></span>|  
|`yyyy`|<span data-ttu-id="267d1-519">Muestra el año en formato numérico de cuatro dígitos.</span><span class="sxs-lookup"><span data-stu-id="267d1-519">Displays the year in four-digit numeric format.</span></span>|  
|`z`|<span data-ttu-id="267d1-520">Muestra el desplazamiento de zona horaria sin un cero inicial (por ejemplo, `-8`).</span><span class="sxs-lookup"><span data-stu-id="267d1-520">Displays the timezone offset without a leading zero (for example, `-8`).</span></span> <span data-ttu-id="267d1-521">Use `%z` si es el único carácter en su formato numérico definido por el usuario.</span><span class="sxs-lookup"><span data-stu-id="267d1-521">Use `%z` if this is the only character in your user-defined numeric format.</span></span>|  
|`zz`|<span data-ttu-id="267d1-522">Muestra el desplazamiento de zona horaria con un cero inicial (por ejemplo, `-08`)</span><span class="sxs-lookup"><span data-stu-id="267d1-522">Displays the timezone offset with a leading zero (for example, `-08`)</span></span>|  
|`zzz`|<span data-ttu-id="267d1-523">Muestra el desplazamiento de zona horaria completo (por ejemplo, `-08:00`)</span><span class="sxs-lookup"><span data-stu-id="267d1-523">Displays the full timezone offset (for example, `-08:00`)</span></span>|  
  
### <a name="legacy-code-example"></a><span data-ttu-id="267d1-524">Ejemplo de código heredado</span><span class="sxs-lookup"><span data-stu-id="267d1-524">Legacy Code Example</span></span>  
 <span data-ttu-id="267d1-525">Los siguientes son ejemplos de definido por el usuario formatos de fecha y hora para `December 7, 1958, 8:50 PM, 35 seconds`:</span><span class="sxs-lookup"><span data-stu-id="267d1-525">The following are examples of user-defined date and time formats for `December 7, 1958, 8:50 PM, 35 seconds`:</span></span>  
  
|<span data-ttu-id="267d1-526">Formato</span><span class="sxs-lookup"><span data-stu-id="267d1-526">Format</span></span>|<span data-ttu-id="267d1-527">Muestra</span><span class="sxs-lookup"><span data-stu-id="267d1-527">Displays</span></span>|  
|-|-|  
|`M/d/yy`|`12/7/58`|  
|`d-MMM`|`7-Dec`|  
|`d-MMMM-yy`|`7-December-58`|  
|`d MMMM`|`7 December`|  
|`MMMM yy`|`December 58`|  
|`hh:mm tt`|`08:50 PM`|  
|`h:mm:ss t`|`8:50:35 P`|  
|`H:mm`|`20:50`|  
|`H:mm:ss`|`20:50:35`|  
|`M/d/yyyy H:mm`|`12/7/1958 20:50`|  
  
### <a name="smart-device-developer-notes"></a><span data-ttu-id="267d1-528">Notas de desarrollador de dispositivos inteligentes</span><span class="sxs-lookup"><span data-stu-id="267d1-528">Smart Device Developer Notes</span></span>  
 <span data-ttu-id="267d1-529">La resolución de tiempo mínimo para un dispositivo viene determinada por el fabricante del dispositivo.</span><span class="sxs-lookup"><span data-stu-id="267d1-529">The minimum time resolution for a device is determined by the manufacturer of the device.</span></span> <span data-ttu-id="267d1-530">Si la resolución de tiempo para el dispositivo es bastante general el `f` formato carácter devuelve 0 cuando se ejecuta en ese dispositivo.</span><span class="sxs-lookup"><span data-stu-id="267d1-530">If the time resolution for the device is coarse enough, the `f` format character returns 0 when run on that device.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="267d1-531">En este ejemplo se muestra varios usos de la `Format` función a los valores de formato mediante ambos `String` formatos y formatos definidos por el usuario.</span><span class="sxs-lookup"><span data-stu-id="267d1-531">This example shows various uses of the `Format` function to format values using both `String` formats and user-defined formats.</span></span> <span data-ttu-id="267d1-532">Para el separador de fecha (`/`), separador de hora (`:`) y los indicadores de A.M./P.M. (`t` y `tt`), el formato de salida que muestre su sistema depende de la configuración regional que use el código.</span><span class="sxs-lookup"><span data-stu-id="267d1-532">For the date separator (`/`), time separator (`:`), and the AM/PM indicators (`t` and `tt`), the actual formatted output displayed by your system depends on the locale settings the code is using.</span></span> <span data-ttu-id="267d1-533">Cuando horas y fechas se muestran en el entorno de desarrollo, se usan el formato de hora corta y el formato de fecha corta de la configuración regional del código.</span><span class="sxs-lookup"><span data-stu-id="267d1-533">When times and dates are displayed in the development environment, the short time format and short date format of the code locale are used.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="267d1-534">Para las configuraciones regionales que utilizan un reloj de 24 horas, los indicadores de A.M./P.M. (`t` y `tt`) no muestran nada.</span><span class="sxs-lookup"><span data-stu-id="267d1-534">For locales that use a 24-hour clock, the AM/PM indicators (`t` and `tt`) display nothing.</span></span>  
  
 [!code-vb[VbVbalrStrings#27](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#27)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.String.Format(System.String,System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Conversion.Str(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="FormatCurrency">
      <MemberSignature Language="C#" Value="public static string FormatCurrency (object Expression, int NumDigitsAfterDecimal = -1, Microsoft.VisualBasic.TriState IncludeLeadingDigit = Microsoft.VisualBasic.TriState.UseDefault, Microsoft.VisualBasic.TriState UseParensForNegativeNumbers = Microsoft.VisualBasic.TriState.UseDefault, Microsoft.VisualBasic.TriState GroupDigits = Microsoft.VisualBasic.TriState.UseDefault);" />
      <MemberSignature Language="ILAsm" Value=".method public static string FormatCurrency(object Expression, int32 NumDigitsAfterDecimal, valuetype Microsoft.VisualBasic.TriState IncludeLeadingDigit, valuetype Microsoft.VisualBasic.TriState UseParensForNegativeNumbers, valuetype Microsoft.VisualBasic.TriState GroupDigits) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.FormatCurrency(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)" />
      <MemberSignature Language="VB.NET" Value="Public Function FormatCurrency (Expression As Object, Optional NumDigitsAfterDecimal As Integer = -1, Optional IncludeLeadingDigit As TriState = Microsoft.VisualBasic.TriState.UseDefault, Optional UseParensForNegativeNumbers As TriState = Microsoft.VisualBasic.TriState.UseDefault, Optional GroupDigits As TriState = Microsoft.VisualBasic.TriState.UseDefault) As String" />
      <MemberSignature Language="F#" Value="static member FormatCurrency : obj * int * Microsoft.VisualBasic.TriState * Microsoft.VisualBasic.TriState * Microsoft.VisualBasic.TriState -&gt; string" Usage="Microsoft.VisualBasic.Strings.FormatCurrency (Expression, NumDigitsAfterDecimal, IncludeLeadingDigit, UseParensForNegativeNumbers, GroupDigits)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Object" />
        <Parameter Name="NumDigitsAfterDecimal" Type="System.Int32" />
        <Parameter Name="IncludeLeadingDigit" Type="Microsoft.VisualBasic.TriState" />
        <Parameter Name="UseParensForNegativeNumbers" Type="Microsoft.VisualBasic.TriState" />
        <Parameter Name="GroupDigits" Type="Microsoft.VisualBasic.TriState" />
      </Parameters>
      <Docs>
        <param name="Expression">
          <span data-ttu-id="267d1-535">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="267d1-535">Required.</span>
          </span>
          <span data-ttu-id="267d1-536">Expression to be formatted.</span>
          <span class="sxs-lookup">
            <span data-stu-id="267d1-536">Expression to be formatted.</span>
          </span>
        </param>
        <param name="NumDigitsAfterDecimal">
          <span data-ttu-id="267d1-537">Optional.</span>
          <span class="sxs-lookup">
            <span data-stu-id="267d1-537">Optional.</span>
          </span>
          <span data-ttu-id="267d1-538">Numeric value indicating how many places are displayed to the right of the decimal.</span>
          <span class="sxs-lookup">
            <span data-stu-id="267d1-538">Numeric value indicating how many places are displayed to the right of the decimal.</span>
          </span>
          <span data-ttu-id="267d1-539">Default value is –1, which indicates that the computer's regional settings are used.</span>
          <span class="sxs-lookup">
            <span data-stu-id="267d1-539">Default value is –1, which indicates that the computer's regional settings are used.</span>
          </span>
        </param>
        <param name="IncludeLeadingDigit">
          <span data-ttu-id="267d1-540">Optional.</span>
          <span class="sxs-lookup">
            <span data-stu-id="267d1-540">Optional.</span>
          </span>
          <span data-ttu-id="267d1-541">
            <see cref="T:Microsoft.VisualBasic.TriState" /> enumeration that indicates whether or not a leading zero is displayed for fractional values.</span>
          <span class="sxs-lookup">
            <span data-stu-id="267d1-541">
              <see cref="T:Microsoft.VisualBasic.TriState" /> enumeration that indicates whether or not a leading zero is displayed for fractional values.</span>
          </span>
          <span data-ttu-id="267d1-542">See "Remarks" for values.</span>
          <span class="sxs-lookup">
            <span data-stu-id="267d1-542">See "Remarks" for values.</span>
          </span>
        </param>
        <param name="UseParensForNegativeNumbers">
          <span data-ttu-id="267d1-543">Optional.</span>
          <span class="sxs-lookup">
            <span data-stu-id="267d1-543">Optional.</span>
          </span>
          <span data-ttu-id="267d1-544">
            <see cref="T:Microsoft.VisualBasic.TriState" /> enumeration that indicates whether or not to place negative values within parentheses.</span>
          <span class="sxs-lookup">
            <span data-stu-id="267d1-544">
              <see cref="T:Microsoft.VisualBasic.TriState" /> enumeration that indicates whether or not to place negative values within parentheses.</span>
          </span>
          <span data-ttu-id="267d1-545">See "Remarks" for values.</span>
          <span class="sxs-lookup">
            <span data-stu-id="267d1-545">See "Remarks" for values.</span>
          </span>
        </param>
        <param name="GroupDigits">
          <span data-ttu-id="267d1-546">Optional.</span>
          <span class="sxs-lookup">
            <span data-stu-id="267d1-546">Optional.</span>
          </span>
          <span data-ttu-id="267d1-547">
            <see cref="T:Microsoft.VisualBasic.TriState" /> enumeration that indicates whether or not numbers are grouped using the group delimiter specified in the computer's regional settings.</span>
          <span class="sxs-lookup">
            <span data-stu-id="267d1-547">
              <see cref="T:Microsoft.VisualBasic.TriState" /> enumeration that indicates whether or not numbers are grouped using the group delimiter specified in the computer's regional settings.</span>
          </span>
          <span data-ttu-id="267d1-548">See "Remarks" for values.</span>
          <span class="sxs-lookup">
            <span data-stu-id="267d1-548">See "Remarks" for values.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="267d1-549">Returns an expression formatted as a currency value using the currency symbol defined in the system control panel.</span>
          <span class="sxs-lookup">
            <span data-stu-id="267d1-549">Returns an expression formatted as a currency value using the currency symbol defined in the system control panel.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="267d1-550">Returns an expression formatted as a currency value using the currency symbol defined in the system control panel.</span>
          <span class="sxs-lookup">
            <span data-stu-id="267d1-550">Returns an expression formatted as a currency value using the currency symbol defined in the system control panel.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="267d1-551">Cuando se omiten uno o más argumentos opcionales, valores de configuración regional coincidente del equipo se usan en su lugar.</span><span class="sxs-lookup"><span data-stu-id="267d1-551">When one or more optional arguments are omitted, the computer's matching regional-settings values are used instead.</span></span>  
  
 <span data-ttu-id="267d1-552">La posición del símbolo de moneda en relación con el valor de moneda viene determinada por la configuración regional del sistema.</span><span class="sxs-lookup"><span data-stu-id="267d1-552">The position of the currency symbol relative to the currency value is determined by the system's regional settings.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="267d1-553">Toda la información de configuración procede de la configuración regional de la aplicación.</span><span class="sxs-lookup"><span data-stu-id="267d1-553">All settings information comes from the locale of the application.</span></span> <span data-ttu-id="267d1-554">De forma predeterminada, que será la configuración regional establecida en el panel de control.</span><span class="sxs-lookup"><span data-stu-id="267d1-554">By default, that will be the locale set in the control panel.</span></span> <span data-ttu-id="267d1-555">Sin embargo, se puede cambiar mediante programación utilizando .NET Framework, excepto el cero inicial, que procede la `Number` ficha.</span><span class="sxs-lookup"><span data-stu-id="267d1-555">However, it may be changed programmatically by using the .NET Framework, except leading zero, which comes from the `Number` tab.</span></span>  
  
 <span data-ttu-id="267d1-556">El `IncludeLeadingDigit`, `UseParensForNegativeNumbers`, y `GroupDigits` argumentos toman los siguientes valores de enumeración de tres estados.</span><span class="sxs-lookup"><span data-stu-id="267d1-556">The `IncludeLeadingDigit`, `UseParensForNegativeNumbers`, and `GroupDigits` arguments take the following TriState enumeration values.</span></span>  
  
|<span data-ttu-id="267d1-557">Valor</span><span class="sxs-lookup"><span data-stu-id="267d1-557">Value</span></span>|<span data-ttu-id="267d1-558">Descripción</span><span class="sxs-lookup"><span data-stu-id="267d1-558">Description</span></span>|  
|-|-|  
|`TriState.True`|<span data-ttu-id="267d1-559">True</span><span class="sxs-lookup"><span data-stu-id="267d1-559">True</span></span>|  
|`TriState.False`|<span data-ttu-id="267d1-560">False</span><span class="sxs-lookup"><span data-stu-id="267d1-560">False</span></span>|  
|`TriState.UseDefault`|<span data-ttu-id="267d1-561">Configuración regional del equipo</span><span class="sxs-lookup"><span data-stu-id="267d1-561">The computer's regional settings</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="267d1-562">En el siguiente ejemplo se muestra el uso de la función `FormatCurrency`.</span><span class="sxs-lookup"><span data-stu-id="267d1-562">The following example illustrates the use of the `FormatCurrency` function.</span></span>  
  
 [!code-vb[VbVbalrStrings#32](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#32)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="267d1-563">Number of digits after decimal point is greater than 99.</span>
          <span class="sxs-lookup">
            <span data-stu-id="267d1-563">Number of digits after decimal point is greater than 99.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidCastException">
          <span data-ttu-id="267d1-564">Type is not numeric.</span>
          <span class="sxs-lookup">
            <span data-stu-id="267d1-564">Type is not numeric.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.Strings.FormatDateTime(System.DateTime,Microsoft.VisualBasic.DateFormat)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.FormatNumber(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.FormatPercent(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)" />
        <altmember cref="T:Microsoft.VisualBasic.TriState" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Format(System.Object,System.String)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.InvalidCastException" />
      </Docs>
    </Member>
    <Member MemberName="FormatDateTime">
      <MemberSignature Language="C#" Value="public static string FormatDateTime (DateTime Expression, Microsoft.VisualBasic.DateFormat NamedFormat = Microsoft.VisualBasic.DateFormat.GeneralDate);" />
      <MemberSignature Language="ILAsm" Value=".method public static string FormatDateTime(valuetype System.DateTime Expression, valuetype Microsoft.VisualBasic.DateFormat NamedFormat) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.FormatDateTime(System.DateTime,Microsoft.VisualBasic.DateFormat)" />
      <MemberSignature Language="VB.NET" Value="Public Function FormatDateTime (Expression As DateTime, Optional NamedFormat As DateFormat = Microsoft.VisualBasic.DateFormat.GeneralDate) As String" />
      <MemberSignature Language="F#" Value="static member FormatDateTime : DateTime * Microsoft.VisualBasic.DateFormat -&gt; string" Usage="Microsoft.VisualBasic.Strings.FormatDateTime (Expression, NamedFormat)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.DateTime" />
        <Parameter Name="NamedFormat" Type="Microsoft.VisualBasic.DateFormat" />
      </Parameters>
      <Docs>
        <param name="Expression">
          <span data-ttu-id="267d1-565">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="267d1-565">Required.</span>
          </span>
          <span data-ttu-id="267d1-566">
            <see langword="Date" /> expression to be formatted.</span>
          <span class="sxs-lookup">
            <span data-stu-id="267d1-566">
              <see langword="Date" /> expression to be formatted.</span>
          </span>
        </param>
        <param name="NamedFormat">
          <span data-ttu-id="267d1-567">Optional.</span>
          <span class="sxs-lookup">
            <span data-stu-id="267d1-567">Optional.</span>
          </span>
          <span data-ttu-id="267d1-568">Numeric value that indicates the date/time format used.</span>
          <span class="sxs-lookup">
            <span data-stu-id="267d1-568">Numeric value that indicates the date/time format used.</span>
          </span>
          <span data-ttu-id="267d1-569">If omitted, <see langword="DateFormat.GeneralDate" /> is used.</span>
          <span class="sxs-lookup">
            <span data-stu-id="267d1-569">If omitted, <see langword="DateFormat.GeneralDate" /> is used.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="267d1-570">Returns a string expression representing a date/time value.</span>
          <span class="sxs-lookup">
            <span data-stu-id="267d1-570">Returns a string expression representing a date/time value.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="267d1-571">Returns a string expression representing a date/time value.</span>
          <span class="sxs-lookup">
            <span data-stu-id="267d1-571">Returns a string expression representing a date/time value.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="267d1-572">El `Date` tipo de datos siempre contiene información de fecha y hora.</span><span class="sxs-lookup"><span data-stu-id="267d1-572">The `Date` data type always contains both date and time information.</span></span> <span data-ttu-id="267d1-573">Para fines de conversión de tipos, Visual Basic considera 1/1/1 (1 de enero del año 1) tenga un valor neutro para que la fecha y 00:00:00 (medianoche) como un valor neutro por vez.</span><span class="sxs-lookup"><span data-stu-id="267d1-573">For purposes of type conversion, Visual Basic considers 1/1/1 (January 1 of the year 1) to be a neutral value for the date, and 00:00:00 (midnight) to be a neutral value for the time.</span></span> <span data-ttu-id="267d1-574">Si aplica formato a un `Date` valor como una cadena de fecha y hora, `FormatDateTime` no incluye valores neutrales en la cadena resultante.</span><span class="sxs-lookup"><span data-stu-id="267d1-574">If you format a `Date` value as a date/time string, `FormatDateTime` does not include neutral values in the resulting string.</span></span> <span data-ttu-id="267d1-575">Por ejemplo, si convierte #1/1/0001 9:30:00 # en una cadena, el resultado es "9:30:00 AM"; se suprime la información de fecha.</span><span class="sxs-lookup"><span data-stu-id="267d1-575">For example, if you convert #1/1/0001 9:30:00# to a string, the result is "9:30:00 AM"; the date information is suppressed.</span></span> <span data-ttu-id="267d1-576">Sin embargo, la información de fecha aún está presente en el original `Date` valor y se pueden recuperar con funciones como `DatePart`.</span><span class="sxs-lookup"><span data-stu-id="267d1-576">However, the date information is still present in the original `Date` value and can be recovered with functions such as `DatePart`.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="267d1-577">Si se pasa el `Expression` argumento como un `String` literal, `FormatDateTime` lo interpreta según el <xref:System.Globalization.CultureInfo.CurrentCulture%2A> configuración de la aplicación.</span><span class="sxs-lookup"><span data-stu-id="267d1-577">If you pass the `Expression` argument as a `String` literal, `FormatDateTime` interprets it according to the <xref:System.Globalization.CultureInfo.CurrentCulture%2A> setting of your application.</span></span> <span data-ttu-id="267d1-578">Sin embargo, si se pasa como un `Date` literal, utilice el formato #mm/dd/aaaa #, porque `FormatDateTime` siempre interpreta un `Date` literal según la referencia cultural de inglés (Estados Unidos).</span><span class="sxs-lookup"><span data-stu-id="267d1-578">However, if you pass it as a `Date` literal, use the format #mm/dd/yyyy#, because `FormatDateTime` always interprets a `Date` literal according to the English (US) culture.</span></span> <span data-ttu-id="267d1-579">Esto es necesario porque, si una aplicación se desarrolla y codifica con `Date` literales de una referencia cultural, pero, a continuación, se ejecuta en una plataforma con una referencia cultural diferente, el `Date` literales se podrían analizar correctamente.</span><span class="sxs-lookup"><span data-stu-id="267d1-579">This is necessary because, if an application is developed and coded using `Date` literals from one culture, but is then executed on a platform with a different culture, the `Date` literals could be parsed incorrectly.</span></span>  
  
 <span data-ttu-id="267d1-580">El `NamedFormat` argumento tiene las siguientes opciones.</span><span class="sxs-lookup"><span data-stu-id="267d1-580">The `NamedFormat` argument has the following settings.</span></span>  
  
|<span data-ttu-id="267d1-581">Constante</span><span class="sxs-lookup"><span data-stu-id="267d1-581">Constant</span></span>|<span data-ttu-id="267d1-582">Descripción</span><span class="sxs-lookup"><span data-stu-id="267d1-582">Description</span></span>|  
|-|-|  
|`DateFormat.GeneralDate`|<span data-ttu-id="267d1-583">Mostrar una fecha u hora.</span><span class="sxs-lookup"><span data-stu-id="267d1-583">Display a date and/or time.</span></span> <span data-ttu-id="267d1-584">Mostrar una parte de fecha como una fecha corta.</span><span class="sxs-lookup"><span data-stu-id="267d1-584">Display a date part as a short date.</span></span> <span data-ttu-id="267d1-585">Si hay una parte horaria, mostrarlo como mucho tiempo.</span><span class="sxs-lookup"><span data-stu-id="267d1-585">If there is a time part, display it as a long time.</span></span> <span data-ttu-id="267d1-586">Si está presente, se muestran ambas partes.</span><span class="sxs-lookup"><span data-stu-id="267d1-586">If present, both parts display.</span></span>|  
|`DateFormat.LongDate`|<span data-ttu-id="267d1-587">Mostrar una fecha con el formato de fecha larga especificado en la configuración regional del equipo.</span><span class="sxs-lookup"><span data-stu-id="267d1-587">Display a date using the long date format specified in your computer's regional settings.</span></span>|  
|`DateFormat.ShortDate`|<span data-ttu-id="267d1-588">Mostrar una fecha con el formato de fecha corta especificado en la configuración regional del equipo.</span><span class="sxs-lookup"><span data-stu-id="267d1-588">Display a date using the short date format specified in your computer's regional settings.</span></span>|  
|`DateFormat.LongTime`|<span data-ttu-id="267d1-589">Muestra una hora con el formato de hora especificado en la configuración regional del equipo.</span><span class="sxs-lookup"><span data-stu-id="267d1-589">Display a time using the time format specified in your computer's regional settings.</span></span>|  
|`DateFormat.ShortTime`|<span data-ttu-id="267d1-590">Muestra una hora con el formato de 24 horas (hh: mm).</span><span class="sxs-lookup"><span data-stu-id="267d1-590">Display a time using the 24-hour format (hh:mm).</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="267d1-591">En este ejemplo se muestra el uso de la `FormatDateTime` función.</span><span class="sxs-lookup"><span data-stu-id="267d1-591">This example demonstrates the use of the `FormatDateTime` function.</span></span>  
  
 [!code-vb[VbVbalrStrings#3](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="267d1-592">
            <paramref name="NamedFormat" /> setting is not valid.</span>
          <span class="sxs-lookup">
            <span data-stu-id="267d1-592">
              <paramref name="NamedFormat" /> setting is not valid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Format(System.Object,System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.FormatCurrency(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.FormatNumber(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.FormatPercent(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.DatePart(Microsoft.VisualBasic.DateInterval,System.DateTime,Microsoft.VisualBasic.FirstDayOfWeek,Microsoft.VisualBasic.FirstWeekOfYear)" />
      </Docs>
    </Member>
    <Member MemberName="FormatNumber">
      <MemberSignature Language="C#" Value="public static string FormatNumber (object Expression, int NumDigitsAfterDecimal = -1, Microsoft.VisualBasic.TriState IncludeLeadingDigit = Microsoft.VisualBasic.TriState.UseDefault, Microsoft.VisualBasic.TriState UseParensForNegativeNumbers = Microsoft.VisualBasic.TriState.UseDefault, Microsoft.VisualBasic.TriState GroupDigits = Microsoft.VisualBasic.TriState.UseDefault);" />
      <MemberSignature Language="ILAsm" Value=".method public static string FormatNumber(object Expression, int32 NumDigitsAfterDecimal, valuetype Microsoft.VisualBasic.TriState IncludeLeadingDigit, valuetype Microsoft.VisualBasic.TriState UseParensForNegativeNumbers, valuetype Microsoft.VisualBasic.TriState GroupDigits) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.FormatNumber(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)" />
      <MemberSignature Language="VB.NET" Value="Public Function FormatNumber (Expression As Object, Optional NumDigitsAfterDecimal As Integer = -1, Optional IncludeLeadingDigit As TriState = Microsoft.VisualBasic.TriState.UseDefault, Optional UseParensForNegativeNumbers As TriState = Microsoft.VisualBasic.TriState.UseDefault, Optional GroupDigits As TriState = Microsoft.VisualBasic.TriState.UseDefault) As String" />
      <MemberSignature Language="F#" Value="static member FormatNumber : obj * int * Microsoft.VisualBasic.TriState * Microsoft.VisualBasic.TriState * Microsoft.VisualBasic.TriState -&gt; string" Usage="Microsoft.VisualBasic.Strings.FormatNumber (Expression, NumDigitsAfterDecimal, IncludeLeadingDigit, UseParensForNegativeNumbers, GroupDigits)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Object" />
        <Parameter Name="NumDigitsAfterDecimal" Type="System.Int32" />
        <Parameter Name="IncludeLeadingDigit" Type="Microsoft.VisualBasic.TriState" />
        <Parameter Name="UseParensForNegativeNumbers" Type="Microsoft.VisualBasic.TriState" />
        <Parameter Name="GroupDigits" Type="Microsoft.VisualBasic.TriState" />
      </Parameters>
      <Docs>
        <param name="Expression">
          <span data-ttu-id="267d1-593">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="267d1-593">Required.</span>
          </span>
          <span data-ttu-id="267d1-594">Expression to be formatted.</span>
          <span class="sxs-lookup">
            <span data-stu-id="267d1-594">Expression to be formatted.</span>
          </span>
        </param>
        <param name="NumDigitsAfterDecimal">
          <span data-ttu-id="267d1-595">Optional.</span>
          <span class="sxs-lookup">
            <span data-stu-id="267d1-595">Optional.</span>
          </span>
          <span data-ttu-id="267d1-596">Numeric value indicating how many places are displayed to the right of the decimal.</span>
          <span class="sxs-lookup">
            <span data-stu-id="267d1-596">Numeric value indicating how many places are displayed to the right of the decimal.</span>
          </span>
          <span data-ttu-id="267d1-597">The default value is –1, which indicates that the computer's regional settings are used.</span>
          <span class="sxs-lookup">
            <span data-stu-id="267d1-597">The default value is –1, which indicates that the computer's regional settings are used.</span>
          </span>
        </param>
        <param name="IncludeLeadingDigit">
          <span data-ttu-id="267d1-598">Optional.</span>
          <span class="sxs-lookup">
            <span data-stu-id="267d1-598">Optional.</span>
          </span>
          <span data-ttu-id="267d1-599">
            <see cref="T:Microsoft.VisualBasic.TriState" /> constant that indicates whether a leading 0 is displayed for fractional values.</span>
          <span class="sxs-lookup">
            <span data-stu-id="267d1-599">
              <see cref="T:Microsoft.VisualBasic.TriState" /> constant that indicates whether a leading 0 is displayed for fractional values.</span>
          </span>
          <span data-ttu-id="267d1-600">See "Settings" for values.</span>
          <span class="sxs-lookup">
            <span data-stu-id="267d1-600">See "Settings" for values.</span>
          </span>
        </param>
        <param name="UseParensForNegativeNumbers">
          <span data-ttu-id="267d1-601">Optional.</span>
          <span class="sxs-lookup">
            <span data-stu-id="267d1-601">Optional.</span>
          </span>
          <span data-ttu-id="267d1-602">
            <see cref="T:Microsoft.VisualBasic.TriState" /> constant that indicates whether to place negative values within parentheses.</span>
          <span class="sxs-lookup">
            <span data-stu-id="267d1-602">
              <see cref="T:Microsoft.VisualBasic.TriState" /> constant that indicates whether to place negative values within parentheses.</span>
          </span>
          <span data-ttu-id="267d1-603">See "Settings" for values.</span>
          <span class="sxs-lookup">
            <span data-stu-id="267d1-603">See "Settings" for values.</span>
          </span>
        </param>
        <param name="GroupDigits">
          <span data-ttu-id="267d1-604">Optional.</span>
          <span class="sxs-lookup">
            <span data-stu-id="267d1-604">Optional.</span>
          </span>
          <span data-ttu-id="267d1-605">
            <see cref="T:Microsoft.VisualBasic.TriState" /> constant that indicates whether or not numbers are grouped using the group delimiter specified in the locale settings.</span>
          <span class="sxs-lookup">
            <span data-stu-id="267d1-605">
              <see cref="T:Microsoft.VisualBasic.TriState" /> constant that indicates whether or not numbers are grouped using the group delimiter specified in the locale settings.</span>
          </span>
          <span data-ttu-id="267d1-606">See "Settings" for values.</span>
          <span class="sxs-lookup">
            <span data-stu-id="267d1-606">See "Settings" for values.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="267d1-607">Returns an expression formatted as a number.</span>
          <span class="sxs-lookup">
            <span data-stu-id="267d1-607">Returns an expression formatted as a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="267d1-608">Returns an expression formatted as a number.</span>
          <span class="sxs-lookup">
            <span data-stu-id="267d1-608">Returns an expression formatted as a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="267d1-609">Cuando uno o más argumentos opcionales se omiten los valores de los argumentos omitidos se proporcionan mediante la configuración regional.</span><span class="sxs-lookup"><span data-stu-id="267d1-609">When one or more optional arguments are omitted the values for omitted arguments are provided by the locale settings.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="267d1-610">Toda la información de configuración procede de la configuración regional de la aplicación.</span><span class="sxs-lookup"><span data-stu-id="267d1-610">All settings information comes from the locale of the application.</span></span> <span data-ttu-id="267d1-611">De forma predeterminada, que será la configuración regional establecida en el panel de control.</span><span class="sxs-lookup"><span data-stu-id="267d1-611">By default, that will be the locale set in the control panel.</span></span> <span data-ttu-id="267d1-612">Sin embargo, se puede cambiar mediante programación con .NET Framework.</span><span class="sxs-lookup"><span data-stu-id="267d1-612">However, it may be changed programmatically by using the .NET Framework.</span></span>  
  
 <span data-ttu-id="267d1-613">El `IncludeLeadingDigit`, `UseParensForNegativeNumbers`, y `GroupDigits` argumentos con los siguientes valores.</span><span class="sxs-lookup"><span data-stu-id="267d1-613">The `IncludeLeadingDigit`, `UseParensForNegativeNumbers`, and `GroupDigits` arguments have the following settings.</span></span>  
  
|<span data-ttu-id="267d1-614">Constante</span><span class="sxs-lookup"><span data-stu-id="267d1-614">Constant</span></span>|<span data-ttu-id="267d1-615">Descripción</span><span class="sxs-lookup"><span data-stu-id="267d1-615">Description</span></span>|  
|-|-|  
|`TriState.True`|<span data-ttu-id="267d1-616">True</span><span class="sxs-lookup"><span data-stu-id="267d1-616">True</span></span>|  
|`TriState.False`|<span data-ttu-id="267d1-617">False</span><span class="sxs-lookup"><span data-stu-id="267d1-617">False</span></span>|  
|`TriState.UseDefault`|<span data-ttu-id="267d1-618">Configuración regional del equipo</span><span class="sxs-lookup"><span data-stu-id="267d1-618">The computer's regional settings</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="267d1-619">Este ejemplo se muestra el `FormatNumber` función.</span><span class="sxs-lookup"><span data-stu-id="267d1-619">This example demonstrates the `FormatNumber` function.</span></span>  
  
 [!code-vb[VbVbalrStrings#15](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#15)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidCastException">
          <span data-ttu-id="267d1-620">Type is not numeric.</span>
          <span class="sxs-lookup">
            <span data-stu-id="267d1-620">Type is not numeric.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.Strings.FormatCurrency(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.FormatDateTime(System.DateTime,Microsoft.VisualBasic.DateFormat)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.FormatPercent(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)" />
        <altmember cref="T:Microsoft.VisualBasic.TriState" />
        <altmember cref="T:System.InvalidCastException" />
      </Docs>
    </Member>
    <Member MemberName="FormatPercent">
      <MemberSignature Language="C#" Value="public static string FormatPercent (object Expression, int NumDigitsAfterDecimal = -1, Microsoft.VisualBasic.TriState IncludeLeadingDigit = Microsoft.VisualBasic.TriState.UseDefault, Microsoft.VisualBasic.TriState UseParensForNegativeNumbers = Microsoft.VisualBasic.TriState.UseDefault, Microsoft.VisualBasic.TriState GroupDigits = Microsoft.VisualBasic.TriState.UseDefault);" />
      <MemberSignature Language="ILAsm" Value=".method public static string FormatPercent(object Expression, int32 NumDigitsAfterDecimal, valuetype Microsoft.VisualBasic.TriState IncludeLeadingDigit, valuetype Microsoft.VisualBasic.TriState UseParensForNegativeNumbers, valuetype Microsoft.VisualBasic.TriState GroupDigits) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.FormatPercent(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)" />
      <MemberSignature Language="VB.NET" Value="Public Function FormatPercent (Expression As Object, Optional NumDigitsAfterDecimal As Integer = -1, Optional IncludeLeadingDigit As TriState = Microsoft.VisualBasic.TriState.UseDefault, Optional UseParensForNegativeNumbers As TriState = Microsoft.VisualBasic.TriState.UseDefault, Optional GroupDigits As TriState = Microsoft.VisualBasic.TriState.UseDefault) As String" />
      <MemberSignature Language="F#" Value="static member FormatPercent : obj * int * Microsoft.VisualBasic.TriState * Microsoft.VisualBasic.TriState * Microsoft.VisualBasic.TriState -&gt; string" Usage="Microsoft.VisualBasic.Strings.FormatPercent (Expression, NumDigitsAfterDecimal, IncludeLeadingDigit, UseParensForNegativeNumbers, GroupDigits)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Object" />
        <Parameter Name="NumDigitsAfterDecimal" Type="System.Int32" />
        <Parameter Name="IncludeLeadingDigit" Type="Microsoft.VisualBasic.TriState" />
        <Parameter Name="UseParensForNegativeNumbers" Type="Microsoft.VisualBasic.TriState" />
        <Parameter Name="GroupDigits" Type="Microsoft.VisualBasic.TriState" />
      </Parameters>
      <Docs>
        <param name="Expression">
          <span data-ttu-id="267d1-621">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="267d1-621">Required.</span>
          </span>
          <span data-ttu-id="267d1-622">Expression to be formatted.</span>
          <span class="sxs-lookup">
            <span data-stu-id="267d1-622">Expression to be formatted.</span>
          </span>
        </param>
        <param name="NumDigitsAfterDecimal">
          <span data-ttu-id="267d1-623">Optional.</span>
          <span class="sxs-lookup">
            <span data-stu-id="267d1-623">Optional.</span>
          </span>
          <span data-ttu-id="267d1-624">Numeric value indicating how many places to the right of the decimal are displayed.</span>
          <span class="sxs-lookup">
            <span data-stu-id="267d1-624">Numeric value indicating how many places to the right of the decimal are displayed.</span>
          </span>
          <span data-ttu-id="267d1-625">Default value is –1, which indicates that the locale settings are used.</span>
          <span class="sxs-lookup">
            <span data-stu-id="267d1-625">Default value is –1, which indicates that the locale settings are used.</span>
          </span>
        </param>
        <param name="IncludeLeadingDigit">
          <span data-ttu-id="267d1-626">Optional.</span>
          <span class="sxs-lookup">
            <span data-stu-id="267d1-626">Optional.</span>
          </span>
          <span data-ttu-id="267d1-627">
            <see cref="T:Microsoft.VisualBasic.TriState" /> constant that indicates whether or not a leading zero displays for fractional values.</span>
          <span class="sxs-lookup">
            <span data-stu-id="267d1-627">
              <see cref="T:Microsoft.VisualBasic.TriState" /> constant that indicates whether or not a leading zero displays for fractional values.</span>
          </span>
          <span data-ttu-id="267d1-628">See "Settings" for values.</span>
          <span class="sxs-lookup">
            <span data-stu-id="267d1-628">See "Settings" for values.</span>
          </span>
        </param>
        <param name="UseParensForNegativeNumbers">
          <span data-ttu-id="267d1-629">Optional.</span>
          <span class="sxs-lookup">
            <span data-stu-id="267d1-629">Optional.</span>
          </span>
          <span data-ttu-id="267d1-630">
            <see cref="T:Microsoft.VisualBasic.TriState" /> constant that indicates whether or not to place negative values within parentheses.</span>
          <span class="sxs-lookup">
            <span data-stu-id="267d1-630">
              <see cref="T:Microsoft.VisualBasic.TriState" /> constant that indicates whether or not to place negative values within parentheses.</span>
          </span>
          <span data-ttu-id="267d1-631">See "Settings" for values.</span>
          <span class="sxs-lookup">
            <span data-stu-id="267d1-631">See "Settings" for values.</span>
          </span>
        </param>
        <param name="GroupDigits">
          <span data-ttu-id="267d1-632">Optional.</span>
          <span class="sxs-lookup">
            <span data-stu-id="267d1-632">Optional.</span>
          </span>
          <span data-ttu-id="267d1-633">
            <see cref="T:Microsoft.VisualBasic.TriState" /> constant that indicates whether or not numbers are grouped using the group delimiter specified in the locale settings.</span>
          <span class="sxs-lookup">
            <span data-stu-id="267d1-633">
              <see cref="T:Microsoft.VisualBasic.TriState" /> constant that indicates whether or not numbers are grouped using the group delimiter specified in the locale settings.</span>
          </span>
          <span data-ttu-id="267d1-634">See "Settings" for values.</span>
          <span class="sxs-lookup">
            <span data-stu-id="267d1-634">See "Settings" for values.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="267d1-635">Returns an expression formatted as a percentage (that is, multiplied by 100) with a trailing % character.</span>
          <span class="sxs-lookup">
            <span data-stu-id="267d1-635">Returns an expression formatted as a percentage (that is, multiplied by 100) with a trailing % character.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="267d1-636">Returns an expression formatted as a percentage (that is, multiplied by 100) with a trailing % character.</span>
          <span class="sxs-lookup">
            <span data-stu-id="267d1-636">Returns an expression formatted as a percentage (that is, multiplied by 100) with a trailing % character.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="267d1-637">Cuando se omiten uno o más argumentos opcionales, se proporcionan los valores de los argumentos omitidos por la configuración regional.</span><span class="sxs-lookup"><span data-stu-id="267d1-637">When one or more optional arguments are omitted, the values for omitted arguments are provided by the locale settings.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="267d1-638">Toda la información de configuración procede de la configuración regional de la aplicación.</span><span class="sxs-lookup"><span data-stu-id="267d1-638">All settings information comes from the locale of the application.</span></span> <span data-ttu-id="267d1-639">De forma predeterminada, que será la configuración regional establecida en el panel de control.</span><span class="sxs-lookup"><span data-stu-id="267d1-639">By default, that will be the locale set in the control panel.</span></span> <span data-ttu-id="267d1-640">Sin embargo, se puede cambiar mediante programación con .NET Framework.</span><span class="sxs-lookup"><span data-stu-id="267d1-640">However, it may be changed programmatically by using the .NET Framework.</span></span>  
  
 <span data-ttu-id="267d1-641">El `IncludeLeadingDigit`, `UseParensForNegativeNumbers`, y `GroupDigits` argumentos con los siguientes valores.</span><span class="sxs-lookup"><span data-stu-id="267d1-641">The `IncludeLeadingDigit`, `UseParensForNegativeNumbers`, and `GroupDigits` arguments have the following settings.</span></span>  
  
|<span data-ttu-id="267d1-642">Constante</span><span class="sxs-lookup"><span data-stu-id="267d1-642">Constant</span></span>|<span data-ttu-id="267d1-643">Descripción</span><span class="sxs-lookup"><span data-stu-id="267d1-643">Description</span></span>|  
|-|-|  
|`TriState.True`|<span data-ttu-id="267d1-644">True</span><span class="sxs-lookup"><span data-stu-id="267d1-644">True</span></span>|  
|`TriState.False`|<span data-ttu-id="267d1-645">False</span><span class="sxs-lookup"><span data-stu-id="267d1-645">False</span></span>|  
|`TriState.Default`|<span data-ttu-id="267d1-646">Configuración regional del equipo</span><span class="sxs-lookup"><span data-stu-id="267d1-646">The computer's regional settings</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="267d1-647">En este ejemplo se muestra el uso de la `FormatPercent` función.</span><span class="sxs-lookup"><span data-stu-id="267d1-647">This example illustrates the use of the `FormatPercent` function.</span></span>  
  
 [!code-vb[VbVbalrStrings#28](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#28)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidCastException">
          <span data-ttu-id="267d1-648">Type is not numeric.</span>
          <span class="sxs-lookup">
            <span data-stu-id="267d1-648">Type is not numeric.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.Strings.FormatCurrency(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.FormatDateTime(System.DateTime,Microsoft.VisualBasic.DateFormat)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.FormatNumber(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Format(System.Object,System.String)" />
        <altmember cref="T:Microsoft.VisualBasic.TriState" />
        <altmember cref="T:System.InvalidCastException" />
      </Docs>
    </Member>
    <Member MemberName="GetChar">
      <MemberSignature Language="C#" Value="public static char GetChar (string str, int Index);" />
      <MemberSignature Language="ILAsm" Value=".method public static char GetChar(string str, int32 Index) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.GetChar(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetChar (str As String, Index As Integer) As Char" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static char GetChar(System::String ^ str, int Index);" />
      <MemberSignature Language="F#" Value="static member GetChar : string * int -&gt; char" Usage="Microsoft.VisualBasic.Strings.GetChar (str, Index)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="str" Type="System.String" />
        <Parameter Name="Index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="str">
          <span data-ttu-id="267d1-649">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="267d1-649">Required.</span>
          </span>
          <span data-ttu-id="267d1-650">Any valid <see langword="String" /> expression.</span>
          <span class="sxs-lookup">
            <span data-stu-id="267d1-650">Any valid <see langword="String" /> expression.</span>
          </span>
        </param>
        <param name="Index">
          <span data-ttu-id="267d1-651">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="267d1-651">Required.</span>
          </span>
          <span data-ttu-id="267d1-652">
            <see langword="Integer" /> expression.</span>
          <span class="sxs-lookup">
            <span data-stu-id="267d1-652">
              <see langword="Integer" /> expression.</span>
          </span>
          <span data-ttu-id="267d1-653">The (1-based) index of the character in <c>str</c> to be returned.</span>
          <span class="sxs-lookup">
            <span data-stu-id="267d1-653">The (1-based) index of the character in <c>str</c> to be returned.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="267d1-654">Returns a <see langword="Char" /> value representing the character from the specified index in the supplied string.</span>
          <span class="sxs-lookup">
            <span data-stu-id="267d1-654">Returns a <see langword="Char" /> value representing the character from the specified index in the supplied string.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="267d1-655">
            <see langword="Char" /> value representing the character from the specified index in the supplied string.</span>
          <span class="sxs-lookup">
            <span data-stu-id="267d1-655">
              <see langword="Char" /> value representing the character from the specified index in the supplied string.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="267d1-656">Si `Index` es menor que 1 o mayor que el índice del último carácter en `str`, un `ArgumentException` se produce.</span><span class="sxs-lookup"><span data-stu-id="267d1-656">If `Index` is less than 1 or greater than the index of the last character in `str`, an `ArgumentException` is thrown.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="267d1-657">En este ejemplo se muestra cómo usar el `GetChar` función para devolver un carácter de un índice especificado en un `String`.</span><span class="sxs-lookup"><span data-stu-id="267d1-657">This example shows how to use the `GetChar` function to return a character from a specified index in a `String`.</span></span>  
  
 [!code-vb[VbVbalrStrings#23](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#23)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="267d1-658">
            <paramref name="str" /> is <see langword="Nothing" />, <paramref name="Index" /> &lt; 1, or <paramref name="Index" /> is greater than index of last character of <paramref name="str" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="267d1-658">
              <paramref name="str" /> is <see langword="Nothing" />, <paramref name="Index" /> &lt; 1, or <paramref name="Index" /> is greater than index of last character of <paramref name="str" />.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Mid" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <MemberGroup MemberName="InStr">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="267d1-659">Returns an integer specifying the start position of the first occurrence of one string within another.</span>
          <span class="sxs-lookup">
            <span data-stu-id="267d1-659">Returns an integer specifying the start position of the first occurrence of one string within another.</span>
          </span>
          <span data-ttu-id="267d1-660">The integer is a one-based index if a match is found.</span>
          <span class="sxs-lookup">
            <span data-stu-id="267d1-660">The integer is a one-based index if a match is found.</span>
          </span>
          <span data-ttu-id="267d1-661">If no match is found, the function returns zero.</span>
          <span class="sxs-lookup">
            <span data-stu-id="267d1-661">If no match is found, the function returns zero.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="InStr">
      <MemberSignature Language="C#" Value="public static int InStr (string String1, string String2, Microsoft.VisualBasic.CompareMethod Compare = Microsoft.VisualBasic.CompareMethod.Binary);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 InStr(string String1, string String2, valuetype Microsoft.VisualBasic.CompareMethod Compare) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.InStr(System.String,System.String,Microsoft.VisualBasic.CompareMethod)" />
      <MemberSignature Language="VB.NET" Value="Public Function InStr (String1 As String, String2 As String, Optional Compare As CompareMethod = Microsoft.VisualBasic.CompareMethod.Binary) As Integer" />
      <MemberSignature Language="F#" Value="static member InStr : string * string * Microsoft.VisualBasic.CompareMethod -&gt; int" Usage="Microsoft.VisualBasic.Strings.InStr (String1, String2, Compare)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="String1" Type="System.String" />
        <Parameter Name="String2" Type="System.String" />
        <Parameter Name="Compare" Type="Microsoft.VisualBasic.CompareMethod">
          <Attributes>
            <Attribute>
              <AttributeName>Microsoft.VisualBasic.CompilerServices.OptionCompare</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="String1">
          <span data-ttu-id="267d1-662">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="267d1-662">Required.</span>
          </span>
          <span data-ttu-id="267d1-663">
            <see langword="String" /> expression being searched.</span>
          <span class="sxs-lookup">
            <span data-stu-id="267d1-663">
              <see langword="String" /> expression being searched.</span>
          </span>
        </param>
        <param name="String2">
          <span data-ttu-id="267d1-664">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="267d1-664">Required.</span>
          </span>
          <span data-ttu-id="267d1-665">
            <see langword="String" /> expression sought.</span>
          <span class="sxs-lookup">
            <span data-stu-id="267d1-665">
              <see langword="String" /> expression sought.</span>
          </span>
        </param>
        <param name="Compare">
          <span data-ttu-id="267d1-666">Optional.</span>
          <span class="sxs-lookup">
            <span data-stu-id="267d1-666">Optional.</span>
          </span>
          <span data-ttu-id="267d1-667">Specifies the type of string comparison.</span>
          <span class="sxs-lookup">
            <span data-stu-id="267d1-667">Specifies the type of string comparison.</span>
          </span>
          <span data-ttu-id="267d1-668">If <c>Compare</c> is omitted, the <see langword="Option Compare" /> setting determines the type of comparison.</span>
          <span class="sxs-lookup">
            <span data-stu-id="267d1-668">If <c>Compare</c> is omitted, the <see langword="Option Compare" /> setting determines the type of comparison.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="267d1-669">Returns an integer specifying the start position of the first occurrence of one string within another.</span>
          <span class="sxs-lookup">
            <span data-stu-id="267d1-669">Returns an integer specifying the start position of the first occurrence of one string within another.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="267d1-670">
            <list type="table">
              <item>
                <term> If  </term>
                <description> InStr returns  </description>
              </item>
              <item>
                <term>
                  <paramref name="String1" /> is zero length or <see langword="Nothing" /></term>
                <description> 0  </description>
              </item>
              <item>
                <term>
                  <paramref name="String2" /> is zero length or <see langword="Nothing" /></term>
                <description> The starting position for the search, which defaults to the first character position.  </description>
              </item>
              <item>
                <term>
                  <paramref name="String2" /> is not found  </term>
                <description> 0  </description>
              </item>
              <item>
                <term>
                  <paramref name="String2" /> is found within <paramref name="String1" /></term>
                <description> Position where match begins  </description>
              </item>
              <item>
                <term></term>
                <description></description>
              </item>
            </list>
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="267d1-670">
              <list type="table">
                <item>
                  <term> If  </term>
                  <description> InStr returns  </description>
                </item>
                <item>
                  <term>
                    <paramref name="String1" /> is zero length or <see langword="Nothing" /></term>
                  <description> 0  </description>
                </item>
                <item>
                  <term>
                    <paramref name="String2" /> is zero length or <see langword="Nothing" /></term>
                  <description> The starting position for the search, which defaults to the first character position.  </description>
                </item>
                <item>
                  <term>
                    <paramref name="String2" /> is not found  </term>
                  <description> 0  </description>
                </item>
                <item>
                  <term>
                    <paramref name="String2" /> is found within <paramref name="String1" /></term>
                  <description> Position where match begins  </description>
                </item>
                <item>
                  <term></term>
                  <description></description>
                </item>
              </list>
            </span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="267d1-671">Normalmente, el `InStr` función se utiliza cuando el análisis de cadenas.</span><span class="sxs-lookup"><span data-stu-id="267d1-671">Typically, the `InStr` function is used when parsing strings.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="267d1-672">El `InStrB` función en las versiones anteriores de Visual Basic devuelven un número de bytes en lugar de una posición de carácter.</span><span class="sxs-lookup"><span data-stu-id="267d1-672">The `InStrB` function in previous versions of Visual Basic returns a number of bytes rather than a character position.</span></span> <span data-ttu-id="267d1-673">Se utiliza principalmente para convertir cadenas en aplicaciones de caracteres de doble byte (DBCS).</span><span class="sxs-lookup"><span data-stu-id="267d1-673">It is used primarily for converting strings in double-byte character set (DBCS) applications.</span></span> <span data-ttu-id="267d1-674">Todas las cadenas de Visual Basic 2005 están en Unicode, y `InStrB` ya no se admite.</span><span class="sxs-lookup"><span data-stu-id="267d1-674">All Visual Basic 2005 strings are in Unicode, and `InStrB` is no longer supported.</span></span>  
  
 <span data-ttu-id="267d1-675">La configuración del argumento `Compare` es:</span><span class="sxs-lookup"><span data-stu-id="267d1-675">The `Compare` argument settings are:</span></span>  
  
|<span data-ttu-id="267d1-676">Constante</span><span class="sxs-lookup"><span data-stu-id="267d1-676">Constant</span></span>|<span data-ttu-id="267d1-677">Valor</span><span class="sxs-lookup"><span data-stu-id="267d1-677">Value</span></span>|<span data-ttu-id="267d1-678">Descripción</span><span class="sxs-lookup"><span data-stu-id="267d1-678">Description</span></span>|  
|-|-|-|  
|`Binary`|<span data-ttu-id="267d1-679">0</span><span class="sxs-lookup"><span data-stu-id="267d1-679">0</span></span>|<span data-ttu-id="267d1-680">Realiza una comparación binaria</span><span class="sxs-lookup"><span data-stu-id="267d1-680">Performs a binary comparison</span></span>|  
|`Text`|<span data-ttu-id="267d1-681">1</span><span class="sxs-lookup"><span data-stu-id="267d1-681">1</span></span>|<span data-ttu-id="267d1-682">Realiza una comparación de texto</span><span class="sxs-lookup"><span data-stu-id="267d1-682">Performs a text comparison</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="267d1-683">Este ejemplo se usa el `InStr` función para devolver la posición de la primera aparición de una cadena dentro de otra.</span><span class="sxs-lookup"><span data-stu-id="267d1-683">This example uses the `InStr` function to return the position of the first occurrence of one string within another.</span></span>  
  
 [!code-vb[VbVbalrStrings#8](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#8)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Strings.InStrRev(System.String,System.String,System.Int32,Microsoft.VisualBasic.CompareMethod)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.StrComp(System.String,System.String,Microsoft.VisualBasic.CompareMethod)" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <Member MemberName="InStr">
      <MemberSignature Language="C#" Value="public static int InStr (int Start, string String1, string String2, Microsoft.VisualBasic.CompareMethod Compare = Microsoft.VisualBasic.CompareMethod.Binary);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 InStr(int32 Start, string String1, string String2, valuetype Microsoft.VisualBasic.CompareMethod Compare) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.InStr(System.Int32,System.String,System.String,Microsoft.VisualBasic.CompareMethod)" />
      <MemberSignature Language="VB.NET" Value="Public Function InStr (Start As Integer, String1 As String, String2 As String, Optional Compare As CompareMethod = Microsoft.VisualBasic.CompareMethod.Binary) As Integer" />
      <MemberSignature Language="F#" Value="static member InStr : int * string * string * Microsoft.VisualBasic.CompareMethod -&gt; int" Usage="Microsoft.VisualBasic.Strings.InStr (Start, String1, String2, Compare)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Start" Type="System.Int32" />
        <Parameter Name="String1" Type="System.String" />
        <Parameter Name="String2" Type="System.String" />
        <Parameter Name="Compare" Type="Microsoft.VisualBasic.CompareMethod">
          <Attributes>
            <Attribute>
              <AttributeName>Microsoft.VisualBasic.CompilerServices.OptionCompare</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="Start">
          <span data-ttu-id="267d1-684">Optional.</span>
          <span class="sxs-lookup">
            <span data-stu-id="267d1-684">Optional.</span>
          </span>
          <span data-ttu-id="267d1-685">Numeric expression that sets the starting position for each search.</span>
          <span class="sxs-lookup">
            <span data-stu-id="267d1-685">Numeric expression that sets the starting position for each search.</span>
          </span>
          <span data-ttu-id="267d1-686">If omitted, search begins at the first character position.</span>
          <span class="sxs-lookup">
            <span data-stu-id="267d1-686">If omitted, search begins at the first character position.</span>
          </span>
          <span data-ttu-id="267d1-687">The start index is 1-based.</span>
          <span class="sxs-lookup">
            <span data-stu-id="267d1-687">The start index is 1-based.</span>
          </span>
        </param>
        <param name="String1">
          <span data-ttu-id="267d1-688">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="267d1-688">Required.</span>
          </span>
          <span data-ttu-id="267d1-689">
            <see langword="String" /> expression being searched.</span>
          <span class="sxs-lookup">
            <span data-stu-id="267d1-689">
              <see langword="String" /> expression being searched.</span>
          </span>
        </param>
        <param name="String2">
          <span data-ttu-id="267d1-690">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="267d1-690">Required.</span>
          </span>
          <span data-ttu-id="267d1-691">
            <see langword="String" /> expression sought.</span>
          <span class="sxs-lookup">
            <span data-stu-id="267d1-691">
              <see langword="String" /> expression sought.</span>
          </span>
        </param>
        <param name="Compare">
          <span data-ttu-id="267d1-692">Optional.</span>
          <span class="sxs-lookup">
            <span data-stu-id="267d1-692">Optional.</span>
          </span>
          <span data-ttu-id="267d1-693">Specifies the type of string comparison.</span>
          <span class="sxs-lookup">
            <span data-stu-id="267d1-693">Specifies the type of string comparison.</span>
          </span>
          <span data-ttu-id="267d1-694">If <c>Compare</c> is omitted, the <see langword="Option Compare" /> setting determines the type of comparison.</span>
          <span class="sxs-lookup">
            <span data-stu-id="267d1-694">If <c>Compare</c> is omitted, the <see langword="Option Compare" /> setting determines the type of comparison.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="267d1-695">Returns an integer specifying the start position of the first occurrence of one string within another.</span>
          <span class="sxs-lookup">
            <span data-stu-id="267d1-695">Returns an integer specifying the start position of the first occurrence of one string within another.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="267d1-696">
            <list type="table">
              <item>
                <term> If  </term>
                <description> InStr returns  </description>
              </item>
              <item>
                <term>
                  <paramref name="String1" /> is zero length or <see langword="Nothing" /></term>
                <description> 0  </description>
              </item>
              <item>
                <term>
                  <paramref name="String2" /> is zero length or <see langword="Nothing" /></term>
                <description>
                  <paramref name="start" />
                </description>
              </item>
              <item>
                <term>
                  <paramref name="String2" /> is not found  </term>
                <description> 0  </description>
              </item>
              <item>
                <term>
                  <paramref name="String2" /> is found within <paramref name="String1" /></term>
                <description> Position where match begins  </description>
              </item>
              <item>
                <term>
                  <paramref name="Start" /> &gt; length of <paramref name="String1" /></term>
                <description> 0  </description>
              </item>
            </list>
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="267d1-696">
              <list type="table">
                <item>
                  <term> If  </term>
                  <description> InStr returns  </description>
                </item>
                <item>
                  <term>
                    <paramref name="String1" /> is zero length or <see langword="Nothing" /></term>
                  <description> 0  </description>
                </item>
                <item>
                  <term>
                    <paramref name="String2" /> is zero length or <see langword="Nothing" /></term>
                  <description>
                    <paramref name="start" />
                  </description>
                </item>
                <item>
                  <term>
                    <paramref name="String2" /> is not found  </term>
                  <description> 0  </description>
                </item>
                <item>
                  <term>
                    <paramref name="String2" /> is found within <paramref name="String1" /></term>
                  <description> Position where match begins  </description>
                </item>
                <item>
                  <term>
                    <paramref name="Start" /> &gt; length of <paramref name="String1" /></term>
                  <description> 0  </description>
                </item>
              </list>
            </span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="267d1-697">Normalmente, el `InStr` función se utiliza cuando el análisis de cadenas.</span><span class="sxs-lookup"><span data-stu-id="267d1-697">Typically, the `InStr` function is used when parsing strings.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="267d1-698">El `InStrB` función en las versiones anteriores de Visual Basic devuelven un número de bytes en lugar de una posición de carácter.</span><span class="sxs-lookup"><span data-stu-id="267d1-698">The `InStrB` function in previous versions of Visual Basic returns a number of bytes rather than a character position.</span></span> <span data-ttu-id="267d1-699">Se utiliza principalmente para convertir cadenas en aplicaciones de caracteres de doble byte (DBCS).</span><span class="sxs-lookup"><span data-stu-id="267d1-699">It is used primarily for converting strings in double-byte character set (DBCS) applications.</span></span> <span data-ttu-id="267d1-700">Todas las cadenas de Visual Basic 2005 están en Unicode, y `InStrB` ya no se admite.</span><span class="sxs-lookup"><span data-stu-id="267d1-700">All Visual Basic 2005 strings are in Unicode, and `InStrB` is no longer supported.</span></span>  
  
 <span data-ttu-id="267d1-701">La configuración del argumento `Compare` es:</span><span class="sxs-lookup"><span data-stu-id="267d1-701">The `Compare` argument settings are:</span></span>  
  
|<span data-ttu-id="267d1-702">Constante</span><span class="sxs-lookup"><span data-stu-id="267d1-702">Constant</span></span>|<span data-ttu-id="267d1-703">Valor</span><span class="sxs-lookup"><span data-stu-id="267d1-703">Value</span></span>|<span data-ttu-id="267d1-704">Descripción</span><span class="sxs-lookup"><span data-stu-id="267d1-704">Description</span></span>|  
|-|-|-|  
|`Binary`|<span data-ttu-id="267d1-705">0</span><span class="sxs-lookup"><span data-stu-id="267d1-705">0</span></span>|<span data-ttu-id="267d1-706">Realiza una comparación binaria</span><span class="sxs-lookup"><span data-stu-id="267d1-706">Performs a binary comparison</span></span>|  
|`Text`|<span data-ttu-id="267d1-707">1</span><span class="sxs-lookup"><span data-stu-id="267d1-707">1</span></span>|<span data-ttu-id="267d1-708">Realiza una comparación de texto</span><span class="sxs-lookup"><span data-stu-id="267d1-708">Performs a text comparison</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="267d1-709">Este ejemplo se usa el `InStr` función para devolver la posición de la primera aparición de una cadena dentro de otra.</span><span class="sxs-lookup"><span data-stu-id="267d1-709">This example uses the `InStr` function to return the position of the first occurrence of one string within another.</span></span>  
  
 [!code-vb[VbVbalrStrings#8](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#8)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="267d1-710">
            <paramref name="Start" /> &lt; 1.</span>
          <span class="sxs-lookup">
            <span data-stu-id="267d1-710">
              <paramref name="Start" /> &lt; 1.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.Strings.InStrRev(System.String,System.String,System.Int32,Microsoft.VisualBasic.CompareMethod)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.StrComp(System.String,System.String,Microsoft.VisualBasic.CompareMethod)" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <Member MemberName="InStrRev">
      <MemberSignature Language="C#" Value="public static int InStrRev (string StringCheck, string StringMatch, int Start = -1, Microsoft.VisualBasic.CompareMethod Compare = Microsoft.VisualBasic.CompareMethod.Binary);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 InStrRev(string StringCheck, string StringMatch, int32 Start, valuetype Microsoft.VisualBasic.CompareMethod Compare) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.InStrRev(System.String,System.String,System.Int32,Microsoft.VisualBasic.CompareMethod)" />
      <MemberSignature Language="VB.NET" Value="Public Function InStrRev (StringCheck As String, StringMatch As String, Optional Start As Integer = -1, Optional Compare As CompareMethod = Microsoft.VisualBasic.CompareMethod.Binary) As Integer" />
      <MemberSignature Language="F#" Value="static member InStrRev : string * string * int * Microsoft.VisualBasic.CompareMethod -&gt; int" Usage="Microsoft.VisualBasic.Strings.InStrRev (StringCheck, StringMatch, Start, Compare)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="StringCheck" Type="System.String" />
        <Parameter Name="StringMatch" Type="System.String" />
        <Parameter Name="Start" Type="System.Int32" />
        <Parameter Name="Compare" Type="Microsoft.VisualBasic.CompareMethod">
          <Attributes>
            <Attribute>
              <AttributeName>Microsoft.VisualBasic.CompilerServices.OptionCompare</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="StringCheck">
          <span data-ttu-id="267d1-711">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="267d1-711">Required.</span>
          </span>
          <span data-ttu-id="267d1-712">String expression being searched.</span>
          <span class="sxs-lookup">
            <span data-stu-id="267d1-712">String expression being searched.</span>
          </span>
        </param>
        <param name="StringMatch">
          <span data-ttu-id="267d1-713">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="267d1-713">Required.</span>
          </span>
          <span data-ttu-id="267d1-714">String expression being searched for.</span>
          <span class="sxs-lookup">
            <span data-stu-id="267d1-714">String expression being searched for.</span>
          </span>
        </param>
        <param name="Start">
          <span data-ttu-id="267d1-715">Optional.</span>
          <span class="sxs-lookup">
            <span data-stu-id="267d1-715">Optional.</span>
          </span>
          <span data-ttu-id="267d1-716">Numeric expression setting the one-based starting position for each search, starting from the left side of the string.</span>
          <span class="sxs-lookup">
            <span data-stu-id="267d1-716">Numeric expression setting the one-based starting position for each search, starting from the left side of the string.</span>
          </span>
          <span data-ttu-id="267d1-717">If <c>Start</c> is omitted then –1 is used, meaning the search begins at the last character position.</span>
          <span class="sxs-lookup">
            <span data-stu-id="267d1-717">If <c>Start</c> is omitted then –1 is used, meaning the search begins at the last character position.</span>
          </span>
          <span data-ttu-id="267d1-718">Search then proceeds from right to left.</span>
          <span class="sxs-lookup">
            <span data-stu-id="267d1-718">Search then proceeds from right to left.</span>
          </span>
        </param>
        <param name="Compare">
          <span data-ttu-id="267d1-719">Optional.</span>
          <span class="sxs-lookup">
            <span data-stu-id="267d1-719">Optional.</span>
          </span>
          <span data-ttu-id="267d1-720">Numeric value indicating the kind of comparison to use when evaluating substrings.</span>
          <span class="sxs-lookup">
            <span data-stu-id="267d1-720">Numeric value indicating the kind of comparison to use when evaluating substrings.</span>
          </span>
          <span data-ttu-id="267d1-721">If omitted, a binary comparison is performed.</span>
          <span class="sxs-lookup">
            <span data-stu-id="267d1-721">If omitted, a binary comparison is performed.</span>
          </span>
          <span data-ttu-id="267d1-722">See Settings for values.</span>
          <span class="sxs-lookup">
            <span data-stu-id="267d1-722">See Settings for values.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="267d1-723">Returns the position of the first occurrence of one string within another, starting from the right side of the string.</span>
          <span class="sxs-lookup">
            <span data-stu-id="267d1-723">Returns the position of the first occurrence of one string within another, starting from the right side of the string.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="267d1-724">
            <list type="table">
              <item>
                <term> If  </term>
                <description> InStrRev returns  </description>
              </item>
              <item>
                <term>
                  <paramref name="StringCheck" /> is zero-length  </term>
                <description> 0  </description>
              </item>
              <item>
                <term>
                  <paramref name="StringMatch" /> is zero-length  </term>
                <description>
                  <paramref name="Start" />
                </description>
              </item>
              <item>
                <term>
                  <paramref name="StringMatch" /> is not found  </term>
                <description> 0  </description>
              </item>
              <item>
                <term>
                  <paramref name="StringMatch" /> is found within <paramref name="StringCheck" /></term>
                <description> Position at which the first match is found, starting with the right side of the string.  </description>
              </item>
              <item>
                <term>
                  <paramref name="Start" /> is greater than length of <paramref name="StringMatch" /></term>
                <description> 0  </description>
              </item>
            </list>
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="267d1-724">
              <list type="table">
                <item>
                  <term> If  </term>
                  <description> InStrRev returns  </description>
                </item>
                <item>
                  <term>
                    <paramref name="StringCheck" /> is zero-length  </term>
                  <description> 0  </description>
                </item>
                <item>
                  <term>
                    <paramref name="StringMatch" /> is zero-length  </term>
                  <description>
                    <paramref name="Start" />
                  </description>
                </item>
                <item>
                  <term>
                    <paramref name="StringMatch" /> is not found  </term>
                  <description> 0  </description>
                </item>
                <item>
                  <term>
                    <paramref name="StringMatch" /> is found within <paramref name="StringCheck" /></term>
                  <description> Position at which the first match is found, starting with the right side of the string.  </description>
                </item>
                <item>
                  <term>
                    <paramref name="Start" /> is greater than length of <paramref name="StringMatch" /></term>
                  <description> 0  </description>
                </item>
              </list>
            </span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="267d1-725">Tenga en cuenta que la sintaxis de la `InStrRev` función no es igual que la sintaxis de la `InStr` función.</span><span class="sxs-lookup"><span data-stu-id="267d1-725">Note that the syntax for the `InStrRev` function is not the same as the syntax for the `InStr` function.</span></span>  
  
 <span data-ttu-id="267d1-726">El `Compare` argumento puede tener los siguientes valores.</span><span class="sxs-lookup"><span data-stu-id="267d1-726">The `Compare` argument can have the following values.</span></span>  
  
|<span data-ttu-id="267d1-727">Constante</span><span class="sxs-lookup"><span data-stu-id="267d1-727">Constant</span></span>|<span data-ttu-id="267d1-728">Descripción</span><span class="sxs-lookup"><span data-stu-id="267d1-728">Description</span></span>|  
|-|-|  
|`Binary`|<span data-ttu-id="267d1-729">Realiza una comparación binaria.</span><span class="sxs-lookup"><span data-stu-id="267d1-729">Performs a binary comparison.</span></span>|  
|`Text`|<span data-ttu-id="267d1-730">Realiza una comparación textual.</span><span class="sxs-lookup"><span data-stu-id="267d1-730">Performs a textual comparison.</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="267d1-731">En este ejemplo se muestra el uso de la `InStrRev` función.</span><span class="sxs-lookup"><span data-stu-id="267d1-731">This example demonstrates the use of the `InStrRev` function.</span></span>  
  
 [!code-vb[VbVbalrStrings#26](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#26)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="267d1-732">
            <paramref name="Start" /> = 0 or <paramref name="Start" /> &lt; -1.</span>
          <span class="sxs-lookup">
            <span data-stu-id="267d1-732">
              <paramref name="Start" /> = 0 or <paramref name="Start" /> &lt; -1.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.InStr" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Join">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="267d1-733">Returns a string created by joining a number of substrings contained in an array.</span>
          <span class="sxs-lookup">
            <span data-stu-id="267d1-733">Returns a string created by joining a number of substrings contained in an array.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Join">
      <MemberSignature Language="C#" Value="public static string Join (object[] SourceArray, string Delimiter = &quot; &quot;);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Join(object[] SourceArray, string Delimiter) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Join(System.Object[],System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function Join (SourceArray As Object(), Optional Delimiter As String = &quot; &quot;) As String" />
      <MemberSignature Language="F#" Value="static member Join : obj[] * string -&gt; string" Usage="Microsoft.VisualBasic.Strings.Join (SourceArray, Delimiter)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="SourceArray" Type="System.Object[]" />
        <Parameter Name="Delimiter" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="SourceArray">
          <span data-ttu-id="267d1-734">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="267d1-734">Required.</span>
          </span>
          <span data-ttu-id="267d1-735">One-dimensional array containing substrings to be joined.</span>
          <span class="sxs-lookup">
            <span data-stu-id="267d1-735">One-dimensional array containing substrings to be joined.</span>
          </span>
        </param>
        <param name="Delimiter">
          <span data-ttu-id="267d1-736">Optional.</span>
          <span class="sxs-lookup">
            <span data-stu-id="267d1-736">Optional.</span>
          </span>
          <span data-ttu-id="267d1-737">Any string, used to separate the substrings in the returned string.</span>
          <span class="sxs-lookup">
            <span data-stu-id="267d1-737">Any string, used to separate the substrings in the returned string.</span>
          </span>
          <span data-ttu-id="267d1-738">If omitted, the space character (" ") is used.</span>
          <span class="sxs-lookup">
            <span data-stu-id="267d1-738">If omitted, the space character (" ") is used.</span>
          </span>
          <span data-ttu-id="267d1-739">If <c>Delimiter</c> is a zero-length string ("") or <see langword="Nothing" />, all items in the list are concatenated with no delimiters.</span>
          <span class="sxs-lookup">
            <span data-stu-id="267d1-739">If <c>Delimiter</c> is a zero-length string ("") or <see langword="Nothing" />, all items in the list are concatenated with no delimiters.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="267d1-740">Returns a string created by joining a number of substrings contained in an array.</span>
          <span class="sxs-lookup">
            <span data-stu-id="267d1-740">Returns a string created by joining a number of substrings contained in an array.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="267d1-741">Returns a string created by joining a number of substrings contained in an array.</span>
          <span class="sxs-lookup">
            <span data-stu-id="267d1-741">Returns a string created by joining a number of substrings contained in an array.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="267d1-742">Hay una paridad entre la `Join` y `Split` funciones.</span><span class="sxs-lookup"><span data-stu-id="267d1-742">There is a parity between the `Join` and `Split` functions.</span></span> <span data-ttu-id="267d1-743">El `Join` función toma una matriz de cadenas y las combina con una cadena de delimitación para devolver una sola cadena.</span><span class="sxs-lookup"><span data-stu-id="267d1-743">The `Join` function takes an array of strings and joins them using a delimiter string, to return a single string.</span></span> <span data-ttu-id="267d1-744">El `Split` función toma una cadena y la separa en el delimitador para devolver una matriz de cadenas.</span><span class="sxs-lookup"><span data-stu-id="267d1-744">The `Split` function takes a string and separates it at the delimiter, to return an array of strings.</span></span> <span data-ttu-id="267d1-745">Sin embargo, una diferencia clave es que `Join` puede concatenar cadenas con cualquier cadena de delimitación, `Split` puede separar solo cadenas mediante un delimitador de carácter único.</span><span class="sxs-lookup"><span data-stu-id="267d1-745">However, a key difference is that `Join` can concatenate strings with any delimiter string, `Split` can only separate strings using a single character delimiter.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="267d1-746">En el ejemplo siguiente se muestra cómo usar el `Join` función para crear una lista de varias cadenas.</span><span class="sxs-lookup"><span data-stu-id="267d1-746">The following example demonstrates how to use the `Join` function to create a list from several strings.</span></span>  
  
 [!code-vb[VbVbalrStrings#10](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#10)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="267d1-747">
            <paramref name="SourceArray" /> is not one dimensional.</span>
          <span class="sxs-lookup">
            <span data-stu-id="267d1-747">
              <paramref name="SourceArray" /> is not one dimensional.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Split(System.String,System.String,System.Int32,Microsoft.VisualBasic.CompareMethod)" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <Member MemberName="Join">
      <MemberSignature Language="C#" Value="public static string Join (string[] SourceArray, string Delimiter = &quot; &quot;);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Join(string[] SourceArray, string Delimiter) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Join(System.String[],System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function Join (SourceArray As String(), Optional Delimiter As String = &quot; &quot;) As String" />
      <MemberSignature Language="F#" Value="static member Join : string[] * string -&gt; string" Usage="Microsoft.VisualBasic.Strings.Join (SourceArray, Delimiter)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="SourceArray" Type="System.String[]" />
        <Parameter Name="Delimiter" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="SourceArray">
          <span data-ttu-id="267d1-748">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="267d1-748">Required.</span>
          </span>
          <span data-ttu-id="267d1-749">One-dimensional array containing substrings to be joined.</span>
          <span class="sxs-lookup">
            <span data-stu-id="267d1-749">One-dimensional array containing substrings to be joined.</span>
          </span>
        </param>
        <param name="Delimiter">
          <span data-ttu-id="267d1-750">Optional.</span>
          <span class="sxs-lookup">
            <span data-stu-id="267d1-750">Optional.</span>
          </span>
          <span data-ttu-id="267d1-751">Any string, used to separate the substrings in the returned string.</span>
          <span class="sxs-lookup">
            <span data-stu-id="267d1-751">Any string, used to separate the substrings in the returned string.</span>
          </span>
          <span data-ttu-id="267d1-752">If omitted, the space character (" ") is used.</span>
          <span class="sxs-lookup">
            <span data-stu-id="267d1-752">If omitted, the space character (" ") is used.</span>
          </span>
          <span data-ttu-id="267d1-753">If <c>Delimiter</c> is a zero-length string ("") or <see langword="Nothing" />, all items in the list are concatenated with no delimiters.</span>
          <span class="sxs-lookup">
            <span data-stu-id="267d1-753">If <c>Delimiter</c> is a zero-length string ("") or <see langword="Nothing" />, all items in the list are concatenated with no delimiters.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="267d1-754">Returns a string created by joining a number of substrings contained in an array.</span>
          <span class="sxs-lookup">
            <span data-stu-id="267d1-754">Returns a string created by joining a number of substrings contained in an array.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="267d1-755">Returns a string created by joining a number of substrings contained in an array.</span>
          <span class="sxs-lookup">
            <span data-stu-id="267d1-755">Returns a string created by joining a number of substrings contained in an array.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="267d1-756">Hay una paridad entre la `Join` y `Split` funciones.</span><span class="sxs-lookup"><span data-stu-id="267d1-756">There is a parity between the `Join` and `Split` functions.</span></span> <span data-ttu-id="267d1-757">El `Join` función toma una matriz de cadenas y las combina con una cadena de delimitación para devolver una sola cadena.</span><span class="sxs-lookup"><span data-stu-id="267d1-757">The `Join` function takes an array of strings and joins them using a delimiter string, to return a single string.</span></span> <span data-ttu-id="267d1-758">El `Split` función toma una cadena y la separa en el delimitador para devolver una matriz de cadenas.</span><span class="sxs-lookup"><span data-stu-id="267d1-758">The `Split` function takes a string and separates it at the delimiter, to return an array of strings.</span></span> <span data-ttu-id="267d1-759">Sin embargo, una diferencia clave es que `Join` puede concatenar cadenas con cualquier cadena de delimitación, `Split` puede separar solo cadenas mediante un delimitador de carácter único.</span><span class="sxs-lookup"><span data-stu-id="267d1-759">However, a key difference is that `Join` can concatenate strings with any delimiter string, `Split` can only separate strings using a single character delimiter.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="267d1-760">En el ejemplo siguiente se muestra cómo usar el `Join` función para crear una lista de varias cadenas.</span><span class="sxs-lookup"><span data-stu-id="267d1-760">The following example demonstrates how to use the `Join` function to create a list from several strings.</span></span>  
  
 [!code-vb[VbVbalrStrings#10](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#10)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="267d1-761">
            <paramref name="SourceArray" /> is not one dimensional.</span>
          <span class="sxs-lookup">
            <span data-stu-id="267d1-761">
              <paramref name="SourceArray" /> is not one dimensional.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Split(System.String,System.String,System.Int32,Microsoft.VisualBasic.CompareMethod)" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <MemberGroup MemberName="LCase">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="267d1-762">Returns a string or character converted to lowercase.</span>
          <span class="sxs-lookup">
            <span data-stu-id="267d1-762">Returns a string or character converted to lowercase.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="LCase">
      <MemberSignature Language="C#" Value="public static char LCase (char Value);" />
      <MemberSignature Language="ILAsm" Value=".method public static char LCase(char Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.LCase(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Function LCase (Value As Char) As Char" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static char LCase(char Value);" />
      <MemberSignature Language="F#" Value="static member LCase : char -&gt; char" Usage="Microsoft.VisualBasic.Strings.LCase Value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Value" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="Value">
          <span data-ttu-id="267d1-763">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="267d1-763">Required.</span>
          </span>
          <span data-ttu-id="267d1-764">Any valid <see langword="String" /> or <see langword="Char" /> expression.</span>
          <span class="sxs-lookup">
            <span data-stu-id="267d1-764">Any valid <see langword="String" /> or <see langword="Char" /> expression.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="267d1-765">Returns a string or character converted to lowercase.</span>
          <span class="sxs-lookup">
            <span data-stu-id="267d1-765">Returns a string or character converted to lowercase.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="267d1-766">Returns a string or character converted to lowercase.</span>
          <span class="sxs-lookup">
            <span data-stu-id="267d1-766">Returns a string or character converted to lowercase.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="267d1-767">Solo las letras mayúsculas se convierten a minúsculas; todas las letras minúsculas y los caracteres que permanecen sin cambios.</span><span class="sxs-lookup"><span data-stu-id="267d1-767">Only uppercase letters are converted to lowercase; all lowercase letters and nonletter characters remain unchanged.</span></span>  
  
 <span data-ttu-id="267d1-768">Esta función usa la información de referencia cultural de la aplicación al manipular la cadena para que los cambios de mayúsculas son adecuados para la configuración regional en el que se utiliza la aplicación.</span><span class="sxs-lookup"><span data-stu-id="267d1-768">This function uses the application's culture information when manipulating the string so that the case changes are appropriate for the locale in which the application is being used.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="267d1-769">Si la aplicación toma decisiones de seguridad en función del resultado de una comparación o la operación de cambio de mayúsculas y, a continuación, la operación debe utilizar el <xref:System.String.Compare%2A?displayProperty=nameWithType> método y pase <xref:System.StringComparison.Ordinal> o <xref:System.StringComparison.OrdinalIgnoreCase> para el `comparisonType` argumento.</span><span class="sxs-lookup"><span data-stu-id="267d1-769">If your application makes security decisions based on the result of a comparison or case-change operation, then the operation should use the <xref:System.String.Compare%2A?displayProperty=nameWithType> method, and pass <xref:System.StringComparison.Ordinal> or <xref:System.StringComparison.OrdinalIgnoreCase> for the `comparisonType` argument.</span></span> <span data-ttu-id="267d1-770">Para obtener más información, consulte [cómo afecta a cadenas de referencia cultural en Visual Basic](~/docs/visual-basic/programming-guide/language-features/strings/how-culture-affects-strings.md).</span><span class="sxs-lookup"><span data-stu-id="267d1-770">For more information, see [How Culture Affects Strings in Visual Basic](~/docs/visual-basic/programming-guide/language-features/strings/how-culture-affects-strings.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="267d1-771">Este ejemplo se usa el `LCase` función para devolver una versión en minúsculas de una cadena.</span><span class="sxs-lookup"><span data-stu-id="267d1-771">This example uses the `LCase` function to return a lowercase version of a string.</span></span>  
  
 [!code-vb[VbVbalrStrings#12](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#12)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.UCase" />
      </Docs>
    </Member>
    <Member MemberName="LCase">
      <MemberSignature Language="C#" Value="public static string LCase (string Value);" />
      <MemberSignature Language="ILAsm" Value=".method public static string LCase(string Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.LCase(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function LCase (Value As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ LCase(System::String ^ Value);" />
      <MemberSignature Language="F#" Value="static member LCase : string -&gt; string" Usage="Microsoft.VisualBasic.Strings.LCase Value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="Value">
          <span data-ttu-id="267d1-772">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="267d1-772">Required.</span>
          </span>
          <span data-ttu-id="267d1-773">Any valid <see langword="String" /> or <see langword="Char" /> expression.</span>
          <span class="sxs-lookup">
            <span data-stu-id="267d1-773">Any valid <see langword="String" /> or <see langword="Char" /> expression.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="267d1-774">Returns a string or character converted to lowercase.</span>
          <span class="sxs-lookup">
            <span data-stu-id="267d1-774">Returns a string or character converted to lowercase.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="267d1-775">Returns a string or character converted to lowercase.</span>
          <span class="sxs-lookup">
            <span data-stu-id="267d1-775">Returns a string or character converted to lowercase.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="267d1-776">Solo las letras mayúsculas se convierten a minúsculas; todas las letras minúsculas y los caracteres que permanecen sin cambios.</span><span class="sxs-lookup"><span data-stu-id="267d1-776">Only uppercase letters are converted to lowercase; all lowercase letters and nonletter characters remain unchanged.</span></span>  
  
 <span data-ttu-id="267d1-777">Esta función usa la información de referencia cultural de la aplicación al manipular la cadena para que los cambios de mayúsculas son adecuados para la configuración regional en el que se utiliza la aplicación.</span><span class="sxs-lookup"><span data-stu-id="267d1-777">This function uses the application's culture information when manipulating the string so that the case changes are appropriate for the locale in which the application is being used.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="267d1-778">Si la aplicación toma decisiones de seguridad en función del resultado de una comparación o la operación de cambio de mayúsculas y, a continuación, la operación debe utilizar el <xref:System.String.Compare%2A?displayProperty=nameWithType> método y pase <xref:System.StringComparison.Ordinal> o <xref:System.StringComparison.OrdinalIgnoreCase> para el `comparisonType` argumento.</span><span class="sxs-lookup"><span data-stu-id="267d1-778">If your application makes security decisions based on the result of a comparison or case-change operation, then the operation should use the <xref:System.String.Compare%2A?displayProperty=nameWithType> method, and pass <xref:System.StringComparison.Ordinal> or <xref:System.StringComparison.OrdinalIgnoreCase> for the `comparisonType` argument.</span></span> <span data-ttu-id="267d1-779">Para obtener más información, consulte [cómo afecta a cadenas de referencia cultural en Visual Basic](~/docs/visual-basic/programming-guide/language-features/strings/how-culture-affects-strings.md).</span><span class="sxs-lookup"><span data-stu-id="267d1-779">For more information, see [How Culture Affects Strings in Visual Basic](~/docs/visual-basic/programming-guide/language-features/strings/how-culture-affects-strings.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="267d1-780">Este ejemplo se usa el `LCase` función para devolver una versión en minúsculas de una cadena.</span><span class="sxs-lookup"><span data-stu-id="267d1-780">This example uses the `LCase` function to return a lowercase version of a string.</span></span>  
  
 [!code-vb[VbVbalrStrings#12](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#12)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.UCase" />
      </Docs>
    </Member>
    <Member MemberName="Left">
      <MemberSignature Language="C#" Value="public static string Left (string str, int Length);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Left(string str, int32 Length) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Left(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Left (str As String, Length As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Left(System::String ^ str, int Length);" />
      <MemberSignature Language="F#" Value="static member Left : string * int -&gt; string" Usage="Microsoft.VisualBasic.Strings.Left (str, Length)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="str" Type="System.String" />
        <Parameter Name="Length" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="str">
          <span data-ttu-id="267d1-781">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="267d1-781">Required.</span>
          </span>
          <span data-ttu-id="267d1-782">
            <see langword="String" /> expression from which the leftmost characters are returned.</span>
          <span class="sxs-lookup">
            <span data-stu-id="267d1-782">
              <see langword="String" /> expression from which the leftmost characters are returned.</span>
          </span>
        </param>
        <param name="Length">
          <span data-ttu-id="267d1-783">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="267d1-783">Required.</span>
          </span>
          <span data-ttu-id="267d1-784">
            <see langword="Integer" /> expression.</span>
          <span class="sxs-lookup">
            <span data-stu-id="267d1-784">
              <see langword="Integer" /> expression.</span>
          </span>
          <span data-ttu-id="267d1-785">Numeric expression indicating how many characters to return.</span>
          <span class="sxs-lookup">
            <span data-stu-id="267d1-785">Numeric expression indicating how many characters to return.</span>
          </span>
          <span data-ttu-id="267d1-786">If 0, a zero-length string ("") is returned.</span>
          <span class="sxs-lookup">
            <span data-stu-id="267d1-786">If 0, a zero-length string ("") is returned.</span>
          </span>
          <span data-ttu-id="267d1-787">If greater than or equal to the number of characters in <c>str</c>, the entire string is returned.</span>
          <span class="sxs-lookup">
            <span data-stu-id="267d1-787">If greater than or equal to the number of characters in <c>str</c>, the entire string is returned.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="267d1-788">Returns a string containing a specified number of characters from the left side of a string.</span>
          <span class="sxs-lookup">
            <span data-stu-id="267d1-788">Returns a string containing a specified number of characters from the left side of a string.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="267d1-789">Returns a string containing a specified number of characters from the left side of a string.</span>
          <span class="sxs-lookup">
            <span data-stu-id="267d1-789">Returns a string containing a specified number of characters from the left side of a string.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="267d1-790">Para determinar el número de caracteres de `str`, utilice el `Len` función.</span><span class="sxs-lookup"><span data-stu-id="267d1-790">To determine the number of characters in `str`, use the `Len` function.</span></span> <span data-ttu-id="267d1-791">Si se utiliza en una aplicación de Windows Forms o cualquier otra clase que tiene un `Left` propiedad, debe calificar totalmente la función con `Microsoft.VisualBasic.Left`.</span><span class="sxs-lookup"><span data-stu-id="267d1-791">If used in a Windows Forms application, or any other class that has a `Left` property, you must fully qualify the function with `Microsoft.VisualBasic.Left`.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="267d1-792">El `LeftB` función en las versiones anteriores de Visual Basic, devuelve una cadena en bytes, en lugar de caracteres.</span><span class="sxs-lookup"><span data-stu-id="267d1-792">The `LeftB` function in previous versions of Visual Basic returns a string in bytes rather than characters.</span></span> <span data-ttu-id="267d1-793">Se utiliza principalmente para convertir cadenas en aplicaciones de caracteres de doble byte (DBCS).</span><span class="sxs-lookup"><span data-stu-id="267d1-793">It is used primarily for converting strings in double-byte character set (DBCS) applications.</span></span> <span data-ttu-id="267d1-794">Todas las cadenas en Visual Basic actuales están en Unicode, y `LeftB` ya no se admite.</span><span class="sxs-lookup"><span data-stu-id="267d1-794">All current Visual Basic strings are in Unicode, and `LeftB` is no longer supported.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="267d1-795">En este ejemplo se muestra el uso de la `Left` función para devolver una subcadena de una determinada `String`.</span><span class="sxs-lookup"><span data-stu-id="267d1-795">This example demonstrates the use of the `Left` function to return a substring of a given `String`.</span></span> <span data-ttu-id="267d1-796">En una clase que tiene un `Left` propiedad, puede ser necesario completar la `Left` función.</span><span class="sxs-lookup"><span data-stu-id="267d1-796">In a class that has a `Left` property, it may be necessary to fully qualify the `Left` function.</span></span>  
  
 [!code-vb[VbVbalrStrings#20](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#20)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="267d1-797">
            <paramref name="Length" /> &lt; 0.</span>
          <span class="sxs-lookup">
            <span data-stu-id="267d1-797">
              <paramref name="Length" /> &lt; 0.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Right(System.String,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Len" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Mid" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Len">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="267d1-798">Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</span>
          <span class="sxs-lookup">
            <span data-stu-id="267d1-798">Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Len">
      <MemberSignature Language="C#" Value="public static int Len (bool Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Len(bool Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Len(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function Len (Expression As Boolean) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Len(bool Expression);" />
      <MemberSignature Language="F#" Value="static member Len : bool -&gt; int" Usage="Microsoft.VisualBasic.Strings.Len Expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="Expression">
          <span data-ttu-id="267d1-799">Any valid <see langword="String" /> expression or variable name.</span>
          <span class="sxs-lookup">
            <span data-stu-id="267d1-799">Any valid <see langword="String" /> expression or variable name.</span>
          </span>
          <span data-ttu-id="267d1-800">If <c>Expression</c> is of type <see langword="Object" />, the <see langword="Len" /> function returns the size as it will be written to the file by the <see langword="FilePut" /> function.</span>
          <span class="sxs-lookup">
            <span data-stu-id="267d1-800">If <c>Expression</c> is of type <see langword="Object" />, the <see langword="Len" /> function returns the size as it will be written to the file by the <see langword="FilePut" /> function.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="267d1-801">Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</span>
          <span class="sxs-lookup">
            <span data-stu-id="267d1-801">Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="267d1-802">Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</span>
          <span class="sxs-lookup">
            <span data-stu-id="267d1-802">Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="267d1-803">Con tipos definidos por el usuario y `Object` variables, la `Len` función devuelve el tamaño que se escribirá en el archivo por el `FilePut` función.</span><span class="sxs-lookup"><span data-stu-id="267d1-803">With user-defined types and `Object` variables, the `Len` function returns the size as it will be written to the file by the `FilePut` function.</span></span> <span data-ttu-id="267d1-804">Si un `Object` contiene un `String`, devolverá la longitud de la cadena.</span><span class="sxs-lookup"><span data-stu-id="267d1-804">If an `Object` contains a `String`, it will return the length of the string.</span></span> <span data-ttu-id="267d1-805">Si un `Object` contiene cualquier otro tipo, devolverá el tamaño del objeto tal como se escribirá en el archivo por el `FilePut` función.</span><span class="sxs-lookup"><span data-stu-id="267d1-805">If an `Object` contains any other type, it will return the size of the object as it will be written to the file by the `FilePut` function.</span></span>  
  
 <span data-ttu-id="267d1-806">El `VBFixedString` atributo puede aplicarse a campos de cadena de objetos para indicar el tamaño de la cadena, en bytes, cuando se escribe en el disco.</span><span class="sxs-lookup"><span data-stu-id="267d1-806">The `VBFixedString` attribute can be applied to string fields in objects to indicate the size of the string, in bytes, when written to disk.</span></span> <span data-ttu-id="267d1-807">El `Len` función usa el `VBFixedString` atributo, si está disponible, al determinar el tamaño de `Object` variables.</span><span class="sxs-lookup"><span data-stu-id="267d1-807">The `Len` function uses the `VBFixedString` attribute, if available, when determining the size of `Object` variables.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="267d1-808">El `Len` función puede no ser capaz de determinar el número real de bytes de almacenamiento necesarios cuando se usa con cadenas de longitud variable en tipos de datos definido por el usuario.</span><span class="sxs-lookup"><span data-stu-id="267d1-808">The `Len` function may not be able to determine the actual number of storage bytes required when used with variable-length strings in user-defined data types.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="267d1-809">El `LenB` función en versiones anteriores de Visual Basic, devuelve el número de bytes en una cadena en lugar de caracteres.</span><span class="sxs-lookup"><span data-stu-id="267d1-809">The `LenB` function in earlier versions of Visual Basic returns the number of bytes in a string rather than characters.</span></span> <span data-ttu-id="267d1-810">Se utiliza principalmente para convertir cadenas en aplicaciones de caracteres de doble byte (DBCS).</span><span class="sxs-lookup"><span data-stu-id="267d1-810">It is used primarily for converting strings in double-byte character set (DBCS) applications.</span></span> <span data-ttu-id="267d1-811">Todas las cadenas en Visual Basic actuales están en Unicode, y `LenB` ya no se admite.</span><span class="sxs-lookup"><span data-stu-id="267d1-811">All current Visual Basic strings are in Unicode, and `LenB` is no longer supported.</span></span>  
  
## <a name="smart-device-developer-notes"></a><span data-ttu-id="267d1-812">Notas de desarrollador de dispositivos inteligentes</span><span class="sxs-lookup"><span data-stu-id="267d1-812">Smart Device Developer Notes</span></span>  
 <span data-ttu-id="267d1-813">El `Len` función acepta solo `String` y `Object` variables como parámetros.</span><span class="sxs-lookup"><span data-stu-id="267d1-813">The `Len` function accepts only `String` and `Object` variables as parameters.</span></span> <span data-ttu-id="267d1-814">Si un `Object` contiene un `String`, devolverá la longitud de la `String`.</span><span class="sxs-lookup"><span data-stu-id="267d1-814">If an `Object` contains a `String`, it will return the length of the `String`.</span></span> <span data-ttu-id="267d1-815">Si un parámetro es un valor NULL `Object` referencia, la función devuelve cero.</span><span class="sxs-lookup"><span data-stu-id="267d1-815">If a parameter is a NULL `Object` reference, the function returns zero.</span></span> <span data-ttu-id="267d1-816">Si un `Object` contiene cualquier otro tipo, se produce una excepción.</span><span class="sxs-lookup"><span data-stu-id="267d1-816">If an `Object` contains any other type, an exception is thrown.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="267d1-817">Este ejemplo se utiliza `Len` para devolver el número de caracteres en una cadena.</span><span class="sxs-lookup"><span data-stu-id="267d1-817">This example uses `Len` to return the number of characters in a string.</span></span>  
  
 [!code-vb[VbVbalrStrings#33](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#33)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Len" />
      </Docs>
    </Member>
    <Member MemberName="Len">
      <MemberSignature Language="C#" Value="public static int Len (byte Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Len(unsigned int8 Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Len(System.Byte)" />
      <MemberSignature Language="VB.NET" Value="Public Function Len (Expression As Byte) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Len(System::Byte Expression);" />
      <MemberSignature Language="F#" Value="static member Len : byte -&gt; int" Usage="Microsoft.VisualBasic.Strings.Len Expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Byte" />
      </Parameters>
      <Docs>
        <param name="Expression">
          <span data-ttu-id="267d1-818">Any valid <see langword="String" /> expression or variable name.</span>
          <span class="sxs-lookup">
            <span data-stu-id="267d1-818">Any valid <see langword="String" /> expression or variable name.</span>
          </span>
          <span data-ttu-id="267d1-819">If <c>Expression</c> is of type <see langword="Object" />, the <see langword="Len" /> function returns the size as it will be written to the file by the <see langword="FilePut" /> function.</span>
          <span class="sxs-lookup">
            <span data-stu-id="267d1-819">If <c>Expression</c> is of type <see langword="Object" />, the <see langword="Len" /> function returns the size as it will be written to the file by the <see langword="FilePut" /> function.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="267d1-820">Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</span>
          <span class="sxs-lookup">
            <span data-stu-id="267d1-820">Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="267d1-821">Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</span>
          <span class="sxs-lookup">
            <span data-stu-id="267d1-821">Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="267d1-822">Con tipos definidos por el usuario y `Object` variables, la `Len` función devuelve el tamaño que se escribirá en el archivo por el `FilePut` función.</span><span class="sxs-lookup"><span data-stu-id="267d1-822">With user-defined types and `Object` variables, the `Len` function returns the size as it will be written to the file by the `FilePut` function.</span></span> <span data-ttu-id="267d1-823">Si un `Object` contiene un `String`, devolverá la longitud de la cadena.</span><span class="sxs-lookup"><span data-stu-id="267d1-823">If an `Object` contains a `String`, it will return the length of the string.</span></span> <span data-ttu-id="267d1-824">Si un `Object` contiene cualquier otro tipo, devolverá el tamaño del objeto tal como se escribirá en el archivo por el `FilePut` función.</span><span class="sxs-lookup"><span data-stu-id="267d1-824">If an `Object` contains any other type, it will return the size of the object as it will be written to the file by the `FilePut` function.</span></span>  
  
 <span data-ttu-id="267d1-825">El `VBFixedString` atributo puede aplicarse a campos de cadena de objetos para indicar el tamaño de la cadena, en bytes, cuando se escribe en el disco.</span><span class="sxs-lookup"><span data-stu-id="267d1-825">The `VBFixedString` attribute can be applied to string fields in objects to indicate the size of the string, in bytes, when written to disk.</span></span> <span data-ttu-id="267d1-826">El `Len` función usa el `VBFixedString` atributo, si está disponible, al determinar el tamaño de `Object` variables.</span><span class="sxs-lookup"><span data-stu-id="267d1-826">The `Len` function uses the `VBFixedString` attribute, if available, when determining the size of `Object` variables.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="267d1-827">El `Len` función puede no ser capaz de determinar el número real de bytes de almacenamiento necesarios cuando se usa con cadenas de longitud variable en tipos de datos definido por el usuario.</span><span class="sxs-lookup"><span data-stu-id="267d1-827">The `Len` function may not be able to determine the actual number of storage bytes required when used with variable-length strings in user-defined data types.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="267d1-828">El `LenB` función en versiones anteriores de Visual Basic, devuelve el número de bytes en una cadena en lugar de caracteres.</span><span class="sxs-lookup"><span data-stu-id="267d1-828">The `LenB` function in earlier versions of Visual Basic returns the number of bytes in a string rather than characters.</span></span> <span data-ttu-id="267d1-829">Se utiliza principalmente para convertir cadenas en aplicaciones de caracteres de doble byte (DBCS).</span><span class="sxs-lookup"><span data-stu-id="267d1-829">It is used primarily for converting strings in double-byte character set (DBCS) applications.</span></span> <span data-ttu-id="267d1-830">Todas las cadenas en Visual Basic actuales están en Unicode, y `LenB` ya no se admite.</span><span class="sxs-lookup"><span data-stu-id="267d1-830">All current Visual Basic strings are in Unicode, and `LenB` is no longer supported.</span></span>  
  
## <a name="smart-device-developer-notes"></a><span data-ttu-id="267d1-831">Notas de desarrollador de dispositivos inteligentes</span><span class="sxs-lookup"><span data-stu-id="267d1-831">Smart Device Developer Notes</span></span>  
 <span data-ttu-id="267d1-832">El `Len` función acepta solo `String` y `Object` variables como parámetros.</span><span class="sxs-lookup"><span data-stu-id="267d1-832">The `Len` function accepts only `String` and `Object` variables as parameters.</span></span> <span data-ttu-id="267d1-833">Si un `Object` contiene un `String`, devolverá la longitud de la `String`.</span><span class="sxs-lookup"><span data-stu-id="267d1-833">If an `Object` contains a `String`, it will return the length of the `String`.</span></span> <span data-ttu-id="267d1-834">Si un parámetro es un valor NULL `Object` referencia, la función devuelve cero.</span><span class="sxs-lookup"><span data-stu-id="267d1-834">If a parameter is a NULL `Object` reference, the function returns zero.</span></span> <span data-ttu-id="267d1-835">Si un `Object` contiene cualquier otro tipo, se produce una excepción.</span><span class="sxs-lookup"><span data-stu-id="267d1-835">If an `Object` contains any other type, an exception is thrown.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="267d1-836">Este ejemplo se utiliza `Len` para devolver el número de caracteres en una cadena.</span><span class="sxs-lookup"><span data-stu-id="267d1-836">This example uses `Len` to return the number of characters in a string.</span></span>  
  
 [!code-vb[VbVbalrStrings#33](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#33)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Len" />
      </Docs>
    </Member>
    <Member MemberName="Len">
      <MemberSignature Language="C#" Value="public static int Len (char Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Len(char Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Len(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Function Len (Expression As Char) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Len(char Expression);" />
      <MemberSignature Language="F#" Value="static member Len : char -&gt; int" Usage="Microsoft.VisualBasic.Strings.Len Expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="Expression">
          <span data-ttu-id="267d1-837">Any valid <see langword="String" /> expression or variable name.</span>
          <span class="sxs-lookup">
            <span data-stu-id="267d1-837">Any valid <see langword="String" /> expression or variable name.</span>
          </span>
          <span data-ttu-id="267d1-838">If <c>Expression</c> is of type <see langword="Object" />, the <see langword="Len" /> function returns the size as it will be written to the file by the <see langword="FilePut" /> function.</span>
          <span class="sxs-lookup">
            <span data-stu-id="267d1-838">If <c>Expression</c> is of type <see langword="Object" />, the <see langword="Len" /> function returns the size as it will be written to the file by the <see langword="FilePut" /> function.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="267d1-839">Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</span>
          <span class="sxs-lookup">
            <span data-stu-id="267d1-839">Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="267d1-840">Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</span>
          <span class="sxs-lookup">
            <span data-stu-id="267d1-840">Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="267d1-841">Con tipos definidos por el usuario y `Object` variables, la `Len` función devuelve el tamaño que se escribirá en el archivo por el `FilePut` función.</span><span class="sxs-lookup"><span data-stu-id="267d1-841">With user-defined types and `Object` variables, the `Len` function returns the size as it will be written to the file by the `FilePut` function.</span></span> <span data-ttu-id="267d1-842">Si un `Object` contiene un `String`, devolverá la longitud de la cadena.</span><span class="sxs-lookup"><span data-stu-id="267d1-842">If an `Object` contains a `String`, it will return the length of the string.</span></span> <span data-ttu-id="267d1-843">Si un `Object` contiene cualquier otro tipo, devolverá el tamaño del objeto tal como se escribirá en el archivo por el `FilePut` función.</span><span class="sxs-lookup"><span data-stu-id="267d1-843">If an `Object` contains any other type, it will return the size of the object as it will be written to the file by the `FilePut` function.</span></span>  
  
 <span data-ttu-id="267d1-844">El `VBFixedString` atributo puede aplicarse a campos de cadena de objetos para indicar el tamaño de la cadena, en bytes, cuando se escribe en el disco.</span><span class="sxs-lookup"><span data-stu-id="267d1-844">The `VBFixedString` attribute can be applied to string fields in objects to indicate the size of the string, in bytes, when written to disk.</span></span> <span data-ttu-id="267d1-845">El `Len` función usa el `VBFixedString` atributo, si está disponible, al determinar el tamaño de `Object` variables.</span><span class="sxs-lookup"><span data-stu-id="267d1-845">The `Len` function uses the `VBFixedString` attribute, if available, when determining the size of `Object` variables.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="267d1-846">El `Len` función puede no ser capaz de determinar el número real de bytes de almacenamiento necesarios cuando se usa con cadenas de longitud variable en tipos de datos definido por el usuario.</span><span class="sxs-lookup"><span data-stu-id="267d1-846">The `Len` function may not be able to determine the actual number of storage bytes required when used with variable-length strings in user-defined data types.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="267d1-847">El `LenB` función en versiones anteriores de Visual Basic, devuelve el número de bytes en una cadena en lugar de caracteres.</span><span class="sxs-lookup"><span data-stu-id="267d1-847">The `LenB` function in earlier versions of Visual Basic returns the number of bytes in a string rather than characters.</span></span> <span data-ttu-id="267d1-848">Se utiliza principalmente para convertir cadenas en aplicaciones de caracteres de doble byte (DBCS).</span><span class="sxs-lookup"><span data-stu-id="267d1-848">It is used primarily for converting strings in double-byte character set (DBCS) applications.</span></span> <span data-ttu-id="267d1-849">Todas las cadenas en Visual Basic actuales están en Unicode, y `LenB` ya no se admite.</span><span class="sxs-lookup"><span data-stu-id="267d1-849">All current Visual Basic strings are in Unicode, and `LenB` is no longer supported.</span></span>  
  
## <a name="smart-device-developer-notes"></a><span data-ttu-id="267d1-850">Notas de desarrollador de dispositivos inteligentes</span><span class="sxs-lookup"><span data-stu-id="267d1-850">Smart Device Developer Notes</span></span>  
 <span data-ttu-id="267d1-851">El `Len` función acepta solo `String` y `Object` variables como parámetros.</span><span class="sxs-lookup"><span data-stu-id="267d1-851">The `Len` function accepts only `String` and `Object` variables as parameters.</span></span> <span data-ttu-id="267d1-852">Si un `Object` contiene un `String`, devolverá la longitud de la `String`.</span><span class="sxs-lookup"><span data-stu-id="267d1-852">If an `Object` contains a `String`, it will return the length of the `String`.</span></span> <span data-ttu-id="267d1-853">Si un parámetro es un valor NULL `Object` referencia, la función devuelve cero.</span><span class="sxs-lookup"><span data-stu-id="267d1-853">If a parameter is a NULL `Object` reference, the function returns zero.</span></span> <span data-ttu-id="267d1-854">Si un `Object` contiene cualquier otro tipo, se produce una excepción.</span><span class="sxs-lookup"><span data-stu-id="267d1-854">If an `Object` contains any other type, an exception is thrown.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="267d1-855">Este ejemplo se utiliza `Len` para devolver el número de caracteres en una cadena.</span><span class="sxs-lookup"><span data-stu-id="267d1-855">This example uses `Len` to return the number of characters in a string.</span></span>  
  
 [!code-vb[VbVbalrStrings#33](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#33)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Len" />
      </Docs>
    </Member>
    <Member MemberName="Len">
      <MemberSignature Language="C#" Value="public static int Len (DateTime Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Len(valuetype System.DateTime Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Len(System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Function Len (Expression As DateTime) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Len(DateTime Expression);" />
      <MemberSignature Language="F#" Value="static member Len : DateTime -&gt; int" Usage="Microsoft.VisualBasic.Strings.Len Expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="Expression">
          <span data-ttu-id="267d1-856">Any valid <see langword="String" /> expression or variable name.</span>
          <span class="sxs-lookup">
            <span data-stu-id="267d1-856">Any valid <see langword="String" /> expression or variable name.</span>
          </span>
          <span data-ttu-id="267d1-857">If <c>Expression</c> is of type <see langword="Object" />, the <see langword="Len" /> function returns the size as it will be written to the file by the <see langword="FilePut" /> function.</span>
          <span class="sxs-lookup">
            <span data-stu-id="267d1-857">If <c>Expression</c> is of type <see langword="Object" />, the <see langword="Len" /> function returns the size as it will be written to the file by the <see langword="FilePut" /> function.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="267d1-858">Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</span>
          <span class="sxs-lookup">
            <span data-stu-id="267d1-858">Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="267d1-859">Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</span>
          <span class="sxs-lookup">
            <span data-stu-id="267d1-859">Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="267d1-860">Con tipos definidos por el usuario y `Object` variables, la `Len` función devuelve el tamaño que se escribirá en el archivo por el `FilePut` función.</span><span class="sxs-lookup"><span data-stu-id="267d1-860">With user-defined types and `Object` variables, the `Len` function returns the size as it will be written to the file by the `FilePut` function.</span></span> <span data-ttu-id="267d1-861">Si un `Object` contiene un `String`, devolverá la longitud de la cadena.</span><span class="sxs-lookup"><span data-stu-id="267d1-861">If an `Object` contains a `String`, it will return the length of the string.</span></span> <span data-ttu-id="267d1-862">Si un `Object` contiene cualquier otro tipo, devolverá el tamaño del objeto tal como se escribirá en el archivo por el `FilePut` función.</span><span class="sxs-lookup"><span data-stu-id="267d1-862">If an `Object` contains any other type, it will return the size of the object as it will be written to the file by the `FilePut` function.</span></span>  
  
 <span data-ttu-id="267d1-863">El `VBFixedString` atributo puede aplicarse a campos de cadena de objetos para indicar el tamaño de la cadena, en bytes, cuando se escribe en el disco.</span><span class="sxs-lookup"><span data-stu-id="267d1-863">The `VBFixedString` attribute can be applied to string fields in objects to indicate the size of the string, in bytes, when written to disk.</span></span> <span data-ttu-id="267d1-864">El `Len` función usa el `VBFixedString` atributo, si está disponible, al determinar el tamaño de `Object` variables.</span><span class="sxs-lookup"><span data-stu-id="267d1-864">The `Len` function uses the `VBFixedString` attribute, if available, when determining the size of `Object` variables.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="267d1-865">El `Len` función puede no ser capaz de determinar el número real de bytes de almacenamiento necesarios cuando se usa con cadenas de longitud variable en tipos de datos definido por el usuario.</span><span class="sxs-lookup"><span data-stu-id="267d1-865">The `Len` function may not be able to determine the actual number of storage bytes required when used with variable-length strings in user-defined data types.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="267d1-866">El `LenB` función en versiones anteriores de Visual Basic, devuelve el número de bytes en una cadena en lugar de caracteres.</span><span class="sxs-lookup"><span data-stu-id="267d1-866">The `LenB` function in earlier versions of Visual Basic returns the number of bytes in a string rather than characters.</span></span> <span data-ttu-id="267d1-867">Se utiliza principalmente para convertir cadenas en aplicaciones de caracteres de doble byte (DBCS).</span><span class="sxs-lookup"><span data-stu-id="267d1-867">It is used primarily for converting strings in double-byte character set (DBCS) applications.</span></span> <span data-ttu-id="267d1-868">Todas las cadenas en Visual Basic actuales están en Unicode, y `LenB` ya no se admite.</span><span class="sxs-lookup"><span data-stu-id="267d1-868">All current Visual Basic strings are in Unicode, and `LenB` is no longer supported.</span></span>  
  
## <a name="smart-device-developer-notes"></a><span data-ttu-id="267d1-869">Notas de desarrollador de dispositivos inteligentes</span><span class="sxs-lookup"><span data-stu-id="267d1-869">Smart Device Developer Notes</span></span>  
 <span data-ttu-id="267d1-870">El `Len` función acepta solo `String` y `Object` variables como parámetros.</span><span class="sxs-lookup"><span data-stu-id="267d1-870">The `Len` function accepts only `String` and `Object` variables as parameters.</span></span> <span data-ttu-id="267d1-871">Si un `Object` contiene un `String`, devolverá la longitud de la `String`.</span><span class="sxs-lookup"><span data-stu-id="267d1-871">If an `Object` contains a `String`, it will return the length of the `String`.</span></span> <span data-ttu-id="267d1-872">Si un parámetro es un valor NULL `Object` referencia, la función devuelve cero.</span><span class="sxs-lookup"><span data-stu-id="267d1-872">If a parameter is a NULL `Object` reference, the function returns zero.</span></span> <span data-ttu-id="267d1-873">Si un `Object` contiene cualquier otro tipo, se produce una excepción.</span><span class="sxs-lookup"><span data-stu-id="267d1-873">If an `Object` contains any other type, an exception is thrown.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="267d1-874">Este ejemplo se utiliza `Len` para devolver el número de caracteres en una cadena.</span><span class="sxs-lookup"><span data-stu-id="267d1-874">This example uses `Len` to return the number of characters in a string.</span></span>  
  
 [!code-vb[VbVbalrStrings#33](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#33)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Len" />
      </Docs>
    </Member>
    <Member MemberName="Len">
      <MemberSignature Language="C#" Value="public static int Len (decimal Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Len(valuetype System.Decimal Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Len(System.Decimal)" />
      <MemberSignature Language="VB.NET" Value="Public Function Len (Expression As Decimal) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Len(System::Decimal Expression);" />
      <MemberSignature Language="F#" Value="static member Len : decimal -&gt; int" Usage="Microsoft.VisualBasic.Strings.Len Expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Decimal" />
      </Parameters>
      <Docs>
        <param name="Expression">
          <span data-ttu-id="267d1-875">Any valid <see langword="String" /> expression or variable name.</span>
          <span class="sxs-lookup">
            <span data-stu-id="267d1-875">Any valid <see langword="String" /> expression or variable name.</span>
          </span>
          <span data-ttu-id="267d1-876">If <c>Expression</c> is of type <see langword="Object" />, the <see langword="Len" /> function returns the size as it will be written to the file by the <see langword="FilePut" /> function.</span>
          <span class="sxs-lookup">
            <span data-stu-id="267d1-876">If <c>Expression</c> is of type <see langword="Object" />, the <see langword="Len" /> function returns the size as it will be written to the file by the <see langword="FilePut" /> function.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="267d1-877">Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</span>
          <span class="sxs-lookup">
            <span data-stu-id="267d1-877">Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="267d1-878">Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</span>
          <span class="sxs-lookup">
            <span data-stu-id="267d1-878">Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="267d1-879">Con tipos definidos por el usuario y `Object` variables, la `Len` función devuelve el tamaño que se escribirá en el archivo por el `FilePut` función.</span><span class="sxs-lookup"><span data-stu-id="267d1-879">With user-defined types and `Object` variables, the `Len` function returns the size as it will be written to the file by the `FilePut` function.</span></span> <span data-ttu-id="267d1-880">Si un `Object` contiene un `String`, devolverá la longitud de la cadena.</span><span class="sxs-lookup"><span data-stu-id="267d1-880">If an `Object` contains a `String`, it will return the length of the string.</span></span> <span data-ttu-id="267d1-881">Si un `Object` contiene cualquier otro tipo, devolverá el tamaño del objeto tal como se escribirá en el archivo por el `FilePut` función.</span><span class="sxs-lookup"><span data-stu-id="267d1-881">If an `Object` contains any other type, it will return the size of the object as it will be written to the file by the `FilePut` function.</span></span>  
  
 <span data-ttu-id="267d1-882">El `VBFixedString` atributo puede aplicarse a campos de cadena de objetos para indicar el tamaño de la cadena, en bytes, cuando se escribe en el disco.</span><span class="sxs-lookup"><span data-stu-id="267d1-882">The `VBFixedString` attribute can be applied to string fields in objects to indicate the size of the string, in bytes, when written to disk.</span></span> <span data-ttu-id="267d1-883">El `Len` función usa el `VBFixedString` atributo, si está disponible, al determinar el tamaño de `Object` variables.</span><span class="sxs-lookup"><span data-stu-id="267d1-883">The `Len` function uses the `VBFixedString` attribute, if available, when determining the size of `Object` variables.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="267d1-884">El `Len` función puede no ser capaz de determinar el número real de bytes de almacenamiento necesarios cuando se usa con cadenas de longitud variable en tipos de datos definido por el usuario.</span><span class="sxs-lookup"><span data-stu-id="267d1-884">The `Len` function may not be able to determine the actual number of storage bytes required when used with variable-length strings in user-defined data types.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="267d1-885">El `LenB` función en versiones anteriores de Visual Basic, devuelve el número de bytes en una cadena en lugar de caracteres.</span><span class="sxs-lookup"><span data-stu-id="267d1-885">The `LenB` function in earlier versions of Visual Basic returns the number of bytes in a string rather than characters.</span></span> <span data-ttu-id="267d1-886">Se utiliza principalmente para convertir cadenas en aplicaciones de caracteres de doble byte (DBCS).</span><span class="sxs-lookup"><span data-stu-id="267d1-886">It is used primarily for converting strings in double-byte character set (DBCS) applications.</span></span> <span data-ttu-id="267d1-887">Todas las cadenas en Visual Basic actuales están en Unicode, y `LenB` ya no se admite.</span><span class="sxs-lookup"><span data-stu-id="267d1-887">All current Visual Basic strings are in Unicode, and `LenB` is no longer supported.</span></span>  
  
## <a name="smart-device-developer-notes"></a><span data-ttu-id="267d1-888">Notas de desarrollador de dispositivos inteligentes</span><span class="sxs-lookup"><span data-stu-id="267d1-888">Smart Device Developer Notes</span></span>  
 <span data-ttu-id="267d1-889">El `Len` función acepta solo `String` y `Object` variables como parámetros.</span><span class="sxs-lookup"><span data-stu-id="267d1-889">The `Len` function accepts only `String` and `Object` variables as parameters.</span></span> <span data-ttu-id="267d1-890">Si un `Object` contiene un `String`, devolverá la longitud de la `String`.</span><span class="sxs-lookup"><span data-stu-id="267d1-890">If an `Object` contains a `String`, it will return the length of the `String`.</span></span> <span data-ttu-id="267d1-891">Si un parámetro es un valor NULL `Object` referencia, la función devuelve cero.</span><span class="sxs-lookup"><span data-stu-id="267d1-891">If a parameter is a NULL `Object` reference, the function returns zero.</span></span> <span data-ttu-id="267d1-892">Si un `Object` contiene cualquier otro tipo, se produce una excepción.</span><span class="sxs-lookup"><span data-stu-id="267d1-892">If an `Object` contains any other type, an exception is thrown.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="267d1-893">Este ejemplo se utiliza `Len` para devolver el número de caracteres en una cadena.</span><span class="sxs-lookup"><span data-stu-id="267d1-893">This example uses `Len` to return the number of characters in a string.</span></span>  
  
 [!code-vb[VbVbalrStrings#33](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#33)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Len" />
      </Docs>
    </Member>
    <Member MemberName="Len">
      <MemberSignature Language="C#" Value="public static int Len (double Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Len(float64 Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Len(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Len (Expression As Double) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Len(double Expression);" />
      <MemberSignature Language="F#" Value="static member Len : double -&gt; int" Usage="Microsoft.VisualBasic.Strings.Len Expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Expression">
          <span data-ttu-id="267d1-894">Any valid <see langword="String" /> expression or variable name.</span>
          <span class="sxs-lookup">
            <span data-stu-id="267d1-894">Any valid <see langword="String" /> expression or variable name.</span>
          </span>
          <span data-ttu-id="267d1-895">If <c>Expression</c> is of type <see langword="Object" />, the <see langword="Len" /> function returns the size as it will be written to the file by the <see langword="FilePut" /> function.</span>
          <span class="sxs-lookup">
            <span data-stu-id="267d1-895">If <c>Expression</c> is of type <see langword="Object" />, the <see langword="Len" /> function returns the size as it will be written to the file by the <see langword="FilePut" /> function.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="267d1-896">Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</span>
          <span class="sxs-lookup">
            <span data-stu-id="267d1-896">Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="267d1-897">Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</span>
          <span class="sxs-lookup">
            <span data-stu-id="267d1-897">Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="267d1-898">Con tipos definidos por el usuario y `Object` variables, la `Len` función devuelve el tamaño que se escribirá en el archivo por el `FilePut` función.</span><span class="sxs-lookup"><span data-stu-id="267d1-898">With user-defined types and `Object` variables, the `Len` function returns the size as it will be written to the file by the `FilePut` function.</span></span> <span data-ttu-id="267d1-899">Si un `Object` contiene un `String`, devolverá la longitud de la cadena.</span><span class="sxs-lookup"><span data-stu-id="267d1-899">If an `Object` contains a `String`, it will return the length of the string.</span></span> <span data-ttu-id="267d1-900">Si un `Object` contiene cualquier otro tipo, devolverá el tamaño del objeto tal como se escribirá en el archivo por el `FilePut` función.</span><span class="sxs-lookup"><span data-stu-id="267d1-900">If an `Object` contains any other type, it will return the size of the object as it will be written to the file by the `FilePut` function.</span></span>  
  
 <span data-ttu-id="267d1-901">El `VBFixedString` atributo puede aplicarse a campos de cadena de objetos para indicar el tamaño de la cadena, en bytes, cuando se escribe en el disco.</span><span class="sxs-lookup"><span data-stu-id="267d1-901">The `VBFixedString` attribute can be applied to string fields in objects to indicate the size of the string, in bytes, when written to disk.</span></span> <span data-ttu-id="267d1-902">El `Len` función usa el `VBFixedString` atributo, si está disponible, al determinar el tamaño de `Object` variables.</span><span class="sxs-lookup"><span data-stu-id="267d1-902">The `Len` function uses the `VBFixedString` attribute, if available, when determining the size of `Object` variables.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="267d1-903">El `Len` función puede no ser capaz de determinar el número real de bytes de almacenamiento necesarios cuando se usa con cadenas de longitud variable en tipos de datos definido por el usuario.</span><span class="sxs-lookup"><span data-stu-id="267d1-903">The `Len` function may not be able to determine the actual number of storage bytes required when used with variable-length strings in user-defined data types.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="267d1-904">El `LenB` función en versiones anteriores de Visual Basic, devuelve el número de bytes en una cadena en lugar de caracteres.</span><span class="sxs-lookup"><span data-stu-id="267d1-904">The `LenB` function in earlier versions of Visual Basic returns the number of bytes in a string rather than characters.</span></span> <span data-ttu-id="267d1-905">Se utiliza principalmente para convertir cadenas en aplicaciones de caracteres de doble byte (DBCS).</span><span class="sxs-lookup"><span data-stu-id="267d1-905">It is used primarily for converting strings in double-byte character set (DBCS) applications.</span></span> <span data-ttu-id="267d1-906">Todas las cadenas en Visual Basic actuales están en Unicode, y `LenB` ya no se admite.</span><span class="sxs-lookup"><span data-stu-id="267d1-906">All current Visual Basic strings are in Unicode, and `LenB` is no longer supported.</span></span>  
  
## <a name="smart-device-developer-notes"></a><span data-ttu-id="267d1-907">Notas de desarrollador de dispositivos inteligentes</span><span class="sxs-lookup"><span data-stu-id="267d1-907">Smart Device Developer Notes</span></span>  
 <span data-ttu-id="267d1-908">El `Len` función acepta solo `String` y `Object` variables como parámetros.</span><span class="sxs-lookup"><span data-stu-id="267d1-908">The `Len` function accepts only `String` and `Object` variables as parameters.</span></span> <span data-ttu-id="267d1-909">Si un `Object` contiene un `String`, devolverá la longitud de la `String`.</span><span class="sxs-lookup"><span data-stu-id="267d1-909">If an `Object` contains a `String`, it will return the length of the `String`.</span></span> <span data-ttu-id="267d1-910">Si un parámetro es un valor NULL `Object` referencia, la función devuelve cero.</span><span class="sxs-lookup"><span data-stu-id="267d1-910">If a parameter is a NULL `Object` reference, the function returns zero.</span></span> <span data-ttu-id="267d1-911">Si un `Object` contiene cualquier otro tipo, se produce una excepción.</span><span class="sxs-lookup"><span data-stu-id="267d1-911">If an `Object` contains any other type, an exception is thrown.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="267d1-912">Este ejemplo se utiliza `Len` para devolver el número de caracteres en una cadena.</span><span class="sxs-lookup"><span data-stu-id="267d1-912">This example uses `Len` to return the number of characters in a string.</span></span>  
  
 [!code-vb[VbVbalrStrings#33](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#33)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Len" />
      </Docs>
    </Member>
    <Member MemberName="Len">
      <MemberSignature Language="C#" Value="public static int Len (short Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Len(int16 Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Len(System.Int16)" />
      <MemberSignature Language="VB.NET" Value="Public Function Len (Expression As Short) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Len(short Expression);" />
      <MemberSignature Language="F#" Value="static member Len : int16 -&gt; int" Usage="Microsoft.VisualBasic.Strings.Len Expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Int16" />
      </Parameters>
      <Docs>
        <param name="Expression">
          <span data-ttu-id="267d1-913">Any valid <see langword="String" /> expression or variable name.</span>
          <span class="sxs-lookup">
            <span data-stu-id="267d1-913">Any valid <see langword="String" /> expression or variable name.</span>
          </span>
          <span data-ttu-id="267d1-914">If <c>Expression</c> is of type <see langword="Object" />, the <see langword="Len" /> function returns the size as it will be written to the file by the <see langword="FilePut" /> function.</span>
          <span class="sxs-lookup">
            <span data-stu-id="267d1-914">If <c>Expression</c> is of type <see langword="Object" />, the <see langword="Len" /> function returns the size as it will be written to the file by the <see langword="FilePut" /> function.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="267d1-915">Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</span>
          <span class="sxs-lookup">
            <span data-stu-id="267d1-915">Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="267d1-916">Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</span>
          <span class="sxs-lookup">
            <span data-stu-id="267d1-916">Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="267d1-917">Con tipos definidos por el usuario y `Object` variables, la `Len` función devuelve el tamaño que se escribirá en el archivo por el `FilePut` función.</span><span class="sxs-lookup"><span data-stu-id="267d1-917">With user-defined types and `Object` variables, the `Len` function returns the size as it will be written to the file by the `FilePut` function.</span></span> <span data-ttu-id="267d1-918">Si un `Object` contiene un `String`, devolverá la longitud de la cadena.</span><span class="sxs-lookup"><span data-stu-id="267d1-918">If an `Object` contains a `String`, it will return the length of the string.</span></span> <span data-ttu-id="267d1-919">Si un `Object` contiene cualquier otro tipo, devolverá el tamaño del objeto tal como se escribirá en el archivo por el `FilePut` función.</span><span class="sxs-lookup"><span data-stu-id="267d1-919">If an `Object` contains any other type, it will return the size of the object as it will be written to the file by the `FilePut` function.</span></span>  
  
 <span data-ttu-id="267d1-920">El `VBFixedString` atributo puede aplicarse a campos de cadena de objetos para indicar el tamaño de la cadena, en bytes, cuando se escribe en el disco.</span><span class="sxs-lookup"><span data-stu-id="267d1-920">The `VBFixedString` attribute can be applied to string fields in objects to indicate the size of the string, in bytes, when written to disk.</span></span> <span data-ttu-id="267d1-921">El `Len` función usa el `VBFixedString` atributo, si está disponible, al determinar el tamaño de `Object` variables.</span><span class="sxs-lookup"><span data-stu-id="267d1-921">The `Len` function uses the `VBFixedString` attribute, if available, when determining the size of `Object` variables.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="267d1-922">El `Len` función puede no ser capaz de determinar el número real de bytes de almacenamiento necesarios cuando se usa con cadenas de longitud variable en tipos de datos definido por el usuario.</span><span class="sxs-lookup"><span data-stu-id="267d1-922">The `Len` function may not be able to determine the actual number of storage bytes required when used with variable-length strings in user-defined data types.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="267d1-923">El `LenB` función en versiones anteriores de Visual Basic, devuelve el número de bytes en una cadena en lugar de caracteres.</span><span class="sxs-lookup"><span data-stu-id="267d1-923">The `LenB` function in earlier versions of Visual Basic returns the number of bytes in a string rather than characters.</span></span> <span data-ttu-id="267d1-924">Se utiliza principalmente para convertir cadenas en aplicaciones de caracteres de doble byte (DBCS).</span><span class="sxs-lookup"><span data-stu-id="267d1-924">It is used primarily for converting strings in double-byte character set (DBCS) applications.</span></span> <span data-ttu-id="267d1-925">Todas las cadenas en Visual Basic actuales están en Unicode, y `LenB` ya no se admite.</span><span class="sxs-lookup"><span data-stu-id="267d1-925">All current Visual Basic strings are in Unicode, and `LenB` is no longer supported.</span></span>  
  
## <a name="smart-device-developer-notes"></a><span data-ttu-id="267d1-926">Notas de desarrollador de dispositivos inteligentes</span><span class="sxs-lookup"><span data-stu-id="267d1-926">Smart Device Developer Notes</span></span>  
 <span data-ttu-id="267d1-927">El `Len` función acepta solo `String` y `Object` variables como parámetros.</span><span class="sxs-lookup"><span data-stu-id="267d1-927">The `Len` function accepts only `String` and `Object` variables as parameters.</span></span> <span data-ttu-id="267d1-928">Si un `Object` contiene un `String`, devolverá la longitud de la `String`.</span><span class="sxs-lookup"><span data-stu-id="267d1-928">If an `Object` contains a `String`, it will return the length of the `String`.</span></span> <span data-ttu-id="267d1-929">Si un parámetro es un valor NULL `Object` referencia, la función devuelve cero.</span><span class="sxs-lookup"><span data-stu-id="267d1-929">If a parameter is a NULL `Object` reference, the function returns zero.</span></span> <span data-ttu-id="267d1-930">Si un `Object` contiene cualquier otro tipo, se produce una excepción.</span><span class="sxs-lookup"><span data-stu-id="267d1-930">If an `Object` contains any other type, an exception is thrown.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="267d1-931">Este ejemplo se utiliza `Len` para devolver el número de caracteres en una cadena.</span><span class="sxs-lookup"><span data-stu-id="267d1-931">This example uses `Len` to return the number of characters in a string.</span></span>  
  
 [!code-vb[VbVbalrStrings#33](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#33)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Len" />
      </Docs>
    </Member>
    <Member MemberName="Len">
      <MemberSignature Language="C#" Value="public static int Len (int Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Len(int32 Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Len(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Len (Expression As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Len(int Expression);" />
      <MemberSignature Language="F#" Value="static member Len : int -&gt; int" Usage="Microsoft.VisualBasic.Strings.Len Expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="Expression">
          <span data-ttu-id="267d1-932">Any valid <see langword="String" /> expression or variable name.</span>
          <span class="sxs-lookup">
            <span data-stu-id="267d1-932">Any valid <see langword="String" /> expression or variable name.</span>
          </span>
          <span data-ttu-id="267d1-933">If <c>Expression</c> is of type <see langword="Object" />, the <see langword="Len" /> function returns the size as it will be written to the file by the <see langword="FilePut" /> function.</span>
          <span class="sxs-lookup">
            <span data-stu-id="267d1-933">If <c>Expression</c> is of type <see langword="Object" />, the <see langword="Len" /> function returns the size as it will be written to the file by the <see langword="FilePut" /> function.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="267d1-934">Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</span>
          <span class="sxs-lookup">
            <span data-stu-id="267d1-934">Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="267d1-935">Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</span>
          <span class="sxs-lookup">
            <span data-stu-id="267d1-935">Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="267d1-936">Con tipos definidos por el usuario y `Object` variables, la `Len` función devuelve el tamaño que se escribirá en el archivo por el `FilePut` función.</span><span class="sxs-lookup"><span data-stu-id="267d1-936">With user-defined types and `Object` variables, the `Len` function returns the size as it will be written to the file by the `FilePut` function.</span></span> <span data-ttu-id="267d1-937">Si un `Object` contiene un `String`, devolverá la longitud de la cadena.</span><span class="sxs-lookup"><span data-stu-id="267d1-937">If an `Object` contains a `String`, it will return the length of the string.</span></span> <span data-ttu-id="267d1-938">Si un `Object` contiene cualquier otro tipo, devolverá el tamaño del objeto tal como se escribirá en el archivo por el `FilePut` función.</span><span class="sxs-lookup"><span data-stu-id="267d1-938">If an `Object` contains any other type, it will return the size of the object as it will be written to the file by the `FilePut` function.</span></span>  
  
 <span data-ttu-id="267d1-939">El `VBFixedString` atributo puede aplicarse a campos de cadena de objetos para indicar el tamaño de la cadena, en bytes, cuando se escribe en el disco.</span><span class="sxs-lookup"><span data-stu-id="267d1-939">The `VBFixedString` attribute can be applied to string fields in objects to indicate the size of the string, in bytes, when written to disk.</span></span> <span data-ttu-id="267d1-940">El `Len` función usa el `VBFixedString` atributo, si está disponible, al determinar el tamaño de `Object` variables.</span><span class="sxs-lookup"><span data-stu-id="267d1-940">The `Len` function uses the `VBFixedString` attribute, if available, when determining the size of `Object` variables.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="267d1-941">El `Len` función puede no ser capaz de determinar el número real de bytes de almacenamiento necesarios cuando se usa con cadenas de longitud variable en tipos de datos definido por el usuario.</span><span class="sxs-lookup"><span data-stu-id="267d1-941">The `Len` function may not be able to determine the actual number of storage bytes required when used with variable-length strings in user-defined data types.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="267d1-942">El `LenB` función en versiones anteriores de Visual Basic, devuelve el número de bytes en una cadena en lugar de caracteres.</span><span class="sxs-lookup"><span data-stu-id="267d1-942">The `LenB` function in earlier versions of Visual Basic returns the number of bytes in a string rather than characters.</span></span> <span data-ttu-id="267d1-943">Se utiliza principalmente para convertir cadenas en aplicaciones de caracteres de doble byte (DBCS).</span><span class="sxs-lookup"><span data-stu-id="267d1-943">It is used primarily for converting strings in double-byte character set (DBCS) applications.</span></span> <span data-ttu-id="267d1-944">Todas las cadenas en Visual Basic actuales están en Unicode, y `LenB` ya no se admite.</span><span class="sxs-lookup"><span data-stu-id="267d1-944">All current Visual Basic strings are in Unicode, and `LenB` is no longer supported.</span></span>  
  
## <a name="smart-device-developer-notes"></a><span data-ttu-id="267d1-945">Notas de desarrollador de dispositivos inteligentes</span><span class="sxs-lookup"><span data-stu-id="267d1-945">Smart Device Developer Notes</span></span>  
 <span data-ttu-id="267d1-946">El `Len` función acepta solo `String` y `Object` variables como parámetros.</span><span class="sxs-lookup"><span data-stu-id="267d1-946">The `Len` function accepts only `String` and `Object` variables as parameters.</span></span> <span data-ttu-id="267d1-947">Si un `Object` contiene un `String`, devolverá la longitud de la `String`.</span><span class="sxs-lookup"><span data-stu-id="267d1-947">If an `Object` contains a `String`, it will return the length of the `String`.</span></span> <span data-ttu-id="267d1-948">Si un parámetro es un valor NULL `Object` referencia, la función devuelve cero.</span><span class="sxs-lookup"><span data-stu-id="267d1-948">If a parameter is a NULL `Object` reference, the function returns zero.</span></span> <span data-ttu-id="267d1-949">Si un `Object` contiene cualquier otro tipo, se produce una excepción.</span><span class="sxs-lookup"><span data-stu-id="267d1-949">If an `Object` contains any other type, an exception is thrown.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="267d1-950">Este ejemplo se utiliza `Len` para devolver el número de caracteres en una cadena.</span><span class="sxs-lookup"><span data-stu-id="267d1-950">This example uses `Len` to return the number of characters in a string.</span></span>  
  
 [!code-vb[VbVbalrStrings#33](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#33)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Len" />
      </Docs>
    </Member>
    <Member MemberName="Len">
      <MemberSignature Language="C#" Value="public static int Len (long Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Len(int64 Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Len(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Function Len (Expression As Long) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Len(long Expression);" />
      <MemberSignature Language="F#" Value="static member Len : int64 -&gt; int" Usage="Microsoft.VisualBasic.Strings.Len Expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="Expression">
          <span data-ttu-id="267d1-951">Any valid <see langword="String" /> expression or variable name.</span>
          <span class="sxs-lookup">
            <span data-stu-id="267d1-951">Any valid <see langword="String" /> expression or variable name.</span>
          </span>
          <span data-ttu-id="267d1-952">If <c>Expression</c> is of type <see langword="Object" />, the <see langword="Len" /> function returns the size as it will be written to the file by the <see langword="FilePut" /> function.</span>
          <span class="sxs-lookup">
            <span data-stu-id="267d1-952">If <c>Expression</c> is of type <see langword="Object" />, the <see langword="Len" /> function returns the size as it will be written to the file by the <see langword="FilePut" /> function.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="267d1-953">Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</span>
          <span class="sxs-lookup">
            <span data-stu-id="267d1-953">Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="267d1-954">Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</span>
          <span class="sxs-lookup">
            <span data-stu-id="267d1-954">Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="267d1-955">Con tipos definidos por el usuario y `Object` variables, la `Len` función devuelve el tamaño que se escribirá en el archivo por el `FilePut` función.</span><span class="sxs-lookup"><span data-stu-id="267d1-955">With user-defined types and `Object` variables, the `Len` function returns the size as it will be written to the file by the `FilePut` function.</span></span> <span data-ttu-id="267d1-956">Si un `Object` contiene un `String`, devolverá la longitud de la cadena.</span><span class="sxs-lookup"><span data-stu-id="267d1-956">If an `Object` contains a `String`, it will return the length of the string.</span></span> <span data-ttu-id="267d1-957">Si un `Object` contiene cualquier otro tipo, devolverá el tamaño del objeto tal como se escribirá en el archivo por el `FilePut` función.</span><span class="sxs-lookup"><span data-stu-id="267d1-957">If an `Object` contains any other type, it will return the size of the object as it will be written to the file by the `FilePut` function.</span></span>  
  
 <span data-ttu-id="267d1-958">El `VBFixedString` atributo puede aplicarse a campos de cadena de objetos para indicar el tamaño de la cadena, en bytes, cuando se escribe en el disco.</span><span class="sxs-lookup"><span data-stu-id="267d1-958">The `VBFixedString` attribute can be applied to string fields in objects to indicate the size of the string, in bytes, when written to disk.</span></span> <span data-ttu-id="267d1-959">El `Len` función usa el `VBFixedString` atributo, si está disponible, al determinar el tamaño de `Object` variables.</span><span class="sxs-lookup"><span data-stu-id="267d1-959">The `Len` function uses the `VBFixedString` attribute, if available, when determining the size of `Object` variables.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="267d1-960">El `Len` función puede no ser capaz de determinar el número real de bytes de almacenamiento necesarios cuando se usa con cadenas de longitud variable en tipos de datos definido por el usuario.</span><span class="sxs-lookup"><span data-stu-id="267d1-960">The `Len` function may not be able to determine the actual number of storage bytes required when used with variable-length strings in user-defined data types.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="267d1-961">El `LenB` función en versiones anteriores de Visual Basic, devuelve el número de bytes en una cadena en lugar de caracteres.</span><span class="sxs-lookup"><span data-stu-id="267d1-961">The `LenB` function in earlier versions of Visual Basic returns the number of bytes in a string rather than characters.</span></span> <span data-ttu-id="267d1-962">Se utiliza principalmente para convertir cadenas en aplicaciones de caracteres de doble byte (DBCS).</span><span class="sxs-lookup"><span data-stu-id="267d1-962">It is used primarily for converting strings in double-byte character set (DBCS) applications.</span></span> <span data-ttu-id="267d1-963">Todas las cadenas en Visual Basic actuales están en Unicode, y `LenB` ya no se admite.</span><span class="sxs-lookup"><span data-stu-id="267d1-963">All current Visual Basic strings are in Unicode, and `LenB` is no longer supported.</span></span>  
  
## <a name="smart-device-developer-notes"></a><span data-ttu-id="267d1-964">Notas de desarrollador de dispositivos inteligentes</span><span class="sxs-lookup"><span data-stu-id="267d1-964">Smart Device Developer Notes</span></span>  
 <span data-ttu-id="267d1-965">El `Len` función acepta solo `String` y `Object` variables como parámetros.</span><span class="sxs-lookup"><span data-stu-id="267d1-965">The `Len` function accepts only `String` and `Object` variables as parameters.</span></span> <span data-ttu-id="267d1-966">Si un `Object` contiene un `String`, devolverá la longitud de la `String`.</span><span class="sxs-lookup"><span data-stu-id="267d1-966">If an `Object` contains a `String`, it will return the length of the `String`.</span></span> <span data-ttu-id="267d1-967">Si un parámetro es un valor NULL `Object` referencia, la función devuelve cero.</span><span class="sxs-lookup"><span data-stu-id="267d1-967">If a parameter is a NULL `Object` reference, the function returns zero.</span></span> <span data-ttu-id="267d1-968">Si un `Object` contiene cualquier otro tipo, se produce una excepción.</span><span class="sxs-lookup"><span data-stu-id="267d1-968">If an `Object` contains any other type, an exception is thrown.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="267d1-969">Este ejemplo se utiliza `Len` para devolver el número de caracteres en una cadena.</span><span class="sxs-lookup"><span data-stu-id="267d1-969">This example uses `Len` to return the number of characters in a string.</span></span>  
  
 [!code-vb[VbVbalrStrings#33](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#33)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Len" />
      </Docs>
    </Member>
    <Member MemberName="Len">
      <MemberSignature Language="C#" Value="public static int Len (object Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Len(object Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Len(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Len (Expression As Object) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Len(System::Object ^ Expression);" />
      <MemberSignature Language="F#" Value="static member Len : obj -&gt; int" Usage="Microsoft.VisualBasic.Strings.Len Expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Expression">
          <span data-ttu-id="267d1-970">Any valid <see langword="String" /> expression or variable name.</span>
          <span class="sxs-lookup">
            <span data-stu-id="267d1-970">Any valid <see langword="String" /> expression or variable name.</span>
          </span>
          <span data-ttu-id="267d1-971">If <c>Expression</c> is of type <see langword="Object" />, the <see langword="Len" /> function returns the size as it will be written to the file by the <see langword="FilePut" /> function.</span>
          <span class="sxs-lookup">
            <span data-stu-id="267d1-971">If <c>Expression</c> is of type <see langword="Object" />, the <see langword="Len" /> function returns the size as it will be written to the file by the <see langword="FilePut" /> function.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="267d1-972">Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</span>
          <span class="sxs-lookup">
            <span data-stu-id="267d1-972">Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="267d1-973">Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</span>
          <span class="sxs-lookup">
            <span data-stu-id="267d1-973">Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="267d1-974">Con tipos definidos por el usuario y `Object` variables, la `Len` función devuelve el tamaño que se escribirá en el archivo por el `FilePut` función.</span><span class="sxs-lookup"><span data-stu-id="267d1-974">With user-defined types and `Object` variables, the `Len` function returns the size as it will be written to the file by the `FilePut` function.</span></span> <span data-ttu-id="267d1-975">Si un `Object` contiene un `String`, devolverá la longitud de la cadena.</span><span class="sxs-lookup"><span data-stu-id="267d1-975">If an `Object` contains a `String`, it will return the length of the string.</span></span> <span data-ttu-id="267d1-976">Si un `Object` contiene cualquier otro tipo, devolverá el tamaño del objeto tal como se escribirá en el archivo por el `FilePut` función.</span><span class="sxs-lookup"><span data-stu-id="267d1-976">If an `Object` contains any other type, it will return the size of the object as it will be written to the file by the `FilePut` function.</span></span>  
  
 <span data-ttu-id="267d1-977">El `VBFixedString` atributo puede aplicarse a campos de cadena de objetos para indicar el tamaño de la cadena, en bytes, cuando se escribe en el disco.</span><span class="sxs-lookup"><span data-stu-id="267d1-977">The `VBFixedString` attribute can be applied to string fields in objects to indicate the size of the string, in bytes, when written to disk.</span></span> <span data-ttu-id="267d1-978">El `Len` función usa el `VBFixedString` atributo, si está disponible, al determinar el tamaño de `Object` variables.</span><span class="sxs-lookup"><span data-stu-id="267d1-978">The `Len` function uses the `VBFixedString` attribute, if available, when determining the size of `Object` variables.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="267d1-979">El `Len` función puede no ser capaz de determinar el número real de bytes de almacenamiento necesarios cuando se usa con cadenas de longitud variable en tipos de datos definido por el usuario.</span><span class="sxs-lookup"><span data-stu-id="267d1-979">The `Len` function may not be able to determine the actual number of storage bytes required when used with variable-length strings in user-defined data types.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="267d1-980">El `LenB` función en versiones anteriores de Visual Basic, devuelve el número de bytes en una cadena en lugar de caracteres.</span><span class="sxs-lookup"><span data-stu-id="267d1-980">The `LenB` function in earlier versions of Visual Basic returns the number of bytes in a string rather than characters.</span></span> <span data-ttu-id="267d1-981">Se utiliza principalmente para convertir cadenas en aplicaciones de caracteres de doble byte (DBCS).</span><span class="sxs-lookup"><span data-stu-id="267d1-981">It is used primarily for converting strings in double-byte character set (DBCS) applications.</span></span> <span data-ttu-id="267d1-982">Todas las cadenas en Visual Basic actuales están en Unicode, y `LenB` ya no se admite.</span><span class="sxs-lookup"><span data-stu-id="267d1-982">All current Visual Basic strings are in Unicode, and `LenB` is no longer supported.</span></span>  
  
## <a name="smart-device-developer-notes"></a><span data-ttu-id="267d1-983">Notas de desarrollador de dispositivos inteligentes</span><span class="sxs-lookup"><span data-stu-id="267d1-983">Smart Device Developer Notes</span></span>  
 <span data-ttu-id="267d1-984">El `Len` función acepta solo `String` y `Object` variables como parámetros.</span><span class="sxs-lookup"><span data-stu-id="267d1-984">The `Len` function accepts only `String` and `Object` variables as parameters.</span></span> <span data-ttu-id="267d1-985">Si un `Object` contiene un `String`, devolverá la longitud de la `String`.</span><span class="sxs-lookup"><span data-stu-id="267d1-985">If an `Object` contains a `String`, it will return the length of the `String`.</span></span> <span data-ttu-id="267d1-986">Si un parámetro es un valor NULL `Object` referencia, la función devuelve cero.</span><span class="sxs-lookup"><span data-stu-id="267d1-986">If a parameter is a NULL `Object` reference, the function returns zero.</span></span> <span data-ttu-id="267d1-987">Si un `Object` contiene cualquier otro tipo, se produce una excepción.</span><span class="sxs-lookup"><span data-stu-id="267d1-987">If an `Object` contains any other type, an exception is thrown.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="267d1-988">Este ejemplo se utiliza `Len` para devolver el número de caracteres en una cadena.</span><span class="sxs-lookup"><span data-stu-id="267d1-988">This example uses `Len` to return the number of characters in a string.</span></span>  
  
 [!code-vb[VbVbalrStrings#33](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#33)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Len" />
      </Docs>
    </Member>
    <Member MemberName="Len">
      <MemberSignature Language="C#" Value="public static int Len (sbyte Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Len(int8 Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Len(System.SByte)" />
      <MemberSignature Language="VB.NET" Value="Public Function Len (Expression As SByte) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Len(System::SByte Expression);" />
      <MemberSignature Language="F#" Value="static member Len : sbyte -&gt; int" Usage="Microsoft.VisualBasic.Strings.Len Expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.SByte" />
      </Parameters>
      <Docs>
        <param name="Expression">
          <span data-ttu-id="267d1-989">Any valid <see langword="String" /> expression or variable name.</span>
          <span class="sxs-lookup">
            <span data-stu-id="267d1-989">Any valid <see langword="String" /> expression or variable name.</span>
          </span>
          <span data-ttu-id="267d1-990">If <c>Expression</c> is of type <see langword="Object" />, the <see langword="Len" /> function returns the size as it will be written to the file by the <see langword="FilePut" /> function.</span>
          <span class="sxs-lookup">
            <span data-stu-id="267d1-990">If <c>Expression</c> is of type <see langword="Object" />, the <see langword="Len" /> function returns the size as it will be written to the file by the <see langword="FilePut" /> function.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="267d1-991">Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</span>
          <span class="sxs-lookup">
            <span data-stu-id="267d1-991">Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="267d1-992">Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</span>
          <span class="sxs-lookup">
            <span data-stu-id="267d1-992">Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="267d1-993">Con tipos definidos por el usuario y `Object` variables, la `Len` función devuelve el tamaño que se escribirá en el archivo por el `FilePut` función.</span><span class="sxs-lookup"><span data-stu-id="267d1-993">With user-defined types and `Object` variables, the `Len` function returns the size as it will be written to the file by the `FilePut` function.</span></span> <span data-ttu-id="267d1-994">Si un `Object` contiene un `String`, devolverá la longitud de la cadena.</span><span class="sxs-lookup"><span data-stu-id="267d1-994">If an `Object` contains a `String`, it will return the length of the string.</span></span> <span data-ttu-id="267d1-995">Si un `Object` contiene cualquier otro tipo, devolverá el tamaño del objeto tal como se escribirá en el archivo por el `FilePut` función.</span><span class="sxs-lookup"><span data-stu-id="267d1-995">If an `Object` contains any other type, it will return the size of the object as it will be written to the file by the `FilePut` function.</span></span>  
  
 <span data-ttu-id="267d1-996">El `VBFixedString` atributo puede aplicarse a campos de cadena de objetos para indicar el tamaño de la cadena, en bytes, cuando se escribe en el disco.</span><span class="sxs-lookup"><span data-stu-id="267d1-996">The `VBFixedString` attribute can be applied to string fields in objects to indicate the size of the string, in bytes, when written to disk.</span></span> <span data-ttu-id="267d1-997">El `Len` función usa el `VBFixedString` atributo, si está disponible, al determinar el tamaño de `Object` variables.</span><span class="sxs-lookup"><span data-stu-id="267d1-997">The `Len` function uses the `VBFixedString` attribute, if available, when determining the size of `Object` variables.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="267d1-998">El `Len` función puede no ser capaz de determinar el número real de bytes de almacenamiento necesarios cuando se usa con cadenas de longitud variable en tipos de datos definido por el usuario.</span><span class="sxs-lookup"><span data-stu-id="267d1-998">The `Len` function may not be able to determine the actual number of storage bytes required when used with variable-length strings in user-defined data types.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="267d1-999">El `LenB` función en versiones anteriores de Visual Basic, devuelve el número de bytes en una cadena en lugar de caracteres.</span><span class="sxs-lookup"><span data-stu-id="267d1-999">The `LenB` function in earlier versions of Visual Basic returns the number of bytes in a string rather than characters.</span></span> <span data-ttu-id="267d1-1000">Se utiliza principalmente para convertir cadenas en aplicaciones de caracteres de doble byte (DBCS).</span><span class="sxs-lookup"><span data-stu-id="267d1-1000">It is used primarily for converting strings in double-byte character set (DBCS) applications.</span></span> <span data-ttu-id="267d1-1001">Todas las cadenas en Visual Basic actuales están en Unicode, y `LenB` ya no se admite.</span><span class="sxs-lookup"><span data-stu-id="267d1-1001">All current Visual Basic strings are in Unicode, and `LenB` is no longer supported.</span></span>  
  
## <a name="smart-device-developer-notes"></a><span data-ttu-id="267d1-1002">Notas de desarrollador de dispositivos inteligentes</span><span class="sxs-lookup"><span data-stu-id="267d1-1002">Smart Device Developer Notes</span></span>  
 <span data-ttu-id="267d1-1003">El `Len` función acepta solo `String` y `Object` variables como parámetros.</span><span class="sxs-lookup"><span data-stu-id="267d1-1003">The `Len` function accepts only `String` and `Object` variables as parameters.</span></span> <span data-ttu-id="267d1-1004">Si un `Object` contiene un `String`, devolverá la longitud de la `String`.</span><span class="sxs-lookup"><span data-stu-id="267d1-1004">If an `Object` contains a `String`, it will return the length of the `String`.</span></span> <span data-ttu-id="267d1-1005">Si un parámetro es un valor NULL `Object` referencia, la función devuelve cero.</span><span class="sxs-lookup"><span data-stu-id="267d1-1005">If a parameter is a NULL `Object` reference, the function returns zero.</span></span> <span data-ttu-id="267d1-1006">Si un `Object` contiene cualquier otro tipo, se produce una excepción.</span><span class="sxs-lookup"><span data-stu-id="267d1-1006">If an `Object` contains any other type, an exception is thrown.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="267d1-1007">Este ejemplo se utiliza `Len` para devolver el número de caracteres en una cadena.</span><span class="sxs-lookup"><span data-stu-id="267d1-1007">This example uses `Len` to return the number of characters in a string.</span></span>  
  
 [!code-vb[VbVbalrStrings#33](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#33)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Strings.Len(System.Byte)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Len" />
      </Docs>
    </Member>
    <Member MemberName="Len">
      <MemberSignature Language="C#" Value="public static int Len (float Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Len(float32 Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Len(System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Function Len (Expression As Single) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Len(float Expression);" />
      <MemberSignature Language="F#" Value="static member Len : single -&gt; int" Usage="Microsoft.VisualBasic.Strings.Len Expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="Expression">
          <span data-ttu-id="267d1-1008">Any valid <see langword="String" /> expression or variable name.</span>
          <span class="sxs-lookup">
            <span data-stu-id="267d1-1008">Any valid <see langword="String" /> expression or variable name.</span>
          </span>
          <span data-ttu-id="267d1-1009">If <c>Expression</c> is of type <see langword="Object" />, the <see langword="Len" /> function returns the size as it will be written to the file by the <see langword="FilePut" /> function.</span>
          <span class="sxs-lookup">
            <span data-stu-id="267d1-1009">If <c>Expression</c> is of type <see langword="Object" />, the <see langword="Len" /> function returns the size as it will be written to the file by the <see langword="FilePut" /> function.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="267d1-1010">Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</span>
          <span class="sxs-lookup">
            <span data-stu-id="267d1-1010">Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="267d1-1011">Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</span>
          <span class="sxs-lookup">
            <span data-stu-id="267d1-1011">Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="267d1-1012">Con tipos definidos por el usuario y `Object` variables, la `Len` función devuelve el tamaño que se escribirá en el archivo por el `FilePut` función.</span><span class="sxs-lookup"><span data-stu-id="267d1-1012">With user-defined types and `Object` variables, the `Len` function returns the size as it will be written to the file by the `FilePut` function.</span></span> <span data-ttu-id="267d1-1013">Si un `Object` contiene un `String`, devolverá la longitud de la cadena.</span><span class="sxs-lookup"><span data-stu-id="267d1-1013">If an `Object` contains a `String`, it will return the length of the string.</span></span> <span data-ttu-id="267d1-1014">Si un `Object` contiene cualquier otro tipo, devolverá el tamaño del objeto tal como se escribirá en el archivo por el `FilePut` función.</span><span class="sxs-lookup"><span data-stu-id="267d1-1014">If an `Object` contains any other type, it will return the size of the object as it will be written to the file by the `FilePut` function.</span></span>  
  
 <span data-ttu-id="267d1-1015">El `VBFixedString` atributo puede aplicarse a campos de cadena de objetos para indicar el tamaño de la cadena, en bytes, cuando se escribe en el disco.</span><span class="sxs-lookup"><span data-stu-id="267d1-1015">The `VBFixedString` attribute can be applied to string fields in objects to indicate the size of the string, in bytes, when written to disk.</span></span> <span data-ttu-id="267d1-1016">El `Len` función usa el `VBFixedString` atributo, si está disponible, al determinar el tamaño de `Object` variables.</span><span class="sxs-lookup"><span data-stu-id="267d1-1016">The `Len` function uses the `VBFixedString` attribute, if available, when determining the size of `Object` variables.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="267d1-1017">El `Len` función puede no ser capaz de determinar el número real de bytes de almacenamiento necesarios cuando se usa con cadenas de longitud variable en tipos de datos definido por el usuario.</span><span class="sxs-lookup"><span data-stu-id="267d1-1017">The `Len` function may not be able to determine the actual number of storage bytes required when used with variable-length strings in user-defined data types.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="267d1-1018">El `LenB` función en versiones anteriores de Visual Basic, devuelve el número de bytes en una cadena en lugar de caracteres.</span><span class="sxs-lookup"><span data-stu-id="267d1-1018">The `LenB` function in earlier versions of Visual Basic returns the number of bytes in a string rather than characters.</span></span> <span data-ttu-id="267d1-1019">Se utiliza principalmente para convertir cadenas en aplicaciones de caracteres de doble byte (DBCS).</span><span class="sxs-lookup"><span data-stu-id="267d1-1019">It is used primarily for converting strings in double-byte character set (DBCS) applications.</span></span> <span data-ttu-id="267d1-1020">Todas las cadenas en Visual Basic actuales están en Unicode, y `LenB` ya no se admite.</span><span class="sxs-lookup"><span data-stu-id="267d1-1020">All current Visual Basic strings are in Unicode, and `LenB` is no longer supported.</span></span>  
  
## <a name="smart-device-developer-notes"></a><span data-ttu-id="267d1-1021">Notas de desarrollador de dispositivos inteligentes</span><span class="sxs-lookup"><span data-stu-id="267d1-1021">Smart Device Developer Notes</span></span>  
 <span data-ttu-id="267d1-1022">El `Len` función acepta solo `String` y `Object` variables como parámetros.</span><span class="sxs-lookup"><span data-stu-id="267d1-1022">The `Len` function accepts only `String` and `Object` variables as parameters.</span></span> <span data-ttu-id="267d1-1023">Si un `Object` contiene un `String`, devolverá la longitud de la `String`.</span><span class="sxs-lookup"><span data-stu-id="267d1-1023">If an `Object` contains a `String`, it will return the length of the `String`.</span></span> <span data-ttu-id="267d1-1024">Si un parámetro es un valor NULL `Object` referencia, la función devuelve cero.</span><span class="sxs-lookup"><span data-stu-id="267d1-1024">If a parameter is a NULL `Object` reference, the function returns zero.</span></span> <span data-ttu-id="267d1-1025">Si un `Object` contiene cualquier otro tipo, se produce una excepción.</span><span class="sxs-lookup"><span data-stu-id="267d1-1025">If an `Object` contains any other type, an exception is thrown.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="267d1-1026">Este ejemplo se utiliza `Len` para devolver el número de caracteres en una cadena.</span><span class="sxs-lookup"><span data-stu-id="267d1-1026">This example uses `Len` to return the number of characters in a string.</span></span>  
  
 [!code-vb[VbVbalrStrings#33](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#33)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Len" />
      </Docs>
    </Member>
    <Member MemberName="Len">
      <MemberSignature Language="C#" Value="public static int Len (string Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Len(string Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Len(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function Len (Expression As String) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Len(System::String ^ Expression);" />
      <MemberSignature Language="F#" Value="static member Len : string -&gt; int" Usage="Microsoft.VisualBasic.Strings.Len Expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="Expression">
          <span data-ttu-id="267d1-1027">Any valid <see langword="String" /> expression or variable name.</span>
          <span class="sxs-lookup">
            <span data-stu-id="267d1-1027">Any valid <see langword="String" /> expression or variable name.</span>
          </span>
          <span data-ttu-id="267d1-1028">If <c>Expression</c> is of type <see langword="Object" />, the <see langword="Len" /> function returns the size as it will be written to the file by the <see langword="FilePut" /> function.</span>
          <span class="sxs-lookup">
            <span data-stu-id="267d1-1028">If <c>Expression</c> is of type <see langword="Object" />, the <see langword="Len" /> function returns the size as it will be written to the file by the <see langword="FilePut" /> function.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="267d1-1029">Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</span>
          <span class="sxs-lookup">
            <span data-stu-id="267d1-1029">Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="267d1-1030">Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</span>
          <span class="sxs-lookup">
            <span data-stu-id="267d1-1030">Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="267d1-1031">Con tipos definidos por el usuario y `Object` variables, la `Len` función devuelve el tamaño que se escribirá en el archivo por el `FilePut` función.</span><span class="sxs-lookup"><span data-stu-id="267d1-1031">With user-defined types and `Object` variables, the `Len` function returns the size as it will be written to the file by the `FilePut` function.</span></span> <span data-ttu-id="267d1-1032">Si un `Object` contiene un `String`, devolverá la longitud de la cadena.</span><span class="sxs-lookup"><span data-stu-id="267d1-1032">If an `Object` contains a `String`, it will return the length of the string.</span></span> <span data-ttu-id="267d1-1033">Si un `Object` contiene cualquier otro tipo, devolverá el tamaño del objeto tal como se escribirá en el archivo por el `FilePut` función.</span><span class="sxs-lookup"><span data-stu-id="267d1-1033">If an `Object` contains any other type, it will return the size of the object as it will be written to the file by the `FilePut` function.</span></span>  
  
 <span data-ttu-id="267d1-1034">El `VBFixedString` atributo puede aplicarse a campos de cadena de objetos para indicar el tamaño de la cadena, en bytes, cuando se escribe en el disco.</span><span class="sxs-lookup"><span data-stu-id="267d1-1034">The `VBFixedString` attribute can be applied to string fields in objects to indicate the size of the string, in bytes, when written to disk.</span></span> <span data-ttu-id="267d1-1035">El `Len` función usa el `VBFixedString` atributo, si está disponible, al determinar el tamaño de `Object` variables.</span><span class="sxs-lookup"><span data-stu-id="267d1-1035">The `Len` function uses the `VBFixedString` attribute, if available, when determining the size of `Object` variables.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="267d1-1036">El `Len` función puede no ser capaz de determinar el número real de bytes de almacenamiento necesarios cuando se usa con cadenas de longitud variable en tipos de datos definido por el usuario.</span><span class="sxs-lookup"><span data-stu-id="267d1-1036">The `Len` function may not be able to determine the actual number of storage bytes required when used with variable-length strings in user-defined data types.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="267d1-1037">El `LenB` función en versiones anteriores de Visual Basic, devuelve el número de bytes en una cadena en lugar de caracteres.</span><span class="sxs-lookup"><span data-stu-id="267d1-1037">The `LenB` function in earlier versions of Visual Basic returns the number of bytes in a string rather than characters.</span></span> <span data-ttu-id="267d1-1038">Se utiliza principalmente para convertir cadenas en aplicaciones de caracteres de doble byte (DBCS).</span><span class="sxs-lookup"><span data-stu-id="267d1-1038">It is used primarily for converting strings in double-byte character set (DBCS) applications.</span></span> <span data-ttu-id="267d1-1039">Todas las cadenas en Visual Basic actuales están en Unicode, y `LenB` ya no se admite.</span><span class="sxs-lookup"><span data-stu-id="267d1-1039">All current Visual Basic strings are in Unicode, and `LenB` is no longer supported.</span></span>  
  
## <a name="smart-device-developer-notes"></a><span data-ttu-id="267d1-1040">Notas de desarrollador de dispositivos inteligentes</span><span class="sxs-lookup"><span data-stu-id="267d1-1040">Smart Device Developer Notes</span></span>  
 <span data-ttu-id="267d1-1041">El `Len` función acepta solo `String` y `Object` variables como parámetros.</span><span class="sxs-lookup"><span data-stu-id="267d1-1041">The `Len` function accepts only `String` and `Object` variables as parameters.</span></span> <span data-ttu-id="267d1-1042">Si un `Object` contiene un `String`, devolverá la longitud de la `String`.</span><span class="sxs-lookup"><span data-stu-id="267d1-1042">If an `Object` contains a `String`, it will return the length of the `String`.</span></span> <span data-ttu-id="267d1-1043">Si un parámetro es un valor NULL `Object` referencia, la función devuelve cero.</span><span class="sxs-lookup"><span data-stu-id="267d1-1043">If a parameter is a NULL `Object` reference, the function returns zero.</span></span> <span data-ttu-id="267d1-1044">Si un `Object` contiene cualquier otro tipo, se produce una excepción.</span><span class="sxs-lookup"><span data-stu-id="267d1-1044">If an `Object` contains any other type, an exception is thrown.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="267d1-1045">Este ejemplo se utiliza `Len` para devolver el número de caracteres en una cadena.</span><span class="sxs-lookup"><span data-stu-id="267d1-1045">This example uses `Len` to return the number of characters in a string.</span></span>  
  
 [!code-vb[VbVbalrStrings#33](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#33)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Len" />
      </Docs>
    </Member>
    <Member MemberName="Len">
      <MemberSignature Language="C#" Value="public static int Len (ushort Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Len(unsigned int16 Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Len(System.UInt16)" />
      <MemberSignature Language="VB.NET" Value="Public Function Len (Expression As UShort) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Len(System::UInt16 Expression);" />
      <MemberSignature Language="F#" Value="static member Len : uint16 -&gt; int" Usage="Microsoft.VisualBasic.Strings.Len Expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.UInt16" />
      </Parameters>
      <Docs>
        <param name="Expression">
          <span data-ttu-id="267d1-1046">Any valid <see langword="String" /> expression or variable name.</span>
          <span class="sxs-lookup">
            <span data-stu-id="267d1-1046">Any valid <see langword="String" /> expression or variable name.</span>
          </span>
          <span data-ttu-id="267d1-1047">If <c>Expression</c> is of type <see langword="Object" />, the <see langword="Len" /> function returns the size as it will be written to the file by the <see langword="FilePut" /> function.</span>
          <span class="sxs-lookup">
            <span data-stu-id="267d1-1047">If <c>Expression</c> is of type <see langword="Object" />, the <see langword="Len" /> function returns the size as it will be written to the file by the <see langword="FilePut" /> function.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="267d1-1048">Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</span>
          <span class="sxs-lookup">
            <span data-stu-id="267d1-1048">Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="267d1-1049">Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</span>
          <span class="sxs-lookup">
            <span data-stu-id="267d1-1049">Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="267d1-1050">Con tipos definidos por el usuario y `Object` variables, la `Len` función devuelve el tamaño que se escribirá en el archivo por el `FilePut` función.</span><span class="sxs-lookup"><span data-stu-id="267d1-1050">With user-defined types and `Object` variables, the `Len` function returns the size as it will be written to the file by the `FilePut` function.</span></span> <span data-ttu-id="267d1-1051">Si un `Object` contiene un `String`, devolverá la longitud de la cadena.</span><span class="sxs-lookup"><span data-stu-id="267d1-1051">If an `Object` contains a `String`, it will return the length of the string.</span></span> <span data-ttu-id="267d1-1052">Si un `Object` contiene cualquier otro tipo, devolverá el tamaño del objeto tal como se escribirá en el archivo por el `FilePut` función.</span><span class="sxs-lookup"><span data-stu-id="267d1-1052">If an `Object` contains any other type, it will return the size of the object as it will be written to the file by the `FilePut` function.</span></span>  
  
 <span data-ttu-id="267d1-1053">El `VBFixedString` atributo puede aplicarse a campos de cadena de objetos para indicar el tamaño de la cadena, en bytes, cuando se escribe en el disco.</span><span class="sxs-lookup"><span data-stu-id="267d1-1053">The `VBFixedString` attribute can be applied to string fields in objects to indicate the size of the string, in bytes, when written to disk.</span></span> <span data-ttu-id="267d1-1054">El `Len` función usa el `VBFixedString` atributo, si está disponible, al determinar el tamaño de `Object` variables.</span><span class="sxs-lookup"><span data-stu-id="267d1-1054">The `Len` function uses the `VBFixedString` attribute, if available, when determining the size of `Object` variables.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="267d1-1055">El `Len` función puede no ser capaz de determinar el número real de bytes de almacenamiento necesarios cuando se usa con cadenas de longitud variable en tipos de datos definido por el usuario.</span><span class="sxs-lookup"><span data-stu-id="267d1-1055">The `Len` function may not be able to determine the actual number of storage bytes required when used with variable-length strings in user-defined data types.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="267d1-1056">El `LenB` función en versiones anteriores de Visual Basic, devuelve el número de bytes en una cadena en lugar de caracteres.</span><span class="sxs-lookup"><span data-stu-id="267d1-1056">The `LenB` function in earlier versions of Visual Basic returns the number of bytes in a string rather than characters.</span></span> <span data-ttu-id="267d1-1057">Se utiliza principalmente para convertir cadenas en aplicaciones de caracteres de doble byte (DBCS).</span><span class="sxs-lookup"><span data-stu-id="267d1-1057">It is used primarily for converting strings in double-byte character set (DBCS) applications.</span></span> <span data-ttu-id="267d1-1058">Todas las cadenas en Visual Basic actuales están en Unicode, y `LenB` ya no se admite.</span><span class="sxs-lookup"><span data-stu-id="267d1-1058">All current Visual Basic strings are in Unicode, and `LenB` is no longer supported.</span></span>  
  
## <a name="smart-device-developer-notes"></a><span data-ttu-id="267d1-1059">Notas de desarrollador de dispositivos inteligentes</span><span class="sxs-lookup"><span data-stu-id="267d1-1059">Smart Device Developer Notes</span></span>  
 <span data-ttu-id="267d1-1060">El `Len` función acepta solo `String` y `Object` variables como parámetros.</span><span class="sxs-lookup"><span data-stu-id="267d1-1060">The `Len` function accepts only `String` and `Object` variables as parameters.</span></span> <span data-ttu-id="267d1-1061">Si un `Object` contiene un `String`, devolverá la longitud de la `String`.</span><span class="sxs-lookup"><span data-stu-id="267d1-1061">If an `Object` contains a `String`, it will return the length of the `String`.</span></span> <span data-ttu-id="267d1-1062">Si un parámetro es un valor NULL `Object` referencia, la función devuelve cero.</span><span class="sxs-lookup"><span data-stu-id="267d1-1062">If a parameter is a NULL `Object` reference, the function returns zero.</span></span> <span data-ttu-id="267d1-1063">Si un `Object` contiene cualquier otro tipo, se produce una excepción.</span><span class="sxs-lookup"><span data-stu-id="267d1-1063">If an `Object` contains any other type, an exception is thrown.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="267d1-1064">Este ejemplo se utiliza `Len` para devolver el número de caracteres en una cadena.</span><span class="sxs-lookup"><span data-stu-id="267d1-1064">This example uses `Len` to return the number of characters in a string.</span></span>  
  
 [!code-vb[VbVbalrStrings#33](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#33)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Strings.Len(System.Int16)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Len" />
      </Docs>
    </Member>
    <Member MemberName="Len">
      <MemberSignature Language="C#" Value="public static int Len (uint Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Len(unsigned int32 Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Len(System.UInt32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Len (Expression As UInteger) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Len(System::UInt32 Expression);" />
      <MemberSignature Language="F#" Value="static member Len : uint32 -&gt; int" Usage="Microsoft.VisualBasic.Strings.Len Expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.UInt32" />
      </Parameters>
      <Docs>
        <param name="Expression">
          <span data-ttu-id="267d1-1065">Any valid <see langword="String" /> expression or variable name.</span>
          <span class="sxs-lookup">
            <span data-stu-id="267d1-1065">Any valid <see langword="String" /> expression or variable name.</span>
          </span>
          <span data-ttu-id="267d1-1066">If <c>Expression</c> is of type <see langword="Object" />, the <see langword="Len" /> function returns the size as it will be written to the file by the <see langword="FilePut" /> function.</span>
          <span class="sxs-lookup">
            <span data-stu-id="267d1-1066">If <c>Expression</c> is of type <see langword="Object" />, the <see langword="Len" /> function returns the size as it will be written to the file by the <see langword="FilePut" /> function.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="267d1-1067">Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</span>
          <span class="sxs-lookup">
            <span data-stu-id="267d1-1067">Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="267d1-1068">Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</span>
          <span class="sxs-lookup">
            <span data-stu-id="267d1-1068">Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="267d1-1069">Con tipos definidos por el usuario y `Object` variables, la `Len` función devuelve el tamaño que se escribirá en el archivo por el `FilePut` función.</span><span class="sxs-lookup"><span data-stu-id="267d1-1069">With user-defined types and `Object` variables, the `Len` function returns the size as it will be written to the file by the `FilePut` function.</span></span> <span data-ttu-id="267d1-1070">Si un `Object` contiene un `String`, devolverá la longitud de la cadena.</span><span class="sxs-lookup"><span data-stu-id="267d1-1070">If an `Object` contains a `String`, it will return the length of the string.</span></span> <span data-ttu-id="267d1-1071">Si un `Object` contiene cualquier otro tipo, devolverá el tamaño del objeto tal como se escribirá en el archivo por el `FilePut` función.</span><span class="sxs-lookup"><span data-stu-id="267d1-1071">If an `Object` contains any other type, it will return the size of the object as it will be written to the file by the `FilePut` function.</span></span>  
  
 <span data-ttu-id="267d1-1072">El `VBFixedString` atributo puede aplicarse a campos de cadena de objetos para indicar el tamaño de la cadena, en bytes, cuando se escribe en el disco.</span><span class="sxs-lookup"><span data-stu-id="267d1-1072">The `VBFixedString` attribute can be applied to string fields in objects to indicate the size of the string, in bytes, when written to disk.</span></span> <span data-ttu-id="267d1-1073">El `Len` función usa el `VBFixedString` atributo, si está disponible, al determinar el tamaño de `Object` variables.</span><span class="sxs-lookup"><span data-stu-id="267d1-1073">The `Len` function uses the `VBFixedString` attribute, if available, when determining the size of `Object` variables.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="267d1-1074">El `Len` función puede no ser capaz de determinar el número real de bytes de almacenamiento necesarios cuando se usa con cadenas de longitud variable en tipos de datos definido por el usuario.</span><span class="sxs-lookup"><span data-stu-id="267d1-1074">The `Len` function may not be able to determine the actual number of storage bytes required when used with variable-length strings in user-defined data types.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="267d1-1075">El `LenB` función en versiones anteriores de Visual Basic, devuelve el número de bytes en una cadena en lugar de caracteres.</span><span class="sxs-lookup"><span data-stu-id="267d1-1075">The `LenB` function in earlier versions of Visual Basic returns the number of bytes in a string rather than characters.</span></span> <span data-ttu-id="267d1-1076">Se utiliza principalmente para convertir cadenas en aplicaciones de caracteres de doble byte (DBCS).</span><span class="sxs-lookup"><span data-stu-id="267d1-1076">It is used primarily for converting strings in double-byte character set (DBCS) applications.</span></span> <span data-ttu-id="267d1-1077">Todas las cadenas en Visual Basic actuales están en Unicode, y `LenB` ya no se admite.</span><span class="sxs-lookup"><span data-stu-id="267d1-1077">All current Visual Basic strings are in Unicode, and `LenB` is no longer supported.</span></span>  
  
## <a name="smart-device-developer-notes"></a><span data-ttu-id="267d1-1078">Notas de desarrollador de dispositivos inteligentes</span><span class="sxs-lookup"><span data-stu-id="267d1-1078">Smart Device Developer Notes</span></span>  
 <span data-ttu-id="267d1-1079">El `Len` función acepta solo `String` y `Object` variables como parámetros.</span><span class="sxs-lookup"><span data-stu-id="267d1-1079">The `Len` function accepts only `String` and `Object` variables as parameters.</span></span> <span data-ttu-id="267d1-1080">Si un `Object` contiene un `String`, devolverá la longitud de la `String`.</span><span class="sxs-lookup"><span data-stu-id="267d1-1080">If an `Object` contains a `String`, it will return the length of the `String`.</span></span> <span data-ttu-id="267d1-1081">Si un parámetro es un valor NULL `Object` referencia, la función devuelve cero.</span><span class="sxs-lookup"><span data-stu-id="267d1-1081">If a parameter is a NULL `Object` reference, the function returns zero.</span></span> <span data-ttu-id="267d1-1082">Si un `Object` contiene cualquier otro tipo, se produce una excepción.</span><span class="sxs-lookup"><span data-stu-id="267d1-1082">If an `Object` contains any other type, an exception is thrown.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="267d1-1083">Este ejemplo se utiliza `Len` para devolver el número de caracteres en una cadena.</span><span class="sxs-lookup"><span data-stu-id="267d1-1083">This example uses `Len` to return the number of characters in a string.</span></span>  
  
 [!code-vb[VbVbalrStrings#33](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#33)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Strings.Len(System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Len" />
      </Docs>
    </Member>
    <Member MemberName="Len">
      <MemberSignature Language="C#" Value="public static int Len (ulong Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Len(unsigned int64 Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Len(System.UInt64)" />
      <MemberSignature Language="VB.NET" Value="Public Function Len (Expression As ULong) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Len(System::UInt64 Expression);" />
      <MemberSignature Language="F#" Value="static member Len : uint64 -&gt; int" Usage="Microsoft.VisualBasic.Strings.Len Expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.UInt64" />
      </Parameters>
      <Docs>
        <param name="Expression">
          <span data-ttu-id="267d1-1084">Any valid <see langword="String" /> expression or variable name.</span>
          <span class="sxs-lookup">
            <span data-stu-id="267d1-1084">Any valid <see langword="String" /> expression or variable name.</span>
          </span>
          <span data-ttu-id="267d1-1085">If <c>Expression</c> is of type <see langword="Object" />, the <see langword="Len" /> function returns the size as it will be written to the file by the <see langword="FilePut" /> function.</span>
          <span class="sxs-lookup">
            <span data-stu-id="267d1-1085">If <c>Expression</c> is of type <see langword="Object" />, the <see langword="Len" /> function returns the size as it will be written to the file by the <see langword="FilePut" /> function.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="267d1-1086">Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</span>
          <span class="sxs-lookup">
            <span data-stu-id="267d1-1086">Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="267d1-1087">Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</span>
          <span class="sxs-lookup">
            <span data-stu-id="267d1-1087">Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="267d1-1088">Con tipos definidos por el usuario y `Object` variables, la `Len` función devuelve el tamaño que se escribirá en el archivo por el `FilePut` función.</span><span class="sxs-lookup"><span data-stu-id="267d1-1088">With user-defined types and `Object` variables, the `Len` function returns the size as it will be written to the file by the `FilePut` function.</span></span> <span data-ttu-id="267d1-1089">Si un `Object` contiene un `String`, devolverá la longitud de la cadena.</span><span class="sxs-lookup"><span data-stu-id="267d1-1089">If an `Object` contains a `String`, it will return the length of the string.</span></span> <span data-ttu-id="267d1-1090">Si un `Object` contiene cualquier otro tipo, devolverá el tamaño del objeto tal como se escribirá en el archivo por el `FilePut` función.</span><span class="sxs-lookup"><span data-stu-id="267d1-1090">If an `Object` contains any other type, it will return the size of the object as it will be written to the file by the `FilePut` function.</span></span>  
  
 <span data-ttu-id="267d1-1091">El `VBFixedString` atributo puede aplicarse a campos de cadena de objetos para indicar el tamaño de la cadena, en bytes, cuando se escribe en el disco.</span><span class="sxs-lookup"><span data-stu-id="267d1-1091">The `VBFixedString` attribute can be applied to string fields in objects to indicate the size of the string, in bytes, when written to disk.</span></span> <span data-ttu-id="267d1-1092">El `Len` función usa el `VBFixedString` atributo, si está disponible, al determinar el tamaño de `Object` variables.</span><span class="sxs-lookup"><span data-stu-id="267d1-1092">The `Len` function uses the `VBFixedString` attribute, if available, when determining the size of `Object` variables.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="267d1-1093">El `Len` función puede no ser capaz de determinar el número real de bytes de almacenamiento necesarios cuando se usa con cadenas de longitud variable en tipos de datos definido por el usuario.</span><span class="sxs-lookup"><span data-stu-id="267d1-1093">The `Len` function may not be able to determine the actual number of storage bytes required when used with variable-length strings in user-defined data types.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="267d1-1094">El `LenB` función en versiones anteriores de Visual Basic, devuelve el número de bytes en una cadena en lugar de caracteres.</span><span class="sxs-lookup"><span data-stu-id="267d1-1094">The `LenB` function in earlier versions of Visual Basic returns the number of bytes in a string rather than characters.</span></span> <span data-ttu-id="267d1-1095">Se utiliza principalmente para convertir cadenas en aplicaciones de caracteres de doble byte (DBCS).</span><span class="sxs-lookup"><span data-stu-id="267d1-1095">It is used primarily for converting strings in double-byte character set (DBCS) applications.</span></span> <span data-ttu-id="267d1-1096">Todas las cadenas en Visual Basic actuales están en Unicode, y `LenB` ya no se admite.</span><span class="sxs-lookup"><span data-stu-id="267d1-1096">All current Visual Basic strings are in Unicode, and `LenB` is no longer supported.</span></span>  
  
## <a name="smart-device-developer-notes"></a><span data-ttu-id="267d1-1097">Notas de desarrollador de dispositivos inteligentes</span><span class="sxs-lookup"><span data-stu-id="267d1-1097">Smart Device Developer Notes</span></span>  
 <span data-ttu-id="267d1-1098">El `Len` función acepta solo `String` y `Object` variables como parámetros.</span><span class="sxs-lookup"><span data-stu-id="267d1-1098">The `Len` function accepts only `String` and `Object` variables as parameters.</span></span> <span data-ttu-id="267d1-1099">Si un `Object` contiene un `String`, devolverá la longitud de la `String`.</span><span class="sxs-lookup"><span data-stu-id="267d1-1099">If an `Object` contains a `String`, it will return the length of the `String`.</span></span> <span data-ttu-id="267d1-1100">Si un parámetro es un valor NULL `Object` referencia, la función devuelve cero.</span><span class="sxs-lookup"><span data-stu-id="267d1-1100">If a parameter is a NULL `Object` reference, the function returns zero.</span></span> <span data-ttu-id="267d1-1101">Si un `Object` contiene cualquier otro tipo, se produce una excepción.</span><span class="sxs-lookup"><span data-stu-id="267d1-1101">If an `Object` contains any other type, an exception is thrown.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="267d1-1102">Este ejemplo se utiliza `Len` para devolver el número de caracteres en una cadena.</span><span class="sxs-lookup"><span data-stu-id="267d1-1102">This example uses `Len` to return the number of characters in a string.</span></span>  
  
 [!code-vb[VbVbalrStrings#33](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#33)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Strings.Len(System.Int64)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Len" />
      </Docs>
    </Member>
    <Member MemberName="LSet">
      <MemberSignature Language="C#" Value="public static string LSet (string Source, int Length);" />
      <MemberSignature Language="ILAsm" Value=".method public static string LSet(string Source, int32 Length) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.LSet(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function LSet (Source As String, Length As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ LSet(System::String ^ Source, int Length);" />
      <MemberSignature Language="F#" Value="static member LSet : string * int -&gt; string" Usage="Microsoft.VisualBasic.Strings.LSet (Source, Length)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Source" Type="System.String" />
        <Parameter Name="Length" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="Source">
          <span data-ttu-id="267d1-1103">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="267d1-1103">Required.</span>
          </span>
          <span data-ttu-id="267d1-1104">
            <see langword="String" /> expression.</span>
          <span class="sxs-lookup">
            <span data-stu-id="267d1-1104">
              <see langword="String" /> expression.</span>
          </span>
          <span data-ttu-id="267d1-1105">Name of string variable.</span>
          <span class="sxs-lookup">
            <span data-stu-id="267d1-1105">Name of string variable.</span>
          </span>
        </param>
        <param name="Length">
          <span data-ttu-id="267d1-1106">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="267d1-1106">Required.</span>
          </span>
          <span data-ttu-id="267d1-1107">
            <see langword="Integer" /> expression.</span>
          <span class="sxs-lookup">
            <span data-stu-id="267d1-1107">
              <see langword="Integer" /> expression.</span>
          </span>
          <span data-ttu-id="267d1-1108">Length of returned string.</span>
          <span class="sxs-lookup">
            <span data-stu-id="267d1-1108">Length of returned string.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="267d1-1109">Returns a left-aligned string containing the specified string adjusted to the specified length.</span>
          <span class="sxs-lookup">
            <span data-stu-id="267d1-1109">Returns a left-aligned string containing the specified string adjusted to the specified length.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="267d1-1110">Returns a left-aligned string containing the specified string adjusted to the specified length.</span>
          <span class="sxs-lookup">
            <span data-stu-id="267d1-1110">Returns a left-aligned string containing the specified string adjusted to the specified length.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="267d1-1111">Si la cadena especificada es mayor que la longitud especificada, se acorta la cadena devuelta a la longitud especificada.</span><span class="sxs-lookup"><span data-stu-id="267d1-1111">If the specified string is longer than the specified length, the returned string is shortened to the specified length.</span></span> <span data-ttu-id="267d1-1112">Si la cadena especificada es menor que la longitud especificada, se agregan espacios en el extremo derecho de la cadena devuelta hasta alcanzar la longitud adecuada.</span><span class="sxs-lookup"><span data-stu-id="267d1-1112">If the specified string is shorter than the specified length, spaces are added to the right end of the returned string to produce the appropriate length.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="267d1-1113">En este ejemplo se muestra el uso de la `LSet` función.</span><span class="sxs-lookup"><span data-stu-id="267d1-1113">This example demonstrates the use of the `LSet` function.</span></span>  
  
 [!code-vb[VbVbalrStrings#11](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#11)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Strings.RSet(System.String,System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="LTrim">
      <MemberSignature Language="C#" Value="public static string LTrim (string str);" />
      <MemberSignature Language="ILAsm" Value=".method public static string LTrim(string str) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.LTrim(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function LTrim (str As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ LTrim(System::String ^ str);" />
      <MemberSignature Language="F#" Value="static member LTrim : string -&gt; string" Usage="Microsoft.VisualBasic.Strings.LTrim str" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="str" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="str">
          <span data-ttu-id="267d1-1114">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="267d1-1114">Required.</span>
          </span>
          <span data-ttu-id="267d1-1115">Any valid <see langword="String" /> expression.</span>
          <span class="sxs-lookup">
            <span data-stu-id="267d1-1115">Any valid <see langword="String" /> expression.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="267d1-1116">Returns a string containing a copy of a specified string with no leading spaces (<see langword="LTrim" />), no trailing spaces (<see langword="RTrim" />), or no leading or trailing spaces (<see langword="Trim" />).</span>
          <span class="sxs-lookup">
            <span data-stu-id="267d1-1116">Returns a string containing a copy of a specified string with no leading spaces (<see langword="LTrim" />), no trailing spaces (<see langword="RTrim" />), or no leading or trailing spaces (<see langword="Trim" />).</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="267d1-1117">Returns a string containing a copy of a specified string with no leading spaces (<see langword="LTrim" />), no trailing spaces (<see langword="RTrim" />), or no leading or trailing spaces (<see langword="Trim" />).</span>
          <span class="sxs-lookup">
            <span data-stu-id="267d1-1117">Returns a string containing a copy of a specified string with no leading spaces (<see langword="LTrim" />), no trailing spaces (<see langword="RTrim" />), or no leading or trailing spaces (<see langword="Trim" />).</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="267d1-1118">El `LTrim`, `RTrim`, y `Trim` funciones quitan los espacios de los extremos de las cadenas.</span><span class="sxs-lookup"><span data-stu-id="267d1-1118">The `LTrim`, `RTrim`, and `Trim` functions remove spaces from the ends of strings.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="267d1-1119">Este ejemplo se usa el `LTrim` función para quitar los espacios iniciales y la `RTrim` espacios de función para quitar los finales de una variable de cadena.</span><span class="sxs-lookup"><span data-stu-id="267d1-1119">This example uses the `LTrim` function to strip leading spaces and the `RTrim` function to strip trailing spaces from a string variable.</span></span> <span data-ttu-id="267d1-1120">Usa el `Trim` función para quitar ambos tipos de espacios.</span><span class="sxs-lookup"><span data-stu-id="267d1-1120">It uses the `Trim` function to strip both types of spaces.</span></span>  
  
 [!code-vb[VbVbalrStrings#25](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#25)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Trim(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.RTrim(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Left(System.String,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Right(System.String,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Space(System.Int32)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Mid">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="267d1-1121">Returns a string that contains characters from a specified string.</span>
          <span class="sxs-lookup">
            <span data-stu-id="267d1-1121">Returns a string that contains characters from a specified string.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Mid">
      <MemberSignature Language="C#" Value="public static string Mid (string str, int Start);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Mid(string str, int32 Start) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Mid(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Mid (str As String, Start As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Mid(System::String ^ str, int Start);" />
      <MemberSignature Language="F#" Value="static member Mid : string * int -&gt; string" Usage="Microsoft.VisualBasic.Strings.Mid (str, Start)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="str" Type="System.String" />
        <Parameter Name="Start" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="str">
          <span data-ttu-id="267d1-1122">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="267d1-1122">Required.</span>
          </span>
          <span data-ttu-id="267d1-1123">
            <see langword="String" /> expression from which characters are returned.</span>
          <span class="sxs-lookup">
            <span data-stu-id="267d1-1123">
              <see langword="String" /> expression from which characters are returned.</span>
          </span>
        </param>
        <param name="Start">
          <span data-ttu-id="267d1-1124">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="267d1-1124">Required.</span>
          </span>
          <span data-ttu-id="267d1-1125">
            <see langword="Integer" /> expression.</span>
          <span class="sxs-lookup">
            <span data-stu-id="267d1-1125">
              <see langword="Integer" /> expression.</span>
          </span>
          <span data-ttu-id="267d1-1126">Starting position of the characters to return.</span>
          <span class="sxs-lookup">
            <span data-stu-id="267d1-1126">Starting position of the characters to return.</span>
          </span>
          <span data-ttu-id="267d1-1127">If <c>Start</c> is greater than the number of characters in <c>str</c>, the <see langword="Mid" /> function returns a zero-length string ("").</span>
          <span class="sxs-lookup">
            <span data-stu-id="267d1-1127">If <c>Start</c> is greater than the number of characters in <c>str</c>, the <see langword="Mid" /> function returns a zero-length string ("").</span>
          </span>
          <span data-ttu-id="267d1-1128">
            <c>Start</c> is one-based.</span>
          <span class="sxs-lookup">
            <span data-stu-id="267d1-1128">
              <c>Start</c> is one-based.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="267d1-1129">Returns a string that contains all the characters starting from a specified position in a string.</span>
          <span class="sxs-lookup">
            <span data-stu-id="267d1-1129">Returns a string that contains all the characters starting from a specified position in a string.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="267d1-1130">A string that consists of all the characters starting from the specified position in the string.</span>
          <span class="sxs-lookup">
            <span data-stu-id="267d1-1130">A string that consists of all the characters starting from the specified position in the string.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="267d1-1131">Para determinar el número de caracteres de `str`, utilice el `Len` función.</span><span class="sxs-lookup"><span data-stu-id="267d1-1131">To determine the number of characters in `str`, use the `Len` function.</span></span>  
  
 <span data-ttu-id="267d1-1132">Visual Basic tiene un `Mid` función y un `Mid` instrucción.</span><span class="sxs-lookup"><span data-stu-id="267d1-1132">Visual Basic has a `Mid` function and a `Mid` statement.</span></span> <span data-ttu-id="267d1-1133">Estos elementos funcionan en un número especificado de caracteres en una cadena, pero la `Mid` función devuelve los caracteres mientras el `Mid` instrucción reemplaza los caracteres.</span><span class="sxs-lookup"><span data-stu-id="267d1-1133">These elements both operate on a specified number of characters in a string, but the `Mid` function returns the characters while the `Mid` statement replaces the characters.</span></span> <span data-ttu-id="267d1-1134">Para obtener más información, consulte [Mid (instrucción)](~/docs/visual-basic/language-reference/statements/mid-statement.md).</span><span class="sxs-lookup"><span data-stu-id="267d1-1134">For more information, see [Mid Statement](~/docs/visual-basic/language-reference/statements/mid-statement.md).</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="267d1-1135">El `MidB` función en las versiones anteriores de Visual Basic, devuelve una cadena en bytes, en lugar de caracteres.</span><span class="sxs-lookup"><span data-stu-id="267d1-1135">The `MidB` function in previous versions of Visual Basic returns a string in bytes rather than characters.</span></span> <span data-ttu-id="267d1-1136">Se utiliza principalmente para convertir cadenas en aplicaciones de caracteres de doble byte (DBCS).</span><span class="sxs-lookup"><span data-stu-id="267d1-1136">It is used primarily for converting strings in double-byte character set (DBCS) applications.</span></span> <span data-ttu-id="267d1-1137">Todas las cadenas en Visual Basic están en Unicode, y `MidB` ya no se admite.</span><span class="sxs-lookup"><span data-stu-id="267d1-1137">All Visual Basic strings are in Unicode, and `MidB` is no longer supported.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="267d1-1138">La última línea en este ejemplo utiliza esta sobrecarga de la `Mid` función para devolver los caracteres de la quinto y posteriores de una cadena.</span><span class="sxs-lookup"><span data-stu-id="267d1-1138">The last line in this example uses this overload of the `Mid` function to return the fifth and subsequent characters from a string.</span></span>  
  
 [!code-vb[VbVbalrStrings#17](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#17)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="267d1-1139">
            <paramref name="Start" /> &lt;= 0 or <paramref name="Length" /> &lt; 0.</span>
          <span class="sxs-lookup">
            <span data-stu-id="267d1-1139">
              <paramref name="Start" /> &lt;= 0 or <paramref name="Length" /> &lt; 0.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Left(System.String,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Len" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Trim(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.LTrim(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.RTrim(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Right(System.String,System.Int32)" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <Member MemberName="Mid">
      <MemberSignature Language="C#" Value="public static string Mid (string str, int Start, int Length);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Mid(string str, int32 Start, int32 Length) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Mid(System.String,System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Mid (str As String, Start As Integer, Length As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Mid(System::String ^ str, int Start, int Length);" />
      <MemberSignature Language="F#" Value="static member Mid : string * int * int -&gt; string" Usage="Microsoft.VisualBasic.Strings.Mid (str, Start, Length)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="str" Type="System.String" />
        <Parameter Name="Start" Type="System.Int32" />
        <Parameter Name="Length" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="str">
          <span data-ttu-id="267d1-1140">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="267d1-1140">Required.</span>
          </span>
          <span data-ttu-id="267d1-1141">
            <see langword="String" /> expression from which characters are returned.</span>
          <span class="sxs-lookup">
            <span data-stu-id="267d1-1141">
              <see langword="String" /> expression from which characters are returned.</span>
          </span>
        </param>
        <param name="Start">
          <span data-ttu-id="267d1-1142">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="267d1-1142">Required.</span>
          </span>
          <span data-ttu-id="267d1-1143">
            <see langword="Integer" /> expression.</span>
          <span class="sxs-lookup">
            <span data-stu-id="267d1-1143">
              <see langword="Integer" /> expression.</span>
          </span>
          <span data-ttu-id="267d1-1144">Starting position of the characters to return.</span>
          <span class="sxs-lookup">
            <span data-stu-id="267d1-1144">Starting position of the characters to return.</span>
          </span>
          <span data-ttu-id="267d1-1145">If <c>Start</c> is greater than the number of characters in <c>str</c>, the <see langword="Mid" /> function returns a zero-length string ("").</span>
          <span class="sxs-lookup">
            <span data-stu-id="267d1-1145">If <c>Start</c> is greater than the number of characters in <c>str</c>, the <see langword="Mid" /> function returns a zero-length string ("").</span>
          </span>
          <span data-ttu-id="267d1-1146">
            <c>Start</c> is one based.</span>
          <span class="sxs-lookup">
            <span data-stu-id="267d1-1146">
              <c>Start</c> is one based.</span>
          </span>
        </param>
        <param name="Length">
          <span data-ttu-id="267d1-1147">Optional.</span>
          <span class="sxs-lookup">
            <span data-stu-id="267d1-1147">Optional.</span>
          </span>
          <span data-ttu-id="267d1-1148">
            <see langword="Integer" /> expression.</span>
          <span class="sxs-lookup">
            <span data-stu-id="267d1-1148">
              <see langword="Integer" /> expression.</span>
          </span>
          <span data-ttu-id="267d1-1149">Number of characters to return.</span>
          <span class="sxs-lookup">
            <span data-stu-id="267d1-1149">Number of characters to return.</span>
          </span>
          <span data-ttu-id="267d1-1150">If omitted or if there are fewer than <c>Length</c> characters in the text (including the character at position <c>Start</c>), all characters from the start position to the end of the string are returned.</span>
          <span class="sxs-lookup">
            <span data-stu-id="267d1-1150">If omitted or if there are fewer than <c>Length</c> characters in the text (including the character at position <c>Start</c>), all characters from the start position to the end of the string are returned.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="267d1-1151">Returns a string that contains a specified number of characters starting from a specified position in a string.</span>
          <span class="sxs-lookup">
            <span data-stu-id="267d1-1151">Returns a string that contains a specified number of characters starting from a specified position in a string.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="267d1-1152">A string that consists of the specified number of characters starting from the specified position in the string.</span>
          <span class="sxs-lookup">
            <span data-stu-id="267d1-1152">A string that consists of the specified number of characters starting from the specified position in the string.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="267d1-1153">Para determinar el número de caracteres de `str`, utilice el `Len` función.</span><span class="sxs-lookup"><span data-stu-id="267d1-1153">To determine the number of characters in `str`, use the `Len` function.</span></span>  
  
 <span data-ttu-id="267d1-1154">Visual Basic tiene un `Mid` función y un `Mid` instrucción.</span><span class="sxs-lookup"><span data-stu-id="267d1-1154">Visual Basic has a `Mid` function and a `Mid` statement.</span></span> <span data-ttu-id="267d1-1155">Estos elementos funcionan en un número especificado de caracteres en una cadena, pero la `Mid` función devuelve los caracteres mientras el `Mid` instrucción reemplaza los caracteres.</span><span class="sxs-lookup"><span data-stu-id="267d1-1155">These elements both operate on a specified number of characters in a string, but the `Mid` function returns the characters while the `Mid` statement replaces the characters.</span></span> <span data-ttu-id="267d1-1156">Para obtener más información, consulte [Mid (instrucción)](~/docs/visual-basic/language-reference/statements/mid-statement.md).</span><span class="sxs-lookup"><span data-stu-id="267d1-1156">For more information, see [Mid Statement](~/docs/visual-basic/language-reference/statements/mid-statement.md).</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="267d1-1157">El `MidB` función en las versiones anteriores de Visual Basic, devuelve una cadena en bytes, en lugar de caracteres.</span><span class="sxs-lookup"><span data-stu-id="267d1-1157">The `MidB` function in previous versions of Visual Basic returns a string in bytes rather than characters.</span></span> <span data-ttu-id="267d1-1158">Se utiliza principalmente para convertir cadenas en aplicaciones de caracteres de doble byte (DBCS).</span><span class="sxs-lookup"><span data-stu-id="267d1-1158">It is used primarily for converting strings in double-byte character set (DBCS) applications.</span></span> <span data-ttu-id="267d1-1159">Todas las cadenas en Visual Basic están en Unicode, y `MidB` ya no se admite.</span><span class="sxs-lookup"><span data-stu-id="267d1-1159">All Visual Basic strings are in Unicode, and `MidB` is no longer supported.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="267d1-1160">Los dos primeros `Mid` funciones en este ejemplo devuelven el número especificado de caracteres de una cadena, empezando en la posición especificada.</span><span class="sxs-lookup"><span data-stu-id="267d1-1160">The first two `Mid` functions in this example return the specified number of characters from a string, starting from the given positions.</span></span> <span data-ttu-id="267d1-1161">(Se muestra la última función la <xref:Microsoft.VisualBasic.Strings.Mid%28System.String%2CSystem.Int32%29> sobrecargan y solo se especifica el punto de partida para la extracción de cadena.)</span><span class="sxs-lookup"><span data-stu-id="267d1-1161">(The last function illustrates the <xref:Microsoft.VisualBasic.Strings.Mid%28System.String%2CSystem.Int32%29> overload and only specifies the starting point for the string extraction.)</span></span>  
  
 [!code-vb[VbVbalrStrings#17](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#17)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="267d1-1162">
            <paramref name="Start" /> &lt;= 0 or <paramref name="Length" /> &lt; 0.</span>
          <span class="sxs-lookup">
            <span data-stu-id="267d1-1162">
              <paramref name="Start" /> &lt;= 0 or <paramref name="Length" /> &lt; 0.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Left(System.String,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Len" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Trim(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.LTrim(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.RTrim(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Right(System.String,System.Int32)" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <Member MemberName="Replace">
      <MemberSignature Language="C#" Value="public static string Replace (string Expression, string Find, string Replacement, int Start = 1, int Count = -1, Microsoft.VisualBasic.CompareMethod Compare = Microsoft.VisualBasic.CompareMethod.Binary);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Replace(string Expression, string Find, string Replacement, int32 Start, int32 Count, valuetype Microsoft.VisualBasic.CompareMethod Compare) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Replace(System.String,System.String,System.String,System.Int32,System.Int32,Microsoft.VisualBasic.CompareMethod)" />
      <MemberSignature Language="VB.NET" Value="Public Function Replace (Expression As String, Find As String, Replacement As String, Optional Start As Integer = 1, Optional Count As Integer = -1, Optional Compare As CompareMethod = Microsoft.VisualBasic.CompareMethod.Binary) As String" />
      <MemberSignature Language="F#" Value="static member Replace : string * string * string * int * int * Microsoft.VisualBasic.CompareMethod -&gt; string" Usage="Microsoft.VisualBasic.Strings.Replace (Expression, Find, Replacement, Start, Count, Compare)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.String" />
        <Parameter Name="Find" Type="System.String" />
        <Parameter Name="Replacement" Type="System.String" />
        <Parameter Name="Start" Type="System.Int32" />
        <Parameter Name="Count" Type="System.Int32" />
        <Parameter Name="Compare" Type="Microsoft.VisualBasic.CompareMethod">
          <Attributes>
            <Attribute>
              <AttributeName>Microsoft.VisualBasic.CompilerServices.OptionCompare</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="Expression">
          <span data-ttu-id="267d1-1163">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="267d1-1163">Required.</span>
          </span>
          <span data-ttu-id="267d1-1164">String expression containing substring to replace.</span>
          <span class="sxs-lookup">
            <span data-stu-id="267d1-1164">String expression containing substring to replace.</span>
          </span>
        </param>
        <param name="Find">
          <span data-ttu-id="267d1-1165">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="267d1-1165">Required.</span>
          </span>
          <span data-ttu-id="267d1-1166">Substring being searched for.</span>
          <span class="sxs-lookup">
            <span data-stu-id="267d1-1166">Substring being searched for.</span>
          </span>
        </param>
        <param name="Replacement">
          <span data-ttu-id="267d1-1167">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="267d1-1167">Required.</span>
          </span>
          <span data-ttu-id="267d1-1168">Replacement substring.</span>
          <span class="sxs-lookup">
            <span data-stu-id="267d1-1168">Replacement substring.</span>
          </span>
        </param>
        <param name="Start">
          <span data-ttu-id="267d1-1169">Optional.</span>
          <span class="sxs-lookup">
            <span data-stu-id="267d1-1169">Optional.</span>
          </span>
          <span data-ttu-id="267d1-1170">Position within <c>Expression</c> that starts a substring used for replacement.</span>
          <span class="sxs-lookup">
            <span data-stu-id="267d1-1170">Position within <c>Expression</c> that starts a substring used for replacement.</span>
          </span>
          <span data-ttu-id="267d1-1171">The return value of <see langword="Replace" /> is a string that begins at <c>Start</c>, with appropriate substitutions.</span>
          <span class="sxs-lookup">
            <span data-stu-id="267d1-1171">The return value of <see langword="Replace" /> is a string that begins at <c>Start</c>, with appropriate substitutions.</span>
          </span>
          <span data-ttu-id="267d1-1172">If omitted, 1 is assumed.</span>
          <span class="sxs-lookup">
            <span data-stu-id="267d1-1172">If omitted, 1 is assumed.</span>
          </span>
        </param>
        <param name="Count">
          <span data-ttu-id="267d1-1173">Optional.</span>
          <span class="sxs-lookup">
            <span data-stu-id="267d1-1173">Optional.</span>
          </span>
          <span data-ttu-id="267d1-1174">Number of substring substitutions to perform.</span>
          <span class="sxs-lookup">
            <span data-stu-id="267d1-1174">Number of substring substitutions to perform.</span>
          </span>
          <span data-ttu-id="267d1-1175">If omitted, the default value is –1, which means "make all possible substitutions."</span>
          <span class="sxs-lookup">
            <span data-stu-id="267d1-1175">If omitted, the default value is –1, which means "make all possible substitutions."</span>
          </span>
        </param>
        <param name="Compare">
          <span data-ttu-id="267d1-1176">Optional.</span>
          <span class="sxs-lookup">
            <span data-stu-id="267d1-1176">Optional.</span>
          </span>
          <span data-ttu-id="267d1-1177">Numeric value indicating the kind of comparison to use when evaluating substrings.</span>
          <span class="sxs-lookup">
            <span data-stu-id="267d1-1177">Numeric value indicating the kind of comparison to use when evaluating substrings.</span>
          </span>
          <span data-ttu-id="267d1-1178">See Settings for values.</span>
          <span class="sxs-lookup">
            <span data-stu-id="267d1-1178">See Settings for values.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="267d1-1179">Returns a string in which a specified substring has been replaced with another substring a specified number of times.</span>
          <span class="sxs-lookup">
            <span data-stu-id="267d1-1179">Returns a string in which a specified substring has been replaced with another substring a specified number of times.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="267d1-1180">
            <see langword="Replace" /> returns the following values.</span>
          <span class="sxs-lookup">
            <span data-stu-id="267d1-1180">
              <see langword="Replace" /> returns the following values.</span>
          </span>
          <span data-ttu-id="267d1-1181">
            <list type="table">
              <item>
                <term> If  </term>
                <description> Replace returns  </description>
              </item>
              <item>
                <term>
                  <paramref name="Find" /> is zero-length or <see langword="Nothing" /></term>
                <description> Copy of <paramref name="Expression" /></description>
              </item>
              <item>
                <term>
                  <paramref name="Replace" /> is zero-length  </term>
                <description> Copy of <paramref name="Expression" /> with no occurrences of <paramref name="Find" /></description>
              </item>
              <item>
                <term>
                  <paramref name="Expression" /> is zero-length or <see langword="Nothing" />, or <paramref name="Start" /> is greater than length of <paramref name="Expression" /></term>
                <description>
                  <see langword="Nothing" />
                </description>
              </item>
              <item>
                <term>
                  <paramref name="Count" /> is 0  </term>
                <description> Copy of <paramref name="Expression" /></description>
              </item>
            </list>
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="267d1-1181">
              <list type="table">
                <item>
                  <term> If  </term>
                  <description> Replace returns  </description>
                </item>
                <item>
                  <term>
                    <paramref name="Find" /> is zero-length or <see langword="Nothing" /></term>
                  <description> Copy of <paramref name="Expression" /></description>
                </item>
                <item>
                  <term>
                    <paramref name="Replace" /> is zero-length  </term>
                  <description> Copy of <paramref name="Expression" /> with no occurrences of <paramref name="Find" /></description>
                </item>
                <item>
                  <term>
                    <paramref name="Expression" /> is zero-length or <see langword="Nothing" />, or <paramref name="Start" /> is greater than length of <paramref name="Expression" /></term>
                  <description>
                    <see langword="Nothing" />
                  </description>
                </item>
                <item>
                  <term>
                    <paramref name="Count" /> is 0  </term>
                  <description> Copy of <paramref name="Expression" /></description>
                </item>
              </list>
            </span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="267d1-1182">El valor devuelto de la `Replace` función es una cadena que comienza en la posición especificada por `Start` y termina al final de la `Expression` cadena, con las sustituciones según lo especificado por el `Find` y `Replace` valores.</span><span class="sxs-lookup"><span data-stu-id="267d1-1182">The return value of the `Replace` function is a string that begins at the position specified by `Start` and concludes at the end of the `Expression` string, with the substitutions made as specified by the `Find` and `Replace` values.</span></span>  
  
 <span data-ttu-id="267d1-1183">El `Compare` argumento puede tener los siguientes valores.</span><span class="sxs-lookup"><span data-stu-id="267d1-1183">The `Compare` argument can have the following values.</span></span>  
  
|<span data-ttu-id="267d1-1184">Constante</span><span class="sxs-lookup"><span data-stu-id="267d1-1184">Constant</span></span>|<span data-ttu-id="267d1-1185">Descripción</span><span class="sxs-lookup"><span data-stu-id="267d1-1185">Description</span></span>|  
|-|-|  
|`Binary`|<span data-ttu-id="267d1-1186">Realiza una comparación binaria</span><span class="sxs-lookup"><span data-stu-id="267d1-1186">Performs a binary comparison</span></span>|  
|`Text`|<span data-ttu-id="267d1-1187">Realiza una comparación textual</span><span class="sxs-lookup"><span data-stu-id="267d1-1187">Performs a textual comparison</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="267d1-1188">Este ejemplo se muestra el `Replace` función.</span><span class="sxs-lookup"><span data-stu-id="267d1-1188">This example demonstrates the `Replace` function.</span></span>  
  
```vb  
Dim TestString As String = "Shopping List"  
' Returns "Shipping List".  
Dim aString As String = Replace(TestString, "o", "i")  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="267d1-1189">
            <paramref name="Count" /> &lt; -1 or <paramref name="Start" /> &lt;= 0.</span>
          <span class="sxs-lookup">
            <span data-stu-id="267d1-1189">
              <paramref name="Count" /> &lt; -1 or <paramref name="Start" /> &lt;= 0.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Filter" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <Member MemberName="Right">
      <MemberSignature Language="C#" Value="public static string Right (string str, int Length);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Right(string str, int32 Length) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Right(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Right (str As String, Length As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Right(System::String ^ str, int Length);" />
      <MemberSignature Language="F#" Value="static member Right : string * int -&gt; string" Usage="Microsoft.VisualBasic.Strings.Right (str, Length)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="str" Type="System.String" />
        <Parameter Name="Length" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="str">
          <span data-ttu-id="267d1-1190">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="267d1-1190">Required.</span>
          </span>
          <span data-ttu-id="267d1-1191">
            <see langword="String" /> expression from which the rightmost characters are returned.</span>
          <span class="sxs-lookup">
            <span data-stu-id="267d1-1191">
              <see langword="String" /> expression from which the rightmost characters are returned.</span>
          </span>
        </param>
        <param name="Length">
          <span data-ttu-id="267d1-1192">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="267d1-1192">Required.</span>
          </span>
          <span data-ttu-id="267d1-1193">
            <see langword="Integer" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="267d1-1193">
              <see langword="Integer" />.</span>
          </span>
          <span data-ttu-id="267d1-1194">Numeric expression indicating how many characters to return.</span>
          <span class="sxs-lookup">
            <span data-stu-id="267d1-1194">Numeric expression indicating how many characters to return.</span>
          </span>
          <span data-ttu-id="267d1-1195">If 0, a zero-length string ("") is returned.</span>
          <span class="sxs-lookup">
            <span data-stu-id="267d1-1195">If 0, a zero-length string ("") is returned.</span>
          </span>
          <span data-ttu-id="267d1-1196">If greater than or equal to the number of characters in <c>str</c>, the entire string is returned.</span>
          <span class="sxs-lookup">
            <span data-stu-id="267d1-1196">If greater than or equal to the number of characters in <c>str</c>, the entire string is returned.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="267d1-1197">Returns a string containing a specified number of characters from the right side of a string.</span>
          <span class="sxs-lookup">
            <span data-stu-id="267d1-1197">Returns a string containing a specified number of characters from the right side of a string.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="267d1-1198">Returns a string containing a specified number of characters from the right side of a string.</span>
          <span class="sxs-lookup">
            <span data-stu-id="267d1-1198">Returns a string containing a specified number of characters from the right side of a string.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="267d1-1199">Para determinar el número de caracteres de `str`, utilice el `Len` función.</span><span class="sxs-lookup"><span data-stu-id="267d1-1199">To determine the number of characters in `str`, use the `Len` function.</span></span> <span data-ttu-id="267d1-1200">Si se utiliza en un formulario de Windows, o cualquier otra clase que tiene un `Right` propiedad, debe calificar totalmente la función con `Microsoft.VisualBasic.Strings.Right`.</span><span class="sxs-lookup"><span data-stu-id="267d1-1200">If used in a Windows Form, or any other class that has a `Right` property, you must fully qualify the function with `Microsoft.VisualBasic.Strings.Right`.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="267d1-1201">El `RightB` función en las versiones anteriores de Visual Basic, devuelve una cadena en bytes, en lugar de caracteres.</span><span class="sxs-lookup"><span data-stu-id="267d1-1201">The `RightB` function in earlier versions of Visual Basic returns a string in bytes, rather than characters.</span></span> <span data-ttu-id="267d1-1202">Se utiliza principalmente para convertir cadenas en aplicaciones de caracteres de doble byte (DBCS).</span><span class="sxs-lookup"><span data-stu-id="267d1-1202">It is used primarily for converting strings in double-byte character set (DBCS) applications.</span></span> <span data-ttu-id="267d1-1203">Todas las cadenas en Visual Basic actuales están en Unicode, y `RightB` ya no se admite.</span><span class="sxs-lookup"><span data-stu-id="267d1-1203">All current Visual Basic strings are in Unicode, and `RightB` is no longer supported.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="267d1-1204">En este ejemplo se muestra el uso de la `Right` función para devolver una subcadena de una determinada `String`.</span><span class="sxs-lookup"><span data-stu-id="267d1-1204">This example demonstrates the use of the `Right` function to return a substring of a given `String`.</span></span> <span data-ttu-id="267d1-1205">En una clase que tiene un `Right` propiedad, puede ser necesario completar la `Right` función.</span><span class="sxs-lookup"><span data-stu-id="267d1-1205">In a class that has a `Right` property, it may be necessary to fully qualify the `Right` function.</span></span>  
  
 [!code-vb[VbVbalrStrings#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#21)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="267d1-1206">
            <paramref name="Length" /> &lt; 0.</span>
          <span class="sxs-lookup">
            <span data-stu-id="267d1-1206">
              <paramref name="Length" /> &lt; 0.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Left(System.String,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Len" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Mid" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <Member MemberName="RSet">
      <MemberSignature Language="C#" Value="public static string RSet (string Source, int Length);" />
      <MemberSignature Language="ILAsm" Value=".method public static string RSet(string Source, int32 Length) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.RSet(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function RSet (Source As String, Length As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ RSet(System::String ^ Source, int Length);" />
      <MemberSignature Language="F#" Value="static member RSet : string * int -&gt; string" Usage="Microsoft.VisualBasic.Strings.RSet (Source, Length)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Source" Type="System.String" />
        <Parameter Name="Length" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="Source">
          <span data-ttu-id="267d1-1207">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="267d1-1207">Required.</span>
          </span>
          <span data-ttu-id="267d1-1208">
            <see langword="String" /> expression.</span>
          <span class="sxs-lookup">
            <span data-stu-id="267d1-1208">
              <see langword="String" /> expression.</span>
          </span>
          <span data-ttu-id="267d1-1209">Name of string variable.</span>
          <span class="sxs-lookup">
            <span data-stu-id="267d1-1209">Name of string variable.</span>
          </span>
        </param>
        <param name="Length">
          <span data-ttu-id="267d1-1210">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="267d1-1210">Required.</span>
          </span>
          <span data-ttu-id="267d1-1211">
            <see langword="Integer" /> expression.</span>
          <span class="sxs-lookup">
            <span data-stu-id="267d1-1211">
              <see langword="Integer" /> expression.</span>
          </span>
          <span data-ttu-id="267d1-1212">Length of returned string.</span>
          <span class="sxs-lookup">
            <span data-stu-id="267d1-1212">Length of returned string.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="267d1-1213">Returns a right-aligned string containing the specified string adjusted to the specified length.</span>
          <span class="sxs-lookup">
            <span data-stu-id="267d1-1213">Returns a right-aligned string containing the specified string adjusted to the specified length.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="267d1-1214">Returns a right-aligned string containing the specified string adjusted to the specified length.</span>
          <span class="sxs-lookup">
            <span data-stu-id="267d1-1214">Returns a right-aligned string containing the specified string adjusted to the specified length.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="267d1-1215">Si `Source` es mayor que `Length`, `RSet` coloca los caracteres más a la izquierda hasta alcanzar la longitud de `Source`, en la cadena devuelta.</span><span class="sxs-lookup"><span data-stu-id="267d1-1215">If `Source` is longer than `Length`, `RSet` places only the leftmost characters, up to the length of `Source`, in the returned string.</span></span> <span data-ttu-id="267d1-1216">Si la cadena especificada es menor que la longitud especificada, se agregan espacios al extremo izquierdo de la cadena hasta alcanzar la longitud adecuada.</span><span class="sxs-lookup"><span data-stu-id="267d1-1216">If the specified string is shorter than the specified length, spaces are added to the left end of the string to produce the appropriate length.</span></span> <span data-ttu-id="267d1-1217">Si la cadena especificada es mayor que la longitud especificada, se ha reducido a la longitud especificada.</span><span class="sxs-lookup"><span data-stu-id="267d1-1217">If the specified string is longer than the specified length, it is shortened to the specified length.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="267d1-1218">En este ejemplo se muestra el uso de la `RSet` función.</span><span class="sxs-lookup"><span data-stu-id="267d1-1218">This example demonstrates the use of the `RSet` function.</span></span>  
  
 [!code-vb[VbVbalrStrings#9](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#9)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Strings.LSet(System.String,System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="RTrim">
      <MemberSignature Language="C#" Value="public static string RTrim (string str);" />
      <MemberSignature Language="ILAsm" Value=".method public static string RTrim(string str) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.RTrim(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function RTrim (str As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ RTrim(System::String ^ str);" />
      <MemberSignature Language="F#" Value="static member RTrim : string -&gt; string" Usage="Microsoft.VisualBasic.Strings.RTrim str" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="str" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="str">
          <span data-ttu-id="267d1-1219">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="267d1-1219">Required.</span>
          </span>
          <span data-ttu-id="267d1-1220">Any valid <see langword="String" /> expression.</span>
          <span class="sxs-lookup">
            <span data-stu-id="267d1-1220">Any valid <see langword="String" /> expression.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="267d1-1221">Returns a string containing a copy of a specified string with no leading spaces (<see langword="LTrim" />), no trailing spaces (<see langword="RTrim" />), or no leading or trailing spaces (<see langword="Trim" />).</span>
          <span class="sxs-lookup">
            <span data-stu-id="267d1-1221">Returns a string containing a copy of a specified string with no leading spaces (<see langword="LTrim" />), no trailing spaces (<see langword="RTrim" />), or no leading or trailing spaces (<see langword="Trim" />).</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="267d1-1222">Returns a string containing a copy of a specified string with no leading spaces (<see langword="LTrim" />), no trailing spaces (<see langword="RTrim" />), or no leading or trailing spaces (<see langword="Trim" />).</span>
          <span class="sxs-lookup">
            <span data-stu-id="267d1-1222">Returns a string containing a copy of a specified string with no leading spaces (<see langword="LTrim" />), no trailing spaces (<see langword="RTrim" />), or no leading or trailing spaces (<see langword="Trim" />).</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="267d1-1223">El `LTrim`, `RTrim`, y `Trim` funciones quitan los espacios de los extremos de las cadenas.</span><span class="sxs-lookup"><span data-stu-id="267d1-1223">The `LTrim`, `RTrim`, and `Trim` functions remove spaces from the ends of strings.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="267d1-1224">Este ejemplo se usa el `LTrim` función para quitar los espacios iniciales y la `RTrim` espacios de función para quitar los finales de una variable de cadena.</span><span class="sxs-lookup"><span data-stu-id="267d1-1224">This example uses the `LTrim` function to strip leading spaces and the `RTrim` function to strip trailing spaces from a string variable.</span></span> <span data-ttu-id="267d1-1225">Usa el `Trim` función para quitar ambos tipos de espacios.</span><span class="sxs-lookup"><span data-stu-id="267d1-1225">It uses the `Trim` function to strip both types of spaces.</span></span>  
  
 [!code-vb[VbVbalrStrings#25](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#25)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Trim(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.LTrim(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Left(System.String,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Right(System.String,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Space(System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="Space">
      <MemberSignature Language="C#" Value="public static string Space (int Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Space(int32 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Space(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Space (Number As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Space(int Number);" />
      <MemberSignature Language="F#" Value="static member Space : int -&gt; string" Usage="Microsoft.VisualBasic.Strings.Space Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="267d1-1226">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="267d1-1226">Required.</span>
          </span>
          <span data-ttu-id="267d1-1227">
            <see langword="Integer" /> expression.</span>
          <span class="sxs-lookup">
            <span data-stu-id="267d1-1227">
              <see langword="Integer" /> expression.</span>
          </span>
          <span data-ttu-id="267d1-1228">The number of spaces you want in the string.</span>
          <span class="sxs-lookup">
            <span data-stu-id="267d1-1228">The number of spaces you want in the string.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="267d1-1229">Returns a string consisting of the specified number of spaces.</span>
          <span class="sxs-lookup">
            <span data-stu-id="267d1-1229">Returns a string consisting of the specified number of spaces.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="267d1-1230">Returns a string consisting of the specified number of spaces.</span>
          <span class="sxs-lookup">
            <span data-stu-id="267d1-1230">Returns a string consisting of the specified number of spaces.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="267d1-1231">El `Space` función es útil para el formato de salida y eliminar datos de cadenas de longitud fija.</span><span class="sxs-lookup"><span data-stu-id="267d1-1231">The `Space` function is useful for formatting output and clearing data in fixed-length strings.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="267d1-1232">Este ejemplo se usa el `Space` función para devolver una cadena que consta de un número especificado de espacios.</span><span class="sxs-lookup"><span data-stu-id="267d1-1232">This example uses the `Space` function to return a string consisting of a specified number of spaces.</span></span>  
  
 [!code-vb[VbVbalrStrings#2](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="267d1-1233">
            <paramref name="Number" /> &lt; 0.</span>
          <span class="sxs-lookup">
            <span data-stu-id="267d1-1233">
              <paramref name="Number" /> &lt; 0.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.SPC(System.Int16)" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <Member MemberName="Split">
      <MemberSignature Language="C#" Value="public static string[] Split (string Expression, string Delimiter = &quot; &quot;, int Limit = -1, Microsoft.VisualBasic.CompareMethod Compare = Microsoft.VisualBasic.CompareMethod.Binary);" />
      <MemberSignature Language="ILAsm" Value=".method public static string[] Split(string Expression, string Delimiter, int32 Limit, valuetype Microsoft.VisualBasic.CompareMethod Compare) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Split(System.String,System.String,System.Int32,Microsoft.VisualBasic.CompareMethod)" />
      <MemberSignature Language="VB.NET" Value="Public Function Split (Expression As String, Optional Delimiter As String = &quot; &quot;, Optional Limit As Integer = -1, Optional Compare As CompareMethod = Microsoft.VisualBasic.CompareMethod.Binary) As String()" />
      <MemberSignature Language="F#" Value="static member Split : string * string * int * Microsoft.VisualBasic.CompareMethod -&gt; string[]" Usage="Microsoft.VisualBasic.Strings.Split (Expression, Delimiter, Limit, Compare)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.String" />
        <Parameter Name="Delimiter" Type="System.String" />
        <Parameter Name="Limit" Type="System.Int32" />
        <Parameter Name="Compare" Type="Microsoft.VisualBasic.CompareMethod">
          <Attributes>
            <Attribute>
              <AttributeName>Microsoft.VisualBasic.CompilerServices.OptionCompare</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="Expression">
          <span data-ttu-id="267d1-1234">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="267d1-1234">Required.</span>
          </span>
          <span data-ttu-id="267d1-1235">
            <see langword="String" /> expression containing substrings and delimiters.</span>
          <span class="sxs-lookup">
            <span data-stu-id="267d1-1235">
              <see langword="String" /> expression containing substrings and delimiters.</span>
          </span>
        </param>
        <param name="Delimiter">
          <span data-ttu-id="267d1-1236">Optional.</span>
          <span class="sxs-lookup">
            <span data-stu-id="267d1-1236">Optional.</span>
          </span>
          <span data-ttu-id="267d1-1237">Any single character used to identify substring limits.</span>
          <span class="sxs-lookup">
            <span data-stu-id="267d1-1237">Any single character used to identify substring limits.</span>
          </span>
          <span data-ttu-id="267d1-1238">If <c>Delimiter</c> is omitted, the space character (" ") is assumed to be the delimiter.</span>
          <span class="sxs-lookup">
            <span data-stu-id="267d1-1238">If <c>Delimiter</c> is omitted, the space character (" ") is assumed to be the delimiter.</span>
          </span>
        </param>
        <param name="Limit">
          <span data-ttu-id="267d1-1239">Optional.</span>
          <span class="sxs-lookup">
            <span data-stu-id="267d1-1239">Optional.</span>
          </span>
          <span data-ttu-id="267d1-1240">Maximum number of substrings into which the input string should be split.</span>
          <span class="sxs-lookup">
            <span data-stu-id="267d1-1240">Maximum number of substrings into which the input string should be split.</span>
          </span>
          <span data-ttu-id="267d1-1241">The default, –1, indicates that the input string should be split at every occurrence of the <c>Delimiter</c> string.</span>
          <span class="sxs-lookup">
            <span data-stu-id="267d1-1241">The default, –1, indicates that the input string should be split at every occurrence of the <c>Delimiter</c> string.</span>
          </span>
        </param>
        <param name="Compare">
          <span data-ttu-id="267d1-1242">Optional.</span>
          <span class="sxs-lookup">
            <span data-stu-id="267d1-1242">Optional.</span>
          </span>
          <span data-ttu-id="267d1-1243">Numeric value indicating the comparison to use when evaluating substrings.</span>
          <span class="sxs-lookup">
            <span data-stu-id="267d1-1243">Numeric value indicating the comparison to use when evaluating substrings.</span>
          </span>
          <span data-ttu-id="267d1-1244">See "Settings" for values.</span>
          <span class="sxs-lookup">
            <span data-stu-id="267d1-1244">See "Settings" for values.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="267d1-1245">Returns a zero-based, one-dimensional array containing a specified number of substrings.</span>
          <span class="sxs-lookup">
            <span data-stu-id="267d1-1245">Returns a zero-based, one-dimensional array containing a specified number of substrings.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="267d1-1246">
            <see langword="String" /> array.</span>
          <span class="sxs-lookup">
            <span data-stu-id="267d1-1246">
              <see langword="String" /> array.</span>
          </span>
          <span data-ttu-id="267d1-1247">If <paramref name="Expression" /> is a zero-length string (""), <see langword="Split" /> returns a single-element array containing a zero-length string.</span>
          <span class="sxs-lookup">
            <span data-stu-id="267d1-1247">If <paramref name="Expression" /> is a zero-length string (""), <see langword="Split" /> returns a single-element array containing a zero-length string.</span>
          </span>
          <span data-ttu-id="267d1-1248">If <paramref name="Delimiter" /> is a zero-length string, or if it does not appear anywhere in <paramref name="Expression" />, <see langword="Split" /> returns a single-element array containing the entire <paramref name="Expression" /> string.</span>
          <span class="sxs-lookup">
            <span data-stu-id="267d1-1248">If <paramref name="Delimiter" /> is a zero-length string, or if it does not appear anywhere in <paramref name="Expression" />, <see langword="Split" /> returns a single-element array containing the entire <paramref name="Expression" /> string.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="267d1-1249">De forma predeterminada, o cuando `Limit` es igual a -1, el `Split` función divide la cadena de entrada en todas las apariciones de la cadena de delimitador y devuelve las subcadenas en una matriz.</span><span class="sxs-lookup"><span data-stu-id="267d1-1249">By default, or when `Limit` equals -1, the `Split` function splits the input string at every occurrence of the delimiter string, and returns the substrings in an array.</span></span> <span data-ttu-id="267d1-1250">Cuando el `Limit` parámetro es mayor que cero, el `Split` función divide la cadena en la primera `Limit`-1 apariciones del delimitador y devuelve una matriz con las subcadenas resultantes.</span><span class="sxs-lookup"><span data-stu-id="267d1-1250">When the `Limit` parameter is greater than zero, the `Split` function splits the string at the first `Limit`-1 occurrences of the delimiter, and returns an array with the resulting substrings.</span></span> <span data-ttu-id="267d1-1251">Por ejemplo, `Split("a:b:c", ":")` devuelve la matriz `{"a", "b", "c"}`, mientras que `Split("a:b:c", ":", 2)` devuelve la matriz `{"a", "b:c"}`.</span><span class="sxs-lookup"><span data-stu-id="267d1-1251">For example, `Split("a:b:c", ":")` returns the array `{"a", "b", "c"}`, while `Split("a:b:c", ":", 2)` returns the array `{"a", "b:c"}`.</span></span>  
  
 <span data-ttu-id="267d1-1252">Cuando el `Split` función encuentra dos delimitadores de una fila o un delimitador al principio o al final de la cadena, interpreta como que rodean una cadena vacía ("").</span><span class="sxs-lookup"><span data-stu-id="267d1-1252">When the `Split` function encounters two delimiters in a row, or a delimiter at the beginning or end of the string, it interprets them as surrounding an empty string ("").</span></span> <span data-ttu-id="267d1-1253">Por ejemplo, `Split("xx", "x")` devuelve una matriz que contiene tres cadenas vacías: uno entre el principio de la cadena y la primera "x", uno entre las dos "cadenas x" y otro entre la última "x" y el final de la cadena.</span><span class="sxs-lookup"><span data-stu-id="267d1-1253">For example, `Split("xx", "x")` returns the array containing three empty strings: one from between the beginning of the string and the first "x", one from between the two "x" strings, and one from between the last "x" and the end of the string.</span></span>  
  
 <span data-ttu-id="267d1-1254">Esta tabla se muestra cómo opcional `Delimiter`, `Limit`, y `Compare` parámetros pueden cambiar el comportamiento de la `Split` función.</span><span class="sxs-lookup"><span data-stu-id="267d1-1254">This table demonstrates how the optional `Delimiter`, `Limit`, and `Compare` parameters can change the behavior of the `Split` function.</span></span>  
  
|<span data-ttu-id="267d1-1255">Llamada de división</span><span class="sxs-lookup"><span data-stu-id="267d1-1255">Split Call</span></span>|<span data-ttu-id="267d1-1256">Valor devuelto</span><span class="sxs-lookup"><span data-stu-id="267d1-1256">Return Value</span></span>|  
|-|-|  
|`Split("42, 12, 19")`|<span data-ttu-id="267d1-1257">{"42," , "12," , "19"}</span><span class="sxs-lookup"><span data-stu-id="267d1-1257">{"42," , "12," , "19"}</span></span>|  
|`Split("42, 12, 19", ", ")`|<span data-ttu-id="267d1-1258">{"42", "12", "19"}</span><span class="sxs-lookup"><span data-stu-id="267d1-1258">{"42", "12", "19"}</span></span>|  
|`Split("42, 12, 19", ", ", 2)`|<span data-ttu-id="267d1-1259">{"42", "12, 19"}</span><span class="sxs-lookup"><span data-stu-id="267d1-1259">{"42", "12, 19"}</span></span>|  
|`Split("192.168.0.1", ".")`|<span data-ttu-id="267d1-1260">{"192", "168", "0", "1"}</span><span class="sxs-lookup"><span data-stu-id="267d1-1260">{"192", "168", "0", "1"}</span></span>|  
|`Split("Alice and Bob", " AND ")`|<span data-ttu-id="267d1-1261">{"Alice y Bob"}</span><span class="sxs-lookup"><span data-stu-id="267d1-1261">{"Alice and Bob"}</span></span>|  
|`Split("Alice and Bob", " AND ", ,CompareMethod.Text)`|<span data-ttu-id="267d1-1262">{"Alice", "Cris"}</span><span class="sxs-lookup"><span data-stu-id="267d1-1262">{"Alice", "Bob"}</span></span>|  
|`Split("someone@example.com", "@",1)`|<span data-ttu-id="267d1-1263">{"someone@example.com"}</span><span class="sxs-lookup"><span data-stu-id="267d1-1263">{"someone@example.com"}</span></span>|  
|`Split("someone@example.com", "@",2)`|<span data-ttu-id="267d1-1264">{"someone", "ejemplo.com"}</span><span class="sxs-lookup"><span data-stu-id="267d1-1264">{"someone", "example.com"}</span></span>|  
  
 <span data-ttu-id="267d1-1265">El `Compare` argumento puede tener los siguientes valores.</span><span class="sxs-lookup"><span data-stu-id="267d1-1265">The `Compare` argument can have the following values.</span></span>  
  
|<span data-ttu-id="267d1-1266">Constante</span><span class="sxs-lookup"><span data-stu-id="267d1-1266">Constant</span></span>|<span data-ttu-id="267d1-1267">Descripción</span><span class="sxs-lookup"><span data-stu-id="267d1-1267">Description</span></span>|<span data-ttu-id="267d1-1268">Valor</span><span class="sxs-lookup"><span data-stu-id="267d1-1268">Value</span></span>|  
|-|-|-|  
|`CompareMethod.Binary`|<span data-ttu-id="267d1-1269">Realiza una comparación binaria</span><span class="sxs-lookup"><span data-stu-id="267d1-1269">Performs a binary comparison</span></span>|<span data-ttu-id="267d1-1270">0</span><span class="sxs-lookup"><span data-stu-id="267d1-1270">0</span></span>|  
|`CompareMethod.Text`|<span data-ttu-id="267d1-1271">Realiza una comparación textual</span><span class="sxs-lookup"><span data-stu-id="267d1-1271">Performs a textual comparison</span></span>|<span data-ttu-id="267d1-1272">1</span><span class="sxs-lookup"><span data-stu-id="267d1-1272">1</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="267d1-1273">El ejemplo siguiente muestra cómo dividir una cadena en los espacios.</span><span class="sxs-lookup"><span data-stu-id="267d1-1273">The following example demonstrates how to split a string at its spaces.</span></span>  
  
 [!code-vb[VbVbalrStrings#13](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#13)]  
  
 <span data-ttu-id="267d1-1274">El ejemplo siguiente muestra cómo dividir cadenas con varios delimitadores en una fila y filtrar las cadenas vacías.</span><span class="sxs-lookup"><span data-stu-id="267d1-1274">The following example demonstrates how to split strings with multiple delimiters in a row and filter out the empty strings.</span></span>  
  
 [!code-vb[VbVbalrStrings#14](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#14)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Join" />
        <altmember cref="T:Microsoft.VisualBasic.CompareMethod" />
      </Docs>
    </Member>
    <Member MemberName="StrComp">
      <MemberSignature Language="C#" Value="public static int StrComp (string String1, string String2, Microsoft.VisualBasic.CompareMethod Compare = Microsoft.VisualBasic.CompareMethod.Binary);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 StrComp(string String1, string String2, valuetype Microsoft.VisualBasic.CompareMethod Compare) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.StrComp(System.String,System.String,Microsoft.VisualBasic.CompareMethod)" />
      <MemberSignature Language="VB.NET" Value="Public Function StrComp (String1 As String, String2 As String, Optional Compare As CompareMethod = Microsoft.VisualBasic.CompareMethod.Binary) As Integer" />
      <MemberSignature Language="F#" Value="static member StrComp : string * string * Microsoft.VisualBasic.CompareMethod -&gt; int" Usage="Microsoft.VisualBasic.Strings.StrComp (String1, String2, Compare)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="String1" Type="System.String" />
        <Parameter Name="String2" Type="System.String" />
        <Parameter Name="Compare" Type="Microsoft.VisualBasic.CompareMethod">
          <Attributes>
            <Attribute>
              <AttributeName>Microsoft.VisualBasic.CompilerServices.OptionCompare</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="String1">
          <span data-ttu-id="267d1-1275">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="267d1-1275">Required.</span>
          </span>
          <span data-ttu-id="267d1-1276">Any valid <see langword="String" /> expression.</span>
          <span class="sxs-lookup">
            <span data-stu-id="267d1-1276">Any valid <see langword="String" /> expression.</span>
          </span>
        </param>
        <param name="String2">
          <span data-ttu-id="267d1-1277">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="267d1-1277">Required.</span>
          </span>
          <span data-ttu-id="267d1-1278">Any valid <see langword="String" /> expression.</span>
          <span class="sxs-lookup">
            <span data-stu-id="267d1-1278">Any valid <see langword="String" /> expression.</span>
          </span>
        </param>
        <param name="Compare">
          <span data-ttu-id="267d1-1279">Optional.</span>
          <span class="sxs-lookup">
            <span data-stu-id="267d1-1279">Optional.</span>
          </span>
          <span data-ttu-id="267d1-1280">Specifies the type of string comparison.</span>
          <span class="sxs-lookup">
            <span data-stu-id="267d1-1280">Specifies the type of string comparison.</span>
          </span>
          <span data-ttu-id="267d1-1281">If <c>Compare</c> is omitted, the <see langword="Option Compare" /> setting determines the type of comparison.</span>
          <span class="sxs-lookup">
            <span data-stu-id="267d1-1281">If <c>Compare</c> is omitted, the <see langword="Option Compare" /> setting determines the type of comparison.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="267d1-1282">Returns -1, 0, or 1, based on the result of a string comparison.</span>
          <span class="sxs-lookup">
            <span data-stu-id="267d1-1282">Returns -1, 0, or 1, based on the result of a string comparison.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="267d1-1283">The <see langword="StrComp" /> function has the following return values.</span>
          <span class="sxs-lookup">
            <span data-stu-id="267d1-1283">The <see langword="StrComp" /> function has the following return values.</span>
          </span>
          <span data-ttu-id="267d1-1284">
            <list type="table">
              <item>
                <term> If  </term>
                <description> StrComp returns  </description>
              </item>
              <item>
                <term>
                  <paramref name="String1" /> sorts ahead of <paramref name="String2" /></term>
                <description> -1  </description>
              </item>
              <item>
                <term>
                  <paramref name="String1" /> is equal to <paramref name="String2" /></term>
                <description> 0  </description>
              </item>
              <item>
                <term>
                  <paramref name="String1" /> sorts after <paramref name="String2" /></term>
                <description> 1  </description>
              </item>
            </list>
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="267d1-1284">
              <list type="table">
                <item>
                  <term> If  </term>
                  <description> StrComp returns  </description>
                </item>
                <item>
                  <term>
                    <paramref name="String1" /> sorts ahead of <paramref name="String2" /></term>
                  <description> -1  </description>
                </item>
                <item>
                  <term>
                    <paramref name="String1" /> is equal to <paramref name="String2" /></term>
                  <description> 0  </description>
                </item>
                <item>
                  <term>
                    <paramref name="String1" /> sorts after <paramref name="String2" /></term>
                  <description> 1  </description>
                </item>
              </list>
            </span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="267d1-1285">Las cadenas se comparan por valores alfanuméricos empezando por el primer carácter.</span><span class="sxs-lookup"><span data-stu-id="267d1-1285">The strings are compared by alphanumeric sort values beginning with the first character.</span></span> <span data-ttu-id="267d1-1286">Para obtener más información sobre comparaciones binarias, las comparaciones de texto y criterio de ordenación, vea [instrucción Option Compare](~/docs/visual-basic/language-reference/statements/option-compare-statement.md).</span><span class="sxs-lookup"><span data-stu-id="267d1-1286">For further information on binary comparisons, textual comparisons, and sort order, see [Option Compare Statement](~/docs/visual-basic/language-reference/statements/option-compare-statement.md).</span></span>  
  
 <span data-ttu-id="267d1-1287">La configuración del argumento `Compare` es:</span><span class="sxs-lookup"><span data-stu-id="267d1-1287">The `Compare` argument settings are:</span></span>  
  
|<span data-ttu-id="267d1-1288">Constante</span><span class="sxs-lookup"><span data-stu-id="267d1-1288">Constant</span></span>|<span data-ttu-id="267d1-1289">Descripción</span><span class="sxs-lookup"><span data-stu-id="267d1-1289">Description</span></span>|  
|-|-|  
|`Binary`|<span data-ttu-id="267d1-1290">Realiza una comparación binaria, según un criterio de ordenación que se deriva de las representaciones binarias internas de los caracteres.</span><span class="sxs-lookup"><span data-stu-id="267d1-1290">Performs a binary comparison, based on a sort order derived from the internal binary representations of the characters.</span></span>|  
|`Text`|<span data-ttu-id="267d1-1291">Realiza una comparación de texto, según un criterio de ordenación de texto de mayúsculas y minúsculas determinado por el sistema `LocaleID` valor.</span><span class="sxs-lookup"><span data-stu-id="267d1-1291">Performs a text comparison, based on a case-insensitive text sort order determined by your system's `LocaleID` value.</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="267d1-1292">Este ejemplo se usa el `StrComp` función para devolver los resultados de una comparación de cadenas.</span><span class="sxs-lookup"><span data-stu-id="267d1-1292">This example uses the `StrComp` function to return the results of a string comparison.</span></span>  
  
 [!code-vb[VbVbalrStrings#22](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#22)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="267d1-1293">
            <paramref name="Compare" /> value is not valid.</span>
          <span class="sxs-lookup">
            <span data-stu-id="267d1-1293">
              <paramref name="Compare" /> value is not valid.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.InStr" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <Member MemberName="StrConv">
      <MemberSignature Language="C#" Value="public static string StrConv (string str, Microsoft.VisualBasic.VbStrConv Conversion, int LocaleID = 0);" />
      <MemberSignature Language="ILAsm" Value=".method public static string StrConv(string str, valuetype Microsoft.VisualBasic.VbStrConv Conversion, int32 LocaleID) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.StrConv(System.String,Microsoft.VisualBasic.VbStrConv,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function StrConv (str As String, Conversion As VbStrConv, Optional LocaleID As Integer = 0) As String" />
      <MemberSignature Language="F#" Value="static member StrConv : string * Microsoft.VisualBasic.VbStrConv * int -&gt; string" Usage="Microsoft.VisualBasic.Strings.StrConv (str, Conversion, LocaleID)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="str" Type="System.String" />
        <Parameter Name="Conversion" Type="Microsoft.VisualBasic.VbStrConv" />
        <Parameter Name="LocaleID" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="str">
          <span data-ttu-id="267d1-1294">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="267d1-1294">Required.</span>
          </span>
          <span data-ttu-id="267d1-1295">
            <see langword="String" /> expression to be converted.</span>
          <span class="sxs-lookup">
            <span data-stu-id="267d1-1295">
              <see langword="String" /> expression to be converted.</span>
          </span>
        </param>
        <param name="Conversion">
          <span data-ttu-id="267d1-1296">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="267d1-1296">Required.</span>
          </span>
          <span data-ttu-id="267d1-1297">
            <see cref="T:Microsoft.VisualBasic.VbStrConv" /> member.</span>
          <span class="sxs-lookup">
            <span data-stu-id="267d1-1297">
              <see cref="T:Microsoft.VisualBasic.VbStrConv" /> member.</span>
          </span>
          <span data-ttu-id="267d1-1298">The enumeration value specifying the type of conversion to perform.</span>
          <span class="sxs-lookup">
            <span data-stu-id="267d1-1298">The enumeration value specifying the type of conversion to perform.</span>
          </span>
        </param>
        <param name="LocaleID">
          <span data-ttu-id="267d1-1299">Optional.</span>
          <span class="sxs-lookup">
            <span data-stu-id="267d1-1299">Optional.</span>
          </span>
          <span data-ttu-id="267d1-1300">The <see langword="LocaleID" /> value, if different from the system <see langword="LocaleID" /> value.</span>
          <span class="sxs-lookup">
            <span data-stu-id="267d1-1300">The <see langword="LocaleID" /> value, if different from the system <see langword="LocaleID" /> value.</span>
          </span>
          <span data-ttu-id="267d1-1301">(The system <see langword="LocaleID" /> value is the default.)</span>
          <span class="sxs-lookup">
            <span data-stu-id="267d1-1301">(The system <see langword="LocaleID" /> value is the default.)</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="267d1-1302">Returns a string converted as specified.</span>
          <span class="sxs-lookup">
            <span data-stu-id="267d1-1302">Returns a string converted as specified.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="267d1-1303">Returns a string converted as specified.</span>
          <span class="sxs-lookup">
            <span data-stu-id="267d1-1303">Returns a string converted as specified.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="267d1-1304">Las constantes `VbStrConv.Wide`, `VbStrConv.Narrow`, `VbStrConv.SimplifiedChinese`, `VbStrConv.TraditionalChinese`, `VbStrConv.Katakana`, y `VbStrConv.Hiragana` puede provocar errores de tiempo de ejecución cuando se utilizan en las configuraciones regionales que no son aplicables, pero no siempre: las constantes `VbStrConv.Katakana` y `VbStrConv.Hiragana`puede utilizarse en un sistema que no es japonés con instalado el paquete de idioma japonés.</span><span class="sxs-lookup"><span data-stu-id="267d1-1304">The constants `VbStrConv.Wide`, `VbStrConv.Narrow`, `VbStrConv.SimplifiedChinese`, `VbStrConv.TraditionalChinese`, `VbStrConv.Katakana`, and `VbStrConv.Hiragana` can cause run-time errors when used in locales where they do not apply, but not always: the constants `VbStrConv.Katakana` and `VbStrConv.Hiragana` can be used in a non-Japanese system with the Japanese Language Pack installed.</span></span> <span data-ttu-id="267d1-1305">Además, el uso de las constantes `VbStrConv.Wide` y `VbStrConv.Narrow` es compatible con cualquier sistema con un idioma asiáticos orientales instalado.</span><span class="sxs-lookup"><span data-stu-id="267d1-1305">In addition, use of the constants `VbStrConv.Wide` and `VbStrConv.Narrow` is supported on any system with an East Asian language installed.</span></span>  
  
 <span data-ttu-id="267d1-1306">Esta función usa la información de referencia cultural de la aplicación al manipular la cadena para que los cambios de mayúsculas son adecuados para la configuración regional en el que se utiliza la aplicación.</span><span class="sxs-lookup"><span data-stu-id="267d1-1306">This function uses the application's culture information when manipulating the string so that the case changes are appropriate for the locale in which the application is being used.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="267d1-1307">Si la aplicación toma decisiones de seguridad en función del resultado de una comparación o la operación de cambio de mayúsculas y, a continuación, la operación debe utilizar el <xref:System.String.Compare%2A?displayProperty=nameWithType> método y pase <xref:System.StringComparison.Ordinal> o <xref:System.StringComparison.OrdinalIgnoreCase> para el `comparisonType` argumento.</span><span class="sxs-lookup"><span data-stu-id="267d1-1307">If your application makes security decisions based on the result of a comparison or case-change operation, then the operation should use the <xref:System.String.Compare%2A?displayProperty=nameWithType> method, and pass <xref:System.StringComparison.Ordinal> or <xref:System.StringComparison.OrdinalIgnoreCase> for the `comparisonType` argument.</span></span> <span data-ttu-id="267d1-1308">Para obtener más información, consulte [cómo afecta a cadenas de referencia cultural en Visual Basic](~/docs/visual-basic/programming-guide/language-features/strings/how-culture-affects-strings.md).</span><span class="sxs-lookup"><span data-stu-id="267d1-1308">For more information, see [How Culture Affects Strings in Visual Basic](~/docs/visual-basic/programming-guide/language-features/strings/how-culture-affects-strings.md).</span></span>  
  
 <span data-ttu-id="267d1-1309">La configuración del argumento `Conversion` es:</span><span class="sxs-lookup"><span data-stu-id="267d1-1309">The `Conversion` argument settings are:</span></span>  
  
|<span data-ttu-id="267d1-1310">Miembro de enumeración</span><span class="sxs-lookup"><span data-stu-id="267d1-1310">Enumeration member</span></span>|<span data-ttu-id="267d1-1311">Descripción</span><span class="sxs-lookup"><span data-stu-id="267d1-1311">Description</span></span>|  
|-|-|  
|`VbStrConv.None`|<span data-ttu-id="267d1-1312">No realiza ninguna conversión</span><span class="sxs-lookup"><span data-stu-id="267d1-1312">Performs no conversion</span></span>|  
|`VbStrConv.LinguisticCasing`|<span data-ttu-id="267d1-1313">Utiliza reglas lingüísticas de mayúsculas y minúsculas, en lugar de sistema de archivos (valor predeterminado).</span><span class="sxs-lookup"><span data-stu-id="267d1-1313">Uses linguistic rules for casing, rather than File System (default).</span></span> <span data-ttu-id="267d1-1314">Válido con `VbStrConv.UpperCase` y `VbStrConv.LowerCase` sólo.</span><span class="sxs-lookup"><span data-stu-id="267d1-1314">Valid with `VbStrConv.UpperCase` and `VbStrConv.LowerCase` only.</span></span>|  
|`VbStrConv.UpperCase`|<span data-ttu-id="267d1-1315">Convierte la cadena a mayúsculas.</span><span class="sxs-lookup"><span data-stu-id="267d1-1315">Converts the string to uppercase characters.</span></span>|  
|`VbStrConv.LowerCase`|<span data-ttu-id="267d1-1316">Convierte la cadena a minúsculas.</span><span class="sxs-lookup"><span data-stu-id="267d1-1316">Converts the string to lowercase characters.</span></span>|  
|`VbStrConv.ProperCase`|<span data-ttu-id="267d1-1317">Convierte la primera letra de cada palabra de la cadena a mayúsculas.</span><span class="sxs-lookup"><span data-stu-id="267d1-1317">Converts the first letter of every word in string to uppercase.</span></span>|  
|<span data-ttu-id="267d1-1318">`VbStrConv.Wide` <sup>\*</sup></span><span class="sxs-lookup"><span data-stu-id="267d1-1318">`VbStrConv.Wide` <sup>\*</sup></span></span>|<span data-ttu-id="267d1-1319">Convierte estrechos (ancho medio) de caracteres en la cadena de caracteres anchos (ancho completo).</span><span class="sxs-lookup"><span data-stu-id="267d1-1319">Converts narrow (half-width) characters in the string to wide (full-width) characters.</span></span> [!INCLUDE[vbstrconv-wide](~/includes/vbstrconv-wide-md.md)]|  
|<span data-ttu-id="267d1-1320">`VbStrConv.Narrow` <sup>\*</sup></span><span class="sxs-lookup"><span data-stu-id="267d1-1320">`VbStrConv.Narrow` <sup>\*</sup></span></span>|<span data-ttu-id="267d1-1321">Convierte los caracteres anchos (dos bytes) en la cadena de caracteres estrechos (ancho medio).</span><span class="sxs-lookup"><span data-stu-id="267d1-1321">Converts wide (full-width) characters in the string to narrow (half-width) characters.</span></span>|  
|<span data-ttu-id="267d1-1322">`VbStrConv.Katakana` <sup>**</sup></span><span class="sxs-lookup"><span data-stu-id="267d1-1322">`VbStrConv.Katakana` <sup>**</sup></span></span>|<span data-ttu-id="267d1-1323">Convierte los caracteres Hiragana de la cadena en caracteres Katakana.</span><span class="sxs-lookup"><span data-stu-id="267d1-1323">Converts Hiragana characters in the string to Katakana characters.</span></span>|  
|<span data-ttu-id="267d1-1324">`VbStrConv.Hiragana` <sup>**</sup></span><span class="sxs-lookup"><span data-stu-id="267d1-1324">`VbStrConv.Hiragana` <sup>**</sup></span></span>|<span data-ttu-id="267d1-1325">Convierte los caracteres Katakana de la cadena en caracteres Hiragana.</span><span class="sxs-lookup"><span data-stu-id="267d1-1325">Converts Katakana characters in the string to Hiragana characters.</span></span>|  
|<span data-ttu-id="267d1-1326">`VbStrConv.SimplifiedChinese` <sup>\*</sup></span><span class="sxs-lookup"><span data-stu-id="267d1-1326">`VbStrConv.SimplifiedChinese` <sup>\*</sup></span></span>|<span data-ttu-id="267d1-1327">Convierte caracteres de chino tradicional a chino simplificado.</span><span class="sxs-lookup"><span data-stu-id="267d1-1327">Converts Traditional Chinese characters to Simplified Chinese.</span></span>|  
|<span data-ttu-id="267d1-1328">`VbStrConv.TraditionalChinese` <sup>\*</sup></span><span class="sxs-lookup"><span data-stu-id="267d1-1328">`VbStrConv.TraditionalChinese` <sup>\*</sup></span></span>|<span data-ttu-id="267d1-1329">Convierte caracteres de chino simplificado en chino tradicional.</span><span class="sxs-lookup"><span data-stu-id="267d1-1329">Converts Simplified Chinese characters to Traditional Chinese.</span></span>|  
  
 <span data-ttu-id="267d1-1330"><sup>\*</sup> Se aplica a las configuraciones regionales asiáticas.</span><span class="sxs-lookup"><span data-stu-id="267d1-1330"><sup>\*</sup> Applies to Asian locales.</span></span>  
  
 <span data-ttu-id="267d1-1331"><sup>**</sup> Solo se aplica a Japón.</span><span class="sxs-lookup"><span data-stu-id="267d1-1331"><sup>**</sup> Applies to Japan only.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="267d1-1332">Estas constantes se especifican en .NET Framework common language runtime.</span><span class="sxs-lookup"><span data-stu-id="267d1-1332">These constants are specified in the .NET Framework common language runtime.</span></span> <span data-ttu-id="267d1-1333">Como resultado, puede utilizarse en cualquier parte del código en lugar de los valores reales.</span><span class="sxs-lookup"><span data-stu-id="267d1-1333">As a result, they can be used anywhere in your code in place of the actual values.</span></span> <span data-ttu-id="267d1-1334">La mayoría se puede combinar (por ejemplo, `UpperCase + Wide`), excepto cuando son mutuamente excluyentes (por ejemplo, `VbStrConv.Wide + VbStrConv.Narrow`).</span><span class="sxs-lookup"><span data-stu-id="267d1-1334">Most can be combined (for example, `UpperCase + Wide`), except when they are mutually exclusive (for example, `VbStrConv.Wide + VbStrConv.Narrow`).</span></span>  
  
 <span data-ttu-id="267d1-1335">Los siguientes son los separadores de palabra válido de mayúsculas y minúsculas correctas: Null (`Chr$(0)`), tabulación horizontal (`Chr$(9)`), avance de línea (`Chr$(10)`), tabulación vertical (`Chr$(11)`), avance de página (`Chr$(12)`), retorno de carro (`Chr$(13)`), espacio () juego de caracteres de byte único) (`Chr$(32)`).</span><span class="sxs-lookup"><span data-stu-id="267d1-1335">The following are valid word separators for proper casing: Null (`Chr$(0)`), horizontal tab (`Chr$(9)`), line feed (`Chr$(10)`), vertical tab (`Chr$(11)`), form feed (`Chr$(12)`), carriage return (`Chr$(13)`), space (single-byte character set) (`Chr$(32)`).</span></span> <span data-ttu-id="267d1-1336">El valor real de un espacio, lo que puede ser completo o medio, varía según el país o región Asia oriental.</span><span class="sxs-lookup"><span data-stu-id="267d1-1336">The actual value for a space, which can be full or half width, varies by country/region for East Asian cultures.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="267d1-1337">En este ejemplo convierte texto en letras minúsculas.</span><span class="sxs-lookup"><span data-stu-id="267d1-1337">This example converts text into all lowercase letters.</span></span>  
  
 [!code-vb[VbVbalrStrings#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#6)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="267d1-1338">Unsupported <paramref name="LocaleID" />, <paramref name="Conversion" /> &lt; 0 or &gt; 2048, or unsupported conversion for specified locale.</span>
          <span class="sxs-lookup">
            <span data-stu-id="267d1-1338">Unsupported <paramref name="LocaleID" />, <paramref name="Conversion" /> &lt; 0 or &gt; 2048, or unsupported conversion for specified locale.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Chr(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.ChrW(System.Int32)" />
        <altmember cref="T:System.String" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <MemberGroup MemberName="StrDup">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="267d1-1339">Returns a string or object consisting of the specified character repeated the specified number of times.</span>
          <span class="sxs-lookup">
            <span data-stu-id="267d1-1339">Returns a string or object consisting of the specified character repeated the specified number of times.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="StrDup">
      <MemberSignature Language="C#" Value="public static string StrDup (int Number, char Character);" />
      <MemberSignature Language="ILAsm" Value=".method public static string StrDup(int32 Number, char Character) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.StrDup(System.Int32,System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Function StrDup (Number As Integer, Character As Char) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ StrDup(int Number, char Character);" />
      <MemberSignature Language="F#" Value="static member StrDup : int * char -&gt; string" Usage="Microsoft.VisualBasic.Strings.StrDup (Number, Character)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int32" />
        <Parameter Name="Character" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="267d1-1340">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="267d1-1340">Required.</span>
          </span>
          <span data-ttu-id="267d1-1341">
            <see langword="Integer" /> expression.</span>
          <span class="sxs-lookup">
            <span data-stu-id="267d1-1341">
              <see langword="Integer" /> expression.</span>
          </span>
          <span data-ttu-id="267d1-1342">The length to the string to be returned.</span>
          <span class="sxs-lookup">
            <span data-stu-id="267d1-1342">The length to the string to be returned.</span>
          </span>
        </param>
        <param name="Character">
          <span data-ttu-id="267d1-1343">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="267d1-1343">Required.</span>
          </span>
          <span data-ttu-id="267d1-1344">Any valid <see langword="Char" />, <see langword="String" />, or <see langword="Object" /> expression.</span>
          <span class="sxs-lookup">
            <span data-stu-id="267d1-1344">Any valid <see langword="Char" />, <see langword="String" />, or <see langword="Object" /> expression.</span>
          </span>
          <span data-ttu-id="267d1-1345">Only the first character of the expression will be used.</span>
          <span class="sxs-lookup">
            <span data-stu-id="267d1-1345">Only the first character of the expression will be used.</span>
          </span>
          <span data-ttu-id="267d1-1346">If Character is of type <see langword="Object" />, it must contain either a <see langword="Char" /> or a <see langword="String" /> value.</span>
          <span class="sxs-lookup">
            <span data-stu-id="267d1-1346">If Character is of type <see langword="Object" />, it must contain either a <see langword="Char" /> or a <see langword="String" /> value.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="267d1-1347">Returns a string or object consisting of the specified character repeated the specified number of times.</span>
          <span class="sxs-lookup">
            <span data-stu-id="267d1-1347">Returns a string or object consisting of the specified character repeated the specified number of times.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="267d1-1348">Returns a string or object consisting of the specified character repeated the specified number of times.</span>
          <span class="sxs-lookup">
            <span data-stu-id="267d1-1348">Returns a string or object consisting of the specified character repeated the specified number of times.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="267d1-1349">Esta función devuelve un `String` formada por caracteres repetidos.</span><span class="sxs-lookup"><span data-stu-id="267d1-1349">This function returns a `String` made up of repeated characters.</span></span> <span data-ttu-id="267d1-1350">El carácter que conforma la cadena es el primer carácter de la `Character` se duplica el argumento y lo `Number` veces.</span><span class="sxs-lookup"><span data-stu-id="267d1-1350">The character that makes up the string is the first character in the `Character` argument, and it is duplicated `Number` number of times.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="267d1-1351">Este ejemplo se usa el `StrDup` duplicado de función para devolver una cadena de caracteres.</span><span class="sxs-lookup"><span data-stu-id="267d1-1351">This example uses the `StrDup` function to return a string of duplicated characters.</span></span>  
  
 [!code-vb[VbVbalrStrings#34](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#34)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="267d1-1352">
            <paramref name="Number" /> is less than 0 or <paramref name="Character" /> type is not valid.</span>
          <span class="sxs-lookup">
            <span data-stu-id="267d1-1352">
              <paramref name="Number" /> is less than 0 or <paramref name="Character" /> type is not valid.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="267d1-1353">
            <paramref name="Character" /> is <see langword="Nothing" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="267d1-1353">
              <paramref name="Character" /> is <see langword="Nothing" />.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.SPC(System.Int16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <Member MemberName="StrDup">
      <MemberSignature Language="C#" Value="public static object StrDup (int Number, object Character);" />
      <MemberSignature Language="ILAsm" Value=".method public static object StrDup(int32 Number, object Character) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.StrDup(System.Int32,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function StrDup (Number As Integer, Character As Object) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ StrDup(int Number, System::Object ^ Character);" />
      <MemberSignature Language="F#" Value="static member StrDup : int * obj -&gt; obj" Usage="Microsoft.VisualBasic.Strings.StrDup (Number, Character)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int32" />
        <Parameter Name="Character" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="267d1-1354">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="267d1-1354">Required.</span>
          </span>
          <span data-ttu-id="267d1-1355">
            <see langword="Integer" /> expression.</span>
          <span class="sxs-lookup">
            <span data-stu-id="267d1-1355">
              <see langword="Integer" /> expression.</span>
          </span>
          <span data-ttu-id="267d1-1356">The length to the string to be returned.</span>
          <span class="sxs-lookup">
            <span data-stu-id="267d1-1356">The length to the string to be returned.</span>
          </span>
        </param>
        <param name="Character">
          <span data-ttu-id="267d1-1357">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="267d1-1357">Required.</span>
          </span>
          <span data-ttu-id="267d1-1358">Any valid <see langword="Char" />, <see langword="String" />, or <see langword="Object" /> expression.</span>
          <span class="sxs-lookup">
            <span data-stu-id="267d1-1358">Any valid <see langword="Char" />, <see langword="String" />, or <see langword="Object" /> expression.</span>
          </span>
          <span data-ttu-id="267d1-1359">Only the first character of the expression will be used.</span>
          <span class="sxs-lookup">
            <span data-stu-id="267d1-1359">Only the first character of the expression will be used.</span>
          </span>
          <span data-ttu-id="267d1-1360">If Character is of type <see langword="Object" />, it must contain either a <see langword="Char" /> or a <see langword="String" /> value.</span>
          <span class="sxs-lookup">
            <span data-stu-id="267d1-1360">If Character is of type <see langword="Object" />, it must contain either a <see langword="Char" /> or a <see langword="String" /> value.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="267d1-1361">Returns a string or object consisting of the specified character repeated the specified number of times.</span>
          <span class="sxs-lookup">
            <span data-stu-id="267d1-1361">Returns a string or object consisting of the specified character repeated the specified number of times.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="267d1-1362">Returns a string or object consisting of the specified character repeated the specified number of times.</span>
          <span class="sxs-lookup">
            <span data-stu-id="267d1-1362">Returns a string or object consisting of the specified character repeated the specified number of times.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="267d1-1363">Esta función devuelve un `String` formada por caracteres repetidos.</span><span class="sxs-lookup"><span data-stu-id="267d1-1363">This function returns a `String` made up of repeated characters.</span></span> <span data-ttu-id="267d1-1364">El carácter que conforma la cadena es el primer carácter de la `Character` se duplica el argumento y lo `Number` veces.</span><span class="sxs-lookup"><span data-stu-id="267d1-1364">The character that makes up the string is the first character in the `Character` argument, and it is duplicated `Number` number of times.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="267d1-1365">Este ejemplo se usa el `StrDup` duplicado de función para devolver una cadena de caracteres.</span><span class="sxs-lookup"><span data-stu-id="267d1-1365">This example uses the `StrDup` function to return a string of duplicated characters.</span></span>  
  
 [!code-vb[VbVbalrStrings#34](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#34)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="267d1-1366">
            <paramref name="Number" /> is less than 0 or <paramref name="Character" /> type is not valid.</span>
          <span class="sxs-lookup">
            <span data-stu-id="267d1-1366">
              <paramref name="Number" /> is less than 0 or <paramref name="Character" /> type is not valid.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="267d1-1367">
            <paramref name="Character" /> is <see langword="Nothing" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="267d1-1367">
              <paramref name="Character" /> is <see langword="Nothing" />.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.SPC(System.Int16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <Member MemberName="StrDup">
      <MemberSignature Language="C#" Value="public static string StrDup (int Number, string Character);" />
      <MemberSignature Language="ILAsm" Value=".method public static string StrDup(int32 Number, string Character) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.StrDup(System.Int32,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function StrDup (Number As Integer, Character As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ StrDup(int Number, System::String ^ Character);" />
      <MemberSignature Language="F#" Value="static member StrDup : int * string -&gt; string" Usage="Microsoft.VisualBasic.Strings.StrDup (Number, Character)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int32" />
        <Parameter Name="Character" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="267d1-1368">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="267d1-1368">Required.</span>
          </span>
          <span data-ttu-id="267d1-1369">
            <see langword="Integer" /> expression.</span>
          <span class="sxs-lookup">
            <span data-stu-id="267d1-1369">
              <see langword="Integer" /> expression.</span>
          </span>
          <span data-ttu-id="267d1-1370">The length to the string to be returned.</span>
          <span class="sxs-lookup">
            <span data-stu-id="267d1-1370">The length to the string to be returned.</span>
          </span>
        </param>
        <param name="Character">
          <span data-ttu-id="267d1-1371">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="267d1-1371">Required.</span>
          </span>
          <span data-ttu-id="267d1-1372">Any valid <see langword="Char" />, <see langword="String" />, or <see langword="Object" /> expression.</span>
          <span class="sxs-lookup">
            <span data-stu-id="267d1-1372">Any valid <see langword="Char" />, <see langword="String" />, or <see langword="Object" /> expression.</span>
          </span>
          <span data-ttu-id="267d1-1373">Only the first character of the expression will be used.</span>
          <span class="sxs-lookup">
            <span data-stu-id="267d1-1373">Only the first character of the expression will be used.</span>
          </span>
          <span data-ttu-id="267d1-1374">If Character is of type <see langword="Object" />, it must contain either a <see langword="Char" /> or a <see langword="String" /> value.</span>
          <span class="sxs-lookup">
            <span data-stu-id="267d1-1374">If Character is of type <see langword="Object" />, it must contain either a <see langword="Char" /> or a <see langword="String" /> value.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="267d1-1375">Returns a string or object consisting of the specified character repeated the specified number of times.</span>
          <span class="sxs-lookup">
            <span data-stu-id="267d1-1375">Returns a string or object consisting of the specified character repeated the specified number of times.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="267d1-1376">Returns a string or object consisting of the specified character repeated the specified number of times.</span>
          <span class="sxs-lookup">
            <span data-stu-id="267d1-1376">Returns a string or object consisting of the specified character repeated the specified number of times.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="267d1-1377">Esta función devuelve un `String` formada por caracteres repetidos.</span><span class="sxs-lookup"><span data-stu-id="267d1-1377">This function returns a `String` made up of repeated characters.</span></span> <span data-ttu-id="267d1-1378">El carácter que conforma la cadena es el primer carácter de la `Character` se duplica el argumento y lo `Number` veces.</span><span class="sxs-lookup"><span data-stu-id="267d1-1378">The character that makes up the string is the first character in the `Character` argument, and it is duplicated `Number` number of times.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="267d1-1379">Este ejemplo se usa el `StrDup` duplicado de función para devolver una cadena de caracteres.</span><span class="sxs-lookup"><span data-stu-id="267d1-1379">This example uses the `StrDup` function to return a string of duplicated characters.</span></span>  
  
 [!code-vb[VbVbalrStrings#34](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#34)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="267d1-1380">
            <paramref name="Number" /> is less than 0 or <paramref name="Character" /> type is not valid.</span>
          <span class="sxs-lookup">
            <span data-stu-id="267d1-1380">
              <paramref name="Number" /> is less than 0 or <paramref name="Character" /> type is not valid.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="267d1-1381">
            <paramref name="Character" /> is <see langword="Nothing" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="267d1-1381">
              <paramref name="Character" /> is <see langword="Nothing" />.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.SPC(System.Int16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <Member MemberName="StrReverse">
      <MemberSignature Language="C#" Value="public static string StrReverse (string Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static string StrReverse(string Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.StrReverse(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function StrReverse (Expression As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ StrReverse(System::String ^ Expression);" />
      <MemberSignature Language="F#" Value="static member StrReverse : string -&gt; string" Usage="Microsoft.VisualBasic.Strings.StrReverse Expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="Expression">
          <span data-ttu-id="267d1-1382">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="267d1-1382">Required.</span>
          </span>
          <span data-ttu-id="267d1-1383">String expression whose characters are to be reversed.</span>
          <span class="sxs-lookup">
            <span data-stu-id="267d1-1383">String expression whose characters are to be reversed.</span>
          </span>
          <span data-ttu-id="267d1-1384">If <c>Expression</c> is a zero-length string (""), a zero-length string is returned.</span>
          <span class="sxs-lookup">
            <span data-stu-id="267d1-1384">If <c>Expression</c> is a zero-length string (""), a zero-length string is returned.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="267d1-1385">Returns a string in which the character order of a specified string is reversed.</span>
          <span class="sxs-lookup">
            <span data-stu-id="267d1-1385">Returns a string in which the character order of a specified string is reversed.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="267d1-1386">Returns a string in which the character order of a specified string is reversed.</span>
          <span class="sxs-lookup">
            <span data-stu-id="267d1-1386">Returns a string in which the character order of a specified string is reversed.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="267d1-1387">El `StrReverse` función devuelve una cadena que contiene los mismos caracteres que `Expression`, pero en orden inverso.</span><span class="sxs-lookup"><span data-stu-id="267d1-1387">The `StrReverse` function returns a string that contains the same characters as `Expression`, but in the opposite order.</span></span>  
  
   
  
## Examples  
 [!code-vb[VbVbalrStrings#29](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#29)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Strings.InStrRev(System.String,System.String,System.Int32,Microsoft.VisualBasic.CompareMethod)" />
      </Docs>
    </Member>
    <Member MemberName="Trim">
      <MemberSignature Language="C#" Value="public static string Trim (string str);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Trim(string str) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Trim(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function Trim (str As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Trim(System::String ^ str);" />
      <MemberSignature Language="F#" Value="static member Trim : string -&gt; string" Usage="Microsoft.VisualBasic.Strings.Trim str" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="str" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="str">
          <span data-ttu-id="267d1-1388">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="267d1-1388">Required.</span>
          </span>
          <span data-ttu-id="267d1-1389">Any valid <see langword="String" /> expression.</span>
          <span class="sxs-lookup">
            <span data-stu-id="267d1-1389">Any valid <see langword="String" /> expression.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="267d1-1390">Returns a string containing a copy of a specified string with no leading spaces (<see langword="LTrim" />), no trailing spaces (<see langword="RTrim" />), or no leading or trailing spaces (<see langword="Trim" />).</span>
          <span class="sxs-lookup">
            <span data-stu-id="267d1-1390">Returns a string containing a copy of a specified string with no leading spaces (<see langword="LTrim" />), no trailing spaces (<see langword="RTrim" />), or no leading or trailing spaces (<see langword="Trim" />).</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="267d1-1391">Returns a string containing a copy of a specified string with no leading spaces (<see langword="LTrim" />), no trailing spaces (<see langword="RTrim" />), or no leading or trailing spaces (<see langword="Trim" />).</span>
          <span class="sxs-lookup">
            <span data-stu-id="267d1-1391">Returns a string containing a copy of a specified string with no leading spaces (<see langword="LTrim" />), no trailing spaces (<see langword="RTrim" />), or no leading or trailing spaces (<see langword="Trim" />).</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="267d1-1392">El `LTrim`, `RTrim`, y `Trim` funciones quitan los espacios de los extremos de las cadenas.</span><span class="sxs-lookup"><span data-stu-id="267d1-1392">The `LTrim`, `RTrim`, and `Trim` functions remove spaces from the ends of strings.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="267d1-1393">Este ejemplo se usa el `LTrim` función para quitar los espacios iniciales y la `RTrim` espacios de función para quitar los finales de una variable de cadena.</span><span class="sxs-lookup"><span data-stu-id="267d1-1393">This example uses the `LTrim` function to strip leading spaces and the `RTrim` function to strip trailing spaces from a string variable.</span></span> <span data-ttu-id="267d1-1394">Usa el `Trim` función para quitar ambos tipos de espacios.</span><span class="sxs-lookup"><span data-stu-id="267d1-1394">It uses the `Trim` function to strip both types of spaces.</span></span>  
  
 [!code-vb[VbVbalrStrings#25](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#25)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Strings.RTrim(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.LTrim(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Left(System.String,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Right(System.String,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Space(System.Int32)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="UCase">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="267d1-1395">Returns a string or character containing the specified string converted to uppercase.</span>
          <span class="sxs-lookup">
            <span data-stu-id="267d1-1395">Returns a string or character containing the specified string converted to uppercase.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="UCase">
      <MemberSignature Language="C#" Value="public static char UCase (char Value);" />
      <MemberSignature Language="ILAsm" Value=".method public static char UCase(char Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.UCase(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Function UCase (Value As Char) As Char" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static char UCase(char Value);" />
      <MemberSignature Language="F#" Value="static member UCase : char -&gt; char" Usage="Microsoft.VisualBasic.Strings.UCase Value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Value" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="Value">
          <span data-ttu-id="267d1-1396">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="267d1-1396">Required.</span>
          </span>
          <span data-ttu-id="267d1-1397">Any valid <see langword="String" /> or <see langword="Char" /> expression.</span>
          <span class="sxs-lookup">
            <span data-stu-id="267d1-1397">Any valid <see langword="String" /> or <see langword="Char" /> expression.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="267d1-1398">Returns a string or character containing the specified string converted to uppercase.</span>
          <span class="sxs-lookup">
            <span data-stu-id="267d1-1398">Returns a string or character containing the specified string converted to uppercase.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="267d1-1399">Returns a string or character containing the specified string converted to uppercase.</span>
          <span class="sxs-lookup">
            <span data-stu-id="267d1-1399">Returns a string or character containing the specified string converted to uppercase.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="267d1-1400">Solo letras minúsculas se convierten a mayúsculas; todas las letras en mayúscula y los caracteres permanecen sin cambios.</span><span class="sxs-lookup"><span data-stu-id="267d1-1400">Only lowercase letters are converted to uppercase; all uppercase letters and nonletter characters remain unchanged.</span></span>  
  
 <span data-ttu-id="267d1-1401">Esta función usa la información de referencia cultural de la aplicación al manipular la cadena para que los cambios de mayúsculas son adecuados para la configuración regional en el que se utiliza la aplicación.</span><span class="sxs-lookup"><span data-stu-id="267d1-1401">This function uses the application's culture information when manipulating the string so that the case changes are appropriate for the locale in which the application is being used.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="267d1-1402">Si la aplicación toma decisiones de seguridad en función del resultado de una comparación o la operación de cambio de mayúsculas y, a continuación, la operación debe utilizar el <xref:System.String.Compare%2A?displayProperty=nameWithType> método y pase <xref:System.StringComparison.Ordinal> o <xref:System.StringComparison.OrdinalIgnoreCase> para el `comparisonType` argumento.</span><span class="sxs-lookup"><span data-stu-id="267d1-1402">If your application makes security decisions based on the result of a comparison or case-change operation, then the operation should use the <xref:System.String.Compare%2A?displayProperty=nameWithType> method, and pass <xref:System.StringComparison.Ordinal> or <xref:System.StringComparison.OrdinalIgnoreCase> for the `comparisonType` argument.</span></span> <span data-ttu-id="267d1-1403">Para obtener más información, consulte [cómo afecta a cadenas de referencia cultural en Visual Basic](~/docs/visual-basic/programming-guide/language-features/strings/how-culture-affects-strings.md).</span><span class="sxs-lookup"><span data-stu-id="267d1-1403">For more information, see [How Culture Affects Strings in Visual Basic](~/docs/visual-basic/programming-guide/language-features/strings/how-culture-affects-strings.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="267d1-1404">Este ejemplo se usa el `UCase` función para devolver una versión de una cadena en mayúsculas.</span><span class="sxs-lookup"><span data-stu-id="267d1-1404">This example uses the `UCase` function to return an uppercase version of a string.</span></span>  
  
 [!code-vb[VbVbalrStrings#31](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#31)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.LCase" />
      </Docs>
    </Member>
    <Member MemberName="UCase">
      <MemberSignature Language="C#" Value="public static string UCase (string Value);" />
      <MemberSignature Language="ILAsm" Value=".method public static string UCase(string Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.UCase(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function UCase (Value As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ UCase(System::String ^ Value);" />
      <MemberSignature Language="F#" Value="static member UCase : string -&gt; string" Usage="Microsoft.VisualBasic.Strings.UCase Value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="Value">
          <span data-ttu-id="267d1-1405">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="267d1-1405">Required.</span>
          </span>
          <span data-ttu-id="267d1-1406">Any valid <see langword="String" /> or <see langword="Char" /> expression.</span>
          <span class="sxs-lookup">
            <span data-stu-id="267d1-1406">Any valid <see langword="String" /> or <see langword="Char" /> expression.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="267d1-1407">Returns a string or character containing the specified string converted to uppercase.</span>
          <span class="sxs-lookup">
            <span data-stu-id="267d1-1407">Returns a string or character containing the specified string converted to uppercase.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="267d1-1408">Returns a string or character containing the specified string converted to uppercase.</span>
          <span class="sxs-lookup">
            <span data-stu-id="267d1-1408">Returns a string or character containing the specified string converted to uppercase.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="267d1-1409">Solo letras minúsculas se convierten a mayúsculas; todas las letras en mayúscula y los caracteres permanecen sin cambios.</span><span class="sxs-lookup"><span data-stu-id="267d1-1409">Only lowercase letters are converted to uppercase; all uppercase letters and nonletter characters remain unchanged.</span></span>  
  
 <span data-ttu-id="267d1-1410">Esta función usa la información de referencia cultural de la aplicación al manipular la cadena para que los cambios de mayúsculas son adecuados para la configuración regional en el que se utiliza la aplicación.</span><span class="sxs-lookup"><span data-stu-id="267d1-1410">This function uses the application's culture information when manipulating the string so that the case changes are appropriate for the locale in which the application is being used.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="267d1-1411">Si la aplicación toma decisiones de seguridad en función del resultado de una comparación o la operación de cambio de mayúsculas y, a continuación, la operación debe utilizar el <xref:System.String.Compare%2A?displayProperty=nameWithType> método y pase <xref:System.StringComparison.Ordinal> o <xref:System.StringComparison.OrdinalIgnoreCase> para el `comparisonType` argumento.</span><span class="sxs-lookup"><span data-stu-id="267d1-1411">If your application makes security decisions based on the result of a comparison or case-change operation, then the operation should use the <xref:System.String.Compare%2A?displayProperty=nameWithType> method, and pass <xref:System.StringComparison.Ordinal> or <xref:System.StringComparison.OrdinalIgnoreCase> for the `comparisonType` argument.</span></span> <span data-ttu-id="267d1-1412">Para obtener más información, consulte [cómo afecta a cadenas de referencia cultural en Visual Basic](~/docs/visual-basic/programming-guide/language-features/strings/how-culture-affects-strings.md).</span><span class="sxs-lookup"><span data-stu-id="267d1-1412">For more information, see [How Culture Affects Strings in Visual Basic](~/docs/visual-basic/programming-guide/language-features/strings/how-culture-affects-strings.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="267d1-1413">Este ejemplo se usa el `UCase` función para devolver una versión de una cadena en mayúsculas.</span><span class="sxs-lookup"><span data-stu-id="267d1-1413">This example uses the `UCase` function to return an uppercase version of a string.</span></span>  
  
 [!code-vb[VbVbalrStrings#31](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#31)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.LCase" />
      </Docs>
    </Member>
  </Members>
</Type>