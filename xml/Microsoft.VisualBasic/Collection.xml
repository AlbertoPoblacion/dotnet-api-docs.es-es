<Type Name="Collection" FullName="Microsoft.VisualBasic.Collection">
  <TypeSignature Language="C#" Value="public sealed class Collection : System.Collections.IList, System.Runtime.Serialization.IDeserializationCallback, System.Runtime.Serialization.ISerializable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable sealed Collection extends System.Object implements class System.Collections.ICollection, class System.Collections.IList, class System.Runtime.Serialization.IDeserializationCallback, class System.Runtime.Serialization.ISerializable" />
  <TypeSignature Language="DocId" Value="T:Microsoft.VisualBasic.Collection" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class Collection&#xA;Implements IDeserializationCallback, IList, ISerializable" />
  <TypeSignature Language="C++ CLI" Value="public ref class Collection sealed : System::Collections::IList, System::Runtime::Serialization::IDeserializationCallback, System::Runtime::Serialization::ISerializable" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.VisualBasic</AssemblyName>
    <AssemblyVersion>10.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Collections.IList</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Runtime.Serialization.IDeserializationCallback</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Runtime.Serialization.ISerializable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.Diagnostics.DebuggerDisplay("Count = {Count}")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Diagnostics.DebuggerTypeProxy(typeof(Microsoft.VisualBasic.Collection/CollectionDebugView))</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="4d197-101">Una <see langword="Collection" /> de Visual Basic es un conjunto ordenado de elementos a los que se puede hacer referencia como una unidad.</span><span class="sxs-lookup"><span data-stu-id="4d197-101">A Visual Basic <see langword="Collection" /> is an ordered set of items that can be referred to as a unit.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="4d197-102">Siempre que sea posible, debe usar las colecciones genéricas en el <xref:System.Collections.Generic?displayProperty=nameWithType> espacio de nombres o la <xref:System.Collections.Concurrent> espacio de nombres en lugar de un de Visual Basic `Collection`.</span><span class="sxs-lookup"><span data-stu-id="4d197-102">Whenever possible, you should use the generic collections in the <xref:System.Collections.Generic?displayProperty=nameWithType> namespace or the <xref:System.Collections.Concurrent> namespace instead of a Visual Basic `Collection`.</span></span> <span data-ttu-id="4d197-103">Para obtener más información, consulte [colecciones](http://msdn.microsoft.com/library/e76533a9-5033-4a0b-b003-9c2be60d185b).</span><span class="sxs-lookup"><span data-stu-id="4d197-103">For more information, see [Collections](http://msdn.microsoft.com/library/e76533a9-5033-4a0b-b003-9c2be60d185b).</span></span>  
  
 <span data-ttu-id="4d197-104">Visual Basic `Collection` objeto proporciona una manera cómoda para hacer referencia a un grupo de elementos relacionado como un único objeto.</span><span class="sxs-lookup"><span data-stu-id="4d197-104">The Visual Basic `Collection` object provides a convenient way to refer to a related group of items as a single object.</span></span> <span data-ttu-id="4d197-105">Los elementos, o *elementos*, en una colección sólo necesita estar relacionada por el hecho de que se encuentran en la colección.</span><span class="sxs-lookup"><span data-stu-id="4d197-105">The items, or *elements*, in a collection need only be related by the fact that they exist in the collection.</span></span> <span data-ttu-id="4d197-106">Elementos de una colección no es necesario que compartir el mismo tipo de datos.</span><span class="sxs-lookup"><span data-stu-id="4d197-106">Elements of a collection do not have to share the same data type.</span></span>  
  
 <span data-ttu-id="4d197-107">Puede crear una colección del mismo modo que se crean otros objetos, como se muestra en el ejemplo siguiente.</span><span class="sxs-lookup"><span data-stu-id="4d197-107">You can create a collection the same way you create other objects, as the following example illustrates.</span></span>  
  
```  
Dim coll As New Microsoft.VisualBasic.Collection()  
```  
  
 <span data-ttu-id="4d197-108">Una vez haya creado una colección, puede realizar cualquiera de las siguientes acciones:</span><span class="sxs-lookup"><span data-stu-id="4d197-108">Once you have created a collection, you can do any of the following:</span></span>  
  
-   <span data-ttu-id="4d197-109">Agregar un elemento con la <xref:Microsoft.VisualBasic.Collection.Add%2A> método.</span><span class="sxs-lookup"><span data-stu-id="4d197-109">Add an element with the <xref:Microsoft.VisualBasic.Collection.Add%2A> method.</span></span>  
  
-   <span data-ttu-id="4d197-110">Quitar un elemento con la <xref:Microsoft.VisualBasic.Collection.Remove%2A> método.</span><span class="sxs-lookup"><span data-stu-id="4d197-110">Remove an element with the <xref:Microsoft.VisualBasic.Collection.Remove%2A> method.</span></span>  
  
-   <span data-ttu-id="4d197-111">Quitar todos los elementos con el <xref:Microsoft.VisualBasic.Collection.Clear%2A> método.</span><span class="sxs-lookup"><span data-stu-id="4d197-111">Remove all elements with the <xref:Microsoft.VisualBasic.Collection.Clear%2A> method.</span></span>  
  
-   <span data-ttu-id="4d197-112">Obtenga más información sobre el número de elementos contiene la colección con el <xref:Microsoft.VisualBasic.Collection.Count%2A> propiedad.</span><span class="sxs-lookup"><span data-stu-id="4d197-112">Find out how many elements the collection contains with the <xref:Microsoft.VisualBasic.Collection.Count%2A> property.</span></span>  
  
-   <span data-ttu-id="4d197-113">Compruebe si se encuentra con un elemento específico del <xref:Microsoft.VisualBasic.Collection.Contains%2A> método.</span><span class="sxs-lookup"><span data-stu-id="4d197-113">Check whether a specific element is present with the <xref:Microsoft.VisualBasic.Collection.Contains%2A> method.</span></span>  
  
-   <span data-ttu-id="4d197-114">Devolver un elemento específico de la colección con el <xref:Microsoft.VisualBasic.Collection.Item%2A> propiedad.</span><span class="sxs-lookup"><span data-stu-id="4d197-114">Return a specific element from the collection with the <xref:Microsoft.VisualBasic.Collection.Item%2A> property.</span></span>  
  
-   <span data-ttu-id="4d197-115">Recorrer en iteración la colección completa con la [For Each... Next (instrucción)](~/docs/visual-basic/language-reference/statements/for-each-next-statement.md).</span><span class="sxs-lookup"><span data-stu-id="4d197-115">Iterate through the entire collection with the [For Each...Next Statement](~/docs/visual-basic/language-reference/statements/for-each-next-statement.md).</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="4d197-116">Aunque Visual Basic `Collection` objeto tiene una funcionalidad idéntica a la `Collection` objeto en Visual Basic 6.0, los objetos no pueden interoperar en un entorno COM.</span><span class="sxs-lookup"><span data-stu-id="4d197-116">Although the Visual Basic `Collection` object has functionality identical to the `Collection` object in Visual Basic 6.0, the two cannot interoperate in a COM environment.</span></span>  
  
    > [!CAUTION]
    >  <span data-ttu-id="4d197-117">Recorrer en iteración un de Visual Basic `Collection` no es un procedimiento seguro para subprocesos.</span><span class="sxs-lookup"><span data-stu-id="4d197-117">Iterating through a Visual Basic `Collection` is not a thread-safe procedure.</span></span> <span data-ttu-id="4d197-118">Incluso si la colección está sincronizada, otros subprocesos todavía pueden modificar la colección, haciendo que el enumerador produzca una excepción.</span><span class="sxs-lookup"><span data-stu-id="4d197-118">Even if the collection is synchronized, other threads can still modify the collection, causing the enumerator to throw an exception.</span></span> <span data-ttu-id="4d197-119">Para garantizar la seguridad de subprocesos durante la enumeración, puede bloquear la colección o detectar las excepciones resultantes de los cambios realizados por otros subprocesos.</span><span class="sxs-lookup"><span data-stu-id="4d197-119">To guarantee thread safety during enumeration, either lock the collection or catch the exceptions resulting from changes made by other threads.</span></span> <span data-ttu-id="4d197-120">Para obtener más información acerca de cómo bloquear un elemento de programación, vea [SyncLock (instrucción)](~/docs/visual-basic/language-reference/statements/synclock-statement.md).</span><span class="sxs-lookup"><span data-stu-id="4d197-120">For more information on locking a programming element, see [SyncLock Statement](~/docs/visual-basic/language-reference/statements/synclock-statement.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4d197-121">En el ejemplo siguiente se crea el `Collection` objeto `names` y un cuadro de diálogo con el que un usuario puede agregar objetos (nombres) a la colección.</span><span class="sxs-lookup"><span data-stu-id="4d197-121">The following example creates the `Collection` object `names` and a dialog box with which a user can add objects (names) to the collection.</span></span> <span data-ttu-id="4d197-122">, A continuación, muestra los nombres de la colección y, finalmente, se vacía la colección sin desechar el `Collection` propio objeto.</span><span class="sxs-lookup"><span data-stu-id="4d197-122">It then displays the names in the collection, and finally empties the collection without disposing of the `Collection` object itself.</span></span>  
  
 <span data-ttu-id="4d197-123">Para ver cómo funciona esto, elija la **Agregar clase** línea de comandos desde el **proyecto** menú y declare una variable pública denominada `instanceName` en el nivel de módulo de `nameClass` (tipo `Public instanceName`) para almacenar los nombres de cada instancia.</span><span class="sxs-lookup"><span data-stu-id="4d197-123">To see how this works, choose the **Add Class** command from the **Project** menu and declare a public variable called `instanceName` at the module level of `nameClass` (type `Public instanceName`) to hold the names of each instance.</span></span> <span data-ttu-id="4d197-124">Deje el nombre predeterminado como `nameClass`.</span><span class="sxs-lookup"><span data-stu-id="4d197-124">Leave the default name as `nameClass`.</span></span> <span data-ttu-id="4d197-125">Copie y pegue el código siguiente en el **General** sección de otro módulo, y vuelva a iniciarlo con la instrucción `classNamer` en otro procedimiento.</span><span class="sxs-lookup"><span data-stu-id="4d197-125">Copy and paste the following code into the **General** section of another module, and then start it with the statement `classNamer` in another procedure.</span></span> <span data-ttu-id="4d197-126">(Este ejemplo funciona sólo con las aplicaciones de host que admitan clases).</span><span class="sxs-lookup"><span data-stu-id="4d197-126">(This example works only with host applications that support classes.)</span></span>  
  
 [!code-vb[VbVbalrCollectionObject#1](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCollectionObject/VB/Class1.vb#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Collection ();" />
      <MemberSignature Language="ILAsm" Value=".method public specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Collection.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Collection();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="4d197-127">Crea y devuelve un nuevo objeto <see cref="T:Microsoft.VisualBasic.Collection" /> de Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="4d197-127">Creates and returns a new Visual Basic <see cref="T:Microsoft.VisualBasic.Collection" /> object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4d197-128">La colección de Visual Basic devuelta por este constructor está vacía y no tiene capacidad inicial asignada.</span><span class="sxs-lookup"><span data-stu-id="4d197-128">The Visual Basic collection returned by this constructor is empty and does not have any initial capacity allocated.</span></span>  
  
 <span data-ttu-id="4d197-129">Colecciones de Visual Basic no son compatibles con el [!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)] colecciones disponibles en la <xref:System.Collections?displayProperty=nameWithType>, <xref:System.Collections.Generic?displayProperty=nameWithType>, y <xref:System.Collections.Specialized?displayProperty=nameWithType> los espacios de nombres.</span><span class="sxs-lookup"><span data-stu-id="4d197-129">Visual Basic collections are not compatible with the [!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)] collections available in the <xref:System.Collections?displayProperty=nameWithType>, <xref:System.Collections.Generic?displayProperty=nameWithType>, and <xref:System.Collections.Specialized?displayProperty=nameWithType> namespaces.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4d197-130">En el ejemplo siguiente se crea una nueva colección de Visual Basic y lo asigna a la variable `coll`:</span><span class="sxs-lookup"><span data-stu-id="4d197-130">The following example creates a new Visual Basic collection and assigns it to the variable `coll`:</span></span>  
  
```  
Dim coll As New Microsoft.VisualBasic.Collection()  
```  
  
 <span data-ttu-id="4d197-131">Esto `Collection` objeto está basado en uno, lo que significa que los valores de índice de los elementos están comprendidos entre 1 y el valor de la `Count` propiedad.</span><span class="sxs-lookup"><span data-stu-id="4d197-131">This `Collection` object is one-based, which means that the index values of the elements range from 1 through the value of the `Count` property.</span></span> <span data-ttu-id="4d197-132">Las colecciones de Visual Basic tienen elementos de tipo <xref:System.Object>.</span><span class="sxs-lookup"><span data-stu-id="4d197-132">Visual Basic collections hold elements of type <xref:System.Object>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public void Add (object Item, string Key = null, object Before = null, object After = null);" />
      <MemberSignature Language="ILAsm" Value=".method public instance void Add(object Item, string Key, object Before, object After) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Collection.Add(System.Object,System.String,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Add (Item As Object, Optional Key As String = null, Optional Before As Object = null, Optional After As Object = null)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Item" Type="System.Object" />
        <Parameter Name="Key" Type="System.String" />
        <Parameter Name="Before" Type="System.Object" />
        <Parameter Name="After" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Item"><span data-ttu-id="4d197-133">Obligatorio.</span><span class="sxs-lookup"><span data-stu-id="4d197-133">Required.</span></span> <span data-ttu-id="4d197-134">Objeto de cualquier tipo que especifica el elemento que se va a agregar a la colección.</span><span class="sxs-lookup"><span data-stu-id="4d197-134">An object of any type that specifies the element to add to the collection.</span></span></param>
        <param name="Key"><span data-ttu-id="4d197-135">Opcional.</span><span class="sxs-lookup"><span data-stu-id="4d197-135">Optional.</span></span> <span data-ttu-id="4d197-136">Expresión única de tipo <see langword="String" /> que especifica una cadena de clave que se puede utilizar en lugar de un índice de posición para obtener acceso a este nuevo elemento de la colección.</span><span class="sxs-lookup"><span data-stu-id="4d197-136">A unique <see langword="String" /> expression that specifies a key string that can be used instead of a positional index to access this new element in the collection.</span></span></param>
        <param name="Before"><span data-ttu-id="4d197-137">Opcional.</span><span class="sxs-lookup"><span data-stu-id="4d197-137">Optional.</span></span> <span data-ttu-id="4d197-138">Expresión que especifica una posición relativa en la colección.</span><span class="sxs-lookup"><span data-stu-id="4d197-138">An expression that specifies a relative position in the collection.</span></span> <span data-ttu-id="4d197-139">El elemento que se va a agregar se coloca en la colección delante del elemento identificado por el argumento <c>Before</c>.</span><span class="sxs-lookup"><span data-stu-id="4d197-139">The element to be added is placed in the collection before the element identified by the <c>Before</c> argument.</span></span> <span data-ttu-id="4d197-140">Si <c>Before</c> es una expresión numérica, debe ser un número comprendido entre 1 y el valor de la propiedad <see cref="P:Microsoft.VisualBasic.Collection.Count" /> de la colección.</span><span class="sxs-lookup"><span data-stu-id="4d197-140">If <c>Before</c> is a numeric expression, it must be a number from 1 through the value of the collection's <see cref="P:Microsoft.VisualBasic.Collection.Count" /> property.</span></span> <span data-ttu-id="4d197-141">Si <c>Before</c> es una expresión de tipo <see langword="String" />, debe corresponder a la cadena de clave especificada al agregar a la colección el elemento al que se hace referencia.</span><span class="sxs-lookup"><span data-stu-id="4d197-141">If <c>Before</c> is a <see langword="String" /> expression, it must correspond to the key string specified when the element being referred to was added to the collection.</span></span> <span data-ttu-id="4d197-142">No se pueden especificar los argumentos <c>Before</c> y <c>After</c>.</span><span class="sxs-lookup"><span data-stu-id="4d197-142">You cannot specify both <c>Before</c> and <c>After</c>.</span></span></param>
        <param name="After"><span data-ttu-id="4d197-143">Opcional.</span><span class="sxs-lookup"><span data-stu-id="4d197-143">Optional.</span></span> <span data-ttu-id="4d197-144">Expresión que especifica una posición relativa en la colección.</span><span class="sxs-lookup"><span data-stu-id="4d197-144">An expression that specifies a relative position in the collection.</span></span> <span data-ttu-id="4d197-145">El elemento que se va a agregar se coloca en la colección detrás del elemento identificado por el argumento <c>After</c>.</span><span class="sxs-lookup"><span data-stu-id="4d197-145">The element to be added is placed in the collection after the element identified by the <c>After</c> argument.</span></span> <span data-ttu-id="4d197-146">Si <c>After</c> es una expresión numérica, debe ser un número comprendido entre 1 y el valor de la propiedad <see langword="Count" /> de la colección.</span><span class="sxs-lookup"><span data-stu-id="4d197-146">If <c>After</c> is a numeric expression, it must be a number from 1 through the value of the collection's <see langword="Count" /> property.</span></span> <span data-ttu-id="4d197-147">Si <c>After</c> es una expresión de tipo <see langword="String" />, debe corresponder a la cadena de clave especificada al agregar a la colección el elemento al que se hace referencia.</span><span class="sxs-lookup"><span data-stu-id="4d197-147">If <c>After</c> is a <see langword="String" /> expression, it must correspond to the key string specified when the element referred to was added to the collection.</span></span> <span data-ttu-id="4d197-148">No se pueden especificar los argumentos <c>Before</c> y <c>After</c>.</span><span class="sxs-lookup"><span data-stu-id="4d197-148">You cannot specify both <c>Before</c> and <c>After</c>.</span></span></param>
        <summary><span data-ttu-id="4d197-149">Agrega un elemento a un objeto <see langword="Collection" />.</span><span class="sxs-lookup"><span data-stu-id="4d197-149">Adds an element to a <see langword="Collection" /> object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4d197-150">El `Before` o `After` argumento debe hacer referencia a un elemento existente de la colección; en caso contrario, se produce un error.</span><span class="sxs-lookup"><span data-stu-id="4d197-150">The `Before` or `After` argument must refer to an existing element of the collection; otherwise, an error occurs.</span></span>  
  
 <span data-ttu-id="4d197-151">Si tanto la `Before` y `After` se omiten los argumentos, el nuevo objeto se agrega al final de la colección.</span><span class="sxs-lookup"><span data-stu-id="4d197-151">If both the `Before` and `After` arguments are omitted, the new object is added to the end of the collection.</span></span>  
  
 <span data-ttu-id="4d197-152">También se produce un error si un determinado `Key` valor coincide con la clave de un elemento existente de la colección.</span><span class="sxs-lookup"><span data-stu-id="4d197-152">An error also occurs if a specified `Key` value matches the key for an existing element of the collection.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4d197-153">En el ejemplo siguiente se usa el `Add` método para agregar `child` objetos: instancias de una clase denominada `child` que contiene un `Public` propiedad `name` — a una colección denominada `family`.</span><span class="sxs-lookup"><span data-stu-id="4d197-153">The following example uses the `Add` method to add `child` objects — instances of a class called `child` containing a `Public` property `name` — to a collection called `family`.</span></span> <span data-ttu-id="4d197-154">Para ver cómo funciona esto, cree un <xref:System.Windows.Forms.Form> con dos <xref:System.Windows.Forms.Button> controles y definir sus <xref:System.Windows.Forms.Control.Text%2A> propiedades `Add` y `List`.</span><span class="sxs-lookup"><span data-stu-id="4d197-154">To see how this works, create a <xref:System.Windows.Forms.Form> with two <xref:System.Windows.Forms.Button> controls and set their <xref:System.Windows.Forms.Control.Text%2A> properties to `Add` and `List`.</span></span> <span data-ttu-id="4d197-155">Agregar el `child` definición de clase y el `family` declaración en el código del formulario.</span><span class="sxs-lookup"><span data-stu-id="4d197-155">Add the `child` class definition and the `family` declaration to the form code.</span></span> <span data-ttu-id="4d197-156">Modificar el `_Click` controladores de eventos para el **agregar** y **lista** botones tal como se muestra.</span><span class="sxs-lookup"><span data-stu-id="4d197-156">Modify the `_Click` event handlers for the **Add** and **List** buttons as shown.</span></span> <span data-ttu-id="4d197-157">El **agregar** botón le permite agregar elementos secundarios.</span><span class="sxs-lookup"><span data-stu-id="4d197-157">The **Add** button allows you to add children.</span></span> <span data-ttu-id="4d197-158">El **lista** botón muestra los nombres de todos los elementos secundarios.</span><span class="sxs-lookup"><span data-stu-id="4d197-158">The **List** button displays the names of all the children.</span></span>  
  
 [!code-vb[VbVbalrCollectionObject#2](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCollectionObject/VB/Form1.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Clear">
      <MemberSignature Language="C#" Value="public void Clear ();" />
      <MemberSignature Language="ILAsm" Value=".method public instance void Clear() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Collection.Clear" />
      <MemberSignature Language="VB.NET" Value="Public Sub Clear ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Clear();" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IList.Clear</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="4d197-159">Elimina todos los elementos de un objeto <see langword="Collection" /> de Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="4d197-159">Deletes all elements of a Visual Basic <see langword="Collection" /> object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4d197-160">El `Clear` método vacía la colección y restablece su <xref:Microsoft.VisualBasic.Collection.Count%2A> propiedad en 0.</span><span class="sxs-lookup"><span data-stu-id="4d197-160">The `Clear` method empties the collection and resets its <xref:Microsoft.VisualBasic.Collection.Count%2A> property to 0.</span></span>  
  
   
  
## Examples  
 [!code-vb[VbVbalrCollectionObject#3](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCollectionObject/VB/Class1.vb#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Contains">
      <MemberSignature Language="C#" Value="public bool Contains (string Key);" />
      <MemberSignature Language="ILAsm" Value=".method public instance bool Contains(string Key) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Collection.Contains(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function Contains (Key As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Contains(System::String ^ Key);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Key" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="Key"><span data-ttu-id="4d197-161">Obligatorio.</span><span class="sxs-lookup"><span data-stu-id="4d197-161">Required.</span></span> <span data-ttu-id="4d197-162">Expresión de tipo <see langword="String" /> que especifica la clave que se va a buscar en los elementos de la colección.</span><span class="sxs-lookup"><span data-stu-id="4d197-162">A <see langword="String" /> expression that specifies the key for which to search the elements of the collection.</span></span></param>
        <summary><span data-ttu-id="4d197-163">Devuelve un valor <see langword="Boolean" /> que indica si un objeto <see langword="Collection" /> de Visual Basic contiene un elemento con una clave concreta.</span><span class="sxs-lookup"><span data-stu-id="4d197-163">Returns a <see langword="Boolean" /> value indicating whether a Visual Basic <see langword="Collection" /> object contains an element with a specific key.</span></span></summary>
        <returns><span data-ttu-id="4d197-164">Devuelve un valor <see langword="Boolean" /> que indica si un objeto <see langword="Collection" /> de Visual Basic contiene un elemento con una clave concreta.</span><span class="sxs-lookup"><span data-stu-id="4d197-164">Returns a <see langword="Boolean" /> value indicating whether a Visual Basic <see langword="Collection" /> object contains an element with a specific key.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4d197-165">`Contains` Devuelve `True` si la colección contiene un elemento con una clave que coincide exactamente con `Key`.</span><span class="sxs-lookup"><span data-stu-id="4d197-165">`Contains` returns `True` if the collection contains an element with a key exactly matching `Key`.</span></span> <span data-ttu-id="4d197-166">En caso contrario, `Contains` devuelve `False`.</span><span class="sxs-lookup"><span data-stu-id="4d197-166">Otherwise, `Contains` returns `False`.</span></span> <span data-ttu-id="4d197-167">Mayúsculas y minúsculas se ignoran al comparar los valores de clave.</span><span class="sxs-lookup"><span data-stu-id="4d197-167">Case is ignored when matching key values.</span></span>  
  
 <span data-ttu-id="4d197-168">Un de Visual Basic `Collection` puede contener algunos elementos que tienen claves y otros elementos sin claves.</span><span class="sxs-lookup"><span data-stu-id="4d197-168">A Visual Basic `Collection` can hold some elements that have keys and other elements without keys.</span></span> <span data-ttu-id="4d197-169">Esto depende de si la llamada a la <xref:Microsoft.VisualBasic.Collection.Add%2A> método proporciona un argumento opcional `Key` parámetro.</span><span class="sxs-lookup"><span data-stu-id="4d197-169">This depends on whether the call to the <xref:Microsoft.VisualBasic.Collection.Add%2A> method supplies an argument to the optional `Key` parameter.</span></span>  
  
   
  
## Examples  
 [!code-vb[VbVbalrCollectionObject#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCollectionObject/VB/Class1.vb#4)]  
  
 <span data-ttu-id="4d197-170">Si desea buscar en la colección de elementos mediante sus claves, recuerde que debe proporcionar el `Key` argumento cada vez que se llama a la `Add` método.</span><span class="sxs-lookup"><span data-stu-id="4d197-170">If you intend to search the collection for elements using their keys, remember to supply the `Key` argument every time you call the `Add` method.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Count">
      <MemberSignature Language="C#" Value="public int Count { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Count" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.Collection.Count" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Count As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Count { int get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.ICollection.Count</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="4d197-171">Devuelve un valor <see langword="Integer" /> que contiene el número de elementos de una colección.</span><span class="sxs-lookup"><span data-stu-id="4d197-171">Returns an <see langword="Integer" /> containing the number of elements in a collection.</span></span> <span data-ttu-id="4d197-172">Sólo lectura.</span><span class="sxs-lookup"><span data-stu-id="4d197-172">Read-only.</span></span></summary>
        <value><span data-ttu-id="4d197-173">Devuelve un valor <see langword="Integer" /> que contiene el número de elementos de una colección.</span><span class="sxs-lookup"><span data-stu-id="4d197-173">Returns an <see langword="Integer" /> containing the number of elements in a collection.</span></span> <span data-ttu-id="4d197-174">Sólo lectura.</span><span class="sxs-lookup"><span data-stu-id="4d197-174">Read-only.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4d197-175">Use la `Count` propiedad para determinar el número de elementos de un `Collection` objeto.</span><span class="sxs-lookup"><span data-stu-id="4d197-175">Use the `Count` property to determine the number of elements in a `Collection` object.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4d197-176">Este ejemplo muestra el uso de la `Count` propiedad para mostrar el número de elementos de un <xref:Microsoft.VisualBasic.Collection> objeto en la variable `birthdays`.</span><span class="sxs-lookup"><span data-stu-id="4d197-176">This example illustrates the use of the `Count` property to display the number of elements in a <xref:Microsoft.VisualBasic.Collection> object in the variable `birthdays`.</span></span>  
  
 [!code-vb[VbVbalrCollectionObject#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCollectionObject/VB/Class1.vb#5)]  
[!code-vb[VbVbalrCollectionObject#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCollectionObject/VB/Class1.vb#6)]  
  
 <span data-ttu-id="4d197-177">El `Collection` objeto está basado en uno, lo que significa que los valores de índice de los elementos están comprendidos entre 1 y el valor de la `Count` propiedad.</span><span class="sxs-lookup"><span data-stu-id="4d197-177">The `Collection` object is one-based, which means that the index values of the elements range from 1 through the value of the `Count` property.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetEnumerator">
      <MemberSignature Language="C#" Value="public System.Collections.IEnumerator GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method public instance class System.Collections.IEnumerator GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Collection.GetEnumerator" />
      <MemberSignature Language="VB.NET" Value="Public Function GetEnumerator () As IEnumerator" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::IEnumerator ^ GetEnumerator();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IEnumerator</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="4d197-178">Devuelve una referencia a un objeto del enumerador, que se utiliza para recorrer en iteración un objeto <see cref="T:Microsoft.VisualBasic.Collection" />.</span><span class="sxs-lookup"><span data-stu-id="4d197-178">Returns a reference to an enumerator object, which is used to iterate over a <see cref="T:Microsoft.VisualBasic.Collection" /> object.</span></span></summary>
        <returns><span data-ttu-id="4d197-179">Devuelve una referencia a un objeto del enumerador, que se utiliza para recorrer en iteración un objeto <see cref="T:Microsoft.VisualBasic.Collection" />.</span><span class="sxs-lookup"><span data-stu-id="4d197-179">Returns a reference to an enumerator object, which is used to iterate over a <see cref="T:Microsoft.VisualBasic.Collection" /> object.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4d197-180">El [For Each... Next (instrucción)](~/docs/visual-basic/language-reference/statements/for-each-next-statement.md) llamadas `GetEnumerator` para obtener un objeto de enumerador que admita la iteración sobre los elementos de la colección.</span><span class="sxs-lookup"><span data-stu-id="4d197-180">The [For Each...Next Statement](~/docs/visual-basic/language-reference/statements/for-each-next-statement.md) calls `GetEnumerator` to obtain an enumerator object to support iteration over a collection's elements.</span></span> <span data-ttu-id="4d197-181">Normalmente, se utiliza un `For Each`... `Next` bucle para recorrer una colección o matriz, y no es necesario llamar a `GetEnumerator` explícitamente.</span><span class="sxs-lookup"><span data-stu-id="4d197-181">Normally, you use a `For Each`...`Next` loop to traverse a collection or array, and you do not need to call `GetEnumerator` explicitly.</span></span>  
  
 <span data-ttu-id="4d197-182">Si necesita mayor control sobre la iteración que la `For Each`... `Next` proporcionar instrucciones, puede usar el `GetEnumerator` método para realizar un recorrido personalizado.</span><span class="sxs-lookup"><span data-stu-id="4d197-182">If you need closer control over the iteration than the `For Each`...`Next` statements provide, you can use the `GetEnumerator` method to perform a customized traversal.</span></span> <span data-ttu-id="4d197-183">Éstos son algunos casos en los que tendrá que hacerlo.</span><span class="sxs-lookup"><span data-stu-id="4d197-183">The following are some cases in which you might need to do this.</span></span>  
  
-   <span data-ttu-id="4d197-184">Puede volver al principio de la colección e iniciar la iteración de nuevo antes de que finalice.</span><span class="sxs-lookup"><span data-stu-id="4d197-184">You might want to return to the beginning of the collection and start the iteration again before it is finished.</span></span>  
  
-   <span data-ttu-id="4d197-185">Puede omitir uno o varios elementos por diversos motivos.</span><span class="sxs-lookup"><span data-stu-id="4d197-185">You might want to skip over one or more elements for a variety of reasons.</span></span>  
  
-   <span data-ttu-id="4d197-186">Tendrá que cambiar los elementos de la colección en el medio de un recorrido.</span><span class="sxs-lookup"><span data-stu-id="4d197-186">You might need to change the elements of the collection in the middle of a traversal.</span></span> <span data-ttu-id="4d197-187">En este caso debe obtener un nuevo objeto de enumerador porque el anterior ha quedado invalidado.</span><span class="sxs-lookup"><span data-stu-id="4d197-187">In this case you must obtain a new enumerator object because the previous one is invalidated.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4d197-188">En el ejemplo siguiente se muestra cómo usar `GetEnumerator` para recuperar todos los elementos de un `Collection` objeto.</span><span class="sxs-lookup"><span data-stu-id="4d197-188">The following example shows how to use `GetEnumerator` to retrieve all the elements of a `Collection` object.</span></span>  
  
 [!code-vb[VbVbalrCollectionObject#7](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCollectionObject/VB/Class1.vb#7)]  
  
 <span data-ttu-id="4d197-189">`GetEnumerator` Construye y devuelve un objeto de enumerador que implementa el <xref:System.Collections.IEnumerator> interfaz de la <xref:System.Collections> espacio de nombres.</span><span class="sxs-lookup"><span data-stu-id="4d197-189">`GetEnumerator` constructs and returns an enumerator object, which implements the <xref:System.Collections.IEnumerator> interface of the <xref:System.Collections> namespace.</span></span> <span data-ttu-id="4d197-190">El objeto de enumerador expone la <xref:System.Collections.IEnumerator.Current%2A> propiedad y el <xref:System.Collections.IEnumerator.MoveNext%2A> y <xref:System.Collections.IEnumerator.Reset%2A> métodos.</span><span class="sxs-lookup"><span data-stu-id="4d197-190">The enumerator object exposes the <xref:System.Collections.IEnumerator.Current%2A> property and the <xref:System.Collections.IEnumerator.MoveNext%2A> and <xref:System.Collections.IEnumerator.Reset%2A> methods.</span></span> <span data-ttu-id="4d197-191">Para obtener más información, vea [For Each... Next (instrucción)](~/docs/visual-basic/language-reference/statements/for-each-next-statement.md).</span><span class="sxs-lookup"><span data-stu-id="4d197-191">For more information, see [For Each...Next Statement](~/docs/visual-basic/language-reference/statements/for-each-next-statement.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Item">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="4d197-192">Devuelve un elemento concreto de un objeto <see langword="Collection" /> por posición o por clave.</span><span class="sxs-lookup"><span data-stu-id="4d197-192">Returns a specific element of a <see langword="Collection" /> object either by position or by key.</span></span> <span data-ttu-id="4d197-193">Sólo lectura.</span><span class="sxs-lookup"><span data-stu-id="4d197-193">Read-only.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Item">
      <MemberSignature Language="C#" Value="public object this[int Index] { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object Item(int32)" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.Collection.Item(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Default Public ReadOnly Property Item(Index As Integer) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ default[int] { System::Object ^ get(int Index); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="Index"><span data-ttu-id="4d197-194">(A) Expresión numérica que especifica la posición de un elemento de la colección.</span><span class="sxs-lookup"><span data-stu-id="4d197-194">(A) A numeric expression that specifies the position of an element of the collection.</span></span> <span data-ttu-id="4d197-195"><c>Index</c> debe ser un número comprendido entre 1 y el valor de la propiedad <see cref="P:Microsoft.VisualBasic.Collection.Count" /> de la colección.</span><span class="sxs-lookup"><span data-stu-id="4d197-195"><c>Index</c> must be a number from 1 through the value of the collection's <see cref="P:Microsoft.VisualBasic.Collection.Count" /> property.</span></span> <span data-ttu-id="4d197-196">O bien, (B) Expresión de <see langword="Object" /> que especifica la cadena de posición o de clave de un elemento de la colección.</span><span class="sxs-lookup"><span data-stu-id="4d197-196">Or (B) An <see langword="Object" /> expression that specifies the position or key string of an element of the collection.</span></span></param>
        <summary><span data-ttu-id="4d197-197">Devuelve un elemento concreto de un objeto <see langword="Collection" /> por posición o por clave.</span><span class="sxs-lookup"><span data-stu-id="4d197-197">Returns a specific element of a <see langword="Collection" /> object either by position or by key.</span></span> <span data-ttu-id="4d197-198">Sólo lectura.</span><span class="sxs-lookup"><span data-stu-id="4d197-198">Read-only.</span></span></summary>
        <value><span data-ttu-id="4d197-199">Devuelve un elemento concreto de un objeto <see langword="Collection" /> por posición o por clave.</span><span class="sxs-lookup"><span data-stu-id="4d197-199">Returns a specific element of a <see langword="Collection" /> object either by position or by key.</span></span> <span data-ttu-id="4d197-200">Sólo lectura.</span><span class="sxs-lookup"><span data-stu-id="4d197-200">Read-only.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4d197-201">Si `Index` es de tipo `Object`, `Item` propiedad intenta tratarlo como un `String`, `Char`, `Char` matriz o valor entero.</span><span class="sxs-lookup"><span data-stu-id="4d197-201">If `Index` is of type `Object`, the `Item` property attempts to treat it as a `String`, `Char`, `Char` array, or integer value.</span></span> <span data-ttu-id="4d197-202">Si `Item` no se puede convertir `Index` a `String` o `Integer`, produce un <xref:System.ArgumentException> excepción.</span><span class="sxs-lookup"><span data-stu-id="4d197-202">If `Item` cannot convert `Index` to `String` or `Integer`, it throws an <xref:System.ArgumentException> exception.</span></span>  
  
 <span data-ttu-id="4d197-203">El `Item` propiedad es la propiedad predeterminada de una colección.</span><span class="sxs-lookup"><span data-stu-id="4d197-203">The `Item` property is the default property for a collection.</span></span> <span data-ttu-id="4d197-204">Por lo tanto, las líneas de código siguientes son equivalentes.</span><span class="sxs-lookup"><span data-stu-id="4d197-204">Therefore, the following lines of code are equivalent.</span></span>  
  
```  
MsgBox(CStr(customers.Item(1)))  
MsgBox(CStr(customers(1)))  
```  
  
   
  
## Examples  
 <span data-ttu-id="4d197-205">En el ejemplo siguiente se usa el `Item` propiedad para recuperar una referencia a un objeto de una colección.</span><span class="sxs-lookup"><span data-stu-id="4d197-205">The following example uses the `Item` property to retrieve a reference to an object in a collection.</span></span> <span data-ttu-id="4d197-206">Crea `birthdays` como un `Collection` objeto y, a continuación, recupera el objeto que representa el cumpleaños de Bill, utilizando la clave `"Bill"` como el `Index` argumento.</span><span class="sxs-lookup"><span data-stu-id="4d197-206">It creates `birthdays` as a `Collection` object and then retrieves the object representing Bill's birthday, using the key `"Bill"` as the `Index` argument.</span></span>  
  
 [!code-vb[VbVbalrCollectionObject#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCollectionObject/VB/Class1.vb#5)]  
[!code-vb[VbVbalrCollectionObject#8](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCollectionObject/VB/Class1.vb#8)]  
  
 <span data-ttu-id="4d197-207">Tenga en cuenta que la primera llamada especifica explícitamente la `Item` propiedad, pero el segundo no.</span><span class="sxs-lookup"><span data-stu-id="4d197-207">Note that the first call explicitly specifies the `Item` property, but the second does not.</span></span> <span data-ttu-id="4d197-208">Ambas llamadas funcionan porque la `Item` es la propiedad predeterminada para un `Collection` objeto.</span><span class="sxs-lookup"><span data-stu-id="4d197-208">Both calls work because the `Item` property is the default property for a `Collection` object.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Item">
      <MemberSignature Language="C#" Value="public object this[object Index] { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object Item(object)" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.Collection.Item(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Default Public ReadOnly Property Item(Index As Object) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ default[System::Object ^] { System::Object ^ get(System::Object ^ Index); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Index" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Index"><span data-ttu-id="4d197-209">(A) Expresión numérica que especifica la posición de un elemento de la colección.</span><span class="sxs-lookup"><span data-stu-id="4d197-209">(A) A numeric expression that specifies the position of an element of the collection.</span></span> <span data-ttu-id="4d197-210"><c>Index</c> debe ser un número comprendido entre 1 y el valor de la propiedad <see cref="P:Microsoft.VisualBasic.Collection.Count" /> de la colección.</span><span class="sxs-lookup"><span data-stu-id="4d197-210"><c>Index</c> must be a number from 1 through the value of the collection's <see cref="P:Microsoft.VisualBasic.Collection.Count" /> property.</span></span> <span data-ttu-id="4d197-211">O bien, (B) Expresión de <see langword="Object" /> que especifica la cadena de posición o de clave de un elemento de la colección.</span><span class="sxs-lookup"><span data-stu-id="4d197-211">Or (B) An <see langword="Object" /> expression that specifies the position or key string of an element of the collection.</span></span></param>
        <summary><span data-ttu-id="4d197-212">Devuelve un elemento concreto de un objeto <see langword="Collection" /> por posición o por clave.</span><span class="sxs-lookup"><span data-stu-id="4d197-212">Returns a specific element of a <see langword="Collection" /> object either by position or by key.</span></span> <span data-ttu-id="4d197-213">Sólo lectura.</span><span class="sxs-lookup"><span data-stu-id="4d197-213">Read-only.</span></span></summary>
        <value><span data-ttu-id="4d197-214">Devuelve un elemento concreto de un objeto <see langword="Collection" /> por posición o por clave.</span><span class="sxs-lookup"><span data-stu-id="4d197-214">Returns a specific element of a <see langword="Collection" /> object either by position or by key.</span></span> <span data-ttu-id="4d197-215">Sólo lectura.</span><span class="sxs-lookup"><span data-stu-id="4d197-215">Read-only.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4d197-216">Si `Index` es de tipo `Object`, `Item` propiedad intenta tratarlo como un `String`, `Char`, `Char` matriz o valor entero.</span><span class="sxs-lookup"><span data-stu-id="4d197-216">If `Index` is of type `Object`, the `Item` property attempts to treat it as a `String`, `Char`, `Char` array, or integer value.</span></span> <span data-ttu-id="4d197-217">Si `Item` no se puede convertir `Index` a `String` o `Integer`, produce un <xref:System.ArgumentException> excepción.</span><span class="sxs-lookup"><span data-stu-id="4d197-217">If `Item` cannot convert `Index` to `String` or `Integer`, it throws an <xref:System.ArgumentException> exception.</span></span>  
  
 <span data-ttu-id="4d197-218">El `Item` propiedad es la propiedad predeterminada de una colección.</span><span class="sxs-lookup"><span data-stu-id="4d197-218">The `Item` property is the default property for a collection.</span></span> <span data-ttu-id="4d197-219">Por lo tanto, las líneas de código siguientes son equivalentes.</span><span class="sxs-lookup"><span data-stu-id="4d197-219">Therefore, the following lines of code are equivalent.</span></span>  
  
```  
MsgBox(CStr(customers.Item(1)))  
MsgBox(CStr(customers(1)))  
```  
  
   
  
## Examples  
 <span data-ttu-id="4d197-220">En el ejemplo siguiente se usa el `Item` propiedad para recuperar una referencia a un objeto de una colección.</span><span class="sxs-lookup"><span data-stu-id="4d197-220">The following example uses the `Item` property to retrieve a reference to an object in a collection.</span></span> <span data-ttu-id="4d197-221">Crea `birthdays` como un `Collection` objeto y, a continuación, recupera el objeto que representa el cumpleaños de Bill, utilizando la clave `"Bill"` como el `Index` argumento.</span><span class="sxs-lookup"><span data-stu-id="4d197-221">It creates `birthdays` as a `Collection` object and then retrieves the object representing Bill's birthday, using the key `"Bill"` as the `Index` argument.</span></span>  
  
 [!code-vb[VbVbalrCollectionObject#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCollectionObject/VB/Class1.vb#5)]  
[!code-vb[VbVbalrCollectionObject#8](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCollectionObject/VB/Class1.vb#8)]  
  
 <span data-ttu-id="4d197-222">Tenga en cuenta que la primera llamada especifica explícitamente la `Item` propiedad, pero el segundo no.</span><span class="sxs-lookup"><span data-stu-id="4d197-222">Note that the first call explicitly specifies the `Item` property, but the second does not.</span></span> <span data-ttu-id="4d197-223">Ambas llamadas funcionan porque la `Item` es la propiedad predeterminada para un `Collection` objeto.</span><span class="sxs-lookup"><span data-stu-id="4d197-223">Both calls work because the `Item` property is the default property for a `Collection` object.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Item">
      <MemberSignature Language="C#" Value="public object this[string Key] { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object Item(string)" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.Collection.Item(System.String)" />
      <MemberSignature Language="VB.NET" Value="Default Public ReadOnly Property Item(Key As String) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ default[System::String ^] { System::Object ^ get(System::String ^ Key); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Key" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="Key"><span data-ttu-id="4d197-224">Expresión única de tipo <see langword="String" /> que especifica una cadena de clave que se puede utilizar, en lugar de un índice de posición, para obtener acceso a un elemento de la colección.</span><span class="sxs-lookup"><span data-stu-id="4d197-224">A unique <see langword="String" /> expression that specifies a key string that can be used, instead of a positional index, to access an element of the collection.</span></span> <span data-ttu-id="4d197-225"><c>Key</c> tiene que corresponder al argumento de <c>Key</c> especificado al agregar el elemento a la colección.</span><span class="sxs-lookup"><span data-stu-id="4d197-225"><c>Key</c> must correspond to the <c>Key</c> argument specified when the element was added to the collection.</span></span></param>
        <summary><span data-ttu-id="4d197-226">Devuelve un elemento concreto de un objeto <see langword="Collection" /> por posición o por clave.</span><span class="sxs-lookup"><span data-stu-id="4d197-226">Returns a specific element of a <see langword="Collection" /> object either by position or by key.</span></span> <span data-ttu-id="4d197-227">Sólo lectura.</span><span class="sxs-lookup"><span data-stu-id="4d197-227">Read-only.</span></span></summary>
        <value><span data-ttu-id="4d197-228">Devuelve un elemento concreto de un objeto <see langword="Collection" /> por posición o por clave.</span><span class="sxs-lookup"><span data-stu-id="4d197-228">Returns a specific element of a <see langword="Collection" /> object either by position or by key.</span></span> <span data-ttu-id="4d197-229">Sólo lectura.</span><span class="sxs-lookup"><span data-stu-id="4d197-229">Read-only.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4d197-230">Si `Index` es de tipo `Object`, `Item` propiedad intenta tratarlo como un `String`, `Char`, `Char` matriz o valor entero.</span><span class="sxs-lookup"><span data-stu-id="4d197-230">If `Index` is of type `Object`, the `Item` property attempts to treat it as a `String`, `Char`, `Char` array, or integer value.</span></span> <span data-ttu-id="4d197-231">Si `Item` no se puede convertir `Index` a `String` o `Integer`, produce un <xref:System.ArgumentException> excepción.</span><span class="sxs-lookup"><span data-stu-id="4d197-231">If `Item` cannot convert `Index` to `String` or `Integer`, it throws an <xref:System.ArgumentException> exception.</span></span>  
  
 <span data-ttu-id="4d197-232">El `Item` propiedad es la propiedad predeterminada de una colección.</span><span class="sxs-lookup"><span data-stu-id="4d197-232">The `Item` property is the default property for a collection.</span></span> <span data-ttu-id="4d197-233">Por lo tanto, las líneas de código siguientes son equivalentes.</span><span class="sxs-lookup"><span data-stu-id="4d197-233">Therefore, the following lines of code are equivalent.</span></span>  
  
```  
MsgBox(CStr(customers.Item(1)))  
MsgBox(CStr(customers(1)))  
```  
  
   
  
## Examples  
 <span data-ttu-id="4d197-234">En el ejemplo siguiente se usa el `Item` propiedad para recuperar una referencia a un objeto de una colección.</span><span class="sxs-lookup"><span data-stu-id="4d197-234">The following example uses the `Item` property to retrieve a reference to an object in a collection.</span></span> <span data-ttu-id="4d197-235">Crea `birthdays` como un `Collection` objeto y, a continuación, recupera el objeto que representa el cumpleaños de Bill, utilizando la clave `"Bill"` como el `Index` argumento.</span><span class="sxs-lookup"><span data-stu-id="4d197-235">It creates `birthdays` as a `Collection` object and then retrieves the object representing Bill's birthday, using the key `"Bill"` as the `Index` argument.</span></span>  
  
 [!code-vb[VbVbalrCollectionObject#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCollectionObject/VB/Class1.vb#5)]  
[!code-vb[VbVbalrCollectionObject#8](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCollectionObject/VB/Class1.vb#8)]  
  
 <span data-ttu-id="4d197-236">Tenga en cuenta que la primera llamada especifica explícitamente la `Item` propiedad, pero el segundo no.</span><span class="sxs-lookup"><span data-stu-id="4d197-236">Note that the first call explicitly specifies the `Item` property, but the second does not.</span></span> <span data-ttu-id="4d197-237">Ambas llamadas funcionan porque la `Item` es la propiedad predeterminada para un `Collection` objeto.</span><span class="sxs-lookup"><span data-stu-id="4d197-237">Both calls work because the `Item` property is the default property for a `Collection` object.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Remove">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="4d197-238">Quita un elemento de un objeto <see langword="Collection" />.</span><span class="sxs-lookup"><span data-stu-id="4d197-238">Removes an element from a <see langword="Collection" /> object.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Remove">
      <MemberSignature Language="C#" Value="public void Remove (int Index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Remove(int32 Index) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Collection.Remove(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Remove (Index As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Remove(int Index);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="Index"><span data-ttu-id="4d197-239">Expresión numérica que especifica la posición de un elemento de la colección.</span><span class="sxs-lookup"><span data-stu-id="4d197-239">A numeric expression that specifies the position of an element of the collection.</span></span> <span data-ttu-id="4d197-240"><c>Index</c> debe ser un número comprendido entre 1 y el valor de la propiedad <see cref="P:Microsoft.VisualBasic.Collection.Count" /> de la colección.</span><span class="sxs-lookup"><span data-stu-id="4d197-240"><c>Index</c> must be a number from 1 through the value of the collection's <see cref="P:Microsoft.VisualBasic.Collection.Count" /> property.</span></span></param>
        <summary><span data-ttu-id="4d197-241">Quita un elemento de un objeto <see langword="Collection" />.</span><span class="sxs-lookup"><span data-stu-id="4d197-241">Removes an element from a <see langword="Collection" /> object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4d197-242">Cuando `Remove` elimina un elemento de una colección, se reduce la colección <xref:Microsoft.VisualBasic.Collection.Count%2A> propiedad en uno.</span><span class="sxs-lookup"><span data-stu-id="4d197-242">When `Remove` deletes an element from a collection, it decrements the collection's <xref:Microsoft.VisualBasic.Collection.Count%2A> property by one.</span></span> <span data-ttu-id="4d197-243">Se reduce también la `Index` valor de cada elemento que seguía antes al elemento eliminado en la colección.</span><span class="sxs-lookup"><span data-stu-id="4d197-243">It also decrements the `Index` value of every element that formerly followed the deleted element in the collection.</span></span>  
  
 <span data-ttu-id="4d197-244">Si un elemento se agregó a la colección sin un `Key`, debe utilizar su `Index` para quitarlo.</span><span class="sxs-lookup"><span data-stu-id="4d197-244">If an element was added to the collection without a `Key`, you must use its `Index` to remove it.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4d197-245">Este ejemplo muestra el uso de la `Remove` método para quitar objetos de un <xref:Microsoft.VisualBasic.Collection> objeto en la variable `birthdays`.</span><span class="sxs-lookup"><span data-stu-id="4d197-245">This example illustrates the use of the `Remove` method to remove objects from a <xref:Microsoft.VisualBasic.Collection> object in the variable `birthdays`.</span></span>  
  
 [!code-vb[VbVbalrCollectionObject#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCollectionObject/VB/Class1.vb#5)]  
[!code-vb[VbVbalrCollectionObject#9](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCollectionObject/VB/Class1.vb#9)]  
  
 <span data-ttu-id="4d197-246">Después de las cuatro llamadas a la `Add` método, el `Count` propiedad contiene 4, elemento `"Bill"` tiene el valor de índice 1 y el elemento `"Pete"` tiene el valor de índice 4.</span><span class="sxs-lookup"><span data-stu-id="4d197-246">Following the four calls to the `Add` method, the `Count` property contains 4, element `"Bill"` has index value 1, and element `"Pete"` has index value 4.</span></span>  
  
 <span data-ttu-id="4d197-247">Después de la primera llamada a `Remove`, `Count` es 3, elemento `"Bill"` se elimina y el elemento `"Pete"` tiene el valor de índice 3.</span><span class="sxs-lookup"><span data-stu-id="4d197-247">Following the first call to `Remove`, `Count` is 3, element `"Bill"` is deleted, and element `"Pete"` has index value 3.</span></span>  
  
 <span data-ttu-id="4d197-248">Después de la segunda llamada a `Remove`, `Count` es 2, elemento `"Mike"` se elimina y el elemento `"Pete"` tiene el valor de índice 2.</span><span class="sxs-lookup"><span data-stu-id="4d197-248">Following the second call to `Remove`, `Count` is 2, element `"Mike"` is deleted, and element `"Pete"` has index value 2.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Remove">
      <MemberSignature Language="C#" Value="public void Remove (string Key);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Remove(string Key) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Collection.Remove(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Remove (Key As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Remove(System::String ^ Key);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Key" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="Key"><span data-ttu-id="4d197-249">Expresión única de tipo <see langword="String" /> que especifica una cadena de clave que se puede utilizar, en lugar de un índice de posición, para obtener acceso a un elemento de la colección.</span><span class="sxs-lookup"><span data-stu-id="4d197-249">A unique <see langword="String" /> expression that specifies a key string that can be used, instead of a positional index, to access an element of the collection.</span></span> <span data-ttu-id="4d197-250"><c>Key</c> tiene que corresponder al argumento de <c>Key</c> especificado al agregar el elemento a la colección.</span><span class="sxs-lookup"><span data-stu-id="4d197-250"><c>Key</c> must correspond to the <c>Key</c> argument specified when the element was added to the collection.</span></span></param>
        <summary><span data-ttu-id="4d197-251">Quita un elemento de un objeto <see langword="Collection" />.</span><span class="sxs-lookup"><span data-stu-id="4d197-251">Removes an element from a <see langword="Collection" /> object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4d197-252">Cuando `Remove` elimina un elemento de una colección, se reduce la colección <xref:Microsoft.VisualBasic.Collection.Count%2A> propiedad en uno.</span><span class="sxs-lookup"><span data-stu-id="4d197-252">When `Remove` deletes an element from a collection, it decrements the collection's <xref:Microsoft.VisualBasic.Collection.Count%2A> property by one.</span></span> <span data-ttu-id="4d197-253">Se reduce también la `Index` valor de cada elemento que seguía antes al elemento eliminado en la colección.</span><span class="sxs-lookup"><span data-stu-id="4d197-253">It also decrements the `Index` value of every element that formerly followed the deleted element in the collection.</span></span>  
  
 <span data-ttu-id="4d197-254">Si un elemento se agregó a la colección sin un `Key`, debe utilizar su `Index` para quitarlo.</span><span class="sxs-lookup"><span data-stu-id="4d197-254">If an element was added to the collection without a `Key`, you must use its `Index` to remove it.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4d197-255">Este ejemplo muestra el uso de la `Remove` método para quitar objetos de un <xref:Microsoft.VisualBasic.Collection> objeto en la variable `birthdays`.</span><span class="sxs-lookup"><span data-stu-id="4d197-255">This example illustrates the use of the `Remove` method to remove objects from a <xref:Microsoft.VisualBasic.Collection> object in the variable `birthdays`.</span></span>  
  
 [!code-vb[VbVbalrCollectionObject#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCollectionObject/VB/Class1.vb#5)]  
[!code-vb[VbVbalrCollectionObject#9](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCollectionObject/VB/Class1.vb#9)]  
  
 <span data-ttu-id="4d197-256">Después de las cuatro llamadas a la `Add` método, el `Count` propiedad contiene 4, elemento `"Bill"` tiene el valor de índice 1 y el elemento `"Pete"` tiene el valor de índice 4.</span><span class="sxs-lookup"><span data-stu-id="4d197-256">Following the four calls to the `Add` method, the `Count` property contains 4, element `"Bill"` has index value 1, and element `"Pete"` has index value 4.</span></span>  
  
 <span data-ttu-id="4d197-257">Después de la primera llamada a `Remove`, `Count` es 3, elemento `"Bill"` se elimina y el elemento `"Pete"` tiene el valor de índice 3.</span><span class="sxs-lookup"><span data-stu-id="4d197-257">Following the first call to `Remove`, `Count` is 3, element `"Bill"` is deleted, and element `"Pete"` has index value 3.</span></span>  
  
 <span data-ttu-id="4d197-258">Después de la segunda llamada a `Remove`, `Count` es 2, elemento `"Mike"` se elimina y el elemento `"Pete"` tiene el valor de índice 2.</span><span class="sxs-lookup"><span data-stu-id="4d197-258">Following the second call to `Remove`, `Count` is 2, element `"Mike"` is deleted, and element `"Pete"` has index value 2.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.ICollection.CopyTo">
      <MemberSignature Language="C#" Value="void ICollection.CopyTo (Array array, int index);" />
      <MemberSignature Language="ILAsm" Value=".method newslot virtual instance void ICollectionCopyTo(class System.Array array, int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Collection.ICollectionCopyTo(System.Array,System.Int32)" />
      <MemberSignature Language="C++ CLI" Value=" virtual void ICollectionCopyTo(Array ^ array, int index) = System::Collections::ICollection::CopyTo;" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="array" Type="System.Array" />
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="array"><span data-ttu-id="4d197-259"><see cref="T:System.Array" /> unidimensional que constituye el destino de los elementos copiados desde el objeto <see cref="T:Microsoft.VisualBasic.Collection" />.</span><span class="sxs-lookup"><span data-stu-id="4d197-259">The one-dimensional <see cref="T:System.Array" /> that is the destination of the elements copied from <see cref="T:Microsoft.VisualBasic.Collection" /> object.</span></span> <span data-ttu-id="4d197-260">La matriz <see cref="T:System.Array" /> debe tener una indización de base cero.</span><span class="sxs-lookup"><span data-stu-id="4d197-260">The <see cref="T:System.Array" /> must have zero-based indexing.</span></span></param>
        <param name="index"><span data-ttu-id="4d197-261">Índice de base cero de <c>array</c> donde comienza la copia.</span><span class="sxs-lookup"><span data-stu-id="4d197-261">The zero-based index in <c>array</c> at which copying begins.</span></span></param>
        <summary><span data-ttu-id="4d197-262">Copia los elementos de <see cref="T:Microsoft.VisualBasic.Collection" /> en <see cref="T:System.Array" />, empezando por un índice determinado de <see cref="T:System.Array" />.</span><span class="sxs-lookup"><span data-stu-id="4d197-262">Copies the elements of the <see cref="T:Microsoft.VisualBasic.Collection" /> to an <see cref="T:System.Array" />, starting at a particular <see cref="T:System.Array" /> index.</span></span> <span data-ttu-id="4d197-263">Implementa la interfaz <see cref="T:System.Collections.ICollection" />.</span><span class="sxs-lookup"><span data-stu-id="4d197-263">Implements the <see cref="T:System.Collections.ICollection" /> interface.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4d197-264">Los elementos se copian en el <xref:System.Array> en el mismo orden en el que el enumerador recorre en iteración la <xref:Microsoft.VisualBasic.Collection> objeto.</span><span class="sxs-lookup"><span data-stu-id="4d197-264">The elements are copied to the <xref:System.Array> in the same order in which the enumerator iterates through the <xref:Microsoft.VisualBasic.Collection> object.</span></span>  
  
 <span data-ttu-id="4d197-265">Este método es una O (`n`) operación, donde `n` se obtiene de la <xref:Microsoft.VisualBasic.Collection.System%23Collections%23ICollection%23Count>.</span><span class="sxs-lookup"><span data-stu-id="4d197-265">This method is an O(`n`) operation, where `n` is obtained from the <xref:Microsoft.VisualBasic.Collection.System%23Collections%23ICollection%23Count>.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="4d197-266"><paramref name="array" /> es <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="4d197-266"><paramref name="array" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="4d197-267"><paramref name="index" /> es menor que cero.</span><span class="sxs-lookup"><span data-stu-id="4d197-267"><paramref name="index" /> is less than zero.</span></span></exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="4d197-268"><paramref name="array" /> es multidimensional.</span><span class="sxs-lookup"><span data-stu-id="4d197-268"><paramref name="array" /> is multidimensional.</span></span>  
  
 <span data-ttu-id="4d197-269">O bien</span><span class="sxs-lookup"><span data-stu-id="4d197-269">-or-</span></span>  
  
 <span data-ttu-id="4d197-270">El número de elementos del objeto <see cref="T:Microsoft.VisualBasic.Collection" /> de origen es mayor que el espacio disponible desde <paramref name="index" /> hasta el final del parámetro <paramref name="array" /> de destino.</span><span class="sxs-lookup"><span data-stu-id="4d197-270">The number of elements in the source <see cref="T:Microsoft.VisualBasic.Collection" /> object is greater than the available space from <paramref name="index" /> to the end of the destination <paramref name="array" />.</span></span></exception>
        <exception cref="T:System.InvalidCastException"><span data-ttu-id="4d197-271">El tipo del objeto <see cref="T:Microsoft.VisualBasic.Collection" /> de origen no puede convertirse automáticamente en el tipo de <paramref name="array" /> de destino.</span><span class="sxs-lookup"><span data-stu-id="4d197-271">The type of the source <see cref="T:Microsoft.VisualBasic.Collection" /> object cannot be cast automatically to the type of the destination <paramref name="array" />.</span></span></exception>
        <altmember cref="T:Microsoft.VisualBasic.Collection" />
        <altmember cref="T:System.Collections.ICollection" />
        <altmember cref="M:System.Collections.ICollection.CopyTo(System.Array,System.Int32)" />
        <altmember cref="T:System.Array" />
      </Docs>
    </Member>
    <Member MemberName="System.Collections.ICollection.ICollectionCount">
      <MemberSignature Language="C#" Value="int System.Collections.ICollection.ICollectionCount { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 ICollectionCount" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.Collection.ICollectionCount" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property ICollectionCount As Integer Implements ICollection.ICollectionCount" />
      <MemberSignature Language="C++ CLI" Value="property int System.Collections.ICollection.ICollectionCount { int get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.ICollection.ICollectionIsSynchronized">
      <MemberSignature Language="C#" Value="bool System.Collections.ICollection.ICollectionIsSynchronized { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ICollectionIsSynchronized" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.Collection.ICollectionIsSynchronized" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property ICollectionIsSynchronized As Boolean Implements ICollection.ICollectionIsSynchronized" />
      <MemberSignature Language="C++ CLI" Value="property bool System.Collections.ICollection.ICollectionIsSynchronized { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.ICollection.ICollectionSyncRoot">
      <MemberSignature Language="C#" Value="object System.Collections.ICollection.ICollectionSyncRoot { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object ICollectionSyncRoot" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.Collection.ICollectionSyncRoot" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property ICollectionSyncRoot As Object Implements ICollection.ICollectionSyncRoot" />
      <MemberSignature Language="C++ CLI" Value="property System::Object ^ System.Collections.ICollection.ICollectionSyncRoot { System::Object ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IEnumerable.GetEnumerator">
      <MemberSignature Language="C#" Value="System.Collections.IEnumerator IEnumerable.GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method newslot virtual instance class System.Collections.IEnumerator ICollectionGetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Collection.ICollectionGetEnumerator" />
      <MemberSignature Language="VB.NET" Value="Function ICollectionGetEnumerator () As IEnumerator Implements IEnumerable.GetEnumerator" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Collections::IEnumerator ^ ICollectionGetEnumerator() = System::Collections::IEnumerable::GetEnumerator;" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IEnumerator</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="4d197-272">Devuelve un enumerador que procesa una iteración en la colección.</span><span class="sxs-lookup"><span data-stu-id="4d197-272">Returns an enumerator that iterates through the collection.</span></span> <span data-ttu-id="4d197-273">Implementa la interfaz <see cref="T:System.Collections.ICollection" />.</span><span class="sxs-lookup"><span data-stu-id="4d197-273">Implements the <see cref="T:System.Collections.ICollection" /> interface.</span></span></summary>
        <returns><span data-ttu-id="4d197-274">Objeto <see cref="T:System.Collections.IEnumerator" /> que puede usarse para recorrer en iteración la colección.</span><span class="sxs-lookup"><span data-stu-id="4d197-274">An <see cref="T:System.Collections.IEnumerator" /> object that can be used to iterate through the collection.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4d197-275">[Visual Basic, C#]</span><span class="sxs-lookup"><span data-stu-id="4d197-275">[Visual Basic, C#]</span></span>  
  
 <span data-ttu-id="4d197-276">La instrucción `foreach` del lenguaje C# (`for each` en Visual Basic) oculta la complejidad de los enumeradores.</span><span class="sxs-lookup"><span data-stu-id="4d197-276">The `foreach` statement of the C# language (`for each` in Visual Basic) hides the complexity of the enumerators.</span></span> <span data-ttu-id="4d197-277">Por lo tanto, se recomienda el uso de `foreach`, en lugar de manipular directamente el enumerador.</span><span class="sxs-lookup"><span data-stu-id="4d197-277">Therefore, using `foreach` is recommended, instead of directly manipulating the enumerator.</span></span>  
  
 <span data-ttu-id="4d197-278">Los enumeradores pueden usarse para leer los datos de la colección, pero no para modificar la colección subyacente.</span><span class="sxs-lookup"><span data-stu-id="4d197-278">Enumerators can be used to read the data in the collection, but they cannot be used to modify the underlying collection.</span></span>  
  
 <span data-ttu-id="4d197-279">En principio, el enumerador se coloca antes del primer elemento de la colección.</span><span class="sxs-lookup"><span data-stu-id="4d197-279">Initially, the enumerator is positioned before the first element in the collection.</span></span> <span data-ttu-id="4d197-280">El <xref:System.Collections.IEnumerator.Reset%2A> método también devuelve el enumerador a esta posición.</span><span class="sxs-lookup"><span data-stu-id="4d197-280">The <xref:System.Collections.IEnumerator.Reset%2A> method also brings the enumerator back to this position.</span></span> <span data-ttu-id="4d197-281">En esta posición, el <xref:System.Collections.IEnumerator.Current%2A> propiedad no está definida.</span><span class="sxs-lookup"><span data-stu-id="4d197-281">At this position, the <xref:System.Collections.IEnumerator.Current%2A> property is undefined.</span></span> <span data-ttu-id="4d197-282">Por lo tanto, debe llamar a la <xref:System.Collections.IEnumerator.MoveNext%2A> método para adelantar el enumerador hasta el primer elemento de la colección antes de leer el valor de <xref:System.Collections.IEnumerator.Current%2A>.</span><span class="sxs-lookup"><span data-stu-id="4d197-282">Therefore, you must call the <xref:System.Collections.IEnumerator.MoveNext%2A> method to advance the enumerator to the first element of the collection before reading the value of <xref:System.Collections.IEnumerator.Current%2A>.</span></span>  
  
 <span data-ttu-id="4d197-283"><xref:System.Collections.IEnumerator.Current%2A> devuelve el mismo objeto hasta que se llama a <xref:System.Collections.IEnumerator.MoveNext%2A> o a <xref:System.Collections.IEnumerator.Reset%2A>.</span><span class="sxs-lookup"><span data-stu-id="4d197-283"><xref:System.Collections.IEnumerator.Current%2A> returns the same object until either <xref:System.Collections.IEnumerator.MoveNext%2A> or <xref:System.Collections.IEnumerator.Reset%2A> is called.</span></span> <span data-ttu-id="4d197-284"><xref:System.Collections.IEnumerator.MoveNext%2A> establece <xref:System.Collections.IEnumerator.Current%2A> en el siguiente elemento.</span><span class="sxs-lookup"><span data-stu-id="4d197-284"><xref:System.Collections.IEnumerator.MoveNext%2A> sets <xref:System.Collections.IEnumerator.Current%2A> to the next element.</span></span>  
  
 <span data-ttu-id="4d197-285">Si <xref:System.Collections.IEnumerator.MoveNext%2A> pasa el final de la colección, el enumerador se coloca después del último elemento de la colección y <xref:System.Collections.IEnumerator.MoveNext%2A> devuelve `false`.</span><span class="sxs-lookup"><span data-stu-id="4d197-285">If <xref:System.Collections.IEnumerator.MoveNext%2A> passes the end of the collection, the enumerator is positioned after the last element in the collection and <xref:System.Collections.IEnumerator.MoveNext%2A> returns `false`.</span></span> <span data-ttu-id="4d197-286">Mientras el enumerador permanezca en esta posición, las llamadas subsiguientes a <xref:System.Collections.IEnumerator.MoveNext%2A> también devolver `false`.</span><span class="sxs-lookup"><span data-stu-id="4d197-286">When the enumerator is at this position, subsequent calls to <xref:System.Collections.IEnumerator.MoveNext%2A> also return `false`.</span></span> <span data-ttu-id="4d197-287">Si la última llamada a <xref:System.Collections.IEnumerator.MoveNext%2A> devuelve `false`, <xref:System.Collections.IEnumerator.Current%2A> no está definido.</span><span class="sxs-lookup"><span data-stu-id="4d197-287">If the last call to <xref:System.Collections.IEnumerator.MoveNext%2A> returns `false`, <xref:System.Collections.IEnumerator.Current%2A> is undefined.</span></span> <span data-ttu-id="4d197-288">Para volver a establecer el valor de <xref:System.Collections.IEnumerator.Current%2A> en el primer elemento de la colección, se puede llamar primero a <xref:System.Collections.IEnumerator.Reset%2A> y después a <xref:System.Collections.IEnumerator.MoveNext%2A>.</span><span class="sxs-lookup"><span data-stu-id="4d197-288">To set <xref:System.Collections.IEnumerator.Current%2A> to the first element of the collection again, you can call <xref:System.Collections.IEnumerator.Reset%2A> followed by <xref:System.Collections.IEnumerator.MoveNext%2A>.</span></span>  
  
 <span data-ttu-id="4d197-289">Un enumerador es válido mientras la colección no cambie.</span><span class="sxs-lookup"><span data-stu-id="4d197-289">An enumerator remains valid as long as the collection remains unchanged.</span></span> <span data-ttu-id="4d197-290">Si se hacen cambios en la colección (como agregar, modificar o eliminar elementos), el enumerador queda invalidado permanentemente y su comportamiento es indefinido.</span><span class="sxs-lookup"><span data-stu-id="4d197-290">If changes are made to the collection, such as adding, modifying, or deleting elements, the enumerator is irrecoverably invalidated and its behavior is undefined.</span></span>  
  
 <span data-ttu-id="4d197-291">El enumerador no tiene acceso exclusivo a la colección y, por tanto, la enumeración en una colección no es intrínsicamente un procedimiento seguro para subprocesos.</span><span class="sxs-lookup"><span data-stu-id="4d197-291">The enumerator does not have exclusive access to the collection; therefore, enumerating through a collection is intrinsically not a thread-safe procedure.</span></span> <span data-ttu-id="4d197-292">A fin de garantizar la seguridad de los subprocesos, se puede bloquear la colección durante toda la enumeración.</span><span class="sxs-lookup"><span data-stu-id="4d197-292">To guarantee thread safety during enumeration, you can lock the collection during the entire enumeration.</span></span> <span data-ttu-id="4d197-293">Para permitir que varios subprocesos obtengan acceso de lectura y escritura a la colección, debe implementar su propia sincronización.</span><span class="sxs-lookup"><span data-stu-id="4d197-293">To allow the collection to be accessed by multiple threads for reading and writing, you must implement your own synchronization.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:Microsoft.VisualBasic.Collection" />
        <altmember cref="T:System.Collections.ICollection" />
        <altmember cref="T:System.Collections.IEnumerable" />
        <altmember cref="M:System.Collections.IEnumerable.GetEnumerator" />
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.Add">
      <MemberSignature Language="C#" Value="int IList.Add (object value);" />
      <MemberSignature Language="ILAsm" Value=".method newslot virtual instance int32 IListAdd(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Collection.IListAdd(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Function IListAdd (value As Object) As Integer Implements IList.Add" />
      <MemberSignature Language="C++ CLI" Value=" virtual int IListAdd(System::Object ^ value) = System::Collections::IList::Add;" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="4d197-294">Clase <see cref="T:System.Object" /> que va a agregarse al objeto <see cref="T:Microsoft.VisualBasic.Collection" />.</span><span class="sxs-lookup"><span data-stu-id="4d197-294">The <see cref="T:System.Object" /> to add to the <see cref="T:Microsoft.VisualBasic.Collection" /> object.</span></span></param>
        <summary><span data-ttu-id="4d197-295">Agrega un elemento al objeto <see cref="T:Microsoft.VisualBasic.Collection" />.</span><span class="sxs-lookup"><span data-stu-id="4d197-295">Adds an item to the <see cref="T:Microsoft.VisualBasic.Collection" /> object.</span></span> <span data-ttu-id="4d197-296">Implementa la interfaz <see cref="T:System.Collections.IList" />.</span><span class="sxs-lookup"><span data-stu-id="4d197-296">Implements the <see cref="T:System.Collections.IList" /> interface.</span></span></summary>
        <returns><span data-ttu-id="4d197-297">Posición en la que se insertó el nuevo elemento.</span><span class="sxs-lookup"><span data-stu-id="4d197-297">The position into which the new element was inserted.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4d197-298">También puede usar el <xref:Microsoft.VisualBasic.Collection.Item%2A> propiedad para agregar nuevos elementos estableciendo el valor de una clave que no existe en el <xref:Microsoft.VisualBasic.Collection> objeto.</span><span class="sxs-lookup"><span data-stu-id="4d197-298">You can also use the <xref:Microsoft.VisualBasic.Collection.Item%2A> property to add new elements by setting the value of a key that does not exist in the <xref:Microsoft.VisualBasic.Collection> object.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="4d197-299">El objeto <see cref="T:Microsoft.VisualBasic.Collection" /> es de solo lectura.</span><span class="sxs-lookup"><span data-stu-id="4d197-299">The <see cref="T:Microsoft.VisualBasic.Collection" /> object is read-only.</span></span>  
  
 <span data-ttu-id="4d197-300">O bien</span><span class="sxs-lookup"><span data-stu-id="4d197-300">-or-</span></span>  
  
 <span data-ttu-id="4d197-301">El objeto <see cref="T:Microsoft.VisualBasic.Collection" /> tiene un tamaño fijo.</span><span class="sxs-lookup"><span data-stu-id="4d197-301">The <see cref="T:Microsoft.VisualBasic.Collection" /> object has a fixed size.</span></span></exception>
        <altmember cref="T:Microsoft.VisualBasic.Collection" />
        <altmember cref="T:System.Collections.IList" />
        <altmember cref="M:System.Collections.IList.Add(System.Object)" />
        <altmember cref="P:Microsoft.VisualBasic.Collection.Item(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.Clear">
      <MemberSignature Language="C#" Value="void IList.Clear ();" />
      <MemberSignature Language="ILAsm" Value=".method newslot virtual instance void IListClear() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Collection.IListClear" />
      <MemberSignature Language="VB.NET" Value="Sub IListClear () Implements IList.Clear" />
      <MemberSignature Language="C++ CLI" Value=" virtual void IListClear() = System::Collections::IList::Clear;" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="4d197-302">Quita todos los elementos del objeto <see cref="T:Microsoft.VisualBasic.Collection" />.</span><span class="sxs-lookup"><span data-stu-id="4d197-302">Removes all items from the <see cref="T:Microsoft.VisualBasic.Collection" /> object.</span></span> <span data-ttu-id="4d197-303">Implementa la interfaz <see cref="T:System.Collections.IList" />.</span><span class="sxs-lookup"><span data-stu-id="4d197-303">Implements the <see cref="T:System.Collections.IList" /> interface.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4d197-304">Este método quita todos los elementos de la <xref:Microsoft.VisualBasic.Collection> objeto.</span><span class="sxs-lookup"><span data-stu-id="4d197-304">This method removes all items from the <xref:Microsoft.VisualBasic.Collection> object.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="4d197-305"><see cref="T:System.Collections.IList" /> es de solo lectura.</span><span class="sxs-lookup"><span data-stu-id="4d197-305">The <see cref="T:System.Collections.IList" /> is read-only.</span></span></exception>
        <altmember cref="T:Microsoft.VisualBasic.Collection" />
        <altmember cref="T:System.Collections.IList" />
        <altmember cref="M:System.Collections.Hashtable.Clear" />
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.Contains">
      <MemberSignature Language="C#" Value="bool IList.Contains (object value);" />
      <MemberSignature Language="ILAsm" Value=".method newslot virtual instance bool IListContains(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Collection.IListContains(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Function IListContains (value As Object) As Boolean Implements IList.Contains" />
      <MemberSignature Language="C++ CLI" Value=" virtual bool IListContains(System::Object ^ value) = System::Collections::IList::Contains;" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="4d197-306">Objeto <see cref="T:System.Object" /> que se va a buscar en <see cref="T:Microsoft.VisualBasic.Collection" />.</span><span class="sxs-lookup"><span data-stu-id="4d197-306">The <see cref="T:System.Object" /> to locate in the <see cref="T:Microsoft.VisualBasic.Collection" /> object.</span></span></param>
        <summary><span data-ttu-id="4d197-307">Determina si el objeto <see cref="T:Microsoft.VisualBasic.Collection" /> contiene un valor específico.</span><span class="sxs-lookup"><span data-stu-id="4d197-307">Determines whether the <see cref="T:Microsoft.VisualBasic.Collection" /> object contains a specific value.</span></span> <span data-ttu-id="4d197-308">Implementa la interfaz <see cref="T:System.Collections.IList" />.</span><span class="sxs-lookup"><span data-stu-id="4d197-308">Implements the <see cref="T:System.Collections.IList" /> interface.</span></span></summary>
        <returns><span data-ttu-id="4d197-309">Devuelve <see langword="True" /> si se encuentra <see cref="T:System.Object" /> en el objeto <see cref="T:Microsoft.VisualBasic.Collection" />; de lo contrario, devuelve <see langword="False" />.</span><span class="sxs-lookup"><span data-stu-id="4d197-309">Returns <see langword="True" /> if the <see cref="T:System.Object" /> is found in the <see cref="T:Microsoft.VisualBasic.Collection" /> object; otherwise, <see langword="False" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4d197-310">Este método determina si el <xref:Microsoft.VisualBasic.Collection> objeto contiene un valor específico.</span><span class="sxs-lookup"><span data-stu-id="4d197-310">This method determines whether the <xref:Microsoft.VisualBasic.Collection> object contains a specific value.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:Microsoft.VisualBasic.Collection" />
        <altmember cref="T:System.Collections.IList" />
        <altmember cref="M:System.Collections.IList.Contains(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.IListIsFixedSize">
      <MemberSignature Language="C#" Value="bool System.Collections.IList.IListIsFixedSize { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IListIsFixedSize" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.Collection.IListIsFixedSize" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property IListIsFixedSize As Boolean Implements IList.IListIsFixedSize" />
      <MemberSignature Language="C++ CLI" Value="property bool System.Collections.IList.IListIsFixedSize { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.IListIsReadOnly">
      <MemberSignature Language="C#" Value="bool System.Collections.IList.IListIsReadOnly { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IListIsReadOnly" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.Collection.IListIsReadOnly" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property IListIsReadOnly As Boolean Implements IList.IListIsReadOnly" />
      <MemberSignature Language="C++ CLI" Value="property bool System.Collections.IList.IListIsReadOnly { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.IListItem">
      <MemberSignature Language="C#" Value="object System.Collections.IList.IListItem[int index] { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object IListItem(int32)" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.Collection.IListItem(System.Int32)" />
      <MemberSignature Language="VB.NET" Value=" Property IListItem(index As Integer) As Object Implements IList.IListItem" />
      <MemberSignature Language="C++ CLI" Value="property System::Object ^ System.Collections.IList.IListItem[int] { System::Object ^ get(int index); void set(int index, System::Object ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">To be added.</param>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.IndexOf">
      <MemberSignature Language="C#" Value="int IList.IndexOf (object value);" />
      <MemberSignature Language="ILAsm" Value=".method newslot virtual instance int32 IListIndexOf(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Collection.IListIndexOf(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Function IListIndexOf (value As Object) As Integer Implements IList.IndexOf" />
      <MemberSignature Language="C++ CLI" Value=" virtual int IListIndexOf(System::Object ^ value) = System::Collections::IList::IndexOf;" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="4d197-311">Objeto <see cref="T:System.Object" /> que se va a buscar en <see cref="T:Microsoft.VisualBasic.Collection" />.</span><span class="sxs-lookup"><span data-stu-id="4d197-311">The <see cref="T:System.Object" /> to locate in the <see cref="T:Microsoft.VisualBasic.Collection" /> object.</span></span></param>
        <summary><span data-ttu-id="4d197-312">Determina el índice de un elemento específico del objeto <see cref="T:Microsoft.VisualBasic.Collection" />.</span><span class="sxs-lookup"><span data-stu-id="4d197-312">Determines the index of a specific item in the <see cref="T:Microsoft.VisualBasic.Collection" /> object.</span></span> <span data-ttu-id="4d197-313">Implementa la interfaz <see cref="T:System.Collections.IList" />.</span><span class="sxs-lookup"><span data-stu-id="4d197-313">Implements the <see cref="T:System.Collections.IList" /> interface.</span></span></summary>
        <returns><span data-ttu-id="4d197-314">Índice de <paramref name="value" /> si se encuentra en la colección; en caso contrario, -1.</span><span class="sxs-lookup"><span data-stu-id="4d197-314">The index of <paramref name="value" /> if found in the collection; otherwise, -1.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4d197-315">Este método determina el índice de un elemento específico de la <xref:Microsoft.VisualBasic.Collection> objeto.</span><span class="sxs-lookup"><span data-stu-id="4d197-315">This method determines the index of a specific item in the <xref:Microsoft.VisualBasic.Collection> object.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:Microsoft.VisualBasic.Collection" />
        <altmember cref="T:System.Collections.IList" />
        <altmember cref="M:System.Collections.IList.IndexOf(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.Insert">
      <MemberSignature Language="C#" Value="void IList.Insert (int index, object value);" />
      <MemberSignature Language="ILAsm" Value=".method newslot virtual instance void IListInsert(int32 index, object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Collection.IListInsert(System.Int32,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Sub IListInsert (index As Integer, value As Object) Implements IList.Insert" />
      <MemberSignature Language="C++ CLI" Value=" virtual void IListInsert(int index, System::Object ^ value) = System::Collections::IList::Insert;" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="index"><span data-ttu-id="4d197-316">Índice de base cero en el que se debe insertar <c>value</c>.</span><span class="sxs-lookup"><span data-stu-id="4d197-316">The zero-based index at which <c>value</c> should be inserted.</span></span></param>
        <param name="value"><span data-ttu-id="4d197-317">Objeto <see cref="T:System.Object" /> que va a insertarse en el objeto <see cref="T:Microsoft.VisualBasic.Collection" />.</span><span class="sxs-lookup"><span data-stu-id="4d197-317">The <see cref="T:System.Object" /> to insert into the <see cref="T:Microsoft.VisualBasic.Collection" /> object.</span></span></param>
        <summary><span data-ttu-id="4d197-318">Inserta un elemento en el índice especificado del objeto <see cref="T:Microsoft.VisualBasic.Collection" />.</span><span class="sxs-lookup"><span data-stu-id="4d197-318">Inserts an item to the <see cref="T:Microsoft.VisualBasic.Collection" /> object at the specified index.</span></span> <span data-ttu-id="4d197-319">Implementa la interfaz <see cref="T:System.Collections.IList" />.</span><span class="sxs-lookup"><span data-stu-id="4d197-319">Implements the <see cref="T:System.Collections.IList" /> interface.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4d197-320">Si `index` es igual al número de elementos de la <xref:Microsoft.VisualBasic.Collection> objeto, a continuación, `value` se anexa al final.</span><span class="sxs-lookup"><span data-stu-id="4d197-320">If `index` equals the number of items in the <xref:Microsoft.VisualBasic.Collection> object, then `value` is appended to the end.</span></span>  
  
 <span data-ttu-id="4d197-321">En colecciones de elementos contiguos, como listas, los elementos que van a continuación del punto de inserción se desplazan hacia abajo para alojar el elemento nuevo.</span><span class="sxs-lookup"><span data-stu-id="4d197-321">In collections of contiguous elements, such as lists, the elements that follow the insertion point move down to accommodate the new element.</span></span> <span data-ttu-id="4d197-322">Si la colección está indizada, también se actualizan los índices de los elementos que se han movido.</span><span class="sxs-lookup"><span data-stu-id="4d197-322">If the collection is indexed, the indexes of the elements that are moved are also updated.</span></span> <span data-ttu-id="4d197-323">Este comportamiento no se aplica a las colecciones cuyos elementos se agrupan conceptualmente en sectores de almacenamiento, como una tabla hash.</span><span class="sxs-lookup"><span data-stu-id="4d197-323">This behavior does not apply to collections where elements are conceptually grouped into buckets, such as a hash table.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="4d197-324"><paramref name="index" /> no es un índice válido para el objeto <see cref="T:Microsoft.VisualBasic.Collection" />.</span><span class="sxs-lookup"><span data-stu-id="4d197-324"><paramref name="index" /> is not a valid index in the <see cref="T:Microsoft.VisualBasic.Collection" /> object.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="4d197-325">El objeto <see cref="T:Microsoft.VisualBasic.Collection" /> es de solo lectura.</span><span class="sxs-lookup"><span data-stu-id="4d197-325">The <see cref="T:Microsoft.VisualBasic.Collection" /> object is read-only.</span></span>  
  
 <span data-ttu-id="4d197-326">O bien</span><span class="sxs-lookup"><span data-stu-id="4d197-326">-or-</span></span>  
  
 <span data-ttu-id="4d197-327">El objeto <see cref="T:Microsoft.VisualBasic.Collection" /> tiene un tamaño fijo.</span><span class="sxs-lookup"><span data-stu-id="4d197-327">The <see cref="T:Microsoft.VisualBasic.Collection" /> object has a fixed size.</span></span></exception>
        <exception cref="T:System.NullReferenceException">
          <span data-ttu-id="4d197-328"><paramref name="value" /> es una referencia nula del objeto <see cref="T:Microsoft.VisualBasic.Collection" />.</span><span class="sxs-lookup"><span data-stu-id="4d197-328"><paramref name="value" /> is null reference in the <see cref="T:Microsoft.VisualBasic.Collection" /> object.</span></span></exception>
        <altmember cref="T:Microsoft.VisualBasic.Collection" />
        <altmember cref="T:System.Collections.IList" />
        <altmember cref="M:System.Collections.IList.Insert(System.Int32,System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.Remove">
      <MemberSignature Language="C#" Value="void IList.Remove (object value);" />
      <MemberSignature Language="ILAsm" Value=".method newslot virtual instance void IListRemove(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Collection.IListRemove(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Sub IListRemove (value As Object) Implements IList.Remove" />
      <MemberSignature Language="C++ CLI" Value=" virtual void IListRemove(System::Object ^ value) = System::Collections::IList::Remove;" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="4d197-329">Objeto <see cref="T:System.Object" /> que va a quitarse de <see cref="T:Microsoft.VisualBasic.Collection" />.</span><span class="sxs-lookup"><span data-stu-id="4d197-329">The <see cref="T:System.Object" /> to remove from the <see cref="T:Microsoft.VisualBasic.Collection" /> object.</span></span></param>
        <summary><span data-ttu-id="4d197-330">Quita del objeto <see cref="T:Microsoft.VisualBasic.Collection" /> la primera aparición de un objeto específico.</span><span class="sxs-lookup"><span data-stu-id="4d197-330">Removes the first occurrence of a specific object from the <see cref="T:Microsoft.VisualBasic.Collection" /> object.</span></span> <span data-ttu-id="4d197-331">Implementa la interfaz <see cref="T:System.Collections.IList" />.</span><span class="sxs-lookup"><span data-stu-id="4d197-331">Implements the <see cref="T:System.Collections.IList" /> interface.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4d197-332">En colecciones de elementos contiguos, como listas, los elementos que van a continuación del elemento eliminado se desplazan hacia arriba para ocupar el espacio libre.</span><span class="sxs-lookup"><span data-stu-id="4d197-332">In collections of contiguous elements, such as lists, the elements that follow the removed element move up to occupy the vacated spot.</span></span> <span data-ttu-id="4d197-333">Si la colección está indizada, también se actualizan los índices de los elementos que se han movido.</span><span class="sxs-lookup"><span data-stu-id="4d197-333">If the collection is indexed, the indexes of the elements that are moved are also updated.</span></span> <span data-ttu-id="4d197-334">Este comportamiento no se aplica a las colecciones cuyos elementos se agrupan conceptualmente en sectores de almacenamiento, como una tabla hash.</span><span class="sxs-lookup"><span data-stu-id="4d197-334">This behavior does not apply to collections where elements are conceptually grouped into buckets, such as a hash table.</span></span> <span data-ttu-id="4d197-335">Si `value` no se encuentra en la <xref:Microsoft.VisualBasic.Collection> objeto, el <xref:Microsoft.VisualBasic.Collection> objeto permanece sin modificar y no se produce ninguna excepción.</span><span class="sxs-lookup"><span data-stu-id="4d197-335">If `value` is not found in the <xref:Microsoft.VisualBasic.Collection> object, the <xref:Microsoft.VisualBasic.Collection> object remains unchanged and no exception is thrown.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="4d197-336">El objeto <see cref="T:Microsoft.VisualBasic.Collection" /> es de solo lectura.</span><span class="sxs-lookup"><span data-stu-id="4d197-336">The <see cref="T:Microsoft.VisualBasic.Collection" /> object is read-only.</span></span>  
  
 <span data-ttu-id="4d197-337">O bien</span><span class="sxs-lookup"><span data-stu-id="4d197-337">-or-</span></span>  
  
 <span data-ttu-id="4d197-338">El objeto <see cref="T:Microsoft.VisualBasic.Collection" /> tiene un tamaño fijo.</span><span class="sxs-lookup"><span data-stu-id="4d197-338">The <see cref="T:Microsoft.VisualBasic.Collection" /> object has a fixed size.</span></span></exception>
        <altmember cref="T:Microsoft.VisualBasic.Collection" />
        <altmember cref="T:System.Collections.IList" />
        <altmember cref="M:System.Collections.IList.Remove(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.RemoveAt">
      <MemberSignature Language="C#" Value="void IList.RemoveAt (int index);" />
      <MemberSignature Language="ILAsm" Value=".method newslot virtual instance void IListRemoveAt(int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Collection.IListRemoveAt(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Sub IListRemoveAt (index As Integer) Implements IList.RemoveAt" />
      <MemberSignature Language="C++ CLI" Value=" virtual void IListRemoveAt(int index) = System::Collections::IList::RemoveAt;" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index"><span data-ttu-id="4d197-339">Índice de base cero del elemento que se va a quitar.</span><span class="sxs-lookup"><span data-stu-id="4d197-339">The zero-based index of the item to remove.</span></span></param>
        <summary><span data-ttu-id="4d197-340">Quita el elemento de objeto <see cref="T:Microsoft.VisualBasic.Collection" /> del índice especificado.</span><span class="sxs-lookup"><span data-stu-id="4d197-340">Removes the <see cref="T:Microsoft.VisualBasic.Collection" /> object item at the specified index.</span></span> <span data-ttu-id="4d197-341">Implementa la interfaz <see cref="T:System.Collections.IList" />.</span><span class="sxs-lookup"><span data-stu-id="4d197-341">Implements the <see cref="T:System.Collections.IList" /> interface.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4d197-342">En colecciones de elementos contiguos, como listas, los elementos que van a continuación del elemento eliminado se desplazan hacia arriba para ocupar el espacio libre.</span><span class="sxs-lookup"><span data-stu-id="4d197-342">In collections of contiguous elements, such as lists, the elements that follow the removed element move up to occupy the vacated spot.</span></span> <span data-ttu-id="4d197-343">Si la colección está indizada, también se actualizan los índices de los elementos que se han movido.</span><span class="sxs-lookup"><span data-stu-id="4d197-343">If the collection is indexed, the indexes of the elements that are moved are also updated.</span></span> <span data-ttu-id="4d197-344">Este comportamiento no se aplica a las colecciones cuyos elementos se agrupan conceptualmente en sectores de almacenamiento, como una tabla hash.</span><span class="sxs-lookup"><span data-stu-id="4d197-344">This behavior does not apply to collections where elements are conceptually grouped into buckets, such as a hash table.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="4d197-345"><paramref name="index" /> no es un índice válido para el objeto <see cref="T:Microsoft.VisualBasic.Collection" />.</span><span class="sxs-lookup"><span data-stu-id="4d197-345"><paramref name="index" /> is not a valid index in the <see cref="T:Microsoft.VisualBasic.Collection" /> object.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="4d197-346">El objeto <see cref="T:Microsoft.VisualBasic.Collection" /> es de solo lectura.</span><span class="sxs-lookup"><span data-stu-id="4d197-346">The <see cref="T:Microsoft.VisualBasic.Collection" /> object is read-only.</span></span>  
  
 <span data-ttu-id="4d197-347">O bien</span><span class="sxs-lookup"><span data-stu-id="4d197-347">-or-</span></span>  
  
 <span data-ttu-id="4d197-348">El objeto <see cref="T:Microsoft.VisualBasic.Collection" /> tiene un tamaño fijo.</span><span class="sxs-lookup"><span data-stu-id="4d197-348">The <see cref="T:Microsoft.VisualBasic.Collection" /> object has a fixed size.</span></span></exception>
        <altmember cref="T:Microsoft.VisualBasic.Collection" />
        <altmember cref="T:System.Collections.IList" />
        <altmember cref="M:System.Collections.IList.RemoveAt(System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="System.Runtime.Serialization.IDeserializationCallback.OnDeserialization">
      <MemberSignature Language="C#" Value="void IDeserializationCallback.OnDeserialization (object sender);" />
      <MemberSignature Language="ILAsm" Value=".method newslot virtual instance void OnDeserialization(object sender) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Collection.OnDeserialization(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Sub OnDeserialization (sender As Object) Implements IDeserializationCallback.OnDeserialization" />
      <MemberSignature Language="C++ CLI" Value=" virtual void OnDeserialization(System::Object ^ sender) = System::Runtime::Serialization::IDeserializationCallback::OnDeserialization;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.Serialization.IDeserializationCallback.OnDeserialization(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sender" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="sender"><span data-ttu-id="4d197-349">Objeto que inició la devolución de llamada.</span><span class="sxs-lookup"><span data-stu-id="4d197-349">The object that initiated the callback.</span></span></param>
        <summary><span data-ttu-id="4d197-350">Se ejecuta después de que se deserialice el gráfico del objeto <see cref="T:Microsoft.VisualBasic.Collection" /> completo.</span><span class="sxs-lookup"><span data-stu-id="4d197-350">Runs after the entire <see cref="T:Microsoft.VisualBasic.Collection" /> object graph has been deserialized.</span></span> <span data-ttu-id="4d197-351">Implementa la interfaz <see cref="T:System.Runtime.Serialization.IDeserializationCallback" />.</span><span class="sxs-lookup"><span data-stu-id="4d197-351">Implements the <see cref="T:System.Runtime.Serialization.IDeserializationCallback" /> interface.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4d197-352">Se llama a este método después de toda la matriz <xref:Microsoft.VisualBasic.Collection> se ha deserializado el gráfico de objetos.</span><span class="sxs-lookup"><span data-stu-id="4d197-352">This method is called after the entire <xref:Microsoft.VisualBasic.Collection> object graph has been deserialized.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:Microsoft.VisualBasic.Collection" />
        <altmember cref="T:System.Runtime.Serialization.IDeserializationCallback" />
        <altmember cref="M:System.Runtime.Serialization.IDeserializationCallback.OnDeserialization(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="System.Runtime.Serialization.ISerializable.GetObjectData">
      <MemberSignature Language="C#" Value="void ISerializable.GetObjectData (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);" />
      <MemberSignature Language="ILAsm" Value=".method newslot virtual instance void GetObjectData(class System.Runtime.Serialization.SerializationInfo info, valuetype System.Runtime.Serialization.StreamingContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Collection.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
      <MemberSignature Language="VB.NET" Value="Sub GetObjectData (info As SerializationInfo, context As StreamingContext) Implements ISerializable.GetObjectData" />
      <MemberSignature Language="C++ CLI" Value=" virtual void GetObjectData(System::Runtime::Serialization::SerializationInfo ^ info, System::Runtime::Serialization::StreamingContext context) = System::Runtime::Serialization::ISerializable::GetObjectData;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="info" Type="System.Runtime.Serialization.SerializationInfo" />
        <Parameter Name="context" Type="System.Runtime.Serialization.StreamingContext" />
      </Parameters>
      <Docs>
        <param name="info"><span data-ttu-id="4d197-353">Objeto <see cref="T:System.Runtime.Serialization.SerializationInfo" /> que contiene la información que se requiere para serializar el objeto <see cref="T:Microsoft.VisualBasic.Collection" />.</span><span class="sxs-lookup"><span data-stu-id="4d197-353">A <see cref="T:System.Runtime.Serialization.SerializationInfo" /> object containing the information required to serialize the <see cref="T:Microsoft.VisualBasic.Collection" /> object.</span></span></param>
        <param name="context"><span data-ttu-id="4d197-354">Objeto <see cref="T:System.Runtime.Serialization.StreamingContext" /> que contiene el origen y el destino de la secuencia serializada asociada al objeto <see cref="T:Microsoft.VisualBasic.Collection" />.</span><span class="sxs-lookup"><span data-stu-id="4d197-354">A <see cref="T:System.Runtime.Serialization.StreamingContext" /> object containing the source and destination of the serialized stream associated with the <see cref="T:Microsoft.VisualBasic.Collection" /> object.</span></span></param>
        <summary><span data-ttu-id="4d197-355">Devuelve los datos necesarios para serializar el objeto <see cref="T:Microsoft.VisualBasic.Collection" />.</span><span class="sxs-lookup"><span data-stu-id="4d197-355">Returns the data needed to serialize the <see cref="T:Microsoft.VisualBasic.Collection" /> object.</span></span> <span data-ttu-id="4d197-356">Implementa la interfaz <see cref="T:System.Runtime.Serialization.ISerializable" />.</span><span class="sxs-lookup"><span data-stu-id="4d197-356">Implements the <see cref="T:System.Runtime.Serialization.ISerializable" /> interface.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4d197-357">Este método devuelve los datos necesarios para serializar el <xref:Microsoft.VisualBasic.Collection> objeto.</span><span class="sxs-lookup"><span data-stu-id="4d197-357">This method returns the data needed to serialize the <xref:Microsoft.VisualBasic.Collection> object.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:Microsoft.VisualBasic.Collection" />
        <altmember cref="T:System.Runtime.Serialization.ISerializable" />
        <altmember cref="T:System.Runtime.Serialization.SerializationInfo" />
        <altmember cref="T:System.Runtime.Serialization.StreamingContext" />
        <altmember cref="M:System.Collections.Hashtable.OnDeserialization(System.Object)" />
      </Docs>
    </Member>
  </Members>
</Type>