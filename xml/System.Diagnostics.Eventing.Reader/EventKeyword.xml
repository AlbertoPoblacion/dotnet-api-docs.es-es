<Type Name="EventKeyword" FullName="System.Diagnostics.Eventing.Reader.EventKeyword">
  <TypeSignature Language="C#" Value="public sealed class EventKeyword" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit EventKeyword extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Diagnostics.Eventing.Reader.EventKeyword" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class EventKeyword" />
  <TypeSignature Language="C++ CLI" Value="public ref class EventKeyword sealed" />
  <AssemblyInfo>
    <AssemblyName>System.Core</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="d000f-101">Representa una palabra clave para un evento.</span><span class="sxs-lookup"><span data-stu-id="d000f-101">Represents a keyword for an event.</span></span> <span data-ttu-id="d000f-102">Las palabras clave se definen en un proveedor de eventos y se utilizan para agrupar el evento con otros similares (se basa en el uso de los eventos).</span><span class="sxs-lookup"><span data-stu-id="d000f-102">Keywords are defined in an event provider and are used to group the event with other similar events (based on the usage of the events).</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d000f-103">No se puede crear una instancia de esta clase.</span><span class="sxs-lookup"><span data-stu-id="d000f-103">This class cannot be instantiated.</span></span> <span data-ttu-id="d000f-104">A <xref:System.Diagnostics.Eventing.Reader.ProviderMetadata> objeto define una lista de <xref:System.Diagnostics.Eventing.Reader.EventKeyword> objetos, uno por cada palabra clave utilizada por los eventos de proveedor.</span><span class="sxs-lookup"><span data-stu-id="d000f-104">A <xref:System.Diagnostics.Eventing.Reader.ProviderMetadata> object defies a list of <xref:System.Diagnostics.Eventing.Reader.EventKeyword> objects, one for each keyword used by the provider events.</span></span> <span data-ttu-id="d000f-105">Cada palabra clave es un bit en una máscara de 64 bits.</span><span class="sxs-lookup"><span data-stu-id="d000f-105">Each keyword is a bit in a 64-bit mask.</span></span> <span data-ttu-id="d000f-106">Valores de bit predefinidos y bits reservados ocupan las 16 posiciones superiores de esta máscara, dejando que el manifiesto para que use cualquier bit comprendido entre 0 x 0000000000000001 y 0 x 0000800000000000.</span><span class="sxs-lookup"><span data-stu-id="d000f-106">Predefined bit values and reserved bits occupy the top 16 positions of this mask, leaving the manifest to use any bits between 0x0000000000000001 and 0x0000800000000000.</span></span>  
  
 <span data-ttu-id="d000f-107">Las palabras clave de eventos estándar se definen en el <xref:System.Diagnostics.Eventing.Reader.StandardEventKeywords> enumeración.</span><span class="sxs-lookup"><span data-stu-id="d000f-107">The standard event keywords are defined in the <xref:System.Diagnostics.Eventing.Reader.StandardEventKeywords> enumeration.</span></span>  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="DisplayName">
      <MemberSignature Language="C#" Value="public string DisplayName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string DisplayName" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.Eventing.Reader.EventKeyword.DisplayName" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property DisplayName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ DisplayName { System::String ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="d000f-108">Obtiene el nombre traducido de la palabra clave.</span><span class="sxs-lookup"><span data-stu-id="d000f-108">Gets the localized name of the keyword.</span></span></summary>
        <value><span data-ttu-id="d000f-109">Devuelve una cadena que contiene un nombre traducido para esta palabra clave.</span><span class="sxs-lookup"><span data-stu-id="d000f-109">Returns a string that contains a localized name for this keyword.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Name">
      <MemberSignature Language="C#" Value="public string Name { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Name" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.Eventing.Reader.EventKeyword.Name" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Name As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Name { System::String ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="d000f-110">Obtiene el nombre no traducido de la palabra clave.</span><span class="sxs-lookup"><span data-stu-id="d000f-110">Gets the non-localized name of the keyword.</span></span></summary>
        <value><span data-ttu-id="d000f-111">Devuelve una cadena que contiene el nombre no traducido de esta palabra clave.</span><span class="sxs-lookup"><span data-stu-id="d000f-111">Returns a string that contains the non-localized name of this keyword.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Value">
      <MemberSignature Language="C#" Value="public long Value { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int64 Value" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.Eventing.Reader.EventKeyword.Value" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Value As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property long Value { long get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="d000f-112">Obtiene el valor numérico asociado con la palabra clave.</span><span class="sxs-lookup"><span data-stu-id="d000f-112">Gets the numeric value associated with the keyword.</span></span></summary>
        <value><span data-ttu-id="d000f-113">Devuelve un valor <see langword="long" />.</span><span class="sxs-lookup"><span data-stu-id="d000f-113">Returns a <see langword="long" /> value.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d000f-114">Cada palabra clave es un bit en una máscara de 64 bits.</span><span class="sxs-lookup"><span data-stu-id="d000f-114">Each keyword is a bit in a 64-bit mask.</span></span> <span data-ttu-id="d000f-115">Valores de bit predefinidos y bits reservados ocupan las 16 posiciones superiores de esta máscara, dejando que el manifiesto para que use cualquier bit comprendido entre 0 x 0000000000000001 y 0 x 0000800000000000.</span><span class="sxs-lookup"><span data-stu-id="d000f-115">Predefined bit values and reserved bits occupy the top 16 positions of this mask, leaving the manifest to use any bits between 0x0000000000000001 and 0x0000800000000000.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>