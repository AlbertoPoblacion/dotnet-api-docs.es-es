<Type Name="ServiceProcessInstaller" FullName="System.ServiceProcess.ServiceProcessInstaller">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="22ae64a5e07ce6d99f315597d118732a84c3849f" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="es-ES" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36409894" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class ServiceProcessInstaller : System.Configuration.Install.ComponentInstaller" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit ServiceProcessInstaller extends System.Configuration.Install.ComponentInstaller" />
  <TypeSignature Language="DocId" Value="T:System.ServiceProcess.ServiceProcessInstaller" />
  <TypeSignature Language="VB.NET" Value="Public Class ServiceProcessInstaller&#xA;Inherits ComponentInstaller" />
  <TypeSignature Language="C++ CLI" Value="public ref class ServiceProcessInstaller : System::Configuration::Install::ComponentInstaller" />
  <TypeSignature Language="F#" Value="type ServiceProcessInstaller = class&#xA;    inherit ComponentInstaller" />
  <AssemblyInfo>
    <AssemblyName>System.ServiceProcess</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Configuration.Install.ComponentInstaller</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Installs an executable containing classes that extend <see cref="T:System.ServiceProcess.ServiceBase" />. This class is called by installation utilities, such as InstallUtil.exe, when installing a service application.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.ServiceProcess.ServiceProcessInstaller> trabajo común a todos los servicios en un archivo ejecutable. Se usa la utilidad de instalación para escribir valores del registro asociados con los servicios que desea instalar.  
  
 Para instalar un servicio, cree una clase de instalador de proyecto que herede de <xref:System.Configuration.Install.Installer>y establezca el <xref:System.ComponentModel.RunInstallerAttribute> en la clase para `true`. Dentro del proyecto, crear instancias de una <xref:System.ServiceProcess.ServiceProcessInstaller> instancia por la aplicación de servicio y uno <xref:System.ServiceProcess.ServiceInstaller> instancia para cada servicio en la aplicación. Por último, agregue el <xref:System.ServiceProcess.ServiceProcessInstaller> instancia y el <xref:System.ServiceProcess.ServiceInstaller> instancias de la clase de instalador del proyecto.  
  
 Cuando se ejecuta InstallUtil.exe, la utilidad busca clases en el ensamblado de servicio con el <xref:System.ComponentModel.RunInstallerAttribute> establecido en `true`. Agregar clases al ensamblado de servicio agregándolas a la <xref:System.Configuration.Install.Installer.Installers%2A> colección asociada al instalador del proyecto. Si <xref:System.ComponentModel.RunInstallerAttribute> es `false`, la utilidad de instalación omite el instalador del proyecto.  
  
 Para una instancia de <xref:System.ServiceProcess.ServiceProcessInstaller>, puede modificar las propiedades incluyen especificar que una aplicación de servicio se ejecute bajo una cuenta que no sea el usuario ha iniciado sesión. Puede especificar un determinado <xref:System.ServiceProcess.ServiceProcessInstaller.Username%2A> y <xref:System.ServiceProcess.ServiceProcessInstaller.Password%2A> par con la que debe ejecutarse el servicio o puede usar <xref:System.ServiceProcess.ServiceProcessInstaller.Account%2A> para especificar que el servicio se ejecutará bajo la cuenta del sistema del equipo, una variable local o cuenta de servicio de red o una cuenta de usuario.  
  
> [!NOTE]
>  Cuenta del sistema del equipo no es igual que la cuenta de administrador.  
  
 Normalmente, no se llame a los métodos en <xref:System.ServiceProcess.ServiceInstaller> dentro del código; se denomina generalmente solo por la utilidad de instalación. La utilidad de instalación llama automáticamente a la <xref:System.ServiceProcess.ServiceProcessInstaller.Install%2A?displayProperty=nameWithType> y <xref:System.ServiceProcess.ServiceInstaller.Install%2A?displayProperty=nameWithType> métodos durante el proceso de instalación. Deshace los errores, si es necesario, mediante una llamada a <xref:System.ServiceProcess.ServiceProcessInstaller.Rollback%2A> (o <xref:System.ServiceProcess.ServiceInstaller.Rollback%2A?displayProperty=nameWithType>) en todos los componentes instalados anteriormente.  
  
 La rutina de instalación de la aplicación mantiene información automáticamente acerca de los componentes ya instalados, mediante el instalador de proyecto <xref:System.Configuration.Install.Installer.Context%2A?displayProperty=nameWithType>. Esta información de estado se actualiza continuamente en el <xref:System.ServiceProcess.ServiceProcessInstaller> instancia y cada uno de ellos <xref:System.ServiceProcess.ServiceInstaller> está instalada la instancia por la utilidad. Normalmente no es necesario para el código modificar esta información de estado de forma explícita.  
  
 Crear instancias de un <xref:System.ServiceProcess.ServiceProcessInstaller> hace que el constructor de clase base, <xref:System.Configuration.Install.ComponentInstaller.%23ctor%2A>, que se llame a.  
  
   
  
## Examples  
 En el ejemplo siguiente se crea un instalador del proyecto denominado MyProjectInstaller, que hereda de <xref:System.Configuration.Install.Installer>. Se supone que hay un ejecutable de servicio que contiene dos servicios, "Hello World Service 1" y "Hello World Service 2". En el constructor de MyProjectInstaller (que se llamará desde la utilidad de instalación), <xref:System.ServiceProcess.ServiceInstaller> objetos se crean para cada servicio y un <xref:System.ServiceProcess.ServiceProcessInstaller> se crea para el archivo ejecutable. Para que la utilidad de instalación reconozca MyProjectInstaller como un instalador válido, el <xref:System.ComponentModel.RunInstallerAttribute> atributo está establecido en `true`.  
  
 Las propiedades opcionales se establecen en el instalador del proceso y los instaladores del servicio antes de que los instaladores se agregan a la <xref:System.Configuration.Install.Installer.Installers%2A> colección. Cuando la utilidad de instalación tiene acceso a MyProjectInstaller, los objetos se agregan a la <xref:System.Configuration.Install.Installer.Installers%2A> colección mediante una llamada a <xref:System.Configuration.Install.InstallerCollection.Add%2A?displayProperty=nameWithType> se instalará a su vez. Durante el proceso, el instalador mantiene información de estado que indica qué objetos se han instalado, por lo que cada objeto puede descartarse a su vez en el caso de un error de instalación.  
  
 Normalmente, se crean no instancias de la clase de instalador de proyecto explícitamente. ¿Cree y agregue el <xref:System.ComponentModel.RunInstallerAttribute>, pero la utilidad de instalación realmente llama y, por tanto, crea una instancia, la clase.  
  
 [!code-cpp[Classic ServiceInstaller Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic ServiceInstaller Example/CPP/source.cpp#1)]
 [!code-csharp[Classic ServiceInstaller Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic ServiceInstaller Example/CS/source.cs#1)]
 [!code-vb[Classic ServiceInstaller Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic ServiceInstaller Example/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.ServiceProcess.ServiceInstaller" />
    <altmember cref="T:System.ServiceProcess.ServiceBase" />
    <altmember cref="T:System.Configuration.Install.ComponentInstaller" />
    <altmember cref="P:System.Configuration.Install.Installer.Installers" />
    <altmember cref="T:System.ServiceProcess.ServiceAccount" />
    <altmember cref="T:System.ServiceProcess.Design.ServiceInstallerDialog" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ServiceProcessInstaller ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceProcess.ServiceProcessInstaller.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ServiceProcessInstaller();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Creates a new instance of the <see cref="T:System.ServiceProcess.ServiceProcessInstaller" /> class.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Account">
      <MemberSignature Language="C#" Value="public System.ServiceProcess.ServiceAccount Account { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.ServiceProcess.ServiceAccount Account" />
      <MemberSignature Language="DocId" Value="P:System.ServiceProcess.ServiceProcessInstaller.Account" />
      <MemberSignature Language="VB.NET" Value="Public Property Account As ServiceAccount" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::ServiceProcess::ServiceAccount Account { System::ServiceProcess::ServiceAccount get(); void set(System::ServiceProcess::ServiceAccount value); };" />
      <MemberSignature Language="F#" Value="member this.Account : System.ServiceProcess.ServiceAccount with get, set" Usage="System.ServiceProcess.ServiceProcessInstaller.Account" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ServiceProcess.ServiceProcessDescription("ServiceProcessInstallerAccount")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.ServiceProcess.ServiceAccount</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the type of account under which to run this service application.</summary>
        <value>Un <see cref="T:System.ServiceProcess.ServiceAccount" /> que define el tipo de cuenta en la que el sistema ejecuta este servicio. De manera predeterminada, es <see langword="User" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cuando el <xref:System.ServiceProcess.ServiceProcessInstaller.Account%2A> propiedad es `User`, <xref:System.ServiceProcess.ServiceProcessInstaller.Username%2A> y <xref:System.ServiceProcess.ServiceProcessInstaller.Password%2A> propiedades se utilizan para definir una cuenta con la que se ejecuta la aplicación de servicio.  
  
 El <xref:System.ServiceProcess.ServiceProcessInstaller.Username%2A> y <xref:System.ServiceProcess.ServiceProcessInstaller.Password%2A> par permite al servicio para ejecutarse bajo una cuenta distinta de la cuenta del sistema. Esto puede, por ejemplo, permitir que el servicio se inicie automáticamente en el reinicio, cuando ningún usuario haya iniciado sesión. Si se deja el <xref:System.ServiceProcess.ServiceProcessInstaller.Username%2A> o <xref:System.ServiceProcess.ServiceProcessInstaller.Password%2A> vacías y se establece <xref:System.ServiceProcess.ServiceProcessInstaller.Account%2A> a `User`, se le pedirá un nombre de usuario válido y una contraseña durante la instalación.  
  
 También puede especificar que el servicio se ejecute bajo la cuenta sistema local o como una variable local o servicio de red. Consulte la <xref:System.ServiceProcess.ServiceAccount> enumeración para obtener más información sobre los tipos de cuentas.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.ServiceProcess.ServiceProcessInstaller.Username" />
        <altmember cref="P:System.ServiceProcess.ServiceProcessInstaller.Password" />
        <altmember cref="T:System.ServiceProcess.ServiceAccount" />
        <altmember cref="T:System.ServiceProcess.Design.ServiceInstallerDialog" />
      </Docs>
    </Member>
    <Member MemberName="CopyFromComponent">
      <MemberSignature Language="C#" Value="public override void CopyFromComponent (System.ComponentModel.IComponent comp);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void CopyFromComponent(class System.ComponentModel.IComponent comp) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceProcess.ServiceProcessInstaller.CopyFromComponent(System.ComponentModel.IComponent)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub CopyFromComponent (comp As IComponent)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void CopyFromComponent(System::ComponentModel::IComponent ^ comp);" />
      <MemberSignature Language="F#" Value="override this.CopyFromComponent : System.ComponentModel.IComponent -&gt; unit" Usage="serviceProcessInstaller.CopyFromComponent comp" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="comp" Type="System.ComponentModel.IComponent" />
      </Parameters>
      <Docs>
        <param name="comp">The <see cref="T:System.ComponentModel.IComponent" /> that represents the service process.</param>
        <summary>Implements the base class <see cref="M:System.Configuration.Install.ComponentInstaller.CopyFromComponent(System.ComponentModel.IComponent)" /> method with no <see cref="T:System.ServiceProcess.ServiceProcessInstaller" /> class-specific behavior.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 No se debería llamar al método dentro del código. El método de clase base en <xref:System.Configuration.Install.ComponentInstaller> es `abstract`, por lo que se implementa aquí en la clase derivada. Sin embargo, no hay ningún <xref:System.ServiceProcess.ServiceProcessInstaller> específicos de las clases de procesamiento en la implementación del método.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.ServiceProcess.ServiceProcessInstaller.Install(System.Collections.IDictionary)" />
        <altmember cref="M:System.ServiceProcess.ServiceProcessInstaller.Rollback(System.Collections.IDictionary)" />
      </Docs>
    </Member>
    <Member MemberName="HelpText">
      <MemberSignature Language="C#" Value="public override string HelpText { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string HelpText" />
      <MemberSignature Language="DocId" Value="P:System.ServiceProcess.ServiceProcessInstaller.HelpText" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property HelpText As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ HelpText { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.HelpText : string" Usage="System.ServiceProcess.ServiceProcessInstaller.HelpText" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets help text displayed for service installation options.</summary>
        <value>Texto de ayuda que proporciona una descripción de los pasos para que establecer el nombre de usuario y la contraseña para ejecutar el servicio en una cuenta determinada.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este texto de ayuda puede usarse cuando un servicio se inicia de forma manual. Indica al usuario cómo especificar información de nombre y la contraseña de usuario.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.ServiceProcess.ServiceProcessInstaller.Username" />
        <altmember cref="P:System.ServiceProcess.ServiceProcessInstaller.Password" />
      </Docs>
    </Member>
    <Member MemberName="Install">
      <MemberSignature Language="C#" Value="public override void Install (System.Collections.IDictionary stateSaver);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Install(class System.Collections.IDictionary stateSaver) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceProcess.ServiceProcessInstaller.Install(System.Collections.IDictionary)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Install (stateSaver As IDictionary)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Install(System::Collections::IDictionary ^ stateSaver);" />
      <MemberSignature Language="F#" Value="override this.Install : System.Collections.IDictionary -&gt; unit" Usage="serviceProcessInstaller.Install stateSaver" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stateSaver" Type="System.Collections.IDictionary" />
      </Parameters>
      <Docs>
        <param name="stateSaver">An <see cref="T:System.Collections.IDictionary" /> that contains the context information associated with the installation.</param>
        <summary>Writes service application information to the registry. This method is meant to be used by installation tools, which call the appropriate methods automatically.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Normalmente, no se llame a los métodos en <xref:System.ServiceProcess.ServiceProcessInstaller> dentro del código; se denomina generalmente solo por la utilidad de instalación. La utilidad de instalación llama automáticamente a la <xref:System.ServiceProcess.ServiceProcessInstaller.Install%2A?displayProperty=nameWithType> método durante el proceso de instalación. Deshace los errores, si es necesario, mediante una llamada a <xref:System.ServiceProcess.ServiceProcessInstaller.Rollback%2A> en todos los componentes instalados anteriormente. Este método pasa la instalación a la clase base <xref:System.Configuration.Install.Installer.Install%2A?displayProperty=nameWithType> método.  
  
 Normalmente, no llamará a los métodos en <xref:System.ServiceProcess.ServiceInstaller> dentro del código; se denomina generalmente solo por la utilidad de instalación. La utilidad de instalación llama automáticamente a la <xref:System.ServiceProcess.ServiceProcessInstaller.Install%2A?displayProperty=nameWithType> y <xref:System.ServiceProcess.ServiceInstaller.Install%2A?displayProperty=nameWithType> métodos durante el proceso de instalación. Deshace los errores, si es necesario, mediante una llamada a <xref:System.ServiceProcess.ServiceProcessInstaller.Rollback%2A> (o <xref:System.ServiceProcess.ServiceInstaller.Rollback%2A?displayProperty=nameWithType>) en todos los componentes instalados anteriormente  
  
 La rutina de instalación de la aplicación mantiene información automáticamente acerca de los componentes ya instalados, mediante el instalador de proyecto <xref:System.Configuration.Install.Installer.Context%2A?displayProperty=nameWithType>. Esta información de estado, se pasa en <xref:System.ServiceProcess.ServiceProcessInstaller.Install%2A> como el `stateSaver` parámetro, se actualiza continuamente en el <xref:System.ServiceProcess.ServiceProcessInstaller> instancia y cada uno <xref:System.ServiceProcess.ServiceInstaller> está instalada la instancia por la utilidad. Normalmente no es necesario para el código modificar esta información de estado de forma explícita.  
  
 <xref:System.ServiceProcess.ServiceProcessInstaller.Install%2A> pasa al método de llamada las excepciones producidas por los métodos de clase base o <xref:System.Configuration.Install.Installer.BeforeInstall>  /  <xref:System.Configuration.Install.Installer.AfterInstall> controladores de eventos.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">The <paramref name="stateSaver" /> is <see langword="null" />.</exception>
        <altmember cref="M:System.ServiceProcess.ServiceProcessInstaller.Rollback(System.Collections.IDictionary)" />
        <altmember cref="M:System.Configuration.Install.Installer.Commit(System.Collections.IDictionary)" />
        <altmember cref="M:System.Configuration.Install.Installer.Uninstall(System.Collections.IDictionary)" />
      </Docs>
    </Member>
    <Member MemberName="Password">
      <MemberSignature Language="C#" Value="public string Password { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Password" />
      <MemberSignature Language="DocId" Value="P:System.ServiceProcess.ServiceProcessInstaller.Password" />
      <MemberSignature Language="VB.NET" Value="Public Property Password As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Password { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Password : string with get, set" Usage="System.ServiceProcess.ServiceProcessInstaller.Password" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the password associated with the user account under which the service application runs.</summary>
        <value>La contraseña asociada con la cuenta bajo la que debe ejecutarse el servicio. El valor predeterminado es una cadena vacía (""). La propiedad no es pública y nunca se serializa.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.ServiceProcess.ServiceProcessInstaller.Password%2A> y <xref:System.ServiceProcess.ServiceProcessInstaller.Username%2A> par permite al servicio para ejecutarse bajo una cuenta distinta de la cuenta del sistema. Esto puede, por ejemplo, permitir que el servicio se inicie automáticamente en el reinicio, cuando ningún usuario haya iniciado sesión.  
  
 <xref:System.ServiceProcess.ServiceProcessInstaller.Password%2A> y <xref:System.ServiceProcess.ServiceProcessInstaller.Username%2A> se controlan de forma segura en que nunca se serializan ni se guardan en el estado de instalación (el instalador de proyecto <xref:System.Configuration.Install.Installer.Context%2A?displayProperty=nameWithType>) o en otra ubicación con acceso público.  
  
 Establecer el <xref:System.ServiceProcess.ServiceProcessInstaller.Username%2A> y <xref:System.ServiceProcess.ServiceProcessInstaller.Password%2A> permite que una cuenta que se asociará automáticamente con el servicio durante la instalación. Si se deja el <xref:System.ServiceProcess.ServiceProcessInstaller.Username%2A> o <xref:System.ServiceProcess.ServiceProcessInstaller.Password%2A> vacías y se establece <xref:System.ServiceProcess.ServiceProcessInstaller.Account%2A> a `User`, se le pedirá un nombre de usuario válido y una contraseña durante la instalación.  
  
 Otra opción para ejecutar un servicio en una cuenta independiente es utilizar la cuenta del sistema del equipo. Esta cuenta, que es distinta de la cuenta de administrador, requiere ninguna contraseña. Privilegios de la cuenta de sistema pueden superarlas del usuario que ha iniciado. Requiere que el servicio ejecutando bajo la cuenta del sistema en lugar de una cuenta de usuario evita problemas causados por el usuario no disponga del permiso  
  
 Si <xref:System.ServiceProcess.ServiceProcessInstaller.Account%2A> es cualquier valor distinto de `User`, se utiliza la cuenta especificada (local o servicio de red o sistema local), incluso si la <xref:System.ServiceProcess.ServiceProcessInstaller.Username%2A> y <xref:System.ServiceProcess.ServiceProcessInstaller.Password%2A> se rellenan las propiedades.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.ServiceProcess.ServiceProcessInstaller.Username" />
        <altmember cref="P:System.ServiceProcess.ServiceProcessInstaller.Account" />
        <altmember cref="T:System.ServiceProcess.Design.ServiceInstallerDialog" />
      </Docs>
    </Member>
    <Member MemberName="Rollback">
      <MemberSignature Language="C#" Value="public override void Rollback (System.Collections.IDictionary savedState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Rollback(class System.Collections.IDictionary savedState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceProcess.ServiceProcessInstaller.Rollback(System.Collections.IDictionary)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Rollback (savedState As IDictionary)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Rollback(System::Collections::IDictionary ^ savedState);" />
      <MemberSignature Language="F#" Value="override this.Rollback : System.Collections.IDictionary -&gt; unit" Usage="serviceProcessInstaller.Rollback savedState" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="savedState" Type="System.Collections.IDictionary" />
      </Parameters>
      <Docs>
        <param name="savedState">An <see cref="T:System.Collections.IDictionary" /> that contains the context information associated with the installation.</param>
        <summary>Rolls back service application information written to the registry by the installation procedure. This method is meant to be used by installation tools, which process the appropriate methods automatically.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Normalmente, no se llame a los métodos en <xref:System.ServiceProcess.ServiceProcessInstaller> dentro del código; se denomina generalmente solo por la utilidad de instalación. La utilidad de instalación llama automáticamente a la <xref:System.ServiceProcess.ServiceProcessInstaller.Install%2A?displayProperty=nameWithType> método durante el proceso de instalación. Deshace los errores, si es necesario, mediante una llamada a <xref:System.ServiceProcess.ServiceProcessInstaller.Rollback%2A> en el objeto que generó la excepción.  
  
 La rutina de instalación de la aplicación mantiene información automáticamente acerca de los componentes ya instalados, mediante el instalador de proyecto <xref:System.Configuration.Install.Installer.Context%2A?displayProperty=nameWithType>. Esta información de estado, se pasa en <xref:System.ServiceProcess.ServiceProcessInstaller.Rollback%2A> como el `savedState` parámetro, se actualiza continuamente en el <xref:System.ServiceProcess.ServiceProcessInstaller> instancia y cada uno <xref:System.ServiceProcess.ServiceInstaller> está instalada la instancia por la utilidad. Normalmente no es necesario para el código modificar esta información de estado de forma explícita.  
  
 <xref:System.ServiceProcess.ServiceProcessInstaller.Rollback%2A> pasa al método de llamada las excepciones producidas por los métodos de clase base o <xref:System.Configuration.Install.Installer.BeforeInstall>  /  <xref:System.Configuration.Install.Installer.AfterInstall> controladores de eventos.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">The <paramref name="savedState" /> is <see langword="null" />.  -or-  The <paramref name="savedState" /> is corrupted or non-existent.</exception>
        <altmember cref="M:System.ServiceProcess.ServiceProcessInstaller.Install(System.Collections.IDictionary)" />
        <altmember cref="T:System.Configuration.Install.ComponentInstaller" />
      </Docs>
    </Member>
    <Member MemberName="Username">
      <MemberSignature Language="C#" Value="public string Username { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Username" />
      <MemberSignature Language="DocId" Value="P:System.ServiceProcess.ServiceProcessInstaller.Username" />
      <MemberSignature Language="VB.NET" Value="Public Property Username As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Username { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Username : string with get, set" Usage="System.ServiceProcess.ServiceProcessInstaller.Username" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.TypeConverter("System.Diagnostics.Design.StringValueConverter, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the user account under which the service application will run.</summary>
        <value>La cuenta bajo la que se debe ejecutar el servicio. El valor predeterminado es una cadena vacía ("").</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.ServiceProcess.ServiceProcessInstaller.Username%2A> y <xref:System.ServiceProcess.ServiceProcessInstaller.Password%2A> par permite al servicio para ejecutarse bajo una cuenta distinta de la cuenta del sistema. Esto puede, por ejemplo, permitir que el servicio se inicie automáticamente en el reinicio, cuando ningún usuario haya iniciado sesión.  
  
 <xref:System.ServiceProcess.ServiceProcessInstaller.Password%2A> y <xref:System.ServiceProcess.ServiceProcessInstaller.Username%2A> se controlan de forma segura en que nunca se serializan ni se guardan en el estado de instalación (el instalador de proyecto <xref:System.Configuration.Install.Installer.Context%2A?displayProperty=nameWithType>) o en otra ubicación con acceso público.  
  
 Establecer el <xref:System.ServiceProcess.ServiceProcessInstaller.Username%2A> y <xref:System.ServiceProcess.ServiceProcessInstaller.Password%2A> permite que una cuenta que se asociará automáticamente con el servicio durante la instalación. Si se deja el <xref:System.ServiceProcess.ServiceProcessInstaller.Username%2A> o <xref:System.ServiceProcess.ServiceProcessInstaller.Password%2A> vacías y se establece <xref:System.ServiceProcess.ServiceProcessInstaller.Account%2A> a `User`, se le pedirá un nombre de usuario válido y una contraseña durante la instalación.  
  
 Otra opción para ejecutar un servicio en una cuenta independiente es utilizar la cuenta del sistema del equipo. Esta cuenta, que es distinta de la cuenta de administrador, requiere ninguna contraseña. Privilegios de la cuenta de sistema pueden superarlas del usuario que ha iniciado. Requiere que el servicio ejecutando bajo la cuenta del sistema en lugar de una cuenta de usuario evita problemas causados por el usuario no disponga del permiso  
  
 Si <xref:System.ServiceProcess.ServiceProcessInstaller.Account%2A> es cualquier valor distinto de `User`, se utiliza la cuenta especificada (local o servicio de red o sistema local), incluso si la <xref:System.ServiceProcess.ServiceProcessInstaller.Username%2A> y <xref:System.ServiceProcess.ServiceProcessInstaller.Password%2A> se rellenan las propiedades.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.ServiceProcess.ServiceProcessInstaller.Password" />
        <altmember cref="P:System.ServiceProcess.ServiceProcessInstaller.Account" />
        <altmember cref="T:System.ServiceProcess.Design.ServiceInstallerDialog" />
      </Docs>
    </Member>
  </Members>
</Type>