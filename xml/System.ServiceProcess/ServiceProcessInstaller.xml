<Type Name="ServiceProcessInstaller" FullName="System.ServiceProcess.ServiceProcessInstaller">
  <Metadata><Meta Name="ms.openlocfilehash" Value="c1fa4fdc5fa553fef872aec6911ff4febc226965" /><Meta Name="ms.sourcegitcommit" Value="4ee26ac79338b0bf99fa1e0913e8a06b21994d8e" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="es-ES" /><Meta Name="ms.lasthandoff" Value="03/26/2019" /><Meta Name="ms.locfileid" Value="58458100" /></Metadata><TypeSignature Language="C#" Value="public class ServiceProcessInstaller : System.Configuration.Install.ComponentInstaller" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit ServiceProcessInstaller extends System.Configuration.Install.ComponentInstaller" />
  <TypeSignature Language="DocId" Value="T:System.ServiceProcess.ServiceProcessInstaller" />
  <TypeSignature Language="VB.NET" Value="Public Class ServiceProcessInstaller&#xA;Inherits ComponentInstaller" />
  <TypeSignature Language="C++ CLI" Value="public ref class ServiceProcessInstaller : System::Configuration::Install::ComponentInstaller" />
  <TypeSignature Language="F#" Value="type ServiceProcessInstaller = class&#xA;    inherit ComponentInstaller" />
  <AssemblyInfo>
    <AssemblyName>System.ServiceProcess</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Configuration.Install.ComponentInstaller</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Instala un ejecutable que contiene clases que extienden <see cref="T:System.ServiceProcess.ServiceBase" />. Las utilidades de instalación, como InstallUtil.exe, llaman a esta clase al instalar una aplicación de servicio.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.ServiceProcess.ServiceProcessInstaller> trabajo común a todos los servicios en un archivo ejecutable. Es utilizado por la utilidad de instalación para escribir los valores del registro asociados con los servicios que desea instalar.  
  
 Para instalar un servicio, cree una clase de instalador de proyecto que herede de <xref:System.Configuration.Install.Installer>y establezca el <xref:System.ComponentModel.RunInstallerAttribute> en la clase para `true`. En el proyecto, cree instancias de uno <xref:System.ServiceProcess.ServiceProcessInstaller> instancia por cada aplicación de servicio y uno <xref:System.ServiceProcess.ServiceInstaller> instancia para cada servicio en la aplicación. Por último, agregue el <xref:System.ServiceProcess.ServiceProcessInstaller> instancia y el <xref:System.ServiceProcess.ServiceInstaller> instancias a la clase de instalador del proyecto.  
  
 Cuando se ejecuta InstallUtil.exe, la utilidad busca las clases del ensamblado de servicio con el <xref:System.ComponentModel.RunInstallerAttribute> establecido en `true`. Agregar clases al ensamblaje del servicio agregándolos a la <xref:System.Configuration.Install.Installer.Installers%2A> colección asociada al instalador del proyecto. Si <xref:System.ComponentModel.RunInstallerAttribute> es `false`, la utilidad de instalación omite el instalador del proyecto.  
  
 Para una instancia de <xref:System.ServiceProcess.ServiceProcessInstaller>, propiedades que puede modificar incluyen la especificación de que una aplicación de servicio se ejecute bajo una cuenta que no sea el usuario ha iniciado sesión. Puede especificar un determinado <xref:System.ServiceProcess.ServiceProcessInstaller.Username%2A> y <xref:System.ServiceProcess.ServiceProcessInstaller.Password%2A> par en la que se debe ejecutar el servicio, o puede usar <xref:System.ServiceProcess.ServiceProcessInstaller.Account%2A> para especificar que el servicio se ejecute bajo la cuenta del equipo del sistema, una variable local o cuenta de servicio de red o una cuenta de usuario.  
  
> [!NOTE]
>  La cuenta del equipo del sistema no es igual que la cuenta de administrador.  
  
 Normalmente, no se llame a los métodos en <xref:System.ServiceProcess.ServiceInstaller> dentro del código; por lo general se denominan únicamente por la utilidad de instalación. La utilidad de instalación llama automáticamente a la <xref:System.ServiceProcess.ServiceProcessInstaller.Install%2A?displayProperty=nameWithType> y <xref:System.ServiceProcess.ServiceInstaller.Install%2A?displayProperty=nameWithType> métodos durante el proceso de instalación. Deshace los errores, si es necesario, mediante una llamada a <xref:System.ServiceProcess.ServiceProcessInstaller.Rollback%2A> (o <xref:System.ServiceProcess.ServiceInstaller.Rollback%2A?displayProperty=nameWithType>) en todos los componentes instalados anteriormente.  
  
 La rutina de instalación de la aplicación mantiene información automáticamente acerca de los componentes ya instalados, mediante el instalador de proyecto <xref:System.Configuration.Install.Installer.Context%2A?displayProperty=nameWithType>. Esta información de estado se actualiza continuamente en el <xref:System.ServiceProcess.ServiceProcessInstaller> instancia y cada <xref:System.ServiceProcess.ServiceInstaller> instancia está instalada la utilidad. Normalmente no es necesario para el código modificar esta información de estado de forma explícita.  
  
 Crear una instancia de un <xref:System.ServiceProcess.ServiceProcessInstaller> hace que el constructor de clase base, <xref:System.Configuration.Install.ComponentInstaller.%23ctor%2A>, que se llame.  
  
   
  
## Examples  
 En el ejemplo siguiente se crea un instalador de proyecto denominado MyProjectInstaller, que hereda de <xref:System.Configuration.Install.Installer>. Se supone que hay un archivo ejecutable de servicio que contiene dos servicios: "Hello-World Service 1" y "Hello-World Service 2". En el constructor de MyProjectInstaller (que sería llamada por la utilidad de instalación), <xref:System.ServiceProcess.ServiceInstaller> objetos se crean para cada servicio y un <xref:System.ServiceProcess.ServiceProcessInstaller> se crea para el archivo ejecutable. La utilidad de instalación reconozca MyProjectInstaller como un instalador válido, el <xref:System.ComponentModel.RunInstallerAttribute> atributo está establecido en `true`.  
  
 Las propiedades opcionales se establecen en el instalador del proceso y los instaladores de servicio antes de que los instaladores se agregan a la <xref:System.Configuration.Install.Installer.Installers%2A> colección. Cuando la utilidad de instalación tiene acceso a MyProjectInstaller, los objetos se agregan a la <xref:System.Configuration.Install.Installer.Installers%2A> colección mediante una llamada a <xref:System.Configuration.Install.InstallerCollection.Add%2A?displayProperty=nameWithType> se instalará a su vez. Durante el proceso, el instalador mantiene información de estado que indica qué objetos se han instalado, por lo que cada objeto pueden descartarse a su vez en el caso de un error de instalación.  
  
 Normalmente, se podría no crear una instancia de la clase de instalador de proyecto explícitamente. ¿Cree y agregue el <xref:System.ComponentModel.RunInstallerAttribute>, pero realmente se llama a la utilidad de instalación y, por lo tanto, la clase, crea una instancia.  
  
 [!code-cpp[Classic ServiceInstaller Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic ServiceInstaller Example/CPP/source.cpp#1)]
 [!code-csharp[Classic ServiceInstaller Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic ServiceInstaller Example/CS/source.cs#1)]
 [!code-vb[Classic ServiceInstaller Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic ServiceInstaller Example/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.ServiceProcess.ServiceInstaller" />
    <altmember cref="T:System.ServiceProcess.ServiceBase" />
    <altmember cref="T:System.Configuration.Install.ComponentInstaller" />
    <altmember cref="P:System.Configuration.Install.Installer.Installers" />
    <altmember cref="T:System.ServiceProcess.ServiceAccount" />
    <altmember cref="T:System.ServiceProcess.Design.ServiceInstallerDialog" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ServiceProcessInstaller ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceProcess.ServiceProcessInstaller.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ServiceProcessInstaller();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Crea una nueva instancia de la clase <see cref="T:System.ServiceProcess.ServiceProcessInstaller" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Account">
      <MemberSignature Language="C#" Value="public System.ServiceProcess.ServiceAccount Account { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.ServiceProcess.ServiceAccount Account" />
      <MemberSignature Language="DocId" Value="P:System.ServiceProcess.ServiceProcessInstaller.Account" />
      <MemberSignature Language="VB.NET" Value="Public Property Account As ServiceAccount" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::ServiceProcess::ServiceAccount Account { System::ServiceProcess::ServiceAccount get(); void set(System::ServiceProcess::ServiceAccount value); };" />
      <MemberSignature Language="F#" Value="member this.Account : System.ServiceProcess.ServiceAccount with get, set" Usage="System.ServiceProcess.ServiceProcessInstaller.Account" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ServiceProcess.ServiceProcessDescription("ServiceProcessInstallerAccount")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.ServiceProcess.ServiceAccount</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene o establece el tipo de cuenta en la que se ejecutará esta aplicación de servicio.</summary>
        <value><see cref="T:System.ServiceProcess.ServiceAccount" /> que define el tipo de cuenta en la que el sistema ejecuta este servicio. De manera predeterminada, es <see langword="User" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cuando el <xref:System.ServiceProcess.ServiceProcessInstaller.Account%2A> propiedad es `User`, <xref:System.ServiceProcess.ServiceProcessInstaller.Username%2A> y <xref:System.ServiceProcess.ServiceProcessInstaller.Password%2A> propiedades se utilizan para definir una cuenta que se ejecuta la aplicación de servicio.  
  
 El <xref:System.ServiceProcess.ServiceProcessInstaller.Username%2A> y <xref:System.ServiceProcess.ServiceProcessInstaller.Password%2A> par permite al servicio ejecutarse bajo una cuenta distinta de la cuenta del sistema. Esto puede, por ejemplo, permitir que el servicio se inicie automáticamente en el reinicio, cuando ningún usuario haya iniciado sesión. Si se deja el <xref:System.ServiceProcess.ServiceProcessInstaller.Username%2A> o <xref:System.ServiceProcess.ServiceProcessInstaller.Password%2A> vacías y se establece <xref:System.ServiceProcess.ServiceProcessInstaller.Account%2A> a `User`, se le pedirá un nombre de usuario válido y una contraseña en la instalación.  
  
 También puede especificar que el servicio se ejecute bajo la cuenta sistema local o como una variable local o servicio de red. Consulte la <xref:System.ServiceProcess.ServiceAccount> enumeración para obtener más información sobre los tipos de cuentas.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.ServiceProcess.ServiceProcessInstaller.Username" />
        <altmember cref="P:System.ServiceProcess.ServiceProcessInstaller.Password" />
        <altmember cref="T:System.ServiceProcess.ServiceAccount" />
        <altmember cref="T:System.ServiceProcess.Design.ServiceInstallerDialog" />
      </Docs>
    </Member>
    <Member MemberName="CopyFromComponent">
      <MemberSignature Language="C#" Value="public override void CopyFromComponent (System.ComponentModel.IComponent comp);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void CopyFromComponent(class System.ComponentModel.IComponent comp) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceProcess.ServiceProcessInstaller.CopyFromComponent(System.ComponentModel.IComponent)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub CopyFromComponent (comp As IComponent)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void CopyFromComponent(System::ComponentModel::IComponent ^ comp);" />
      <MemberSignature Language="F#" Value="override this.CopyFromComponent : System.ComponentModel.IComponent -&gt; unit" Usage="serviceProcessInstaller.CopyFromComponent comp" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="comp" Type="System.ComponentModel.IComponent" />
      </Parameters>
      <Docs>
        <param name="comp"><see cref="T:System.ComponentModel.IComponent" /> que representa el proceso de servicio.</param>
        <summary>Implementa el método <see cref="M:System.Configuration.Install.ComponentInstaller.CopyFromComponent(System.ComponentModel.IComponent)" /> de la clase base sin un comportamiento específico de la clase <see cref="T:System.ServiceProcess.ServiceProcessInstaller" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 No se debe llamar a este método dentro del código. El método de clase base en <xref:System.Configuration.Install.ComponentInstaller> es `abstract`, por lo que se implementa aquí en la clase derivada. Sin embargo, no hay ningún <xref:System.ServiceProcess.ServiceProcessInstaller> específicas de la clase de procesamiento en la implementación del método.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.ServiceProcess.ServiceProcessInstaller.Install(System.Collections.IDictionary)" />
        <altmember cref="M:System.ServiceProcess.ServiceProcessInstaller.Rollback(System.Collections.IDictionary)" />
      </Docs>
    </Member>
    <Member MemberName="HelpText">
      <MemberSignature Language="C#" Value="public override string HelpText { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string HelpText" />
      <MemberSignature Language="DocId" Value="P:System.ServiceProcess.ServiceProcessInstaller.HelpText" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property HelpText As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ HelpText { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.HelpText : string" Usage="System.ServiceProcess.ServiceProcessInstaller.HelpText" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene un texto de ayuda que se muestra para las opciones de instalación del servicio.</summary>
        <value>Texto de ayuda que proporciona una descripción de los pasos necesarios para establecer el nombre de usuario y la contraseña a fin de ejecutar el servicio en una cuenta determinada.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este texto de ayuda puede usarse cuando se inicia un servicio manualmente. Indica al usuario cómo especificar información de nombre y la contraseña de usuario.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.ServiceProcess.ServiceProcessInstaller.Username" />
        <altmember cref="P:System.ServiceProcess.ServiceProcessInstaller.Password" />
      </Docs>
    </Member>
    <Member MemberName="Install">
      <MemberSignature Language="C#" Value="public override void Install (System.Collections.IDictionary stateSaver);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Install(class System.Collections.IDictionary stateSaver) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceProcess.ServiceProcessInstaller.Install(System.Collections.IDictionary)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Install (stateSaver As IDictionary)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Install(System::Collections::IDictionary ^ stateSaver);" />
      <MemberSignature Language="F#" Value="override this.Install : System.Collections.IDictionary -&gt; unit" Usage="serviceProcessInstaller.Install stateSaver" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stateSaver" Type="System.Collections.IDictionary" />
      </Parameters>
      <Docs>
        <param name="stateSaver"><see cref="T:System.Collections.IDictionary" /> que contiene la información de contexto asociada a la instalación.</param>
        <summary>Escribe información de la aplicación de servicio en el Registro. Este método está pensado para que lo utilicen las herramientas de instalación, que llaman automáticamente a los métodos adecuados.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Normalmente, no se llame a los métodos en <xref:System.ServiceProcess.ServiceProcessInstaller> dentro del código; por lo general se denominan únicamente por la utilidad de instalación. La utilidad de instalación llama automáticamente a la <xref:System.ServiceProcess.ServiceProcessInstaller.Install%2A?displayProperty=nameWithType> método durante el proceso de instalación. Deshace los errores, si es necesario, mediante una llamada a <xref:System.ServiceProcess.ServiceProcessInstaller.Rollback%2A> en todos los componentes instalados anteriormente. Este método pasa la instalación a la clase base <xref:System.Configuration.Install.Installer.Install%2A?displayProperty=nameWithType> método.  
  
 Normalmente, no se llamará a los métodos en <xref:System.ServiceProcess.ServiceInstaller> dentro del código; por lo general se denominan únicamente por la utilidad de instalación. La utilidad de instalación llama automáticamente a la <xref:System.ServiceProcess.ServiceProcessInstaller.Install%2A?displayProperty=nameWithType> y <xref:System.ServiceProcess.ServiceInstaller.Install%2A?displayProperty=nameWithType> métodos durante el proceso de instalación. Deshace los errores, si es necesario, mediante una llamada a <xref:System.ServiceProcess.ServiceProcessInstaller.Rollback%2A> (o <xref:System.ServiceProcess.ServiceInstaller.Rollback%2A?displayProperty=nameWithType>) en todos los componentes instalados anteriormente  
  
 La rutina de instalación de la aplicación mantiene información automáticamente acerca de los componentes ya instalados, mediante el instalador de proyecto <xref:System.Configuration.Install.Installer.Context%2A?displayProperty=nameWithType>. Esta información de estado, se pasa a <xref:System.ServiceProcess.ServiceProcessInstaller.Install%2A> como el `stateSaver` parámetro, se actualiza continuamente en el <xref:System.ServiceProcess.ServiceProcessInstaller> instancia y cada <xref:System.ServiceProcess.ServiceInstaller> instancia está instalada la utilidad. Normalmente no es necesario para el código modificar esta información de estado de forma explícita.  
  
 <xref:System.ServiceProcess.ServiceProcessInstaller.Install%2A> pasa al método de llamada las excepciones producidas por métodos de clase base o <xref:System.Configuration.Install.Installer.BeforeInstall>  /  <xref:System.Configuration.Install.Installer.AfterInstall> controladores de eventos.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">El valor de <paramref name="stateSaver" /> es <see langword="null" />.</exception>
        <altmember cref="M:System.ServiceProcess.ServiceProcessInstaller.Rollback(System.Collections.IDictionary)" />
        <altmember cref="M:System.Configuration.Install.Installer.Commit(System.Collections.IDictionary)" />
        <altmember cref="M:System.Configuration.Install.Installer.Uninstall(System.Collections.IDictionary)" />
      </Docs>
    </Member>
    <Member MemberName="Password">
      <MemberSignature Language="C#" Value="public string Password { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Password" />
      <MemberSignature Language="DocId" Value="P:System.ServiceProcess.ServiceProcessInstaller.Password" />
      <MemberSignature Language="VB.NET" Value="Public Property Password As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Password { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Password : string with get, set" Usage="System.ServiceProcess.ServiceProcessInstaller.Password" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene o establece la contraseña asociada a la cuenta de usuario en la que se ejecuta la aplicación de servicio.</summary>
        <value>La contraseña asociada a la cuenta en la que se debe ejecutar el servicio. El valor predeterminado es una cadena vacía (""). La propiedad no es pública y nunca se serializa.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.ServiceProcess.ServiceProcessInstaller.Password%2A> y <xref:System.ServiceProcess.ServiceProcessInstaller.Username%2A> par permite al servicio ejecutarse bajo una cuenta distinta de la cuenta del sistema. Esto puede, por ejemplo, permitir que el servicio se inicie automáticamente en el reinicio, cuando ningún usuario haya iniciado sesión.  
  
 <xref:System.ServiceProcess.ServiceProcessInstaller.Password%2A> y <xref:System.ServiceProcess.ServiceProcessInstaller.Username%2A> se controlan de forma segura en que nunca se serializa ni se guardan en el estado de instalación (el instalador de proyecto <xref:System.Configuration.Install.Installer.Context%2A?displayProperty=nameWithType>) o en otra ubicación con acceso público.  
  
 Establecer el <xref:System.ServiceProcess.ServiceProcessInstaller.Username%2A> y <xref:System.ServiceProcess.ServiceProcessInstaller.Password%2A> permite una cuenta que se asociará automáticamente con el servicio en tiempo de instalación. Si se deja el <xref:System.ServiceProcess.ServiceProcessInstaller.Username%2A> o <xref:System.ServiceProcess.ServiceProcessInstaller.Password%2A> vacías y se establece <xref:System.ServiceProcess.ServiceProcessInstaller.Account%2A> a `User`, se le pedirá un nombre de usuario válido y una contraseña en la instalación.  
  
 Otra opción para ejecutar un servicio en una cuenta independiente es usar la cuenta del equipo del sistema. Esta cuenta, que es distinta de la cuenta de administrador, requiere ninguna contraseña. Privilegios de la cuenta del sistema pueden superarlas del usuario conectado actualmente. Requiere que el servicio que se ejecutan en la cuenta del sistema en lugar de una cuenta de usuario evita los problemas originados por el usuario no disponga del permiso  
  
 Si <xref:System.ServiceProcess.ServiceProcessInstaller.Account%2A> es cualquier valor distinto de `User`, se utiliza la cuenta especificada (local o servicio de red o sistema local), incluso si la <xref:System.ServiceProcess.ServiceProcessInstaller.Username%2A> y <xref:System.ServiceProcess.ServiceProcessInstaller.Password%2A> se rellenan las propiedades.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.ServiceProcess.ServiceProcessInstaller.Username" />
        <altmember cref="P:System.ServiceProcess.ServiceProcessInstaller.Account" />
        <altmember cref="T:System.ServiceProcess.Design.ServiceInstallerDialog" />
      </Docs>
    </Member>
    <Member MemberName="Rollback">
      <MemberSignature Language="C#" Value="public override void Rollback (System.Collections.IDictionary savedState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Rollback(class System.Collections.IDictionary savedState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceProcess.ServiceProcessInstaller.Rollback(System.Collections.IDictionary)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Rollback (savedState As IDictionary)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Rollback(System::Collections::IDictionary ^ savedState);" />
      <MemberSignature Language="F#" Value="override this.Rollback : System.Collections.IDictionary -&gt; unit" Usage="serviceProcessInstaller.Rollback savedState" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="savedState" Type="System.Collections.IDictionary" />
      </Parameters>
      <Docs>
        <param name="savedState"><see cref="T:System.Collections.IDictionary" /> que contiene la información de contexto asociada a la instalación.</param>
        <summary>Deshace la información de la aplicación de servicio que el procedimiento de instalación escribió en el Registro. Este método está pensado para que lo utilicen las herramientas de instalación que procesan automáticamente los métodos apropiados.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Normalmente, no se llame a los métodos en <xref:System.ServiceProcess.ServiceProcessInstaller> dentro del código; por lo general se denominan únicamente por la utilidad de instalación. La utilidad de instalación llama automáticamente a la <xref:System.ServiceProcess.ServiceProcessInstaller.Install%2A?displayProperty=nameWithType> método durante el proceso de instalación. Deshace los errores, si es necesario, mediante una llamada a <xref:System.ServiceProcess.ServiceProcessInstaller.Rollback%2A> en el objeto que generó la excepción.  
  
 La rutina de instalación de la aplicación mantiene información automáticamente acerca de los componentes ya instalados, mediante el instalador de proyecto <xref:System.Configuration.Install.Installer.Context%2A?displayProperty=nameWithType>. Esta información de estado, se pasa a <xref:System.ServiceProcess.ServiceProcessInstaller.Rollback%2A> como el `savedState` parámetro, se actualiza continuamente en el <xref:System.ServiceProcess.ServiceProcessInstaller> instancia y cada <xref:System.ServiceProcess.ServiceInstaller> instancia está instalada la utilidad. Normalmente no es necesario para el código modificar esta información de estado de forma explícita.  
  
 <xref:System.ServiceProcess.ServiceProcessInstaller.Rollback%2A> pasa al método de llamada las excepciones producidas por métodos de clase base o <xref:System.Configuration.Install.Installer.BeforeInstall>  /  <xref:System.Configuration.Install.Installer.AfterInstall> controladores de eventos.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">El valor de <paramref name="savedState" /> es <see langword="null" />.  
  
O bien 
El parámetro <paramref name="savedState" /> está dañado o no existe.</exception>
        <altmember cref="M:System.ServiceProcess.ServiceProcessInstaller.Install(System.Collections.IDictionary)" />
        <altmember cref="T:System.Configuration.Install.ComponentInstaller" />
      </Docs>
    </Member>
    <Member MemberName="Username">
      <MemberSignature Language="C#" Value="public string Username { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Username" />
      <MemberSignature Language="DocId" Value="P:System.ServiceProcess.ServiceProcessInstaller.Username" />
      <MemberSignature Language="VB.NET" Value="Public Property Username As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Username { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Username : string with get, set" Usage="System.ServiceProcess.ServiceProcessInstaller.Username" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.TypeConverter("System.Diagnostics.Design.StringValueConverter, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1">
          <AttributeName>System.ComponentModel.TypeConverter("System.Diagnostics.Design.StringValueConverter, System.Design, Version=1.0.5000.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5">
          <AttributeName>System.ComponentModel.TypeConverter("System.Diagnostics.Design.StringValueConverter, System.Design, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene o establece la cuenta de usuario en la que se ejecutará la aplicación de servicio.</summary>
        <value>La cuenta en la que tiene que ejecutarse el servicio. El valor predeterminado es una cadena vacía ("").</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.ServiceProcess.ServiceProcessInstaller.Username%2A> y <xref:System.ServiceProcess.ServiceProcessInstaller.Password%2A> par permite al servicio ejecutarse bajo una cuenta distinta de la cuenta del sistema. Esto puede, por ejemplo, permitir que el servicio se inicie automáticamente en el reinicio, cuando ningún usuario haya iniciado sesión.  
  
 <xref:System.ServiceProcess.ServiceProcessInstaller.Password%2A> y <xref:System.ServiceProcess.ServiceProcessInstaller.Username%2A> se controlan de forma segura en que nunca se serializa ni se guardan en el estado de instalación (el instalador de proyecto <xref:System.Configuration.Install.Installer.Context%2A?displayProperty=nameWithType>) o en otra ubicación con acceso público.  
  
 Establecer el <xref:System.ServiceProcess.ServiceProcessInstaller.Username%2A> y <xref:System.ServiceProcess.ServiceProcessInstaller.Password%2A> permite una cuenta que se asociará automáticamente con el servicio en tiempo de instalación. Si se deja el <xref:System.ServiceProcess.ServiceProcessInstaller.Username%2A> o <xref:System.ServiceProcess.ServiceProcessInstaller.Password%2A> vacías y se establece <xref:System.ServiceProcess.ServiceProcessInstaller.Account%2A> a `User`, se le pedirá un nombre de usuario válido y una contraseña en la instalación.  
  
 Otra opción para ejecutar un servicio en una cuenta independiente es usar la cuenta del equipo del sistema. Esta cuenta, que es distinta de la cuenta de administrador, requiere ninguna contraseña. Privilegios de la cuenta del sistema pueden superarlas del usuario conectado actualmente. Requiere que el servicio que se ejecutan en la cuenta del sistema en lugar de una cuenta de usuario evita los problemas originados por el usuario no disponga del permiso  
  
 Si <xref:System.ServiceProcess.ServiceProcessInstaller.Account%2A> es cualquier valor distinto de `User`, se utiliza la cuenta especificada (local o servicio de red o sistema local), incluso si la <xref:System.ServiceProcess.ServiceProcessInstaller.Username%2A> y <xref:System.ServiceProcess.ServiceProcessInstaller.Password%2A> se rellenan las propiedades.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.ServiceProcess.ServiceProcessInstaller.Password" />
        <altmember cref="P:System.ServiceProcess.ServiceProcessInstaller.Account" />
        <altmember cref="T:System.ServiceProcess.Design.ServiceInstallerDialog" />
      </Docs>
    </Member>
  </Members>
</Type>