<Type Name="ServiceInstaller" FullName="System.ServiceProcess.ServiceInstaller">
  <Metadata><Meta Name="ms.openlocfilehash" Value="5f792f269c705609bda7c858826060ba7cb5bb57" /><Meta Name="ms.sourcegitcommit" Value="756d085f27705e86604f1bba5f2086ee23761acf" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="es-ES" /><Meta Name="ms.lasthandoff" Value="01/30/2019" /><Meta Name="ms.locfileid" Value="55364613" /></Metadata><TypeSignature Language="C#" Value="public class ServiceInstaller : System.Configuration.Install.ComponentInstaller" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit ServiceInstaller extends System.Configuration.Install.ComponentInstaller" />
  <TypeSignature Language="DocId" Value="T:System.ServiceProcess.ServiceInstaller" />
  <TypeSignature Language="VB.NET" Value="Public Class ServiceInstaller&#xA;Inherits ComponentInstaller" />
  <TypeSignature Language="C++ CLI" Value="public ref class ServiceInstaller : System::Configuration::Install::ComponentInstaller" />
  <TypeSignature Language="F#" Value="type ServiceInstaller = class&#xA;    inherit ComponentInstaller" />
  <AssemblyInfo>
    <AssemblyName>System.ServiceProcess</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Configuration.Install.ComponentInstaller</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Instala una clase que extiende <see cref="T:System.ServiceProcess.ServiceBase" /> para implementar un servicio. La utilidad de instalación llama a esta clase al instalar una aplicación de servicio.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.ServiceProcess.ServiceInstaller> funciona de forma específica para el servicio que está asociado. Es utilizado por la utilidad de instalación para escribir los valores del registro asociados con el servicio a una subclave de la clave del registro HKEY_LOCAL_MACHINE\System\CurrentControlSet\Services. El servicio se identifica mediante su propiedad ServiceName dentro de esta subclave. La subclave también incluye el nombre del archivo ejecutable o .dll al que pertenece el servicio.  
  
 Para instalar un servicio, cree una clase de instalador de proyecto que herede de la <xref:System.Configuration.Install.Installer> clase y establezca el <xref:System.ComponentModel.RunInstallerAttribute> atributo en la clase para `true`. Dentro del proyecto, cree uno <xref:System.ServiceProcess.ServiceProcessInstaller> instancia por cada aplicación de servicio y uno <xref:System.ServiceProcess.ServiceInstaller> instancia para cada servicio en la aplicación. Dentro de su constructor de clase de instalador de proyecto, establezca las propiedades de instalación para el servicio utilizando el <xref:System.ServiceProcess.ServiceProcessInstaller> y <xref:System.ServiceProcess.ServiceInstaller> instancias y agregue las instancias a la <xref:System.Configuration.Install.Installer.Installers%2A> colección.  
  
> [!NOTE]
>  Se recomienda que utilice el constructor para agregar instancias del instalador; Sin embargo, si tiene que agregar a la <xref:System.Configuration.Install.Installer.Installers%2A> colección en el <xref:System.ServiceProcess.ServiceInstaller.Install%2A> método, asegúrese de realizar las mismas adiciones a la colección en el <xref:System.ServiceProcess.ServiceInstaller.Uninstall%2A> método.  
  
 Para todas las clases derivadas de la <xref:System.Configuration.Install.Installer> clase, el estado de la <xref:System.Configuration.Install.Installer.Installers%2A> colección debe ser el mismo en el <xref:System.ServiceProcess.ServiceInstaller.Install%2A> y <xref:System.ServiceProcess.ServiceInstaller.Uninstall%2A> métodos. Sin embargo, puede evitar el mantenimiento de la colección a través de la <xref:System.ServiceProcess.ServiceInstaller.Install%2A> y <xref:System.ServiceProcess.ServiceInstaller.Uninstall%2A> métodos si agrega instancias del instalador para el <xref:System.Configuration.Install.Installer.Installers%2A> colección en el constructor de clase de instalador personalizado. Cuando se llama a la utilidad de instalación, busca el <xref:System.ComponentModel.RunInstallerAttribute> atributo. Si el atributo es `true`, la utilidad instala todos los servicios que se agregaron a la <xref:System.Configuration.Install.Installer.Installers%2A> colección que se asociaron con el instalador de proyecto. Si <xref:System.ComponentModel.RunInstallerAttribute> es `false` o existe, la utilidad de instalación omite el instalador del proyecto.  
  
 El <xref:System.ServiceProcess.ServiceProcessInstaller> asociado con la información de instalación clase instalaciones de proyecto comunes a todos los <xref:System.ServiceProcess.ServiceInstaller> instancias en el proyecto. Si este servicio tiene todo lo que lo separa de los demás servicios en el proyecto de instalación, esa información específica del servicio está instalada, este método.  
  
> [!NOTE]
>  Es fundamental que el <xref:System.ServiceProcess.ServiceInstaller.ServiceName%2A> ser idéntica a la <xref:System.ServiceProcess.ServiceBase.ServiceName%2A?displayProperty=nameWithType> de la clase que deriva de <xref:System.ServiceProcess.ServiceBase>. Normalmente, el valor de la <xref:System.ServiceProcess.ServiceBase.ServiceName%2A?displayProperty=nameWithType> es establecer la propiedad para el servicio en la función Main() del ejecutable de la aplicación de servicio. El Administrador de Control de servicios usa el <xref:System.ServiceProcess.ServiceInstaller.ServiceName%2A?displayProperty=nameWithType> propiedad para buscar el servicio en este archivo ejecutable.  
  
 Puede modificar otras propiedades en el <xref:System.ServiceProcess.ServiceInstaller> ya sea antes o después de agregarlo a la <xref:System.Configuration.Install.Installer.Installers%2A> colección del instalador del proyecto. Por ejemplo, un servicio <xref:System.ServiceProcess.ServiceInstaller.StartType%2A> puede establecerse para iniciar el servicio automáticamente al reiniciar o requerir que un usuario iniciar el servicio manualmente.  
  
 Normalmente, no se llamará a los métodos en <xref:System.ServiceProcess.ServiceInstaller> dentro del código; por lo general se denominan únicamente por la utilidad de instalación. La utilidad de instalación llama automáticamente a la <xref:System.ServiceProcess.ServiceProcessInstaller.Install%2A?displayProperty=nameWithType> y <xref:System.ServiceProcess.ServiceInstaller.Install%2A?displayProperty=nameWithType> métodos durante el proceso de instalación. Deshace los errores, si es necesario, mediante una llamada a <xref:System.ServiceProcess.ServiceProcessInstaller.Rollback%2A> (o <xref:System.ServiceProcess.ServiceInstaller.Rollback%2A?displayProperty=nameWithType>) en todos los componentes instalados anteriormente.  
  
 La utilidad de instalación llama <xref:System.ServiceProcess.ServiceInstaller.Uninstall%2A> para quitar el objeto.  
  
 La rutina de instalación de la aplicación mantiene información automáticamente acerca de los componentes ya instalados, mediante el instalador de proyecto <xref:System.Configuration.Install.Installer.Context%2A?displayProperty=nameWithType>. Esta información de estado se actualiza continuamente en el <xref:System.ServiceProcess.ServiceProcessInstaller> instancia y cada <xref:System.ServiceProcess.ServiceInstaller> instancia está instalada la utilidad. Normalmente no es necesario para el código modificar información de estado de forma explícita.  
  
 Cuando se realiza la instalación, crea automáticamente un <xref:System.Diagnostics.EventLogInstaller> para instalar el origen de registro de eventos asociado a la <xref:System.ServiceProcess.ServiceBase> clase derivada. El <xref:System.Diagnostics.EventLog.Log%2A> establece la propiedad para este origen de la <xref:System.ServiceProcess.ServiceInstaller.%23ctor%2A> constructor al registro de aplicación del equipo. Al establecer el <xref:System.ServiceProcess.ServiceInstaller.ServiceName%2A> de la <xref:System.ServiceProcess.ServiceInstaller> (que debería ser idéntica a la <xref:System.ServiceProcess.ServiceBase.ServiceName%2A?displayProperty=nameWithType> del servicio), el <xref:System.Diagnostics.EventLog.Source%2A> se establece automáticamente en el mismo valor. En un error de instalación, la instalación del origen es revertida junto con los servicios instalados anteriormente.  
  
 El <xref:System.ServiceProcess.ServiceInstaller.Uninstall%2A> método intenta detener el servicio si se está ejecutando. Si esto se realiza correctamente o no, <xref:System.ServiceProcess.ServiceInstaller.Uninstall%2A> deshace los cambios realizados por <xref:System.ServiceProcess.ServiceInstaller.Install%2A>. Si se creó un nuevo origen para el registro de eventos, se elimina el origen.  
  
   
  
## Examples  
 En el ejemplo siguiente se crea un instalador del proyecto, denominado `MyProjectInstaller`, que hereda de <xref:System.Configuration.Install.Installer>. Se supone que hay un archivo ejecutable de servicio que contiene dos servicios: "Hello-World Service 1" y "Hello-World Service 2". En el constructor de `MyProjectInstaller` (que podría llamarse mediante la utilidad de instalación), <xref:System.ServiceProcess.ServiceInstaller> objetos se crean para cada uno de estos servicios y un <xref:System.ServiceProcess.ServiceProcessInstaller> se crea para el archivo ejecutable. La utilidad de instalación para que reconozca `MyProjectInstaller` como un instalador válido, el <xref:System.ComponentModel.RunInstallerAttribute> atributo está establecido en `true`.  
  
 Las propiedades opcionales se establecen en el instalador del proceso y los instaladores de servicio antes de que los instaladores se agregan a la <xref:System.Configuration.Install.Installer.Installers%2A> colección. Cuando obtiene acceso la utilidad de instalación `MyProjectInstaller`, los objetos agregados a la <xref:System.Configuration.Install.Installer.Installers%2A> colección mediante una llamada a <xref:System.Configuration.Install.InstallerCollection.Add%2A?displayProperty=nameWithType> se instalará a su vez. Durante el proceso, el instalador mantiene información de estado que indica qué objetos se han instalado, por lo que cada uno puede descartarse a su vez, si se produce un error de instalación.  
  
 Normalmente, no podría crear explícitamente una instancia de la clase de instalador del proyecto. ¿Crearlo y agregar el <xref:System.ComponentModel.RunInstallerAttribute> atributo a la sintaxis, pero es la utilidad de instalación que realmente llama y, por lo tanto, la clase, crea una instancia.  
  
 [!code-cpp[Classic ServiceInstaller Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic ServiceInstaller Example/CPP/source.cpp#1)]
 [!code-csharp[Classic ServiceInstaller Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic ServiceInstaller Example/CS/source.cs#1)]
 [!code-vb[Classic ServiceInstaller Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic ServiceInstaller Example/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="P:System.ServiceProcess.ServiceBase.ServiceName" />
    <altmember cref="T:System.ServiceProcess.ServiceProcessInstaller" />
    <altmember cref="T:System.ServiceProcess.ServiceBase" />
    <altmember cref="P:System.ServiceProcess.ServiceBase.EventLog" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ServiceInstaller ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceProcess.ServiceInstaller.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ServiceInstaller();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Inicializa una nueva instancia de la clase <see cref="T:System.ServiceProcess.ServiceInstaller" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Para instalar un servicio, cree una clase de instalador de proyecto que herede de la <xref:System.Configuration.Install.Installer> clase y establezca el <xref:System.ComponentModel.RunInstallerAttribute> atributo en la clase para `true`. Dentro del proyecto, cree uno <xref:System.ServiceProcess.ServiceProcessInstaller> instancia por cada aplicación de servicio y uno <xref:System.ServiceProcess.ServiceInstaller> instancia para cada servicio en la aplicación. Dentro de su constructor de clase de instalador de proyecto, establezca las propiedades de instalación para el servicio utilizando el <xref:System.ServiceProcess.ServiceProcessInstaller> y <xref:System.ServiceProcess.ServiceInstaller> instancias y agregue las instancias a la <xref:System.Configuration.Install.Installer.Installers%2A> colección.  
  
 El <xref:System.ServiceProcess.ServiceInstaller.%23ctor%2A> constructor genera automáticamente un registro de eventos cuyo origen <xref:System.Diagnostics.EventLog.Log%2A> propiedad está establecida en el registro de aplicación del equipo y un <xref:System.Diagnostics.EventLogInstaller>. Al establecer el <xref:System.ServiceProcess.ServiceInstaller.ServiceName%2A> de la <xref:System.ServiceProcess.ServiceInstaller>, que debería ser idéntica a la <xref:System.ServiceProcess.ServiceBase.ServiceName%2A?displayProperty=nameWithType> del servicio, el <xref:System.Diagnostics.EventLog.Source%2A> propiedad el registro de eventos se establece automáticamente en el mismo valor. El origen se elimina automáticamente en el caso de un error de instalación.  
  
 El <xref:System.ServiceProcess.ServiceInstaller.%23ctor%2A> constructor establece el <xref:System.ServiceProcess.ServiceInstaller.StartType%2A> propiedad `ServiceStartMode.Manual` para especificar que un usuario inicie el servicio. Puede restablecer la propiedad a `ServiceStartMode.Automatic` para especificar que el servicio se inicia cuando se reinicia el equipo.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Diagnostics.EventLog" />
        <altmember cref="T:System.ServiceProcess.ServiceStartMode" />
      </Docs>
    </Member>
    <Member MemberName="CopyFromComponent">
      <MemberSignature Language="C#" Value="public override void CopyFromComponent (System.ComponentModel.IComponent component);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void CopyFromComponent(class System.ComponentModel.IComponent component) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceProcess.ServiceInstaller.CopyFromComponent(System.ComponentModel.IComponent)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub CopyFromComponent (component As IComponent)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void CopyFromComponent(System::ComponentModel::IComponent ^ component);" />
      <MemberSignature Language="F#" Value="override this.CopyFromComponent : System.ComponentModel.IComponent -&gt; unit" Usage="serviceInstaller.CopyFromComponent component" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="component" Type="System.ComponentModel.IComponent" />
      </Parameters>
      <Docs>
        <param name="component"><see cref="T:System.ComponentModel.IComponent" /> del que se va a copiar.</param>
        <summary>Copia propiedades de una instancia de <see cref="T:System.ServiceProcess.ServiceBase" /> en este instalador.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este método se llamará rara vez dentro del código. <xref:System.ServiceProcess.ServiceInstaller.CopyFromComponent%2A> Normalmente se denomina solo por los diseñadores.  
  
 <xref:System.ServiceProcess.ServiceInstaller.CopyFromComponent%2A> guarda el nombre del servicio de la `component` parámetro para el <xref:System.ServiceProcess.ServiceInstaller.ServiceName%2A> de la <xref:System.ServiceProcess.ServiceInstaller> instancia. (Dado que el parámetro debe ser una instancia de una clase que deriva de <xref:System.ServiceProcess.ServiceBase>, `component` se garantiza que tenga un <xref:System.ServiceProcess.ServiceBase.ServiceName%2A?displayProperty=nameWithType> propiedad.)  
  
> [!NOTE]
>  Si usa el Diseñador de Visual Studio, este método se llama en tiempo de diseño cuando el usuario hace clic en `Add Installer` en un componente que especificó esta clase como su programa de instalación. El programa de instalación toma toda la información que puede del componente activo y la almacena para su uso en tiempo de instalación.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">El componente que está asociando a este instalador no hereda de <see cref="T:System.ServiceProcess.ServiceBase" />.</exception>
        <altmember cref="M:System.ServiceProcess.ServiceProcessInstaller.CopyFromComponent(System.ComponentModel.IComponent)" />
      </Docs>
    </Member>
    <Member MemberName="DelayedAutoStart">
      <MemberSignature Language="C#" Value="public bool DelayedAutoStart { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool DelayedAutoStart" />
      <MemberSignature Language="DocId" Value="P:System.ServiceProcess.ServiceInstaller.DelayedAutoStart" />
      <MemberSignature Language="VB.NET" Value="Public Property DelayedAutoStart As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool DelayedAutoStart { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.DelayedAutoStart : bool with get, set" Usage="System.ServiceProcess.ServiceInstaller.DelayedAutoStart" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ServiceProcess.ServiceProcessDescription("ServiceInstallerDelayedAutoStart")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene o establece un valor que indica si el servicio debe retrasar su inicio hasta que otros servicios iniciados automáticamente se ejecuten.</summary>
        <value>Es <see langword="true" /> para retrasar el inicio automático del servicio; de lo contrario, es <see langword="false" />. De manera predeterminada, es <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.ServiceProcess.ServiceInstaller.DelayedAutoStart%2A> propiedad se puede aplicar a cualquier servicio, pero se omite a menos que el modo de inicio del servicio es <xref:System.ServiceProcess.ServiceStartMode.Automatic>. La configuración surte efecto la próxima vez que se reinicie el sistema. El Administrador de Control de servicio no garantiza un tiempo de inicio específica para el servicio.  
  
 Un servicio de inicio automático demorado no puede ser un miembro de un grupo de orden de carga, pero puede depender de otro servicio de inicio automático. Si una aplicación llama a un servicio de inicio automático demorado antes de cargarse, se produce un error en la llamada.  
  
 En sistemas operativos que no admiten el inicio automático demorado, establecer esta propiedad no tiene ningún efecto.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Description">
      <MemberSignature Language="C#" Value="public string Description { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Description" />
      <MemberSignature Language="DocId" Value="P:System.ServiceProcess.ServiceInstaller.Description" />
      <MemberSignature Language="VB.NET" Value="Public Property Description As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Description { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Description : string with get, set" Usage="System.ServiceProcess.ServiceInstaller.Description" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ServiceProcess.ServiceProcessDescription("ServiceInstallerDescription")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene o establece la descripción del servicio.</summary>
        <value>La descripción del servicio. El valor predeterminado es una cadena vacía ("").</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use el <xref:System.ServiceProcess.ServiceInstaller.Description%2A> propiedad para describir el propósito del servicio instalado al usuario. El usuario puede ver la descripción del servicio en las aplicaciones que muestran los detalles de los servicios instalados.  
  
 Por ejemplo, con Windows XP, puede ver la descripción del servicio con la utilidad de línea de comandos de Control de servicios (Sc.exe) o puede ver la descripción del servicio dentro de la **servicios** nodo de la **administración de equipos**  consola.  
  
   
  
## Examples  
 El ejemplo de código siguiente establece las propiedades de instalación para una nueva aplicación de servicio de Windows. El ejemplo establece el nombre del servicio, junto con el nombre para mostrar y la descripción. Después de asignar las propiedades de instalación para el servicio, el ejemplo se agrega el <xref:System.ServiceProcess.ServiceInstaller> de objeto para el <xref:System.Configuration.Install.Installer.Installers%2A> colección.  
  
 [!code-csharp[ServiceProcess_ServiceInstaller#3](~/samples/snippets/csharp/VS_Snippets_CLR/ServiceProcess_serviceinstaller/CS/simpleserviceinstaller.cs#3)]
 [!code-vb[ServiceProcess_ServiceInstaller#3](~/samples/snippets/visualbasic/VS_Snippets_CLR/ServiceProcess_serviceinstaller/VB/service1.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.ServiceProcess.ServiceInstaller.ServiceName" />
        <altmember cref="P:System.ServiceProcess.ServiceInstaller.DisplayName" />
      </Docs>
    </Member>
    <Member MemberName="DisplayName">
      <MemberSignature Language="C#" Value="public string DisplayName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string DisplayName" />
      <MemberSignature Language="DocId" Value="P:System.ServiceProcess.ServiceInstaller.DisplayName" />
      <MemberSignature Language="VB.NET" Value="Public Property DisplayName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ DisplayName { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.DisplayName : string with get, set" Usage="System.ServiceProcess.ServiceInstaller.DisplayName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ServiceProcess.ServiceProcessDescription("ServiceInstallerDisplayName")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Indica el nombre descriptivo que identifica el servicio para el usuario.</summary>
        <value>El nombre asociado al servicio, utilizado frecuentemente para herramientas interactivas.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.ServiceProcess.ServiceInstaller.DisplayName%2A> se usa, por ejemplo, en el Administrador de Control de servicio para proporcionar un nombre descriptivo legible por el usuario para el servicio. El <xref:System.ServiceProcess.ServiceInstaller.DisplayName%2A> es un valor del registro, pero nunca se utiliza como una clave del registro. Por lo tanto, las restricciones en el <xref:System.ServiceProcess.ServiceInstaller.ServiceName%2A> valor de propiedad no se aplican. <xref:System.ServiceProcess.ServiceInstaller.ServiceName%2A> se utiliza como clave del registro HKEY_LOCAL_MACHINES\System\CurrentControlSet\Services, por lo que es restringido.  
  
 El nombre para mostrar nunca se usa la utilidad de instalación para identificar el servicio, por lo que no hay ninguna restricción en la elección del nombre, como sucede con la <xref:System.ServiceProcess.ServiceInstaller.ServiceName%2A> propiedad.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.ServiceProcess.ServiceInstaller.ServiceName" />
        <altmember cref="P:System.ServiceProcess.ServiceInstaller.Description" />
      </Docs>
    </Member>
    <Member MemberName="Install">
      <MemberSignature Language="C#" Value="public override void Install (System.Collections.IDictionary stateSaver);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Install(class System.Collections.IDictionary stateSaver) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceProcess.ServiceInstaller.Install(System.Collections.IDictionary)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Install (stateSaver As IDictionary)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Install(System::Collections::IDictionary ^ stateSaver);" />
      <MemberSignature Language="F#" Value="override this.Install : System.Collections.IDictionary -&gt; unit" Usage="serviceInstaller.Install stateSaver" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stateSaver" Type="System.Collections.IDictionary" />
      </Parameters>
      <Docs>
        <param name="stateSaver"><see cref="T:System.Collections.IDictionary" /> que contiene la información de contexto asociada a la instalación.</param>
        <summary>Instala el servicio escribiendo la información de la aplicación de servicio en el Registro. Este método está pensado para que lo utilicen las herramientas de instalación que procesan automáticamente los métodos apropiados.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Normalmente, no se llamará a los métodos en <xref:System.ServiceProcess.ServiceInstaller> dentro del código; por lo general se denominan únicamente por la utilidad de instalación. La utilidad de instalación llama automáticamente a la <xref:System.ServiceProcess.ServiceInstaller.Install%2A> método durante la instalación. Deshace los errores, si es necesario, mediante una llamada a <xref:System.ServiceProcess.ServiceInstaller.Rollback%2A> en el objeto que generó la excepción.  
  
 La rutina de instalación de la aplicación mantiene información automáticamente acerca de los componentes que ya estaban instalados, mediante el instalador de proyecto <xref:System.Configuration.Install.Installer.Context%2A?displayProperty=nameWithType>. Esta información de estado, se pasa a <xref:System.ServiceProcess.ServiceInstaller.Install%2A> como el `stateSaver` parámetro, se actualiza continuamente en el <xref:System.ServiceProcess.ServiceProcessInstaller> instancia y cada <xref:System.ServiceProcess.ServiceInstaller> instancia está instalada la utilidad. Normalmente no es necesario para el código modificar esta información de estado de forma explícita.  
  
 El <xref:System.ServiceProcess.ServiceProcessInstaller> asociado con la información de instalación clase instalaciones de proyecto comunes a todos los <xref:System.ServiceProcess.ServiceInstaller> instancias en el proyecto. Si este servicio tiene todo lo que lo separa de los demás servicios en el proyecto de instalación, esa información específica del servicio está instalada, este método.  
  
 Para instalar un servicio, cree una clase de instalador de proyecto que herede de la <xref:System.Configuration.Install.Installer> clase y establezca el <xref:System.ComponentModel.RunInstallerAttribute> atributo en la clase para `true`. Dentro del proyecto, cree uno <xref:System.ServiceProcess.ServiceProcessInstaller> instancia por cada aplicación de servicio y uno <xref:System.ServiceProcess.ServiceInstaller> instancia para cada servicio en la aplicación. Dentro de su constructor de clase de instalador de proyecto, establezca las propiedades de instalación para el servicio utilizando el <xref:System.ServiceProcess.ServiceProcessInstaller> y <xref:System.ServiceProcess.ServiceInstaller> instancias y agregue las instancias a la <xref:System.Configuration.Install.Installer.Installers%2A> colección.  
  
> [!NOTE]
>  Se recomienda que utilice el constructor para agregar instancias del instalador; Sin embargo, si tiene que agregar a la <xref:System.Configuration.Install.Installer.Installers%2A> colección en el <xref:System.ServiceProcess.ServiceInstaller.Install%2A> método, asegúrese de realizar las mismas adiciones a la colección en el <xref:System.ServiceProcess.ServiceInstaller.Uninstall%2A> método.  
  
 Para todas las clases derivadas de la <xref:System.Configuration.Install.Installer> clase, el estado de la <xref:System.Configuration.Install.Installer.Installers%2A> colección debe ser el mismo en el <xref:System.ServiceProcess.ServiceInstaller.Install%2A> y <xref:System.ServiceProcess.ServiceInstaller.Uninstall%2A> métodos. Sin embargo, puede evitar el mantenimiento de la colección a través de la <xref:System.ServiceProcess.ServiceInstaller.Install%2A> y <xref:System.ServiceProcess.ServiceInstaller.Uninstall%2A> métodos si agrega instancias del instalador para el <xref:System.Configuration.Install.Installer.Installers%2A> colección en el constructor de clase de instalador personalizado.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">La instalación no contiene <see cref="T:System.ServiceProcess.ServiceProcessInstaller" /> para el ejecutable.  
  
O bien 
El nombre de archivo para el ensamblado es <see langword="null" /> o una cadena vacía.  
  
O bien 
El nombre de servicio no es válido.  
  
O bien 
No se pudo abrir el Administrador de control de servicios.</exception>
        <exception cref="T:System.ArgumentException">El nombre para mostrar del servicio tiene una longitud superior a 255 caracteres.</exception>
        <exception cref="T:System.ComponentModel.Win32Exception">El sistema no pudo generar un identificador para el servicio.  
  
O bien 
Ya hay instalado un servicio con ese nombre.</exception>
        <altmember cref="T:System.ServiceProcess.ServiceProcessInstaller" />
        <altmember cref="M:System.ServiceProcess.ServiceInstaller.Rollback(System.Collections.IDictionary)" />
        <altmember cref="M:System.Configuration.Install.Installer.Commit(System.Collections.IDictionary)" />
        <altmember cref="M:System.ServiceProcess.ServiceInstaller.Uninstall(System.Collections.IDictionary)" />
        <altmember cref="T:System.Diagnostics.EventLogInstaller" />
        <altmember cref="M:System.Diagnostics.EventLogInstaller.#ctor" />
      </Docs>
    </Member>
    <Member MemberName="IsEquivalentInstaller">
      <MemberSignature Language="C#" Value="public override bool IsEquivalentInstaller (System.Configuration.Install.ComponentInstaller otherInstaller);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool IsEquivalentInstaller(class System.Configuration.Install.ComponentInstaller otherInstaller) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceProcess.ServiceInstaller.IsEquivalentInstaller(System.Configuration.Install.ComponentInstaller)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function IsEquivalentInstaller (otherInstaller As ComponentInstaller) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool IsEquivalentInstaller(System::Configuration::Install::ComponentInstaller ^ otherInstaller);" />
      <MemberSignature Language="F#" Value="override this.IsEquivalentInstaller : System.Configuration.Install.ComponentInstaller -&gt; bool" Usage="serviceInstaller.IsEquivalentInstaller otherInstaller" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="otherInstaller" Type="System.Configuration.Install.ComponentInstaller" />
      </Parameters>
      <Docs>
        <param name="otherInstaller"><see cref="T:System.Configuration.Install.ComponentInstaller" /> con el que se está comparando el instalador actual.</param>
        <summary>Indica si dos instaladores pueden instalar el mismo servicio.</summary>
        <returns><see langword="true" /> si la llamada a <see cref="M:System.ServiceProcess.ServiceInstaller.Install(System.Collections.IDictionary)" /> en los dos instaladores tendría como resultado la instalación del mismo servicio; de lo contrario, es <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.ServiceProcess.ServiceInstaller.IsEquivalentInstaller%2A> Por ejemplo, indica si dos instaladores pueden instalar el mismo servicio en la misma cuenta de usuario.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.ServiceProcess.ServiceInstaller.CopyFromComponent(System.ComponentModel.IComponent)" />
        <altmember cref="T:System.Configuration.Install.ComponentInstaller" />
      </Docs>
    </Member>
    <Member MemberName="Rollback">
      <MemberSignature Language="C#" Value="public override void Rollback (System.Collections.IDictionary savedState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Rollback(class System.Collections.IDictionary savedState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceProcess.ServiceInstaller.Rollback(System.Collections.IDictionary)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Rollback (savedState As IDictionary)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Rollback(System::Collections::IDictionary ^ savedState);" />
      <MemberSignature Language="F#" Value="override this.Rollback : System.Collections.IDictionary -&gt; unit" Usage="serviceInstaller.Rollback savedState" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="savedState" Type="System.Collections.IDictionary" />
      </Parameters>
      <Docs>
        <param name="savedState"><see cref="T:System.Collections.IDictionary" /> que contiene la información de contexto asociada a la instalación.</param>
        <summary>Deshace la información de la aplicación de servicio que el procedimiento de instalación escribió en el Registro. Este método está pensado para que lo utilicen las herramientas de instalación que procesan automáticamente los métodos apropiados.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Normalmente, no se llamará a los métodos en <xref:System.ServiceProcess.ServiceInstaller> dentro del código; por lo general se denominan únicamente por la utilidad de instalación. La utilidad de instalación llama automáticamente a la <xref:System.ServiceProcess.ServiceInstaller.Install%2A> método durante el proceso de instalación. Deshace los errores, si es necesario, mediante una llamada a <xref:System.ServiceProcess.ServiceInstaller.Rollback%2A> en el objeto que generó la excepción.  
  
 La rutina de instalación de la aplicación mantiene información automáticamente acerca de los componentes ya instalados, mediante el instalador de proyecto <xref:System.Configuration.Install.Installer.Context%2A?displayProperty=nameWithType>. Esta información de estado, se pasa a <xref:System.ServiceProcess.ServiceInstaller.Rollback%2A> como el `savedState` parámetro, se actualiza continuamente en el <xref:System.ServiceProcess.ServiceProcessInstaller> instancia y cada <xref:System.ServiceProcess.ServiceInstaller> instancia está instalada la utilidad. Normalmente no es necesario para el código modificar esta información de estado de forma explícita.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.ServiceProcess.ServiceProcessInstaller.Rollback(System.Collections.IDictionary)" />
        <altmember cref="M:System.ServiceProcess.ServiceInstaller.Install(System.Collections.IDictionary)" />
        <altmember cref="M:System.Configuration.Install.Installer.Commit(System.Collections.IDictionary)" />
        <altmember cref="M:System.ServiceProcess.ServiceInstaller.Uninstall(System.Collections.IDictionary)" />
      </Docs>
    </Member>
    <Member MemberName="ServiceName">
      <MemberSignature Language="C#" Value="public string ServiceName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ServiceName" />
      <MemberSignature Language="DocId" Value="P:System.ServiceProcess.ServiceInstaller.ServiceName" />
      <MemberSignature Language="VB.NET" Value="Public Property ServiceName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ ServiceName { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.ServiceName : string with get, set" Usage="System.ServiceProcess.ServiceInstaller.ServiceName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.TypeConverter("System.Diagnostics.Design.StringValueConverter, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ServiceProcess.ServiceProcessDescription("ServiceInstallerServiceName")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1">
          <AttributeName>System.ComponentModel.TypeConverter("System.Diagnostics.Design.StringValueConverter, System.Design, Version=1.0.5000.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5">
          <AttributeName>System.ComponentModel.TypeConverter("System.Diagnostics.Design.StringValueConverter, System.Design, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Indica el nombre que utiliza el sistema para identificar este servicio. Esta propiedad tiene que ser idéntica a la propiedad <see cref="P:System.ServiceProcess.ServiceBase.ServiceName" /> del servicio que se desea instalar.</summary>
        <value>El nombre del servicio que se va a instalar. Este valor tiene que establecerse antes de que la utilidad de instalación intente instalar el servicio.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Es fundamental que el <xref:System.ServiceProcess.ServiceInstaller.ServiceName%2A> ser idéntica a la <xref:System.ServiceProcess.ServiceBase.ServiceName%2A?displayProperty=nameWithType> de la clase que deriva de <xref:System.ServiceProcess.ServiceBase>. Normalmente, el valor de la <xref:System.ServiceProcess.ServiceBase.ServiceName%2A?displayProperty=nameWithType> es establecer la propiedad para el servicio en la función Main() del ejecutable de la aplicación de servicio. El Administrador de Control de servicios usa el <xref:System.ServiceProcess.ServiceInstaller.ServiceName%2A?displayProperty=nameWithType> propiedad para buscar el servicio en este archivo ejecutable.  
  
 Al establecer el <xref:System.ServiceProcess.ServiceInstaller.ServiceName%2A> del instalador del servicio, el <xref:System.Diagnostics.EventLog.Source%2A> del registro de eventos asociado se establece en el mismo valor. Esto permite al servicio registrar automáticamente las llamadas de comandos (por ejemplo, iniciar y detener) de servicio en el registro de aplicación en el equipo.  
  
> [!NOTE]
>  Si ya existe un origen con el mismo nombre en el equipo, pero en un registro distinto del registro de aplicación, se producirá una excepción. Si el origen existe y está asociado con el registro de aplicación, ese origen se usa para informar el comando llama al servicio y se produce ninguna excepción.  
  
 El <xref:System.ServiceProcess.ServiceInstaller.ServiceName%2A> no puede ser `null` o tiene longitud cero. Su tamaño máximo es de 256 caracteres. También no pueden contener barras diagonales hacia delante o hacia atrás, '/' o '\\', ni caracteres de ASCII de conjunto con un valor menor que el valor decimal de 32 caracteres.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">La propiedad <see cref="P:System.ServiceProcess.ServiceInstaller.ServiceName" /> no es válida.</exception>
        <altmember cref="P:System.ServiceProcess.ServiceBase.ServiceName" />
        <altmember cref="P:System.ServiceProcess.ServiceInstaller.DisplayName" />
      </Docs>
    </Member>
    <Member MemberName="ServicesDependedOn">
      <MemberSignature Language="C#" Value="public string[] ServicesDependedOn { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string[] ServicesDependedOn" />
      <MemberSignature Language="DocId" Value="P:System.ServiceProcess.ServiceInstaller.ServicesDependedOn" />
      <MemberSignature Language="VB.NET" Value="Public Property ServicesDependedOn As String()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property cli::array &lt;System::String ^&gt; ^ ServicesDependedOn { cli::array &lt;System::String ^&gt; ^ get(); void set(cli::array &lt;System::String ^&gt; ^ value); };" />
      <MemberSignature Language="F#" Value="member this.ServicesDependedOn : string[] with get, set" Usage="System.ServiceProcess.ServiceInstaller.ServicesDependedOn" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ServiceProcess.ServiceProcessDescription("ServiceInstallerServicesDependedOn")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Indica los servicios que deben estar en ejecución para que se ejecute este servicio.</summary>
        <value>Una matriz de servicios que tiene que estar en ejecución para que el servicio asociado a este instalador pueda ejecutarse.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Un servicio puede requerir otros servicios que se esté ejecutando antes de pueda empezar. La información de esta propiedad se escribe en una clave del registro. Cuando el usuario (o el sistema, en el caso de inicio automático) intenta ejecutar el servicio, el Administrador de Control de servicios (SCM) comprueba que cada uno de los servicios en la matriz ya se inició.  
  
 Si cualquier servicio en la matriz no se está ejecutando, el SCM intenta iniciarlas. Esto incluye los servicios con `Manual` <xref:System.ServiceProcess.ServiceInstaller.StartType%2A>.  
  
 Si no se puede iniciar cualquier servicio que depende este servicio, este servicio no se iniciará. No se produce una excepción si no se inicia el sistema porque no hay ningún control de excepciones en el nivel del sistema para detectarlo. Decidir cómo controlar los errores de inicio de servicio e impleméntelo en el código. Normalmente, un cuadro de diálogo aparece al usuario al inicio si no se puede iniciar un servicio.  
  
 Si el servicio no se inicia, se escribe una entrada en el registro de eventos de aplicación.  
  
 Los servicios de los que depende este servicio no es necesario estar en el mismo archivo ejecutable.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.ServiceProcess.ServiceInstaller.StartType" />
      </Docs>
    </Member>
    <Member MemberName="StartType">
      <MemberSignature Language="C#" Value="public System.ServiceProcess.ServiceStartMode StartType { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.ServiceProcess.ServiceStartMode StartType" />
      <MemberSignature Language="DocId" Value="P:System.ServiceProcess.ServiceInstaller.StartType" />
      <MemberSignature Language="VB.NET" Value="Public Property StartType As ServiceStartMode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::ServiceProcess::ServiceStartMode StartType { System::ServiceProcess::ServiceStartMode get(); void set(System::ServiceProcess::ServiceStartMode value); };" />
      <MemberSignature Language="F#" Value="member this.StartType : System.ServiceProcess.ServiceStartMode with get, set" Usage="System.ServiceProcess.ServiceInstaller.StartType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ServiceProcess.ServiceProcessDescription("ServiceInstallerStartType")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.ServiceProcess.ServiceStartMode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Indica cómo y cuando se inició este servicio.</summary>
        <value><see cref="T:System.ServiceProcess.ServiceStartMode" /> que representa la manera en la que se inicia el servicio. El valor predeterminado es <see langword="Manual" />, que especifica que el servicio no se iniciará de forma automática después del reinicio.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Establecer el <xref:System.ServiceProcess.ServiceInstaller.StartType%2A> para especificar que el servicio se inicia automáticamente después del reinicio o que un usuario debe iniciar manualmente el servicio. También se deshabilita un servicio, especificar que no se puede iniciar, ya sea manualmente o mediante programación, hasta que esté habilitado.  
  
 No puede cambiar <xref:System.ServiceProcess.ServiceInstaller> valores de propiedad después de la instalación. Para cambiar el <xref:System.ServiceProcess.ServiceInstaller.StartType%2A>, o bien deberá desinstalar y reinstalar el servicio o cambiar manualmente la configuración mediante el Administrador de Control de servicios.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">El modo de inicio no es ningún valor de la enumeración <see cref="T:System.ServiceProcess.ServiceStartMode" />.</exception>
        <altmember cref="P:System.ServiceProcess.ServiceProcessInstaller.Account" />
      </Docs>
    </Member>
    <Member MemberName="Uninstall">
      <MemberSignature Language="C#" Value="public override void Uninstall (System.Collections.IDictionary savedState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Uninstall(class System.Collections.IDictionary savedState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceProcess.ServiceInstaller.Uninstall(System.Collections.IDictionary)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Uninstall (savedState As IDictionary)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Uninstall(System::Collections::IDictionary ^ savedState);" />
      <MemberSignature Language="F#" Value="override this.Uninstall : System.Collections.IDictionary -&gt; unit" Usage="serviceInstaller.Uninstall savedState" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="savedState" Type="System.Collections.IDictionary" />
      </Parameters>
      <Docs>
        <param name="savedState"><see cref="T:System.Collections.IDictionary" /> que contiene la información de contexto asociada a la instalación.</param>
        <summary>Desinstala el servicio eliminando del Registro la información acerca de él.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Desinstale primero intenta detener el servicio antes de desinstalarlo. Si no se puede detener el servicio, se detecta ninguna excepción y el método continúa con la eliminación del servicio.  
  
 Normalmente, no se llamará a los métodos en <xref:System.ServiceProcess.ServiceInstaller> dentro del código; por lo general se denominan únicamente por la utilidad de instalación. InstallUtil se usa para desinstalar los servicios, así como instalarlos; desinstalación requiere un modificador en la llamada de la línea de comandos.  
  
 Rutina de desinstalación de una aplicación mantiene información automáticamente acerca de los componentes que se va a desinstalar mediante el instalador de proyecto <xref:System.Configuration.Install.Installer.Context%2A?displayProperty=nameWithType>. Esta información de estado, se pasa a <xref:System.ServiceProcess.ServiceInstaller.Uninstall%2A> como el `savedState` parámetro, se actualiza continuamente en el <xref:System.ServiceProcess.ServiceProcessInstaller> instancia y cada <xref:System.ServiceProcess.ServiceInstaller> instancia está instalada la utilidad. Normalmente no es necesario para el código modificar esta información de estado de forma explícita.  
  
 Para todas las clases derivadas de la <xref:System.Configuration.Install.Installer> clase, el estado de la <xref:System.Configuration.Install.Installer.Installers%2A> colección debe ser el mismo en el <xref:System.ServiceProcess.ServiceInstaller.Install%2A> y <xref:System.ServiceProcess.ServiceInstaller.Uninstall%2A> métodos. Sin embargo, puede evitar el mantenimiento de la colección a través de la <xref:System.ServiceProcess.ServiceInstaller.Install%2A> y <xref:System.ServiceProcess.ServiceInstaller.Uninstall%2A> métodos si agrega instancias del instalador para el <xref:System.Configuration.Install.Installer.Installers%2A> colección en el constructor de clase de instalador personalizado.  
  
 No hay ningún mecanismo de reversión para desinstalar, por lo que si no se puede desinstalar un servicio, esto no afecta a los demás servicios (normalmente, dentro del mismo proyecto de instalación) que se va a desinstalar.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.Win32Exception">No se pudo abrir el Administrador de control de servicios.  
  
O bien 
El sistema no pudo obtener un identificador para el servicio.</exception>
        <altmember cref="M:System.ServiceProcess.ServiceInstaller.Install(System.Collections.IDictionary)" />
      </Docs>
    </Member>
  </Members>
</Type>