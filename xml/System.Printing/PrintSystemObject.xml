<Type Name="PrintSystemObject" FullName="System.Printing.PrintSystemObject">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="86f5c65bcd329f9dc15622c2ac861bec7828bb96" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="es-ES" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36470191" />
  </Metadata>
  <TypeSignature Language="C#" Value="public abstract class PrintSystemObject : IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract PrintSystemObject extends System.Object implements class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.Printing.PrintSystemObject" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class PrintSystemObject&#xA;Implements IDisposable" />
  <TypeSignature Language="C++ CLI" Value="public ref class PrintSystemObject abstract : IDisposable" />
  <TypeSignature Language="F#" Value="type PrintSystemObject = class&#xA;    interface IDisposable" />
  <AssemblyInfo>
    <AssemblyName>System.Printing</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>Define las propiedades y los métodos básicos que son comunes a los objetos del sistema de impresión. Las clases que derivan de esta clase representan objetos como colas, servidores y trabajos de impresión.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Además de ser la clase base para los objetos de sistema de impresión, esta clase puede ser útil para llamar a métodos cuando la aplicación no conoce o no le importa qué determinado tipo de objeto de sistema de impresión que está usando. Por ejemplo, puede enumerar a través de un <xref:System.Printing.PrintSystemObjects> colección de tipos de objeto diferente, una llamada a la <xref:System.Printing.PrintSystemObject.Commit%2A> método en cada uno de ellos a su vez.  
  
> [!CAUTION]
>  Las clases en el <xref:System.Printing> espacio de nombres no se admiten para su uso dentro de un servicio de Windows o la aplicación ASP.NET o el servicio. Cualquier intento de usar estas clases dentro de uno de estos tipos de aplicación puede producir problemas inesperados, como reduce las excepciones de rendimiento y tiempo de ejecución del servicio.  
  
 Si desea imprimir desde una aplicación de formularios Windows Forms, vea la <xref:System.Drawing.Printing> espacio de nombres.  
  
 ]]></format>
    </remarks>
    <block subset="none" type="overrides">
      <para>Si se deriva una clase de <see cref="T:System.Printing.PrintSystemObject" />, puede que desee derivar una colección de objetos de esa clase de <see cref="T:System.Printing.PrintSystemObjects" />.</para>
    </block>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Printing.PrintSystemObject" />.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected PrintSystemObject ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Printing.PrintSystemObject.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; PrintSystemObject();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Printing.PrintSystemObject" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected PrintSystemObject (System.Printing.PrintSystemObjectLoadMode mode);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(valuetype System.Printing.PrintSystemObjectLoadMode mode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Printing.PrintSystemObject.#ctor(System.Printing.PrintSystemObjectLoadMode)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New (mode As PrintSystemObjectLoadMode)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; PrintSystemObject(System::Printing::PrintSystemObjectLoadMode mode);" />
      <MemberSignature Language="F#" Value="new System.Printing.PrintSystemObject : System.Printing.PrintSystemObjectLoadMode -&gt; System.Printing.PrintSystemObject" Usage="new System.Printing.PrintSystemObject mode" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="mode" Type="System.Printing.PrintSystemObjectLoadMode" />
      </Parameters>
      <Docs>
        <param name="mode">Valor que especifica si se deben inicializar las propiedades del objeto cuando se carga el objeto.</param>
        <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Printing.PrintSystemObject" /> utilizando el objeto <see cref="T:System.Printing.PrintSystemObjectLoadMode" /> especificado.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="BaseAttributeNames">
      <MemberSignature Language="C#" Value="protected static string[] BaseAttributeNames ();" />
      <MemberSignature Language="ILAsm" Value=".method familystatic hidebysig string[] BaseAttributeNames() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Printing.PrintSystemObject.BaseAttributeNames" />
      <MemberSignature Language="VB.NET" Value="Protected Shared Function BaseAttributeNames () As String()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; static cli::array &lt;System::String ^&gt; ^ BaseAttributeNames();" />
      <MemberSignature Language="F#" Value="static member BaseAttributeNames : unit -&gt; string[]" Usage="System.Printing.PrintSystemObject.BaseAttributeNames " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Obtiene los nombres de los atributos de la clase derivada.</summary>
        <returns>Matriz de valores <see cref="T:System.String" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Commit">
      <MemberSignature Language="C#" Value="public abstract void Commit ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Commit() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Printing.PrintSystemObject.Commit" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Sub Commit ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract void Commit();" />
      <MemberSignature Language="F#" Value="abstract member Commit : unit -&gt; unit" Usage="printSystemObject.Commit " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Cuando se invalida en una clase derivada, escribe los cambios que el programa haya realizado en las propiedades del objeto en el componente de software o hardware que el objeto representa.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Por ejemplo, si se reemplaza por la <xref:System.Printing.PrintServer> (clase), <xref:System.Printing.PrintServer.Commit%2A> escribirá los cambios realizados en la <xref:System.Printing.PrintServer> propiedades del objeto en el equipo real que representa el objeto.  
  
   
  
## Examples  
 En el ejemplo siguiente se muestra cómo utilizar este método (llamado en un <xref:System.Printing.PrintQueue> objeto, que invalida el método de <xref:System.Printing.PrintSystemObject>) como parte del proceso de combinar solicitudes de impresión.  
  
 [!code-csharp[PrintTicketManagment#UsingMergeAndValidate](~/samples/snippets/csharp/VS_Snippets_Wpf/PrintTicketManagment/CSharp/printticket.cs#usingmergeandvalidate)]
 [!code-vb[PrintTicketManagment#UsingMergeAndValidate](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PrintTicketManagment/visualbasic/printticket.vb#usingmergeandvalidate)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Printing.PrintServer.Refresh" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Dispose">
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Libera los recursos que usa <see cref="T:System.Printing.PrintSystemObject" />.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public override sealed void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Printing.PrintSystemObject.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Overrides NotOverridable Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Dispose();" />
      <MemberSignature Language="F#" Value="abstract member Dispose : unit -&gt; unit&#xA;override this.Dispose : unit -&gt; unit" Usage="printSystemObject.Dispose " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Libera todos los recursos que usa <see cref="T:System.Printing.PrintSystemObject" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Llame a <xref:System.Printing.PrintSystemObject.Dispose> cuando haya terminado de usar <xref:System.Printing.PrintSystemObject>. El método <xref:System.Printing.PrintSystemObject.Dispose> deja el <xref:System.Printing.PrintSystemObject> en un estado no utilizable. Después de llamar a <xref:System.Printing.PrintSystemObject.Dispose>, debe liberar todas las referencias a la <xref:System.Printing.PrintSystemObject> para que el recolector de elementos no utilizados pueda reclamar la memoria que el <xref:System.Printing.PrintSystemObject> estaba ocupando. Para obtener más información, consulte [limpiar recursos no administrados](~/docs/standard/garbage-collection/unmanaged.md) y [implementa un método Dispose](~/docs/standard/garbage-collection/implementing-dispose.md).  
  
> [!NOTE]
>  Realice siempre una llamada a <xref:System.Printing.PrintSystemObject.Dispose> antes de liberar la última referencia al objeto <xref:System.Printing.PrintSystemObject>. En caso contrario, los recursos que está usando no se liberarán hasta que el recolector de elementos no utilizados llame al método <xref:System.Printing.PrintSystemObject> del objeto <xref:System.Object.Finalize%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected virtual void Dispose (bool A_0);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void Dispose(bool A_0) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Printing.PrintSystemObject.Dispose(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub Dispose (A_0 As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void Dispose(bool A_0);" />
      <MemberSignature Language="F#" Value="abstract member Dispose : bool -&gt; unit&#xA;override this.Dispose : bool -&gt; unit" Usage="printSystemObject.Dispose A_0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.ExceptionServices.HandleProcessCorruptedStateExceptions</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="A_0" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="A_0">To be added.</param>
        <summary>Libera los recursos no administrados que usa <see cref="T:System.Printing.PrintSystemObject" /> y, de forma opcional, libera los recursos administrados.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Se llama a este método público `Dispose()` método y <xref:System.Object.Finalize%2A> método. `Dispose()` se invoca el protegido `Dispose(Boolean)` método con el parámetro booleano sin nombre establecido en `true`. <xref:System.Object.Finalize%2A> invoca `Dispose` con el parámetro establecido en `false`.  
  
 Cuando el parámetro booleano es `true`, este método libera todos los recursos retenidos por los objetos administrados que este <xref:System.Printing.PrintSystemObject> referencias. Este método invoca al método `Dispose()` de cada uno de los objetos a los que se hace referencia.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>
            <see langword="Dispose" /> puede recibir varias llamadas de otros objetos. Al invalidar <see langword="Dispose(Boolean)" />, tenga cuidado de no hacer referencia a objetos que se hayan eliminado en una llamada anterior a <see langword="Dispose" />. Para obtener más información sobre cómo implementar <see langword="Dispose(Boolean)" />, vea [implementar un Method](~/docs/standard/garbage-collection/implementing-dispose.md) Dispose.  Para obtener más información acerca de <see langword="Dispose" /> y <see cref="M:System.Object.Finalize" />, consulte [limpieza seguridad Resources](~/docs/standard/garbage-collection/unmanaged.md) no administrado y [invalidación del método Finalize] (http://msdn.microsoft.com/library/8026cb68-fe93-43fc-96c1-c09ad7d64cd3).</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="Finalize">
      <MemberSignature Language="C#" Value="~PrintSystemObject ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Finalize() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Printing.PrintSystemObject.Finalize" />
      <MemberSignature Language="VB.NET" Value="Finalize ()" />
      <MemberSignature Language="C++ CLI" Value="!PrintSystemObject ()" />
      <MemberSignature Language="F#" Value="override this.Finalize : unit -&gt; unit" Usage="printSystemObject.Finalize " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Libera los recursos que está utilizando <see cref="T:System.Printing.PrintSystemObject" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Printing.PrintSystemObject.Finalize%2A> método actúa como medida de seguridad para limpiar los recursos en caso de que el <xref:System.Printing.PrintSystemObject.Dispose%2A> no se llama el método. Debe implementar la <xref:System.Printing.PrintSystemObject.Finalize%2A> método para limpiar sólo los recursos no administrados. No debe implementar este método para objetos administrados, porque el recolector de elementos no utilizados se limpia automáticamente los recursos administrados.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Initialize">
      <MemberSignature Language="C#" Value="protected void Initialize ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void Initialize() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Printing.PrintSystemObject.Initialize" />
      <MemberSignature Language="VB.NET" Value="Protected Sub Initialize ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void Initialize();" />
      <MemberSignature Language="F#" Value="member this.Initialize : unit -&gt; unit" Usage="printSystemObject.Initialize " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Inicializa las propiedades de la clase <see cref="T:System.Printing.PrintSystemObject" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InternalDispose">
      <MemberSignature Language="C#" Value="protected virtual void InternalDispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void InternalDispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Printing.PrintSystemObject.InternalDispose(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub InternalDispose (disposing As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void InternalDispose(bool disposing);" />
      <MemberSignature Language="F#" Value="abstract member InternalDispose : bool -&gt; unit&#xA;override this.InternalDispose : bool -&gt; unit" Usage="printSystemObject.InternalDispose disposing" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing">Es <see langword="true" /> para liberar tanto recursos administrados como no administrados; es <see langword="false" /> para liberar únicamente recursos no administrados.</param>
        <summary>Cuando se invalida en una clase derivada, libera los recursos no administrados que está utilizando el objeto <see cref="T:System.Printing.PrintSystemObject" /> y, de forma opcional, libera los recursos administrados que se están utilizando.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsDisposed">
      <MemberSignature Language="C#" Value="protected bool IsDisposed { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsDisposed" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintSystemObject.IsDisposed" />
      <MemberSignature Language="VB.NET" Value="Protected Property IsDisposed As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; property bool IsDisposed { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.IsDisposed : bool with get, set" Usage="System.Printing.PrintSystemObject.IsDisposed" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene o establece un valor que indica si el objeto se ha eliminado.</summary>
        <value>Es <see langword="true" /> si el objeto se ha desechado; de lo contrario, es <see langword="false" />.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Name">
      <MemberSignature Language="C#" Value="public virtual string Name { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Name" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintSystemObject.Name" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property Name As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ Name { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Name : string" Usage="System.Printing.PrintSystemObject.Name" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene el nombre del objeto.</summary>
        <value>Un valor <see cref="T:System.String" /> que representa el nombre del objeto.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Parent">
      <MemberSignature Language="C#" Value="public virtual System.Printing.PrintSystemObject Parent { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Printing.PrintSystemObject Parent" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintSystemObject.Parent" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property Parent As PrintSystemObject" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Printing::PrintSystemObject ^ Parent { System::Printing::PrintSystemObject ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Parent : System.Printing.PrintSystemObject" Usage="System.Printing.PrintSystemObject.Parent" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Printing.PrintSystemObject</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene el elemento primario del objeto.</summary>
        <value>Otro objeto <see cref="T:System.Printing.PrintSystemObject" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Por ejemplo, el elemento primario de una cola de impresión es el servidor de impresión que hospeda la cola.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PropertiesCollection">
      <MemberSignature Language="C#" Value="public System.Printing.IndexedProperties.PrintPropertyDictionary PropertiesCollection { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Printing.IndexedProperties.PrintPropertyDictionary PropertiesCollection" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintSystemObject.PropertiesCollection" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property PropertiesCollection As PrintPropertyDictionary" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Printing::IndexedProperties::PrintPropertyDictionary ^ PropertiesCollection { System::Printing::IndexedProperties::PrintPropertyDictionary ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.PropertiesCollection : System.Printing.IndexedProperties.PrintPropertyDictionary" Usage="System.Printing.PrintSystemObject.PropertiesCollection" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Printing.IndexedProperties.PrintPropertyDictionary</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene una colección de pares de atributo y valor.</summary>
        <value>Un objeto <see cref="T:System.Printing.IndexedProperties.PrintPropertyDictionary" /> que contiene pares de atributo y valor.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 En el ejemplo siguiente se muestra cómo utilizar esta propiedad para detectar en tiempo de ejecución de las propiedades y los tipos de esas propiedades, de un objeto de sistema de impresión, sin utilizar la reflexión.  
  
 [!code-csharp[GetPrintObjectPropertyTypesWithoutReflection#ShowPropertyTypesWithoutReflection](~/samples/snippets/csharp/VS_Snippets_Wpf/GetPrintObjectPropertyTypesWithoutReflection/CSharp/Program.cs#showpropertytypeswithoutreflection)]
 [!code-vb[GetPrintObjectPropertyTypesWithoutReflection#ShowPropertyTypesWithoutReflection](~/samples/snippets/visualbasic/VS_Snippets_Wpf/GetPrintObjectPropertyTypesWithoutReflection/visualbasic/program.vb#showpropertytypeswithoutreflection)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Refresh">
      <MemberSignature Language="C#" Value="public abstract void Refresh ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Refresh() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Printing.PrintSystemObject.Refresh" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Sub Refresh ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract void Refresh();" />
      <MemberSignature Language="F#" Value="abstract member Refresh : unit -&gt; unit" Usage="printSystemObject.Refresh " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Cuando se invalida en una clase derivada, actualiza las propiedades de un objeto de la clase derivada para que sus valores coincidan con los valores del componente de software o hardware que el objeto representa.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Se pueden perder los cambios realizados en las propiedades de un objeto de la clase derivada cuando la <xref:System.Printing.PrintSystemObject.Refresh%2A> de la clase derivada, se ejecuta. Se producirá la pérdida si los cambios aún no se han escrito para el componente de software o hardware real, mediante el uso de la implementación de la clase derivada de <xref:System.Printing.PrintSystemObject.Commit%2A>.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Printing.PrintSystemObject.Commit" />
      </Docs>
    </Member>
  </Members>
</Type>