<Type Name="WorkflowRuntimeService" FullName="System.Workflow.Runtime.Hosting.WorkflowRuntimeService">
  <Metadata><Meta Name="ms.openlocfilehash" Value="c7fbbd24977b76945374cd4b1082c0b7cb99c085" /><Meta Name="ms.sourcegitcommit" Value="16d2d159872fd213cae4b8f371d7ae9c8b027c89" /><Meta Name="ms.translationtype" Value="HT" /><Meta Name="ms.contentlocale" Value="es-ES" /><Meta Name="ms.lasthandoff" Value="11/17/2018" /><Meta Name="ms.locfileid" Value="51896912" /></Metadata><TypeSignature Language="C#" Value="public abstract class WorkflowRuntimeService" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit WorkflowRuntimeService extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Workflow.Runtime.Hosting.WorkflowRuntimeService" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class WorkflowRuntimeService" />
  <TypeSignature Language="C++ CLI" Value="public ref class WorkflowRuntimeService abstract" />
  <TypeSignature Language="F#" Value="type WorkflowRuntimeService = class" />
  <AssemblyInfo>
    <AssemblyName>System.Workflow.Runtime</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
      <AttributeName>System.Obsolete("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Representa la clase base abstracta de la cual derivan los servicios centrales del motor en tiempo de ejecución de flujo de trabajo.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  [!INCLUDE[DeprecatedContent](~/includes/deprecatedcontent-md.md)]  
  
 Los servicios que derivan de la clase <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService> se pueden iniciar y detener por motor en tiempo de ejecución de flujo de trabajo. El orden en el que se inician los servicios o se detienen, sin embargo, es indeterminado y los servicios pueden requerir la compatibilidad de otros servicios para inicializarse correctamente, y, por el contrario, puede requerir la compatibilidad de otros servicios para cerrarse correctamente cuando se detienen. Para resolver este problema, el motor en tiempo de ejecución de flujo de trabajo proporciona dos mecanismos bifásicos para iniciar y detener los servicios. Cuando se llama <xref:System.Workflow.Runtime.WorkflowRuntime.StartRuntime%2A>, el motor en tiempo de ejecución de flujo de trabajo invoca el método <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Start%2A> para cada uno de sus servicios que derivan de la clase <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService>.  Una vez iniciados todos estos servicios, el motor en tiempo de ejecución de flujo de trabajo provoca el evento <xref:System.Workflow.Runtime.WorkflowRuntime.Started?displayProperty=nameWithType>, que produce el método <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.OnStarted%2A> que se va a invocar para cada servicio de  motor en tiempo de ejecución de flujo de trabajo. Su servicio puede invalidar el método <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.OnStarted%2A> para participar en este proceso de dos fases. De igual forma, cuando se llama <xref:System.Workflow.Runtime.WorkflowRuntime.StopRuntime%2A>, el método <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Stop%2A>, el evento <xref:System.Workflow.Runtime.WorkflowRuntime.Stopped?displayProperty=nameWithType> y el método <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.OnStopped%2A> proporcionan este mecanismo bifásico.  La propiedad Estado contiene un valor <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeServiceState> que indica si el servicio está en el proceso de iniciarse o detenerse o ya se ha iniciado o detenido por completo.  
  
 Servicios que derivan de la clase <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService> pueden provocar el evento <xref:System.Workflow.Runtime.WorkflowRuntime.ServicesExceptionNotHandled?displayProperty=nameWithType> cuando encuentran una condición que produce una excepción no controlada llamando <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.RaiseServicesExceptionNotHandledEvent%2A>.  
  
 Los servicios derivados finalmente de la clase <xref:System.Workflow.Runtime.Hosting.WorkflowSchedulerService>, la clase <xref:System.Workflow.Runtime.Hosting.WorkflowCommitWorkBatchService>, la clase <xref:System.Workflow.Runtime.Hosting.WorkflowPersistenceService> y la clase <xref:System.Workflow.Runtime.Tracking.TrackingService> derivan de la clase <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService>.  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected WorkflowRuntimeService ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; WorkflowRuntimeService();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Cuando se implementa en una clase derivada, inicializa una instancia nueva de la clase <see cref="T:System.Workflow.Runtime.Hosting.WorkflowRuntimeService" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.State%2A> se inicializa en <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeServiceState.Stopped>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnStarted">
      <MemberSignature Language="C#" Value="protected virtual void OnStarted ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnStarted() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.OnStarted" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnStarted ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnStarted();" />
      <MemberSignature Language="F#" Value="abstract member OnStarted : unit -&gt; unit&#xA;override this.OnStarted : unit -&gt; unit" Usage="workflowRuntimeService.OnStarted " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Cuando se invalida en una clase derivada, representa el método al que se llamará cuando el motor en tiempo de ejecución de flujo de trabajo genere el evento <see cref="E:System.Workflow.Runtime.WorkflowRuntime.Started" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La clase <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService> implementa un mecanismo de inicio de dos fases para que los servicios del motor en tiempo de ejecución de flujo de trabajo puedan realizar cualquier inicialización que dependa de otros servicios después de que el motor en tiempo de ejecución de flujo de trabajo haya invocado el método <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Start%2A> para todos sus servicios de motor en tiempo de ejecución del flujo de trabajo. Después de que el motor en tiempo de ejecución de flujo de trabajo haya llamado el método <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Start%2A> de todos sus servicios del motor en tiempo de ejecución de flujo de trabajo, genera el evento <xref:System.Workflow.Runtime.WorkflowRuntime.Started?displayProperty=nameWithType>. Puede invalidar el método <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.OnStarted%2A> para proporcionar cualquier funcionalidad de inicio final requerida por su servicio cuando se genera el evento <xref:System.Workflow.Runtime.WorkflowRuntime.Started?displayProperty=nameWithType>. Se administran internamente la mecánica de suscribir y anular la suscripción al evento <xref:System.Workflow.Runtime.WorkflowRuntime.Started?displayProperty=nameWithType>.  
  
> [!NOTE]
>  Si se agrega su servicio al motor en tiempo de ejecución de flujo de trabajo <xref:System.Workflow.Runtime.WorkflowRuntime.AddService%2A> después de que el motor en tiempo de ejecución de flujo de trabajo ya haya iniciado, el motor en tiempo de ejecución de ejecución de flujo de trabajo llamará  <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Start%2A> en su servicio Sin embargo, en esta situación, el evento <xref:System.Workflow.Runtime.WorkflowRuntime.Started> ya se ha producido, por consiguiente, su servicio puede tener que realizar cualquier inicialización que realizaría ordinariamente en <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.OnStarted%2A> de dentro del método <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Start%2A>. Puede probar <xref:System.Workflow.Runtime.WorkflowRuntime.IsStarted%2A> para determinar si se ha iniciado el motor en tiempo de ejecución de flujo de trabajo.  
  
 <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.State%2A> se establece en <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeServiceState.Started> antes de invocar <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.OnStarted%2A>.  La implementación predeterminada de <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.OnStarted%2A> no realiza ninguna acción.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnStopped">
      <MemberSignature Language="C#" Value="protected virtual void OnStopped ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnStopped() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.OnStopped" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnStopped ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnStopped();" />
      <MemberSignature Language="F#" Value="abstract member OnStopped : unit -&gt; unit&#xA;override this.OnStopped : unit -&gt; unit" Usage="workflowRuntimeService.OnStopped " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Cuando se invalida en una clase derivada, representa el método al que se llamará cuando el motor en tiempo de ejecución de flujo de trabajo genere el evento <see cref="E:System.Workflow.Runtime.WorkflowRuntime.Stopped" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La clase <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService> implementa un mecanismo de detención de dos fases para que los servicios del motor en tiempo de ejecución de flujo de trabajo puedan conservar alguna funcionalidad después de que el motor en tiempo de ejecución de flujo de trabajo invoque el método de sus <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Stop%2A> para que puedan, si es necesario, admitir el cierre de otros servicios. Después de que el motor en tiempo de ejecución de flujo de trabajo haya llamado el método <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Stop%2A> de todos sus servicios del motor en tiempo de ejecución de flujo de trabajo, genera el evento <xref:System.Workflow.Runtime.WorkflowRuntime.Stopped?displayProperty=nameWithType>. Puede invalidar el método <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.OnStopped%2A> para proporcionar cualquier funcionalidad de cierre final requerida por su servicio cuando se genera el evento <xref:System.Workflow.Runtime.WorkflowRuntime.Stopped?displayProperty=nameWithType>. Se administran internamente la mecánica de suscribir y anular la suscripción al evento <xref:System.Workflow.Runtime.WorkflowRuntime.Stopped?displayProperty=nameWithType>.  
  
> [!NOTE]
>  Si <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService> se elimina del motor en tiempo de ejecución de flujo de trabajo  mediante una llamada a <xref:System.Workflow.Runtime.WorkflowRuntime.RemoveService%2A> mientras el motor en tiempo de ejecución de flujo de trabajo se está ejecutando, el motor en tiempo de ejecución de flujo de trabajo llamará <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Stop%2A> en su servicio. Sin embargo, no se llamará al método <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.OnStopped%2A> para su servicio en esta situación. Por consiguiente, su servicio puede tener que realizar cualquier cierre final que realizaría ordinariamente en <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.OnStopped%2A> desde dentro del método <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Stop%2A>. Puede probar <xref:System.Workflow.Runtime.WorkflowRuntime.IsStarted%2A> para determinar si el motor en tiempo de ejecución de flujo de trabajo se está ejecutando.  
  
 <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.State%2A> se establece en <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeServiceState.Stopped> antes de invocar <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.OnStopped%2A>.  La implementación predeterminada de <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.OnStopped%2A> no realiza ninguna acción.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RaiseServicesExceptionNotHandledEvent">
      <MemberSignature Language="C#" Value="protected void RaiseServicesExceptionNotHandledEvent (Exception exception, Guid instanceId);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void RaiseServicesExceptionNotHandledEvent(class System.Exception exception, valuetype System.Guid instanceId) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.RaiseServicesExceptionNotHandledEvent(System.Exception,System.Guid)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void RaiseServicesExceptionNotHandledEvent(Exception ^ exception, Guid instanceId);" />
      <MemberSignature Language="F#" Value="member this.RaiseServicesExceptionNotHandledEvent : Exception * Guid -&gt; unit" Usage="workflowRuntimeService.RaiseServicesExceptionNotHandledEvent (exception, instanceId)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="exception" Type="System.Exception" />
        <Parameter Name="instanceId" Type="System.Guid" />
      </Parameters>
      <Docs>
        <param name="exception">La excepción que no se pudo administrar.</param>
        <param name="instanceId">El <see cref="T:System.Guid" /> de la instancia de flujo de trabajo asociado a la excepción no controlada.</param>
        <summary>Genera el evento <see cref="E:System.Workflow.Runtime.WorkflowRuntime.ServicesExceptionNotHandled" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Su servicio puede llamar <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.RaiseServicesExceptionNotHandledEvent%2A> para generar el evento <xref:System.Workflow.Runtime.WorkflowRuntime.ServicesExceptionNotHandled?displayProperty=nameWithType> cuando este se encuentra con una excepción que no puede administrar durante su ejecución. Debe pasar <xref:System.Guid> de la instancia de flujo de trabajo asoció a la excepción no controlada. Por ejemplo, un servicio del temporizador podría pasar <xref:System.Guid> asociado al temporizador para el cual se produjo la excepción.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Runtime">
      <MemberSignature Language="C#" Value="protected System.Workflow.Runtime.WorkflowRuntime Runtime { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Workflow.Runtime.WorkflowRuntime Runtime" />
      <MemberSignature Language="DocId" Value="P:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Runtime" />
      <MemberSignature Language="VB.NET" Value="Protected ReadOnly Property Runtime As WorkflowRuntime" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; property System::Workflow::Runtime::WorkflowRuntime ^ Runtime { System::Workflow::Runtime::WorkflowRuntime ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Runtime : System.Workflow.Runtime.WorkflowRuntime" Usage="System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Runtime" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Workflow.Runtime.WorkflowRuntime</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene <see cref="T:System.Workflow.Runtime.WorkflowRuntime" /> para este servicio.</summary>
        <value>Objeto <see cref="T:System.Workflow.Runtime.Hosting.WorkflowRuntimeService" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El motor en tiempo de ejecución de flujo de trabajo establece esta propiedad antes de llamar <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Start%2A> en el servicio.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Start">
      <MemberSignature Language="C#" Value="protected internal virtual void Start ();" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void Start() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Start" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub Start ()" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void Start();" />
      <MemberSignature Language="F#" Value="abstract member Start : unit -&gt; unit&#xA;override this.Start : unit -&gt; unit" Usage="workflowRuntimeService.Start " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Cuando se invalida en una clase derivada, inicia el servicio y cambia <see cref="P:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.State" /> a <see cref="F:System.Workflow.Runtime.Hosting.WorkflowRuntimeServiceState.Starting" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El motor en tiempo de ejecución de flujo de trabajo invoca <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Start%2A> en todos sus servicios que derivan de la clase <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService> cuando se llama <xref:System.Workflow.Runtime.WorkflowRuntime.StartRuntime%2A>.  
  
 El motor en tiempo de ejecución de flujo de trabajo invoca también <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Start%2A> cuando un servicio de motor en tiempo de ejecución de flujo de trabajo se agrega al motor en tiempo de ejecución de flujo de trabajo mediante una llamada a <xref:System.Workflow.Runtime.WorkflowRuntime.AddService%2A> después de que motor en tiempo de ejecución  de flujo de trabajo ya se ha iniciado. La implementación predeterminada de pistas <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Start%2A> si el servicio se ha iniciado y ha utilizado esta información para producir la excepción adecuada si se inicia el servicio mientras ya está ejecutando.  
  
 Puede proporcionar la funcionalidad adicional necesaria para que se inicie su servicio iniciado por el motor en tiempo de ejecución de flujo de trabajo invalidando este método. No hay ninguna garantía sobre qué servicios, si los hay, se detendrán o se ejecutarán cuando se llama <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Start%2A> en su servicio. Por consiguiente, en el método <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Start%2A>, debe realizar solo la inicialización que no dependa de la funcionalidad proporcionada por otros servicios. Esto incluye funcionalidad proporcionada por servicios centrales como el servicio programador. El motor en tiempo de ejecución de flujo de trabajo genera el evento <xref:System.Workflow.Runtime.WorkflowRuntime.Started?displayProperty=nameWithType> después de haber llamado al método <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Start%2A> de todos sus servicios del motor en tiempo de ejecución de flujo de trabajo. Si su servicio requiere inicialización adicional después de que todos los servicios del motor en tiempo de ejecución de flujo de trabajo se hayan iniciado, puede invalidar el método <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.OnStarted%2A> para realizar esta inicialización cuando se provoca el evento <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Start%2A>.  
  
> [!NOTE]
>  Si se agrega su servicio al motor en tiempo de ejecución de flujo de trabajo <xref:System.Workflow.Runtime.WorkflowRuntime.AddService%2A> después de que el motor en tiempo de ejecución de flujo de trabajo ya haya iniciado, el motor en tiempo de ejecución de ejecución de flujo de trabajo llamará  <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Start%2A> en su servicio Sin embargo, en esta situación, el evento <xref:System.Workflow.Runtime.WorkflowRuntime.Started> ya se ha producido, por consiguiente, su servicio puede tener que realizar cualquier inicialización que realizaría ordinariamente en <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.OnStarted%2A> de dentro del método <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Start%2A>. Puede probar <xref:System.Workflow.Runtime.WorkflowRuntime.IsStarted%2A> para determinar si se ha iniciado el motor en tiempo de ejecución de flujo de trabajo.  
  
 <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Start%2A> debe ser llamado solamente por el motor en tiempo de ejecución de flujo de trabajo.  
  
   
  
## Examples  
 El ejemplo siguiente muestra cómo llamar al método Start en un objeto derivado de <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService>, TerminationTrackingService.  Este ejemplo pertenece al ejemplo SDK del servicio de seguimiento de finalización.  Para obtener más información, consulte [ejemplo de servicio de seguimiento de finalización](https://msdn.microsoft.com/library/29b7c0d7-cece-4bb9-96d0-c5b6c6e14439).  
  
 [!code-csharp[WF_Samples#112](~/samples/snippets/csharp/VS_Snippets_CFX/wf_samples/cs/snippets1.cs#112)]
 [!code-vb[WF_Samples#112](~/samples/snippets/visualbasic/VS_Snippets_CFX/wf_samples/vb/snippets1.vb#112)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><see cref="P:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Runtime" /> es una referencia nula (<see langword="Nothing" /> en Visual Basic). 
O bien 
Ya se inició el servicio.</exception>
      </Docs>
    </Member>
    <Member MemberName="State">
      <MemberSignature Language="C#" Value="protected System.Workflow.Runtime.Hosting.WorkflowRuntimeServiceState State { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Workflow.Runtime.Hosting.WorkflowRuntimeServiceState State" />
      <MemberSignature Language="DocId" Value="P:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.State" />
      <MemberSignature Language="VB.NET" Value="Protected ReadOnly Property State As WorkflowRuntimeServiceState" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; property System::Workflow::Runtime::Hosting::WorkflowRuntimeServiceState State { System::Workflow::Runtime::Hosting::WorkflowRuntimeServiceState get(); };" />
      <MemberSignature Language="F#" Value="member this.State : System.Workflow.Runtime.Hosting.WorkflowRuntimeServiceState" Usage="System.Workflow.Runtime.Hosting.WorkflowRuntimeService.State" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Workflow.Runtime.Hosting.WorkflowRuntimeServiceState</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene el estado del objeto <see cref="T:System.Workflow.Runtime.Hosting.WorkflowRuntimeService" />.</summary>
        <value>Uno de los valores de <see cref="T:System.Workflow.Runtime.Hosting.WorkflowRuntimeServiceState" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La clase <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService> implementa los mecanismos bifásicos para el inicio y detención de un servicio de motor en tiempo de ejecución de flujo de trabajo. La primera fase del mecanismo de inicio comienza cuando el motor en tiempo de ejecución de flujo de trabajo llama a la implementación del método <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Start%2A> para el servicio. Este método debe llamar a la implementación base de <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Start%2A>, que establece <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.State%2A> en <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeServiceState.Starting>. La segunda fase se produce después de que el motor en tiempo de ejecución de flujo de trabajo inicia todos sus servicios de motor en tiempo de ejecución de flujo de trabajo cuando genera el evento <xref:System.Workflow.Runtime.WorkflowRuntime.Started>. <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService> administra internamente una suscripción a este evento y su controlador establecerá <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.State%2A> en <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeServiceState.Started>.  
  
 El mecanismo de dos fases para detener el servicio de motor en tiempo de ejecución de flujo de trabajo comienza cuando el motor en tiempo de ejecución de flujo de trabajo llama a la implementación del método <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Stop%2A> para el servicio. Este método debe llamar a la implementación base de <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Stop%2A>, que establece <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.State%2A> en <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeServiceState.Stopping>. Después de haber detenido todos sus servicios de motor en tiempo de ejecución de flujo de trabajo, el motor en tiempo de ejecución de flujo de trabajo genera el evento <xref:System.Workflow.Runtime.WorkflowRuntime.Stopped>. <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService> administra internamente una suscripción a este evento y su controlador establecerá <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.State%2A> en <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeServiceState.Stopped>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Stop">
      <MemberSignature Language="C#" Value="protected internal virtual void Stop ();" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void Stop() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Stop" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub Stop ()" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void Stop();" />
      <MemberSignature Language="F#" Value="abstract member Stop : unit -&gt; unit&#xA;override this.Stop : unit -&gt; unit" Usage="workflowRuntimeService.Stop " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Cuando se invalida en una clase derivada, detiene el servicio y cambia <see cref="P:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.State" /> a <see cref="F:System.Workflow.Runtime.Hosting.WorkflowRuntimeServiceState.Stopping" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El motor en tiempo de ejecución de flujo de trabajo invoca <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Stop%2A> en todos sus servicios que derivan de la clase <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService> cuando se llama <xref:System.Workflow.Runtime.WorkflowRuntime.StopRuntime%2A>.  El motor en tiempo de ejecución de flujo de trabajo invoca también <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Stop%2A> cuando un servicio de motor en tiempo de ejecución de flujo de trabajo es eliminado del motor en tiempo de ejecución de flujo de trabajo mediante una llamada a <xref:System.Workflow.Runtime.WorkflowRuntime.RemoveService%2A>. La implementación predeterminada de pistas <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Stop%2A> si el servicio se ha iniciado y utiliza esta información para iniciar la excepción adecuada si se detiene el servicio antes de ser iniciado.  
  
 Puede proporcionar la funcionalidad adicional necesaria para que el motor en tiempo de ejecución de flujo de trabajo detenga su servicio invalidando este método. No hay ninguna garantía sobre qué servicios, si los hay, se detendrán o se ejecutarán cuando se llama <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Stop%2A> en su servicio. El motor en tiempo de ejecución de flujo de trabajo genera el evento <xref:System.Workflow.Runtime.WorkflowRuntime.Stopped?displayProperty=nameWithType> después de haber llamado al método <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Stop%2A> de todos sus servicios del motor en tiempo de ejecución de flujo de trabajo. Su servicio puede necesitar retener alguna funcionalidad residual para admitir otros servicios hasta que los métodos de detención de todos los servicios de motor en tiempo de ejecución de flujo de trabajo hayan sido invocados por el motor en tiempo de ejecución de flujo de trabajo. Si su servicio debe retener esta funcionalidad, puede invalidar el método <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.OnStopped%2A> para realizar cualquier acción adicional exigida para terminar de detener su servicio cuando se genera el evento <xref:System.Workflow.Runtime.WorkflowRuntime.Stopped?displayProperty=nameWithType>.  
  
> [!NOTE]
>  Si <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService> se elimina del motor en tiempo de ejecución de flujo de trabajo  mediante una llamada a <xref:System.Workflow.Runtime.WorkflowRuntime.RemoveService%2A> mientras el motor en tiempo de ejecución de flujo de trabajo se está ejecutando, el motor en tiempo de ejecución de flujo de trabajo llamará <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Stop%2A> en su servicio. Sin embargo, no se llamará al método <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.OnStopped%2A> para su servicio en esta situación. Por consiguiente, su servicio puede tener que realizar una funcionalidad de apagado adicional que realizaría ordinariamente en <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.OnStopped%2A> desde dentro del método <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Stop%2A>. Puede probar <xref:System.Workflow.Runtime.WorkflowRuntime.IsStarted%2A> para determinar si el motor en tiempo de ejecución de flujo de trabajo se está ejecutando.  
  
 <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Stop%2A> debe ser llamado solamente por el motor en tiempo de ejecución de flujo de trabajo.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><see cref="P:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Runtime" /> es una referencia nula (<see langword="Nothing" /> en Visual Basic).  
  
O bien 
No se inició el servicio todavía.</exception>
      </Docs>
    </Member>
  </Members>
</Type>