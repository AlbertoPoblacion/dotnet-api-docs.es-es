<Type Name="WorkflowPersistenceService" FullName="System.Workflow.Runtime.Hosting.WorkflowPersistenceService">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="18e10f582e30a53aa6a50d655c7528f9f41e2439" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="es-ES" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36447207" />
  </Metadata>
  <TypeSignature Language="C#" Value="public abstract class WorkflowPersistenceService : System.Workflow.Runtime.Hosting.WorkflowRuntimeService" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit WorkflowPersistenceService extends System.Workflow.Runtime.Hosting.WorkflowRuntimeService" />
  <TypeSignature Language="DocId" Value="T:System.Workflow.Runtime.Hosting.WorkflowPersistenceService" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class WorkflowPersistenceService&#xA;Inherits WorkflowRuntimeService" />
  <TypeSignature Language="C++ CLI" Value="public ref class WorkflowPersistenceService abstract : System::Workflow::Runtime::Hosting::WorkflowRuntimeService" />
  <TypeSignature Language="F#" Value="type WorkflowPersistenceService = class&#xA;    inherit WorkflowRuntimeService" />
  <AssemblyInfo>
    <AssemblyName>System.Workflow.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Workflow.Runtime.Hosting.WorkflowRuntimeService</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Obsolete("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>La clase base abstracta de la que se derivan todos los servicios de persistencia.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  [!INCLUDE[DeprecatedContent](~/includes/deprecatedcontent-md.md)]  
  
 Cuando se producen ciertas condiciones mientras el flujo de trabajo está en ejecución, el motor en tiempo de ejecución de flujo de trabajo conserva información de estado sobre la instancia de flujo de trabajo. Por ejemplo, la persistencia se puede producir cuando una transacción atómica finaliza, cuando la instancia de flujo de trabajo se vuelve inactiva, cuando el host llama <xref:System.Workflow.Runtime.WorkflowInstance.Unload%2A?displayProperty=nameWithType> en la instancia de flujo de trabajo, o cuando una instancia de flujo de trabajo se finaliza o termina. Cuando la semántica del motor en tiempo de ejecución de flujo de trabajo dicta que se debe producir la persistencia, el motor en tiempo de ejecución de flujo de trabajo llama a los métodos proporcionados por un servicio de persistencia para guardar información de estado sobre la instancia de flujo de trabajo. Igualmente, cuando el motor en tiempo de ejecución de flujo de trabajo necesita restaurar una instancia de flujo de trabajo previamente conservada, llama a los métodos proporcionados por el servicio de persistencia para cargar esta información de estado. El motor en tiempo de ejecución de flujo de trabajo administra toda la semántica relacionada con el momento de realizar la persistencia. El servicio de persistencia administra el guardado y carga de la información de estado del flujo de trabajo a o de un almacén de datos.  
  
 Puede crear un servicio de persistencia derivando una clase de la clase <xref:System.Workflow.Runtime.Hosting.WorkflowPersistenceService>.  Puede agregar su servicio de persistencia al motor de tiempo de ejecución de flujo de trabajo llamando a <xref:System.Workflow.Runtime.WorkflowRuntime.AddService%2A> o realizando una entrada adecuada en el archivo de configuración de la aplicación. <xref:System.Workflow.Runtime.WorkflowRuntime> debe contener solo uno servicio de persistencia. Windows Workflow Foundation proporciona la clase <xref:System.Workflow.Runtime.Hosting.SqlWorkflowPersistenceService>, un servicio de persistencia original que puede utilizar como es o ampliarlo.  
  
 El motor en tiempo de ejecución de flujo de trabajo tiene la semántica para bloquear información de estado del flujo de trabajo para el uso en entornos donde los servicios de persistencia que funcionan en diferentes podrían tener acceso a un almacén de datos único. La clase <xref:System.Workflow.Runtime.Hosting.WorkflowPersistenceService> proporciona la capacidad para admitir esta funcionalidad del motor en tiempo de ejecución de flujo de trabajo proporcionando un parámetro a <xref:System.Workflow.Runtime.Hosting.WorkflowPersistenceService.SaveWorkflowInstanceState%2A> que especifica si la información de estado de una instancia de flujo de trabajo se debe desbloquear en el almacén de datos, y proporcionando un método <xref:System.Workflow.Runtime.Hosting.WorkflowPersistenceService.UnlockWorkflowInstanceState%2A> para desbloquear la información de estado del flujo de trabajo previamente bloqueada. En un servicio de persistencia que implementa el bloqueo, una llamada a <xref:System.Workflow.Runtime.Hosting.WorkflowPersistenceService.LoadWorkflowInstanceState%2A> debe bloquear la información de estado para una instancia de flujo de trabajo.  
  
 Su servicio de persistencia debe iniciar <xref:System.Workflow.Runtime.Hosting.PersistenceException> si no guarda información de estado en su almacén de datos o si carga información de estado de su almacén de datos. El motor de tiempo de ejecución de flujo de trabajo espera este comportamiento.  
  
 Se proporciona un mecanismo por lotes a los servicios que utilizan un almacén duradero para guardar información de estado de flujo de trabajo. Es importante en estos casos mantener la coherencia entre el almacén duradero que usa el servicio de persistencia y el estado interno del motor de tiempo de ejecución de flujo de trabajo. Puede agregar funcionalidad definida por la interfaz <xref:System.Workflow.Runtime.IPendingWork> a su servicio y, a continuación, participar en procesamiento por lotes de transacción de flujo de trabajo proporcionado por <xref:System.Workflow.Runtime.Hosting.WorkflowCommitWorkBatchService> agregando los cambios a su almacén de datos como elementos de trabajo a <xref:System.Workflow.Runtime.WorkflowEnvironment.WorkBatch%2A>. El propio almacén duradero debe implementar la interfaz <xref:System.Transactions.IEnlistmentNotification>, para que la información del flujo de trabajo no se conserve incorrectamente en caso de una recuperación de la transacción. Para obtener más información, vea <xref:System.Workflow.Runtime.Hosting.WorkflowPersistenceService.SaveCompletedContextActivity%2A> o <xref:System.Workflow.Runtime.Hosting.WorkflowPersistenceService.SaveWorkflowInstanceState%2A>.  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected WorkflowPersistenceService ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.Runtime.Hosting.WorkflowPersistenceService.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; WorkflowPersistenceService();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Cuando se implementa en una clase derivada, inicializa una instancia nueva de la clase <see cref="T:System.Workflow.Runtime.Hosting.WorkflowPersistenceService" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 En el ejemplo siguiente se muestra cómo crear una instancia de la clase `SqlWorkflowPersistenceService` (derivada de `WorkflowPersistenceService`). Este ejemplo forma parte de la muestra de SDK de Controladores de excepciones anidados, de la clase Program.cs.  Para obtener más información, consulte el [ejemplo de controladores de excepción anidados](http://msdn.microsoft.com/library/d1da0209-842b-41c8-9b7c-0cbaa1034265).  
  
 [!code-csharp[WF_Samples#161](~/samples/snippets/csharp/VS_Snippets_CFX/wf_samples/cs/snippets11.cs#161)]
 [!code-vb[WF_Samples#161](~/samples/snippets/visualbasic/VS_Snippets_CFX/wf_samples/vb/snippets11.vb#161)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetDefaultSerializedForm">
      <MemberSignature Language="C#" Value="protected static byte[] GetDefaultSerializedForm (System.Workflow.ComponentModel.Activity activity);" />
      <MemberSignature Language="ILAsm" Value=".method familystatic hidebysig unsigned int8[] GetDefaultSerializedForm(class System.Workflow.ComponentModel.Activity activity) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.Runtime.Hosting.WorkflowPersistenceService.GetDefaultSerializedForm(System.Workflow.ComponentModel.Activity)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; static cli::array &lt;System::Byte&gt; ^ GetDefaultSerializedForm(System::Workflow::ComponentModel::Activity ^ activity);" />
      <MemberSignature Language="F#" Value="static member GetDefaultSerializedForm : System.Workflow.ComponentModel.Activity -&gt; byte[]" Usage="System.Workflow.Runtime.Hosting.WorkflowPersistenceService.GetDefaultSerializedForm activity" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="activity" Type="System.Workflow.ComponentModel.Activity" />
      </Parameters>
      <Docs>
        <param name="activity">
          <see cref="T:System.Workflow.ComponentModel.Activity" /> cuyo formulario serializado se solicita.</param>
        <summary>Recupera el formulario predeterminado serializado de <see cref="T:System.Workflow.ComponentModel.Activity" />.</summary>
        <returns>El formulario predeterminado serializado de <see cref="T:System.Workflow.ComponentModel.Activity" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetIsBlocked">
      <MemberSignature Language="C#" Value="protected internal static bool GetIsBlocked (System.Workflow.ComponentModel.Activity rootActivity);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblystatic hidebysig bool GetIsBlocked(class System.Workflow.ComponentModel.Activity rootActivity) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.Runtime.Hosting.WorkflowPersistenceService.GetIsBlocked(System.Workflow.ComponentModel.Activity)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Shared Function GetIsBlocked (rootActivity As Activity) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; static bool GetIsBlocked(System::Workflow::ComponentModel::Activity ^ rootActivity);" />
      <MemberSignature Language="F#" Value="static member GetIsBlocked : System.Workflow.ComponentModel.Activity -&gt; bool" Usage="System.Workflow.Runtime.Hosting.WorkflowPersistenceService.GetIsBlocked rootActivity" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rootActivity" Type="System.Workflow.ComponentModel.Activity" />
      </Parameters>
      <Docs>
        <param name="rootActivity">La actividad raíz de la instancia de flujo de trabajo.</param>
        <summary>Indica si se bloquea la actividad determinada.</summary>
        <returns>
          <see langword="true" /> si se bloquea la actividad determinada; de lo contrario, <see langword="false" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetSuspendOrTerminateInfo">
      <MemberSignature Language="C#" Value="protected internal static string GetSuspendOrTerminateInfo (System.Workflow.ComponentModel.Activity rootActivity);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblystatic hidebysig string GetSuspendOrTerminateInfo(class System.Workflow.ComponentModel.Activity rootActivity) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.Runtime.Hosting.WorkflowPersistenceService.GetSuspendOrTerminateInfo(System.Workflow.ComponentModel.Activity)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Shared Function GetSuspendOrTerminateInfo (rootActivity As Activity) As String" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; static System::String ^ GetSuspendOrTerminateInfo(System::Workflow::ComponentModel::Activity ^ rootActivity);" />
      <MemberSignature Language="F#" Value="static member GetSuspendOrTerminateInfo : System.Workflow.ComponentModel.Activity -&gt; string" Usage="System.Workflow.Runtime.Hosting.WorkflowPersistenceService.GetSuspendOrTerminateInfo rootActivity" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rootActivity" Type="System.Workflow.ComponentModel.Activity" />
      </Parameters>
      <Docs>
        <param name="rootActivity">La actividad raíz de la instancia de flujo de trabajo.</param>
        <summary>Recupera la finalización o suspende la información de la actividad determinada.</summary>
        <returns>
          <see cref="T:System.String" /> que contiene la finalización o suspende información.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetWorkflowStatus">
      <MemberSignature Language="C#" Value="protected internal static System.Workflow.Runtime.WorkflowStatus GetWorkflowStatus (System.Workflow.ComponentModel.Activity rootActivity);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblystatic hidebysig valuetype System.Workflow.Runtime.WorkflowStatus GetWorkflowStatus(class System.Workflow.ComponentModel.Activity rootActivity) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.Runtime.Hosting.WorkflowPersistenceService.GetWorkflowStatus(System.Workflow.ComponentModel.Activity)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Shared Function GetWorkflowStatus (rootActivity As Activity) As WorkflowStatus" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; static System::Workflow::Runtime::WorkflowStatus GetWorkflowStatus(System::Workflow::ComponentModel::Activity ^ rootActivity);" />
      <MemberSignature Language="F#" Value="static member GetWorkflowStatus : System.Workflow.ComponentModel.Activity -&gt; System.Workflow.Runtime.WorkflowStatus" Usage="System.Workflow.Runtime.Hosting.WorkflowPersistenceService.GetWorkflowStatus rootActivity" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Workflow.Runtime.WorkflowStatus</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rootActivity" Type="System.Workflow.ComponentModel.Activity" />
      </Parameters>
      <Docs>
        <param name="rootActivity">La actividad raíz de la instancia de flujo de trabajo.</param>
        <summary>Recupera el estado del flujo de trabajo.</summary>
        <returns>Un <see cref="T:System.Workflow.Runtime.WorkflowStatus" /> valor de enumeración que denota el estado del flujo de trabajo.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LoadCompletedContextActivity">
      <MemberSignature Language="C#" Value="protected internal abstract System.Workflow.ComponentModel.Activity LoadCompletedContextActivity (Guid scopeId, System.Workflow.ComponentModel.Activity outerActivity);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance class System.Workflow.ComponentModel.Activity LoadCompletedContextActivity(valuetype System.Guid scopeId, class System.Workflow.ComponentModel.Activity outerActivity) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.Runtime.Hosting.WorkflowPersistenceService.LoadCompletedContextActivity(System.Guid,System.Workflow.ComponentModel.Activity)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend MustOverride Function LoadCompletedContextActivity (scopeId As Guid, outerActivity As Activity) As Activity" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; abstract System::Workflow::ComponentModel::Activity ^ LoadCompletedContextActivity(Guid scopeId, System::Workflow::ComponentModel::Activity ^ outerActivity);" />
      <MemberSignature Language="F#" Value="abstract member LoadCompletedContextActivity : Guid * System.Workflow.ComponentModel.Activity -&gt; System.Workflow.ComponentModel.Activity" Usage="workflowPersistenceService.LoadCompletedContextActivity (scopeId, outerActivity)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Workflow.ComponentModel.Activity</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="scopeId" Type="System.Guid" />
        <Parameter Name="outerActivity" Type="System.Workflow.ComponentModel.Activity" />
      </Parameters>
      <Docs>
        <param name="scopeId">
          <see cref="T:System.Guid" /> del ámbito completado.</param>
        <param name="outerActivity">
          <see cref="T:System.Workflow.ComponentModel.Activity" /> que representa la actividad que incluye el ámbito completado.</param>
        <summary>Cuando se implementa en una clase derivada, se vuelve a cargar en la memoria el ámbito completado especificado.</summary>
        <returns>
          <see cref="T:System.Workflow.ComponentModel.Activity" /> que representa el ámbito completado.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El motor en tiempo de ejecución de flujo de trabajo utiliza <xref:System.Workflow.Runtime.Hosting.WorkflowPersistenceService.LoadCompletedContextActivity%2A> para implementar la compensación. Debe restaurar una copia idéntica del ámbito completado. Para ello, debe restaurar un <xref:System.IO.Stream> válido a partir de su representación del ámbito completado en el almacén de datos. A continuación, debe pasar <xref:System.IO.Stream> a uno de los métodos sobrecargados de <xref:System.Workflow.ComponentModel.Activity.Load%2A> para realizar la deserialización del ámbito.  
  
 Si su servicio de persistencia no puede cargar el ámbito completado de su almacén de datos, debe iniciar <xref:System.Workflow.Runtime.Hosting.PersistenceException> con un mensaje adecuado.  
  
   
  
## Examples  
 En el siguiente ejemplo se muestra una implementación del método `LoadCompletedContextActivity`. Este ejemplo pertenece a la muestra Servicio de persistencia personalizado, del archivo FilePersistenceService.cs. Para obtener más información, consulte [ejemplo de servicio de persistencia personalizado](http://msdn.microsoft.com/library/869dfadf-5298-4551-bc80-f4cf7918729d).  
  
 [!code-csharp[WF_Samples#269](~/samples/snippets/csharp/VS_Snippets_CFX/wf_samples/cs/snippets24.cs#269)]
 [!code-vb[WF_Samples#269](~/samples/snippets/visualbasic/VS_Snippets_CFX/wf_samples/vb/snippets24.vb#269)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LoadWorkflowInstanceState">
      <MemberSignature Language="C#" Value="protected internal abstract System.Workflow.ComponentModel.Activity LoadWorkflowInstanceState (Guid instanceId);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance class System.Workflow.ComponentModel.Activity LoadWorkflowInstanceState(valuetype System.Guid instanceId) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.Runtime.Hosting.WorkflowPersistenceService.LoadWorkflowInstanceState(System.Guid)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend MustOverride Function LoadWorkflowInstanceState (instanceId As Guid) As Activity" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; abstract System::Workflow::ComponentModel::Activity ^ LoadWorkflowInstanceState(Guid instanceId);" />
      <MemberSignature Language="F#" Value="abstract member LoadWorkflowInstanceState : Guid -&gt; System.Workflow.ComponentModel.Activity" Usage="workflowPersistenceService.LoadWorkflowInstanceState instanceId" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Workflow.ComponentModel.Activity</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="instanceId" Type="System.Guid" />
      </Parameters>
      <Docs>
        <param name="instanceId">
          <see cref="T:System.Guid" /> de la actividad raíz de la instancia de flujo de trabajo.</param>
        <summary>Cuando se implementa en una clase derivada, carga de nuevo en la memoria el estado especificado de la instancia de flujo de trabajo.</summary>
        <returns>
          <see cref="T:System.Workflow.ComponentModel.Activity" /> que representa la actividad raíz de la instancia de flujo de trabajo.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Debe restaurar una copia idéntica de la actividad. Para ello, debe restaurar un <xref:System.IO.Stream> válido a partir de su representación de la instancia de flujo de trabajo en el almacén de datos; a continuación, debe pasar <xref:System.IO.Stream> a uno de los métodos <xref:System.Workflow.ComponentModel.Activity.Load%2A> sobrecargados para deserializar el estado de la instancia de flujo de trabajo. Si su servicio de persistencia no puede cargar el estado de la instancia de flujo de trabajo de su almacén de datos, debe iniciar <xref:System.Workflow.Runtime.Hosting.PersistenceException> con un mensaje adecuado.  
  
 El motor en tiempo de ejecución de flujo de trabajo implementa la semántica del bloqueo para restringir el acceso a un estado de la instancia de flujo de trabajo guardado en un almacén de datos. Los servicios de persistencia que se ejecutan en varios procesos pueden tener acceso a esto. Las semántica del bloqueo está diseñadas para evitar que los servicios de persistencia que se ejecutan en dos procesos diferentes se carguen a la misma instancia de flujo de trabajo al mismo tiempo en la memoria. Dependiendo del tipo de entorno que pueda admitir su servicio de persistencia, puede decidir si admitir esta funcionalidad. Si decide admitir las semántica del bloqueo en tiempo de ejecución, y si otro proceso ha bloqueado previamente este estado de la instancia de flujo de trabajo, a continuación, debe iniciar <xref:System.Workflow.Runtime.WorkflowOwnershipException>. De lo contrario, debe bloquear el acceso al estado de instancia de flujo de trabajo en su almacén de datos. Se puede desbloquear el estado de la instancia de flujo de trabajo mediante una llamada a <xref:System.Workflow.Runtime.Hosting.WorkflowPersistenceService.UnlockWorkflowInstanceState%2A> o una llamada a <xref:System.Workflow.Runtime.Hosting.WorkflowPersistenceService.SaveWorkflowInstanceState%2A> con el parámetro desbloqueado establecido en `true`.  
  
   
  
## Examples  
 En el siguiente ejemplo se muestra una implementación del método `LoadWorkflowInstanceState`. Este ejemplo pertenece a la muestra Servicio de persistencia personalizado, del archivo FilePersistenceService.cs. Para obtener más información, consulte [ejemplo de servicio de persistencia personalizado](http://msdn.microsoft.com/library/869dfadf-5298-4551-bc80-f4cf7918729d).  
  
 [!code-csharp[WF_Samples#266](~/samples/snippets/csharp/VS_Snippets_CFX/wf_samples/cs/snippets24.cs#266)]
 [!code-vb[WF_Samples#266](~/samples/snippets/visualbasic/VS_Snippets_CFX/wf_samples/vb/snippets24.vb#266)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RestoreFromDefaultSerializedForm">
      <MemberSignature Language="C#" Value="protected static System.Workflow.ComponentModel.Activity RestoreFromDefaultSerializedForm (byte[] activityBytes, System.Workflow.ComponentModel.Activity outerActivity);" />
      <MemberSignature Language="ILAsm" Value=".method familystatic hidebysig class System.Workflow.ComponentModel.Activity RestoreFromDefaultSerializedForm(unsigned int8[] activityBytes, class System.Workflow.ComponentModel.Activity outerActivity) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.Runtime.Hosting.WorkflowPersistenceService.RestoreFromDefaultSerializedForm(System.Byte[],System.Workflow.ComponentModel.Activity)" />
      <MemberSignature Language="VB.NET" Value="Protected Shared Function RestoreFromDefaultSerializedForm (activityBytes As Byte(), outerActivity As Activity) As Activity" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; static System::Workflow::ComponentModel::Activity ^ RestoreFromDefaultSerializedForm(cli::array &lt;System::Byte&gt; ^ activityBytes, System::Workflow::ComponentModel::Activity ^ outerActivity);" />
      <MemberSignature Language="F#" Value="static member RestoreFromDefaultSerializedForm : byte[] * System.Workflow.ComponentModel.Activity -&gt; System.Workflow.ComponentModel.Activity" Usage="System.Workflow.Runtime.Hosting.WorkflowPersistenceService.RestoreFromDefaultSerializedForm (activityBytes, outerActivity)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Workflow.ComponentModel.Activity</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="activityBytes" Type="System.Byte[]" />
        <Parameter Name="outerActivity" Type="System.Workflow.ComponentModel.Activity" />
      </Parameters>
      <Docs>
        <param name="activityBytes">El formulario predeterminado serializado de <see cref="T:System.Workflow.ComponentModel.Activity" />.</param>
        <param name="outerActivity">El <see cref="T:System.Workflow.ComponentModel.Activity" />exterior, que contiene <see cref="T:System.Workflow.ComponentModel.Activity" /> para restaurar.</param>
        <summary>Restaura <see cref="T:System.Workflow.ComponentModel.Activity" /> a partir de su formulario serializado.</summary>
        <returns>La clase <see cref="T:System.Workflow.ComponentModel.Activity" /> restaurada.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 En el siguiente ejemplo se muestra una implementación del método `RestoreFromDefaultSerializedForm`. Este ejemplo pertenece a la muestra Servicio de persistencia personalizado, del archivo FilePersistenceService.cs. Para obtener más información, consulte [ejemplo de servicio de persistencia personalizado](http://msdn.microsoft.com/library/869dfadf-5298-4551-bc80-f4cf7918729d).  
  
 [!code-csharp[WF_Samples#269](~/samples/snippets/csharp/VS_Snippets_CFX/wf_samples/cs/snippets24.cs#269)]
 [!code-vb[WF_Samples#269](~/samples/snippets/visualbasic/VS_Snippets_CFX/wf_samples/vb/snippets24.vb#269)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SaveCompletedContextActivity">
      <MemberSignature Language="C#" Value="protected internal abstract void SaveCompletedContextActivity (System.Workflow.ComponentModel.Activity activity);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void SaveCompletedContextActivity(class System.Workflow.ComponentModel.Activity activity) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.Runtime.Hosting.WorkflowPersistenceService.SaveCompletedContextActivity(System.Workflow.ComponentModel.Activity)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; abstract void SaveCompletedContextActivity(System::Workflow::ComponentModel::Activity ^ activity);" />
      <MemberSignature Language="F#" Value="abstract member SaveCompletedContextActivity : System.Workflow.ComponentModel.Activity -&gt; unit" Usage="workflowPersistenceService.SaveCompletedContextActivity activity" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="activity" Type="System.Workflow.ComponentModel.Activity" />
      </Parameters>
      <Docs>
        <param name="activity">
          <see cref="T:System.Workflow.ComponentModel.Activity" /> que representa el ámbito completado.</param>
        <summary>Cuando se implementa en una clase derivada, guarda en la memoria el ámbito completado especificado.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El motor en tiempo de ejecución de flujo de trabajo guarda el estado de las actividades del ámbito completadas para implementar la compensación. Debe llamar a uno de los métodos <xref:System.Workflow.ComponentModel.Activity.Save%2A> sobrecargados para serializar `activity` en <xref:System.IO.Stream>; a continuación, puede decidir procesar también <xref:System.IO.Stream> antes de escribirlo en su almacén de datos. Sin embargo, cuando el motor en tiempo de ejecución de flujo de trabajo llama <xref:System.Workflow.Runtime.Hosting.WorkflowPersistenceService.LoadCompletedContextActivity%2A>, debe restaurar una copia idéntica de la actividad.  
  
 Debe poder asociar el ámbito completado a su instancia de flujo de trabajo envolvente para marcar el ámbito como innecesario en su almacén de datos cuando la instancia de flujo de trabajo termina o se finaliza. Por consiguiente, también debe guardar <xref:System.Guid> de la instancia de flujo de trabajo que está asociada al ámbito completado; esto se puede obtener de la propiedad <xref:System.Workflow.Runtime.WorkflowInstance.InstanceId%2A> de <xref:System.Workflow.Runtime.WorkflowInstance> asociada a `activity`.  
  
 <xref:System.Workflow.Runtime.Hosting.WorkflowPersistenceService.LoadCompletedContextActivity%2A> toma <xref:System.Guid> del ámbito completado como un parámetro. Por consiguiente, también debe guardar la propiedad <xref:System.Workflow.ComponentModel.ActivityExecutionContext.ContextGuid%2A> asociada a `activity`. Se puede hacer referencia a esta propiedad a través del campo <xref:System.Workflow.ComponentModel.Activity.ActivityContextGuidProperty> de `activity`.  
  
 Si implementa un servicio de persistencia que utiliza un almacén duradero, para mantener la coherencia con el estado interno del motor en runtime del flujo de trabajo, debería participar en el procesamiento por lotes de las transacciones del flujo de trabajo para aplazar la escritura real a su almacén duradero hasta un punto de confirmación del flujo de trabajo. Para participar en procesamiento por lotes, agregue un elemento de trabajo a la propiedad <xref:System.Workflow.Runtime.WorkflowEnvironment.WorkBatch%2A> que representa los cambios pendientes en la base de datos e implemente la interfaz <xref:System.Workflow.Runtime.IPendingWork> en su servicio de persistencia.  
  
 Si no puede guardar el ámbito completado en su almacén de datos, debe iniciar <xref:System.Workflow.Runtime.Hosting.PersistenceException> con un mensaje de error adecuado.  
  
   
  
## Examples  
 En el siguiente ejemplo se muestra una implementación del método `SaveCompletedContextActivity`. Este ejemplo pertenece a la muestra Servicio de persistencia personalizado, del archivo FilePersistenceService.cs. Para obtener más información, consulte [ejemplo de servicio de persistencia personalizado](http://msdn.microsoft.com/library/869dfadf-5298-4551-bc80-f4cf7918729d).  
  
 [!code-csharp[WF_Samples#268](~/samples/snippets/csharp/VS_Snippets_CFX/wf_samples/cs/snippets24.cs#268)]
 [!code-vb[WF_Samples#268](~/samples/snippets/visualbasic/VS_Snippets_CFX/wf_samples/vb/snippets24.vb#268)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SaveWorkflowInstanceState">
      <MemberSignature Language="C#" Value="protected internal abstract void SaveWorkflowInstanceState (System.Workflow.ComponentModel.Activity rootActivity, bool unlock);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void SaveWorkflowInstanceState(class System.Workflow.ComponentModel.Activity rootActivity, bool unlock) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.Runtime.Hosting.WorkflowPersistenceService.SaveWorkflowInstanceState(System.Workflow.ComponentModel.Activity,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend MustOverride Sub SaveWorkflowInstanceState (rootActivity As Activity, unlock As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; abstract void SaveWorkflowInstanceState(System::Workflow::ComponentModel::Activity ^ rootActivity, bool unlock);" />
      <MemberSignature Language="F#" Value="abstract member SaveWorkflowInstanceState : System.Workflow.ComponentModel.Activity * bool -&gt; unit" Usage="workflowPersistenceService.SaveWorkflowInstanceState (rootActivity, unlock)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rootActivity" Type="System.Workflow.ComponentModel.Activity" />
        <Parameter Name="unlock" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="rootActivity">La actividad raíz de la instancia de flujo de trabajo.</param>
        <param name="unlock">
          <see langword="true" /> si no se debe bloquear la instancia de flujo de trabajo; <see langword="false" /> si se debe bloquear la instancia de flujo de trabajo.</param>
        <summary>Cuando se implementa en una clase derivada, guarda el estado de la instancia de flujo de trabajo en un almacén de datos.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Debe llamar a uno de los métodos <xref:System.Workflow.ComponentModel.Activity.Save%2A> sobrecargados para serializar `rootActivity` en <xref:System.IO.Stream>. A continuación, puede decidir procesar también <xref:System.IO.Stream> antes de escribirlo en su almacén de datos. Sin embargo, cuando el motor en tiempo de ejecución de flujo de trabajo llama <xref:System.Workflow.Runtime.Hosting.WorkflowPersistenceService.LoadWorkflowInstanceState%2A>, debe restaurar una copia idéntica de la actividad raíz. Si no puede guardar el estado de la instancia de flujo de trabajo en su almacén de datos, debe iniciar <xref:System.Workflow.Runtime.Hosting.PersistenceException> con un mensaje de error adecuado.  
  
 El motor en tiempo de ejecución de flujo de trabajo proporciona la semántica del bloqueo para restringir el acceso a un estado de la instancia de flujo de trabajo guardado en el almacén de datos. Los servicios de persistencia pueden tener acceso a esto ejecutándose en varios hosts y señalando al mismo almacén de datos. La semántica del bloqueo está diseñada para evitar que los servicios de persistencia que se ejecutan en dos tiempos de ejecución de flujo de trabajo diferentes se carguen a la misma instancia de flujo de trabajo al mismo tiempo en la memoria. Dependiendo del tipo de entorno que pueda admitir su servicio de persistencia, puede decidir si admitir o no esta funcionalidad. Si decide admitir las semántica del bloqueo en tiempo de ejecución, a continuación, si un servicio de persistencia intenta guardar un estado de la instancia de flujo de trabajo bloqueado previamente por otro servicio de persistencia, debe iniciar <xref:System.Workflow.Runtime.WorkflowOwnershipException>. Si `unlock` es `true`, debe desbloquear el acceso al estado de la instancia de flujo de trabajo después de guardarlo.  
  
 <xref:System.Workflow.Runtime.Hosting.WorkflowPersistenceService.LoadWorkflowInstanceState%2A> toma <xref:System.Guid> de la instancia de flujo de trabajo como un parámetro. Por consiguiente, debe guardar este <xref:System.Guid>. También puede utilizar <xref:System.Guid> para asociar la instancia de flujo de trabajo a los estados guardados de sus ámbitos completados. Debe hacer esto porque debe poder marcar estos ámbitos completados como innecesarios cuando se complete la instancia de flujo de trabajo.  
  
 El motor en tiempo de ejecución de flujo de trabajo llama <xref:System.Workflow.Runtime.Hosting.WorkflowPersistenceService.SaveWorkflowInstanceState%2A> una hora final cuando la instancia de flujo de trabajo se completa o finaliza. Por consiguiente, si <xref:System.Workflow.Runtime.Hosting.WorkflowPersistenceService.GetWorkflowStatus%2A> es igual a <xref:System.Workflow.Runtime.WorkflowStatus.Completed> o <xref:System.Workflow.Runtime.WorkflowStatus.Terminated>, puede eliminar sin ningún riesgo la instancia de flujo de trabajo y todos sus ámbitos completados asociados a su almacén de datos. Alternativamente, puede suscribir a <xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowCompleted> o los eventos <xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowTerminated> para determinar cuando está seguro para eliminar registros asociados a la instancia de flujo de trabajo. Si realmente elimina los registros de su almacén de datos depende de su implementación.  
  
 Si implementa un servicio de persistencia que utiliza un almacén duradero, a continuación, para mantener la coherencia con el estado interno del motor en tiempo de ejecución de flujo de trabajo, debe participar en procesamiento por lotes de transacción de flujo de trabajo para diferir la escritura real a su almacén duradero hasta un punto de confirmación de flujo de trabajo. Para participar en procesamiento por lotes, agregue un elemento de trabajo que represente los elementos pendientes en su almacén duradero a la propiedad <xref:System.Workflow.Runtime.WorkflowEnvironment.WorkBatch%2A>, e implemente la interfaz <xref:System.Workflow.Runtime.IPendingWork> en su servicio de persistencia.  
  
   
  
## Examples  
 En el siguiente ejemplo se muestra una implementación del método `SaveWorkflowInstanceState`. Este ejemplo pertenece a la muestra Servicio de persistencia personalizado, del archivo FilePersistenceService.cs. Para obtener más información, consulte [ejemplo de servicio de persistencia personalizado](http://msdn.microsoft.com/library/869dfadf-5298-4551-bc80-f4cf7918729d).  
  
 [!code-csharp[WF_Samples#264](~/samples/snippets/csharp/VS_Snippets_CFX/wf_samples/cs/snippets24.cs#264)]
 [!code-vb[WF_Samples#264](~/samples/snippets/visualbasic/VS_Snippets_CFX/wf_samples/vb/snippets24.vb#264)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="UnloadOnIdle">
      <MemberSignature Language="C#" Value="protected internal abstract bool UnloadOnIdle (System.Workflow.ComponentModel.Activity activity);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance bool UnloadOnIdle(class System.Workflow.ComponentModel.Activity activity) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.Runtime.Hosting.WorkflowPersistenceService.UnloadOnIdle(System.Workflow.ComponentModel.Activity)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; abstract bool UnloadOnIdle(System::Workflow::ComponentModel::Activity ^ activity);" />
      <MemberSignature Language="F#" Value="abstract member UnloadOnIdle : System.Workflow.ComponentModel.Activity -&gt; bool" Usage="workflowPersistenceService.UnloadOnIdle activity" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="activity" Type="System.Workflow.ComponentModel.Activity" />
      </Parameters>
      <Docs>
        <param name="activity">
          <see cref="T:System.Workflow.ComponentModel.Activity" /> que representa el ámbito completado.</param>
        <summary>Determina si un flujo de trabajo se debe descargar cuando está inactivo.</summary>
        <returns>Si es <see langword="true" />, el motor en tiempo de ejecución del flujo de trabajo descarga el flujo de trabajo especificado cuando esté inactivo.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 En el siguiente ejemplo se muestra una implementación del método `UnloadOnIdle`. Este ejemplo pertenece a la muestra Servicio de persistencia personalizado, del archivo FilePersistenceService.cs. Para obtener más información, consulte [ejemplo de servicio de persistencia personalizado](http://msdn.microsoft.com/library/869dfadf-5298-4551-bc80-f4cf7918729d).  
  
 [!code-csharp[WF_Samples#270](~/samples/snippets/csharp/VS_Snippets_CFX/wf_samples/cs/snippets24.cs#270)]
 [!code-vb[WF_Samples#270](~/samples/snippets/visualbasic/VS_Snippets_CFX/wf_samples/vb/snippets24.vb#270)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="UnlockWorkflowInstanceState">
      <MemberSignature Language="C#" Value="protected internal abstract void UnlockWorkflowInstanceState (System.Workflow.ComponentModel.Activity rootActivity);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void UnlockWorkflowInstanceState(class System.Workflow.ComponentModel.Activity rootActivity) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.Runtime.Hosting.WorkflowPersistenceService.UnlockWorkflowInstanceState(System.Workflow.ComponentModel.Activity)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend MustOverride Sub UnlockWorkflowInstanceState (rootActivity As Activity)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; abstract void UnlockWorkflowInstanceState(System::Workflow::ComponentModel::Activity ^ rootActivity);" />
      <MemberSignature Language="F#" Value="abstract member UnlockWorkflowInstanceState : System.Workflow.ComponentModel.Activity -&gt; unit" Usage="workflowPersistenceService.UnlockWorkflowInstanceState rootActivity" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rootActivity" Type="System.Workflow.ComponentModel.Activity" />
      </Parameters>
      <Docs>
        <param name="rootActivity">La actividad raíz de la instancia de flujo de trabajo.</param>
        <summary>Cuando se invalida en una clase derivada, desbloquea el estado de la instancia de flujo de trabajo.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este método es abstracto, por lo que no contiene una implementación predeterminada bloqueo y desbloqueo.  
  
 Cuando se implementa un servicio de persistencia personalizado, si desea implementar un esquema de bloqueo necesitará invalidar este método y proporcionar un mecanismo de bloqueo-desbloqueo en el método <xref:System.Workflow.Runtime.Hosting.WorkflowPersistenceService.SaveWorkflowInstanceState%2A> basado en el valor del parámetro desbloqueado.  
  
   
  
## Examples  
 En el siguiente ejemplo se muestra una implementación del método `UnlockWorkflowInstanceState`. Este ejemplo pertenece a la muestra Servicio de persistencia personalizado, del archivo FilePersistenceService.cs. Para obtener más información, consulte [ejemplo de servicio de persistencia personalizado](http://msdn.microsoft.com/library/869dfadf-5298-4551-bc80-f4cf7918729d).  
  
 [!code-csharp[WF_Samples#267](~/samples/snippets/csharp/VS_Snippets_CFX/wf_samples/cs/snippets24.cs#267)]
 [!code-vb[WF_Samples#267](~/samples/snippets/visualbasic/VS_Snippets_CFX/wf_samples/vb/snippets24.vb#267)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>