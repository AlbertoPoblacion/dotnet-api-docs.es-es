<Type Name="ClaimsAuthorizationManager" FullName="System.Security.Claims.ClaimsAuthorizationManager">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="fa77fc99c06460c962f41c33b11554f448051d19" />
    <Meta Name="ms.sourcegitcommit" Value="434f60616a9793fa8436744549fc856e94f7a648" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="es-ES" />
    <Meta Name="ms.lasthandoff" Value="08/24/2018" />
    <Meta Name="ms.locfileid" Value="36531915" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class ClaimsAuthorizationManager : System.IdentityModel.Configuration.ICustomIdentityConfiguration" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit ClaimsAuthorizationManager extends System.Object implements class System.IdentityModel.Configuration.ICustomIdentityConfiguration" />
  <TypeSignature Language="DocId" Value="T:System.Security.Claims.ClaimsAuthorizationManager" />
  <TypeSignature Language="VB.NET" Value="Public Class ClaimsAuthorizationManager&#xA;Implements ICustomIdentityConfiguration" />
  <TypeSignature Language="C++ CLI" Value="public ref class ClaimsAuthorizationManager : System::IdentityModel::Configuration::ICustomIdentityConfiguration" />
  <TypeSignature Language="F#" Value="type ClaimsAuthorizationManager = class&#xA;    interface ICustomIdentityConfiguration" />
  <AssemblyInfo>
    <AssemblyName>System.IdentityModel</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IdentityModel.Configuration.ICustomIdentityConfiguration</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>Define la implementación base de un administrador de autorización de notificaciones.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La <xref:System.Security.Claims.ClaimsAuthorizationManager> clase proporciona la implementación base para un administrador de autorización de notificaciones. Un administrador de autorización de notificaciones puede utilizarse en los dos escenarios siguientes:  
  
-   En las aplicaciones basadas en web y servicios, un administrador de autorización de notificaciones puede agregarse a la canalización de procesamiento para proporcionar un punto de extensibilidad de la que puede autorizar el acceso a un recurso de acuerdo con el valor de las notificaciones entrantes antes del código de aplicación que se llama realmente implementa el recurso solicitado.  
  
-   Cuando se usa el <xref:System.IdentityModel.Services.ClaimsPrincipalPermission> clase o el <xref:System.IdentityModel.Services.ClaimsPrincipalPermissionAttribute> clase declarativo o imperativo de acceso basado en notificaciones comprueba en el código, el Administrador de autorización de notificaciones está configurado para la aplicación es llamado por el sistema para realizar el comprobación. Comprobaciones de acceso basado en notificaciones se pueden realizar en las aplicaciones basadas en web y aplicaciones de escritorio.  
  
 La implementación predeterminada proporcionada por el <xref:System.Security.Claims.ClaimsAuthorizationManager> clase autoriza el acceso para cada notificación presentan; sin embargo, puede derivar de esta clase e invalidar el <xref:System.Security.Claims.ClaimsAuthorizationManager.CheckAccess%2A> método para proporcionar su propia lógica de autorización.  
  
 El uso de un administrador de autorización de notificaciones es opcional. Puede configurar la aplicación para usar un administrador de autorización de notificaciones mediante programación utilizando la <xref:System.IdentityModel.Configuration.IdentityConfiguration> de clase o de forma declarativa, especificando el [ &lt;claimsAuthorizationManager&gt; ](~/docs/framework/configure-apps/file-schema/windows-identity-foundation/claimsauthorizationmanager.md)elemento, que es un elemento secundario de la [ &lt;identityConfiguration&gt; ](~/docs/framework/configure-apps/file-schema/windows-identity-foundation/identityconfiguration.md) elemento en el archivo de configuración de la aplicación. Si la aplicación es un sitio web o una aplicación web hospedada en Internet Information Services (IIS), debe agregar también el <xref:System.IdentityModel.Services.ClaimsAuthorizationModule> en la colección de módulos HTTP de ASP.NET.  
  
> [!IMPORTANT]
>  Cuando se usa el <xref:System.IdentityModel.Services.ClaimsPrincipalPermission> clase o el <xref:System.IdentityModel.Services.ClaimsPrincipalPermissionAttribute> (clase), el Administrador de autorización de notificaciones que se usa para realizar la comprobación de acceso es lo que se especifica en la configuración de la identidad bajo la <xref:System.IdentityModel.Services.FederatedAuthentication.FederationConfiguration%2A?displayProperty=nameWithType> propiedad. En un archivo de configuración es la `<identityConfiguration>` sección que se hace referencia desde el valor predeterminado `<federationConfiguration>` elemento. Esto es verdad incluso para servicios Windows Communication Foundation (WCF) y aplicaciones de escritorio.  
  
 El <xref:System.Security.Claims.ClaimsAuthorizationManager> clase base no toma ninguna configuración adicional; sin embargo, puede invalidar el <xref:System.Security.Claims.ClaimsAuthorizationManager.LoadCustomConfiguration%2A> en sus clases derivadas para proporcionar la inicialización de su administrador de autorización de notificaciones de elementos secundarios de la `<claimsAuthorizationElement>`. El escenario típico es usar estos elementos secundarios para especificar las directivas de autorización que determinan qué tipos de notificación y los valores son necesarios para obtener acceso a los recursos. Esto no es un requisito de disco duro, aunque es libre para definir cualquier uso y la sintaxis que tenga sentido para su implementación.  
  
   
  
## Examples  
 Los ejemplos de código que se usan en el <xref:System.Security.Claims.ClaimsAuthorizationManager> temas se toman de la `Claims Based Authorization` ejemplo. Este ejemplo proporciona un administrador de autorización de notificaciones personalizadas que puede autorizar a los sujetos según una directiva que se especifica en configuración. El Administrador de autorización de notificaciones personalizadas consta de tres componentes básicos: una clase derivada de <xref:System.Security.Claims.ClaimsAuthorizationManager> que implementa el Administrador de la `ResourceAction` clase que empareja un recurso y una acción y un lector de directiva que lee y compila la directiva de especificada en el archivo de configuración. Esto compila la directiva puede, a continuación, usar el Administrador de autorización de notificaciones para evaluar una entidad de seguridad para autorizar el acceso a los recursos. No todos los elementos se muestran por brevedad. Para obtener información acerca de este ejemplo y otros ejemplos disponibles para WIF y dónde descargarlas, consulte [índice de ejemplo de código WIF](~/docs/framework/security/wif-code-sample-index.md).  
  
 El código siguiente muestra la implementación del Administrador de autorización de notificaciones personalizadas. El <xref:System.Security.Claims.ClaimsAuthorizationManager.LoadCustomConfiguration%2A> método lee y compila la directiva de configuración mediante el uso de la clase de aplicación auxiliar de lector de directiva (no mostrada) y el <xref:System.Security.Claims.ClaimsAuthorizationManager.CheckAccess%2A> método concede o deniega el acceso basado en esta directiva.  
  
 [!code-csharp[WifClaimsBasedAuthorization#2](~/samples/snippets/csharp/VS_Snippets_Misc/wifclaimsbasedauthorization/cs/claimsauthorizationlibrary/myclaimsauthorizationmanager.cs#2)]  
  
 El siguiente código muestra la `ResourceAction` clase usada por el Administrador de notificaciones personalizadas.  
  
 [!code-csharp[WifClaimsBasedAuthorization#1](~/samples/snippets/csharp/VS_Snippets_Misc/wifclaimsbasedauthorization/cs/claimsauthorizationlibrary/resourceaction.cs#1)]  
  
 El siguiente XML muestra cómo configurar las notificaciones de administrador de autorización que se muestra anteriormente para una aplicación web hospedada en IIS 7.5. Se muestran los elementos específicos de la configuración del Administrador de autorización de notificaciones. Tenga en cuenta que una referencia a la <xref:System.IdentityModel.Services.ClaimsAuthorizationModule> clase debe agregarse a la canalización en el `<system.Webserver>` elemento. Para sitios y aplicaciones hospedadas en las versiones de IIS anteriores a IIS 7, los módulos se pueden agregar a la canalización en el `<system.Web>` elemento. Esta configuración se muestran pero comentada.  
  
 Se especifica la directiva utilizada por el Administrador de autorización de notificaciones personalizada `<policy>` elementos bajo la [ &lt;claimsAuthorizationManager&gt; ](~/docs/framework/configure-apps/file-schema/windows-identity-foundation/claimsauthorizationmanager.md) elemento. En la primera directiva, la entidad de seguridad debe poseer una de las notificaciones especificadas con el fin de realizar la acción especificada en el recurso especificado. En la segunda directiva, la entidad de seguridad debe poseer ambas notificaciones para poder realizar la acción especificada en el recurso especificado. En todos los demás, la entidad de seguridad se concede automáticamente acceso independientemente de las notificaciones que posee.  
  
```  
<configuration>  
  <configSections>  
    <!--WIF 4.5 sections -->  
    <section name="system.identityModel" type="System.IdentityModel.Configuration.SystemIdentityModelSection, System.IdentityModel, Version=4.0.0.0, Culture=neutral, PublicKeyToken=B77A5C561934E089"/>  
    ...  
  
  </configSections>  
  
  ...  
  
  <system.web>  
    <httpModules>  
      <!--WIF 4.5 modules -->  
      <!--Not needed here for IIS >= 7 -->  
      <!--<add name="ClaimsAuthorizationModule" type="System.IdentityModel.Services.ClaimsAuthorizationModule, System.IdentityModel.Services, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"/>-->  
    </httpModules>  
  </system.web>  
  
  ...  
  
  <system.webServer>  
    <modules>  
      <!--WIF 4.5 modules -->  
      <add name="ClaimsAuthorizationModule" type="System.IdentityModel.Services.ClaimsAuthorizationModule, System.IdentityModel.Services, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"/>  
    </modules>  
  </system.webServer>  
  
  ...  
  
  <!-- WIF 4.5 s.im section-->  
  <system.identityModel>  
    <identityConfiguration>  
      <claimsAuthorizationManager type="ClaimsAuthorizationLibrary.MyClaimsAuthorizationManager, ClaimsAuthorizationLibrary">  
        <policy resource="http://localhost:28491/Developers.aspx" action="GET">  
          <or>  
            <claim claimType="http://schemas.microsoft.com/ws/2008/06/identity/claims/role" claimValue="developer" />  
            <claim claimType="http://schemas.xmlsoap.org/claims/Group" claimValue="Administrator" />  
          </or>  
        </policy>  
        <policy resource="http://localhost:28491/Administrators.aspx" action="GET">  
          <and>  
            <claim claimType="http://schemas.xmlsoap.org/claims/Group" claimValue="Administrator" />  
            <claim claimType="http://schemas.xmlsoap.org/ws/2005/05/identity/claims/country" claimValue="USA" />  
          </and>  
        </policy>  
        <policy resource="http://localhost:28491/Default.aspx" action="GET">  
        </policy>  
        <policy resource="http://localhost:28491/" action="GET">  
        </policy>  
        <policy resource="http://localhost:28491/Claims.aspx" action="GET">  
        </policy>  
      </claimsAuthorizationManager>  
  
      ...  
  
    </identityConfiguration>  
  </system.identityModel>  
  ...  
  
</configuration><configuration>  
  <configSections>  
    <!--WIF 4.5 sections -->  
    <section name="system.identityModel" type="System.IdentityModel.Configuration.SystemIdentityModelSection, System.IdentityModel, Version=4.0.0.0, Culture=neutral, PublicKeyToken=B77A5C561934E089"/>  
    ...  
  
  </configSections>  
  
  ...  
  
  <system.web>  
    <httpModules>  
      <!--WIF 4.5 modules -->  
      <!--Not needed here for IIS >= 7 -->  
      <!--<add name="ClaimsAuthorizationModule" type="System.IdentityModel.Services.ClaimsAuthorizationModule, System.IdentityModel.Services, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"/>-->  
    </httpModules>  
  </system.web>  
  
  ...  
  
  <system.webServer>  
    <modules>  
      <!--WIF 4.5 modules -->  
      <add name="ClaimsAuthorizationModule" type="System.IdentityModel.Services.ClaimsAuthorizationModule, System.IdentityModel.Services, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"/>  
    </modules>  
  </system.webServer>  
  
  ...  
  
  <!-- WIF 4.5 s.im section-->  
  <system.identityModel>  
    <identityConfiguration>  
      <claimsAuthorizationManager type="MyClaimsAuthorizationManager.SimpleClaimsAuthoirzationManager, MyClaimsAuthorizationManager" />  
      ...  
  
  </system.identityModel>  
  ...  
  
</configuration>  
```  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ClaimsAuthorizationManager ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Claims.ClaimsAuthorizationManager.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ClaimsAuthorizationManager();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Security.Claims.ClaimsAuthorizationManager" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CheckAccess">
      <MemberSignature Language="C#" Value="public virtual bool CheckAccess (System.Security.Claims.AuthorizationContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool CheckAccess(class System.Security.Claims.AuthorizationContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Claims.ClaimsAuthorizationManager.CheckAccess(System.Security.Claims.AuthorizationContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CheckAccess (context As AuthorizationContext) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool CheckAccess(System::Security::Claims::AuthorizationContext ^ context);" />
      <MemberSignature Language="F#" Value="abstract member CheckAccess : System.Security.Claims.AuthorizationContext -&gt; bool&#xA;override this.CheckAccess : System.Security.Claims.AuthorizationContext -&gt; bool" Usage="claimsAuthorizationManager.CheckAccess context" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="System.Security.Claims.AuthorizationContext" />
      </Parameters>
      <Docs>
        <param name="context">El contexto de autorización que contiene el asunto, el recurso y la acción para los que debe comprobarse la autorización.</param>
        <summary>Cuando se implementa en una clase derivada, comprueba la autorización para el asunto en el contexto especificado para realizar la acción especificada en el recurso especificado.</summary>
        <returns>
          <see langword="true" /> si el sujeto tiene autorización para realizar la acción especificada en el recurso especificado; si no, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La implementación base siempre devuelve `true`, que autoriza el acceso. Puede invalidar este método en una clase derivada para autorizar el acceso según los requisitos de la aplicación de RP. Si este método devuelve `false`, Windows Identity Foundation (WIF) devuelve un error no autorizado al llamador; de lo contrario, la ejecución se pasa a la aplicación de RP.  
  
   
  
## Examples  
 Los ejemplos de código que se usan en el <xref:System.Security.Claims.ClaimsAuthorizationManager> temas se toman de la `Claims Based Authorization` ejemplo. Este ejemplo proporciona un administrador de autorización de notificaciones personalizadas que puede autorizar a los sujetos según una directiva que se especifica en configuración. El Administrador de autorización de notificaciones personalizadas consta de tres componentes básicos: una clase derivada de <xref:System.Security.Claims.ClaimsAuthorizationManager> que implementa el Administrador de la `ResourceAction` clase que empareja un recurso y una acción y un lector de directiva que lee y compila la directiva de especificada en el archivo de configuración. Esto compila la directiva puede, a continuación, usar el Administrador de autorización de notificaciones para evaluar una entidad de seguridad para autorizar el acceso a los recursos. No todos los elementos se muestran por brevedad. Para obtener información acerca de este ejemplo y otros ejemplos disponibles para WIF y dónde descargarlas, consulte [índice de ejemplo de código WIF](~/docs/framework/security/wif-code-sample-index.md).  
  
 El código siguiente muestra la invalidación de la <xref:System.Security.Claims.ClaimsAuthorizationManager.CheckAccess%2A> método. Este método concede o deniega el acceso basado en una directiva de lectura y se compiló desde el archivo de configuración.  
  
 [!code-csharp[WifClaimsBasedAuthorization#3](~/samples/snippets/csharp/VS_Snippets_Misc/wifclaimsbasedauthorization/cs/claimsauthorizationlibrary/myclaimsauthorizationmanager.cs#3)]  
[!code-csharp[WifClaimsBasedAuthorization#5](~/samples/snippets/csharp/VS_Snippets_Misc/wifclaimsbasedauthorization/cs/claimsauthorizationlibrary/myclaimsauthorizationmanager.cs#5)]  
  
 El siguiente código muestra la `ResourceAction` clase usada por el Administrador de notificaciones personalizadas.  
  
 [!code-csharp[WifClaimsBasedAuthorization#1](~/samples/snippets/csharp/VS_Snippets_Misc/wifclaimsbasedauthorization/cs/claimsauthorizationlibrary/resourceaction.cs#1)]  
  
 Se especifica la directiva utilizada por el Administrador de autorización de notificaciones personalizada `<policy>` elementos bajo la [ &lt;claimsAuthorizationManager&gt; ](~/docs/framework/configure-apps/file-schema/windows-identity-foundation/claimsauthorizationmanager.md) elemento. Esta directiva se lee y compila el <xref:System.Security.Claims.ClaimsAuthorizationManager.LoadCustomConfiguration%2A> método. En la primera directiva, la entidad de seguridad debe poseer una de las notificaciones especificadas con el fin de realizar la acción especificada en el recurso especificado. En la segunda directiva, la entidad de seguridad debe poseer ambas notificaciones para poder realizar la acción especificada en el recurso especificado. En todos los demás, la entidad de seguridad se concede automáticamente acceso independientemente de las notificaciones que posee.  
  
```  
<system.identityModel>  
  <identityConfiguration>  
    <claimsAuthorizationManager type="ClaimsAuthorizationLibrary.MyClaimsAuthorizationManager, ClaimsAuthorizationLibrary">  
      <policy resource="http://localhost:28491/Developers.aspx" action="GET">  
        <or>  
          <claim claimType="http://schemas.microsoft.com/ws/2008/06/identity/claims/role" claimValue="developer" />  
          <claim claimType="http://schemas.xmlsoap.org/claims/Group" claimValue="Administrator" />  
        </or>  
      </policy>  
      <policy resource="http://localhost:28491/Administrators.aspx" action="GET">  
        <and>  
          <claim claimType="http://schemas.xmlsoap.org/claims/Group" claimValue="Administrator" />  
          <claim claimType="http://schemas.xmlsoap.org/ws/2005/05/identity/claims/country" claimValue="USA" />  
        </and>  
      </policy>  
      <policy resource="http://localhost:28491/Default.aspx" action="GET">  
      </policy>  
      <policy resource="http://localhost:28491/" action="GET">  
      </policy>  
      <policy resource="http://localhost:28491/Claims.aspx" action="GET">  
      </policy>  
    </claimsAuthorizationManager>  
  
    ...  
  
  </identityConfiguration>  
</system.identityModel>  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LoadCustomConfiguration">
      <MemberSignature Language="C#" Value="public virtual void LoadCustomConfiguration (System.Xml.XmlNodeList nodelist);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void LoadCustomConfiguration(class System.Xml.XmlNodeList nodelist) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Claims.ClaimsAuthorizationManager.LoadCustomConfiguration(System.Xml.XmlNodeList)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub LoadCustomConfiguration (nodelist As XmlNodeList)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void LoadCustomConfiguration(System::Xml::XmlNodeList ^ nodelist);" />
      <MemberSignature Language="F#" Value="abstract member LoadCustomConfiguration : System.Xml.XmlNodeList -&gt; unit&#xA;override this.LoadCustomConfiguration : System.Xml.XmlNodeList -&gt; unit" Usage="claimsAuthorizationManager.LoadCustomConfiguration nodelist" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IdentityModel.Configuration.ICustomIdentityConfiguration.LoadCustomConfiguration(System.Xml.XmlNodeList)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="nodelist" Type="System.Xml.XmlNodeList" />
      </Parameters>
      <Docs>
        <param name="nodelist">Elementos de configuración personalizados. Todos los nodos de la lista son de tipo <see cref="T:System.Xml.XmlElement" />.</param>
        <summary>Cuando se reemplaza en una clase derivada, carga la configuración personalizada de XML.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Security.Claims.ClaimsAuthenticationManager.LoadCustomConfiguration%2A> se llama al método mediante la infraestructura de configuración. Cuando se llama a este método, el `nodelist` contendrá los elementos secundarios de nivel superior de la [ &lt;claimsAuthorizationManager&gt; ](~/docs/framework/configure-apps/file-schema/windows-identity-foundation/claimsauthorizationmanager.md) elemento desde el archivo de configuración. A su vez, cada uno de estos elementos podría contener atributos o elementos secundarios según el esquema de configuración que define para la clase derivada. Si no hay elementos secundarios aparecen bajo el `<claimsAuthorizationManager>` elemento en el archivo de configuración, no se llama a este método.  
  
 La implementación predeterminada inicia un <xref:System.NotImplementedException>. Invalide este método en una clase derivada para habilitar la inicialización de su administrador de autorización de notificaciones desde un archivo de configuración. Normalmente, los elementos de configuración se usan para expresar una directiva de autorización; Sin embargo, puede definir los elementos y usarlos en cualquier modo que tenga sentido según los requisitos de la aplicación.  
  
   
  
## Examples  
 Los ejemplos de código que se usan en el <xref:System.Security.Claims.ClaimsAuthorizationManager> temas se toman de la `Claims Based Authorization` ejemplo. Este ejemplo proporciona un administrador de autorización de notificaciones personalizadas que puede autorizar a los sujetos según una directiva que se especifica en configuración. El Administrador de autorización de notificaciones personalizadas consta de tres componentes básicos: una clase derivada de <xref:System.Security.Claims.ClaimsAuthorizationManager> que implementa el Administrador de la `ResourceAction` clase que empareja un recurso y una acción y un lector de directiva que lee y compila la directiva de especificada en el archivo de configuración. Esto compila la directiva puede, a continuación, usar el Administrador de autorización de notificaciones para evaluar una entidad de seguridad para autorizar el acceso a los recursos. No todos los elementos se muestran por brevedad. Para obtener información acerca de este ejemplo y otros ejemplos disponibles para WIF y dónde descargarlas, consulte [índice de ejemplo de código WIF](~/docs/framework/security/wif-code-sample-index.md).  
  
 El código siguiente muestra la invalidación de la <xref:System.Security.Claims.ClaimsAuthorizationManager.LoadCustomConfiguration%2A> método. Este método usa una clase de lector de directiva de aplicación auxiliar (no mostrada) para leer y compilar especificadas en el archivo de configuración de directivas de autorización. Las directivas se agregan a un diccionario y son accesibles por un `ResourceAction` objeto de clave que se crea a partir de la acción y recursos para los que están destinados.  
  
 [!code-csharp[WifClaimsBasedAuthorization#3](~/samples/snippets/csharp/VS_Snippets_Misc/wifclaimsbasedauthorization/cs/claimsauthorizationlibrary/myclaimsauthorizationmanager.cs#3)]  
[!code-csharp[WifClaimsBasedAuthorization#4](~/samples/snippets/csharp/VS_Snippets_Misc/wifclaimsbasedauthorization/cs/claimsauthorizationlibrary/myclaimsauthorizationmanager.cs#4)]  
  
 El siguiente código muestra la `ResourceAction` clase usada por el Administrador de notificaciones personalizadas.  
  
 [!code-csharp[WifClaimsBasedAuthorization#1](~/samples/snippets/csharp/VS_Snippets_Misc/wifclaimsbasedauthorization/cs/claimsauthorizationlibrary/resourceaction.cs#1)]  
  
 Se especifica la directiva utilizada por el Administrador de autorización de notificaciones personalizada `<policy>` elementos bajo la [ &lt;claimsAuthorizationManager&gt; ](~/docs/framework/configure-apps/file-schema/windows-identity-foundation/claimsauthorizationmanager.md) elemento. Esta directiva se lee y compila el <xref:System.Security.Claims.ClaimsAuthorizationManager.LoadCustomConfiguration%2A> método. En la primera directiva, la entidad de seguridad debe poseer una de las notificaciones especificadas con el fin de realizar la acción especificada en el recurso especificado. En la segunda directiva, la entidad de seguridad debe poseer ambas notificaciones para poder realizar la acción especificada en el recurso especificado. En todos los demás, la entidad de seguridad se concede automáticamente acceso independientemente de las notificaciones que posee.  
  
```  
<system.identityModel>  
  <identityConfiguration>  
    <claimsAuthorizationManager type="ClaimsAuthorizationLibrary.MyClaimsAuthorizationManager, ClaimsAuthorizationLibrary">  
      <policy resource="http://localhost:28491/Developers.aspx" action="GET">  
        <or>  
          <claim claimType="http://schemas.microsoft.com/ws/2008/06/identity/claims/role" claimValue="developer" />  
          <claim claimType="http://schemas.xmlsoap.org/claims/Group" claimValue="Administrator" />  
        </or>  
      </policy>  
      <policy resource="http://localhost:28491/Administrators.aspx" action="GET">  
        <and>  
          <claim claimType="http://schemas.xmlsoap.org/claims/Group" claimValue="Administrator" />  
          <claim claimType="http://schemas.xmlsoap.org/ws/2005/05/identity/claims/country" claimValue="USA" />  
        </and>  
      </policy>  
      <policy resource="http://localhost:28491/Default.aspx" action="GET">  
      </policy>  
      <policy resource="http://localhost:28491/" action="GET">  
      </policy>  
      <policy resource="http://localhost:28491/Claims.aspx" action="GET">  
      </policy>  
    </claimsAuthorizationManager>  
  
    ...  
  
  </identityConfiguration>  
</system.identityModel>  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>