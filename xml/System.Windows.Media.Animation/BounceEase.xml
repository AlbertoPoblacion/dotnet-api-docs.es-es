<Type Name="BounceEase" FullName="System.Windows.Media.Animation.BounceEase">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="240f81355d5998792b6bc5884f5b6ab55445e8bb" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="es-ES" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30657839" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class BounceEase : System.Windows.Media.Animation.EasingFunctionBase" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit BounceEase extends System.Windows.Media.Animation.EasingFunctionBase" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Media.Animation.BounceEase" />
  <TypeSignature Language="VB.NET" Value="Public Class BounceEase&#xA;Inherits EasingFunctionBase" />
  <TypeSignature Language="C++ CLI" Value="public ref class BounceEase : System::Windows::Media::Animation::EasingFunctionBase" />
  <AssemblyInfo>
    <AssemblyName>PresentationCore</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Windows.Media.Animation.EasingFunctionBase</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Representa una función de entradas y salidas lentas que crea un efecto de rebote animado.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 En el siguiente gráfico muestra <xref:System.Windows.Media.Animation.BounceEase> utilizando diferentes valores de <xref:System.Windows.Media.Animation.EasingFunctionBase.EasingMode%2A>, donde *f*(*t*) representa el progreso de la animación y *t* representa el tiempo.  
  
 ![Gráficos BounceEase EasingMode. ] (~/add/media/bounceease-graph.png "Gráficos BounceEase EasingMode.")  
  
 Puede especificar cuántos saltos se producen al utilizar el <xref:System.Windows.Media.Animation.BounceEase.Bounces%2A> propiedad y especificar cuánto rebota (cómo elásticos son los saltos) utilizando el <xref:System.Windows.Media.Animation.BounceEase.Bounciness%2A> propiedad. El <xref:System.Windows.Media.Animation.BounceEase.Bounciness%2A> propiedad especifica la escala de amplitud del siguiente rebote. Por ejemplo, un valor de rebote de 2 duplica la amplitud del rebote siguiente durante una facilidad de y parte en dos la amplitud del rebote siguiente durante una desaceleración.  
  
 Hay muchas otras funciones de aceleración además <xref:System.Windows.Media.Animation.BounceEase> que puede explorar usando el siguiente ejemplo de Silverlight.  
  
 [Ejecutar este ejemplo](http://go.microsoft.com/fwlink/?LinkId=139798&sref=easing_functions_gallery)  
  
 Además de utilizar las funciones de aceleración incluidas en el tiempo de ejecución, puede crear sus propias funciones de aceleración personalizadas mediante la adquisición de <xref:System.Windows.Media.Animation.EasingFunctionBase>.  
  
<a name="xamlObjectElementUsage_BounceEase"></a>   
## <a name="xaml-object-element-usage"></a>Uso de elementos de objeto XAML  
  
```  
<BounceEase .../>  
```  
  
   
  
## Examples  
 El ejemplo siguiente aplica un <xref:System.Windows.Media.Animation.BounceEase> función de aceleración una <xref:System.Windows.Media.Animation.DoubleAnimation> para crear un efecto de rebote.  
  
 [!code-xaml[BounceEase_Snippet#BounceEase](~/samples/snippets/csharp/VS_Snippets_Wpf/bounceease_snippet/CS/window1.xaml#bounceease)]   
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.Media.Animation.PowerEase" />
    <altmember cref="T:System.Windows.Media.Animation.BackEase" />
    <altmember cref="T:System.Windows.Media.Animation.CircleEase" />
    <altmember cref="T:System.Windows.Media.Animation.CubicEase" />
    <altmember cref="T:System.Windows.Media.Animation.ElasticEase" />
    <altmember cref="T:System.Windows.Media.Animation.ExponentialEase" />
    <altmember cref="T:System.Windows.Media.Animation.QuadraticEase" />
    <altmember cref="T:System.Windows.Media.Animation.QuarticEase" />
    <altmember cref="T:System.Windows.Media.Animation.QuinticEase" />
    <altmember cref="T:System.Windows.Media.Animation.SineEase" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public BounceEase ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.Animation.BounceEase.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; BounceEase();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Windows.Media.Animation.BounceEase" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Bounces">
      <MemberSignature Language="C#" Value="public int Bounces { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Bounces" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Media.Animation.BounceEase.Bounces" />
      <MemberSignature Language="VB.NET" Value="Public Property Bounces As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Bounces { int get(); void set(int value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene o establece el número de rebotes.</summary>
        <value>Número de rebotes. El valor debe ser mayor o igual que cero. Los valores negativos se resuelven como cero. El valor predeterminado es 3.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Esta propiedad no incluye el medio rebote final.  
  
 [!INCLUDE[DP_ID_field_label](~/includes/dp-id-field-label-md.md)] <xref:System.Windows.Media.Animation.BounceEase.BouncesProperty>  
  
<a name="xamlAttributeUsage_Bounces"></a>   
## <a name="xaml-attribute-usage"></a>Uso de atributos XAML  
  
```  
<object Bounces="int" .../>  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BouncesProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty BouncesProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty BouncesProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Media.Animation.BounceEase.BouncesProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly BouncesProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ BouncesProperty;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica la propiedad de dependencia <see cref="P:System.Windows.Media.Animation.BounceEase.Bounces" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Bounciness">
      <MemberSignature Language="C#" Value="public double Bounciness { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float64 Bounciness" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Media.Animation.BounceEase.Bounciness" />
      <MemberSignature Language="VB.NET" Value="Public Property Bounciness As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property double Bounciness { double get(); void set(double value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene o establece un valor que especifica la elasticidad de los rebotes de la animación. Si se especifican valores bajos para esta propiedad, los rebotes perderán poca altura conforme se vayan sucediendo, mientras que con valores más altos los rebotes se irán amortiguando.</summary>
        <value>Valor que especifica la elasticidad de los rebotes de la animación. Este valor debe ser positivo. El valor predeterminado es <c>2</c>.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 [!INCLUDE[DP_ID_field_label](~/includes/dp-id-field-label-md.md)] <xref:System.Windows.Media.Animation.BounceEase.BouncinessProperty>  
  
<a name="xamlAttributeUsage_Bounciness"></a>   
## <a name="xaml-attribute-usage"></a>Uso de atributos XAML  
  
```  
<object Bounciness="double" .../>  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BouncinessProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty BouncinessProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty BouncinessProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Media.Animation.BounceEase.BouncinessProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly BouncinessProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ BouncinessProperty;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica la propiedad de dependencia <see cref="P:System.Windows.Media.Animation.BounceEase.Bounciness" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateInstanceCore">
      <MemberSignature Language="C#" Value="protected override System.Windows.Freezable CreateInstanceCore ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Windows.Freezable CreateInstanceCore() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.Animation.BounceEase.CreateInstanceCore" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function CreateInstanceCore () As Freezable" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override System::Windows::Freezable ^ CreateInstanceCore();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Freezable</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Crea una nueva instancia de la clase derivada de <see cref="T:System.Windows.Freezable" />. Al crear una clase derivada, debe reemplazar este método.</summary>
        <returns>La nueva instancia.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Clases de animación heredan indirectamente de <xref:System.Windows.Freezable>. Por este motivo, debe invalidar el <xref:System.Windows.Media.Animation.BackEase.CreateInstanceCore%2A> método para construir un objeto de animación personalizado.  
  
   
  
## Examples  
 En el ejemplo siguiente se muestra una implementación típica de <xref:System.Windows.Freezable.CreateInstanceCore%2A>.  
  
 [!code-csharp[freezablesample_procedural#CreateInstanceCoreExample](~/samples/snippets/csharp/VS_Snippets_Wpf/freezablesample_procedural/CSharp/freezablesample.cs#createinstancecoreexample)]
 [!code-vb[freezablesample_procedural#CreateInstanceCoreExample](~/samples/snippets/visualbasic/VS_Snippets_Wpf/freezablesample_procedural/visualbasic/freezablesample.vb#createinstancecoreexample)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EaseInCore">
      <MemberSignature Language="C#" Value="protected override double EaseInCore (double normalizedTime);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance float64 EaseInCore(float64 normalizedTime) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.Animation.BounceEase.EaseInCore(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function EaseInCore (normalizedTime As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override double EaseInCore(double normalizedTime);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="normalizedTime" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="normalizedTime">Tiempo normalizado (progreso) de la animación.</param>
        <summary>Proporciona la parte lógica de la función de aceleración que se puede reemplazar para generar el modo <see cref="F:System.Windows.Media.Animation.EasingMode.EaseIn" /> de la función de aceleración personalizada.</summary>
        <returns>Valor Double que representa el progreso transformado.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este método transforma el tiempo normalizado para controlar el ritmo de una animación para la <xref:System.Windows.Media.Animation.EasingMode.EaseIn> casos de <xref:System.Windows.Media.Animation.EasingFunctionBase.EasingMode%2A>.  
  
 Solo tiene que especificar la función de aceleración para el <xref:System.Windows.Media.Animation.EasingMode.EaseIn> caso porque la implementación de la <xref:System.Windows.Media.Animation.EasingFunctionBase.Ease%2A> método transformaciones `normalizedTime` para el <xref:System.Windows.Media.Animation.EasingMode.EaseOut> y <xref:System.Windows.Media.Animation.EasingMode.EaseInOut> casos.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>