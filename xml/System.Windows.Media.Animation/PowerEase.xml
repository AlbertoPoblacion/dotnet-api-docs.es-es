<Type Name="PowerEase" FullName="System.Windows.Media.Animation.PowerEase">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="cfd382ef6d017f731c1cc28117a866a48329e136" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="es-ES" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30658379" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class PowerEase : System.Windows.Media.Animation.EasingFunctionBase" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit PowerEase extends System.Windows.Media.Animation.EasingFunctionBase" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Media.Animation.PowerEase" />
  <TypeSignature Language="VB.NET" Value="Public Class PowerEase&#xA;Inherits EasingFunctionBase" />
  <TypeSignature Language="C++ CLI" Value="public ref class PowerEase : System::Windows::Media::Animation::EasingFunctionBase" />
  <AssemblyInfo>
    <AssemblyName>PresentationCore</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Windows.Media.Animation.EasingFunctionBase</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Representa una función de entradas y salidas lentas que crea una animación que aumenta o disminuye la velocidad usando la fórmula *f*(*t*) = *t*<sup>p</sup>, donde p es igual al valor de la propiedad <see cref="P:System.Windows.Media.Animation.PowerEase.Power" />.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Puede controlar si la animación se acelera, reduce la velocidad, o ambos mediante la especificación de la <xref:System.Windows.Media.Animation.EasingFunctionBase.EasingMode%2A>. En el siguiente gráfico muestra los distintos valores de <xref:System.Windows.Media.Animation.EasingFunctionBase.EasingMode%2A>, donde *f*(*t*) representa el progreso de la animación y *t* representa el tiempo.  
  
 ![Gráficos CubicEase EasingMode. ] (~/add/media/cubicease-graph.png "CubicEase EasingMode gráficos.")  
  
 Mediante el uso de la <xref:System.Windows.Media.Animation.PowerEase> función, puede especificar qué rapidez aceleración/desaceleración tiene lugar mediante la especificación de la <xref:System.Windows.Media.Animation.PowerEase.Power%2A> propiedad:  
  
 *f*(*t*) = *t*<sup>p</sup> donde `p` es igual que el <xref:System.Windows.Media.Animation.PowerEase.Power%2A> propiedad.  
  
 Por este motivo, el <xref:System.Windows.Media.Animation.PowerEase> función se puede sustituir por <xref:System.Windows.Media.Animation.QuadraticEase> (*f*(*t*) = *t*<sup>2</sup>), <xref:System.Windows.Media.Animation.CubicEase>(*f*(*t*) = *t*<sup>3</sup>), <xref:System.Windows.Media.Animation.QuarticEase> (*f*(*t *) = *t*<sup>4</sup>), y <xref:System.Windows.Media.Animation.QuinticEase> (*f*(*t*) = *t* <sup>5</sup>). Por ejemplo, si desea utilizar un <xref:System.Windows.Media.Animation.PowerEase> función para crear el mismo comportamiento que un <xref:System.Windows.Media.Animation.QuadraticEase> función (*f*(*t*) = *t*<sup>2</sup>), debe especificar un <xref:System.Windows.Media.Animation.PowerEase.Power%2A> valor de propiedad de 2.  
  
 Hay muchas otras funciones de aceleración además <xref:System.Windows.Media.Animation.PowerEase> que puede explorar usando el siguiente ejemplo de Silverlight.  
  
 [Ejecutar este ejemplo](http://go.microsoft.com/fwlink/?LinkId=139798&sref=easing_functions_gallery)  
  
 Además de utilizar las funciones de aceleración incluidas en el tiempo de ejecución, puede crear sus propias funciones de aceleración personalizadas mediante la adquisición de <xref:System.Windows.Media.Animation.EasingFunctionBase>.  
  
<a name="xamlObjectElementUsage_PowerEase"></a>   
## <a name="xaml-object-element-usage"></a>Uso de elementos de objeto XAML  
  
```  
<PowerEase .../>  
```  
  
   
  
## Examples  
 El ejemplo siguiente aplica un <xref:System.Windows.Media.Animation.PowerEase> cómo facilitar la función con un <xref:System.Windows.Media.Animation.PowerEase.Power%2A> valor de propiedad de `20` a una <xref:System.Windows.Media.Animation.DoubleAnimation> para crear una animación disminuye la velocidad. Dado que la <xref:System.Windows.Media.Animation.PowerEase.Power%2A> valor es tan alto, la desaceleración es repentina en comparación con si se utiliza un valor inferior.  
  
 [!code-xaml[PowerEase#PowerEase](~/samples/snippets/csharp/VS_Snippets_Wpf/powerease/CS/window1.xaml#powerease)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.Media.Animation.BackEase" />
    <altmember cref="T:System.Windows.Media.Animation.BounceEase" />
    <altmember cref="T:System.Windows.Media.Animation.CircleEase" />
    <altmember cref="T:System.Windows.Media.Animation.CubicEase" />
    <altmember cref="T:System.Windows.Media.Animation.ElasticEase" />
    <altmember cref="T:System.Windows.Media.Animation.ExponentialEase" />
    <altmember cref="T:System.Windows.Media.Animation.QuadraticEase" />
    <altmember cref="T:System.Windows.Media.Animation.QuarticEase" />
    <altmember cref="T:System.Windows.Media.Animation.QuinticEase" />
    <altmember cref="T:System.Windows.Media.Animation.SineEase" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public PowerEase ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.Animation.PowerEase.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; PowerEase();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Windows.Media.Animation.PowerEase" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateInstanceCore">
      <MemberSignature Language="C#" Value="protected override System.Windows.Freezable CreateInstanceCore ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Windows.Freezable CreateInstanceCore() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.Animation.PowerEase.CreateInstanceCore" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function CreateInstanceCore () As Freezable" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override System::Windows::Freezable ^ CreateInstanceCore();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Freezable</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Crea una nueva instancia de la clase derivada de <see cref="T:System.Windows.Freezable" />. Al crear una clase derivada, debe reemplazar este método.</summary>
        <returns>La nueva instancia.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Clases de animación heredan indirectamente de <xref:System.Windows.Freezable>. Por este motivo, debe invalidar el <xref:System.Windows.Media.Animation.BackEase.CreateInstanceCore%2A> método para construir un objeto de animación personalizado.  
  
   
  
## Examples  
 En el ejemplo siguiente se muestra una implementación típica de <xref:System.Windows.Freezable.CreateInstanceCore%2A>.  
  
 [!code-csharp[freezablesample_procedural#CreateInstanceCoreExample](~/samples/snippets/csharp/VS_Snippets_Wpf/freezablesample_procedural/CSharp/freezablesample.cs#createinstancecoreexample)]
 [!code-vb[freezablesample_procedural#CreateInstanceCoreExample](~/samples/snippets/visualbasic/VS_Snippets_Wpf/freezablesample_procedural/visualbasic/freezablesample.vb#createinstancecoreexample)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EaseInCore">
      <MemberSignature Language="C#" Value="protected override double EaseInCore (double normalizedTime);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance float64 EaseInCore(float64 normalizedTime) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.Animation.PowerEase.EaseInCore(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function EaseInCore (normalizedTime As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override double EaseInCore(double normalizedTime);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="normalizedTime" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="normalizedTime">Tiempo normalizado (progreso) de la animación.</param>
        <summary>Proporciona la parte lógica de la función de aceleración que se puede reemplazar para generar el modo <see cref="F:System.Windows.Media.Animation.EasingMode.EaseIn" /> de la función de aceleración personalizada.</summary>
        <returns>Valor Double que representa el progreso transformado.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este método transforma el tiempo normalizado para controlar el ritmo de una animación para la <xref:System.Windows.Media.Animation.EasingMode.EaseIn> casos de <xref:System.Windows.Media.Animation.EasingFunctionBase.EasingMode%2A>.  
  
 Solo tiene que especificar la función de aceleración para el <xref:System.Windows.Media.Animation.EasingMode.EaseIn> caso porque la implementación de la <xref:System.Windows.Media.Animation.EasingFunctionBase.Ease%2A> método transformaciones `normalizedTime` para el <xref:System.Windows.Media.Animation.EasingMode.EaseOut> y <xref:System.Windows.Media.Animation.EasingMode.EaseInOut> casos.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Power">
      <MemberSignature Language="C#" Value="public double Power { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float64 Power" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Media.Animation.PowerEase.Power" />
      <MemberSignature Language="VB.NET" Value="Public Property Power As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property double Power { double get(); void set(double value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene o establece la potencia exponencial de la interpolación de animación. Por ejemplo, el valor 7 creará una curva de interpolación de animaciones que sigue la fórmula *f*(*t*) = *t*<sup>7</sup>.</summary>
        <value>Potencia exponencial de la interpolación de animación. Este valor debe ser mayor o igual que 0. El valor predeterminado es 2.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 [!INCLUDE[DP_ID_field_label](~/includes/dp-id-field-label-md.md)] <xref:System.Windows.Media.Animation.PowerEase.PowerProperty>  
  
<a name="xamlAttributeUsage_Power"></a>   
## <a name="xaml-attribute-usage"></a>Uso de atributos XAML  
  
```  
<object Power="double" .../>  
```  
  
   
  
## Examples  
 El ejemplo siguiente aplica un <xref:System.Windows.Media.Animation.PowerEase> cómo facilitar la función con un <xref:System.Windows.Media.Animation.PowerEase.Power%2A> valor de propiedad de `20` a una <xref:System.Windows.Media.Animation.DoubleAnimation> para crear una animación disminuye la velocidad. Dado que la <xref:System.Windows.Media.Animation.PowerEase.Power%2A> valor es tan alto, la desaceleración es repentina en comparación con si se utiliza un valor inferior.  
  
 [!code-xaml[PowerEase#PowerEase](~/samples/snippets/csharp/VS_Snippets_Wpf/powerease/CS/window1.xaml#powerease)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PowerProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty PowerProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty PowerProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Media.Animation.PowerEase.PowerProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PowerProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ PowerProperty;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica la propiedad de dependencia <see cref="P:System.Windows.Media.Animation.PowerEase.Power" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>