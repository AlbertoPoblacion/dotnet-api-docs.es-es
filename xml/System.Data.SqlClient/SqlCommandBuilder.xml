<Type Name="SqlCommandBuilder" FullName="System.Data.SqlClient.SqlCommandBuilder">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="f98e8b8a8201db8545a634c3df54306e188ae9f9" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="es-ES" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36680177" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class SqlCommandBuilder : System.Data.Common.DbCommandBuilder" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit SqlCommandBuilder extends System.Data.Common.DbCommandBuilder" />
  <TypeSignature Language="DocId" Value="T:System.Data.SqlClient.SqlCommandBuilder" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class SqlCommandBuilder&#xA;Inherits DbCommandBuilder" />
  <TypeSignature Language="C++ CLI" Value="public ref class SqlCommandBuilder sealed : System::Data::Common::DbCommandBuilder" />
  <TypeSignature Language="F#" Value="type SqlCommandBuilder = class&#xA;    inherit DbCommandBuilder" />
  <AssemblyInfo>
    <AssemblyName>System.Data</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Data.Common.DbCommandBuilder</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Genera automáticamente comandos de tabla única que se utilizan para conciliar los cambios realizados en un objeto <see cref="T:System.Data.DataSet" /> con la base de datos de SQL Server asociada. Esta clase no puede heredarse.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Data.SqlClient.SqlDataAdapter> no genera automáticamente las instrucciones de Transact-SQL requeridas para reconciliar los cambios realizados en un <xref:System.Data.DataSet> con la instancia asociada de SQL Server. Sin embargo, puede crear un <xref:System.Data.SqlClient.SqlCommandBuilder> objeto que se va a generar automáticamente las instrucciones de Transact-SQL para las actualizaciones de tabla única si se establece la <xref:System.Data.SqlClient.SqlDataAdapter.SelectCommand%2A> propiedad de la <xref:System.Data.SqlClient.SqlDataAdapter>. A continuación, se generan las instrucciones de Transact-SQL adicionales que no se establecen mediante el <xref:System.Data.SqlClient.SqlCommandBuilder>.  
  
 El <xref:System.Data.SqlClient.SqlCommandBuilder> registra a sí mismo como un agente de escucha para <xref:System.Data.SqlClient.SqlDataAdapter.RowUpdating> eventos siempre que se establezca la <xref:System.Data.SqlClient.SqlCommandBuilder.DataAdapter%2A> propiedad. Sólo se puede asociar uno <xref:System.Data.SqlClient.SqlDataAdapter> o <xref:System.Data.SqlClient.SqlCommandBuilder> objetos entre sí al mismo tiempo.  
  
 Para generar instrucciones INSERT, UPDATE o DELETE, el <xref:System.Data.SqlClient.SqlCommandBuilder> usa el <xref:System.Data.SqlClient.SqlDataAdapter.SelectCommand%2A> propiedad que se va a recuperar automáticamente un conjunto de metadatos requerido. Si cambia la <xref:System.Data.SqlClient.SqlDataAdapter.SelectCommand%2A> después de recuperar los metadatos, como tras la primera actualización, se debe llamar el <xref:System.Data.Common.DbCommandBuilder.RefreshSchema%2A> método para actualizar los metadatos.  
  
 `SelectCommand` también debe devolver como mínimo una clave principal o una columna única. Si ninguno está presente, una **Objectnotfound** se genera la excepción y no se generan los comandos.  
  
 El <xref:System.Data.SqlClient.SqlCommandBuilder> también usa el <xref:System.Data.SqlClient.SqlCommand.Connection%2A>, <xref:System.Data.SqlClient.SqlCommand.CommandTimeout%2A>, y <xref:System.Data.SqlClient.SqlCommand.Transaction%2A> propiedades al que hace referencia el <xref:System.Data.SqlClient.SqlDataAdapter.SelectCommand%2A>. El usuario debe llamar a <xref:System.Data.Common.DbCommandBuilder.RefreshSchema%2A> si se modifican una o varias de estas propiedades, o si el <xref:System.Data.SqlClient.SqlDataAdapter.SelectCommand%2A> propio se reemplaza. En caso contrario, el <xref:System.Data.SqlClient.SqlDataAdapter.InsertCommand%2A>, <xref:System.Data.SqlClient.SqlDataAdapter.UpdateCommand%2A>, y <xref:System.Data.SqlClient.SqlDataAdapter.DeleteCommand%2A> propiedades conservan sus valores anteriores.  
  
 Si se llama a <xref:System.ComponentModel.Component.Dispose%2A>, <xref:System.Data.SqlClient.SqlCommandBuilder> se desasocie de la <xref:System.Data.SqlClient.SqlDataAdapter>, y los comandos generados dejan de usarse.  
  
   
  
## Examples  
 En el ejemplo siguiente se usa el <xref:System.Data.SqlClient.SqlCommand>, junto <xref:System.Data.SqlClient.SqlDataAdapter> y <xref:System.Data.SqlClient.SqlConnection>, para seleccionar filas de un origen de datos. En el ejemplo se pasa una cadena de conexión, una cadena de consulta que es una instrucción SELECT de Transact-SQL y una cadena que es el nombre de la tabla de base de datos. El ejemplo crea un <xref:System.Data.SqlClient.SqlCommandBuilder>.  
  
 [!code-csharp[Classic WebData SqlCommandBuilder#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData SqlCommandBuilder/CS/Source.cs#1)]
 [!code-vb[Classic WebData SqlCommandBuilder#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData SqlCommandBuilder/VB/Source.vb#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Data.SqlClient.SqlCommandBuilder" />.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SqlCommandBuilder ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlCommandBuilder.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; SqlCommandBuilder();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Data.SqlClient.SqlCommandBuilder" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SqlCommandBuilder (System.Data.SqlClient.SqlDataAdapter adapter);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Data.SqlClient.SqlDataAdapter adapter) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlCommandBuilder.#ctor(System.Data.SqlClient.SqlDataAdapter)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (adapter As SqlDataAdapter)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; SqlCommandBuilder(System::Data::SqlClient::SqlDataAdapter ^ adapter);" />
      <MemberSignature Language="F#" Value="new System.Data.SqlClient.SqlCommandBuilder : System.Data.SqlClient.SqlDataAdapter -&gt; System.Data.SqlClient.SqlCommandBuilder" Usage="new System.Data.SqlClient.SqlCommandBuilder adapter" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="adapter" Type="System.Data.SqlClient.SqlDataAdapter" />
      </Parameters>
      <Docs>
        <param name="adapter">Nombre del objeto <see cref="T:System.Data.SqlClient.SqlDataAdapter" />.</param>
        <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Data.SqlClient.SqlCommandBuilder" /> con el objeto <see cref="T:System.Data.SqlClient.SqlDataAdapter" /> asociado.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Data.SqlClient.SqlCommandBuilder> registra a sí mismo como un agente de escucha para <xref:System.Data.SqlClient.SqlDataAdapter.RowUpdating> eventos generados por el <xref:System.Data.SqlClient.SqlDataAdapter> especificado en esta propiedad.  
  
 Cuando se crea una nueva instancia de <xref:System.Data.SqlClient.SqlCommandBuilder>, cualquier existente <xref:System.Data.SqlClient.SqlCommandBuilder> asociada a esta <xref:System.Data.SqlClient.SqlDataAdapter> se libera.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ApplyParameterInfo">
      <MemberSignature Language="C#" Value="protected override void ApplyParameterInfo (System.Data.Common.DbParameter parameter, System.Data.DataRow datarow, System.Data.StatementType statementType, bool whereClause);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void ApplyParameterInfo(class System.Data.Common.DbParameter parameter, class System.Data.DataRow datarow, valuetype System.Data.StatementType statementType, bool whereClause) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlCommandBuilder.ApplyParameterInfo(System.Data.Common.DbParameter,System.Data.DataRow,System.Data.StatementType,System.Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void ApplyParameterInfo(System::Data::Common::DbParameter ^ parameter, System::Data::DataRow ^ datarow, System::Data::StatementType statementType, bool whereClause);" />
      <MemberSignature Language="F#" Value="override this.ApplyParameterInfo : System.Data.Common.DbParameter * System.Data.DataRow * System.Data.StatementType * bool -&gt; unit" Usage="sqlCommandBuilder.ApplyParameterInfo (parameter, datarow, statementType, whereClause)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="parameter" Type="System.Data.Common.DbParameter" />
        <Parameter Name="datarow" Type="System.Data.DataRow" />
        <Parameter Name="statementType" Type="System.Data.StatementType" />
        <Parameter Name="whereClause" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="parameter">To be added.</param>
        <param name="datarow">To be added.</param>
        <param name="statementType">To be added.</param>
        <param name="whereClause">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CatalogLocation">
      <MemberSignature Language="C#" Value="public override System.Data.Common.CatalogLocation CatalogLocation { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Data.Common.CatalogLocation CatalogLocation" />
      <MemberSignature Language="DocId" Value="P:System.Data.SqlClient.SqlCommandBuilder.CatalogLocation" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Property CatalogLocation As CatalogLocation" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Data::Common::CatalogLocation CatalogLocation { System::Data::Common::CatalogLocation get(); void set(System::Data::Common::CatalogLocation value); };" />
      <MemberSignature Language="F#" Value="member this.CatalogLocation : System.Data.Common.CatalogLocation with get, set" Usage="System.Data.SqlClient.SqlCommandBuilder.CatalogLocation" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Data.Common.CatalogLocation</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Establece u obtiene el objeto <see cref="T:System.Data.Common.CatalogLocation" /> para una instancia de la clase <see cref="T:System.Data.SqlClient.SqlCommandBuilder" />.</summary>
        <value>Un objeto <see cref="T:System.Data.Common.CatalogLocation" />.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CatalogSeparator">
      <MemberSignature Language="C#" Value="public override string CatalogSeparator { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string CatalogSeparator" />
      <MemberSignature Language="DocId" Value="P:System.Data.SqlClient.SqlCommandBuilder.CatalogSeparator" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Property CatalogSeparator As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ CatalogSeparator { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.CatalogSeparator : string with get, set" Usage="System.Data.SqlClient.SqlCommandBuilder.CatalogSeparator" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Establece u obtiene una cadena que se utiliza como separador de catálogo para una instancia de la clase <see cref="T:System.Data.SqlClient.SqlCommandBuilder" />.</summary>
        <value>Cadena que determina el separador del catálogo que se va a utilizar con una instancia de la clase <see cref="T:System.Data.SqlClient.SqlCommandBuilder" />.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DataAdapter">
      <MemberSignature Language="C#" Value="public System.Data.SqlClient.SqlDataAdapter DataAdapter { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Data.SqlClient.SqlDataAdapter DataAdapter" />
      <MemberSignature Language="DocId" Value="P:System.Data.SqlClient.SqlCommandBuilder.DataAdapter" />
      <MemberSignature Language="VB.NET" Value="Public Property DataAdapter As SqlDataAdapter" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Data::SqlClient::SqlDataAdapter ^ DataAdapter { System::Data::SqlClient::SqlDataAdapter ^ get(); void set(System::Data::SqlClient::SqlDataAdapter ^ value); };" />
      <MemberSignature Language="F#" Value="member this.DataAdapter : System.Data.SqlClient.SqlDataAdapter with get, set" Usage="System.Data.SqlClient.SqlCommandBuilder.DataAdapter" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Data.SqlClient.SqlDataAdapter</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene o establece un objeto <see cref="T:System.Data.SqlClient.SqlDataAdapter" /> para el que se generan automáticamente instrucciones de Transact-SQL.</summary>
        <value>Un objeto <see cref="T:System.Data.SqlClient.SqlDataAdapter" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Data.SqlClient.SqlCommandBuilder> registra a sí mismo como un agente de escucha para <xref:System.Data.SqlClient.SqlDataAdapter.RowUpdating> eventos generados por el <xref:System.Data.SqlClient.SqlDataAdapter> especificado en esta propiedad.  
  
 Cuando se crea una nueva instancia de <xref:System.Data.SqlClient.SqlCommandBuilder>, cualquier existente <xref:System.Data.SqlClient.SqlCommandBuilder> asociada a esta <xref:System.Data.SqlClient.SqlDataAdapter> se libera.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DeriveParameters">
      <MemberSignature Language="C#" Value="public static void DeriveParameters (System.Data.SqlClient.SqlCommand command);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void DeriveParameters(class System.Data.SqlClient.SqlCommand command) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlCommandBuilder.DeriveParameters(System.Data.SqlClient.SqlCommand)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub DeriveParameters (command As SqlCommand)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void DeriveParameters(System::Data::SqlClient::SqlCommand ^ command);" />
      <MemberSignature Language="F#" Value="static member DeriveParameters : System.Data.SqlClient.SqlCommand -&gt; unit" Usage="System.Data.SqlClient.SqlCommandBuilder.DeriveParameters command" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="command" Type="System.Data.SqlClient.SqlCommand" />
      </Parameters>
      <Docs>
        <param name="command">
          <see cref="T:System.Data.SqlClient.SqlCommand" /> que hace referencia al procedimiento almacenado del que se va a derivar la información de parámetros. Los parámetros derivados se agregan a la colección de <see cref="P:System.Data.SqlClient.SqlCommand.Parameters" /> del objeto <see cref="T:System.Data.SqlClient.SqlCommand" />.</param>
        <summary>Recupera información de parámetro del procedimiento almacenado especificado en <see cref="T:System.Data.SqlClient.SqlCommand" /> y rellena la colección de <see cref="P:System.Data.SqlClient.SqlCommand.Parameters" /> del objeto <see cref="T:System.Data.SqlClient.SqlCommand" /> especificado.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `DeriveParameters` sobrescribe cualquier información de parámetros existente para la `SqlDbCommand`.  
  
 `DeriveParameters` requiere una llamada adicional a la base de datos para obtener la información. Si la información de parámetros se conoce de antemano, resulta más eficaz para rellenar la colección de parámetros estableciendo la información de manera explícita.  
  
 Sólo se puede utilizar `DeriveParameters` con los procedimientos almacenados. No se puede utilizar `DeriveParameters` con procedimientos almacenados extendidos. No se puede utilizar `DeriveParameters` para rellenar la <xref:System.Data.SqlClient.SqlParameterCollection> con instrucciones de Transact-SQL arbitrarias, como una instrucción SELECT parametrizada.  
  
 Para obtener más información, consulte [configurar parámetros y tipos de datos de parámetro](~/docs/framework/data/adonet/configuring-parameters-and-parameter-data-types.md).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">El texto del comando no es un nombre de procedimiento almacenado válido.</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetDeleteCommand">
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Obtiene el objeto <see cref="T:System.Data.SqlClient.SqlCommand" /> generado automáticamente que es necesario para realizar eliminaciones en la base de datos.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Una aplicación puede utilizar el <xref:System.Data.SqlClient.SqlCommandBuilder.GetDeleteCommand%2A> método de información o solucionar problemas porque devuelve la <xref:System.Data.SqlClient.SqlCommand> objeto va a ejecutar.  
  
 También puede usar <xref:System.Data.SqlClient.SqlCommandBuilder.GetDeleteCommand%2A> como base de un comando modificado. Por ejemplo, puede llamar a <xref:System.Data.SqlClient.SqlCommandBuilder.GetDeleteCommand%2A> y modificar el <xref:System.Data.SqlClient.SqlCommand.CommandTimeout%2A> valor y, a continuación, establezca la explícitamente en el <xref:System.Data.SqlClient.SqlDataAdapter>.  
  
 Después de la instrucción SQL se genera por primera vez, la aplicación debe llamar explícitamente a <xref:System.Data.Common.DbCommandBuilder.RefreshSchema%2A> si se cambia la instrucción en modo alguno. En caso contrario, el <xref:System.Data.SqlClient.SqlCommandBuilder.GetDeleteCommand%2A> seguirá utilizando la información de la instrucción anterior, que puede no ser correcta. Las instrucciones SQL se generan por primera vez cuando la aplicación llama una <xref:System.Data.Common.DbDataAdapter.Update%2A> o <xref:System.Data.SqlClient.SqlCommandBuilder.GetDeleteCommand%2A>.  
  
 Para obtener más información, consulte [generar comandos con objetos CommandBuilder](~/docs/framework/data/adonet/generating-commands-with-commandbuilders.md).  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetDeleteCommand">
      <MemberSignature Language="C#" Value="public System.Data.SqlClient.SqlCommand GetDeleteCommand ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Data.SqlClient.SqlCommand GetDeleteCommand() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlCommandBuilder.GetDeleteCommand" />
      <MemberSignature Language="VB.NET" Value="Public Function GetDeleteCommand () As SqlCommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Data::SqlClient::SqlCommand ^ GetDeleteCommand();" />
      <MemberSignature Language="F#" Value="override this.GetDeleteCommand : unit -&gt; System.Data.SqlClient.SqlCommand" Usage="sqlCommandBuilder.GetDeleteCommand " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.SqlClient.SqlCommand</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Obtiene el objeto <see cref="T:System.Data.SqlClient.SqlCommand" /> generado automáticamente que es necesario para realizar eliminaciones en la base de datos.</summary>
        <returns>Objeto <see cref="T:System.Data.SqlClient.SqlCommand" /> generado automáticamente que es necesario para realizar eliminaciones.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Una aplicación puede utilizar el <xref:System.Data.SqlClient.SqlCommandBuilder.GetDeleteCommand%2A> método de información o solucionar problemas porque devuelve la <xref:System.Data.SqlClient.SqlCommand> objeto va a ejecutar.  
  
 También puede usar <xref:System.Data.SqlClient.SqlCommandBuilder.GetDeleteCommand%2A> como base de un comando modificado. Por ejemplo, puede llamar a <xref:System.Data.SqlClient.SqlCommandBuilder.GetDeleteCommand%2A> y modificar el <xref:System.Data.SqlClient.SqlCommand.CommandTimeout%2A> valor y, a continuación, establezca la explícitamente en el <xref:System.Data.SqlClient.SqlDataAdapter>.  
  
 Después de la instrucción SQL se genera por primera vez, la aplicación debe llamar explícitamente a <xref:System.Data.Common.DbCommandBuilder.RefreshSchema%2A> si se cambia la instrucción en modo alguno. En caso contrario, el <xref:System.Data.SqlClient.SqlCommandBuilder.GetDeleteCommand%2A> seguirá utilizando la información de la instrucción anterior, que puede no ser correcta. Las instrucciones SQL se generan por primera vez cuando la aplicación llama una <xref:System.Data.Common.DbDataAdapter.Update%2A> o <xref:System.Data.SqlClient.SqlCommandBuilder.GetDeleteCommand%2A>.  
  
 Para obtener más información, consulte [generar comandos con objetos CommandBuilder](~/docs/framework/data/adonet/generating-commands-with-commandbuilders.md).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetDeleteCommand">
      <MemberSignature Language="C#" Value="public System.Data.SqlClient.SqlCommand GetDeleteCommand (bool useColumnsForParameterNames);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Data.SqlClient.SqlCommand GetDeleteCommand(bool useColumnsForParameterNames) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlCommandBuilder.GetDeleteCommand(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetDeleteCommand (useColumnsForParameterNames As Boolean) As SqlCommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Data::SqlClient::SqlCommand ^ GetDeleteCommand(bool useColumnsForParameterNames);" />
      <MemberSignature Language="F#" Value="override this.GetDeleteCommand : bool -&gt; System.Data.SqlClient.SqlCommand" Usage="sqlCommandBuilder.GetDeleteCommand useColumnsForParameterNames" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.SqlClient.SqlCommand</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="useColumnsForParameterNames" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="useColumnsForParameterNames">Si es <see langword="true" />, hay que generar nombres de parámetro que coincidan con los nombres de columna, si es posible. Si es <see langword="false" />, genera @p1, @p2, etc.</param>
        <summary>Obtiene el objeto <see cref="T:System.Data.SqlClient.SqlCommand" /> generado automáticamente que es necesario para realizar eliminaciones en la base de datos.</summary>
        <returns>Objeto <see cref="T:System.Data.SqlClient.SqlCommand" /> generado automáticamente que es necesario para realizar eliminaciones.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Una aplicación puede utilizar el <xref:System.Data.SqlClient.SqlCommandBuilder.GetDeleteCommand%2A> método de información o solucionar problemas porque devuelve la <xref:System.Data.SqlClient.SqlCommand> objeto va a ejecutar.  
  
 También puede usar <xref:System.Data.SqlClient.SqlCommandBuilder.GetDeleteCommand%2A> como base de un comando modificado. Por ejemplo, puede llamar a <xref:System.Data.SqlClient.SqlCommandBuilder.GetDeleteCommand%2A> y modificar el <xref:System.Data.SqlClient.SqlCommand.CommandTimeout%2A> valor y, a continuación, establezca la explícitamente en el <xref:System.Data.SqlClient.SqlDataAdapter>.  
  
 Después de la instrucción SQL se genera por primera vez, la aplicación debe llamar explícitamente a <xref:System.Data.Common.DbCommandBuilder.RefreshSchema%2A> si se cambia la instrucción en modo alguno. En caso contrario, el <xref:System.Data.SqlClient.SqlCommandBuilder.GetDeleteCommand%2A> seguirá utilizando la información de la instrucción anterior, que puede no ser correcta. Las instrucciones SQL se generan por primera vez cuando la aplicación llama una <xref:System.Data.Common.DbDataAdapter.Update%2A> o <xref:System.Data.SqlClient.SqlCommandBuilder.GetDeleteCommand%2A>.  
  
 El comportamiento predeterminado, al generar nombres de parámetro, consiste en usar @p1, @p2, y así sucesivamente para los distintos parámetros. Pasar `true` para el `useColumnsForParameterNames` parámetro le permite forzar la <xref:System.Data.OleDb.OleDbCommandBuilder> para generar los parámetros basados en los nombres de columna en su lugar. Esto se realiza correctamente solo si se cumplen las condiciones siguientes:  
  
-   El <xref:System.Data.Common.DbMetaDataColumnNames.ParameterNameMaxLength> devuelto desde el **GetSchema** método llamar y se encuentra en el <xref:System.Data.Common.DbMetaDataCollectionNames.DataSourceInformation> se ha especificado la colección y su longitud es igual o mayor que el nombre del parámetro generado.  
  
-   El nombre de parámetro generado cumple los criterios especificados en la <xref:System.Data.Common.DbMetaDataColumnNames.ParameterNamePattern> devuelto desde el **GetSchema** método llamar y se encuentra en la <xref:System.Data.Common.DbMetaDataCollectionNames.DataSourceInformation> expresión regular de la colección.  
  
-   A <xref:System.Data.Common.DbMetaDataColumnNames.ParameterMarkerFormat> devuelto desde el **GetSchema** método llamar y se encuentra en la <xref:System.Data.Common.DbMetaDataCollectionNames.DataSourceInformation> se especifica una colección.  
  
 Para obtener más información, consulte [generar comandos con objetos CommandBuilder](~/docs/framework/data/adonet/generating-commands-with-commandbuilders.md).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetInsertCommand">
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Obtiene el objeto <see cref="T:System.Data.SqlClient.SqlCommand" /> generado automáticamente que es necesario para realizar inserciones en la base de datos.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Una aplicación puede utilizar el <xref:System.Data.SqlClient.SqlCommandBuilder.GetInsertCommand%2A> método de información o solucionar problemas porque devuelve la <xref:System.Data.SqlClient.SqlCommand> objeto va a ejecutar.  
  
 También puede usar <xref:System.Data.SqlClient.SqlCommandBuilder.GetInsertCommand%2A> como base de un comando modificado. Por ejemplo, puede llamar a <xref:System.Data.SqlClient.SqlCommandBuilder.GetInsertCommand%2A> y modificar el <xref:System.Data.SqlClient.SqlCommand.CommandTimeout%2A> valor y, a continuación, establezca la explícitamente en el <xref:System.Data.SqlClient.SqlDataAdapter>.  
  
 Después de la instrucción de Transact-SQL se genera por primera vez, la aplicación debe llamar explícitamente a <xref:System.Data.Common.DbCommandBuilder.RefreshSchema%2A> si se cambia la instrucción en modo alguno. En caso contrario, el <xref:System.Data.SqlClient.SqlCommandBuilder.GetInsertCommand%2A> seguirá utilizando la información de la instrucción anterior, que puede no ser correcta. Las instrucciones Transact-SQL se generan por primera vez cuando la aplicación llama una <xref:System.Data.Common.DbDataAdapter.Update%2A> o <xref:System.Data.SqlClient.SqlCommandBuilder.GetInsertCommand%2A>.  
  
 Para obtener más información, consulte [generar comandos con objetos CommandBuilder](~/docs/framework/data/adonet/generating-commands-with-commandbuilders.md).  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetInsertCommand">
      <MemberSignature Language="C#" Value="public System.Data.SqlClient.SqlCommand GetInsertCommand ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Data.SqlClient.SqlCommand GetInsertCommand() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlCommandBuilder.GetInsertCommand" />
      <MemberSignature Language="VB.NET" Value="Public Function GetInsertCommand () As SqlCommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Data::SqlClient::SqlCommand ^ GetInsertCommand();" />
      <MemberSignature Language="F#" Value="override this.GetInsertCommand : unit -&gt; System.Data.SqlClient.SqlCommand" Usage="sqlCommandBuilder.GetInsertCommand " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.SqlClient.SqlCommand</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Obtiene el objeto <see cref="T:System.Data.SqlClient.SqlCommand" /> generado automáticamente que es necesario para realizar inserciones en la base de datos.</summary>
        <returns>Objeto <see cref="T:System.Data.SqlClient.SqlCommand" /> generado automáticamente que es necesario para realizar inserciones.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Una aplicación puede utilizar el <xref:System.Data.SqlClient.SqlCommandBuilder.GetInsertCommand%2A> método de información o solucionar problemas porque devuelve la <xref:System.Data.SqlClient.SqlCommand> objeto va a ejecutar.  
  
 También puede usar <xref:System.Data.SqlClient.SqlCommandBuilder.GetInsertCommand%2A> como base de un comando modificado. Por ejemplo, puede llamar a <xref:System.Data.SqlClient.SqlCommandBuilder.GetInsertCommand%2A> y modificar el <xref:System.Data.SqlClient.SqlCommand.CommandTimeout%2A> valor y, a continuación, establezca la explícitamente en el <xref:System.Data.SqlClient.SqlDataAdapter>.  
  
 Después de la instrucción de Transact-SQL se genera por primera vez, la aplicación debe llamar explícitamente a <xref:System.Data.Common.DbCommandBuilder.RefreshSchema%2A> si se cambia la instrucción en modo alguno. En caso contrario, el <xref:System.Data.SqlClient.SqlCommandBuilder.GetInsertCommand%2A> seguirá utilizando la información de la instrucción anterior, que puede no ser correcta. Las instrucciones Transact-SQL se generan por primera vez cuando la aplicación llama una <xref:System.Data.Common.DbDataAdapter.Update%2A> o <xref:System.Data.SqlClient.SqlCommandBuilder.GetInsertCommand%2A>.  
  
 Para obtener más información, consulte [generar comandos con objetos CommandBuilder](~/docs/framework/data/adonet/generating-commands-with-commandbuilders.md).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetInsertCommand">
      <MemberSignature Language="C#" Value="public System.Data.SqlClient.SqlCommand GetInsertCommand (bool useColumnsForParameterNames);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Data.SqlClient.SqlCommand GetInsertCommand(bool useColumnsForParameterNames) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlCommandBuilder.GetInsertCommand(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetInsertCommand (useColumnsForParameterNames As Boolean) As SqlCommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Data::SqlClient::SqlCommand ^ GetInsertCommand(bool useColumnsForParameterNames);" />
      <MemberSignature Language="F#" Value="override this.GetInsertCommand : bool -&gt; System.Data.SqlClient.SqlCommand" Usage="sqlCommandBuilder.GetInsertCommand useColumnsForParameterNames" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.SqlClient.SqlCommand</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="useColumnsForParameterNames" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="useColumnsForParameterNames">Si es <see langword="true" />, hay que generar nombres de parámetro que coincidan con los nombres de columna, si es posible. Si es <see langword="false" />, genera @p1, @p2, etc.</param>
        <summary>Obtiene el objeto <see cref="T:System.Data.SqlClient.SqlCommand" /> generado automáticamente que es necesario para realizar inserciones en la base de datos.</summary>
        <returns>Objeto <see cref="T:System.Data.SqlClient.SqlCommand" /> generado automáticamente que es necesario para realizar inserciones.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Una aplicación puede utilizar el <xref:System.Data.SqlClient.SqlCommandBuilder.GetInsertCommand%2A> método de información o solucionar problemas porque devuelve la <xref:System.Data.SqlClient.SqlCommand> objeto va a ejecutar.  
  
 También puede usar <xref:System.Data.SqlClient.SqlCommandBuilder.GetInsertCommand%2A> como base de un comando modificado. Por ejemplo, puede llamar a <xref:System.Data.SqlClient.SqlCommandBuilder.GetInsertCommand%2A> y modificar el <xref:System.Data.SqlClient.SqlCommand.CommandTimeout%2A> valor y, a continuación, establezca la explícitamente en el <xref:System.Data.SqlClient.SqlDataAdapter>.  
  
 Después de la instrucción de Transact-SQL se genera por primera vez, la aplicación debe llamar explícitamente a <xref:System.Data.Common.DbCommandBuilder.RefreshSchema%2A> si se cambia la instrucción en modo alguno. En caso contrario, el <xref:System.Data.SqlClient.SqlCommandBuilder.GetInsertCommand%2A> seguirá utilizando la información de la instrucción anterior, que puede no ser correcta. Las instrucciones Transact-SQL se generan por primera vez cuando la aplicación llama una <xref:System.Data.Common.DbDataAdapter.Update%2A> o <xref:System.Data.SqlClient.SqlCommandBuilder.GetInsertCommand%2A>.  
  
 El comportamiento predeterminado, al generar nombres de parámetro, consiste en usar @p1, @p2, y así sucesivamente para los distintos parámetros. Pasar `true` para el `useColumnsForParameterNames` parámetro le permite forzar la <xref:System.Data.OleDb.OleDbCommandBuilder> para generar los parámetros basados en los nombres de columna en su lugar. Esto se realiza correctamente solo si se cumplen las condiciones siguientes:  
  
-   El <xref:System.Data.Common.DbMetaDataColumnNames.ParameterNameMaxLength> devuelto desde el **GetSchema** método llamar y se encuentra en el <xref:System.Data.Common.DbMetaDataCollectionNames.DataSourceInformation> se ha especificado la colección y su longitud es igual o mayor que el nombre del parámetro generado.  
  
-   El nombre de parámetro generado cumple los criterios especificados en la <xref:System.Data.Common.DbMetaDataColumnNames.ParameterNamePattern> devuelto desde el **GetSchema** método llamar y se encuentra en la <xref:System.Data.Common.DbMetaDataCollectionNames.DataSourceInformation> expresión regular de la colección.  
  
-   A <xref:System.Data.Common.DbMetaDataColumnNames.ParameterMarkerFormat> devuelto desde el **GetSchema** método llamar y se encuentra en la <xref:System.Data.Common.DbMetaDataCollectionNames.DataSourceInformation> se especifica una colección.  
  
 Para obtener más información, consulte [generar comandos con objetos CommandBuilder](~/docs/framework/data/adonet/generating-commands-with-commandbuilders.md).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetParameterName">
      <MemberSignature Language="C#" Value="protected override string GetParameterName (int parameterOrdinal);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance string GetParameterName(int32 parameterOrdinal) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlCommandBuilder.GetParameterName(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function GetParameterName (parameterOrdinal As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override System::String ^ GetParameterName(int parameterOrdinal);" />
      <MemberSignature Language="F#" Value="override this.GetParameterName : int -&gt; string" Usage="sqlCommandBuilder.GetParameterName parameterOrdinal" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="parameterOrdinal" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="parameterOrdinal">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetParameterName">
      <MemberSignature Language="C#" Value="protected override string GetParameterName (string parameterName);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance string GetParameterName(string parameterName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlCommandBuilder.GetParameterName(System.String)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function GetParameterName (parameterName As String) As String" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override System::String ^ GetParameterName(System::String ^ parameterName);" />
      <MemberSignature Language="F#" Value="override this.GetParameterName : string -&gt; string" Usage="sqlCommandBuilder.GetParameterName parameterName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="parameterName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="parameterName">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetParameterPlaceholder">
      <MemberSignature Language="C#" Value="protected override string GetParameterPlaceholder (int parameterOrdinal);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance string GetParameterPlaceholder(int32 parameterOrdinal) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlCommandBuilder.GetParameterPlaceholder(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function GetParameterPlaceholder (parameterOrdinal As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override System::String ^ GetParameterPlaceholder(int parameterOrdinal);" />
      <MemberSignature Language="F#" Value="override this.GetParameterPlaceholder : int -&gt; string" Usage="sqlCommandBuilder.GetParameterPlaceholder parameterOrdinal" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="parameterOrdinal" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="parameterOrdinal">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetSchemaTable">
      <MemberSignature Language="C#" Value="protected override System.Data.DataTable GetSchemaTable (System.Data.Common.DbCommand srcCommand);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Data.DataTable GetSchemaTable(class System.Data.Common.DbCommand srcCommand) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlCommandBuilder.GetSchemaTable(System.Data.Common.DbCommand)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function GetSchemaTable (srcCommand As DbCommand) As DataTable" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override System::Data::DataTable ^ GetSchemaTable(System::Data::Common::DbCommand ^ srcCommand);" />
      <MemberSignature Language="F#" Value="override this.GetSchemaTable : System.Data.Common.DbCommand -&gt; System.Data.DataTable" Usage="sqlCommandBuilder.GetSchemaTable srcCommand" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.DataTable</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="srcCommand" Type="System.Data.Common.DbCommand" />
      </Parameters>
      <Docs>
        <param name="srcCommand">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetUpdateCommand">
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Obtiene el objeto <see cref="T:System.Data.SqlClient.SqlCommand" /> generado automáticamente que es necesario para realizar actualizaciones en la base de datos.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Una aplicación puede utilizar el <xref:System.Data.SqlClient.SqlCommandBuilder.GetUpdateCommand%2A> método de información o solucionar problemas porque devuelve la <xref:System.Data.SqlClient.SqlCommand> objeto va a ejecutar.  
  
 También puede usar <xref:System.Data.SqlClient.SqlCommandBuilder.GetUpdateCommand%2A> como base de un comando modificado. Por ejemplo, puede llamar a <xref:System.Data.SqlClient.SqlCommandBuilder.GetUpdateCommand%2A> y modificar el <xref:System.Data.SqlClient.SqlCommand.CommandTimeout%2A> valor y, a continuación, establezca la explícitamente en el <xref:System.Data.SqlClient.SqlDataAdapter>.  
  
 Después de la instrucción de Transact-SQL se genera por primera vez, la aplicación debe llamar explícitamente a <xref:System.Data.Common.DbCommandBuilder.RefreshSchema%2A> si se cambia la instrucción en modo alguno. En caso contrario, el <xref:System.Data.SqlClient.SqlCommandBuilder.GetUpdateCommand%2A> seguirá utilizando la información de la instrucción anterior, que puede no ser correcta. Las instrucciones Transact-SQL se generan por primera vez cuando la aplicación llama una <xref:System.Data.Common.DbDataAdapter.Update%2A> o <xref:System.Data.SqlClient.SqlCommandBuilder.GetUpdateCommand%2A>.  
  
 Para obtener más información, consulte [generar comandos con objetos CommandBuilder](~/docs/framework/data/adonet/generating-commands-with-commandbuilders.md).  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetUpdateCommand">
      <MemberSignature Language="C#" Value="public System.Data.SqlClient.SqlCommand GetUpdateCommand ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Data.SqlClient.SqlCommand GetUpdateCommand() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlCommandBuilder.GetUpdateCommand" />
      <MemberSignature Language="VB.NET" Value="Public Function GetUpdateCommand () As SqlCommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Data::SqlClient::SqlCommand ^ GetUpdateCommand();" />
      <MemberSignature Language="F#" Value="override this.GetUpdateCommand : unit -&gt; System.Data.SqlClient.SqlCommand" Usage="sqlCommandBuilder.GetUpdateCommand " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.SqlClient.SqlCommand</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Obtiene el objeto <see cref="T:System.Data.SqlClient.SqlCommand" /> generado automáticamente que es necesario para realizar actualizaciones en la base de datos.</summary>
        <returns>Objeto <see cref="T:System.Data.SqlClient.SqlCommand" /> generado automáticamente que es necesario para realizar actualizaciones.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Una aplicación puede utilizar el <xref:System.Data.SqlClient.SqlCommandBuilder.GetUpdateCommand%2A> método de información o solucionar problemas porque devuelve la <xref:System.Data.SqlClient.SqlCommand> objeto va a ejecutar.  
  
 También puede usar <xref:System.Data.SqlClient.SqlCommandBuilder.GetUpdateCommand%2A> como base de un comando modificado. Por ejemplo, puede llamar a <xref:System.Data.SqlClient.SqlCommandBuilder.GetUpdateCommand%2A> y modificar el <xref:System.Data.SqlClient.SqlCommand.CommandTimeout%2A> valor y, a continuación, establezca la explícitamente en el <xref:System.Data.SqlClient.SqlDataAdapter>.  
  
 Después de la instrucción de Transact-SQL se genera por primera vez, la aplicación debe llamar explícitamente a <xref:System.Data.Common.DbCommandBuilder.RefreshSchema%2A> si se cambia la instrucción en modo alguno. En caso contrario, el <xref:System.Data.SqlClient.SqlCommandBuilder.GetUpdateCommand%2A> seguirá utilizando la información de la instrucción anterior, que puede no ser correcta. Las instrucciones Transact-SQL se generan por primera vez cuando la aplicación llama una <xref:System.Data.Common.DbDataAdapter.Update%2A> o <xref:System.Data.SqlClient.SqlCommandBuilder.GetUpdateCommand%2A>.  
  
 Para obtener más información, consulte [generar comandos con objetos CommandBuilder](~/docs/framework/data/adonet/generating-commands-with-commandbuilders.md).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetUpdateCommand">
      <MemberSignature Language="C#" Value="public System.Data.SqlClient.SqlCommand GetUpdateCommand (bool useColumnsForParameterNames);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Data.SqlClient.SqlCommand GetUpdateCommand(bool useColumnsForParameterNames) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlCommandBuilder.GetUpdateCommand(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetUpdateCommand (useColumnsForParameterNames As Boolean) As SqlCommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Data::SqlClient::SqlCommand ^ GetUpdateCommand(bool useColumnsForParameterNames);" />
      <MemberSignature Language="F#" Value="override this.GetUpdateCommand : bool -&gt; System.Data.SqlClient.SqlCommand" Usage="sqlCommandBuilder.GetUpdateCommand useColumnsForParameterNames" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.SqlClient.SqlCommand</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="useColumnsForParameterNames" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="useColumnsForParameterNames">Si es <see langword="true" />, hay que generar nombres de parámetro que coincidan con los nombres de columna, si es posible. Si es <see langword="false" />, genera @p1, @p2, etc.</param>
        <summary>Obtiene el objeto <see cref="T:System.Data.SqlClient.SqlCommand" /> generado automáticamente que es necesario para realizar actualizaciones en la base de datos.</summary>
        <returns>Objeto <see cref="T:System.Data.SqlClient.SqlCommand" /> generado automáticamente que es necesario para realizar actualizaciones.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Una aplicación puede utilizar el <xref:System.Data.SqlClient.SqlCommandBuilder.GetUpdateCommand%2A> método de información o solucionar problemas porque devuelve la <xref:System.Data.SqlClient.SqlCommand> objeto va a ejecutar.  
  
 También puede usar <xref:System.Data.SqlClient.SqlCommandBuilder.GetUpdateCommand%2A> como base de un comando modificado. Por ejemplo, puede llamar a <xref:System.Data.SqlClient.SqlCommandBuilder.GetUpdateCommand%2A> y modificar el <xref:System.Data.SqlClient.SqlCommand.CommandTimeout%2A> valor y, a continuación, establezca la explícitamente en el <xref:System.Data.SqlClient.SqlDataAdapter>.  
  
 Después de la instrucción de Transact-SQL se genera por primera vez, la aplicación debe llamar explícitamente a <xref:System.Data.Common.DbCommandBuilder.RefreshSchema%2A> si se cambia la instrucción en modo alguno. En caso contrario, el <xref:System.Data.SqlClient.SqlCommandBuilder.GetUpdateCommand%2A> seguirá utilizando la información de la instrucción anterior, que puede no ser correcta. Las instrucciones Transact-SQL se generan por primera vez cuando la aplicación llama una <xref:System.Data.Common.DbDataAdapter.Update%2A> o <xref:System.Data.SqlClient.SqlCommandBuilder.GetUpdateCommand%2A>.  
  
 El comportamiento predeterminado, al generar nombres de parámetro, consiste en usar @p1, @p2, y así sucesivamente para los distintos parámetros. Pasar `true` para el `useColumnsForParameterNames` parámetro le permite forzar la <xref:System.Data.OleDb.OleDbCommandBuilder> para generar los parámetros basados en los nombres de columna en su lugar. Esto se realiza correctamente solo si se cumplen las condiciones siguientes:  
  
-   El <xref:System.Data.Common.DbMetaDataColumnNames.ParameterNameMaxLength> devuelto desde el **GetSchema** método llamar y se encuentra en el <xref:System.Data.Common.DbMetaDataCollectionNames.DataSourceInformation> se ha especificado la colección y su longitud es igual o mayor que el nombre del parámetro generado.  
  
-   El nombre de parámetro generado cumple los criterios especificados en la <xref:System.Data.Common.DbMetaDataColumnNames.ParameterNamePattern> devuelto desde el **GetSchema** método llamar y se encuentra en la <xref:System.Data.Common.DbMetaDataCollectionNames.DataSourceInformation> expresión regular de la colección.  
  
-   A <xref:System.Data.Common.DbMetaDataColumnNames.ParameterMarkerFormat> devuelto desde el **GetSchema** método llamar y se encuentra en la <xref:System.Data.Common.DbMetaDataCollectionNames.DataSourceInformation> se especifica una colección.  
  
 Para obtener más información, consulte [generar comandos con objetos CommandBuilder](~/docs/framework/data/adonet/generating-commands-with-commandbuilders.md).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InitializeCommand">
      <MemberSignature Language="C#" Value="protected override System.Data.Common.DbCommand InitializeCommand (System.Data.Common.DbCommand command);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Data.Common.DbCommand InitializeCommand(class System.Data.Common.DbCommand command) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlCommandBuilder.InitializeCommand(System.Data.Common.DbCommand)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function InitializeCommand (command As DbCommand) As DbCommand" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override System::Data::Common::DbCommand ^ InitializeCommand(System::Data::Common::DbCommand ^ command);" />
      <MemberSignature Language="F#" Value="override this.InitializeCommand : System.Data.Common.DbCommand -&gt; System.Data.Common.DbCommand" Usage="sqlCommandBuilder.InitializeCommand command" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Common.DbCommand</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="command" Type="System.Data.Common.DbCommand" />
      </Parameters>
      <Docs>
        <param name="command">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="QuoteIdentifier">
      <MemberSignature Language="C#" Value="public override string QuoteIdentifier (string unquotedIdentifier);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string QuoteIdentifier(string unquotedIdentifier) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlCommandBuilder.QuoteIdentifier(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function QuoteIdentifier (unquotedIdentifier As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ QuoteIdentifier(System::String ^ unquotedIdentifier);" />
      <MemberSignature Language="F#" Value="override this.QuoteIdentifier : string -&gt; string" Usage="sqlCommandBuilder.QuoteIdentifier unquotedIdentifier" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="unquotedIdentifier" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="unquotedIdentifier">Identificador original sin comillas.</param>
        <summary>Dado un identificador sin comillas en el caso de un catálogo correcto, devuelve el formato correcto del entrecomillado de ese identificador. Incluye una secuencia de escape correcta de las comillas incrustadas que pueda haber en el identificador.</summary>
        <returns>Versión entrecomillada del identificador. Se crea una secuencia de escape correcta de las comillas incrustadas en el identificador.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="QuotePrefix">
      <MemberSignature Language="C#" Value="public override string QuotePrefix { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string QuotePrefix" />
      <MemberSignature Language="DocId" Value="P:System.Data.SqlClient.SqlCommandBuilder.QuotePrefix" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Property QuotePrefix As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ QuotePrefix { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.QuotePrefix : string with get, set" Usage="System.Data.SqlClient.SqlCommandBuilder.QuotePrefix" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene o establece el carácter o caracteres iniciales que se van a utilizar para especificar objetos de base de datos de SQL Server, por ejemplo, tablas o columnas, cuyos nombres contengan caracteres como espacios o símbolos (tokens) reservados.</summary>
        <value>Caracteres iniciales que se van a utilizar. El valor predeterminado es una cadena vacía.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  Aunque no se puede cambiar la <xref:System.Data.SqlClient.SqlCommandBuilder.QuotePrefix%2A> o <xref:System.Data.SqlClient.SqlCommandBuilder.QuoteSuffix%2A> propiedades después de una instrucción insert, update o delete se ha generado el comando, se pueden cambiar sus valores después de llamar a la `Update` método de un objeto DataAdapter.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Esta propiedad no podrá modificarse una vez que se haya generado un comando INSERT, UPDATE o DELETE.</exception>
      </Docs>
    </Member>
    <Member MemberName="QuoteSuffix">
      <MemberSignature Language="C#" Value="public override string QuoteSuffix { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string QuoteSuffix" />
      <MemberSignature Language="DocId" Value="P:System.Data.SqlClient.SqlCommandBuilder.QuoteSuffix" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Property QuoteSuffix As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ QuoteSuffix { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.QuoteSuffix : string with get, set" Usage="System.Data.SqlClient.SqlCommandBuilder.QuoteSuffix" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene o establece el carácter o caracteres finales que se utilizan para especificar objetos de base de datos de SQL Server, por ejemplo, tablas o columnas, cuyos nombres contienen caracteres como espacios o símbolos (tokens) reservados.</summary>
        <value>Caracteres finales que se van a utilizar. El valor predeterminado es una cadena vacía.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  Aunque no se puede cambiar la <xref:System.Data.SqlClient.SqlCommandBuilder.QuotePrefix%2A> o <xref:System.Data.SqlClient.SqlCommandBuilder.QuoteSuffix%2A> propiedades después de una instrucción insert, update o delete se ha generado la operación, se pueden cambiar sus valores después de llamar a la `Update` método de un objeto DataAdapter.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Esta propiedad no se puede cambiar después de generar un comando de inserción, actualización o eliminación.</exception>
      </Docs>
    </Member>
    <Member MemberName="SchemaSeparator">
      <MemberSignature Language="C#" Value="public override string SchemaSeparator { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string SchemaSeparator" />
      <MemberSignature Language="DocId" Value="P:System.Data.SqlClient.SqlCommandBuilder.SchemaSeparator" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Property SchemaSeparator As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ SchemaSeparator { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.SchemaSeparator : string with get, set" Usage="System.Data.SqlClient.SqlCommandBuilder.SchemaSeparator" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene o establece el carácter que se va a utilizar para el separador entre el identificador de esquema y cualquier otro identificador.</summary>
        <value>Carácter que se va a utilizar como separador de esquema.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Generalmente, los servidores de base de datos indican el esquema para un identificador separando el nombre del esquema del identificador con algún carácter. Por ejemplo, SQL Server utiliza un período, creando identificadores completos como persona.NombreCliente, donde "Persona" es el nombre del esquema y "NombreCliente" es el identificador. Al establecer esta propiedad permite a los programadores modificar este comportamiento.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetRowUpdatingHandler">
      <MemberSignature Language="C#" Value="protected override void SetRowUpdatingHandler (System.Data.Common.DbDataAdapter adapter);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void SetRowUpdatingHandler(class System.Data.Common.DbDataAdapter adapter) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlCommandBuilder.SetRowUpdatingHandler(System.Data.Common.DbDataAdapter)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub SetRowUpdatingHandler (adapter As DbDataAdapter)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void SetRowUpdatingHandler(System::Data::Common::DbDataAdapter ^ adapter);" />
      <MemberSignature Language="F#" Value="override this.SetRowUpdatingHandler : System.Data.Common.DbDataAdapter -&gt; unit" Usage="sqlCommandBuilder.SetRowUpdatingHandler adapter" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="adapter" Type="System.Data.Common.DbDataAdapter" />
      </Parameters>
      <Docs>
        <param name="adapter">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UnquoteIdentifier">
      <MemberSignature Language="C#" Value="public override string UnquoteIdentifier (string quotedIdentifier);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string UnquoteIdentifier(string quotedIdentifier) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlCommandBuilder.UnquoteIdentifier(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function UnquoteIdentifier (quotedIdentifier As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ UnquoteIdentifier(System::String ^ quotedIdentifier);" />
      <MemberSignature Language="F#" Value="override this.UnquoteIdentifier : string -&gt; string" Usage="sqlCommandBuilder.UnquoteIdentifier quotedIdentifier" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="quotedIdentifier" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="quotedIdentifier">Identificador del que se van a quitar las comillas incrustadas.</param>
        <summary>Dado in identificador entre comillas, devuelve el formato correcto sin comillas de ese identificador. Incluye una secuencia sin escape correcta de las comillas incrustadas que pueda haber en el identificador.</summary>
        <returns>Identificador sin comillas, del que también se han quitado correctamente las comillas incrustadas.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>