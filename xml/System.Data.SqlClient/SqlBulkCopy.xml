<Type Name="SqlBulkCopy" FullName="System.Data.SqlClient.SqlBulkCopy">
  <Metadata><Meta Name="ms.openlocfilehash" Value="597ab8d6bf17107429c34581026ac8e302c80b5e" /><Meta Name="ms.sourcegitcommit" Value="d40b35262cbc997b79bf76da3a39ccf59b738efc" /><Meta Name="ms.translationtype" Value="HT" /><Meta Name="ms.contentlocale" Value="es-ES" /><Meta Name="ms.lasthandoff" Value="12/05/2018" /><Meta Name="ms.locfileid" Value="52914670" /></Metadata><TypeSignature Language="C#" Value="public sealed class SqlBulkCopy : IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit SqlBulkCopy extends System.Object implements class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.Data.SqlClient.SqlBulkCopy" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class SqlBulkCopy&#xA;Implements IDisposable" />
  <TypeSignature Language="C++ CLI" Value="public ref class SqlBulkCopy sealed : IDisposable" />
  <TypeSignature Language="F#" Value="type SqlBulkCopy = class&#xA;    interface IDisposable" />
  <AssemblyInfo>
    <AssemblyName>System.Data.SqlClient</AssemblyName>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.4.0.0</AssemblyVersion>
    <AssemblyVersion>4.5.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Data</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>Permite realizar eficazmente la carga masiva de una tabla de SQL Server con datos procedentes de otro origen.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Microsoft SQL Server incluye una conocida utilidad de línea de comandos denominada **bcp** para mover datos de una tabla a otra, ya sea en un solo servidor o entre servidores. La <xref:System.Data.SqlClient.SqlBulkCopy> clase le permite escribir soluciones de código administrado que proporcionan una funcionalidad similar. Hay otras maneras de cargar datos en una tabla de SQL Server (instrucciones INSERT, por ejemplo), pero <xref:System.Data.SqlClient.SqlBulkCopy> ofrece una ventaja de rendimiento significativas sobre ellos.  
  
 La clase <xref:System.Data.SqlClient.SqlBulkCopy> sólo se puede utilizar para escribir datos en tablas SQL Server. Sin embargo, el origen de datos no se limita a SQL Server; puede usarse cualquier origen de datos, siempre que se pueden cargar los datos a un <xref:System.Data.DataTable> instancia o leerse con un <xref:System.Data.IDataReader> instancia.  
  
 <xref:System.Data.SqlClient.SqlBulkCopy> se producirá un error cuando la carga masiva una <xref:System.Data.DataTable> columna de tipo <xref:System.Data.SqlTypes.SqlDateTime> en un servidor SQL Server se agrega la columna cuyo tipo es uno de los tipos de fecha y hora en SQL Server 2008.  
  
   
  
## Examples  
 En la siguiente aplicación de consola se demuestra cómo cargar datos mediante la clase <xref:System.Data.SqlClient.SqlBulkCopy>. En este ejemplo, un <xref:System.Data.SqlClient.SqlDataReader> se usa para copiar datos desde el **Production.Product** tabla en SQL Server **AdventureWorks** base de datos a una tabla similar en la misma base de datos.  
  
> [!IMPORTANT]
>  En este ejemplo no se ejecutará a menos que haya creado las tablas de trabajo como se describe en [configuración de ejemplo de copia masiva](~/docs/framework/data/adonet/sql/bulk-copy-example-setup.md). Este código se proporciona para mostrar la sintaxis para usar **SqlBulkCopy** solo. Si las tablas de origen y destino están en la misma instancia de SQL Server, es más fácil y rápido usar Transact-SQL `INSERT … SELECT` instrucción para copiar los datos.  
  
 [!code-csharp[DataWorks BulkCopy.Single#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks BulkCopy.Single/CS/source.cs#1)]
 [!code-vb[DataWorks BulkCopy.Single#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks BulkCopy.Single/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <related type="Article" href="https://msdn.microsoft.com/library/83a7a0d2-8018-4354-97b9-0b1d99f8342b">Realizar operaciones de copia masiva</related>
    <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">Información general sobre ADO.NET</related>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Data.SqlClient.SqlBulkCopy" />.</summary>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">Información general sobre ADO.NET</related>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SqlBulkCopy (System.Data.SqlClient.SqlConnection connection);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Data.SqlClient.SqlConnection connection) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlBulkCopy.#ctor(System.Data.SqlClient.SqlConnection)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (connection As SqlConnection)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; SqlBulkCopy(System::Data::SqlClient::SqlConnection ^ connection);" />
      <MemberSignature Language="F#" Value="new System.Data.SqlClient.SqlBulkCopy : System.Data.SqlClient.SqlConnection -&gt; System.Data.SqlClient.SqlBulkCopy" Usage="new System.Data.SqlClient.SqlBulkCopy connection" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.4.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="connection" Type="System.Data.SqlClient.SqlConnection" />
      </Parameters>
      <Docs>
        <param name="connection">Instancia ya abierta de <see cref="T:System.Data.SqlClient.SqlConnection" /> que se utilizará para realizar la copia masiva. Si la cadena de conexión no usa <see langword="Integrated Security = true" />, puede usar <see cref="T:System.Data.SqlClient.SqlCredential" /> para pasar el Id. de usuario y la contraseña de forma más segura que especificando el identificador de usuario y la contraseña como texto en la cadena de conexión.</param>
        <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Data.SqlClient.SqlBulkCopy" /> utilizando la instancia abierta especificada de <see cref="T:System.Data.SqlClient.SqlConnection" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Dado que la conexión ya está abierta cuando el <xref:System.Data.SqlClient.SqlBulkCopy> se inicializa la instancia, la conexión permanece abierta después de la <xref:System.Data.SqlClient.SqlBulkCopy> instancia está cerrada.  
  
 Si el `connection` del argumento es null, un <xref:System.ArgumentNullException> se produce.  
  
   
  
## Examples  
 La siguiente aplicación de consola muestra cómo cargar masivamente datos mediante una conexión que ya está abierta. En este ejemplo, un <xref:System.Data.SqlClient.SqlDataReader> se usa para copiar datos desde el **Production.Product** tabla en SQL Server **AdventureWorks** base de datos a una tabla similar en la misma base de datos. Este ejemplo solamente sirve de demostración. No utilizaría `SqlBulkCopy` para mover datos desde una tabla a otra en la misma base de datos en una aplicación de producción. Tenga en cuenta que los datos de origen no tienen que estar ubicada en SQL Server; Puede usar cualquier origen de datos que se puede leer a una <xref:System.Data.IDataReader> o cargados para un <xref:System.Data.DataTable>.  
  
> [!IMPORTANT]
>  En este ejemplo no se ejecutará a menos que haya creado las tablas de trabajo como se describe en [configuración de ejemplo de copia masiva](~/docs/framework/data/adonet/sql/bulk-copy-example-setup.md). Este código se proporciona para mostrar la sintaxis para usar **SqlBulkCopy** solo. Si las tablas de origen y destino están en la misma instancia de SQL Server, es más fácil y rápido usar Transact-SQL `INSERT … SELECT` instrucción para copiar los datos.  
  
 [!code-csharp[DataWorks BulkCopy.Single#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks BulkCopy.Single/CS/source.cs#1)]
 [!code-vb[DataWorks BulkCopy.Single#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks BulkCopy.Single/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/83a7a0d2-8018-4354-97b9-0b1d99f8342b">Realizar operaciones de copia masiva</related>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">Información general sobre ADO.NET</related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SqlBulkCopy (string connectionString);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string connectionString) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlBulkCopy.#ctor(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (connectionString As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; SqlBulkCopy(System::String ^ connectionString);" />
      <MemberSignature Language="F#" Value="new System.Data.SqlClient.SqlBulkCopy : string -&gt; System.Data.SqlClient.SqlBulkCopy" Usage="new System.Data.SqlClient.SqlBulkCopy connectionString" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.4.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="connectionString" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="connectionString">La cadena que define la conexión que abrirá para su uso la instancia de <see cref="T:System.Data.SqlClient.SqlBulkCopy" />. Si la cadena de conexión no usa <see langword="Integrated Security = true" />, puede usar <see cref="M:System.Data.SqlClient.SqlBulkCopy.#ctor(System.Data.SqlClient.SqlConnection)" /> o <see cref="M:System.Data.SqlClient.SqlBulkCopy.#ctor(System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlBulkCopyOptions,System.Data.SqlClient.SqlTransaction)" /> y <see cref="T:System.Data.SqlClient.SqlCredential" /> para pasar el Id. de usuario y la contraseña de forma más segura que especificando el identificador de usuario y la contraseña como texto en la cadena de conexión.</param>
        <summary>Inicializa y abre una nueva instancia de <see cref="T:System.Data.SqlClient.SqlConnection" /> según la <paramref name="connectionString" /> proporcionada. El constructor usa esa <see cref="T:System.Data.SqlClient.SqlConnection" /> para inicializar una nueva instancia de la clase <see cref="T:System.Data.SqlClient.SqlBulkCopy" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La conexión se cierra automáticamente al final de la operación de copia masiva.  
  
 Si `connectionString` es null, un <xref:System.ArgumentNullException> se produce. Si `connectionString` es una cadena vacía, un <xref:System.ArgumentException> se produce.  
  
   
  
## Examples  
 La siguiente aplicación de consola muestra cómo cargar datos de forma masiva mediante una conexión especificada como una cadena. La conexión se cierra automáticamente cuando el <xref:System.Data.SqlClient.SqlBulkCopy> instancia está cerrada.  
  
 En este ejemplo, primero se leen los datos de origen de una tabla de SQL Server para un <xref:System.Data.SqlClient.SqlDataReader> instancia. Los datos de origen no tienen que estar ubicada en SQL Server; Puede usar cualquier origen de datos que se puede leer a una <xref:System.Data.IDataReader> o cargados para un <xref:System.Data.DataTable>.  
  
> [!IMPORTANT]
>  En este ejemplo no se ejecutará a menos que haya creado las tablas de trabajo como se describe en [configuración de ejemplo de copia masiva](~/docs/framework/data/adonet/sql/bulk-copy-example-setup.md). Este código se proporciona para mostrar la sintaxis para usar **SqlBulkCopy** solo. Si las tablas de origen y destino están en la misma instancia de SQL Server, es más fácil y rápido usar Transact-SQL `INSERT … SELECT` instrucción para copiar los datos.  
  
 [!code-csharp[DataWorks SqlBulkCopy.ConnectionString#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks SqlBulkCopy.ConnectionString/CS/source.cs#1)]
 [!code-vb[DataWorks SqlBulkCopy.ConnectionString#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks SqlBulkCopy.ConnectionString/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/83a7a0d2-8018-4354-97b9-0b1d99f8342b">Operaciones de copia masiva en SQL Server</related>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">Información general sobre ADO.NET</related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SqlBulkCopy (string connectionString, System.Data.SqlClient.SqlBulkCopyOptions copyOptions);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string connectionString, valuetype System.Data.SqlClient.SqlBulkCopyOptions copyOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlBulkCopy.#ctor(System.String,System.Data.SqlClient.SqlBulkCopyOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (connectionString As String, copyOptions As SqlBulkCopyOptions)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; SqlBulkCopy(System::String ^ connectionString, System::Data::SqlClient::SqlBulkCopyOptions copyOptions);" />
      <MemberSignature Language="F#" Value="new System.Data.SqlClient.SqlBulkCopy : string * System.Data.SqlClient.SqlBulkCopyOptions -&gt; System.Data.SqlClient.SqlBulkCopy" Usage="new System.Data.SqlClient.SqlBulkCopy (connectionString, copyOptions)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.4.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="connectionString" Type="System.String" />
        <Parameter Name="copyOptions" Type="System.Data.SqlClient.SqlBulkCopyOptions" />
      </Parameters>
      <Docs>
        <param name="connectionString">La cadena que define la conexión que abrirá para su uso la instancia de <see cref="T:System.Data.SqlClient.SqlBulkCopy" />. Si la cadena de conexión no usa <see langword="Integrated Security = true" />, puede usar <see cref="M:System.Data.SqlClient.SqlBulkCopy.#ctor(System.Data.SqlClient.SqlConnection)" /> o <see cref="M:System.Data.SqlClient.SqlBulkCopy.#ctor(System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlBulkCopyOptions,System.Data.SqlClient.SqlTransaction)" /> y <see cref="T:System.Data.SqlClient.SqlCredential" /> para pasar el Id. de usuario y la contraseña de forma más segura que especificando el identificador de usuario y la contraseña como texto en la cadena de conexión.</param>
        <param name="copyOptions">Combinación de valores de la enumeración <see cref="T:System.Data.SqlClient.SqlBulkCopyOptions" /> que determina las filas del origen de datos que se van a copiar a la tabla de destino.</param>
        <summary>Inicializa y abre una nueva instancia de <see cref="T:System.Data.SqlClient.SqlConnection" /> según la <paramref name="connectionString" /> proporcionada. El constructor usa esa <see cref="T:System.Data.SqlClient.SqlConnection" /> para inicializar una nueva instancia de la clase <see cref="T:System.Data.SqlClient.SqlBulkCopy" />. La instancia de <see cref="T:System.Data.SqlClient.SqlConnection" /> se comporta según las opciones proporcionadas en el parámetro <paramref name="copyOptions" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Puede obtener información detallada sobre todas las opciones de copia masiva en el <xref:System.Data.SqlClient.SqlBulkCopyOptions> tema.  
  
   
  
## Examples  
 La siguiente aplicación de consola muestra cómo realizar una carga masiva mediante una conexión especificada como una cadena. Se establece una opción para usar el valor de la columna de identidad de la tabla de origen al cargar la tabla de destino. En este ejemplo, primero se leen los datos de origen de una tabla de SQL Server para un <xref:System.Data.SqlClient.SqlDataReader> instancia. La tabla de origen y tabla de destino incluyen una columna de identidad. De forma predeterminada, un nuevo valor para el **identidad** se genera la columna en la tabla de destino para cada fila agregada. En este ejemplo, se establece una opción cuando se abre la conexión que obliga al proceso de carga masiva al utilizar el **identidad** valores de la tabla de origen en su lugar. Para ver cómo la opción cambia la manera las obras de carga masiva, ejecute el ejemplo con el **dbo. BulkCopyDemoMatchingColumns** tabla vacía. Todas las filas que se cargan desde el origen. A continuación, ejecute de nuevo el ejemplo sin vaciar la tabla. Se produce una excepción y el código escribe un mensaje en la consola que le notifica que no se han agregado filas debido a infracciones de restricción de clave principal.  
  
> [!IMPORTANT]
>  En este ejemplo no se ejecutará a menos que haya creado las tablas de trabajo como se describe en [configuración de ejemplo de copia masiva](~/docs/framework/data/adonet/sql/bulk-copy-example-setup.md). Este código se proporciona para mostrar la sintaxis para usar **SqlBulkCopy** solo. Si las tablas de origen y destino están en la misma instancia de SQL Server, es más fácil y rápido usar Transact-SQL `INSERT … SELECT` instrucción para copiar los datos.  
  
 [!code-csharp[DataWorks SqlBulkCopy.KeepIdentity#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks SqlBulkCopy.KeepIdentity/CS/source.cs#1)]
 [!code-vb[DataWorks SqlBulkCopy.KeepIdentity#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks SqlBulkCopy.KeepIdentity/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/83a7a0d2-8018-4354-97b9-0b1d99f8342b">Realizar operaciones de copia masiva</related>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">Información general sobre ADO.NET</related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SqlBulkCopy (System.Data.SqlClient.SqlConnection connection, System.Data.SqlClient.SqlBulkCopyOptions copyOptions, System.Data.SqlClient.SqlTransaction externalTransaction);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Data.SqlClient.SqlConnection connection, valuetype System.Data.SqlClient.SqlBulkCopyOptions copyOptions, class System.Data.SqlClient.SqlTransaction externalTransaction) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlBulkCopy.#ctor(System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlBulkCopyOptions,System.Data.SqlClient.SqlTransaction)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (connection As SqlConnection, copyOptions As SqlBulkCopyOptions, externalTransaction As SqlTransaction)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; SqlBulkCopy(System::Data::SqlClient::SqlConnection ^ connection, System::Data::SqlClient::SqlBulkCopyOptions copyOptions, System::Data::SqlClient::SqlTransaction ^ externalTransaction);" />
      <MemberSignature Language="F#" Value="new System.Data.SqlClient.SqlBulkCopy : System.Data.SqlClient.SqlConnection * System.Data.SqlClient.SqlBulkCopyOptions * System.Data.SqlClient.SqlTransaction -&gt; System.Data.SqlClient.SqlBulkCopy" Usage="new System.Data.SqlClient.SqlBulkCopy (connection, copyOptions, externalTransaction)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.4.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="connection" Type="System.Data.SqlClient.SqlConnection" />
        <Parameter Name="copyOptions" Type="System.Data.SqlClient.SqlBulkCopyOptions" />
        <Parameter Name="externalTransaction" Type="System.Data.SqlClient.SqlTransaction" />
      </Parameters>
      <Docs>
        <param name="connection">La instancia <see cref="T:System.Data.SqlClient.SqlConnection" /> que ya está abierta que se usará para realizar la copia masiva. Si la cadena de conexión no usa <see langword="Integrated Security = true" />, puede usar <see cref="T:System.Data.SqlClient.SqlCredential" /> para pasar el Id. de usuario y la contraseña de forma más segura que especificando el identificador de usuario y la contraseña como texto en la cadena de conexión.</param>
        <param name="copyOptions">Combinación de valores de la enumeración <see cref="T:System.Data.SqlClient.SqlBulkCopyOptions" /> que determina las filas del origen de datos que se van a copiar a la tabla de destino.</param>
        <param name="externalTransaction">Instancia <see cref="T:System.Data.SqlClient.SqlTransaction" /> existente en la que se producirá la copia masiva.</param>
        <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Data.SqlClient.SqlBulkCopy" /> con la instancia abierta existente proporcionada de <see cref="T:System.Data.SqlClient.SqlConnection" />. La instancia de <see cref="T:System.Data.SqlClient.SqlBulkCopy" /> se comporta según las opciones proporcionadas en el parámetro <paramref name="copyOptions" />. Si se suministra un valor no nulo <see cref="T:System.Data.SqlClient.SqlTransaction" />, las operaciones de copia se realizarán dentro de esa transacción.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si las opciones incluyen `UseInternalTransaction` y `externalTransaction` argumento no es null, un **InvalidArgumentException** se produce.  
  
 Para obtener ejemplos que muestran cómo usar `SqlBulkCopy` en una transacción, vea [transacciones y operaciones de copia masiva](~/docs/framework/data/adonet/sql/transaction-and-bulk-copy-operations.md).  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/83a7a0d2-8018-4354-97b9-0b1d99f8342b">Realizar operaciones de copia masiva</related>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">Información general sobre ADO.NET</related>
      </Docs>
    </Member>
    <Member MemberName="BatchSize">
      <MemberSignature Language="C#" Value="public int BatchSize { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 BatchSize" />
      <MemberSignature Language="DocId" Value="P:System.Data.SqlClient.SqlBulkCopy.BatchSize" />
      <MemberSignature Language="VB.NET" Value="Public Property BatchSize As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int BatchSize { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.BatchSize : int with get, set" Usage="System.Data.SqlClient.SqlBulkCopy.BatchSize" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.4.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Número de filas de cada lote. Al final de cada lote, las filas del lote se envían al servidor.</summary>
        <value>Valor entero de la propiedad <see cref="P:System.Data.SqlClient.SqlBulkCopy.BatchSize" /> o cero si no se ha establecido ningún valor.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Un lote estará completo cuando <xref:System.Data.SqlClient.SqlBulkCopy.BatchSize%2A> filas se han procesado o no hay más filas para enviar al origen de datos de destino.  
  
 Cero (valor predeterminado) indica que cada <xref:System.Data.SqlClient.SqlBulkCopy.WriteToServer%2A> operación es un único lote.  
  
 Si el <xref:System.Data.SqlClient.SqlBulkCopy> instancia se ha declarado sin el <xref:System.Data.SqlClient.SqlBulkCopyOptions.UseInternalTransaction> opción en la práctica, las filas se envían al servidor <xref:System.Data.SqlClient.SqlBulkCopy.BatchSize%2A> filas en un momento, pero ninguna acción relacionada con la transacción se realiza. Si <xref:System.Data.SqlClient.SqlBulkCopyOptions.UseInternalTransaction> es en efecto, cada lote de filas se inserta como una transacción independiente.  
  
 El <xref:System.Data.SqlClient.SqlBulkCopy.BatchSize%2A> propiedad puede establecerse en cualquier momento. Si una copia masiva ya está en curso, el lote actual se mide según el tamaño del lote anterior. Los lotes posteriores utilizan el nuevo tamaño. Si el <xref:System.Data.SqlClient.SqlBulkCopy.BatchSize%2A> inicialmente es cero y los cambios mientras un <xref:System.Data.SqlClient.SqlBulkCopy.WriteToServer%2A> operación ya está en curso, que la operación de carga los datos como un único lote. Las subsiguientes <xref:System.Data.SqlClient.SqlBulkCopy.WriteToServer%2A> operaciones en el mismo <xref:System.Data.SqlClient.SqlBulkCopy> utilizar la nueva instancia <xref:System.Data.SqlClient.SqlBulkCopy.BatchSize%2A>.  
  
   
  
## Examples  
 La siguiente aplicación de consola muestra cómo cargar datos en lotes de 50 filas de forma masiva. Para un ejemplo que ilustra cómo <xref:System.Data.SqlClient.SqlBulkCopy.BatchSize%2A> funciona con una transacción, consulte [transacciones y operaciones de copia masiva](~/docs/framework/data/adonet/sql/transaction-and-bulk-copy-operations.md).  
  
 En este ejemplo, primero se leen los datos de origen de una tabla de SQL Server para un <xref:System.Data.SqlClient.SqlDataReader> instancia. Los datos de origen no tienen que estar ubicada en SQL Server; Puede usar cualquier origen de datos que se puede leer a una <xref:System.Data.IDataReader> o cargados para un <xref:System.Data.DataTable>.  
  
> [!IMPORTANT]
>  En este ejemplo no se ejecutará a menos que haya creado las tablas de trabajo como se describe en [configuración de ejemplo de copia masiva](~/docs/framework/data/adonet/sql/bulk-copy-example-setup.md). Este código se proporciona para mostrar la sintaxis para usar **SqlBulkCopy** solo. Si las tablas de origen y destino están en la misma instancia de SQL Server, es más fácil y rápido usar Transact-SQL `INSERT … SELECT` instrucción para copiar los datos.  
  
 [!code-csharp[DataWorks SqlBulkCopy.BatchSize#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks SqlBulkCopy.BatchSize/CS/source.cs#1)]
 [!code-vb[DataWorks SqlBulkCopy.BatchSize#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks SqlBulkCopy.BatchSize/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/83a7a0d2-8018-4354-97b9-0b1d99f8342b">Operaciones de copia masiva en SQL Server</related>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">Información general sobre ADO.NET</related>
      </Docs>
    </Member>
    <Member MemberName="BulkCopyTimeout">
      <MemberSignature Language="C#" Value="public int BulkCopyTimeout { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 BulkCopyTimeout" />
      <MemberSignature Language="DocId" Value="P:System.Data.SqlClient.SqlBulkCopy.BulkCopyTimeout" />
      <MemberSignature Language="VB.NET" Value="Public Property BulkCopyTimeout As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int BulkCopyTimeout { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.BulkCopyTimeout : int with get, set" Usage="System.Data.SqlClient.SqlBulkCopy.BulkCopyTimeout" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.4.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Número de segundos para que la operación se complete antes de que se agote el tiempo de espera.</summary>
        <value>El valor entero de la propiedad <see cref="P:System.Data.SqlClient.SqlBulkCopy.BulkCopyTimeout" />. El valor predeterminado es 30 segundos. Un valor de 0 indica sin límite; la copia masiva esperará indefinidamente.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si la operación tiene tiempo de espera, no se confirma la transacción y se quitan todas las filas copiadas de la tabla de destino.  
  
   
  
## Examples  
 La siguiente aplicación de consola muestra cómo modificar el tiempo de espera de 60 segundos de forma masiva al cargar los datos.  
  
 En este ejemplo, primero se leen los datos de origen de una tabla de SQL Server para un <xref:System.Data.SqlClient.SqlDataReader> instancia. Los datos de origen no tienen que estar ubicada en SQL Server; Puede usar cualquier origen de datos que se puede leer a una <xref:System.Data.IDataReader> o cargados para un <xref:System.Data.DataTable>.  
  
> [!IMPORTANT]
>  En este ejemplo no se ejecutará a menos que haya creado las tablas de trabajo como se describe en [configuración de ejemplo de copia masiva](~/docs/framework/data/adonet/sql/bulk-copy-example-setup.md). Este código se proporciona para mostrar la sintaxis para usar **SqlBulkCopy** solo. Si las tablas de origen y destino están en la misma instancia de SQL Server, es más fácil y rápido usar una [!INCLUDE[tsql](~/includes/tsql-md.md)] `INSERT … SELECT` instrucción para copiar los datos.  
  
 [!code-csharp[DataWorks SqlBulkCopy.Timeout#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks SqlBulkCopy.Timeout/CS/source.cs#1)]
 [!code-vb[DataWorks SqlBulkCopy.Timeout#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks SqlBulkCopy.Timeout/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/83a7a0d2-8018-4354-97b9-0b1d99f8342b">Realizar operaciones de copia masiva</related>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">Información general sobre ADO.NET</related>
      </Docs>
    </Member>
    <Member MemberName="Close">
      <MemberSignature Language="C#" Value="public void Close ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Close() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlBulkCopy.Close" />
      <MemberSignature Language="VB.NET" Value="Public Sub Close ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Close();" />
      <MemberSignature Language="F#" Value="member this.Close : unit -&gt; unit" Usage="sqlBulkCopy.Close " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.4.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Cierra la instancia <see cref="T:System.Data.SqlClient.SqlBulkCopy" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Después de llamar a un <xref:System.Data.SqlClient.SqlBulkCopy.Close%2A> en el <xref:System.Data.SqlClient.SqlBulkCopy> de objeto, ninguna otra operación se realizará correctamente. Las llamadas a la <xref:System.Data.SqlClient.SqlBulkCopy.WriteToServer%2A> método producirá una <xref:System.InvalidOperationException>.  
  
 Una llamada a la <xref:System.Data.SqlClient.SqlBulkCopy.Close%2A> método desde el <xref:System.Data.SqlClient.SqlBulkCopy.SqlRowsCopied> evento hace una <xref:System.InvalidOperationException> que se produzca.  
  
 Tenga en cuenta que se abren <xref:System.Data.SqlClient.SqlBulkCopy> instancias se cierran implícitamente al final de un `using` bloque.  
  
   
  
## Examples  
 En el ejemplo siguiente se usa el mismo <xref:System.Data.SqlClient.SqlBulkCopy> instancia para agregar los pedidos de venta y la información asociada a dos tablas de destino. Dado que el **AdventureWorks** son grandes tablas de pedido de ventas, el ejemplo lee sólo los pedidos realizados por un determinado número de cuenta y los pedidos y detalles de la copia de forma masiva para las tablas de destino. El <xref:System.Data.SqlClient.SqlBulkCopy.Close%2A> método se usa solo cuando ambas operaciones de copia masiva se completen.  
  
> [!IMPORTANT]
>  En este ejemplo no se ejecutará a menos que haya creado las tablas de trabajo como se describe en [configuración de ejemplo de copia masiva](~/docs/framework/data/adonet/sql/bulk-copy-example-setup.md). Este código se proporciona para mostrar la sintaxis para usar **SqlBulkCopy** solo. Si las tablas de origen y destino están en la misma instancia de SQL Server, es más fácil y rápido usar Transact-SQL `INSERT … SELECT` instrucción para copiar los datos.  
  
 [!code-csharp[DataWorks SqlBulkCopy.OrdersDetails#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks SqlBulkCopy.OrdersDetails/CS/source.cs#1)]
 [!code-vb[DataWorks SqlBulkCopy.OrdersDetails#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks SqlBulkCopy.OrdersDetails/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/83a7a0d2-8018-4354-97b9-0b1d99f8342b">Realizar operaciones de copia masiva</related>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">Información general sobre ADO.NET</related>
      </Docs>
    </Member>
    <Member MemberName="ColumnMappings">
      <MemberSignature Language="C#" Value="public System.Data.SqlClient.SqlBulkCopyColumnMappingCollection ColumnMappings { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Data.SqlClient.SqlBulkCopyColumnMappingCollection ColumnMappings" />
      <MemberSignature Language="DocId" Value="P:System.Data.SqlClient.SqlBulkCopy.ColumnMappings" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ColumnMappings As SqlBulkCopyColumnMappingCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Data::SqlClient::SqlBulkCopyColumnMappingCollection ^ ColumnMappings { System::Data::SqlClient::SqlBulkCopyColumnMappingCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ColumnMappings : System.Data.SqlClient.SqlBulkCopyColumnMappingCollection" Usage="System.Data.SqlClient.SqlBulkCopy.ColumnMappings" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.4.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.SqlClient.SqlBulkCopyColumnMappingCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><see cref="T:System.Data.SqlClient.SqlBulkCopyColumnMapping" /> devuelve una colección de elementos. Las asignaciones de columnas definen las relaciones entre las columnas del origen de datos y las columnas del destino.</summary>
        <value>Colección de asignaciones de columna. De manera predeterminada, es una colección vacía.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si el origen de datos y la tabla de destino tienen el mismo número de columnas y la posición ordinal de cada columna de origen dentro del origen de datos coincide con la posición ordinal de la columna de destino correspondiente, el <xref:System.Data.SqlClient.SqlBulkCopy.ColumnMappings%2A> colección no es necesario. Sin embargo, si se diferencian los recuentos de columna o las posiciones ordinales no son coherentes, debe usar <xref:System.Data.SqlClient.SqlBulkCopy.ColumnMappings%2A> para asegurarse de que los datos se copian en las columnas correctas.  
  
 Durante la ejecución de una operación de copia masiva, puede tener acceso a esta colección, pero no se puede cambiar. Cualquier intento de cambiarla producirá una <xref:System.InvalidOperationException>.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Data.SqlClient.SqlBulkCopyColumnMapping" />
        <related type="Article" href="https://msdn.microsoft.com/library/83a7a0d2-8018-4354-97b9-0b1d99f8342b">Realizar operaciones de copia masiva</related>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">Información general sobre ADO.NET</related>
      </Docs>
    </Member>
    <Member MemberName="DestinationTableName">
      <MemberSignature Language="C#" Value="public string DestinationTableName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string DestinationTableName" />
      <MemberSignature Language="DocId" Value="P:System.Data.SqlClient.SqlBulkCopy.DestinationTableName" />
      <MemberSignature Language="VB.NET" Value="Public Property DestinationTableName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ DestinationTableName { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.DestinationTableName : string with get, set" Usage="System.Data.SqlClient.SqlBulkCopy.DestinationTableName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.4.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Nombre de la tabla de destino en el servidor.</summary>
        <value>El valor de cadena de la propiedad <see cref="P:System.Data.SqlClient.SqlBulkCopy.DestinationTableName" /> o null si no se ha proporcionado ningún valor.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si <xref:System.Data.SqlClient.SqlBulkCopy.DestinationTableName%2A> no se estableció cuando <xref:System.Data.SqlClient.SqlBulkCopy.WriteToServer%2A> se llama, un <xref:System.ArgumentNullException> se produce.  
  
 Si <xref:System.Data.SqlClient.SqlBulkCopy.DestinationTableName%2A> se ha modificado mientras un <xref:System.Data.SqlClient.SqlBulkCopy.WriteToServer%2A> se está ejecutando la operación, el cambio no afecta a la operación actual. El nuevo <xref:System.Data.SqlClient.SqlBulkCopy.DestinationTableName%2A> valor se utiliza la próxima vez que un <xref:System.Data.SqlClient.SqlBulkCopy.WriteToServer%2A> se llama al método.  
  
 <xref:System.Data.SqlClient.SqlBulkCopy.DestinationTableName%2A> es un nombre de tres partes (`<database>.<owningschema>.<name>`). Puede calificar el nombre de tabla con su base de datos y esquema propietario si elige. Sin embargo, si el nombre de tabla usa un carácter de subrayado ("_") ni caracteres especiales, debe realizar el escape el nombre entre corchetes, como en (`[<database>.<owningschema>.<name_01>]`). Para obtener más información, consulte [identificadores de base de datos](/sql/relational-databases/databases/database-identifiers).  
  
 Puede datos de copia masiva en una tabla temporal con un valor como `tempdb..#table` o `tempdb.<owner>.#table` para el <xref:System.Data.SqlClient.SqlBulkCopy.DestinationTableName%2A> propiedad.  
  
   
  
## Examples  
 La siguiente aplicación de consola muestra cómo cargar masivamente datos mediante una conexión que ya está abierta. La tabla de destino es una tabla en la **AdventureWorks** base de datos.  
  
 En este ejemplo, la conexión en primer lugar se utiliza para leer datos de una tabla de SQL Server a un <xref:System.Data.SqlClient.SqlDataReader> instancia. Los datos de origen no tienen que estar ubicada en SQL Server; Puede usar cualquier origen de datos que se puede leer a una <xref:System.Data.IDataReader> o cargados para un <xref:System.Data.DataTable>.  
  
> [!IMPORTANT]
>  En este ejemplo no se ejecutará a menos que haya creado las tablas de trabajo como se describe en [configuración de ejemplo de copia masiva](~/docs/framework/data/adonet/sql/bulk-copy-example-setup.md). Este código se proporciona para mostrar la sintaxis para usar **SqlBulkCopy** solo. Si las tablas de origen y destino están en la misma instancia de SQL Server, es más fácil y rápido usar Transact-SQL `INSERT … SELECT` instrucción para copiar los datos.  
  
 [!code-csharp[DataWorks SqlBulkCopy.Single#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks SqlBulkCopy.Single/CS/source.cs#1)]
 [!code-vb[DataWorks SqlBulkCopy.Single#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks SqlBulkCopy.Single/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/83a7a0d2-8018-4354-97b9-0b1d99f8342b">Realizar operaciones de copia masiva</related>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">Información general sobre ADO.NET</related>
      </Docs>
    </Member>
    <Member MemberName="EnableStreaming">
      <MemberSignature Language="C#" Value="public bool EnableStreaming { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool EnableStreaming" />
      <MemberSignature Language="DocId" Value="P:System.Data.SqlClient.SqlBulkCopy.EnableStreaming" />
      <MemberSignature Language="VB.NET" Value="Public Property EnableStreaming As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool EnableStreaming { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.EnableStreaming : bool with get, set" Usage="System.Data.SqlClient.SqlBulkCopy.EnableStreaming" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.4.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Habilita o deshabilita un objeto <see cref="T:System.Data.SqlClient.SqlBulkCopy" /> para transmitir datos de un objeto <see cref="T:System.Data.IDataReader" /></summary>
        <value><see langword="true" /> si un objeto <see cref="T:System.Data.SqlClient.SqlBulkCopy" /> puede transmitir datos desde un objeto <see cref="T:System.Data.IDataReader" />; en caso contrario, false. De manera predeterminada, es <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cuando <xref:System.Data.SqlClient.SqlBulkCopy.EnableStreaming%2A> es `true`, <xref:System.Data.SqlClient.SqlBulkCopy> lee un <xref:System.Data.IDataReader> objeto <xref:System.Data.CommandBehavior.SequentialAccess>, optimización del uso de memoria mediante el uso de la <xref:System.Data.IDataReader> funcionalidad de streaming. Cuando se establece en false, el <xref:System.Data.SqlClient.SqlBulkCopy> clase carga todos los datos devueltos por la <xref:System.Data.IDataReader> objeto en la memoria antes de enviarlo a SQL Server o SQL Azure.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="NotifyAfter">
      <MemberSignature Language="C#" Value="public int NotifyAfter { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 NotifyAfter" />
      <MemberSignature Language="DocId" Value="P:System.Data.SqlClient.SqlBulkCopy.NotifyAfter" />
      <MemberSignature Language="VB.NET" Value="Public Property NotifyAfter As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int NotifyAfter { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.NotifyAfter : int with get, set" Usage="System.Data.SqlClient.SqlBulkCopy.NotifyAfter" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.4.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Define el número de filas que se deben procesar antes de generar un evento de notificación.</summary>
        <value>El valor entero de la propiedad <see cref="P:System.Data.SqlClient.SqlBulkCopy.NotifyAfter" /> o cero si la propiedad no se ha establecido.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Esta propiedad está diseñada para los componentes de interfaz de usuario que muestran el progreso de una operación de copia masiva. Indica el número de filas que se va a procesar antes de generar un evento de notificación. El <xref:System.Data.SqlClient.SqlBulkCopy.NotifyAfter%2A> propiedad puede establecerse en cualquier momento, incluso mientras una operación de copia masiva está en curso. Los cambios realizados durante una operación de copia masiva surten efecto después de la siguiente notificación. La nueva configuración se aplica a todas las operaciones siguientes en la misma instancia.  
  
 Si <xref:System.Data.SqlClient.SqlBulkCopy.NotifyAfter%2A> está establecido en un número menor que cero, una <xref:System.ArgumentOutOfRangeException> se produce.  
  
   
  
## Examples  
 La siguiente aplicación de consola muestra cómo cargar masivamente datos mediante una conexión que ya está abierta. El <xref:System.Data.SqlClient.SqlBulkCopy.NotifyAfter%2A> propiedad está establecida para que el controlador de eventos se llama después de cada 50 filas se copian en la tabla.  
  
 En este ejemplo, la conexión en primer lugar se utiliza para leer datos de una tabla de SQL Server a un <xref:System.Data.SqlClient.SqlDataReader> instancia. A continuación, se abre una segunda conexión para los datos de copia masiva. Tenga en cuenta que los datos de origen no tienen que estar ubicada en SQL Server; Puede usar cualquier origen de datos que se puede leer a una <xref:System.Data.IDataReader> o cargados para un <xref:System.Data.DataTable>.  
  
> [!IMPORTANT]
>  En este ejemplo no se ejecutará a menos que haya creado las tablas de trabajo como se describe en [configuración de ejemplo de copia masiva](~/docs/framework/data/adonet/sql/bulk-copy-example-setup.md). Este código se proporciona para mostrar la sintaxis para usar **SqlBulkCopy** solo. Si las tablas de origen y destino están en la misma instancia de SQL Server, es más fácil y rápido usar Transact-SQL `INSERT … SELECT` instrucción para copiar los datos.  
  
 [!code-csharp[DataWorks SqlBulkCopy.NotifyAfter#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks SqlBulkCopy.NotifyAfter/CS/source.cs#1)]
 [!code-vb[DataWorks SqlBulkCopy.NotifyAfter#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks SqlBulkCopy.NotifyAfter/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/83a7a0d2-8018-4354-97b9-0b1d99f8342b">Realizar operaciones de copia masiva</related>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">Información general sobre ADO.NET</related>
      </Docs>
    </Member>
    <Member MemberName="SqlRowsCopied">
      <MemberSignature Language="C#" Value="public event System.Data.SqlClient.SqlRowsCopiedEventHandler SqlRowsCopied;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Data.SqlClient.SqlRowsCopiedEventHandler SqlRowsCopied" />
      <MemberSignature Language="DocId" Value="E:System.Data.SqlClient.SqlBulkCopy.SqlRowsCopied" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event SqlRowsCopied As SqlRowsCopiedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Data::SqlClient::SqlRowsCopiedEventHandler ^ SqlRowsCopied;" />
      <MemberSignature Language="F#" Value="member this.SqlRowsCopied : System.Data.SqlClient.SqlRowsCopiedEventHandler " Usage="member this.SqlRowsCopied : System.Data.SqlClient.SqlRowsCopiedEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.4.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.SqlClient.SqlRowsCopiedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Se produce cada vez que se ha procesado el número de filas especificado por la propiedad <see cref="P:System.Data.SqlClient.SqlBulkCopy.NotifyAfter" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Tenga en cuenta que la configuración de <xref:System.Data.SqlClient.SqlBulkCopy.NotifyAfter%2A> y <xref:System.Data.SqlClient.SqlBulkCopy.BatchSize%2A> son independientes. Recepción de un <xref:System.Data.SqlClient.SqlBulkCopy.SqlRowsCopied> eventos no implican que todas las filas se han enviado al servidor o confirmado.  
  
 No se puede llamar a SqlBulkCopy.Close (<xref:System.Data.SqlClient.SqlBulkCopy.Close%2A>) o SqlConnection.Close (<xref:System.Data.SqlClient.SqlConnection.Close%2A>) de este evento. Al hacerlo, un <xref:System.InvalidOperationException> producida y el <xref:System.Data.SqlClient.SqlBulkCopy> no cambiará el estado de objeto. Si el usuario desea cancelar la operación del evento, el <xref:System.Data.SqlClient.SqlRowsCopiedEventArgs.Abort%2A> propiedad de la <xref:System.Data.SqlClient.SqlRowsCopiedEventArgs> puede utilizarse. (Consulte [transacciones y operaciones de copia masiva](~/docs/framework/data/adonet/sql/transaction-and-bulk-copy-operations.md) para obtener ejemplos que utilizan el <xref:System.Data.SqlClient.SqlRowsCopiedEventArgs.Abort%2A> propiedad.)  
  
 Ninguna acción, como la actividad de transacciones, se admite en la conexión durante la ejecución de la operación de copia masiva y se recomienda no utilizar la misma conexión que se usa durante la <xref:System.Data.SqlClient.SqlBulkCopy.SqlRowsCopied> eventos. Sin embargo, puede abrir una conexión diferente.  
  
   
  
## Examples  
 La siguiente aplicación de consola muestra cómo cargar masivamente datos mediante una conexión que ya está abierta. El <xref:System.Data.SqlClient.SqlBulkCopy.NotifyAfter%2A> propiedad está establecida para que el controlador de eventos se llama después de cada 50 filas se copian en la tabla.  
  
 En este ejemplo, la conexión en primer lugar se utiliza para leer datos de una tabla de SQL Server a un <xref:System.Data.SqlClient.SqlDataReader> instancia. Tenga en cuenta que los datos de origen no tienen que estar ubicada en SQL Server; Puede usar cualquier origen de datos que se puede leer a una <xref:System.Data.IDataReader> o cargados para un <xref:System.Data.DataTable>.  
  
> [!IMPORTANT]
>  En este ejemplo no se ejecutará a menos que haya creado las tablas de trabajo como se describe en [configuración de ejemplo de copia masiva](~/docs/framework/data/adonet/sql/bulk-copy-example-setup.md). Este código se proporciona para mostrar la sintaxis para usar **SqlBulkCopy** solo. Si las tablas de origen y destino están en la misma instancia de SQL Server, es más fácil y rápido usar Transact-SQL `INSERT … SELECT` instrucción para copiar los datos.  
  
 [!code-csharp[DataWorks SqlBulkCopy.NotifyAfter#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks SqlBulkCopy.NotifyAfter/CS/source.cs#1)]
 [!code-vb[DataWorks SqlBulkCopy.NotifyAfter#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks SqlBulkCopy.NotifyAfter/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/83a7a0d2-8018-4354-97b9-0b1d99f8342b">Realizar operaciones de copia masiva</related>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">Información general sobre ADO.NET</related>
      </Docs>
    </Member>
    <Member MemberName="System.IDisposable.Dispose">
      <MemberSignature Language="C#" Value="void IDisposable.Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.IDisposable.Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlBulkCopy.System#IDisposable#Dispose" />
      <MemberSignature Language="VB.NET" Value="Sub Dispose () Implements IDisposable.Dispose" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.IDisposable.Dispose() = IDisposable::Dispose;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.4.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Libera todos los recursos usados por la instancia actual de la clase <see cref="T:System.Data.SqlClient.SqlBulkCopy" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Llame a `Dispose` cuando haya terminado de usar <xref:System.Data.SqlClient.SqlBulkCopy>. El método `Dispose` deja el <xref:System.Data.SqlClient.SqlBulkCopy> en un estado no utilizable. Después de llamar a `Dispose`, debe liberar todas las referencias a la <xref:System.Data.SqlClient.SqlBulkCopy> por lo que el recolector de elementos no utilizados pueda reclamar la memoria que el <xref:System.Data.SqlClient.SqlBulkCopy> estaba ocupando.  
  
 Para obtener más información, consulte [limpiar recursos no administrados](~/docs/standard/garbage-collection/unmanaged.md) y [implementar un método Dispose](~/docs/standard/garbage-collection/implementing-dispose.md).  
  
> [!NOTE]
>  Realice siempre una llamada a `Dispose` antes de liberar la última referencia al objeto <xref:System.Data.SqlClient.SqlBulkCopy>. En caso contrario, los recursos que está usando no se liberarán hasta que el recolector de elementos no utilizados llame al método <xref:System.Data.SqlClient.SqlBulkCopy> del objeto `Finalize`.  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">Información general sobre ADO.NET</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="WriteToServer">
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Copia todas las filas de un origen de datos a una tabla de destino especificada por la propiedad <see cref="P:System.Data.SqlClient.SqlBulkCopy.DestinationTableName" /> del objeto <see cref="T:System.Data.SqlClient.SqlBulkCopy" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si los conjuntos de resultados activos múltiples (MARS) está deshabilitado, <xref:System.Data.SqlClient.SqlBulkCopy.WriteToServer%2A> hace que la conexión esté ocupada. Si MARS está habilitado, puede intercalar las llamadas a <xref:System.Data.SqlClient.SqlBulkCopy.WriteToServer%2A> con otros comandos en la misma conexión.  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/83a7a0d2-8018-4354-97b9-0b1d99f8342b">Realizar operaciones de copia masiva</related>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">Información general sobre ADO.NET</related>
      </Docs>
    </MemberGroup>
    <Member MemberName="WriteToServer">
      <MemberSignature Language="C#" Value="public void WriteToServer (System.Data.Common.DbDataReader reader);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteToServer(class System.Data.Common.DbDataReader reader) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.Common.DbDataReader)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteToServer (reader As DbDataReader)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteToServer(System::Data::Common::DbDataReader ^ reader);" />
      <MemberSignature Language="F#" Value="member this.WriteToServer : System.Data.Common.DbDataReader -&gt; unit" Usage="sqlBulkCopy.WriteToServer reader" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.4.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reader" Type="System.Data.Common.DbDataReader" />
      </Parameters>
      <Docs>
        <param name="reader"><see cref="T:System.Data.Common.DbDataReader" /> cuyas filas se copiarán en la tabla de destino.</param>
        <summary>Copia todas las filas de la matriz <see cref="T:System.Data.Common.DbDataReader" /> proporcionada a una tabla de destino especificada por la propiedad <see cref="P:System.Data.SqlClient.SqlBulkCopy.DestinationTableName" /> del objeto <see cref="T:System.Data.SqlClient.SqlBulkCopy" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WriteToServer">
      <MemberSignature Language="C#" Value="public void WriteToServer (System.Data.DataRow[] rows);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteToServer(class System.Data.DataRow[] rows) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.DataRow[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteToServer (rows As DataRow())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteToServer(cli::array &lt;System::Data::DataRow ^&gt; ^ rows);" />
      <MemberSignature Language="F#" Value="member this.WriteToServer : System.Data.DataRow[] -&gt; unit" Usage="sqlBulkCopy.WriteToServer rows" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.4.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rows" Type="System.Data.DataRow[]" />
      </Parameters>
      <Docs>
        <param name="rows">Matriz de objetos <see cref="T:System.Data.DataRow" /> que se copiará en la tabla de destino.</param>
        <summary>Copia todas las filas de la matriz <see cref="T:System.Data.DataRow" /> proporcionada a una tabla de destino especificada por la propiedad <see cref="P:System.Data.SqlClient.SqlBulkCopy.DestinationTableName" /> del objeto <see cref="T:System.Data.SqlClient.SqlBulkCopy" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Mientras la operación de copia masiva está en curso, el destino asociado <xref:System.Data.SqlClient.SqlConnection> es servirla ocupado y ninguna otra operación puede realizarse en la conexión.  
  
 El <xref:System.Data.SqlClient.SqlBulkCopy.ColumnMappings%2A> colección se asigna desde el <xref:System.Data.DataRow> columnas a la tabla de base de datos de destino.  
  
   
  
## Examples  
 La siguiente aplicación de consola muestra cómo carga masiva de datos desde un <xref:System.Data.DataRow> matriz. La tabla de destino es una tabla en la **AdventureWorks** base de datos.  
  
 En este ejemplo, un <xref:System.Data.DataTable> se crea en tiempo de ejecución. Se selecciona una única fila de la <xref:System.Data.DataTable> para copiar en la tabla de destino.  
  
> [!IMPORTANT]
>  En este ejemplo no se ejecutará a menos que haya creado las tablas de trabajo como se describe en [configuración de ejemplo de copia masiva](~/docs/framework/data/adonet/sql/bulk-copy-example-setup.md). Este código se proporciona para mostrar la sintaxis para usar **SqlBulkCopy** solo. Si las tablas de origen y destino están en la misma instancia de SQL Server, es más fácil y rápido usar Transact-SQL `INSERT … SELECT` instrucción para copiar los datos.  
  
 [!code-csharp[DataWorks SqlBulkCopy.RowArray#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks SqlBulkCopy.RowArray/CS/source.cs#1)]
 [!code-vb[DataWorks SqlBulkCopy.RowArray#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks SqlBulkCopy.RowArray/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/83a7a0d2-8018-4354-97b9-0b1d99f8342b">Realizar operaciones de copia masiva</related>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">Información general sobre ADO.NET</related>
      </Docs>
    </Member>
    <Member MemberName="WriteToServer">
      <MemberSignature Language="C#" Value="public void WriteToServer (System.Data.DataTable table);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteToServer(class System.Data.DataTable table) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.DataTable)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteToServer (table As DataTable)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteToServer(System::Data::DataTable ^ table);" />
      <MemberSignature Language="F#" Value="member this.WriteToServer : System.Data.DataTable -&gt; unit" Usage="sqlBulkCopy.WriteToServer table" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.4.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="table" Type="System.Data.DataTable" />
      </Parameters>
      <Docs>
        <param name="table"><see cref="T:System.Data.DataTable" /> cuyas filas se copiarán en la tabla de destino.</param>
        <summary>Copia todas las filas del <see cref="T:System.Data.DataTable" /> suministrado a una tabla de destino especificada por la propiedad <see cref="P:System.Data.SqlClient.SqlBulkCopy.DestinationTableName" /> del objeto <see cref="T:System.Data.SqlClient.SqlBulkCopy" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Todas las filas de la <xref:System.Data.DataTable> se copian en la tabla de destino, excepto las que se han eliminado.  
  
 Mientras la operación de copia masiva está en curso, el destino asociado <xref:System.Data.SqlClient.SqlConnection> es servirla ocupado y ninguna otra operación puede realizarse en la conexión.  
  
 El <xref:System.Data.SqlClient.SqlBulkCopy.ColumnMappings%2A> colección se asigna desde el <xref:System.Data.DataTable> columnas a la tabla de base de datos de destino.  
  
   
  
## Examples  
 La siguiente aplicación de consola muestra cómo carga masiva de datos desde un <xref:System.Data.DataTable>. La tabla de destino es una tabla en la **AdventureWorks** base de datos.  
  
 En este ejemplo, un <xref:System.Data.DataTable> se crea en tiempo de ejecución y es el origen de la `SqlBulkCopy` operación.  
  
> [!IMPORTANT]
>  En este ejemplo no se ejecutará a menos que haya creado las tablas de trabajo como se describe en [configuración de ejemplo de copia masiva](~/docs/framework/data/adonet/sql/bulk-copy-example-setup.md). Este código se proporciona para mostrar la sintaxis para usar **SqlBulkCopy** solo. Si las tablas de origen y destino están en la misma instancia de SQL Server, es más fácil y rápido usar Transact-SQL `INSERT … SELECT` instrucción para copiar los datos.  
  
 [!code-csharp[DataWorks SqlBulkCopy.DataTable#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks SqlBulkCopy.DataTable/CS/source.cs#1)]
 [!code-vb[DataWorks SqlBulkCopy.DataTable#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks SqlBulkCopy.DataTable/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/83a7a0d2-8018-4354-97b9-0b1d99f8342b">Realizar operaciones de copia masiva</related>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">Información general sobre ADO.NET</related>
      </Docs>
    </Member>
    <Member MemberName="WriteToServer">
      <MemberSignature Language="C#" Value="public void WriteToServer (System.Data.IDataReader reader);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteToServer(class System.Data.IDataReader reader) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.IDataReader)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteToServer (reader As IDataReader)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteToServer(System::Data::IDataReader ^ reader);" />
      <MemberSignature Language="F#" Value="member this.WriteToServer : System.Data.IDataReader -&gt; unit" Usage="sqlBulkCopy.WriteToServer reader" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.4.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reader" Type="System.Data.IDataReader" />
      </Parameters>
      <Docs>
        <param name="reader"><see cref="T:System.Data.IDataReader" /> cuyas filas se copiarán en la tabla de destino.</param>
        <summary>Copia todas las filas del <see cref="T:System.Data.IDataReader" /> suministrado a una tabla de destino especificada por la propiedad <see cref="P:System.Data.SqlClient.SqlBulkCopy.DestinationTableName" /> del objeto <see cref="T:System.Data.SqlClient.SqlBulkCopy" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Se inicia la operación de copia en la siguiente fila disponible en el lector. La mayoría de los casos, el lector solo devolvió <xref:System.Data.IDbCommand.ExecuteReader%2A> o una llamada similar, por lo que la próxima fila disponible es la primera fila. Para procesar varios resultados, llame a <xref:System.Data.IDataReader.NextResult%2A> en el lector de datos y llamar a <xref:System.Data.SqlClient.SqlBulkCopy.WriteToServer%2A> nuevo.  
  
 Tenga en cuenta que el uso <xref:System.Data.SqlClient.SqlBulkCopy.WriteToServer%2A> modifica el estado del lector. El método se llamará <xref:System.Data.IDataReader.Read%2A> hasta que devuelve false, se anula la operación o se produce un error. Esto significa que el lector de datos estará en un estado diferente, probablemente al final del conjunto de resultados, cuando el <xref:System.Data.SqlClient.SqlBulkCopy.WriteToServer%2A> completada la operación.  
  
 Mientras la operación de copia masiva está en curso, el destino asociado <xref:System.Data.SqlClient.SqlConnection> es servirla ocupado y ninguna otra operación puede realizarse en la conexión.  
  
 El <xref:System.Data.SqlClient.SqlBulkCopy.ColumnMappings%2A> colección asigna de los datos de las columnas de lector a la tabla de base de datos de destino.  
  
   
  
## Examples  
 La siguiente aplicación de consola muestra cómo carga masiva de datos desde un <xref:System.Data.SqlClient.SqlDataReader>. La tabla de destino es una tabla en la **AdventureWorks** base de datos.  
  
> [!IMPORTANT]
>  En este ejemplo no se ejecutará a menos que haya creado las tablas de trabajo como se describe en [configuración de ejemplo de copia masiva](~/docs/framework/data/adonet/sql/bulk-copy-example-setup.md). Este código se proporciona para mostrar la sintaxis para usar **SqlBulkCopy** solo. Si las tablas de origen y destino están en la misma instancia de SQL Server, es más fácil y rápido usar Transact-SQL `INSERT … SELECT` instrucción para copiar los datos.  
  
 [!code-csharp[DataWorks SqlBulkCopy.ConnectionString#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks SqlBulkCopy.ConnectionString/CS/source.cs#1)]
 [!code-vb[DataWorks SqlBulkCopy.ConnectionString#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks SqlBulkCopy.ConnectionString/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/83a7a0d2-8018-4354-97b9-0b1d99f8342b">Realizar operaciones de copia masiva</related>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">Información general sobre ADO.NET</related>
      </Docs>
    </Member>
    <Member MemberName="WriteToServer">
      <MemberSignature Language="C#" Value="public void WriteToServer (System.Data.DataTable table, System.Data.DataRowState rowState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteToServer(class System.Data.DataTable table, valuetype System.Data.DataRowState rowState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.DataTable,System.Data.DataRowState)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteToServer (table As DataTable, rowState As DataRowState)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteToServer(System::Data::DataTable ^ table, System::Data::DataRowState rowState);" />
      <MemberSignature Language="F#" Value="member this.WriteToServer : System.Data.DataTable * System.Data.DataRowState -&gt; unit" Usage="sqlBulkCopy.WriteToServer (table, rowState)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.4.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="table" Type="System.Data.DataTable" />
        <Parameter Name="rowState" Type="System.Data.DataRowState" />
      </Parameters>
      <Docs>
        <param name="table"><see cref="T:System.Data.DataTable" /> cuyas filas se copiarán en la tabla de destino.</param>
        <param name="rowState">Un valor de la enumeración <see cref="T:System.Data.DataRowState" />. Solo se copian en el destino las filas que coinciden con el estado de la fila.</param>
        <summary>Copia sólo las filas que coinciden con el estado de fila proporcionado en la <see cref="T:System.Data.DataTable" /> proporcionada a una tabla de destino especificada por la propiedad <see cref="P:System.Data.SqlClient.SqlBulkCopy.DestinationTableName" /> del objeto <see cref="T:System.Data.SqlClient.SqlBulkCopy" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Solo las filas de la <xref:System.Data.DataTable> que se encuentran en los Estados que se indica en la `rowState` argumento y no se han eliminado se copian en la tabla de destino.  
  
> [!NOTE]
>  Si <xref:System.Data.DataRowState.Deleted> se especifica, cualquier <xref:System.Data.DataRowState.Unchanged>, <xref:System.Data.DataRowState.Added>, y <xref:System.Data.DataRowState.Modified> filas también se copiarán en el servidor. No se generará ninguna excepción.  
  
 Mientras la operación de copia masiva está en curso, el destino asociado <xref:System.Data.SqlClient.SqlConnection> es servirla ocupado y ninguna otra operación puede realizarse en la conexión.  
  
 El <xref:System.Data.SqlClient.SqlBulkCopy.ColumnMappings%2A> colección se asigna desde el <xref:System.Data.DataTable> columnas a la tabla de base de datos de destino.  
  
   
  
## Examples  
 La siguiente aplicación de consola muestra cómo masiva cargar solo las filas en un <xref:System.Data.DataTable> que coinciden con un estado especificado. En este caso, se agregan solo las filas sin cambios. La tabla de destino es una tabla en la **AdventureWorks** base de datos.  
  
 En este ejemplo, un <xref:System.Data.DataTable> se crea en tiempo de ejecución y tres filas se agregan a él. Antes de la <xref:System.Data.SqlClient.SqlBulkCopy.WriteToServer%2A> se ejecuta el método, una de las filas se edita. El <xref:System.Data.SqlClient.SqlBulkCopy.WriteToServer%2A> se llama al método con un `DataRowState.Unchanged` `rowState` argumento, por lo que solo las dos filas sin modificar son el destino de copia masiva.  
  
> [!IMPORTANT]
>  En este ejemplo no se ejecutará a menos que haya creado las tablas de trabajo como se describe en [configuración de ejemplo de copia masiva](~/docs/framework/data/adonet/sql/bulk-copy-example-setup.md). Este código se proporciona para mostrar la sintaxis para usar **SqlBulkCopy** solo. Si las tablas de origen y destino están en la misma instancia de SQL Server, es más fácil y rápido usar Transact-SQL `INSERT … SELECT` instrucción para copiar los datos.  
  
 [!code-csharp[DataWorks SqlBulkCopy.DataRowState#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks SqlBulkCopy.DataRowState/CS/source.cs#1)]
 [!code-vb[DataWorks SqlBulkCopy.DataRowState#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks SqlBulkCopy.DataRowState/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Data.DataRowState" />
        <related type="Article" href="https://msdn.microsoft.com/library/83a7a0d2-8018-4354-97b9-0b1d99f8342b">Realizar operaciones de copia masiva</related>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">Información general sobre ADO.NET</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="WriteToServerAsync">
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Versión asincrónica de <see cref="Overload:System.Data.SqlClient.SqlBulkCopy.WriteToServer" /> que copia todas las filas de un origen de datos en la tabla de destino especificada por la propiedad <see cref="P:System.Data.SqlClient.SqlBulkCopy.DestinationTableName" /> del objeto <see cref="T:System.Data.SqlClient.SqlBulkCopy" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si los conjuntos de resultados activos múltiples (MARS) está deshabilitado, <xref:System.Data.SqlClient.SqlBulkCopy.WriteToServer%2A> hace que la conexión esté ocupada. Si MARS está habilitado, puede intercalar las llamadas a <xref:System.Data.SqlClient.SqlBulkCopy.WriteToServer%2A> con otros comandos en la misma conexión.  
  
 El número de filas que se revierten cuando se produce un error depende de varios aspectos:  
  
-   Si <xref:System.Data.SqlClient.SqlBulkCopyOptions.UseInternalTransaction> se especifica.  
  
-   Si tiene su propia transacción.  
  
-   El valor de <xref:System.Data.SqlClient.SqlBulkCopy.BatchSize%2A>.  
  
 Cuando se produce un error al enviar datos al servidor, el lote actual (tal y como especifica <xref:System.Data.SqlClient.SqlBulkCopy.BatchSize%2A>) se revertirá. Si <xref:System.Data.SqlClient.SqlBulkCopyOptions.UseInternalTransaction> no se ha especificado y tiene su propia transacción, toda la transacción se revertirá (que incluye todos los lotes anteriores).  
  
 Use <xref:System.Data.SqlClient.SqlBulkCopy.SqlRowsCopied> saber cuántas filas se copiaron en el servidor.  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="WriteToServerAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task WriteToServerAsync (System.Data.Common.DbDataReader reader);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task WriteToServerAsync(class System.Data.Common.DbDataReader reader) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.Common.DbDataReader)" />
      <MemberSignature Language="VB.NET" Value="Public Function WriteToServerAsync (reader As DbDataReader) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task ^ WriteToServerAsync(System::Data::Common::DbDataReader ^ reader);" />
      <MemberSignature Language="F#" Value="member this.WriteToServerAsync : System.Data.Common.DbDataReader -&gt; System.Threading.Tasks.Task" Usage="sqlBulkCopy.WriteToServerAsync reader" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.4.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reader" Type="System.Data.Common.DbDataReader" />
      </Parameters>
      <Docs>
        <param name="reader"><see cref="T:System.Data.Common.DbDataReader" /> cuyas filas se copiarán en la tabla de destino.</param>
        <summary>Versión asincrónica de <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.Common.DbDataReader)" />, que copia todas las filas de la matriz <see cref="T:System.Data.Common.DbDataReader" /> suministrada en una tabla de destino especificada por la propiedad <see cref="P:System.Data.SqlClient.SqlBulkCopy.DestinationTableName" /> del objeto <see cref="T:System.Data.SqlClient.SqlBulkCopy" />.</summary>
        <returns>Tarea que representa la operación asincrónica.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WriteToServerAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task WriteToServerAsync (System.Data.DataRow[] rows);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task WriteToServerAsync(class System.Data.DataRow[] rows) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataRow[])" />
      <MemberSignature Language="VB.NET" Value="Public Function WriteToServerAsync (rows As DataRow()) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task ^ WriteToServerAsync(cli::array &lt;System::Data::DataRow ^&gt; ^ rows);" />
      <MemberSignature Language="F#" Value="member this.WriteToServerAsync : System.Data.DataRow[] -&gt; System.Threading.Tasks.Task" Usage="sqlBulkCopy.WriteToServerAsync rows" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.4.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rows" Type="System.Data.DataRow[]" />
      </Parameters>
      <Docs>
        <param name="rows">Matriz de objetos <see cref="T:System.Data.DataRow" /> que se copiará en la tabla de destino.</param>
        <summary>Versión asincrónica de <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.DataRow[])" />, que copia todas las filas de la matriz <see cref="T:System.Data.DataRow" /> suministrada en una tabla de destino especificada por la propiedad <see cref="P:System.Data.SqlClient.SqlBulkCopy.DestinationTableName" /> del objeto <see cref="T:System.Data.SqlClient.SqlBulkCopy" />.</summary>
        <returns>Tarea que representa la operación asincrónica.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Para obtener más información sobre la programación asincrónica en el proveedor de datos de .NET Framework para SQL Server, vea [programación asincrónica](~/docs/framework/data/adonet/asynchronous-programming.md).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Llamada a <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataRow[])" /> varias veces para la misma instancia antes de la finalización de la tarea.  
  
Llamada a <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataRow[])" /> y <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.DataRow[])" /> varias veces para la misma instancia antes de la finalización de la tarea.  
  
La conexión se interrumpe o se cierra durante la ejecución de <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataRow[])" />.  
  
Devuelto en el objeto de tarea, el objeto <see cref="T:System.Data.SqlClient.SqlBulkCopy" /> se cerró durante la ejecución del método.  
  
Devuelto en el objeto de tarea, hubo un tiempo de espera de agrupación de conexiones.  
  
Devuelto en el objeto de tarea, el objeto <see cref="T:System.Data.SqlClient.SqlConnection" /> se cerró antes de la ejecución del método.  
  
 <see langword="Context Connection=true" /> se especifica en la cadena de conexión.</exception>
        <exception cref="T:System.Data.SqlClient.SqlException">Devuelto en el objeto de tarea, cualquier error devuelto por SQL Server que se produjo al abrir la conexión.</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteToServerAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task WriteToServerAsync (System.Data.DataTable table);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task WriteToServerAsync(class System.Data.DataTable table) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataTable)" />
      <MemberSignature Language="VB.NET" Value="Public Function WriteToServerAsync (table As DataTable) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task ^ WriteToServerAsync(System::Data::DataTable ^ table);" />
      <MemberSignature Language="F#" Value="member this.WriteToServerAsync : System.Data.DataTable -&gt; System.Threading.Tasks.Task" Usage="sqlBulkCopy.WriteToServerAsync table" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.4.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="table" Type="System.Data.DataTable" />
      </Parameters>
      <Docs>
        <param name="table"><see cref="T:System.Data.DataTable" /> cuyas filas se copiarán en la tabla de destino.</param>
        <summary>Versión asincrónica de <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.DataTable)" />, que copia todas las filas del <see cref="T:System.Data.DataTable" /> suministrado en una tabla de destino especificada por la propiedad <see cref="P:System.Data.SqlClient.SqlBulkCopy.DestinationTableName" /> del objeto <see cref="T:System.Data.SqlClient.SqlBulkCopy" />.</summary>
        <returns>Tarea que representa la operación asincrónica.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Para obtener más información sobre la programación asincrónica en el proveedor de datos de .NET Framework para SQL Server, vea [programación asincrónica](~/docs/framework/data/adonet/asynchronous-programming.md).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Llamada a <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataTable)" /> varias veces para la misma instancia antes de la finalización de la tarea.  
  
Llamada a <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataTable)" /> y <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.DataTable)" /> varias veces para la misma instancia antes de la finalización de la tarea.  
  
La conexión se interrumpe o se cierra durante la ejecución de <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataTable)" />.  
  
Devuelto en el objeto de tarea, el objeto <see cref="T:System.Data.SqlClient.SqlBulkCopy" /> se cerró durante la ejecución del método.  
  
Devuelto en el objeto de tarea, hubo un tiempo de espera de agrupación de conexiones.  
  
Devuelto en el objeto de tarea, el objeto <see cref="T:System.Data.SqlClient.SqlConnection" /> se cerró antes de la ejecución del método.  
  
 <see langword="Context Connection=true" /> se especifica en la cadena de conexión.</exception>
        <exception cref="T:System.Data.SqlClient.SqlException">Devuelto en el objeto de tarea, cualquier error devuelto por SQL Server que se produjo al abrir la conexión.</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteToServerAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task WriteToServerAsync (System.Data.IDataReader reader);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task WriteToServerAsync(class System.Data.IDataReader reader) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.IDataReader)" />
      <MemberSignature Language="VB.NET" Value="Public Function WriteToServerAsync (reader As IDataReader) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task ^ WriteToServerAsync(System::Data::IDataReader ^ reader);" />
      <MemberSignature Language="F#" Value="member this.WriteToServerAsync : System.Data.IDataReader -&gt; System.Threading.Tasks.Task" Usage="sqlBulkCopy.WriteToServerAsync reader" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.4.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reader" Type="System.Data.IDataReader" />
      </Parameters>
      <Docs>
        <param name="reader"><see cref="T:System.Data.IDataReader" /> cuyas filas se copiarán en la tabla de destino.</param>
        <summary>Versión asincrónica de <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.IDataReader)" />, que copia todas las filas del <see cref="T:System.Data.IDataReader" /> suministrado en una tabla de destino especificada por la propiedad <see cref="P:System.Data.SqlClient.SqlBulkCopy.DestinationTableName" /> del objeto <see cref="T:System.Data.SqlClient.SqlBulkCopy" />.</summary>
        <returns>Tarea que representa la operación asincrónica.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Para obtener más información sobre la programación asincrónica en el proveedor de datos de .NET Framework para SQL Server, vea [programación asincrónica](~/docs/framework/data/adonet/asynchronous-programming.md).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Llamada a <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.IDataReader)" /> varias veces para la misma instancia antes de la finalización de la tarea.  
  
Llamada a <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.IDataReader)" /> y <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.IDataReader)" /> varias veces para la misma instancia antes de la finalización de la tarea.  
  
La conexión se interrumpe o se cierra durante la ejecución de <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.IDataReader)" />.  
  
Devuelto en el objeto de tarea, el objeto <see cref="T:System.Data.SqlClient.SqlBulkCopy" /> se cerró durante la ejecución del método.  
  
Devuelto en el objeto de tarea, hubo un tiempo de espera de agrupación de conexiones.  
  
Devuelto en el objeto de tarea, el objeto <see cref="T:System.Data.SqlClient.SqlConnection" /> se cerró antes de la ejecución del método.  
  
El <see cref="T:System.Data.IDataReader" /> se cerró antes de que se devolviese el <see cref="T:System.Threading.Tasks.Task" /> completado.  
  
La conexión asociada de <see cref="T:System.Data.IDataReader" /> se cerró antes de devolverse el <see cref="T:System.Threading.Tasks.Task" /> completado.  
  
 <see langword="Context Connection=true" /> se especifica en la cadena de conexión.</exception>
        <exception cref="T:System.Data.SqlClient.SqlException">Devuelto en el objeto de tarea, cualquier error devuelto por SQL Server que se produjo al abrir la conexión.</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteToServerAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task WriteToServerAsync (System.Data.Common.DbDataReader reader, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task WriteToServerAsync(class System.Data.Common.DbDataReader reader, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.Common.DbDataReader,System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task ^ WriteToServerAsync(System::Data::Common::DbDataReader ^ reader, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="member this.WriteToServerAsync : System.Data.Common.DbDataReader * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="sqlBulkCopy.WriteToServerAsync (reader, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.4.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reader" Type="System.Data.Common.DbDataReader" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="reader"><see cref="T:System.Data.Common.DbDataReader" /> cuyas filas se copiarán en la tabla de destino.</param>
        <param name="cancellationToken">Instrucción de cancelación. Un valor de <see cref="P:System.Threading.CancellationToken.None" /> de este parámetro hace que este método sea equivalente a <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.Common.DbDataReader)" />.</param>
        <summary>Versión asincrónica de <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.Common.DbDataReader)" />, que copia todas las filas de la matriz <see cref="T:System.Data.Common.DbDataReader" /> suministrada en una tabla de destino especificada por la propiedad <see cref="P:System.Data.SqlClient.SqlBulkCopy.DestinationTableName" /> del objeto <see cref="T:System.Data.SqlClient.SqlBulkCopy" />.</summary>
        <returns>Devuelva <see cref="T:System.Threading.Tasks.Task" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WriteToServerAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task WriteToServerAsync (System.Data.DataRow[] rows, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task WriteToServerAsync(class System.Data.DataRow[] rows, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataRow[],System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task ^ WriteToServerAsync(cli::array &lt;System::Data::DataRow ^&gt; ^ rows, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="member this.WriteToServerAsync : System.Data.DataRow[] * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="sqlBulkCopy.WriteToServerAsync (rows, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.4.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rows" Type="System.Data.DataRow[]" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="rows">Matriz de objetos <see cref="T:System.Data.DataRow" /> que se copiará en la tabla de destino.</param>
        <param name="cancellationToken">Instrucción de cancelación. Un valor de <see cref="P:System.Threading.CancellationToken.None" /> de este parámetro hace que este método sea equivalente a <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataTable)" />.</param>
        <summary>Versión asincrónica de <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.DataRow[])" />, que copia todas las filas de la matriz <see cref="T:System.Data.DataRow" /> suministrada en una tabla de destino especificada por la propiedad <see cref="P:System.Data.SqlClient.SqlBulkCopy.DestinationTableName" /> del objeto <see cref="T:System.Data.SqlClient.SqlBulkCopy" />.  
  
Token de cancelación que se puede usar para solicitar que se abandone la operación antes de que transcurra el tiempo de espera del comando.  Las excepciones se mostrarán a través del objeto de tarea devuelto.</summary>
        <returns>Tarea que representa la operación asincrónica.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Para obtener más información sobre la programación asincrónica en el proveedor de datos de .NET Framework para SQL Server, vea [programación asincrónica](~/docs/framework/data/adonet/asynchronous-programming.md).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Llamada a <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataRow[])" /> varias veces para la misma instancia antes de la finalización de la tarea.  
  
Llamada a <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataRow[])" /> y <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.DataRow[])" /> varias veces para la misma instancia antes de la finalización de la tarea.  
  
La conexión se interrumpe o se cierra durante la ejecución de <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataRow[])" />.  
  
Devuelto en el objeto de tarea, el objeto <see cref="T:System.Data.SqlClient.SqlBulkCopy" /> se cerró durante la ejecución del método.  
  
Devuelto en el objeto de tarea, hubo un tiempo de espera de agrupación de conexiones.  
  
Devuelto en el objeto de tarea, el objeto <see cref="T:System.Data.SqlClient.SqlConnection" /> se cerró antes de la ejecución del método.  
  
 <see langword="Context Connection=true" /> se especifica en la cadena de conexión.</exception>
        <exception cref="T:System.Data.SqlClient.SqlException">Devuelto en el objeto de tarea, cualquier error devuelto por SQL Server que se produjo al abrir la conexión.</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteToServerAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task WriteToServerAsync (System.Data.DataTable table, System.Data.DataRowState rowState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task WriteToServerAsync(class System.Data.DataTable table, valuetype System.Data.DataRowState rowState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataTable,System.Data.DataRowState)" />
      <MemberSignature Language="VB.NET" Value="Public Function WriteToServerAsync (table As DataTable, rowState As DataRowState) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task ^ WriteToServerAsync(System::Data::DataTable ^ table, System::Data::DataRowState rowState);" />
      <MemberSignature Language="F#" Value="member this.WriteToServerAsync : System.Data.DataTable * System.Data.DataRowState -&gt; System.Threading.Tasks.Task" Usage="sqlBulkCopy.WriteToServerAsync (table, rowState)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.4.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="table" Type="System.Data.DataTable" />
        <Parameter Name="rowState" Type="System.Data.DataRowState" />
      </Parameters>
      <Docs>
        <param name="table"><see cref="T:System.Data.DataTable" /> cuyas filas se copiarán en la tabla de destino.</param>
        <param name="rowState">Un valor de la enumeración <see cref="T:System.Data.DataRowState" />. Solo se copian en el destino las filas que coinciden con el estado de la fila.</param>
        <summary>La versión asincrónica de <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.DataTable,System.Data.DataRowState)" />, que copia únicamente las filas que coinciden con el estado de fila proporcionado en el <see cref="T:System.Data.DataTable" /> suministrado en una tabla de destino especificada por la propiedad <see cref="P:System.Data.SqlClient.SqlBulkCopy.DestinationTableName" /> del objeto <see cref="T:System.Data.SqlClient.SqlBulkCopy" />.</summary>
        <returns>Tarea que representa la operación asincrónica.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Para obtener más información sobre la programación asincrónica en el proveedor de datos de .NET Framework para SQL Server, vea [programación asincrónica](~/docs/framework/data/adonet/asynchronous-programming.md).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Llamada a <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataTable,System.Data.DataRowState)" /> varias veces para la misma instancia antes de la finalización de la tarea.  
  
Llamada a <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataTable,System.Data.DataRowState)" /> y <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.DataTable,System.Data.DataRowState)" /> varias veces para la misma instancia antes de la finalización de la tarea.  
  
La conexión se interrumpe o se cierra durante la ejecución de <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataTable,System.Data.DataRowState)" />.  
  
Devuelto en el objeto de tarea, el objeto <see cref="T:System.Data.SqlClient.SqlBulkCopy" /> se cerró durante la ejecución del método.  
  
Devuelto en el objeto de tarea, hubo un tiempo de espera de agrupación de conexiones.  
  
Devuelto en el objeto de tarea, el objeto <see cref="T:System.Data.SqlClient.SqlConnection" /> se cerró antes de la ejecución del método.  
  
 <see langword="Context Connection=true" /> se especifica en la cadena de conexión.</exception>
        <exception cref="T:System.Data.SqlClient.SqlException">Devuelto en el objeto de tarea, cualquier error devuelto por SQL Server que se produjo al abrir la conexión.</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteToServerAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task WriteToServerAsync (System.Data.DataTable table, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task WriteToServerAsync(class System.Data.DataTable table, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataTable,System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task ^ WriteToServerAsync(System::Data::DataTable ^ table, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="member this.WriteToServerAsync : System.Data.DataTable * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="sqlBulkCopy.WriteToServerAsync (table, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.4.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="table" Type="System.Data.DataTable" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="table"><see cref="T:System.Data.DataTable" /> cuyas filas se copiarán en la tabla de destino.</param>
        <param name="cancellationToken">Instrucción de cancelación. Un valor de <see cref="P:System.Threading.CancellationToken.None" /> de este parámetro hace que este método sea equivalente a <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataTable)" />.</param>
        <summary>Versión asincrónica de <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.DataTable)" />, que copia todas las filas del <see cref="T:System.Data.DataTable" /> suministrado en una tabla de destino especificada por la propiedad <see cref="P:System.Data.SqlClient.SqlBulkCopy.DestinationTableName" /> del objeto <see cref="T:System.Data.SqlClient.SqlBulkCopy" />.  
  
Token de cancelación que se puede usar para solicitar que se abandone la operación antes de que transcurra el tiempo de espera del comando.  Las excepciones se mostrarán a través del objeto de tarea devuelto.</summary>
        <returns>Tarea que representa la operación asincrónica.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Para obtener más información sobre la programación asincrónica en el proveedor de datos de .NET Framework para SQL Server, vea [programación asincrónica](~/docs/framework/data/adonet/asynchronous-programming.md).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Llamada a <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataTable)" /> varias veces para la misma instancia antes de la finalización de la tarea.  
  
Llamada a <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataTable)" /> y <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.DataTable)" /> varias veces para la misma instancia antes de la finalización de la tarea.  
  
La conexión se interrumpe o se cierra durante la ejecución de <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataTable)" />.  
  
Devuelto en el objeto de tarea, el objeto <see cref="T:System.Data.SqlClient.SqlBulkCopy" /> se cerró durante la ejecución del método.  
  
Devuelto en el objeto de tarea, hubo un tiempo de espera de agrupación de conexiones.  
  
Devuelto en el objeto de tarea, el objeto <see cref="T:System.Data.SqlClient.SqlConnection" /> se cerró antes de la ejecución del método.  
  
 <see langword="Context Connection=true" /> se especifica en la cadena de conexión.</exception>
        <exception cref="T:System.Data.SqlClient.SqlException">Devuelto en el objeto de tarea, cualquier error devuelto por SQL Server que se produjo al abrir la conexión.</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteToServerAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task WriteToServerAsync (System.Data.IDataReader reader, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task WriteToServerAsync(class System.Data.IDataReader reader, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.IDataReader,System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task ^ WriteToServerAsync(System::Data::IDataReader ^ reader, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="member this.WriteToServerAsync : System.Data.IDataReader * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="sqlBulkCopy.WriteToServerAsync (reader, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.4.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reader" Type="System.Data.IDataReader" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="reader"><see cref="T:System.Data.IDataReader" /> cuyas filas se copiarán en la tabla de destino.</param>
        <param name="cancellationToken">Instrucción de cancelación. Un valor de <see cref="P:System.Threading.CancellationToken.None" /> de este parámetro hace que este método sea equivalente a <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataTable)" />.</param>
        <summary>Versión asincrónica de <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.IDataReader)" />, que copia todas las filas del <see cref="T:System.Data.IDataReader" /> suministrado en una tabla de destino especificada por la propiedad <see cref="P:System.Data.SqlClient.SqlBulkCopy.DestinationTableName" /> del objeto <see cref="T:System.Data.SqlClient.SqlBulkCopy" />.  
  
Token de cancelación que se puede usar para solicitar que se abandone la operación antes de que transcurra el tiempo de espera del comando.  Las excepciones se mostrarán a través del objeto de tarea devuelto.</summary>
        <returns>Tarea que representa la operación asincrónica.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Para obtener más información sobre la programación asincrónica en el proveedor de datos de .NET Framework para SQL Server, vea [programación asincrónica](~/docs/framework/data/adonet/asynchronous-programming.md).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Llamada a <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.IDataReader)" /> varias veces para la misma instancia antes de la finalización de la tarea.  
  
Llamada a <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.IDataReader)" /> y <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.IDataReader)" /> varias veces para la misma instancia antes de la finalización de la tarea.  
  
La conexión se interrumpe o se cierra durante la ejecución de <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.IDataReader)" />.  
  
Devuelto en el objeto de tarea, el objeto <see cref="T:System.Data.SqlClient.SqlBulkCopy" /> se cerró durante la ejecución del método.  
  
Devuelto en el objeto de tarea, hubo un tiempo de espera de agrupación de conexiones.  
  
Devuelto en el objeto de tarea, el objeto <see cref="T:System.Data.SqlClient.SqlConnection" /> se cerró antes de la ejecución del método.  
  
El <see cref="T:System.Data.IDataReader" /> se cerró antes de que se devolviese el <see cref="T:System.Threading.Tasks.Task" /> completado.  
  
La conexión asociada de <see cref="T:System.Data.IDataReader" /> se cerró antes de devolverse el <see cref="T:System.Threading.Tasks.Task" /> completado.  
  
 <see langword="Context Connection=true" /> se especifica en la cadena de conexión.</exception>
        <exception cref="T:System.Data.SqlClient.SqlException">Devuelto en el objeto de tarea, cualquier error devuelto por SQL Server que se produjo al abrir la conexión.</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteToServerAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task WriteToServerAsync (System.Data.DataTable table, System.Data.DataRowState rowState, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task WriteToServerAsync(class System.Data.DataTable table, valuetype System.Data.DataRowState rowState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataTable,System.Data.DataRowState,System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task ^ WriteToServerAsync(System::Data::DataTable ^ table, System::Data::DataRowState rowState, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="member this.WriteToServerAsync : System.Data.DataTable * System.Data.DataRowState * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="sqlBulkCopy.WriteToServerAsync (table, rowState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.4.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="table" Type="System.Data.DataTable" />
        <Parameter Name="rowState" Type="System.Data.DataRowState" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="table"><see cref="T:System.Data.DataTable" /> cuyas filas se copiarán en la tabla de destino.</param>
        <param name="rowState">Un valor de la enumeración <see cref="T:System.Data.DataRowState" />. Solo se copian en el destino las filas que coinciden con el estado de la fila.</param>
        <param name="cancellationToken">Instrucción de cancelación. Un valor de <see cref="P:System.Threading.CancellationToken.None" /> de este parámetro hace que este método sea equivalente a <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataTable)" />.</param>
        <summary>La versión asincrónica de <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.DataTable,System.Data.DataRowState)" />, que copia únicamente las filas que coinciden con el estado de fila proporcionado en el <see cref="T:System.Data.DataTable" /> suministrado en una tabla de destino especificada por la propiedad <see cref="P:System.Data.SqlClient.SqlBulkCopy.DestinationTableName" /> del objeto <see cref="T:System.Data.SqlClient.SqlBulkCopy" />.  
  
Token de cancelación que se puede usar para solicitar que se abandone la operación antes de que transcurra el tiempo de espera del comando.  Las excepciones se mostrarán a través del objeto de tarea devuelto.</summary>
        <returns>Tarea que representa la operación asincrónica.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Para obtener más información sobre la programación asincrónica en el proveedor de datos de .NET Framework para SQL Server, vea [programación asincrónica](~/docs/framework/data/adonet/asynchronous-programming.md).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Llamada a <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataTable,System.Data.DataRowState)" /> varias veces para la misma instancia antes de la finalización de la tarea.  
  
Llamada a <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataTable,System.Data.DataRowState)" /> y <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.DataTable,System.Data.DataRowState)" /> varias veces para la misma instancia antes de la finalización de la tarea.  
  
La conexión se interrumpe o se cierra durante la ejecución de <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataTable,System.Data.DataRowState)" />.  
  
Devuelto en el objeto de tarea, el objeto <see cref="T:System.Data.SqlClient.SqlBulkCopy" /> se cerró durante la ejecución del método.  
  
Devuelto en el objeto de tarea, hubo un tiempo de espera de agrupación de conexiones.  
  
Devuelto en el objeto de tarea, el objeto <see cref="T:System.Data.SqlClient.SqlConnection" /> se cerró antes de la ejecución del método.  
  
 <see langword="Context Connection=true" /> se especifica en la cadena de conexión.</exception>
        <exception cref="T:System.Data.SqlClient.SqlException">Devuelto en el objeto de tarea, cualquier error devuelto por SQL Server que se produjo al abrir la conexión.</exception>
      </Docs>
    </Member>
  </Members>
</Type>