<Type Name="SqlConnection" FullName="System.Data.SqlClient.SqlConnection">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="13a8805b62cac7e4548ac44737cd6c5c1dc3578c" />
    <Meta Name="ms.sourcegitcommit" Value="3907f9a5780957d9c85af2e54c0a5bc2a5bf19ab" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="es-ES" />
    <Meta Name="ms.lasthandoff" Value="06/14/2018" />
    <Meta Name="ms.locfileid" Value="34452442" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class SqlConnection : System.Data.Common.DbConnection, ICloneable, IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit SqlConnection extends System.Data.Common.DbConnection implements class System.Data.IDbConnection, class System.ICloneable, class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.Data.SqlClient.SqlConnection" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class SqlConnection&#xA;Inherits DbConnection&#xA;Implements ICloneable, IDisposable" />
  <TypeSignature Language="C++ CLI" Value="public ref class SqlConnection sealed : System::Data::Common::DbConnection, ICloneable, IDisposable" />
  <AssemblyInfo>
    <AssemblyName>System.Data.SqlClient</AssemblyName>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Data</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Data.Common.DbConnection</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.ICloneable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.ComponentModel.DefaultEvent("InfoMessage")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Representa una conexión a una base de datos de SQL Server. Esta clase no puede heredarse.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Un <xref:System.Data.SqlClient.SqlConnection> objeto representa una sesión única a un origen de datos de SQL Server. Con un sistema de base de datos cliente/servidor, es equivalente a una conexión de red al servidor. <xref:System.Data.SqlClient.SqlConnection> se utiliza junto con <xref:System.Data.SqlClient.SqlDataAdapter> y <xref:System.Data.SqlClient.SqlCommand> para aumentar el rendimiento cuando se conecta a una base de datos de Microsoft SQL Server. Para todos los productos de SQL Server de terceros y otros orígenes de datos compatibles con OLE DB, use <xref:System.Data.OleDb.OleDbConnection>.  
  
 Cuando se crea una instancia de <xref:System.Data.SqlClient.SqlConnection>, todas las propiedades se establecen en sus valores iniciales. Para obtener una lista de estos valores, consulte el <xref:System.Data.SqlClient.SqlConnection> constructor.  
  
 Consulte <xref:System.Data.SqlClient.SqlConnection.ConnectionString%2A> para obtener una lista de las palabras clave en una cadena de conexión.  
  
 Si la <xref:System.Data.SqlClient.SqlConnection> queda fuera del ámbito, no se cerrará. Por lo tanto, debe cerrar la conexión explícitamente mediante una llamada a `Close` o `Dispose`. `Close` y `Dispose` son funcionalmente equivalentes. Si la agrupación de conexiones de los valores `Pooling` está establecido en `true` o `yes`, la conexión subyacente se devuelve a la agrupación de conexiones. Por otro lado, si `Pooling` está establecido en `false` o `no`, la conexión al servidor subyacente está cerrada realmente.  
  
> [!NOTE]
>  Los eventos de inicio y cierre de sesión no se provocarán en el servidor cuando se busque una conexión desde el grupo de conexiones o se devuelva a éste, puesto que la conexión no está cerrada realmente cuando se devuelve al grupo de conexiones. Para obtener más información, vea [Agrupación de conexiones de SQL Server (ADO.NET)](~/docs/framework/data/adonet/sql-server-connection-pooling.md).  
  
 Para asegurarse de que siempre se cierran las conexiones, abra la conexión dentro de un `using` bloquear, tal como se muestra en el siguiente fragmento de código. Este modo se asegura que la conexión se cierra automáticamente cuando el código sale del bloque.  
  
```vb  
Using connection As New SqlConnection(connectionString)  
    connection.Open()  
    ' Do work here; connection closed on following line.  
End Using  
  
```  
  
```csharp  
using (SqlConnection connection = new SqlConnection(connectionString))  
    {  
        connection.Open();  
        // Do work here; connection closed on following line.  
    }  
```  
  
> [!NOTE]
>  Para implementar aplicaciones de alto rendimiento, debe usar la agrupación de conexiones. Cuando se usa el proveedor de datos de .NET Framework para SQL Server, no es necesario que habilitar la agrupación de conexiones porque el proveedor encarga de ello automáticamente, aunque se pueden modificar algunos valores de configuración. Para obtener más información, vea [Agrupación de conexiones de SQL Server (ADO.NET)](~/docs/framework/data/adonet/sql-server-connection-pooling.md).  
  
 Si un <xref:System.Data.SqlClient.SqlException> generado por el método que ejecuta un <xref:System.Data.SqlClient.SqlCommand>, el <xref:System.Data.SqlClient.SqlConnection> permanece abierta cuando el nivel de gravedad es 19 o inferior. Cuando el nivel de gravedad es 20 o superior, el servidor normalmente cierra el <xref:System.Data.SqlClient.SqlConnection>. Sin embargo, el usuario puede volver a abrir la conexión y continuar.  
  
 Una aplicación que crea una instancia de la <xref:System.Data.SqlClient.SqlConnection> objeto puede requerir que todos los llamadores directos e indirectos tengan permisos suficientes en el código mediante el establecimiento de las peticiones de seguridad declarativo o imperativo. <xref:System.Data.SqlClient.SqlConnection> hace que las peticiones de seguridad mediante la <xref:System.Data.SqlClient.SqlClientPermission> objeto. Los usuarios pueden comprobar que su código tiene los permisos necesarios mediante la <xref:System.Data.SqlClient.SqlClientPermissionAttribute> objeto. Los usuarios y administradores también pueden utilizar el [Caspol.exe (Code Access Security Policy Tool)](~/docs/framework/tools/caspol-exe-code-access-security-policy-tool.md) para modificar la directiva de seguridad en los niveles de equipo, usuario y empresa. Para más información, consulte [Seguridad](http://msdn.microsoft.com/library/9a9621d7-8883-4a4f-a874-65e8e09e20a6). Para obtener un ejemplo que muestra cómo usar las peticiones de seguridad, consulte [seguridad de acceso del código y ADO.NET](~/docs/framework/data/adonet/code-access-security.md).  
  
 Para obtener más información sobre el control de mensajes de advertencia e informativos desde el servidor, consulte [eventos de conexión](~/docs/framework/data/adonet/connection-events.md). Errores del motor de SQL Server y los mensajes de error se documentan en los libros en pantalla de SQL Server.  
  
> [!CAUTION]
>  Puede forzar TCP en lugar de la memoria compartida. Puede hacerlo agregando el prefijo tcp: para el nombre del servidor en la conexión de cadena, o bien puede usar localhost.  
  
   
  
## Examples  
 En el ejemplo siguiente se crea un <xref:System.Data.SqlClient.SqlCommand> y <xref:System.Data.SqlClient.SqlConnection>. El <xref:System.Data.SqlClient.SqlConnection> se abre y se establece como el <xref:System.Data.SqlClient.SqlCommand.Connection%2A> para el <xref:System.Data.SqlClient.SqlCommand>. El ejemplo, a continuación, se llama <xref:System.Data.SqlClient.SqlCommand.ExecuteNonQuery%2A>. Para lograr esto, la <xref:System.Data.SqlClient.SqlCommand.ExecuteNonQuery%2A> se pasa una cadena de conexión y una cadena de consulta que es una [!INCLUDE[tsql](~/includes/tsql-md.md)] instrucción INSERT. La conexión se cierra automáticamente cuando el código sale del uso de bloque.  
  
 [!code-csharp[Classic WebData SqlCommand.ExecuteNonQuery Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData SqlCommand.ExecuteNonQuery Example/CS/source.cs#1)]
 [!code-vb[Classic WebData SqlCommand.ExecuteNonQuery Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData SqlCommand.ExecuteNonQuery Example/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Data.SqlClient.SqlConnection" />.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SqlConnection ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlConnection.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; SqlConnection();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Data.SqlClient.SqlConnection" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cuando una nueva instancia de <xref:System.Data.SqlClient.SqlConnection> se crea la lectura y escritura propiedades se establecen en los valores iniciales siguientes a menos que se establezcan específicamente mediante sus palabras clave asociadas en la <xref:System.Data.SqlClient.SqlConnection.ConnectionString%2A> propiedad.  
  
|Propiedades|Valor inicial|  
|----------------|-------------------|  
|<xref:System.Data.SqlClient.SqlConnection.ConnectionString%2A>|Una cadena vacía ("")|  
|<xref:System.Data.SqlClient.SqlConnection.ConnectionTimeout%2A>|15|  
|<xref:System.Data.SqlClient.SqlConnection.Database%2A>|Una cadena vacía ("")|  
|<xref:System.Data.SqlClient.SqlConnection.DataSource%2A>|Una cadena vacía ("")|  
  
 Puede cambiar el valor de estas propiedades sólo mediante el <xref:System.Data.SqlClient.SqlConnection.ConnectionString%2A> propiedad. La <xref:System.Data.SqlClient.SqlConnectionStringBuilder> clase proporciona la funcionalidad para crear y administrar el contenido de las cadenas de conexión.  
  
   
  
## Examples  
 En el ejemplo siguiente se crea y abre un <xref:System.Data.SqlClient.SqlConnection>.  
  
 [!code-csharp[Classic WebData SqlConnection.SqlConnection Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData SqlConnection.SqlConnection Example/CS/source.cs#1)]
 [!code-vb[Classic WebData SqlConnection.SqlConnection Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData SqlConnection.SqlConnection Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SqlConnection (string connectionString);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string connectionString) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlConnection.#ctor(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (connectionString As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; SqlConnection(System::String ^ connectionString);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="connectionString" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="connectionString">Conexión usada para abrir la base de datos de SQL Server.</param>
        <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Data.SqlClient.SqlConnection" />, dada una cadena que contiene la cadena de conexión.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cuando una nueva instancia de <xref:System.Data.SqlClient.SqlConnection> se crea la lectura y escritura propiedades se establecen en los valores iniciales siguientes a menos que se establezcan específicamente mediante sus palabras clave asociadas en la <xref:System.Data.SqlClient.SqlConnection.ConnectionString%2A> propiedad.  
  
|Propiedades|Valor inicial|  
|----------------|-------------------|  
|<xref:System.Data.SqlClient.SqlConnection.ConnectionString%2A>|`connectionString`|  
|<xref:System.Data.SqlClient.SqlConnection.ConnectionTimeout%2A>|15|  
|<xref:System.Data.SqlClient.SqlConnection.Database%2A>|Una cadena vacía ("")|  
|<xref:System.Data.SqlClient.SqlConnection.DataSource%2A>|Una cadena vacía ("")|  
  
 Puede cambiar el valor de estas propiedades sólo mediante el <xref:System.Data.SqlClient.SqlConnection.ConnectionString%2A> propiedad. La <xref:System.Data.SqlClient.SqlConnection> clase proporciona la funcionalidad para crear y administrar el contenido de las cadenas de conexión.  
  
   
  
## Examples  
 En el ejemplo siguiente se crea y abre un <xref:System.Data.SqlClient.SqlConnection>.  
  
 [!code-csharp[Classic WebData SqlConnection.SqlConnection1 Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData SqlConnection.SqlConnection1 Example/CS/source.cs#1)]
 [!code-vb[Classic WebData SqlConnection.SqlConnection1 Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData SqlConnection.SqlConnection1 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SqlConnection (string connectionString, System.Data.SqlClient.SqlCredential credential);" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string connectionString, class System.Data.SqlClient.SqlCredential credential) cil managed" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlConnection.#ctor(System.String,System.Data.SqlClient.SqlCredential)" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;xamarinandroid-7.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (connectionString As String, credential As SqlCredential)" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; SqlConnection(System::String ^ connectionString, System::Data::SqlClient::SqlCredential ^ credential);" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2" />
      <MemberSignature Language="C#" Value="public SqlConnection (string connectionString, System.Data.SqlClient.SqlCredential cred);" FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string connectionString, class System.Data.SqlClient.SqlCredential cred) cil managed" FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (connectionString As String, cred As SqlCredential)" FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; SqlConnection(System::String ^ connectionString, System::Data::SqlClient::SqlCredential ^ cred);" FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="connectionString" Type="System.String" Index="0" />
        <Parameter Name="credential" Type="System.Data.SqlClient.SqlCredential" Index="1" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2" />
        <Parameter Name="cred" Type="System.Data.SqlClient.SqlCredential" Index="1" FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="connectionString">Cadena de conexión que no usa ninguna de las palabras clave siguientes de cadena de conexión: <see langword="Integrated Security = true" />, <see langword="UserId" /> o <see langword="Password" />; o que no usa <see langword="ContextConnection = true" />.</param>
        <param name="credential">To be added.</param>
        <param name="cred">To be added.</param>
        <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Data.SqlClient.SqlConnection" /> a la que se proporciona una cadena de conexión que no usa <see langword="Integrated Security = true" /> y un objeto <see cref="T:System.Data.SqlClient.SqlCredential" /> que contiene el identificador de usuario y la contraseña.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AccessToken">
      <MemberSignature Language="C#" Value="public string AccessToken { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string AccessToken" />
      <MemberSignature Language="DocId" Value="P:System.Data.SqlClient.SqlConnection.AccessToken" />
      <MemberSignature Language="VB.NET" Value="Public Property AccessToken As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ AccessToken { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene o establece el token de acceso para la conexión.</summary>
        <value>Token de acceso para la conexión.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="BeginDbTransaction">
      <MemberSignature Language="C#" Value="protected override System.Data.Common.DbTransaction BeginDbTransaction (System.Data.IsolationLevel isolationLevel);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Data.Common.DbTransaction BeginDbTransaction(valuetype System.Data.IsolationLevel isolationLevel) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlConnection.BeginDbTransaction(System.Data.IsolationLevel)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override System::Data::Common::DbTransaction ^ BeginDbTransaction(System::Data::IsolationLevel isolationLevel);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Common.DbTransaction</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="isolationLevel" Type="System.Data.IsolationLevel" />
      </Parameters>
      <Docs>
        <param name="isolationLevel">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="BeginTransaction">
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Inicia una transacción de base de datos.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="BeginTransaction">
      <MemberSignature Language="C#" Value="public System.Data.SqlClient.SqlTransaction BeginTransaction ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Data.SqlClient.SqlTransaction BeginTransaction() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlConnection.BeginTransaction" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginTransaction () As SqlTransaction" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Data::SqlClient::SqlTransaction ^ BeginTransaction();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.SqlClient.SqlTransaction</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Inicia una transacción de base de datos.</summary>
        <returns>Objeto que representa la nueva transacción.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este comando se asigna a la implementación de SQL Server de BEGIN TRANSACTION.  
  
 Explícitamente debe confirmar o revertir la transacción mediante la <xref:System.Data.SqlClient.SqlTransaction.Commit%2A> o <xref:System.Data.SqlClient.SqlTransaction.Rollback%2A> método. Para asegurarse de que el proveedor de datos de .NET Framework para el modelo de administración de transacciones de SQL Server se realiza correctamente, evite el uso de otros modelos de administración de transacciones, como la proporcionada por SQL Server.  
  
> [!NOTE]
>  Si no especifica un nivel de aislamiento, se utiliza el nivel de aislamiento predeterminado. Para especificar un nivel de aislamiento con el <xref:System.Data.SqlClient.SqlConnection.BeginTransaction%2A> método, utilice la sobrecarga que toma el `iso` parámetro (<xref:System.Data.SqlClient.SqlConnection.BeginTransaction%2A>). El nivel de aislamiento establecido para una transacción continúa después de que se completa la transacción y hasta que la conexión se cierra o elimina. Establecer nivel para el aislamiento **instantánea** en una base de datos y no está habilitado el nivel de aislamiento de instantánea no produce una excepción. La transacción se completará con el nivel de aislamiento predeterminado.  
  
> [!CAUTION]
>  Si se inicia una transacción y se produce un nivel 16 o superior en el servidor, la transacción no se revertirá hasta que el <xref:System.Data.SqlClient.SqlDataReader.Read%2A> se invoca el método. Se inicia ninguna excepción **ExecuteReader**.  
  
> [!CAUTION]
>  Cuando la consulta devuelve una gran cantidad de datos y las llamadas `BeginTransaction`, un <xref:System.Data.SqlClient.SqlException> se produce porque SQL Server no admite transacciones paralelas al utilizar MARS. Para evitar este problema, asociar siempre una transacción con el comando, la conexión o ambos para que los lectores están abiertos.  
  
 Para obtener más información sobre las transacciones de SQL Server, vea "Explicit Transactions" y "Codificar transacciones eficaces" en libros en pantalla de SQL Server.  
  
   
  
## Examples  
 En el ejemplo siguiente se crea un <xref:System.Data.SqlClient.SqlConnection> y <xref:System.Data.SqlClient.SqlTransaction>. También muestra cómo utilizar el <xref:System.Data.SqlClient.SqlConnection.BeginTransaction%2A>, <xref:System.Data.SqlClient.SqlTransaction.Commit%2A>, y <xref:System.Data.SqlClient.SqlTransaction.Rollback%2A> métodos.  
  
 [!code-csharp[Classic WebData SqlConnection.BeginTransaction Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData SqlConnection.BeginTransaction Example/CS/source.cs#1)]
 [!code-vb[Classic WebData SqlConnection.BeginTransaction Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData SqlConnection.BeginTransaction Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Data.SqlClient.SqlException">No se permiten transacciones paralelas al usar Conjuntos de resultados activos múltiples (MARS).</exception>
        <exception cref="T:System.InvalidOperationException">No se admiten transacciones paralelas.</exception>
      </Docs>
    </Member>
    <Member MemberName="BeginTransaction">
      <MemberSignature Language="C#" Value="public System.Data.SqlClient.SqlTransaction BeginTransaction (System.Data.IsolationLevel iso);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Data.SqlClient.SqlTransaction BeginTransaction(valuetype System.Data.IsolationLevel iso) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlConnection.BeginTransaction(System.Data.IsolationLevel)" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginTransaction (iso As IsolationLevel) As SqlTransaction" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Data::SqlClient::SqlTransaction ^ BeginTransaction(System::Data::IsolationLevel iso);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.SqlClient.SqlTransaction</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="iso" Type="System.Data.IsolationLevel" />
      </Parameters>
      <Docs>
        <param name="iso">Nivel de aislamiento en el que tiene que ejecutarse la transacción.</param>
        <summary>Inicia una transacción de base de datos con el nivel de aislamiento especificado.</summary>
        <returns>Objeto que representa la nueva transacción.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este comando se asigna a la implementación de SQL Server de BEGIN TRANSACTION.  
  
 Explícitamente debe confirmar o revertir la transacción mediante la <xref:System.Data.SqlClient.SqlTransaction.Commit%2A> o <xref:System.Data.SqlClient.SqlTransaction.Rollback%2A> método. Para asegurarse de que el proveedor de datos de .NET Framework para el modelo de administración de transacciones de SQL Server se realiza correctamente, evite el uso de otros modelos de administración de transacciones, como la proporcionada por SQL Server.  
  
> [!NOTE]
>  Después de confirmar o revertir una transacción, el nivel de aislamiento de la transacción continúa para todos los comandos posteriores que estén en modo de confirmación automática (el valor predeterminado de SQL Server). Esto puede producir resultados inesperados, como un nivel de aislamiento de REPEATABLE READ y se bloquee a otros usuarios fuera de una fila. Para restablecer el nivel de aislamiento en el valor predeterminado (READ COMMITTED), ejecute el [!INCLUDE[tsql](~/includes/tsql-md.md)] instrucción establece TRANSACTION ISOLATION LEVEL READ COMMITTED o llamada <xref:System.Data.SqlClient.SqlConnection.BeginTransaction%2A?displayProperty=nameWithType> seguido inmediatamente por <xref:System.Data.SqlClient.SqlTransaction.Commit%2A?displayProperty=nameWithType>. Para obtener más información sobre los niveles de aislamiento de SQL Server, vea "Aislamiento niveles in the Database Engine" en libros en pantalla de SQL Server.  
  
 Para obtener más información sobre las transacciones de SQL Server, vea "Explicit Transactions" y "Codificar transacciones eficaces" en libros en pantalla de SQL Server.  
  
> [!CAUTION]
>  Cuando la consulta devuelve una gran cantidad de datos y las llamadas `BeginTransaction`, un <xref:System.Data.SqlClient.SqlException> se produce porque SQL Server no admite transacciones paralelas al utilizar MARS. Para evitar este problema, asociar siempre una transacción con el comando, la conexión o ambos para que los lectores están abiertos.  
  
   
  
## Examples  
 En el ejemplo siguiente se crea un <xref:System.Data.SqlClient.SqlConnection> y <xref:System.Data.SqlClient.SqlTransaction>. También muestra cómo utilizar el <xref:System.Data.SqlClient.SqlConnection.BeginTransaction%2A>, <xref:System.Data.SqlClient.SqlTransaction.Commit%2A>, y <xref:System.Data.SqlClient.SqlTransaction.Rollback%2A> métodos.  
  
 [!code-csharp[Classic WebData SqlConnection.BeginTransaction1 Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData SqlConnection.BeginTransaction1 Example/CS/source.cs#1)]
 [!code-vb[Classic WebData SqlConnection.BeginTransaction1 Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData SqlConnection.BeginTransaction1 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Data.SqlClient.SqlException">No se permiten transacciones paralelas al usar Conjuntos de resultados activos múltiples (MARS).</exception>
        <exception cref="T:System.InvalidOperationException">No se admiten transacciones paralelas.</exception>
      </Docs>
    </Member>
    <Member MemberName="BeginTransaction">
      <MemberSignature Language="C#" Value="public System.Data.SqlClient.SqlTransaction BeginTransaction (string transactionName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Data.SqlClient.SqlTransaction BeginTransaction(string transactionName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlConnection.BeginTransaction(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginTransaction (transactionName As String) As SqlTransaction" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Data::SqlClient::SqlTransaction ^ BeginTransaction(System::String ^ transactionName);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.SqlClient.SqlTransaction</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="transactionName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="transactionName">Nombre de la transacción.</param>
        <summary>Inicia una transacción de base de datos con el nombre de transacción especificado.</summary>
        <returns>Objeto que representa la nueva transacción.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este comando se asigna a la implementación de SQL Server de BEGIN TRANSACTION.  
  
 La longitud de la `transactionName` parámetro no debe superar los 32 caracteres; de lo contrario se producirá una excepción.  
  
 El valor de la `transactionName` parámetro se puede utilizar en llamadas posteriores a <xref:System.Data.SqlClient.SqlTransaction.Rollback%2A> y en el `savePoint` parámetro de la <xref:System.Data.SqlClient.SqlTransaction.Save%2A> método.  
  
 Explícitamente debe confirmar o revertir la transacción mediante la <xref:System.Data.SqlClient.SqlTransaction.Commit%2A> o <xref:System.Data.SqlClient.SqlTransaction.Rollback%2A> método. Para asegurarse de que el [!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)] proveedor de datos de modelo de administración de transacciones de SQL Server se realiza correctamente, evite el uso de otros modelos de administración de transacciones, como los proporcionados por SQL Server.  
  
 Para obtener más información sobre las transacciones de SQL Server, vea "Explicit Transactions" y "Codificar transacciones eficaces" en libros en pantalla de SQL Server.  
  
> [!CAUTION]
>  Cuando la consulta devuelve una gran cantidad de datos y las llamadas `BeginTransaction`, un <xref:System.Data.SqlClient.SqlException> se produce porque SQL Server no admite transacciones paralelas al utilizar MARS. Para evitar este problema, asociar siempre una transacción con el comando, la conexión o ambos para que los lectores están abiertos.  
  
   
  
## Examples  
 En el ejemplo siguiente se crea un <xref:System.Data.SqlClient.SqlConnection> y <xref:System.Data.SqlClient.SqlTransaction>. También muestra cómo utilizar el <xref:System.Data.SqlClient.SqlConnection.BeginTransaction%2A>, <xref:System.Data.SqlClient.SqlTransaction.Commit%2A>, y <xref:System.Data.SqlClient.SqlTransaction.Rollback%2A> métodos.  
  
 [!code-csharp[Classic WebData SqlConnection.BeginTransaction2 Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData SqlConnection.BeginTransaction2 Example/CS/source.cs#1)]
 [!code-vb[Classic WebData SqlConnection.BeginTransaction2 Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData SqlConnection.BeginTransaction2 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Data.SqlClient.SqlException">No se permiten transacciones paralelas al usar Conjuntos de resultados activos múltiples (MARS).</exception>
        <exception cref="T:System.InvalidOperationException">No se admiten transacciones paralelas.</exception>
      </Docs>
    </Member>
    <Member MemberName="BeginTransaction">
      <MemberSignature Language="C#" Value="public System.Data.SqlClient.SqlTransaction BeginTransaction (System.Data.IsolationLevel iso, string transactionName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Data.SqlClient.SqlTransaction BeginTransaction(valuetype System.Data.IsolationLevel iso, string transactionName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlConnection.BeginTransaction(System.Data.IsolationLevel,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginTransaction (iso As IsolationLevel, transactionName As String) As SqlTransaction" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Data::SqlClient::SqlTransaction ^ BeginTransaction(System::Data::IsolationLevel iso, System::String ^ transactionName);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.SqlClient.SqlTransaction</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="iso" Type="System.Data.IsolationLevel" />
        <Parameter Name="transactionName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="iso">Nivel de aislamiento en el que tiene que ejecutarse la transacción.</param>
        <param name="transactionName">Nombre de la transacción.</param>
        <summary>Inicia una transacción de la base de datos con el nivel de aislamiento y el nombre de transacción especificados.</summary>
        <returns>Objeto que representa la nueva transacción.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este comando se asigna a la implementación de SQL Server de BEGIN TRANSACTION.  
  
 El valor de la `transactionName` parámetro se puede utilizar en llamadas posteriores a <xref:System.Data.SqlClient.SqlTransaction.Rollback%2A> y en el `savePoint` parámetro de la <xref:System.Data.SqlClient.SqlTransaction.Save%2A> método.  
  
 Explícitamente debe confirmar o revertir la transacción mediante la <xref:System.Data.SqlClient.SqlTransaction.Commit%2A> o <xref:System.Data.SqlClient.SqlTransaction.Rollback%2A> método. Para asegurarse de que el modelo de administración de transacciones de SQL Server se realiza correctamente, evite el uso de otros modelos de administración de transacciones, como la proporcionada por SQL Server.  
  
> [!NOTE]
>  Después de confirmar o revertir una transacción, el nivel de aislamiento de la transacción continúa para todos los comandos posteriores que estén en modo de confirmación automática (el valor predeterminado de SQL Server). Esto puede producir resultados inesperados, como un nivel de aislamiento de REPEATABLE READ y se bloquee a otros usuarios fuera de una fila. Para restablecer el nivel de aislamiento en el valor predeterminado (READ COMMITTED), ejecute el [!INCLUDE[tsql](~/includes/tsql-md.md)] instrucción establece TRANSACTION ISOLATION LEVEL READ COMMITTED o llamada <xref:System.Data.SqlClient.SqlConnection.BeginTransaction%2A?displayProperty=nameWithType> seguido inmediatamente por <xref:System.Data.SqlClient.SqlTransaction.Commit%2A?displayProperty=nameWithType>. Para obtener más información sobre los niveles de aislamiento de SQL Server, vea "Aislamiento niveles in the Database Engine" en libros en pantalla de SQL Server.  
  
 Para obtener más información sobre las transacciones de SQL Server, vea "Explicit Transactions" y "Codificar transacciones eficaces" en libros en pantalla de SQL Server.  
  
> [!CAUTION]
>  Cuando la consulta devuelve una gran cantidad de datos y las llamadas `BeginTransaction`, un <xref:System.Data.SqlClient.SqlException> se produce porque SQL Server no admite transacciones paralelas al utilizar MARS. Para evitar este problema, asociar siempre una transacción con el comando, la conexión o ambos para que los lectores están abiertos.  
  
   
  
## Examples  
 En el ejemplo siguiente se crea un <xref:System.Data.SqlClient.SqlConnection> y <xref:System.Data.SqlClient.SqlTransaction>. También muestra cómo utilizar el <xref:System.Data.SqlClient.SqlConnection.BeginTransaction%2A>, <xref:System.Data.SqlClient.SqlTransaction.Commit%2A>, y <xref:System.Data.SqlClient.SqlTransaction.Rollback%2A> métodos.  
  
 [!code-csharp[Classic WebData SqlConnection.BeginTransaction3 Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData SqlConnection.BeginTransaction3 Example/CS/source.cs#1)]
 [!code-vb[Classic WebData SqlConnection.BeginTransaction3 Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData SqlConnection.BeginTransaction3 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Data.SqlClient.SqlException">No se permiten transacciones paralelas al usar Conjuntos de resultados activos múltiples (MARS).</exception>
        <exception cref="T:System.InvalidOperationException">No se admiten transacciones paralelas.</exception>
      </Docs>
    </Member>
    <Member MemberName="ChangeDatabase">
      <MemberSignature Language="C#" Value="public override void ChangeDatabase (string database);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void ChangeDatabase(string database) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlConnection.ChangeDatabase(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub ChangeDatabase (database As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void ChangeDatabase(System::String ^ database);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Data.IDbConnection.ChangeDatabase(System.String)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="database" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="database">Nombre de la base de datos que se utiliza en lugar de la actual.</param>
        <summary>Cambia la base de datos actual de una conexión <see cref="T:System.Data.SqlClient.SqlConnection" /> abierta.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El valor proporcionado en el `database` parámetro debe ser un nombre de base de datos válido. El `database` parámetro no puede contener un valor null, una cadena vacía o una cadena con caracteres solo en blanco.  
  
   
  
## Examples  
 En el ejemplo siguiente se crea un <xref:System.Data.SqlClient.SqlConnection> y se muestran algunas de sus propiedades de solo lectura.  
  
 [!code-csharp[Classic WebData SqlConnection.Database Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData SqlConnection.Database Example/CS/source.cs#1)]
 [!code-vb[Classic WebData SqlConnection.Database Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData SqlConnection.Database Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">El nombre de la base de datos no es válido.</exception>
        <exception cref="T:System.InvalidOperationException">La conexión no está abierta.</exception>
        <exception cref="T:System.Data.SqlClient.SqlException">No se puede modificar la base de datos.</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="ChangePassword">
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Cambia la contraseña de SQL Server.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ChangePassword">
      <MemberSignature Language="C#" Value="public static void ChangePassword (string connectionString, string newPassword);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void ChangePassword(string connectionString, string newPassword) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlConnection.ChangePassword(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub ChangePassword (connectionString As String, newPassword As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void ChangePassword(System::String ^ connectionString, System::String ^ newPassword);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="connectionString" Type="System.String" />
        <Parameter Name="newPassword" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="connectionString">Cadena de conexión que contiene suficiente información para conectarse al servidor que se desee. La cadena de conexión debe contener el identificador de usuario y la contraseña actual.</param>
        <param name="newPassword">Nueva contraseña que se va a configurar. Esta contraseña debe cumplir con las directivas de seguridad de contraseña configuradas en el servidor, incluidos la longitud mínima, los requisitos para caracteres específicos, etc.</param>
        <summary>Cambia la contraseña de SQL Server para el usuario indicado en la cadena de conexión a la nueva contraseña proporcionada.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cuando se utiliza SQL Server en Windows Server, los desarrolladores pueden aprovechar las ventajas de funcionalidad que permite que la aplicación cliente proporcionar la versión actual y una contraseña nueva para cambiar la contraseña existente. Las aplicaciones pueden implementar la funcionalidad como solicitar al usuario una contraseña nueva durante el inicio de sesión inicial si la anterior ha expirado y se puede completar esta operación sin intervención del administrador.  
  
 El <xref:System.Data.SqlClient.SqlConnection.ChangePassword%2A> método cambia la contraseña de SQL Server para el usuario indicado en proporcionado `connectionString` parámetro para el valor proporcionado en el `newPassword` parámetro. Si la cadena de conexión incluye la opción para la seguridad integrada (es decir, "Integrated Security = True" o el equivalente), se produce una excepción.  
  
 Para determinar que la contraseña ha expirado, una llamada a la <xref:System.Data.SqlClient.SqlConnection.Open%2A> método genera una <xref:System.Data.SqlClient.SqlException>. Para indicar que se debe restablecer la contraseña que está dentro de la cadena de conexión, el <xref:System.Data.SqlClient.SqlException.Number%2A> propiedad para la excepción contiene el valor de estado 18487 o 18488. El primer valor (18487) indica que la contraseña ha expirado y el segundo (18488) indica que se debe restablecer la contraseña antes de iniciar sesión.  
  
 Este método abre su propia conexión al servidor, solicita el cambio de contraseña y cierra la conexión tan pronto como se ha completado. Esta conexión no se recupera de ni se devuelve a la agrupación de conexiones de SQL Server.  
  
   
  
## Examples  
 El siguiente es un ejemplo sencillo de cambiar una contraseña:  
  
```  
class Program {  
   static void Main(string[] args) {  
      System.Data.SqlClient.SqlConnection.ChangePassword(  
        "Data Source=a_server;Initial Catalog=a_database;UID=user;PWD=old_password",   
       "new_password");  
   }  
}  
  
```  
  
```  
Module Module1  
    Sub Main()  
System.Data.SqlClient.SqlConnection.ChangePassword(  
        "Data Source=a_server;Initial Catalog=a_database;UID=user;PWD=old_password",   
       "new_password")  
    End Sub  
End Module  
  
```  
  
 La siguiente aplicación de consola muestra los problemas implicados en el cambio de contraseña de un usuario porque la contraseña actual ha expirado.  
  
 [!code-csharp[DataWorks SqlConnection.ChangePassword#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks SqlConnection.ChangePassword/CS/source.cs#1)]
 [!code-vb[DataWorks SqlConnection.ChangePassword#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks SqlConnection.ChangePassword/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">La cadena de conexión incluye la opción para utilizar la seguridad integrada.  O bien <paramref name="newPassword" /> tiene más de 128 caracteres.</exception>
        <exception cref="T:System.ArgumentNullException">El valor de <paramref name="connectionString" /> o de <paramref name="newPassword" /> es null.</exception>
      </Docs>
    </Member>
    <Member MemberName="ChangePassword">
      <MemberSignature Language="C#" Value="public static void ChangePassword (string connectionString, System.Data.SqlClient.SqlCredential credential, System.Security.SecureString newSecurePassword);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void ChangePassword(string connectionString, class System.Data.SqlClient.SqlCredential credential, class System.Security.SecureString newSecurePassword) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlConnection.ChangePassword(System.String,System.Data.SqlClient.SqlCredential,System.Security.SecureString)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub ChangePassword (connectionString As String, credential As SqlCredential, newSecurePassword As SecureString)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void ChangePassword(System::String ^ connectionString, System::Data::SqlClient::SqlCredential ^ credential, System::Security::SecureString ^ newSecurePassword);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="connectionString" Type="System.String" />
        <Parameter Name="credential" Type="System.Data.SqlClient.SqlCredential" />
        <Parameter Name="newSecurePassword" Type="System.Security.SecureString" />
      </Parameters>
      <Docs>
        <param name="connectionString">Cadena de conexión que contiene suficiente información para conectarse a un servidor. La cadena de conexión no debe usar ninguna de las palabras clave siguientes de cadena de conexión: <see langword="Integrated Security = true" />, <see langword="UserId" /> o <see langword="Password" />; o <see langword="ContextConnection = true" />.</param>
        <param name="credential">Un objeto <see cref="T:System.Data.SqlClient.SqlCredential" />.</param>
        <param name="newSecurePassword">La contraseña nueva. <c>newSecurePassword</c> debe ser de solo lectura. La contraseña también debe cumplir con las directivas de seguridad de contraseña configuradas en el servidor (por ejemplo, la longitud mínima y los requisitos para caracteres específicos).</param>
        <summary>Cambia la contraseña de SQL Server para el usuario indicado en el objeto de <see cref="T:System.Data.SqlClient.SqlCredential" />.</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">1.  La cadena de conexión contiene cualquier combinación de <see langword="UserId" />, <see langword="Password" /> o <see langword="Integrated Security=true" />.  2.  La cadena de conexión contiene <see langword="Context Connection=true" />.  3.  <paramref name="newSecurePassword" /> tiene más de 128 caracteres.  4.  <paramref name="newSecurePassword" /> no es de solo lectura.  5.  <paramref name="newSecurePassword" /> es una cadena vacía.</exception>
        <exception cref="T:System.ArgumentNullException">Uno o varios parámetros (<paramref name="connectionString" />, <paramref name="credential" /> o <paramref name="newSecurePassword" />) es NULL.</exception>
      </Docs>
    </Member>
    <Member MemberName="ClearAllPools">
      <MemberSignature Language="C#" Value="public static void ClearAllPools ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void ClearAllPools() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlConnection.ClearAllPools" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub ClearAllPools ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void ClearAllPools();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Vacía la agrupación de conexiones.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.SqlClient.SqlConnection.ClearAllPools%2A> restablece (o vacía) la agrupación de conexiones. Si hay conexiones están en uso en el momento de la llamada, se marcan adecuadamente y que se descartarán (en lugar de devolverse al grupo) cuando <xref:System.Data.SqlClient.SqlConnection.Close%2A> se llama en ellos.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ClearPool">
      <MemberSignature Language="C#" Value="public static void ClearPool (System.Data.SqlClient.SqlConnection connection);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void ClearPool(class System.Data.SqlClient.SqlConnection connection) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlConnection.ClearPool(System.Data.SqlClient.SqlConnection)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub ClearPool (connection As SqlConnection)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void ClearPool(System::Data::SqlClient::SqlConnection ^ connection);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="connection" Type="System.Data.SqlClient.SqlConnection" />
      </Parameters>
      <Docs>
        <param name="connection">Objeto <see cref="T:System.Data.SqlClient.SqlConnection" /> que se va a quitar de la agrupación.</param>
        <summary>Vacía la agrupación de conexiones asociada a la conexión especificada.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.SqlClient.SqlConnection.ClearPool%2A> Borra la agrupación de conexiones que está asociada la `connection`. Si las conexiones adicionales asociadas con `connection` están en uso en el momento de la llamada, se marcan adecuadamente y se descartan (en lugar de devolverse al grupo) cuando <xref:System.Data.SqlClient.SqlConnection.Close%2A> se llama en ellos.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ClientConnectionId">
      <MemberSignature Language="C#" Value="public Guid ClientConnectionId { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Guid ClientConnectionId" />
      <MemberSignature Language="DocId" Value="P:System.Data.SqlClient.SqlConnection.ClientConnectionId" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ClientConnectionId As Guid" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Guid ClientConnectionId { Guid get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Guid</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identificador de conexión del intento de conexión más reciente, independientemente de si el intento se realizó correctamente o no.</summary>
        <value>Identificador de conexión del intento de conexión más reciente.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.SqlClient.SqlConnection.ClientConnectionId%2A> funciona independientemente de qué versión del servidor se conecta a, pero los registros de eventos extendidos y la entrada sobre errores de búfer de anillo de conectividad no estarán presentes en [!INCLUDE[sskatmai_r2](~/includes/sskatmai-r2-md.md)] y versiones anteriores.  
  
 Puede buscar el identificador de conexión en el registro de eventos extendidos para comprobar si el error se encontraba en el servidor si está habilitado el evento extendido para registrar el identificador de conexión. También puede buscar el identificador de conexión en el búfer de anillo de conexión ([solucionar problemas de conectividad en SQL Server 2008 con el búfer de anillo de conectividad](http://go.microsoft.com/fwlink/?LinkId=207752)) para ciertos errores de conexión. Si el identificador de conexión no está en el búfer de anillo de conexión, puede suponer un error de red.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Close">
      <MemberSignature Language="C#" Value="public override void Close ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Close() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlConnection.Close" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Close ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Close();" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Data.IDbConnection.Close</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Cierra la conexión con la base de datos. Es el método preferido para cerrar cualquier conexión abierta.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Data.SqlClient.SqlConnection.Close%2A> método revierte todas las transacciones pendientes. A continuación, libera la conexión al grupo de conexiones o se cierra la conexión si la agrupación de conexiones está deshabilitada.  
  
> [!NOTE]
>  Pendiente de las transacciones iniciadas mediante [!INCLUDE[tsql](~/includes/tsql-md.md)] o <xref:System.Data.SqlClient.SqlConnection.BeginTransaction%2A> se revierte automáticamente cuando se restablece la conexión si la agrupación de conexiones está habilitada. Si la agrupación de conexiones está desactivada, la transacción se revierte después `SqlConnection.Close` se llama. Las transacciones se inician a través de <xref:System.Transactions> se controlan a través de la `System.Transactions` infraestructura y son no afectados por `SqlConnection.Close`.  
  
 Una aplicación puede llamar a <xref:System.Data.SqlClient.SqlConnection.Close%2A> más de una vez. Se genera ninguna excepción.  
  
 Si la <xref:System.Data.SqlClient.SqlConnection> queda fuera del ámbito, no se cerrará. Por lo tanto, debe cerrar la conexión explícitamente mediante una llamada a `Close` o `Dispose`. `Close` y `Dispose` son funcionalmente equivalentes. Si la agrupación de conexiones de los valores `Pooling` está establecido en `true` o `yes`, la conexión subyacente se devuelve a la agrupación de conexiones. Por otro lado, si `Pooling` está establecido en `false` o `no`, el subyacente de conexión con el servidor se cierra.  
  
> [!NOTE]
>  Los eventos de inicio y cierre de sesión no se provocarán en el servidor cuando se busque una conexión desde el grupo de conexiones o se devuelva a éste, puesto que la conexión no está cerrada realmente cuando se devuelve al grupo de conexiones. Para obtener más información, vea [Agrupación de conexiones de SQL Server (ADO.NET)](~/docs/framework/data/adonet/sql-server-connection-pooling.md).  
  
> [!CAUTION]
>  No llame a `Close` o `Dispose` en una conexión, un DataReader o cualquier otro objeto administrado en el `Finalize` método de la clase. En un finalizador, sólo se deberían liberar recursos no administrados que pertenezcan directamente a su clase. Si la clase no dispone de recursos no administrados, no incluya un método `Finalize` en la definición de clase. Para obtener más información, consulte [recolección](~/docs/standard/garbage-collection/index.md).  
  
   
  
## Examples  
 En el ejemplo siguiente se crea un <xref:System.Data.SqlClient.SqlConnection>, lo abre, muestra algunas de sus propiedades. La conexión se cierra automáticamente al final de la `using` bloque.  
  
 [!code-csharp[Classic WebData SqlConnection.Open Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData SqlConnection.Open Example/CS/source.cs#1)]
 [!code-vb[Classic WebData SqlConnection.Open Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData SqlConnection.Open Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Data.SqlClient.SqlException">Error de nivel de conexión ocasionado al abrir la conexión.</exception>
      </Docs>
    </Member>
    <Member MemberName="ColumnEncryptionKeyCacheTtl">
      <MemberSignature Language="C#" Value="public static TimeSpan ColumnEncryptionKeyCacheTtl { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property valuetype System.TimeSpan ColumnEncryptionKeyCacheTtl" />
      <MemberSignature Language="DocId" Value="P:System.Data.SqlClient.SqlConnection.ColumnEncryptionKeyCacheTtl" />
      <MemberSignature Language="VB.NET" Value="Public Shared Property ColumnEncryptionKeyCacheTtl As TimeSpan" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property TimeSpan ColumnEncryptionKeyCacheTtl { TimeSpan get(); void set(TimeSpan value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene o establece el período de vida para entradas de clave de cifrado de columnas en la memoria caché de clave de cifrado de columnas para la característica [Always Encrypted](/sql/relational-databases/security/encryption/always-encrypted-database-engine). El valor predeterminado es 2 horas. 0 significa que no hay almacenamiento en caché en absoluto.</summary>
        <value>El intervalo de tiempo.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ColumnEncryptionQueryMetadataCacheEnabled">
      <MemberSignature Language="C#" Value="public static bool ColumnEncryptionQueryMetadataCacheEnabled { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property bool ColumnEncryptionQueryMetadataCacheEnabled" />
      <MemberSignature Language="DocId" Value="P:System.Data.SqlClient.SqlConnection.ColumnEncryptionQueryMetadataCacheEnabled" />
      <MemberSignature Language="VB.NET" Value="Public Shared Property ColumnEncryptionQueryMetadataCacheEnabled As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property bool ColumnEncryptionQueryMetadataCacheEnabled { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene o establece un valor que indica si el almacenamiento en caché de metadatos de consulta está habilitado (true) o no (false) para consultas parametrizadas que se ejecutan en bases de datos habilitadas para [Always Encrypted](/sql/relational-databases/security/encryption/always-encrypted-database-engine). El valor predeterminado es true.</summary>
        <value>Devuelve true si el almacenamiento en caché de metadatos de consulta está habilitado; de lo contrario, false. true es el valor predeterminado.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Para las consultas parametrizadas, SqlClient hace un ida y vuelta a SQL Server para los metadatos de parámetro, para ver qué parámetro necesita para cifrar y cómo (qué claves y algoritmos deben utilizarse). Si la aplicación llama a la misma consulta varias veces, se realiza una ida y vuelta adicional al servidor cada vez, lo que disminuye el rendimiento de la aplicación.  
  
 Con **ColumnEncryptionQueryMetadataCacheEnabled** establecida en true, si la misma consulta se llama varias veces, la ida y vuelta al servidor se realizará una sola vez. La memoria caché tiene un parámetro de tamaño máximo no configurable que se establece en las consultas de 2000.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ColumnEncryptionTrustedMasterKeyPaths">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IDictionary&lt;string,System.Collections.Generic.IList&lt;string&gt;&gt; ColumnEncryptionTrustedMasterKeyPaths { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Collections.Generic.IDictionary`2&lt;string, class System.Collections.Generic.IList`1&lt;string&gt;&gt; ColumnEncryptionTrustedMasterKeyPaths" />
      <MemberSignature Language="DocId" Value="P:System.Data.SqlClient.SqlConnection.ColumnEncryptionTrustedMasterKeyPaths" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property ColumnEncryptionTrustedMasterKeyPaths As IDictionary(Of String, IList(Of String))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Collections::Generic::IDictionary&lt;System::String ^, System::Collections::Generic::IList&lt;System::String ^&gt; ^&gt; ^ ColumnEncryptionTrustedMasterKeyPaths { System::Collections::Generic::IDictionary&lt;System::String ^, System::Collections::Generic::IList&lt;System::String ^&gt; ^&gt; ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IDictionary&lt;System.String,System.Collections.Generic.IList&lt;System.String&gt;&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Le permite establecer una lista de rutas de acceso a clave de confianza para un servidor de base de datos. Si durante el procesamiento de una consulta de aplicación, el controlador recibe una ruta de acceso de clave que no se encuentre en la lista, la consulta generará error. Esta propiedad ofrece protección adicional contra los ataques de seguridad que implican un SQL que está en peligro al ofrecer rutas de acceso de clave falsas, lo que puede provocar la pérdida de las credenciales del almacén de claves.</summary>
        <value>La lista de las rutas de acceso de claves maestras de confianza para el cifrado de columnas.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ConnectionString">
      <MemberSignature Language="C#" Value="public override string ConnectionString { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ConnectionString" />
      <MemberSignature Language="DocId" Value="P:System.Data.SqlClient.SqlConnection.ConnectionString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Property ConnectionString As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ ConnectionString { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Data.IDbConnection.ConnectionString</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Editor("Microsoft.VSDesigner.Data.SQL.Design.SqlConnectionStringEditor, Microsoft.VSDesigner, Version=0.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.RecommendedAsConfigurable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.RefreshProperties</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene o establece la cadena que se utiliza para abrir una base de datos de SQL Server.</summary>
        <value>Cadena de conexión que incluye el nombre de la base de datos de origen y otros parámetros necesarios para establecer la conexión inicial. El valor predeterminado es una cadena vacía.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Data.SqlClient.SqlConnection.ConnectionString%2A> es similar a una cadena de conexión OLE DB, pero no es idéntica. A diferencia de OLE DB o ADO, la cadena de conexión que se devuelve es el mismo que el conjunto de usuarios <xref:System.Data.SqlClient.SqlConnection.ConnectionString%2A>, menos la información de seguridad si se establece el valor de Persist Security Info en `false` (valor predeterminado). El proveedor de datos de .NET Framework para SQL Server no se conservan o devolver la contraseña en una cadena de conexión a menos que establezca Persist Security Info `true`.  
  
 Puede usar el <xref:System.Data.SqlClient.SqlConnection.ConnectionString%2A> propiedad para conectarse a una base de datos. En el ejemplo siguiente se muestra la cadena de conexión típica.  
  
```  
"Persist Security Info=False;Integrated Security=true;Initial Catalog=Northwind;server=(local)"  
```  
  
 Use la nueva <xref:System.Data.SqlClient.SqlConnectionStringBuilder> para construir cadenas de conexión válidas en tiempo de ejecución. Para obtener más información, consulte [generadores de cadenas de conexión](~/docs/framework/data/adonet/connection-string-builders.md).  
  
 El <xref:System.Data.SqlClient.SqlConnection.ConnectionString%2A> propiedad se puede establecer únicamente cuando se cierra la conexión. Muchos de los valores de cadena de conexión tienen propiedades correspondientes de sólo lectura. Cuando se establece la cadena de conexión, se actualizan estas propiedades, excepto cuando se detecta un error. En este caso, ninguna de las propiedades se actualizan. <xref:System.Data.SqlClient.SqlConnection> propiedades devuelven únicamente los valores que figuran en la <xref:System.Data.SqlClient.SqlConnection.ConnectionString%2A>.  
  
 Para conectarse a un equipo local, especifique "(local)" para el servidor. Si no se especifica un nombre de servidor, se intentará una conexión a la instancia predeterminada en el equipo local.  
  
 Restablecer el <xref:System.Data.SqlClient.SqlConnection.ConnectionString%2A> en una conexión cerrada, se restablecen todos los valores de cadena de conexión (y propiedades relacionadas) incluida la contraseña. Por ejemplo, si se establece una cadena de conexión que incluye "base de datos = AdventureWorks" y, a continuación, restablece la cadena de conexión en "origen de datos = myserver; Integrated Security = true", la <xref:System.Data.SqlClient.SqlConnection.Database%2A> propiedad ya no está establecida en "AdventureWorks".  
  
 La cadena de conexión se analiza inmediatamente después de que se va a establecer. Si se detectan errores de sintaxis al analizar, una excepción en tiempo de ejecución, como <xref:System.ArgumentException>, se genera. Otros errores se pueden encontrar cuando se realiza un intento para abrir la conexión.  
  
 El formato básico de una cadena de conexión incluye una serie de pares de palabra clave/valor separados por punto y coma. El signo igual (=) asocia cada palabra clave a su valor. Para incluir valores que contengan un punto y coma, un carácter de comilla simple o un carácter de comillas dobles, el valor debe ir entre comillas dobles. Si el valor contiene un punto y coma y un carácter de comillas dobles, el valor puede ir entre comillas simples. La comilla simple también es útil si el valor comienza por un carácter de comillas dobles. Por el contrario, las comillas dobles puede utilizarse si el valor comienza con una comilla simple. Si el valor contiene caracteres de comillas simples y comillas dobles, el carácter de comilla que se encierra el valor debe duplicarse cada vez que se produce dentro del valor.  
  
 Para incluir espacios finales o anteriores en el valor de cadena, el valor debe incluirse entre comillas simples o dobles comillas. Se omiten los espacios iniciales o finales alrededor de integer, Boolean o valores enumerados, incluso si entre comillas. Sin embargo, se conservan los espacios dentro de una palabra clave de literales de cadena o un valor. Puede utilizarse comillas simples o dobles dentro de una cadena de conexión sin usar delimitadores (por ejemplo, Data Source = My ' Server o el origen de datos = my Server"), a menos que un carácter de comillas es el primer o último carácter en el valor.  
  
 Palabras clave no distinguen entre mayúsculas y minúsculas.  
  
 En la tabla siguiente se muestra los nombres válidos para los valores de palabra clave dentro de la <xref:System.Data.SqlClient.SqlConnection.ConnectionString%2A>.  
  
  En la lista siguiente contiene los nombres válidos para los valores dentro de la agrupación de conexiones del <xref:System.Data.SqlClient.SqlConnection.ConnectionString%2A>. Para obtener más información, vea [Agrupación de conexiones de SQL Server (ADO.NET)](~/docs/framework/data/adonet/sql-server-connection-pooling.md).  
  
-   Duración de la conexión (o tiempo de espera de equilibrio de carga)  
  
-   Dar de alta  
  
-   Max Pool Size  
  
-   Min Pool Size  
  
-   Agrupación  
  
 Al establecer la palabra clave o valores que requieren un valor booleano de agrupación de conexiones, se puede utilizar 'yes' en lugar de 'true' y 'no' en lugar de 'false'. Valores enteros se representan como cadenas.  
  
> [!NOTE]
>  El proveedor de datos de .NET Framework para SQL Server utiliza su propio protocolo para comunicarse con SQL Server. Por lo tanto, no admite el uso de un nombre de origen de datos ODBC (DSN) al conectarse a SQL Server porque no agrega una capa ODBC.  
  
> [!NOTE]
>  No se admiten archivos universal data link (UDL) para el proveedor de datos de .NET Framework para SQL Server.  
  
> [!CAUTION]
>  En esta versión, la aplicación debe tener cuidado al construir una cadena de conexión basada en la entrada del usuario (por ejemplo, al recuperar la información de identificador y la contraseña de usuario de un cuadro de diálogo y agregarla a la cadena de conexión). La aplicación debe asegurarse de que un usuario no puede incrustar parámetros de cadena de conexión adicionales en estos valores (por ejemplo, escribir una contraseña como "validpassword; base de datos = somedb" en un intento para adjuntar una base de datos diferente). Si necesita construir cadenas de conexión basadas en la entrada de usuario, use la nueva <xref:System.Data.SqlClient.SqlConnectionStringBuilder>, que valida la cadena de conexión y ayuda a eliminar este problema. Vea [generadores de cadenas de conexión](~/docs/framework/data/adonet/connection-string-builders.md) para obtener más información.  
  
   
  
## Examples  
 En el ejemplo siguiente se crea un <xref:System.Data.SqlClient.SqlConnection> y establece el <xref:System.Data.SqlClient.SqlConnection.ConnectionString%2A> propiedad antes de abrir la conexión.  
  
 [!code-csharp[Classic WebData SqlConnection.ConnectionString Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData SqlConnection.ConnectionString Example/CS/source.cs#1)]
 [!code-vb[Classic WebData SqlConnection.ConnectionString Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData SqlConnection.ConnectionString Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Se proporcionó un argumento de la cadena de conexión no válido, o no se proporcionó un argumento de la cadena de conexión requerido.</exception>
      </Docs>
    </Member>
    <Member MemberName="ConnectionTimeout">
      <MemberSignature Language="C#" Value="public override int ConnectionTimeout { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 ConnectionTimeout" />
      <MemberSignature Language="DocId" Value="P:System.Data.SqlClient.SqlConnection.ConnectionTimeout" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property ConnectionTimeout As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property int ConnectionTimeout { int get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Data.IDbConnection.ConnectionTimeout</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene el tiempo de espera para intentar establecer una conexión antes de detenerse y generar un error.</summary>
        <value>El tiempo (en segundos) que se debe esperar para que se abra una conexión. El valor predeterminado es 15 segundos.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Puede establecer la cantidad de tiempo de espera de una conexión en tiempo de espera mediante el uso de la `Connect Timeout` o `Connection Timeout` palabras clave en la cadena de conexión. Un valor de 0 indica sin límite y debería evitarse en un <xref:System.Data.SqlClient.SqlConnection.ConnectionString%2A> porque espera indefinidamente a que un intento de conexión.  
  
   
  
## Examples  
 En el ejemplo siguiente se crea un <xref:System.Data.SqlClient.SqlConnection> y establece el `Connection Timeout` a 30 segundos en la cadena de conexión. El código se abre la conexión y muestra el <xref:System.Data.SqlClient.SqlConnection.ConnectionTimeout%2A> propiedad en la ventana de consola.  
  
 [!code-csharp[Classic WebData SqlConnection.ConnectionTimeout Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData SqlConnection.ConnectionTimeout Example/CS/source.cs#1)]
 [!code-vb[Classic WebData SqlConnection.ConnectionTimeout Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData SqlConnection.ConnectionTimeout Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">El valor establecido es menor que 0.</exception>
      </Docs>
    </Member>
    <Member MemberName="CreateCommand">
      <MemberSignature Language="C#" Value="public System.Data.SqlClient.SqlCommand CreateCommand ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Data.SqlClient.SqlCommand CreateCommand() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlConnection.CreateCommand" />
      <MemberSignature Language="VB.NET" Value="Public Function CreateCommand () As SqlCommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Data::SqlClient::SqlCommand ^ CreateCommand();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.SqlClient.SqlCommand</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Crea y devuelve un objeto <see cref="T:System.Data.SqlClient.SqlCommand" /> asociado a la conexión <see cref="T:System.Data.SqlClient.SqlConnection" />.</summary>
        <returns>Un objeto <see cref="T:System.Data.SqlClient.SqlCommand" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 [!code-csharp[SqlConnection_CreateCommand#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/sqlconnection_createcommand/cs/source.cs#1)]
 [!code-vb[SqlConnection_CreateCommand#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/sqlconnection_createcommand/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateDbCommand">
      <MemberSignature Language="C#" Value="protected override System.Data.Common.DbCommand CreateDbCommand ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Data.Common.DbCommand CreateDbCommand() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlConnection.CreateDbCommand" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function CreateDbCommand () As DbCommand" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override System::Data::Common::DbCommand ^ CreateDbCommand();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Common.DbCommand</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Credential">
      <MemberSignature Language="C#" Value="public System.Data.SqlClient.SqlCredential Credential { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Data.SqlClient.SqlCredential Credential" />
      <MemberSignature Language="DocId" Value="P:System.Data.SqlClient.SqlConnection.Credential" />
      <MemberSignature Language="VB.NET" Value="Public Property Credential As SqlCredential" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Data::SqlClient::SqlCredential ^ Credential { System::Data::SqlClient::SqlCredential ^ get(); void set(System::Data::SqlClient::SqlCredential ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Data.SqlClient.SqlCredential</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene o establece el objeto <see cref="T:System.Data.SqlClient.SqlCredential" /> para esta conexión.</summary>
        <value>Objeto <see cref="T:System.Data.SqlClient.SqlCredential" /> para esta conexión.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `Persist Security Info = true` es necesario para obtener el valor de la <xref:System.Data.SqlClient.SqlCredential> objeto con <xref:System.Data.SqlClient.SqlConnection.Credential%2A>.  
  
 El valor predeterminado de <xref:System.Data.SqlClient.SqlConnection.Credential%2A> es null.  
  
 Un <xref:System.InvalidOperationException> se producirá la excepción:  
  
-   Si <xref:System.Data.SqlClient.SqlConnection.Credential%2A> está establecido en una conexión abierta.  
  
-   Si <xref:System.Data.SqlClient.SqlConnection.Credential%2A> se establece cuando `Context Connection=true`.  
  
-   Si <xref:System.Data.SqlClient.SqlConnection.Credential%2A> se establece cuando `Integrated Security = true`.  
  
-   Si <xref:System.Data.SqlClient.SqlConnection.Credential%2A> se establece cuando se utiliza la cadena de conexión `Password`.  
  
-   Si <xref:System.Data.SqlClient.SqlConnection.Credential%2A> se establece cuando se utiliza la cadena de conexión `UserID`.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Credentials">
      <MemberSignature Language="C#" Value="public System.Data.SqlClient.SqlCredential Credentials { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Data.SqlClient.SqlCredential Credentials" />
      <MemberSignature Language="DocId" Value="P:System.Data.SqlClient.SqlConnection.Credentials" />
      <MemberSignature Language="VB.NET" Value="Public Property Credentials As SqlCredential" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Data::SqlClient::SqlCredential ^ Credentials { System::Data::SqlClient::SqlCredential ^ get(); void set(System::Data::SqlClient::SqlCredential ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.SqlClient.SqlCredential</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Database">
      <MemberSignature Language="C#" Value="public override string Database { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Database" />
      <MemberSignature Language="DocId" Value="P:System.Data.SqlClient.SqlConnection.Database" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property Database As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ Database { System::String ^ get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Data.IDbConnection.Database</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene el nombre de la base de datos actual o de la que se va a utilizar una vez que se abre la conexión.</summary>
        <value>Nombre de la base de datos actual o de la que se va a utilizar tras abrir una conexión. El valor predeterminado es una cadena vacía.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Data.SqlClient.SqlConnection.Database%2A> propiedad se actualiza dinámicamente. Si cambia la base de datos actual mediante una [!INCLUDE[tsql](~/includes/tsql-md.md)] instrucción o <xref:System.Data.SqlClient.SqlConnection.ChangeDatabase%2A> método, se envía un mensaje informativo y la propiedad se actualiza automáticamente.  
  
   
  
## Examples  
 En el ejemplo siguiente se crea un <xref:System.Data.SqlClient.SqlConnection> y se muestran algunas de sus propiedades de solo lectura.  
  
 [!code-csharp[Classic WebData SqlConnection.Database Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData SqlConnection.Database Example/CS/source.cs#1)]
 [!code-vb[Classic WebData SqlConnection.Database Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData SqlConnection.Database Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DataSource">
      <MemberSignature Language="C#" Value="public override string DataSource { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string DataSource" />
      <MemberSignature Language="DocId" Value="P:System.Data.SqlClient.SqlConnection.DataSource" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property DataSource As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ DataSource { System::String ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene el nombre de la instancia de SQL Server con la que se va a establecer la conexión.</summary>
        <value>El nombre de la instancia de SQL Server que se va a conectar. El valor predeterminado es una cadena vacía.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  El <xref:System.Data.SqlClient.SqlConnection.DataSource%2A> propiedad devuelve `null` si la cadena de conexión para el <xref:System.Data.SqlClient.SqlConnection> es "conexión de contexto = true".  
  
   
  
## Examples  
 En el ejemplo siguiente se crea un <xref:System.Data.SqlClient.SqlConnection> y se muestran algunas de sus propiedades de solo lectura.  
  
 [!code-csharp[Classic WebData SqlConnection.DataSource Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData SqlConnection.DataSource Example/CS/source.cs#1)]
 [!code-vb[Classic WebData SqlConnection.DataSource Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData SqlConnection.DataSource Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DbProviderFactory">
      <MemberSignature Language="C#" Value="protected override System.Data.Common.DbProviderFactory DbProviderFactory { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Data.Common.DbProviderFactory DbProviderFactory" />
      <MemberSignature Language="DocId" Value="P:System.Data.SqlClient.SqlConnection.DbProviderFactory" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides ReadOnly Property DbProviderFactory As DbProviderFactory" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual property System::Data::Common::DbProviderFactory ^ DbProviderFactory { System::Data::Common::DbProviderFactory ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Common.DbProviderFactory</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected override void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlConnection.Dispose(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub Dispose (disposing As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void Dispose(bool disposing);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EnlistDistributedTransaction">
      <MemberSignature Language="C#" Value="public void EnlistDistributedTransaction (System.EnterpriseServices.ITransaction transaction);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EnlistDistributedTransaction(class System.EnterpriseServices.ITransaction transaction) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlConnection.EnlistDistributedTransaction(System.EnterpriseServices.ITransaction)" />
      <MemberSignature Language="VB.NET" Value="Public Sub EnlistDistributedTransaction (transaction As ITransaction)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EnlistDistributedTransaction(System::EnterpriseServices::ITransaction ^ transaction);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="transaction" Type="System.EnterpriseServices.ITransaction" />
      </Parameters>
      <Docs>
        <param name="transaction">Referencia a una transacción <see cref="T:System.EnterpriseServices.ITransaction" /> existente en la que se va a dar de alta.</param>
        <summary>Se da de alta en la transacción especificada como una transacción distribuida.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Puede usar el <xref:System.Data.SqlClient.SqlConnection.EnlistTransaction%2A> método dar de alta en una transacción distribuida. Dado que se da de alta una conexión en un <xref:System.Transactions.Transaction> instancia, **EnlistTransaction** aprovecha la funcionalidad disponible en el <xref:System.Transactions> espacio de nombres para la administración de transacciones distribuidas, lo que preferible **EnlistDistributedTransaction** para este propósito. Para obtener más información, consulte [transacciones distribuidas](~/docs/framework/data/adonet/distributed-transactions.md).  
  
 Aún puede dar de alta en una transacción distribuida existente mediante el **EnlistDistributedTransaction** método si la inscripción automática está deshabilitada. Dar de alta en una transacción distribuida existente garantiza que, si la transacción se confirma o revierte, las modificaciones realizadas por el código en el origen de datos son también confirmadas o revertidas.  
  
 `EnlistDistributedTransaction` Devuelve una excepción si el <xref:System.Data.SqlClient.SqlConnection> ya se ha iniciado una transacción mediante <xref:System.Data.SqlClient.SqlConnection.BeginTransaction%2A>. Sin embargo, si la transacción es una transacción local iniciada en el origen de datos (por ejemplo, al ejecutar de forma explícita la instrucción BEGIN TRANSACTION mediante un <xref:System.Data.SqlClient.SqlCommand> objeto), **EnlistDistributedTransaction** revierte la transacción local y se da de alta en la transacción distribuida existente cuando se le solicite. No recibirá aviso de que se revirtió la transacción local, y el responsable de administrar las transacciones locales no iniciada mediante <xref:System.Data.SqlClient.SqlConnection.BeginTransaction%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EnlistTransaction">
      <MemberSignature Language="C#" Value="public override void EnlistTransaction (System.Transactions.Transaction transaction);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void EnlistTransaction(class System.Transactions.Transaction transaction) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlConnection.EnlistTransaction(System.Transactions.Transaction)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void EnlistTransaction(System::Transactions::Transaction ^ transaction);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="transaction" Type="System.Transactions.Transaction" />
      </Parameters>
      <Docs>
        <param name="transaction">Referencia a una transacción <see cref="T:System.Transactions.Transaction" /> existente en la que se va a dar de alta.</param>
        <summary>Se da de alta en la transacción especificada como una transacción distribuida.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Puede usar el <xref:System.Data.SqlClient.SqlConnection.EnlistTransaction%2A> método dar de alta en una transacción distribuida. Porque se da de alta una conexión en un <xref:System.Transactions.Transaction> instancia, **EnlistTransaction** aprovecha la funcionalidad disponible en la <xref:System.Transactions> espacio de nombres para la administración de transacciones distribuidas, lo que preferible **EnlistDistributedTransaction**, que usa un **System.EnterpriseServices.ITransaction** objeto. También tiene una semántica ligeramente diferente: una vez que una conexión se inscribe explícitamente en una transacción, no se puede dar de baja o dado de alta en otra transacción hasta que finaliza la primera transacción. Para obtener más información sobre las transacciones distribuidas, consulte [transacciones distribuidas](~/docs/framework/data/adonet/distributed-transactions.md).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FireInfoMessageEventOnUserErrors">
      <MemberSignature Language="C#" Value="public bool FireInfoMessageEventOnUserErrors { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool FireInfoMessageEventOnUserErrors" />
      <MemberSignature Language="DocId" Value="P:System.Data.SqlClient.SqlConnection.FireInfoMessageEventOnUserErrors" />
      <MemberSignature Language="VB.NET" Value="Public Property FireInfoMessageEventOnUserErrors As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool FireInfoMessageEventOnUserErrors { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene o establece la propiedad <see cref="P:System.Data.SqlClient.SqlConnection.FireInfoMessageEventOnUserErrors" />.</summary>
        <value>
          <see langword="true" /> si se ha establecido la propiedad <see cref="P:System.Data.SqlClient.SqlConnection.FireInfoMessageEventOnUserErrors" />; de lo contrario, <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Al establecer <xref:System.Data.SqlClient.SqlConnection.FireInfoMessageEventOnUserErrors%2A> a `true`, los errores que anteriormente se trataban como excepciones se controlan ahora como <xref:System.Data.SqlClient.SqlConnection.InfoMessage> eventos. Todos los eventos se desencadenan inmediatamente y se administran con el controlador de eventos. Si es <xref:System.Data.SqlClient.SqlConnection.FireInfoMessageEventOnUserErrors%2A> está establecido en `false`, a continuación, <xref:System.Data.SqlClient.SqlConnection.InfoMessage> se controlan los eventos al final del procedimiento.  
  
> [!NOTE]
>  Un error con nivel de gravedad de 17 o superior que hace que el servidor deje de procesar el comando debe tratarse como una excepción. En este caso, se inicia una excepción, independientemente del modo en que se controle el error en el evento <xref:System.Data.SqlClient.SqlConnection.InfoMessage>.  
  
 Para obtener más información sobre cómo trabajar con eventos, vea [eventos de conexión](~/docs/framework/data/adonet/connection-events.md). Para obtener más información sobre los errores generados por el motor de SQL Server, vea los libros en pantalla de SQL Server.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetSchema">
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Devuelve información de esquema para el origen de datos de <see cref="T:System.Data.SqlClient.SqlConnection" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si se intenta recuperar la información de esquema para más de un procedimiento almacenado con control de versiones, solo se devuelve el esquema correspondiente al más reciente. Para obtener más información sobre los procedimientos almacenados con control de versiones, vea los libros en pantalla de SQL Server.  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetSchema">
      <MemberSignature Language="C#" Value="public override System.Data.DataTable GetSchema ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Data.DataTable GetSchema() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlConnection.GetSchema" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetSchema () As DataTable" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Data::DataTable ^ GetSchema();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.DataTable</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Devuelve información de esquema para el origen de datos de <see cref="T:System.Data.SqlClient.SqlConnection" />. Para obtener más información sobre el esquema, vea [Colecciones de esquemas de SQL Server](http://msdn.microsoft.com/library/ms254969.aspx).</summary>
        <returns>
          <see cref="T:System.Data.DataTable" /> que contiene información de esquema.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetSchema">
      <MemberSignature Language="C#" Value="public override System.Data.DataTable GetSchema (string collectionName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Data.DataTable GetSchema(string collectionName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlConnection.GetSchema(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetSchema (collectionName As String) As DataTable" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Data::DataTable ^ GetSchema(System::String ^ collectionName);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.DataTable</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="collectionName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="collectionName">Especifica el nombre del esquema que se va a devolver.</param>
        <summary>Devuelve información de esquema para el origen de datos de <see cref="T:System.Data.SqlClient.SqlConnection" /> utilizando la cadena especificada para el nombre del esquema.</summary>
        <returns>
          <see cref="T:System.Data.DataTable" /> que contiene información de esquema.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Necesita la información del esquema de la base de datos, tablas o columnas. En este ejemplo:  
  
-   GetSchema y se utiliza para obtener información de esquema.  
  
-   Usar restricciones de esquema para obtener la información especificada.  
  
-   Obtiene información de esquema de la base de datos, tablas y algunas columnas.  
  
 Antes de ejecutar el ejemplo, debe crear la base de datos de ejemplo, con los siguientes [!INCLUDE[tsql](~/includes/tsql-md.md)]:  
  
```  
USE [master]  
GO  
  
CREATE DATABASE [MySchool]   
  
GO  
  
USE [MySchool]  
GO  
  
SET ANSI_NULLS ON  
GO  
SET QUOTED_IDENTIFIER ON  
GO  
CREATE TABLE [dbo].[Course]([CourseID] [nvarchar](10) NOT NULL,  
[Year] [smallint] NOT NULL,  
[Title] [nvarchar](100) NOT NULL,  
[Credits] [int] NOT NULL,  
[DepartmentID] [int] NOT NULL,  
 CONSTRAINT [PK_Course] PRIMARY KEY CLUSTERED   
(  
[CourseID] ASC,  
[Year] ASC  
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]) ON [PRIMARY]  
  
GO  
  
SET ANSI_NULLS ON  
GO  
SET QUOTED_IDENTIFIER ON  
GO  
CREATE TABLE [dbo].[Department]([DepartmentID] [int] IDENTITY(1,1) NOT NULL,  
[Name] [nvarchar](50) NOT NULL,  
[Budget] [money] NOT NULL,  
[StartDate] [datetime] NOT NULL,  
[Administrator] [int] NULL,  
 CONSTRAINT [PK_Department] PRIMARY KEY CLUSTERED   
(  
[DepartmentID] ASC  
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]) ON [PRIMARY]  
  
GO  
  
INSERT [dbo].[Course] ([CourseID], [Year], [Title], [Credits], [DepartmentID]) VALUES (N'C1045', 2012, N'Calculus', 4, 7)  
INSERT [dbo].[Course] ([CourseID], [Year], [Title], [Credits], [DepartmentID]) VALUES (N'C1061', 2012, N'Physics', 4, 1)  
INSERT [dbo].[Course] ([CourseID], [Year], [Title], [Credits], [DepartmentID]) VALUES (N'C2021', 2012, N'Composition', 3, 2)  
INSERT [dbo].[Course] ([CourseID], [Year], [Title], [Credits], [DepartmentID]) VALUES (N'C2042', 2012, N'Literature', 4, 2)  
  
SET IDENTITY_INSERT [dbo].[Department] ON   
  
INSERT [dbo].[Department] ([DepartmentID], [Name], [Budget], [StartDate], [Administrator]) VALUES (1, N'Engineering', 350000.0000, CAST(0x0000999C00000000 AS DateTime), 2)  
INSERT [dbo].[Department] ([DepartmentID], [Name], [Budget], [StartDate], [Administrator]) VALUES (2, N'English', 120000.0000, CAST(0x0000999C00000000 AS DateTime), 6)  
INSERT [dbo].[Department] ([DepartmentID], [Name], [Budget], [StartDate], [Administrator]) VALUES (4, N'Economics', 200000.0000, CAST(0x0000999C00000000 AS DateTime), 4)  
INSERT [dbo].[Department] ([DepartmentID], [Name], [Budget], [StartDate], [Administrator]) VALUES (7, N'Mathematics', 250024.0000, CAST(0x0000999C00000000 AS DateTime), 3)  
SET IDENTITY_INSERT [dbo].[Department] OFF  
  
ALTER TABLE [dbo].[Course]  WITH CHECK ADD  CONSTRAINT [FK_Course_Department] FOREIGN KEY([DepartmentID])  
REFERENCES [dbo].[Department] ([DepartmentID])  
GO  
ALTER TABLE [dbo].[Course] CHECK CONSTRAINT [FK_Course_Department]  
GO  
```  
  
 [Cómo obtener la información de esquema de base de datos](https://code.msdn.microsoft.com/How-to-Get-Schema-b66d62e2) tiene versiones de C# y Visual Basic de este ejemplo de código en un proyecto de Visual Studio.  
  
```  
using System;  
using System.Data;  
using System.Data.SqlClient;  
  
class Program {  
   static void Main(string[] args) {  
  
      using (SqlConnection conn = new SqlConnection("Data Source=(local);Initial Catalog=MySchool;Integrated Security=True;Asynchronous Processing=true;")) {  
         conn.Open();  
  
         // Get the Meta Data for Supported Schema Collections  
         DataTable metaDataTable = conn.GetSchema("MetaDataCollections");  
  
         Console.WriteLine("Meta Data for Supported Schema Collections:");  
         ShowDataTable(metaDataTable, 25);  
         Console.WriteLine();  
  
         // Get the schema information of Databases in your instance  
         DataTable databasesSchemaTable = conn.GetSchema("Databases");  
  
         Console.WriteLine("Schema Information of Databases:");  
         ShowDataTable(databasesSchemaTable, 25);  
         Console.WriteLine();  
  
         // First, get schema information of all the tables in current database;  
         DataTable allTablesSchemaTable = conn.GetSchema("Tables");  
  
         Console.WriteLine("Schema Information of All Tables:");  
         ShowDataTable(allTablesSchemaTable, 20);  
         Console.WriteLine();  
  
         // You can specify the Catalog, Schema, Table Name, Table Type to get   
         // the specified table(s).  
         // You can use four restrictions for Table, so you should create a 4 members array.  
         String[] tableRestrictions = new String[4];  
  
         // For the array, 0-member represents Catalog; 1-member represents Schema;   
         // 2-member represents Table Name; 3-member represents Table Type.   
         // Now we specify the Table Name of the table what we want to get schema information.  
         tableRestrictions[2] = "Course";  
  
         DataTable courseTableSchemaTable = conn.GetSchema("Tables", tableRestrictions);  
  
         Console.WriteLine("Schema Information of Course Tables:");  
         ShowDataTable(courseTableSchemaTable, 20);  
         Console.WriteLine();  
  
         // First, get schema information of all the columns in current database.  
         DataTable allColumnsSchemaTable = conn.GetSchema("Columns");  
  
         Console.WriteLine("Schema Information of All Columns:");  
         ShowColumns(allColumnsSchemaTable);  
         Console.WriteLine();  
  
         // You can specify the Catalog, Schema, Table Name, Column Name to get the specified column(s).  
         // You can use four restrictions for Column, so you should create a 4 members array.  
         String[] columnRestrictions = new String[4];  
  
         // For the array, 0-member represents Catalog; 1-member represents Schema;   
         // 2-member represents Table Name; 3-member represents Column Name.   
         // Now we specify the Table_Name and Column_Name of the columns what we want to get schema information.  
         columnRestrictions[2] = "Course";  
         columnRestrictions[3] = "DepartmentID";  
  
         DataTable departmentIDSchemaTable = conn.GetSchema("Columns", columnRestrictions);  
  
         Console.WriteLine("Schema Information of DepartmentID Column in Course Table:");  
         ShowColumns(departmentIDSchemaTable);  
         Console.WriteLine();  
  
         // First, get schema information of all the IndexColumns in current database  
         DataTable allIndexColumnsSchemaTable = conn.GetSchema("IndexColumns");  
  
         Console.WriteLine("Schema Information of All IndexColumns:");  
         ShowIndexColumns(allIndexColumnsSchemaTable);  
         Console.WriteLine();  
  
         // You can specify the Catalog, Schema, Table Name, Constraint Name, Column Name to   
         // get the specified column(s).  
         // You can use five restrictions for Column, so you should create a 5 members array.  
         String[] indexColumnsRestrictions = new String[5];  
  
         // For the array, 0-member represents Catalog; 1-member represents Schema;   
         // 2-member represents Table Name; 3-member represents Constraint Name;4-member represents Column Name.   
         // Now we specify the Table_Name and Column_Name of the columns what we want to get schema information.  
         indexColumnsRestrictions[2] = "Course";  
         indexColumnsRestrictions[4] = "CourseID";  
  
         DataTable courseIdIndexSchemaTable = conn.GetSchema("IndexColumns", indexColumnsRestrictions);  
  
         Console.WriteLine("Index Schema Information of CourseID Column in Course Table:");  
         ShowIndexColumns(courseIdIndexSchemaTable);  
         Console.WriteLine();  
      }  
  
      Console.WriteLine("Please press any key to exit...");  
      Console.ReadKey();  
   }  
  
   private static void ShowDataTable(DataTable table, Int32 length) {  
      foreach (DataColumn col in table.Columns) {  
         Console.Write("{0,-" + length + "}", col.ColumnName);  
      }  
      Console.WriteLine();  
  
      foreach (DataRow row in table.Rows) {  
         foreach (DataColumn col in table.Columns) {  
            if (col.DataType.Equals(typeof(DateTime)))  
               Console.Write("{0,-" + length + ":d}", row[col]);  
            else if (col.DataType.Equals(typeof(Decimal)))  
               Console.Write("{0,-" + length + ":C}", row[col]);  
            else  
               Console.Write("{0,-" + length + "}", row[col]);  
         }  
         Console.WriteLine();  
      }  
   }  
  
   private static void ShowDataTable(DataTable table) {  
      ShowDataTable(table, 14);  
   }  
  
   private static void ShowColumns(DataTable columnsTable) {  
      var selectedRows = from info in columnsTable.AsEnumerable()  
                         select new {  
                            TableCatalog = info["TABLE_CATALOG"],  
                            TableSchema = info["TABLE_SCHEMA"],  
                            TableName = info["TABLE_NAME"],  
                            ColumnName = info["COLUMN_NAME"],  
                            DataType = info["DATA_TYPE"]  
                         };  
  
      Console.WriteLine("{0,-15}{1,-15}{2,-15}{3,-15}{4,-15}", "TableCatalog", "TABLE_SCHEMA",  
          "TABLE_NAME", "COLUMN_NAME", "DATA_TYPE");  
      foreach (var row in selectedRows) {  
         Console.WriteLine("{0,-15}{1,-15}{2,-15}{3,-15}{4,-15}", row.TableCatalog,  
             row.TableSchema, row.TableName, row.ColumnName, row.DataType);  
      }  
   }  
  
   private static void ShowIndexColumns(DataTable indexColumnsTable) {  
      var selectedRows = from info in indexColumnsTable.AsEnumerable()  
                         select new {  
                            TableSchema = info["table_schema"],  
                            TableName = info["table_name"],  
                            ColumnName = info["column_name"],  
                            ConstraintSchema = info["constraint_schema"],  
                            ConstraintName = info["constraint_name"],  
                            KeyType = info["KeyType"]  
                         };  
  
      Console.WriteLine("{0,-14}{1,-11}{2,-14}{3,-18}{4,-16}{5,-8}", "table_schema", "table_name", "column_name", "constraint_schema", "constraint_name", "KeyType");  
      foreach (var row in selectedRows) {  
         Console.WriteLine("{0,-14}{1,-11}{2,-14}{3,-18}{4,-16}{5,-8}", row.TableSchema,  
             row.TableName, row.ColumnName, row.ConstraintSchema, row.ConstraintName, row.KeyType);  
      }  
   }  
}  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">El valor de <paramref name="collectionName" /> que se especifica es null.</exception>
      </Docs>
    </Member>
    <Member MemberName="GetSchema">
      <MemberSignature Language="C#" Value="public override System.Data.DataTable GetSchema (string collectionName, string[] restrictionValues);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Data.DataTable GetSchema(string collectionName, string[] restrictionValues) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlConnection.GetSchema(System.String,System.String[])" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetSchema (collectionName As String, restrictionValues As String()) As DataTable" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Data::DataTable ^ GetSchema(System::String ^ collectionName, cli::array &lt;System::String ^&gt; ^ restrictionValues);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.DataTable</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="collectionName" Type="System.String" />
        <Parameter Name="restrictionValues" Type="System.String[]" />
      </Parameters>
      <Docs>
        <param name="collectionName">Especifica el nombre del esquema que se va a devolver.</param>
        <param name="restrictionValues">Conjunto de valores de restricción para el esquema solicitado.</param>
        <summary>Devuelve información de esquema para el origen de datos de <see cref="T:System.Data.SqlClient.SqlConnection" /> utilizando la cadena especificada para el nombre del esquema y la matriz de cadena determinada para los valores de restricción.</summary>
        <returns>
          <see cref="T:System.Data.DataTable" /> que contiene información de esquema.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El `restrictionValues` puede proporcionar el parámetro *n* profundidad de valores, que se especifican en la colección de restricciones para una recopilación específica. Para establecer los valores en una restricción dada y no establecer los valores de otras restricciones, debe establecer las restricciones anteriores `null` y, a continuación, copie el valor apropiado para la restricción de que desea especificar un valor para.  
  
 Un ejemplo de esto es la colección "Tables". Si la colección "Tables" tiene tres restricciones--base de datos, propietario, y el nombre de tabla y desea obtener únicamente las tablas asociadas al propietario "Carl", tiene que pasar los valores siguientes: null y "Carl". Si no se pasa un valor de restricción, se usan los valores predeterminados para esa restricción. Se trata de la misma asignación como pasando `null`, que es diferente de pasar una cadena vacía para el valor del parámetro. En ese caso, la cadena vacía ("") se considera que el valor para el parámetro especificado.  
  
 Para un ejemplo de código que muestra <xref:System.Data.SqlClient.SqlConnection.GetSchema%2A>, consulte <xref:System.Data.SqlClient.SqlConnection.GetSchema%2A>.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">El valor de <paramref name="collectionName" /> que se especifica es null.</exception>
        <altmember cref="M:System.Data.SqlClient.SqlConnection.GetSchema" />
      </Docs>
    </Member>
    <Member MemberName="InfoMessage">
      <MemberSignature Language="C#" Value="public event System.Data.SqlClient.SqlInfoMessageEventHandler InfoMessage;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Data.SqlClient.SqlInfoMessageEventHandler InfoMessage" />
      <MemberSignature Language="DocId" Value="E:System.Data.SqlClient.SqlConnection.InfoMessage" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event InfoMessage As SqlInfoMessageEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Data::SqlClient::SqlInfoMessageEventHandler ^ InfoMessage;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.SqlClient.SqlInfoMessageEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Se produce cuando SQL Server devuelve un mensaje informativo o de advertencia.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Los clientes que van a procesar las advertencias o mensajes informativos enviados por el servidor deben crear un <xref:System.Data.SqlClient.SqlInfoMessageEventHandler> delegado para que escuche a este evento.  
  
 El <xref:System.Data.SqlClient.SqlConnection.InfoMessage> evento tiene lugar cuando un mensaje con una gravedad de 10 o menos devuelto por SQL Server. Los mensajes que tienen una gravedad entre 11 y 20 generan un error y los mensajes que tienen una gravedad mayor que 20 causan la conexión se cierre. Para obtener más información sobre los niveles de error de SQL Server, vea "Gravedades de Error de motor de base de datos" en libros en pantalla de SQL Server.  
  
 Para obtener más información y un ejemplo, vea [eventos de conexión](~/docs/framework/data/adonet/connection-events.md).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Open">
      <MemberSignature Language="C#" Value="public override void Open ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Open() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlConnection.Open" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Open ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Open();" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Data.IDbConnection.Open</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Abre una conexión de base de datos con los valores de propiedad que especifica <see cref="P:System.Data.SqlClient.SqlConnection.ConnectionString" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Data.SqlClient.SqlConnection> dibuja una conexión abierta del grupo de conexiones si está disponible. En caso contrario, Establece una nueva conexión a una instancia de SQL Server.  
  
> [!NOTE]
>  Si la <xref:System.Data.SqlClient.SqlConnection> queda fuera del ámbito, no se cierra. Por lo tanto, debe cerrar la conexión explícitamente mediante una llamada a <xref:System.Data.SqlClient.SqlConnection.Close%2A>.  
  
> [!NOTE]
>  Si especifica un número de puerto distinto de 1433 cuando intenta conectarse a una instancia de SQL Server y utiliza un protocolo distinto de TCP/IP, el <xref:System.Data.SqlClient.SqlConnection.Open%2A> método se produce un error. Para especificar un número de puerto distinto de 1433, incluya "server = machinename, número de puerto" en la cadena de conexión y el protocolo TCP/IP de uso.  
  
> [!NOTE]
>  El proveedor de datos de .NET Framework para SQL Server requiere el permiso de seguridad "Permitir llamadas a ensamblados no administrados" habilitada (<xref:System.Security.Permissions.SecurityPermission> con <xref:System.Security.Permissions.SecurityPermissionFlag> establecido en `UnmanagedCode`) para abrir un <xref:System.Data.SqlClient.SqlConnection> con la depuración de SQL habilitada.  
  
   
  
## Examples  
 En el ejemplo siguiente se crea un <xref:System.Data.SqlClient.SqlConnection>, se abre y muestra algunas de sus propiedades. La conexión se cierra automáticamente al final de la `using` bloque.  
  
 [!code-csharp[Classic WebData SqlConnection.Open Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData SqlConnection.Open Example/CS/source.cs#1)]
 [!code-vb[Classic WebData SqlConnection.Open Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData SqlConnection.Open Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">No se puede abrir una conexión sin especificar un servidor u origen de datos.  o bien La conexión ya está abierta.</exception>
        <exception cref="T:System.Data.SqlClient.SqlException">Se produjo un error de nivel de conexión mientras se abría la conexión. Si la propiedad <see cref="P:System.Data.SqlClient.SqlException.Number" /> contiene el valor 18487 o 18488, indica que la contraseña especificada expiró o debe restablecerse. Vea el método <see cref="M:System.Data.SqlClient.SqlConnection.ChangePassword(System.String,System.String)" /> para más información.  La etiqueta <see langword="&lt;system.data.localdb&gt;" /> en el archivo app.config tiene elementos no válidos o desconocidos.</exception>
        <exception cref="T:System.Configuration.ConfigurationErrorsException">Hay dos entradas con el mismo nombre en la sección <see langword="&lt;localdbinstances&gt;" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="OpenAsync">
      <MemberSignature Language="C#" Value="public override System.Threading.Tasks.Task OpenAsync (System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Threading.Tasks.Task OpenAsync(valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlConnection.OpenAsync(System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Threading::Tasks::Task ^ OpenAsync(System::Threading::CancellationToken cancellationToken);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="cancellationToken">Instrucción de cancelación.</param>
        <summary>Una versión asincrónica de <see cref="M:System.Data.SqlClient.SqlConnection.Open" />, que abre una conexión a bases de datos con los valores de propiedad especificados por <see cref="P:System.Data.SqlClient.SqlConnection.ConnectionString" />. Token de cancelación que se puede usar para solicitar que se abandone la operación antes de que transcurra el tiempo de espera de la conexión.  Las excepciones se propagarán mediante la tarea devuelta. Si el tiempo de espera de conexión transcurre sin conectar correctamente, la tarea devuelta se marcará como error con una excepción. La implementación devuelve una tarea sin bloquear el subproceso de llamada para las conexiones agrupadas y no agrupadas.</summary>
        <returns>Tarea que representa la operación asincrónica.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Después de llamar a <xref:System.Data.SqlClient.SqlConnection.OpenAsync%2A>, <xref:System.Data.SqlClient.SqlConnection.State%2A> debe devolver <xref:System.Data.ConnectionState.Connecting> hasta que el valor devuelto <xref:System.Threading.Tasks.Task> se ha completado. A continuación, si la conexión se realizó correctamente, <xref:System.Data.SqlClient.SqlConnection.State%2A> debe devolver <xref:System.Data.ConnectionState.Open>. Si se produce un error en la conexión, <xref:System.Data.SqlClient.SqlConnection.State%2A> debe devolver <xref:System.Data.ConnectionState.Closed>.  
  
 Una llamada a <xref:System.Data.SqlClient.SqlConnection.Close%2A> intentará cancelar o cerrar correspondiente <xref:System.Data.SqlClient.SqlConnection.OpenAsync%2A> llamar.  
  
 Para obtener más información sobre la programación asincrónica en el proveedor de datos de .NET Framework para SQL Server, vea [programación asincrónica](~/docs/framework/data/adonet/asynchronous-programming.md).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Llamar a <see cref="M:System.Data.SqlClient.SqlConnection.OpenAsync(System.Threading.CancellationToken)" /> más de una vez para la misma instancia antes de la finalización de la tarea.  
  
 <see langword="Context Connection=true" /> se especifica en la cadena de conexión.  Una conexión del grupo de conexiones no estaba disponible antes de transcurrir el tiempo de espera de conexión.</exception>
        <exception cref="T:System.Data.SqlClient.SqlException">Cualquier error devuelto por SQL Server que se produjo al abrir la conexión.</exception>
      </Docs>
    </Member>
    <Member MemberName="PacketSize">
      <MemberSignature Language="C#" Value="public int PacketSize { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 PacketSize" />
      <MemberSignature Language="DocId" Value="P:System.Data.SqlClient.SqlConnection.PacketSize" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property PacketSize As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int PacketSize { int get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene el tamaño en bytes de los paquetes de red utilizados para establecer comunicación con una instancia de SQL Server.</summary>
        <value>Tamaño de los paquetes de red, en bytes. El valor predeterminado es 8000.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si una aplicación realiza operaciones de copia masiva, o envía o recibe una gran cantidad de datos text o image, un tamaño de paquete mayor que el valor predeterminado puede mejorar la eficacia porque hace que la red menos operaciones lectura y escritura. Si una aplicación envía y recibe pequeñas cantidades de información, puede establecer el tamaño del paquete en 512 bytes (mediante el valor de tamaño de paquete en el <xref:System.Data.SqlClient.SqlConnection.ConnectionString%2A>), que es suficiente para la mayoría de las operaciones de transferencia de datos. Para la mayoría de las aplicaciones, el tamaño del paquete predeterminado es mejor.  
  
 <xref:System.Data.SqlClient.SqlConnection.PacketSize%2A> puede ser un valor entre 512 y 32767 bytes. Si el valor está fuera de este intervalo, se genera una excepción.  
  
 Si establece el valor predeterminado de un número mayor que 8000 hará que los paquetes que desea utilizar el asignador de varias páginas en la instancia de SQL Server en lugar del asignador de SinglePage mucho más eficaz, lo que reduce la escalabilidad global de SQL Server. Para obtener más información sobre cómo SQL Server utiliza la memoria, vea [arquitectura de memoria](http://go.microsoft.com/fwlink/?LinkId=143705) en libros en pantalla de SQL Server.  
  
   
  
## Examples  
 En el ejemplo siguiente se crea un <xref:System.Data.SqlClient.SqlConnection>, incluida la configuración de la `Packet Size` a 512 en la cadena de conexión. Muestra el <xref:System.Data.SqlClient.SqlConnection.PacketSize%2A> y <xref:System.Data.SqlClient.SqlConnection.ServerVersion%2A> propiedades en la ventana de consola.  
  
 [!code-csharp[Classic WebData SqlConnection.PacketSize Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData SqlConnection.PacketSize Example/CS/source.cs#1)]
 [!code-vb[Classic WebData SqlConnection.PacketSize Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData SqlConnection.PacketSize Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RegisterColumnEncryptionKeyStoreProviders">
      <MemberSignature Language="C#" Value="public static void RegisterColumnEncryptionKeyStoreProviders (System.Collections.Generic.IDictionary&lt;string,System.Data.SqlClient.SqlColumnEncryptionKeyStoreProvider&gt; customProviders);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void RegisterColumnEncryptionKeyStoreProviders(class System.Collections.Generic.IDictionary`2&lt;string, class System.Data.SqlClient.SqlColumnEncryptionKeyStoreProvider&gt; customProviders) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlConnection.RegisterColumnEncryptionKeyStoreProviders(System.Collections.Generic.IDictionary{System.String,System.Data.SqlClient.SqlColumnEncryptionKeyStoreProvider})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub RegisterColumnEncryptionKeyStoreProviders (customProviders As IDictionary(Of String, SqlColumnEncryptionKeyStoreProvider))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void RegisterColumnEncryptionKeyStoreProviders(System::Collections::Generic::IDictionary&lt;System::String ^, System::Data::SqlClient::SqlColumnEncryptionKeyStoreProvider ^&gt; ^ customProviders);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="customProviders" Type="System.Collections.Generic.IDictionary&lt;System.String,System.Data.SqlClient.SqlColumnEncryptionKeyStoreProvider&gt;" />
      </Parameters>
      <Docs>
        <param name="customProviders">Proveedores personalizados</param>
        <summary>Registra los proveedores de almacenamiento de claves de cifrado de columnas.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ResetStatistics">
      <MemberSignature Language="C#" Value="public void ResetStatistics ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ResetStatistics() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlConnection.ResetStatistics" />
      <MemberSignature Language="VB.NET" Value="Public Sub ResetStatistics ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ResetStatistics();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Si se habilita la obtención de estadísticas, todos los valores se restablecen en cero.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si no está habilitada la recopilación de estadísticas y se llama a este método, no se produce ningún error.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RetrieveStatistics">
      <MemberSignature Language="C#" Value="public System.Collections.IDictionary RetrieveStatistics ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.IDictionary RetrieveStatistics() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlConnection.RetrieveStatistics" />
      <MemberSignature Language="VB.NET" Value="Public Function RetrieveStatistics () As IDictionary" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::IDictionary ^ RetrieveStatistics();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IDictionary</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Devuelve una colección de pares de nombre y valor de las estadísticas cuando se llama el método.</summary>
        <returns>Devuelve una referencia de tipo <see cref="T:System.Collections.IDictionary" /> de elementos <see cref="T:System.Collections.DictionaryEntry" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cuando se llama a este método, los valores recuperados son las que en el momento actual en tiempo. Si continúa con la conexión, los valores son correctos. Debe volver a ejecutar el método para obtener los valores más recientes.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ServerVersion">
      <MemberSignature Language="C#" Value="public override string ServerVersion { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ServerVersion" />
      <MemberSignature Language="DocId" Value="P:System.Data.SqlClient.SqlConnection.ServerVersion" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property ServerVersion As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ ServerVersion { System::String ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene una cadena que contiene la versión de la instancia de SQL Server a la que se conecta el cliente.</summary>
        <value>La versión de la instancia de SQL Server.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La versión tiene el formato *##. ##. ###*, donde los dos primeros dígitos corresponden a la versión principal, los dos dígitos siguientes son la versión secundaria y los últimos cuatro dígitos son la versión de lanzamiento. La cadena tiene la forma *principal.secundaria.compilación*, donde principal y secundarias son exactamente dos dígitos y compilación es exactamente cuatro dígitos.  
  
 <xref:System.Data.SqlClient.SqlConnection.ServerVersion%2A> se llamó mientras no se completó la tarea devuelta y no se abrió la conexión después de llamar a <xref:System.Data.SqlClient.SqlConnection.OpenAsync%2A>.  
  
   
  
## Examples  
 En el ejemplo siguiente se crea un <xref:System.Data.SqlClient.SqlConnection> y muestra el <xref:System.Data.SqlClient.SqlConnection.ServerVersion%2A> propiedad.  
  
 [!code-csharp[Classic WebData ISqlConnection.ServerVersion Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData ISqlConnection.ServerVersion Example/CS/source.cs#1)]
 [!code-vb[Classic WebData ISqlConnection.ServerVersion Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData ISqlConnection.ServerVersion Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">La conexión está cerrada.  
  
 <see cref="P:System.Data.SqlClient.SqlConnection.ServerVersion" /> se llamó mientras no se completó la tarea devuelta y no se abrió la conexión después de llamar a <see cref="M:System.Data.SqlClient.SqlConnection.OpenAsync(System.Threading.CancellationToken)" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="State">
      <MemberSignature Language="C#" Value="public override System.Data.ConnectionState State { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Data.ConnectionState State" />
      <MemberSignature Language="DocId" Value="P:System.Data.SqlClient.SqlConnection.State" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property State As ConnectionState" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Data::ConnectionState State { System::Data::ConnectionState get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Data.IDbConnection.State</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Data.ConnectionState</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Indica el estado de <see cref="T:System.Data.SqlClient.SqlConnection" /> durante la operación más reciente de la red realizada en la conexión.</summary>
        <value>Enumeración <see cref="T:System.Data.ConnectionState" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Devuelve un <xref:System.Data.ConnectionState> enumeración que indica el estado de la <xref:System.Data.SqlClient.SqlConnection>. Cerrar y volver a abrir la conexión se actualizará el valor de <xref:System.Data.SqlClient.SqlConnection.State%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StatisticsEnabled">
      <MemberSignature Language="C#" Value="public bool StatisticsEnabled { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool StatisticsEnabled" />
      <MemberSignature Language="DocId" Value="P:System.Data.SqlClient.SqlConnection.StatisticsEnabled" />
      <MemberSignature Language="VB.NET" Value="Public Property StatisticsEnabled As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool StatisticsEnabled { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Cuando se establece en <see langword="true" />, permite la obtención de estadísticas para la conexión actual.</summary>
        <value>Devuelve <see langword="true" /> si está habilitada la recopilación de estadísticas; de lo contrario, <see langword="false" />. <see langword="false" /> es el valor predeterminado.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Habilitar la recopilación de estadísticas tiene un efecto secundario, pero puede medir en el rendimiento y, por tanto, debe habilitarse únicamente cuando sea necesario.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.ICloneable.Clone">
      <MemberSignature Language="C#" Value="object ICloneable.Clone ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance object System.ICloneable.Clone() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlConnection.System#ICloneable#Clone" />
      <MemberSignature Language="VB.NET" Value="Function Clone () As Object Implements ICloneable.Clone" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Object ^ System.ICloneable.Clone() = ICloneable::Clone;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.ICloneable.Clone</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Crea un nuevo objeto copiado de la instancia actual.</summary>
        <returns>Nuevo objeto que es copia de esta instancia.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este miembro es una implementación explícita de un miembro de interfaz. Solo se puede utilizar cuando la instancia de <xref:System.Data.SqlClient.SqlConnection> se convierte en una interfaz <xref:System.ICloneable>.  
  
 Este miembro solo es compatible con .NET Compact Framework.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WorkstationId">
      <MemberSignature Language="C#" Value="public string WorkstationId { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string WorkstationId" />
      <MemberSignature Language="DocId" Value="P:System.Data.SqlClient.SqlConnection.WorkstationId" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property WorkstationId As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ WorkstationId { System::String ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene una cadena que identifica el cliente de bases de datos.</summary>
        <value>Cadena que identifica el cliente de bases de datos. Si no se especifica ningún cliente, se utiliza el nombre del equipo cliente. Si no se especifica ninguno, el valor es una cadena vacía ("").</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Normalmente, la cadena contiene el nombre de red del cliente. El <xref:System.Data.SqlClient.SqlConnection.WorkstationId%2A> propiedad se corresponde con el `Workstation ID` propiedad cadena de conexión.  
  
   
  
## Examples  
 En el ejemplo siguiente se crea un <xref:System.Data.SqlClient.SqlConnection> y muestra el <xref:System.Data.SqlClient.SqlConnection.WorkstationId%2A> propiedad.  
  
 [!code-csharp[Classic WebData SqlConnection.WorkstationId Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData SqlConnection.WorkstationId Example/CS/source.cs#1)]
 [!code-vb[Classic WebData SqlConnection.WorkstationId Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData SqlConnection.WorkstationId Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>