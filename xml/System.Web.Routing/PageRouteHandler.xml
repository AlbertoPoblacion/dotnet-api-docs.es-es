<Type Name="PageRouteHandler" FullName="System.Web.Routing.PageRouteHandler">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="bad157947d7073f05d6062d59a8d705583cc3d22" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="es-ES" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30539649" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class PageRouteHandler : System.Web.Routing.IRouteHandler" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit PageRouteHandler extends System.Object implements class System.Web.Routing.IRouteHandler" />
  <TypeSignature Language="DocId" Value="T:System.Web.Routing.PageRouteHandler" />
  <TypeSignature Language="VB.NET" Value="Public Class PageRouteHandler&#xA;Implements IRouteHandler" />
  <TypeSignature Language="C++ CLI" Value="public ref class PageRouteHandler : System::Web::Routing::IRouteHandler" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Web.Routing.IRouteHandler</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>Proporciona propiedades y métodos para definir cómo se asigna una dirección URL a un archivo físico.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Pase una instancia de <xref:System.Web.Routing.PageRouteHandler> a la <xref:System.Web.Routing.Route> constructor para asignar una dirección URL de un archivo físico. La <xref:System.Web.Routing.PageRouteHandler> objeto especifica la ruta de acceso virtual del archivo físico y determina si se comprueban las reglas de autorización para la dirección URL física.  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Web.Routing.Route" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Web.Routing.PageRouteHandler" />.</summary>
        <altmember cref="T:System.Web.Routing.Route" />
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public PageRouteHandler (string virtualPath);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string virtualPath) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Routing.PageRouteHandler.#ctor(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (virtualPath As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; PageRouteHandler(System::String ^ virtualPath);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="virtualPath" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="virtualPath">Ruta de acceso virtual al archivo físico de este objeto <see cref="P:System.Web.Routing.RouteData.Route" />. El archivo debe estar ubicado en la aplicación actual. Por consiguiente, la ruta de acceso debe comenzar con una tilde (~).</param>
        <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Web.Routing.PageRouteHandler" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cuando se utiliza este constructor, el <xref:System.Web.Routing.PageRouteHandler.CheckPhysicalUrlAccess%2A> propiedad está establecida en `true`.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">El parámetro <paramref name="virtualPath" /> es <see langword="null" /> o es una cadena vacía o no empieza por "~/".</exception>
        <altmember cref="T:System.Web.Routing.Route" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public PageRouteHandler (string virtualPath, bool checkPhysicalUrlAccess);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string virtualPath, bool checkPhysicalUrlAccess) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Routing.PageRouteHandler.#ctor(System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (virtualPath As String, checkPhysicalUrlAccess As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; PageRouteHandler(System::String ^ virtualPath, bool checkPhysicalUrlAccess);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="virtualPath" Type="System.String" />
        <Parameter Name="checkPhysicalUrlAccess" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="virtualPath">Ruta de acceso virtual al archivo físico de este objeto <see cref="P:System.Web.Routing.RouteData.Route" />. El archivo debe estar ubicado en la aplicación actual. Por consiguiente, la ruta de acceso debe comenzar con una tilde (~).</param>
        <param name="checkPhysicalUrlAccess">Si esta propiedad está establecida en <see langword="false" />, las reglas de autorización se aplicarán a la dirección URL de la solicitud y no a la dirección URL de la página física. Si esta propiedad está establecida en <see langword="true" />, las reglas de autorización se aplicarán tanto a la dirección URL de la solicitud como a la dirección URL de la página física.</param>
        <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Web.Routing.PageRouteHandler" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 De forma predeterminada, el <xref:System.Web.Routing.PageRouteHandler.CheckPhysicalUrlAccess%2A> propiedad es `true`. Por lo tanto, si desea que las reglas de autorización se pueden aplicar a la dirección URL de la página física y la dirección URL de ruta, puede usar el <xref:System.Web.Routing.PageRouteHandler.%23ctor%28System.String%29> constructor en lugar de este constructor.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">El parámetro <paramref name="virtualPath" /> es <see langword="null" /> o es una cadena vacía o no empieza por "~/".</exception>
        <altmember cref="P:System.Web.Routing.PageRouteHandler.CheckPhysicalUrlAccess" />
        <altmember cref="T:System.Web.Routing.Route" />
      </Docs>
    </Member>
    <Member MemberName="CheckPhysicalUrlAccess">
      <MemberSignature Language="C#" Value="public bool CheckPhysicalUrlAccess { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CheckPhysicalUrlAccess" />
      <MemberSignature Language="DocId" Value="P:System.Web.Routing.PageRouteHandler.CheckPhysicalUrlAccess" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CheckPhysicalUrlAccess As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool CheckPhysicalUrlAccess { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene un valor que determina si las reglas de autorización se aplican a la dirección URL del archivo físico.</summary>
        <value>
          Es <see langword="true" /> si se comprueba la autorización para la dirección URL del archivo físico asociado a la ruta; de lo contrario, es <see langword="false" />. El valor predeterminado es <see langword="true" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Puede establecer la <xref:System.Web.Routing.PageRouteHandler.CheckPhysicalUrlAccess%2A> propiedad cuando se usa el <xref:System.Web.Routing.PageRouteHandler.%23ctor%28System.String%2CSystem.Boolean%29> constructor.  
  
 El valor de la <xref:System.Web.Routing.PageRouteHandler.CheckPhysicalUrlAccess%2A> propiedad determina si el <xref:System.Web.Routing.PageRouteHandler> objeto comprobará los permisos de seguridad sólo para la dirección URL de ruta o de la página física y la dirección URL de la ruta.  
  
 Cuando el <xref:System.Web.Routing.PageRouteHandler.CheckPhysicalUrlAccess%2A> propiedad está establecida en `true` (que es su valor predeterminado), un usuario debe tener permiso para tener acceso a la dirección URL de la ruta y la dirección URL física. Cuando el <xref:System.Web.Routing.PageRouteHandler.CheckPhysicalUrlAccess%2A> propiedad está establecida en `false`, un usuario solo requiere permiso para tener acceso a la dirección URL de ruta, y no se comprueban los permisos para la dirección URL física.  
  
 Los permisos se definen en el archivo Web.config, tal y como se muestra en el ejemplo siguiente:  
  
```  
<configuration>  
  <location path="categoriespage.aspx">  
    <system.web>  
      <authorization>  
        <allow roles="admin"/>  
        <deny users="*"/>  
      </authorization>  
    </system.web>  
  </location>  
  <location path="category">  
    <system.web>  
      <authorization>  
        <allow users="*"/>  
      </authorization>  
    </system.web>  
  </location>  
</configuration>  
```  
  
 Para una dirección URL de solicitud que contiene `Category/food/show` después del nombre de dominio, si el patrón de dirección URL de la ruta es `Category/{action}/{categoryName}` y la página física es Categoriespage.aspx, [!INCLUDE[vstecasp](~/includes/vstecasp-md.md)] aplica los permisos definidos en el ejemplo anterior en una de las maneras siguientes:  
  
-   Si el <xref:System.Web.Routing.PageRouteHandler.CheckPhysicalUrlAccess%2A> propiedad es `false`, todos los usuarios tienen acceso, ya que son todos los usuarios que tienen acceso a modelo de dirección URL que empieza por `category`.  
  
-   Si el <xref:System.Web.Routing.PageRouteHandler.CheckPhysicalUrlAccess%2A> propiedad es `true`, solo `admin` tienen acceso los usuarios. Todos los usuarios tienen acceso al modelo de dirección URL que comienza con `category`, pero solo `admin` usuarios tienen acceso a la página física Categoriespage.aspx.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.Routing.Route" />
      </Docs>
    </Member>
    <Member MemberName="GetHttpHandler">
      <MemberSignature Language="C#" Value="public virtual System.Web.IHttpHandler GetHttpHandler (System.Web.Routing.RequestContext requestContext);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Web.IHttpHandler GetHttpHandler(class System.Web.Routing.RequestContext requestContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Routing.PageRouteHandler.GetHttpHandler(System.Web.Routing.RequestContext)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Web::IHttpHandler ^ GetHttpHandler(System::Web::Routing::RequestContext ^ requestContext);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Web.Routing.IRouteHandler.GetHttpHandler(System.Web.Routing.RequestContext)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.IHttpHandler</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="requestContext" Type="System.Web.Routing.RequestContext" />
      </Parameters>
      <Docs>
        <param name="requestContext">Objeto que encapsula la información sobre la solicitud.</param>
        <summary>Devuelve el objeto que procesa la solicitud.</summary>
        <returns>Objeto que procesa la solicitud.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">El parámetro <paramref name="requestContext" /> es <see langword="null" />.</exception>
        <altmember cref="T:System.Web.Routing.Route" />
      </Docs>
    </Member>
    <Member MemberName="GetSubstitutedVirtualPath">
      <MemberSignature Language="C#" Value="public string GetSubstitutedVirtualPath (System.Web.Routing.RequestContext requestContext);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string GetSubstitutedVirtualPath(class System.Web.Routing.RequestContext requestContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Routing.PageRouteHandler.GetSubstitutedVirtualPath(System.Web.Routing.RequestContext)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ GetSubstitutedVirtualPath(System::Web::Routing::RequestContext ^ requestContext);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="requestContext" Type="System.Web.Routing.RequestContext" />
      </Parameters>
      <Docs>
        <param name="requestContext">Objeto que encapsula la información sobre la solicitud.</param>
        <summary>Devuelve la ruta de acceso virtual al archivo físico de la ruta una vez aplicadas las sustituciones a cualquier parámetro de reemplazo.</summary>
        <returns>Dirección URL del archivo físico que se generó a partir de una ruta.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si el <xref:System.Web.Routing.PageRouteHandler.VirtualPath%2A> valor no contiene ningún parámetro de reemplazo, el <xref:System.Web.Routing.PageRouteHandler.GetSubstitutedVirtualPath%2A> método devuelve el mismo valor que el <xref:System.Web.Routing.PageRouteHandler.VirtualPath%2A> propiedad.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">El parámetro <paramref name="requestContext" /> es <see langword="null" />.</exception>
        <altmember cref="T:System.Web.Routing.Route" />
      </Docs>
    </Member>
    <Member MemberName="VirtualPath">
      <MemberSignature Language="C#" Value="public string VirtualPath { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string VirtualPath" />
      <MemberSignature Language="DocId" Value="P:System.Web.Routing.PageRouteHandler.VirtualPath" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property VirtualPath As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ VirtualPath { System::String ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene la ruta de acceso virtual de la página web asociada a esta ruta.</summary>
        <value>Dirección URL de la página web, antes de que se hayan aplicado sustituciones para cualquier parámetro de reemplazo.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Establece el <xref:System.Web.Routing.PageRouteHandler.VirtualPath%2A> propiedad en el <xref:System.Web.Routing.PageRouteHandler.%23ctor%2A?displayProperty=nameWithType> constructor o en la <xref:System.Web.Routing.PageRouteHandler.%23ctor%2A?displayProperty=nameWithType> constructor.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.Routing.Route" />
      </Docs>
    </Member>
  </Members>
</Type>