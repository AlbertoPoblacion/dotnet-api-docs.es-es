<Type Name="FilterFactory" FullName="System.Web.DynamicData.FilterFactory">
  <Metadata><Meta Name="ms.openlocfilehash" Value="2c5d168c9954fc8458b8e8291d9032daf7e62cad" /><Meta Name="ms.sourcegitcommit" Value="434f60616a9793fa8436744549fc856e94f7a648" /><Meta Name="ms.translationtype" Value="HT" /><Meta Name="ms.contentlocale" Value="es-ES" /><Meta Name="ms.lasthandoff" Value="08/24/2018" /><Meta Name="ms.locfileid" Value="36601410" /></Metadata><TypeSignature Language="C#" Value="public class FilterFactory" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit FilterFactory extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Web.DynamicData.FilterFactory" />
  <TypeSignature Language="VB.NET" Value="Public Class FilterFactory" />
  <TypeSignature Language="C++ CLI" Value="public ref class FilterFactory" />
  <TypeSignature Language="F#" Value="type FilterFactory = class" />
  <AssemblyInfo>
    <AssemblyName>System.Web.DynamicData</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Crea una plantilla de filtro.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Web.DynamicData.FilterFactory> datos dinámicos utilizan clase en tiempo de ejecución para obtener una instancia de una plantilla de filtro para un tipo de columna específica.  
  
 Puede invalidar los métodos que se definen en esta clase para personalizar cómo se cargan las plantillas de filtro. Por ejemplo, una implementación personalizada podría cargar las plantillas de filtro desde una ubicación diferente a la carpeta ~/DynamicData/Filters de forma predeterminada.  
  
 Datos dinámicos proporcionan plantillas de filtro para tipos de columna de clave externa, booleanos y enumeración y muestra mediante un <xref:System.Web.UI.WebControls.DropDownList> control. También puede crear plantillas de filtro personalizado.  
  
   
  
## Examples  
 Para un ejemplo de filtrado de filas de tabla utiliza las plantillas de filtro de forma predeterminada, consulte el <xref:System.Web.DynamicData.QueryableFilterRepeater> clase.  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Web.DynamicData.DynamicFilter" />
    <altmember cref="T:System.Web.DynamicData.QueryableFilterRepeater" />
    <altmember cref="T:System.Web.DynamicData.FieldTemplateFactory" />
    <altmember cref="T:System.Web.DynamicData.EntityTemplateFactory" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public FilterFactory ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.DynamicData.FilterFactory.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; FilterFactory();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.DynamicData</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Web.DynamicData.FilterFactory" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateFilterControl">
      <MemberSignature Language="C#" Value="public virtual System.Web.DynamicData.QueryableFilterUserControl CreateFilterControl (System.Web.DynamicData.MetaColumn column, string filterUIHint);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Web.DynamicData.QueryableFilterUserControl CreateFilterControl(class System.Web.DynamicData.MetaColumn column, string filterUIHint) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.DynamicData.FilterFactory.CreateFilterControl(System.Web.DynamicData.MetaColumn,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CreateFilterControl (column As MetaColumn, filterUIHint As String) As QueryableFilterUserControl" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Web::DynamicData::QueryableFilterUserControl ^ CreateFilterControl(System::Web::DynamicData::MetaColumn ^ column, System::String ^ filterUIHint);" />
      <MemberSignature Language="F#" Value="abstract member CreateFilterControl : System.Web.DynamicData.MetaColumn * string -&gt; System.Web.DynamicData.QueryableFilterUserControl&#xA;override this.CreateFilterControl : System.Web.DynamicData.MetaColumn * string -&gt; System.Web.DynamicData.QueryableFilterUserControl" Usage="filterFactory.CreateFilterControl (column, filterUIHint)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.DynamicData</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.DynamicData.QueryableFilterUserControl</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="column" Type="System.Web.DynamicData.MetaColumn" />
        <Parameter Name="filterUIHint" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="column">Columna de datos a la que se aplica la plantilla de filtro.</param>
        <param name="filterUIHint">Nombre de la plantilla de filtro que se va a usar.</param>
        <summary>Crea una instancia de la plantilla de filtro.</summary>
        <returns>Instancia de la clase <see cref="T:System.Web.DynamicData.QueryableFilterUserControl" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este método llama a los datos dinámicos para obtener una instancia de una plantilla de filtro. Las clases derivadas pueden invalidar este método para personalizar cómo se crean instancias de plantillas de filtro. Por ejemplo, una implementación personalizada podría cargar plantillas de un ensamblado compilado en lugar de desde la carpeta ~/DynamicData/Filters de forma predeterminada.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="column" /> es **NULL**.</exception>
      </Docs>
    </Member>
    <Member MemberName="GetFilterVirtualPath">
      <MemberSignature Language="C#" Value="public virtual string GetFilterVirtualPath (System.Web.DynamicData.MetaColumn column, string filterUIHint);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string GetFilterVirtualPath(class System.Web.DynamicData.MetaColumn column, string filterUIHint) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.DynamicData.FilterFactory.GetFilterVirtualPath(System.Web.DynamicData.MetaColumn,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetFilterVirtualPath (column As MetaColumn, filterUIHint As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::String ^ GetFilterVirtualPath(System::Web::DynamicData::MetaColumn ^ column, System::String ^ filterUIHint);" />
      <MemberSignature Language="F#" Value="abstract member GetFilterVirtualPath : System.Web.DynamicData.MetaColumn * string -&gt; string&#xA;override this.GetFilterVirtualPath : System.Web.DynamicData.MetaColumn * string -&gt; string" Usage="filterFactory.GetFilterVirtualPath (column, filterUIHint)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.DynamicData</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="column" Type="System.Web.DynamicData.MetaColumn" />
        <Parameter Name="filterUIHint" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="column">Columna de datos a la que se aplica la plantilla de filtro.</param>
        <param name="filterUIHint">Plantilla de filtro que se va a usar.</param>
        <summary>Obtiene la ruta de acceso virtual de la plantilla de filtro.</summary>
        <returns>Ruta de acceso virtual de la plantilla de filtro.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 De forma predeterminada, las plantillas de filtro se encuentran en la carpeta ~/DynamicData/Filers.  
  
 Este método determina la ruta de acceso virtual de la carpeta que contiene la plantilla de campo. Las clases derivadas pueden invalidar este método para proporcionar plantillas de filtro de ruta de acceso virtual diferente.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="column" /> es **NULL**.</exception>
      </Docs>
    </Member>
  </Members>
</Type>