<Type Name="DynamicRouteExpression" FullName="System.Web.DynamicData.DynamicRouteExpression">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="3f3913340111a6b348108da3dee8f9b5fb18588d" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="es-ES" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30537819" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class DynamicRouteExpression : System.Web.UI.WebControls.Expressions.DataSourceExpression" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit DynamicRouteExpression extends System.Web.UI.WebControls.Expressions.DataSourceExpression" />
  <TypeSignature Language="DocId" Value="T:System.Web.DynamicData.DynamicRouteExpression" />
  <TypeSignature Language="VB.NET" Value="Public Class DynamicRouteExpression&#xA;Inherits DataSourceExpression" />
  <TypeSignature Language="C++ CLI" Value="public ref class DynamicRouteExpression : System::Web::UI::WebControls::Expressions::DataSourceExpression" />
  <AssemblyInfo>
    <AssemblyName>System.Web.DynamicData</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Web.UI.WebControls.Expressions.DataSourceExpression</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Obtiene la clave principal de la información de enrutamiento para realizar el filtrado de datos.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Web.DynamicData.DynamicRouteExpression> clase se utiliza con el <xref:System.Web.UI.WebControls.QueryExtender> control en el marcado de la página. La <xref:System.Web.DynamicData.DynamicRouteExpression> clase obtiene la clave principal de la información de enrutamiento que se encuentra en una solicitud Web. El <xref:System.Web.UI.WebControls.QueryExtender> control, a continuación, usa la clave en un `Where` cláusula. Esto modifica la consulta para el origen de datos, que, a continuación, devuelve filas de tabla que se filtra por la clave.  
  
 También puede filtrar datos mediante una clave externa que se especifica mediante el <xref:System.Web.DynamicData.DynamicRouteExpression.ColumnName%2A> propiedad.  
  
<a name="DeclarativeSyntax"></a>   
## <a name="declarative-syntax"></a>Sintaxis declarativa  
  
```  
<asp:DynamicRouteExpression  
  ColumnName="Name of the foreign key column"/>  
```  
  
   
  
## Examples  
 Un proyecto de Visual Studio con código fuente está disponible como acompañamiento de este tema: [Scaffolding de datos dinámicos](http://go.microsoft.com/fwlink/?LinkId=168914).  
  
 En el ejemplo siguiente se muestra una plantilla de página List.aspx personalizada para la tabla Products. Usa el <xref:System.Web.DynamicData.DynamicRouteExpression.ColumnName%2A> propiedad para especificar la clave externa de ProductCategory para filtrar las filas de productos.  
  
 La página List.aspx personalizada muestra una columna que contiene los vínculos de las categorías que contiene la columna de clave externa ProductCategory. Cuando el usuario hace clic en uno de estos vínculos, la página List.aspx muestra únicamente las filas que contienen la categoría seleccionada.  
  
 En el ejemplo se requiere lo siguiente:  
  
-   Un sitio Web de datos dinámicos. Para obtener más información, consulte [Tutorial: crear una nueva dinámica sitio Web usando Scaffolding de datos](http://msdn.microsoft.com/library/1564aef2-9103-436a-9806-c8ad7abd616a).  
  
-   La base de datos de ejemplo AdventureWorksLT. Para obtener más información, vea [Cómo: conectarse a la base de datos AdventureWorksLT utilizando una. El archivo MDF](http://msdn.microsoft.com/library/d34ffbac-607d-40f1-b088-0a3304ea032b).  
  
 [!code-aspx-csharp[System.Web.DynamicData.DynamicRouteExpression#1](~/samples/snippets/csharp/VS_Snippets_WebNet/system.web.dynamicdata.dynamicrouteexpression/cs/list.aspx#1)]
 [!code-aspx-vb[System.Web.DynamicData.DynamicRouteExpression#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/system.web.dynamicdata.dynamicrouteexpression/vb/list.aspx#1)]  
  
 [!code-csharp[System.Web.DynamicData.DynamicRouteExpression#3](~/samples/snippets/csharp/VS_Snippets_WebNet/system.web.dynamicdata.dynamicrouteexpression/cs/list.aspx.cs#3)]
 [!code-vb[System.Web.DynamicData.DynamicRouteExpression#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/system.web.dynamicdata.dynamicrouteexpression/vb/list.aspx.vb#3)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DynamicRouteExpression ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.DynamicData.DynamicRouteExpression.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DynamicRouteExpression();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.DynamicData</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Web.DynamicData.DynamicRouteExpression" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Normalmente no se invoca el <xref:System.Web.DynamicData.DynamicRouteExpression.%23ctor%2A> constructor. En su lugar, use la <xref:System.Web.DynamicData.DynamicRouteExpression> clase en el marcado de la página y la clase se inicializan cuando se carga la página.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ColumnName">
      <MemberSignature Language="C#" Value="public string ColumnName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ColumnName" />
      <MemberSignature Language="DocId" Value="P:System.Web.DynamicData.DynamicRouteExpression.ColumnName" />
      <MemberSignature Language="VB.NET" Value="Public Property ColumnName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ ColumnName { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.DynamicData</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene o establece el nombre de una columna que contiene una clave externa que se usa para consultar el origen de datos.</summary>
        <value>Nombre de la columna de clave externa.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Web.DynamicData.DynamicRouteExpression.ColumnName%2A> propiedad representa una clave externa. Esta clave se usa para modificar la consulta para el origen de datos.  
  
   
  
## Examples  
 En el ejemplo siguiente se muestra cómo especificar la columna de clave externa de ProductCategory para filtrar los productos para mostrar. Este ejemplo forma parte de un ejemplo más extenso proporcionado para la <xref:System.Web.DynamicData.DynamicRouteExpression> clase.  
  
```  
<asp:QueryExtender TargetControlID="GridDataSource"   
    ID="GridQueryExtender" runat="server">  
  <asp:DynamicRouteExpression ColumnName="ProductCategory" />  
</asp:QueryExtender>  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetQueryable">
      <MemberSignature Language="C#" Value="public override System.Linq.IQueryable GetQueryable (System.Linq.IQueryable source);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Linq.IQueryable GetQueryable(class System.Linq.IQueryable source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.DynamicData.DynamicRouteExpression.GetQueryable(System.Linq.IQueryable)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetQueryable (source As IQueryable) As IQueryable" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Linq::IQueryable ^ GetQueryable(System::Linq::IQueryable ^ source);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.DynamicData</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.IQueryable</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Linq.IQueryable" />
      </Parameters>
      <Docs>
        <param name="source">Consulta que se va a modificar.</param>
        <summary>Obtiene la consulta del origen de datos.</summary>
        <returns>Una instancia de la consulta modificada.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La consulta del origen de datos, representado por la `source` parámetro, se modifica aplicando la clave principal o externa que es la información de la ruta actual.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetContext">
      <MemberSignature Language="C#" Value="public override void SetContext (System.Web.UI.Control owner, System.Web.HttpContext context, System.Web.UI.WebControls.IQueryableDataSource dataSource);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void SetContext(class System.Web.UI.Control owner, class System.Web.HttpContext context, class System.Web.UI.WebControls.IQueryableDataSource dataSource) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.DynamicData.DynamicRouteExpression.SetContext(System.Web.UI.Control,System.Web.HttpContext,System.Web.UI.WebControls.IQueryableDataSource)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub SetContext (owner As Control, context As HttpContext, dataSource As IQueryableDataSource)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void SetContext(System::Web::UI::Control ^ owner, System::Web::HttpContext ^ context, System::Web::UI::WebControls::IQueryableDataSource ^ dataSource);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.DynamicData</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="owner" Type="System.Web.UI.Control" />
        <Parameter Name="context" Type="System.Web.HttpContext" />
        <Parameter Name="dataSource" Type="System.Web.UI.WebControls.IQueryableDataSource" />
      </Parameters>
      <Docs>
        <param name="owner">Control que contiene la instancia de <see cref="T:System.Web.DynamicData.DynamicRouteExpression" />. Se trata de un control <see cref="T:System.Web.UI.WebControls.QueryExtender" />.</param>
        <param name="context">Contexto de la solicitud web.</param>
        <param name="dataSource">Origen de datos de destino para la instancia de <see cref="T:System.Web.DynamicData.DynamicRouteExpression" />.</param>
        <summary>Establece el contexto HTTP del objeto <see cref="T:System.Web.DynamicData.DynamicRouteExpression" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>