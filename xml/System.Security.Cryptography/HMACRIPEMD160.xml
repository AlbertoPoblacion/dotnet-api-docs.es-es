<Type Name="HMACRIPEMD160" FullName="System.Security.Cryptography.HMACRIPEMD160">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="67b507df0f284328177df6de16d86292390b439e" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="es-ES" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36624823" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class HMACRIPEMD160 : System.Security.Cryptography.HMAC" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit HMACRIPEMD160 extends System.Security.Cryptography.HMAC" />
  <TypeSignature Language="DocId" Value="T:System.Security.Cryptography.HMACRIPEMD160" />
  <TypeSignature Language="VB.NET" Value="Public Class HMACRIPEMD160&#xA;Inherits HMAC" />
  <TypeSignature Language="C++ CLI" Value="public ref class HMACRIPEMD160 : System::Security::Cryptography::HMAC" />
  <TypeSignature Language="F#" Value="type HMACRIPEMD160 = class&#xA;    inherit HMAC" />
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Security.Cryptography.HMAC</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <span data-ttu-id="fa878-101">Calcula un código de autenticación de mensajes basado en hash (HMAC) mediante la función hash <see cref="T:System.Security.Cryptography.RIPEMD160" />.</span>
      <span class="sxs-lookup">
        <span data-stu-id="fa878-101">Computes a Hash-based Message Authentication Code (HMAC) by using the <see cref="T:System.Security.Cryptography.RIPEMD160" /> hash function.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fa878-102"><xref:System.Security.Cryptography.HMACRIPEMD160> es un tipo de algoritmo hash con clave que se construyen a partir de la función de hash RIPEMD-160 y se usa como un código de autenticación de mensajes basado en Hash (HMAC).</span><span class="sxs-lookup"><span data-stu-id="fa878-102"><xref:System.Security.Cryptography.HMACRIPEMD160> is a type of keyed hash algorithm that is constructed from the RIPEMD-160 hash function and used as a Hash-based Message Authentication Code (HMAC).</span></span> <span data-ttu-id="fa878-103">El proceso HMAC combina una clave secreta con los datos del mensaje, aplica un algoritmo hash el resultado con la función hash, combina de nuevo ese valor hash con la clave secreta y, a continuación, aplica la función hash por segunda vez.</span><span class="sxs-lookup"><span data-stu-id="fa878-103">The HMAC process mixes a secret key with the message data, hashes the result with the hash function, mixes that hash value with the secret key again, and then applies the hash function a second time.</span></span> <span data-ttu-id="fa878-104">El hash de salida es de 160 bits de longitud.</span><span class="sxs-lookup"><span data-stu-id="fa878-104">The output hash is 160 bits in length.</span></span>  
  
 <span data-ttu-id="fa878-105">Un HMAC puede utilizarse para determinar si se ha manipulado un mensaje enviado a través de un canal no seguro, siempre que el remitente y el receptor compartan una clave secreta.</span><span class="sxs-lookup"><span data-stu-id="fa878-105">An HMAC can be used to determine whether a message sent over an insecure channel has been tampered with, provided that the sender and receiver share a secret key.</span></span> <span data-ttu-id="fa878-106">El remitente calcula el valor hash para los datos originales y envía los datos originales y el valor hash como un solo mensaje.</span><span class="sxs-lookup"><span data-stu-id="fa878-106">The sender computes the hash value for the original data and sends both the original data and the hash value as a single message.</span></span> <span data-ttu-id="fa878-107">El receptor vuelve a calcular el valor hash en el mensaje recibido y comprueba que el HMAC calculado coincide con el transmitido.</span><span class="sxs-lookup"><span data-stu-id="fa878-107">The receiver recalculates the hash value on the received message and checks that the computed HMAC matches the transmitted HMAC.</span></span>  
  
 <span data-ttu-id="fa878-108">Cualquier cambio en los datos o el valor hash se produce un error de coincidencia, porque se requieren conocimientos de la clave secreta para cambiar el mensaje y reproducir el valor hash correcto.</span><span class="sxs-lookup"><span data-stu-id="fa878-108">Any change to the data or the hash value results in a mismatch, because knowledge of the secret key is required to change the message and reproduce the correct hash value.</span></span> <span data-ttu-id="fa878-109">Por lo tanto, si los valores de hash original y el calculado coinciden, se autentica el mensaje.</span><span class="sxs-lookup"><span data-stu-id="fa878-109">Therefore, if the original and computed hash values match, the message is authenticated.</span></span>  
  
 <span data-ttu-id="fa878-110"><xref:System.Security.Cryptography.HMACRIPEMD160> acepta claves de cualquier tamaño y produce una secuencia de hash que tiene una longitud de 160 bits.</span><span class="sxs-lookup"><span data-stu-id="fa878-110"><xref:System.Security.Cryptography.HMACRIPEMD160> accepts keys of any size, and produces a hash sequence that is 160 bits long.</span></span>  
  
 <span data-ttu-id="fa878-111">El algoritmo hash RIPEMD y sus sucesores se desarrollaron en el proyecto europeo MADURA.</span><span class="sxs-lookup"><span data-stu-id="fa878-111">The RIPEMD hash algorithm and its successors were developed by the European RIPE project.</span></span> <span data-ttu-id="fa878-112">El algoritmo RIPEMD original se ha diseñado para sustituir a MD4 y MD5 y posteriormente se ha reforzado y cambiar el nombre RIPEMD-160.</span><span class="sxs-lookup"><span data-stu-id="fa878-112">The original RIPEMD algorithm was designed to replace MD4 and MD5 and was later strengthened and renamed RIPEMD-160.</span></span> <span data-ttu-id="fa878-113">El algoritmo de hash RIPEMD-160 genera un valor hash de 160 bits.</span><span class="sxs-lookup"><span data-stu-id="fa878-113">The RIPEMD-160 hash algorithm produces a 160-bit hash value.</span></span> <span data-ttu-id="fa878-114">Los diseñadores del algoritmo han colocado en el dominio público.</span><span class="sxs-lookup"><span data-stu-id="fa878-114">The algorithm's designers have placed it in the public domain.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="fa878-115">En el ejemplo siguiente se muestra cómo firmar un archivo mediante la <xref:System.Security.Cryptography.HMACRIPEMD160> objeto y, a continuación, cómo comprobar el archivo.</span><span class="sxs-lookup"><span data-stu-id="fa878-115">The following example shows how to sign a file by using the <xref:System.Security.Cryptography.HMACRIPEMD160> object and then how to verify the file.</span></span>  
  
 [!code-cpp[HMACRIPEMD160#1](~/samples/snippets/cpp/VS_Snippets_CLR/HMACRIPEMD160/CPP/hmacripemd160.cpp#1)]
 [!code-csharp[HMACRIPEMD160#1](~/samples/snippets/csharp/VS_Snippets_CLR/HMACRIPEMD160/CS/hmacripemd160.cs#1)]
 [!code-vb[HMACRIPEMD160#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/HMACRIPEMD160/vb/hmacripemd160.vb#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="fa878-116">Inicializa una nueva instancia de la clase <see cref="T:System.Security.Cryptography.HMACRIPEMD160" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fa878-116">Initializes a new instance of the <see cref="T:System.Security.Cryptography.HMACRIPEMD160" /> class.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public HMACRIPEMD160 ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.HMACRIPEMD160.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; HMACRIPEMD160();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="fa878-117">Inicializa una nueva instancia de la clase <see cref="T:System.Security.Cryptography.HMACRIPEMD160" /> con una clave de 64 bytes generada aleatoriamente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fa878-117">Initializes a new instance of the <see cref="T:System.Security.Cryptography.HMACRIPEMD160" /> class with a randomly generated 64-byte key.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fa878-118"><xref:System.Security.Cryptography.HMACRIPEMD160> es un tipo de algoritmo hash con clave que se construyen a partir de la función de hash RIPEMD-160 y se usa como un código de autenticación de mensajes basado en Hash (HMAC).</span><span class="sxs-lookup"><span data-stu-id="fa878-118"><xref:System.Security.Cryptography.HMACRIPEMD160> is a type of keyed hash algorithm that is constructed from the RIPEMD-160 hash function and used as a Hash-based Message Authentication Code (HMAC).</span></span> <span data-ttu-id="fa878-119">El proceso HMAC combina una clave secreta con los datos del mensaje, aplica un algoritmo hash el resultado con la función hash, combina de nuevo ese valor hash con la clave secreta y, a continuación, aplica la función hash por segunda vez.</span><span class="sxs-lookup"><span data-stu-id="fa878-119">The HMAC process mixes a secret key with the message data, hashes the result with the hash function, mixes that hash value with the secret key again, and then applies the hash function a second time.</span></span> <span data-ttu-id="fa878-120">El hash de salida es de 160 bytes de longitud.</span><span class="sxs-lookup"><span data-stu-id="fa878-120">The output hash is 160 bytes in length.</span></span>  
  
 <span data-ttu-id="fa878-121">Este constructor utiliza una clave generada aleatoriamente de 64 bytes.</span><span class="sxs-lookup"><span data-stu-id="fa878-121">This constructor uses a 64-byte, randomly generated key.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public HMACRIPEMD160 (byte[] key);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(unsigned int8[] key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.HMACRIPEMD160.#ctor(System.Byte[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (key As Byte())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; HMACRIPEMD160(cli::array &lt;System::Byte&gt; ^ key);" />
      <MemberSignature Language="F#" Value="new System.Security.Cryptography.HMACRIPEMD160 : byte[] -&gt; System.Security.Cryptography.HMACRIPEMD160" Usage="new System.Security.Cryptography.HMACRIPEMD160 key" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="key" Type="System.Byte[]" />
      </Parameters>
      <Docs>
        <param name="key">
          <span data-ttu-id="fa878-122">Clave secreta para el cifrado de <see cref="T:System.Security.Cryptography.HMACRIPEMD160" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fa878-122">The secret key for <see cref="T:System.Security.Cryptography.HMACRIPEMD160" /> encryption.</span>
          </span>
          <span data-ttu-id="fa878-123">La clave puede tener cualquier longitud, pero si tiene más de 64 bytes se usa un algoritmo hash (SHA-1) para derivar una clave de 64 bytes.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fa878-123">The key can be any length, but if it is more than 64 bytes long it is hashed (using SHA-1) to derive a 64-byte key.</span>
          </span>
          <span data-ttu-id="fa878-124">Por consiguiente, el tamaño recomendado de la clave secreta es de 64 bytes.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fa878-124">Therefore, the recommended size of the secret key is 64 bytes.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="fa878-125">Inicializa una nueva instancia de la clase <see cref="T:System.Security.Cryptography.HMACRIPEMD160" /> con los datos de clave especificados.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fa878-125">Initializes a new instance of the <see cref="T:System.Security.Cryptography.HMACRIPEMD160" /> class with the specified key data.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fa878-126"><xref:System.Security.Cryptography.HMACRIPEMD160> es un tipo de algoritmo hash con clave que se construyen a partir de la función de hash RIPEMD-160 y se usa como un código de autenticación de mensajes basado en Hash (HMAC).</span><span class="sxs-lookup"><span data-stu-id="fa878-126"><xref:System.Security.Cryptography.HMACRIPEMD160> is a type of keyed hash algorithm that is constructed from the RIPEMD-160 hash function and used as a Hash-based Message Authentication Code (HMAC).</span></span> <span data-ttu-id="fa878-127">El proceso HMAC combina una clave secreta con los datos del mensaje, aplica un algoritmo hash el resultado con la función hash, combina de nuevo ese valor hash con la clave secreta y, a continuación, aplica la función hash por segunda vez.</span><span class="sxs-lookup"><span data-stu-id="fa878-127">The HMAC process mixes a secret key with the message data, hashes the result with the hash function, mixes that hash value with the secret key again, and then applies the hash function a second time.</span></span> <span data-ttu-id="fa878-128">El hash de salida es de 160 bytes de longitud.</span><span class="sxs-lookup"><span data-stu-id="fa878-128">The output hash is 160 bytes in length.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="fa878-129">Para obtener un ejemplo de cómo utilizar este constructor, vea el <xref:System.Security.Cryptography.HMACRIPEMD160> clase.</span><span class="sxs-lookup"><span data-stu-id="fa878-129">For an example of how to use this constructor, see the <xref:System.Security.Cryptography.HMACRIPEMD160> class.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="fa878-130">El parámetro <paramref name="key" /> es <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fa878-130">The <paramref name="key" /> parameter is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
  </Members>
</Type>