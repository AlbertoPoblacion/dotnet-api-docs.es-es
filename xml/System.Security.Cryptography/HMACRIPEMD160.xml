<Type Name="HMACRIPEMD160" FullName="System.Security.Cryptography.HMACRIPEMD160">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="8dbae615f73b276d9a73b731a30e0587151fc9c1" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="es-ES" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30495589" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class HMACRIPEMD160 : System.Security.Cryptography.HMAC" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit HMACRIPEMD160 extends System.Security.Cryptography.HMAC" />
  <TypeSignature Language="DocId" Value="T:System.Security.Cryptography.HMACRIPEMD160" />
  <TypeSignature Language="VB.NET" Value="Public Class HMACRIPEMD160&#xA;Inherits HMAC" />
  <TypeSignature Language="C++ CLI" Value="public ref class HMACRIPEMD160 : System::Security::Cryptography::HMAC" />
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Security.Cryptography.HMAC</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Calcula un código de autenticación de mensajes basado en hash (HMAC) mediante la función hash <see cref="T:System.Security.Cryptography.RIPEMD160" />.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Security.Cryptography.HMACRIPEMD160> es un tipo de algoritmo hash con clave que se construyen a partir de la función de hash RIPEMD-160 y se usa como un código de autenticación de mensajes basado en Hash (HMAC). El proceso HMAC combina una clave secreta con los datos del mensaje, aplica un algoritmo hash el resultado con la función hash, combina de nuevo ese valor hash con la clave secreta y, a continuación, aplica la función hash por segunda vez. El hash de salida es de 160 bits de longitud.  
  
 Un HMAC puede utilizarse para determinar si se ha manipulado un mensaje enviado a través de un canal no seguro, siempre que el remitente y el receptor compartan una clave secreta. El remitente calcula el valor hash para los datos originales y envía los datos originales y el valor hash como un solo mensaje. El receptor vuelve a calcular el valor hash en el mensaje recibido y comprueba que el HMAC calculado coincide con el transmitido.  
  
 Cualquier cambio en los datos o el valor hash se produce un error de coincidencia, porque se requieren conocimientos de la clave secreta para cambiar el mensaje y reproducir el valor hash correcto. Por lo tanto, si los valores de hash original y el calculado coinciden, se autentica el mensaje.  
  
 <xref:System.Security.Cryptography.HMACRIPEMD160> acepta claves de cualquier tamaño y produce una secuencia de hash que tiene una longitud de 160 bits.  
  
 El algoritmo hash RIPEMD y sus sucesores se desarrollaron en el proyecto europeo MADURA. El algoritmo RIPEMD original se ha diseñado para sustituir a MD4 y MD5 y posteriormente se ha reforzado y cambiar el nombre RIPEMD-160. El algoritmo de hash RIPEMD-160 genera un valor hash de 160 bits. Los diseñadores del algoritmo han colocado en el dominio público.  
  
   
  
## Examples  
 En el ejemplo siguiente se muestra cómo firmar un archivo mediante la <xref:System.Security.Cryptography.HMACRIPEMD160> objeto y, a continuación, cómo comprobar el archivo.  
  
 [!code-cpp[HMACRIPEMD160#1](~/samples/snippets/cpp/VS_Snippets_CLR/HMACRIPEMD160/CPP/hmacripemd160.cpp#1)]
 [!code-csharp[HMACRIPEMD160#1](~/samples/snippets/csharp/VS_Snippets_CLR/HMACRIPEMD160/CS/hmacripemd160.cs#1)]
 [!code-vb[HMACRIPEMD160#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/HMACRIPEMD160/vb/hmacripemd160.vb#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Security.Cryptography.HMACRIPEMD160" />.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public HMACRIPEMD160 ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.HMACRIPEMD160.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; HMACRIPEMD160();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Security.Cryptography.HMACRIPEMD160" /> con una clave de 64 bytes generada aleatoriamente.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Security.Cryptography.HMACRIPEMD160> es un tipo de algoritmo hash con clave que se construyen a partir de la función de hash RIPEMD-160 y se usa como un código de autenticación de mensajes basado en Hash (HMAC). El proceso HMAC combina una clave secreta con los datos del mensaje, aplica un algoritmo hash el resultado con la función hash, combina de nuevo ese valor hash con la clave secreta y, a continuación, aplica la función hash por segunda vez. El hash de salida es de 160 bytes de longitud.  
  
 Este constructor utiliza una clave generada aleatoriamente de 64 bytes.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public HMACRIPEMD160 (byte[] key);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(unsigned int8[] key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.HMACRIPEMD160.#ctor(System.Byte[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (key As Byte())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; HMACRIPEMD160(cli::array &lt;System::Byte&gt; ^ key);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="key" Type="System.Byte[]" />
      </Parameters>
      <Docs>
        <param name="key">Clave secreta para el cifrado de <see cref="T:System.Security.Cryptography.HMACRIPEMD160" />. La clave puede tener cualquier longitud, pero si tiene más de 64 bytes se usa un algoritmo hash (SHA-1) para derivar una clave de 64 bytes. Por consiguiente, el tamaño recomendado de la clave secreta es de 64 bytes.</param>
        <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Security.Cryptography.HMACRIPEMD160" /> con los datos de clave especificados.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Security.Cryptography.HMACRIPEMD160> es un tipo de algoritmo hash con clave que se construyen a partir de la función de hash RIPEMD-160 y se usa como un código de autenticación de mensajes basado en Hash (HMAC). El proceso HMAC combina una clave secreta con los datos del mensaje, aplica un algoritmo hash el resultado con la función hash, combina de nuevo ese valor hash con la clave secreta y, a continuación, aplica la función hash por segunda vez. El hash de salida es de 160 bytes de longitud.  
  
   
  
## Examples  
 Para obtener un ejemplo de cómo utilizar este constructor, vea el <xref:System.Security.Cryptography.HMACRIPEMD160> clase.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">El parámetro <paramref name="key" /> es <see langword="null" />.</exception>
      </Docs>
    </Member>
  </Members>
</Type>