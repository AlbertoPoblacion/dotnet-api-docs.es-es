<Type Name="PasswordDeriveBytes" FullName="System.Security.Cryptography.PasswordDeriveBytes">
  <TypeSignature Language="C#" Value="public class PasswordDeriveBytes : System.Security.Cryptography.DeriveBytes" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit PasswordDeriveBytes extends System.Security.Cryptography.DeriveBytes" />
  <TypeSignature Language="DocId" Value="T:System.Security.Cryptography.PasswordDeriveBytes" />
  <TypeSignature Language="VB.NET" Value="Public Class PasswordDeriveBytes&#xA;Inherits DeriveBytes" />
  <TypeSignature Language="C++ CLI" Value="public ref class PasswordDeriveBytes : System::Security::Cryptography::DeriveBytes" />
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Security.Cryptography.Csp</AssemblyName>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Security.Cryptography.DeriveBytes</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="cac13-101">Deriva una clave de una contraseña mediante una extensión del algoritmo PBKDF1.</span><span class="sxs-lookup"><span data-stu-id="cac13-101">Derives a key from a password using an extension of the PBKDF1 algorithm.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cac13-102">Esta clase utiliza una extensión del algoritmo PBKDF1 definidos en el estándar PKCS #5 v2.0 para derivar los bytes adecuados para su uso como material de clave de una contraseña.</span><span class="sxs-lookup"><span data-stu-id="cac13-102">This class uses an extension of the PBKDF1 algorithm defined in the PKCS#5 v2.0 standard to derive bytes suitable for use as key material from a password.</span></span> <span data-ttu-id="cac13-103">El estándar se documenta en IETF RRC 2898.</span><span class="sxs-lookup"><span data-stu-id="cac13-103">The standard is documented in IETF RRC 2898.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="cac13-104">Nunca codificar una contraseña en el código fuente.</span><span class="sxs-lookup"><span data-stu-id="cac13-104">Never hard-code a password within your source code.</span></span>  <span data-ttu-id="cac13-105">Codificado contraseñas se pueden recuperar desde un ensamblado con el [Ildasm.exe (Desensamblador de IL)](~/docs/framework/tools/ildasm-exe-il-disassembler.md) herramienta, un editor hexadecimal, o sencillamente abriendo el ensamblado en un editor de texto como notepad.exe.</span><span class="sxs-lookup"><span data-stu-id="cac13-105">Hard coded passwords can be retrieved from an assembly using the [Ildasm.exe (IL Disassembler)](~/docs/framework/tools/ildasm-exe-il-disassembler.md) tool, a hex editor, or by simply opening up the assembly in a text editor like notepad.exe.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="cac13-106">En el ejemplo de código siguiente se crea una clave a partir de una contraseña mediante la <xref:System.Security.Cryptography.PasswordDeriveBytes> clase.</span><span class="sxs-lookup"><span data-stu-id="cac13-106">The following code example creates a key from a password using the <xref:System.Security.Cryptography.PasswordDeriveBytes> class.</span></span>  
  
 [!code-cpp[Cryptography.PasswordDerivedbytes#1](~/samples/snippets/cpp/VS_Snippets_CLR/Cryptography.PasswordDerivedbytes/cpp/sample.cpp#1)]
 [!code-csharp[Cryptography.PasswordDerivedbytes#1](~/samples/snippets/csharp/VS_Snippets_CLR/Cryptography.PasswordDerivedbytes/CS/sample.cs#1)]
 [!code-vb[Cryptography.PasswordDerivedbytes#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Cryptography.PasswordDerivedbytes/VB/sample.vb#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="cac13-107">Inicializa una nueva instancia de la clase <see cref="T:System.Security.Cryptography.PasswordDeriveBytes" />.</span><span class="sxs-lookup"><span data-stu-id="cac13-107">Initializes a new instance of the <see cref="T:System.Security.Cryptography.PasswordDeriveBytes" /> class.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public PasswordDeriveBytes (byte[] password, byte[] salt);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(unsigned int8[] password, unsigned int8[] salt) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.PasswordDeriveBytes.#ctor(System.Byte[],System.Byte[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (password As Byte(), salt As Byte())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; PasswordDeriveBytes(cli::array &lt;System::Byte&gt; ^ password, cli::array &lt;System::Byte&gt; ^ salt);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Csp</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="password" Type="System.Byte[]" />
        <Parameter Name="salt" Type="System.Byte[]" />
      </Parameters>
      <Docs>
        <param name="password"><span data-ttu-id="cac13-108">Contraseña para la que se va a derivar la clave.</span><span class="sxs-lookup"><span data-stu-id="cac13-108">The password to derive the key for.</span></span></param>
        <param name="salt"><span data-ttu-id="cac13-109">Valor de clave "salt" que se va a usar para derivar la clave.</span><span class="sxs-lookup"><span data-stu-id="cac13-109">The key salt to use to derive the key.</span></span></param>
        <summary><span data-ttu-id="cac13-110">Inicializa una nueva instancia de la clase <see cref="T:System.Security.Cryptography.PasswordDeriveBytes" /> especificando la contraseña y el valor de clave "salt" que se van a usar para derivar la clave.</span><span class="sxs-lookup"><span data-stu-id="cac13-110">Initializes a new instance of the <see cref="T:System.Security.Cryptography.PasswordDeriveBytes" /> class specifying the password and key salt to use to derive the key.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!IMPORTANT]
>  <span data-ttu-id="cac13-111">Nunca codificar una contraseña en el código fuente.</span><span class="sxs-lookup"><span data-stu-id="cac13-111">Never hard code a password within your source code.</span></span>  <span data-ttu-id="cac13-112">Contraseñas codificadas de forma rígida se pueden recuperar desde un ensamblado con el [Ildasm.exe (Desensamblador de IL)](~/docs/framework/tools/ildasm-exe-il-disassembler.md), un editor hexadecimal, o sencillamente abriendo el ensamblado en un editor de texto como Notepad.exe.</span><span class="sxs-lookup"><span data-stu-id="cac13-112">Hard-coded passwords can be retrieved from an assembly using the [Ildasm.exe (IL Disassembler)](~/docs/framework/tools/ildasm-exe-il-disassembler.md), a hex editor, or by simply opening up the assembly in a text editor such as Notepad.exe.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="cac13-113">En el ejemplo de código siguiente se crea una clave a partir de una contraseña mediante la <xref:System.Security.Cryptography.PasswordDeriveBytes> clase.</span><span class="sxs-lookup"><span data-stu-id="cac13-113">The following code example creates a key from a password using the <xref:System.Security.Cryptography.PasswordDeriveBytes> class.</span></span>  
  
 [!code-cpp[Cryptography.PasswordDerivedbytes#1](~/samples/snippets/cpp/VS_Snippets_CLR/Cryptography.PasswordDerivedbytes/cpp/sample.cpp#1)]
 [!code-csharp[Cryptography.PasswordDerivedbytes#1](~/samples/snippets/csharp/VS_Snippets_CLR/Cryptography.PasswordDerivedbytes/CS/sample.cs#1)]
 [!code-vb[Cryptography.PasswordDerivedbytes#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Cryptography.PasswordDerivedbytes/VB/sample.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public PasswordDeriveBytes (string strPassword, byte[] rgbSalt);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string strPassword, unsigned int8[] rgbSalt) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.PasswordDeriveBytes.#ctor(System.String,System.Byte[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (strPassword As String, rgbSalt As Byte())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; PasswordDeriveBytes(System::String ^ strPassword, cli::array &lt;System::Byte&gt; ^ rgbSalt);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Csp</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="strPassword" Type="System.String" />
        <Parameter Name="rgbSalt" Type="System.Byte[]" />
      </Parameters>
      <Docs>
        <param name="strPassword"><span data-ttu-id="cac13-114">Contraseña para la que se va a derivar la clave.</span><span class="sxs-lookup"><span data-stu-id="cac13-114">The password for which to derive the key.</span></span></param>
        <param name="rgbSalt"><span data-ttu-id="cac13-115">Valor de clave "salt" que se va a usar para derivar la clave.</span><span class="sxs-lookup"><span data-stu-id="cac13-115">The key salt to use to derive the key.</span></span></param>
        <summary><span data-ttu-id="cac13-116">Inicializa una nueva instancia de la clase <see cref="T:System.Security.Cryptography.PasswordDeriveBytes" /> con la contraseña y el valor de clave "salt" de clave que se van a usar para derivar la clave.</span><span class="sxs-lookup"><span data-stu-id="cac13-116">Initializes a new instance of the <see cref="T:System.Security.Cryptography.PasswordDeriveBytes" /> class with the password and key salt to use to derive the key.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!IMPORTANT]
>  <span data-ttu-id="cac13-117">Nunca codificar una contraseña en el código fuente.</span><span class="sxs-lookup"><span data-stu-id="cac13-117">Never hard-code a password within your source code.</span></span>  <span data-ttu-id="cac13-118">Codificado contraseñas se pueden recuperar desde un ensamblado con el [Ildasm.exe (Desensamblador de IL)](~/docs/framework/tools/ildasm-exe-il-disassembler.md) herramienta, un editor hexadecimal, o sencillamente abriendo el ensamblado en un editor de texto como notepad.exe.</span><span class="sxs-lookup"><span data-stu-id="cac13-118">Hard coded passwords can be retrieved from an assembly using the [Ildasm.exe (IL Disassembler)](~/docs/framework/tools/ildasm-exe-il-disassembler.md) tool, a hex editor, or by simply opening up the assembly in a text editor like notepad.exe.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public PasswordDeriveBytes (byte[] password, byte[] salt, System.Security.Cryptography.CspParameters cspParams);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(unsigned int8[] password, unsigned int8[] salt, class System.Security.Cryptography.CspParameters cspParams) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.PasswordDeriveBytes.#ctor(System.Byte[],System.Byte[],System.Security.Cryptography.CspParameters)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (password As Byte(), salt As Byte(), cspParams As CspParameters)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; PasswordDeriveBytes(cli::array &lt;System::Byte&gt; ^ password, cli::array &lt;System::Byte&gt; ^ salt, System::Security::Cryptography::CspParameters ^ cspParams);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Csp</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="password" Type="System.Byte[]" />
        <Parameter Name="salt" Type="System.Byte[]" />
        <Parameter Name="cspParams" Type="System.Security.Cryptography.CspParameters" />
      </Parameters>
      <Docs>
        <param name="password"><span data-ttu-id="cac13-119">Contraseña para la que se va a derivar la clave.</span><span class="sxs-lookup"><span data-stu-id="cac13-119">The password to derive the key for.</span></span></param>
        <param name="salt"><span data-ttu-id="cac13-120">Valor de clave "salt" que se va a usar para derivar la clave.</span><span class="sxs-lookup"><span data-stu-id="cac13-120">The key salt to use to derive the key.</span></span></param>
        <param name="cspParams"><span data-ttu-id="cac13-121">Los parámetros del proveedor de servicios criptográficos (CSP) para la operación.</span><span class="sxs-lookup"><span data-stu-id="cac13-121">The cryptographic service provider (CSP) parameters for the operation.</span></span></param>
        <summary><span data-ttu-id="cac13-122">Inicializa una nueva instancia de la clase <see cref="T:System.Security.Cryptography.PasswordDeriveBytes" /> especificando la contraseña, el valor de clave "salt" y los parámetros del proveedor de servicios criptográficos (CSP) que se van a usar para derivar la clave.</span><span class="sxs-lookup"><span data-stu-id="cac13-122">Initializes a new instance of the <see cref="T:System.Security.Cryptography.PasswordDeriveBytes" /> class specifying the password, key salt, and cryptographic service provider (CSP) to use to derive the key.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!IMPORTANT]
>  <span data-ttu-id="cac13-123">Nunca codificar una contraseña en el código fuente.</span><span class="sxs-lookup"><span data-stu-id="cac13-123">Never hard code a password within your source code.</span></span>  <span data-ttu-id="cac13-124">Contraseñas codificadas de forma rígida se pueden recuperar desde un ensamblado con el [Ildasm.exe (Desensamblador de IL)](~/docs/framework/tools/ildasm-exe-il-disassembler.md) l, un editor hexadecimal, o sencillamente abriendo el ensamblado en un editor de texto como Notepad.exe.</span><span class="sxs-lookup"><span data-stu-id="cac13-124">Hard-coded passwords can be retrieved from an assembly using the [Ildasm.exe (IL Disassembler)](~/docs/framework/tools/ildasm-exe-il-disassembler.md) l, a hex editor, or by simply opening up the assembly in a text editor such as Notepad.exe.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="cac13-125">En el ejemplo de código siguiente se crea una clave a partir de una contraseña mediante la <xref:System.Security.Cryptography.PasswordDeriveBytes> clase.</span><span class="sxs-lookup"><span data-stu-id="cac13-125">The following code example creates a key from a password using the <xref:System.Security.Cryptography.PasswordDeriveBytes> class.</span></span>  
  
 [!code-cpp[Cryptography.PasswordDerivedbytes#1](~/samples/snippets/cpp/VS_Snippets_CLR/Cryptography.PasswordDerivedbytes/cpp/sample.cpp#1)]
 [!code-csharp[Cryptography.PasswordDerivedbytes#1](~/samples/snippets/csharp/VS_Snippets_CLR/Cryptography.PasswordDerivedbytes/CS/sample.cs#1)]
 [!code-vb[Cryptography.PasswordDerivedbytes#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Cryptography.PasswordDerivedbytes/VB/sample.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public PasswordDeriveBytes (string strPassword, byte[] rgbSalt, System.Security.Cryptography.CspParameters cspParams);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string strPassword, unsigned int8[] rgbSalt, class System.Security.Cryptography.CspParameters cspParams) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.PasswordDeriveBytes.#ctor(System.String,System.Byte[],System.Security.Cryptography.CspParameters)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (strPassword As String, rgbSalt As Byte(), cspParams As CspParameters)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; PasswordDeriveBytes(System::String ^ strPassword, cli::array &lt;System::Byte&gt; ^ rgbSalt, System::Security::Cryptography::CspParameters ^ cspParams);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Csp</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="strPassword" Type="System.String" />
        <Parameter Name="rgbSalt" Type="System.Byte[]" />
        <Parameter Name="cspParams" Type="System.Security.Cryptography.CspParameters" />
      </Parameters>
      <Docs>
        <param name="strPassword"><span data-ttu-id="cac13-126">Contraseña para la que se va a derivar la clave.</span><span class="sxs-lookup"><span data-stu-id="cac13-126">The password for which to derive the key.</span></span></param>
        <param name="rgbSalt"><span data-ttu-id="cac13-127">Valor de clave "salt" que se va a usar para derivar la clave.</span><span class="sxs-lookup"><span data-stu-id="cac13-127">The key salt to use to derive the key.</span></span></param>
        <param name="cspParams"><span data-ttu-id="cac13-128">Parámetros del proveedor de servicios criptográficos (CSP) de la operación.</span><span class="sxs-lookup"><span data-stu-id="cac13-128">The CSP parameters for the operation.</span></span></param>
        <summary><span data-ttu-id="cac13-129">Inicializa una nueva instancia de la clase <see cref="T:System.Security.Cryptography.PasswordDeriveBytes" /> con la contraseña, el valor de clave "salt" y los parámetros del proveedor de servicios criptográficos (CSP) que se van a usar para derivar la clave.</span><span class="sxs-lookup"><span data-stu-id="cac13-129">Initializes a new instance of the <see cref="T:System.Security.Cryptography.PasswordDeriveBytes" /> class with the password, key salt, and cryptographic service provider (CSP) parameters to use to derive the key.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!IMPORTANT]
>  <span data-ttu-id="cac13-130">Nunca codificar una contraseña en el código fuente.</span><span class="sxs-lookup"><span data-stu-id="cac13-130">Never hard-code a password within your source code.</span></span>  <span data-ttu-id="cac13-131">Codificado contraseñas se pueden recuperar desde un ensamblado con el [Ildasm.exe (Desensamblador de IL)](~/docs/framework/tools/ildasm-exe-il-disassembler.md) herramienta, un editor hexadecimal, o sencillamente abriendo el ensamblado en un editor de texto como notepad.exe.</span><span class="sxs-lookup"><span data-stu-id="cac13-131">Hard coded passwords can be retrieved from an assembly using the [Ildasm.exe (IL Disassembler)](~/docs/framework/tools/ildasm-exe-il-disassembler.md) tool, a hex editor, or by simply opening up the assembly in a text editor like notepad.exe.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public PasswordDeriveBytes (byte[] password, byte[] salt, string hashName, int iterations);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(unsigned int8[] password, unsigned int8[] salt, string hashName, int32 iterations) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.PasswordDeriveBytes.#ctor(System.Byte[],System.Byte[],System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (password As Byte(), salt As Byte(), hashName As String, iterations As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; PasswordDeriveBytes(cli::array &lt;System::Byte&gt; ^ password, cli::array &lt;System::Byte&gt; ^ salt, System::String ^ hashName, int iterations);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Csp</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="password" Type="System.Byte[]" />
        <Parameter Name="salt" Type="System.Byte[]" />
        <Parameter Name="hashName" Type="System.String" />
        <Parameter Name="iterations" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="password"><span data-ttu-id="cac13-132">Contraseña para la que se va a derivar la clave.</span><span class="sxs-lookup"><span data-stu-id="cac13-132">The password to derive the key for.</span></span></param>
        <param name="salt"><span data-ttu-id="cac13-133">Valor de clave "salt" que se va a usar para derivar la clave.</span><span class="sxs-lookup"><span data-stu-id="cac13-133">The key salt to use to derive the key.</span></span></param>
        <param name="hashName"><span data-ttu-id="cac13-134">Algoritmo hash que se va a usar para derivar la clave.</span><span class="sxs-lookup"><span data-stu-id="cac13-134">The hash algorithm to use to derive the key.</span></span></param>
        <param name="iterations"><span data-ttu-id="cac13-135">Contador de iteraciones que se va a usar para derivar la clave.</span><span class="sxs-lookup"><span data-stu-id="cac13-135">The iteration count to use to derive the key.</span></span></param>
        <summary><span data-ttu-id="cac13-136">Inicializa una nueva instancia de la clase <see cref="T:System.Security.Cryptography.PasswordDeriveBytes" /> especificando  la contraseña, el valor de clave "salt", el nombre hash y las iteraciones que se van a usar para derivar la clave.</span><span class="sxs-lookup"><span data-stu-id="cac13-136">Initializes a new instance of the <see cref="T:System.Security.Cryptography.PasswordDeriveBytes" /> class specifying the password, key salt, hash name, and iterations to use to derive the key.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!IMPORTANT]
>  <span data-ttu-id="cac13-137">Nunca codificar una contraseña en el código fuente.</span><span class="sxs-lookup"><span data-stu-id="cac13-137">Never hard code a password within your source code.</span></span>  <span data-ttu-id="cac13-138">Contraseñas codificadas de forma rígida se pueden recuperar desde un ensamblado con el [Ildasm.exe (Desensamblador de IL)](~/docs/framework/tools/ildasm-exe-il-disassembler.md), un editor hexadecimal, o sencillamente abriendo el ensamblado en un editor de texto como Notepad.exe.</span><span class="sxs-lookup"><span data-stu-id="cac13-138">Hard-coded passwords can be retrieved from an assembly using the [Ildasm.exe (IL Disassembler)](~/docs/framework/tools/ildasm-exe-il-disassembler.md), a hex editor, or by simply opening up the assembly in a text editor such as Notepad.exe.</span></span>  
  
 <span data-ttu-id="cac13-139">Para obtener una lista de nombres de algoritmo de hash, vea la <xref:System.Security.Cryptography.CryptoConfig> clase.</span><span class="sxs-lookup"><span data-stu-id="cac13-139">For a list of hash algorithm names, see the <xref:System.Security.Cryptography.CryptoConfig> class.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Security.Cryptography.CryptoConfig" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public PasswordDeriveBytes (string strPassword, byte[] rgbSalt, string strHashName, int iterations);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string strPassword, unsigned int8[] rgbSalt, string strHashName, int32 iterations) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.PasswordDeriveBytes.#ctor(System.String,System.Byte[],System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (strPassword As String, rgbSalt As Byte(), strHashName As String, iterations As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; PasswordDeriveBytes(System::String ^ strPassword, cli::array &lt;System::Byte&gt; ^ rgbSalt, System::String ^ strHashName, int iterations);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Csp</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="strPassword" Type="System.String" />
        <Parameter Name="rgbSalt" Type="System.Byte[]" />
        <Parameter Name="strHashName" Type="System.String" />
        <Parameter Name="iterations" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="strPassword"><span data-ttu-id="cac13-140">Contraseña para la que se va a derivar la clave.</span><span class="sxs-lookup"><span data-stu-id="cac13-140">The password for which to derive the key.</span></span></param>
        <param name="rgbSalt"><span data-ttu-id="cac13-141">Valor de clave "salt" que se va a usar para derivar la clave.</span><span class="sxs-lookup"><span data-stu-id="cac13-141">The key salt to use to derive the key.</span></span></param>
        <param name="strHashName"><span data-ttu-id="cac13-142">Nombre del algoritmo hash de la operación.</span><span class="sxs-lookup"><span data-stu-id="cac13-142">The name of the hash algorithm for the operation.</span></span></param>
        <param name="iterations"><span data-ttu-id="cac13-143">Número de iteraciones de la operación.</span><span class="sxs-lookup"><span data-stu-id="cac13-143">The number of iterations for the operation.</span></span></param>
        <summary><span data-ttu-id="cac13-144">Inicializa una nueva instancia de la clase <see cref="T:System.Security.Cryptography.PasswordDeriveBytes" /> con la contraseña, el valor de clave "salt", el nombre hash y el número de iteraciones que se van a usar para derivar la clave.</span><span class="sxs-lookup"><span data-stu-id="cac13-144">Initializes a new instance of the <see cref="T:System.Security.Cryptography.PasswordDeriveBytes" /> class with the password, key salt, hash name, and number of iterations to use to derive the key.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!IMPORTANT]
>  <span data-ttu-id="cac13-145">Nunca codificar una contraseña en el código fuente.</span><span class="sxs-lookup"><span data-stu-id="cac13-145">Never hard-code a password within your source code.</span></span>  <span data-ttu-id="cac13-146">Codificado contraseñas se pueden recuperar desde un ensamblado con el [Ildasm.exe (Desensamblador de IL)](~/docs/framework/tools/ildasm-exe-il-disassembler.md) herramienta, un editor hexadecimal, o sencillamente abriendo el ensamblado en un editor de texto como notepad.exe.</span><span class="sxs-lookup"><span data-stu-id="cac13-146">Hard coded passwords can be retrieved from an assembly using the [Ildasm.exe (IL Disassembler)](~/docs/framework/tools/ildasm-exe-il-disassembler.md) tool, a hex editor, or by simply opening up the assembly in a text editor like notepad.exe.</span></span>  
  
 <span data-ttu-id="cac13-147">Para obtener una lista de nombres de algoritmo de hash, vea la <xref:System.Security.Cryptography.CryptoConfig> clase.</span><span class="sxs-lookup"><span data-stu-id="cac13-147">For a list of hash algorithm names, see the <xref:System.Security.Cryptography.CryptoConfig> class.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Security.Cryptography.CryptoConfig" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public PasswordDeriveBytes (byte[] password, byte[] salt, string hashName, int iterations, System.Security.Cryptography.CspParameters cspParams);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(unsigned int8[] password, unsigned int8[] salt, string hashName, int32 iterations, class System.Security.Cryptography.CspParameters cspParams) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.PasswordDeriveBytes.#ctor(System.Byte[],System.Byte[],System.String,System.Int32,System.Security.Cryptography.CspParameters)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (password As Byte(), salt As Byte(), hashName As String, iterations As Integer, cspParams As CspParameters)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; PasswordDeriveBytes(cli::array &lt;System::Byte&gt; ^ password, cli::array &lt;System::Byte&gt; ^ salt, System::String ^ hashName, int iterations, System::Security::Cryptography::CspParameters ^ cspParams);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Csp</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="password" Type="System.Byte[]" />
        <Parameter Name="salt" Type="System.Byte[]" />
        <Parameter Name="hashName" Type="System.String" />
        <Parameter Name="iterations" Type="System.Int32" />
        <Parameter Name="cspParams" Type="System.Security.Cryptography.CspParameters" />
      </Parameters>
      <Docs>
        <param name="password"><span data-ttu-id="cac13-148">Contraseña para la que se va a derivar la clave.</span><span class="sxs-lookup"><span data-stu-id="cac13-148">The password to derive the key for.</span></span></param>
        <param name="salt"><span data-ttu-id="cac13-149">Valor de clave "salt" que se va a usar para derivar la clave.</span><span class="sxs-lookup"><span data-stu-id="cac13-149">The key salt to use to derive the key.</span></span></param>
        <param name="hashName"><span data-ttu-id="cac13-150">Algoritmo hash que se va a usar para derivar la clave.</span><span class="sxs-lookup"><span data-stu-id="cac13-150">The hash algorithm to use to derive the key.</span></span></param>
        <param name="iterations"><span data-ttu-id="cac13-151">Contador de iteraciones que se va a usar para derivar la clave.</span><span class="sxs-lookup"><span data-stu-id="cac13-151">The iteration count to use to derive the key.</span></span></param>
        <param name="cspParams"><span data-ttu-id="cac13-152">Los parámetros del proveedor de servicios criptográficos (CSP) para la operación.</span><span class="sxs-lookup"><span data-stu-id="cac13-152">The cryptographic service provider (CSP) parameters for the operation.</span></span></param>
        <summary><span data-ttu-id="cac13-153">Inicializa una nueva instancia de la clase <see cref="T:System.Security.Cryptography.PasswordDeriveBytes" /> especificando la contraseña, el valor de clave "salt", el nombre del algoritmo hash, las iteraciones y los parámetros del proveedor de servicios criptográficos (CSP) que se van a usar para derivar la clave.</span><span class="sxs-lookup"><span data-stu-id="cac13-153">Initializes a new instance of the <see cref="T:System.Security.Cryptography.PasswordDeriveBytes" /> class specifying the password, key salt, hash name, iterations, and cryptographic service provider (CSP) to use to derive the key.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!IMPORTANT]
>  <span data-ttu-id="cac13-154">Nunca codificar una contraseña en el código fuente.</span><span class="sxs-lookup"><span data-stu-id="cac13-154">Never hard code a password within your source code.</span></span>  <span data-ttu-id="cac13-155">Contraseñas codificadas de forma rígida se pueden recuperar desde un ensamblado con el [Ildasm.exe (Desensamblador de IL)](~/docs/framework/tools/ildasm-exe-il-disassembler.md), un editor hexadecimal, o sencillamente abriendo el ensamblado en un editor de texto como Notepad.exe.</span><span class="sxs-lookup"><span data-stu-id="cac13-155">Hard-coded passwords can be retrieved from an assembly using the [Ildasm.exe (IL Disassembler)](~/docs/framework/tools/ildasm-exe-il-disassembler.md), a hex editor, or by simply opening up the assembly in a text editor such as Notepad.exe.</span></span>  
  
 <span data-ttu-id="cac13-156">Para obtener una lista de nombres de algoritmo de hash, vea la <xref:System.Security.Cryptography.CryptoConfig> clase.</span><span class="sxs-lookup"><span data-stu-id="cac13-156">For a list of hash algorithm names, see the <xref:System.Security.Cryptography.CryptoConfig> class.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Security.Cryptography.CryptoConfig" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public PasswordDeriveBytes (string strPassword, byte[] rgbSalt, string strHashName, int iterations, System.Security.Cryptography.CspParameters cspParams);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string strPassword, unsigned int8[] rgbSalt, string strHashName, int32 iterations, class System.Security.Cryptography.CspParameters cspParams) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.PasswordDeriveBytes.#ctor(System.String,System.Byte[],System.String,System.Int32,System.Security.Cryptography.CspParameters)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (strPassword As String, rgbSalt As Byte(), strHashName As String, iterations As Integer, cspParams As CspParameters)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; PasswordDeriveBytes(System::String ^ strPassword, cli::array &lt;System::Byte&gt; ^ rgbSalt, System::String ^ strHashName, int iterations, System::Security::Cryptography::CspParameters ^ cspParams);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Csp</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="strPassword" Type="System.String" />
        <Parameter Name="rgbSalt" Type="System.Byte[]" />
        <Parameter Name="strHashName" Type="System.String" />
        <Parameter Name="iterations" Type="System.Int32" />
        <Parameter Name="cspParams" Type="System.Security.Cryptography.CspParameters" />
      </Parameters>
      <Docs>
        <param name="strPassword"><span data-ttu-id="cac13-157">Contraseña para la que se va a derivar la clave.</span><span class="sxs-lookup"><span data-stu-id="cac13-157">The password for which to derive the key.</span></span></param>
        <param name="rgbSalt"><span data-ttu-id="cac13-158">Valor de clave "salt" que se va a usar para derivar la clave.</span><span class="sxs-lookup"><span data-stu-id="cac13-158">The key salt to use to derive the key.</span></span></param>
        <param name="strHashName"><span data-ttu-id="cac13-159">Nombre del algoritmo hash de la operación.</span><span class="sxs-lookup"><span data-stu-id="cac13-159">The name of the hash algorithm for the operation.</span></span></param>
        <param name="iterations"><span data-ttu-id="cac13-160">Número de iteraciones de la operación.</span><span class="sxs-lookup"><span data-stu-id="cac13-160">The number of iterations for the operation.</span></span></param>
        <param name="cspParams"><span data-ttu-id="cac13-161">Parámetros del proveedor de servicios criptográficos (CSP) de la operación.</span><span class="sxs-lookup"><span data-stu-id="cac13-161">The CSP parameters for the operation.</span></span></param>
        <summary><span data-ttu-id="cac13-162">Inicializa una nueva instancia de la clase <see cref="T:System.Security.Cryptography.PasswordDeriveBytes" /> con la contraseña, el valor de clave "salt", el nombre hash, el número de iteraciones y los parámetros del proveedor de servicios criptográficos (CSP) que se van a usar para derivar la clave.</span><span class="sxs-lookup"><span data-stu-id="cac13-162">Initializes a new instance of the <see cref="T:System.Security.Cryptography.PasswordDeriveBytes" /> class with the password, key salt, hash name, number of iterations, and cryptographic service provider (CSP) parameters to use to derive the key.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!IMPORTANT]
>  <span data-ttu-id="cac13-163">Nunca codificar una contraseña en el código fuente.</span><span class="sxs-lookup"><span data-stu-id="cac13-163">Never hard-code a password within your source code.</span></span>  <span data-ttu-id="cac13-164">Codificado contraseñas se pueden recuperar desde un ensamblado con el [Ildasm.exe (Desensamblador de IL)](~/docs/framework/tools/ildasm-exe-il-disassembler.md) herramienta, un editor hexadecimal, o sencillamente abriendo el ensamblado en un editor de texto como notepad.exe.</span><span class="sxs-lookup"><span data-stu-id="cac13-164">Hard coded passwords can be retrieved from an assembly using the [Ildasm.exe (IL Disassembler)](~/docs/framework/tools/ildasm-exe-il-disassembler.md) tool, a hex editor, or by simply opening up the assembly in a text editor like notepad.exe.</span></span>  
  
 <span data-ttu-id="cac13-165">Para obtener una lista de nombres de algoritmo de hash, vea la <xref:System.Security.Cryptography.CryptoConfig> clase.</span><span class="sxs-lookup"><span data-stu-id="cac13-165">For a list of hash algorithm names, see the <xref:System.Security.Cryptography.CryptoConfig> class.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Security.Cryptography.CryptoConfig" />
      </Docs>
    </Member>
    <Member MemberName="CryptDeriveKey">
      <MemberSignature Language="C#" Value="public byte[] CryptDeriveKey (string algname, string alghashname, int keySize, byte[] rgbIV);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance unsigned int8[] CryptDeriveKey(string algname, string alghashname, int32 keySize, unsigned int8[] rgbIV) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.PasswordDeriveBytes.CryptDeriveKey(System.String,System.String,System.Int32,System.Byte[])" />
      <MemberSignature Language="VB.NET" Value="Public Function CryptDeriveKey (algname As String, alghashname As String, keySize As Integer, rgbIV As Byte()) As Byte()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::Byte&gt; ^ CryptDeriveKey(System::String ^ algname, System::String ^ alghashname, int keySize, cli::array &lt;System::Byte&gt; ^ rgbIV);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Csp</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="algname" Type="System.String" />
        <Parameter Name="alghashname" Type="System.String" />
        <Parameter Name="keySize" Type="System.Int32" />
        <Parameter Name="rgbIV" Type="System.Byte[]" />
      </Parameters>
      <Docs>
        <param name="algname"><span data-ttu-id="cac13-166">Nombre del algoritmo para el que se va a derivar la clave.</span><span class="sxs-lookup"><span data-stu-id="cac13-166">The algorithm name for which to derive the key.</span></span></param>
        <param name="alghashname"><span data-ttu-id="cac13-167">Nombre del algoritmo hash que se va a usar para derivar la clave.</span><span class="sxs-lookup"><span data-stu-id="cac13-167">The hash algorithm name to use to derive the key.</span></span></param>
        <param name="keySize"><span data-ttu-id="cac13-168">Tamaño de la clave, en bits, que se va a derivar.</span><span class="sxs-lookup"><span data-stu-id="cac13-168">The size of the key, in bits, to derive.</span></span></param>
        <param name="rgbIV"><span data-ttu-id="cac13-169">Vector de inicialización (IV) que se va a usar para derivar la clave.</span><span class="sxs-lookup"><span data-stu-id="cac13-169">The initialization vector (IV) to use to derive the key.</span></span></param>
        <summary><span data-ttu-id="cac13-170">Deriva una clave criptográfica a partir del objeto <see cref="T:System.Security.Cryptography.PasswordDeriveBytes" />.</span><span class="sxs-lookup"><span data-stu-id="cac13-170">Derives a cryptographic key from the <see cref="T:System.Security.Cryptography.PasswordDeriveBytes" /> object.</span></span></summary>
        <returns><span data-ttu-id="cac13-171">Clave derivada.</span><span class="sxs-lookup"><span data-stu-id="cac13-171">The derived key.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cac13-172">Esta función es un contenedor de la función CryptoAPI CryptDeriveKey() y está diseñada para ofrecer interoperabilidad con aplicaciones mediante la API de criptografía.</span><span class="sxs-lookup"><span data-stu-id="cac13-172">This function is a wrapper for the Crypto API function CryptDeriveKey(), and is intended to offer interoperability with applications using the Crypto API.</span></span>  
  
 <span data-ttu-id="cac13-173">Si el `keySize` parámetro se establece en 0 bits, se utiliza el tamaño de la clave predeterminada para el algoritmo especificado.</span><span class="sxs-lookup"><span data-stu-id="cac13-173">If the `keySize` parameter is set to 0 bits, the default key size for the specified algorithm is used.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="cac13-174">Este ejemplo de código forma parte de un ejemplo mayor proporcionado para el <xref:System.Security.Cryptography.PasswordDeriveBytes> clase.</span><span class="sxs-lookup"><span data-stu-id="cac13-174">This code example is part of a larger example provided for the <xref:System.Security.Cryptography.PasswordDeriveBytes> class.</span></span>  
  
 [!code-cpp[Cryptography.PasswordDerivedbytes#2](~/samples/snippets/cpp/VS_Snippets_CLR/Cryptography.PasswordDerivedbytes/cpp/sample.cpp#2)]
 [!code-csharp[Cryptography.PasswordDerivedbytes#2](~/samples/snippets/csharp/VS_Snippets_CLR/Cryptography.PasswordDerivedbytes/CS/sample.cs#2)]
 [!code-vb[Cryptography.PasswordDerivedbytes#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/Cryptography.PasswordDerivedbytes/VB/sample.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.Cryptography.CryptographicException"><span data-ttu-id="cac13-175">El parámetro <paramref name="keySize" /> no es correcto.</span><span class="sxs-lookup"><span data-stu-id="cac13-175">The <paramref name="keySize" /> parameter is incorrect.</span></span>  
  
 <span data-ttu-id="cac13-176">O bien</span><span class="sxs-lookup"><span data-stu-id="cac13-176">-or-</span></span>  
  
 <span data-ttu-id="cac13-177">No se puede adquirir el proveedor de servicios criptográficos (CSP).</span><span class="sxs-lookup"><span data-stu-id="cac13-177">The cryptographic service provider (CSP) cannot be acquired.</span></span>  
  
 <span data-ttu-id="cac13-178">O bien</span><span class="sxs-lookup"><span data-stu-id="cac13-178">-or-</span></span>  
  
 <span data-ttu-id="cac13-179">El parámetro <paramref name="algname" /> no es un nombre de algoritmo válido.</span><span class="sxs-lookup"><span data-stu-id="cac13-179">The <paramref name="algname" /> parameter is not a valid algorithm name.</span></span>  
  
 <span data-ttu-id="cac13-180">O bien</span><span class="sxs-lookup"><span data-stu-id="cac13-180">-or-</span></span>  
  
 <span data-ttu-id="cac13-181">El parámetro <paramref name="alghashname" /> no es un nombre de algoritmo hash válido.</span><span class="sxs-lookup"><span data-stu-id="cac13-181">The <paramref name="alghashname" /> parameter is not a valid hash algorithm name.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected override void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.PasswordDeriveBytes.Dispose(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub Dispose (disposing As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void Dispose(bool disposing);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Csp</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing">
          <span data-ttu-id="cac13-182">Es <see langword="true" /> para liberar tanto recursos administrados como no administrados; es <see langword="false" /> para liberar únicamente recursos no administrados.</span><span class="sxs-lookup"><span data-stu-id="cac13-182"><see langword="true" /> to release both managed and unmanaged resources; <see langword="false" /> to release only unmanaged resources.</span></span></param>
        <summary><span data-ttu-id="cac13-183">Libera los recursos no administrados utilizados por la clase <see cref="T:System.Security.Cryptography.PasswordDeriveBytes" /> y, de forma opcional, libera los recursos administrados.</span><span class="sxs-lookup"><span data-stu-id="cac13-183">Releases the unmanaged resources used by the <see cref="T:System.Security.Cryptography.PasswordDeriveBytes" /> class and optionally releases the managed resources.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cac13-184">Se llama a este método público `Dispose()` método y `Finalize` método.</span><span class="sxs-lookup"><span data-stu-id="cac13-184">This method is called by the public `Dispose()` method and the `Finalize` method.</span></span> <span data-ttu-id="cac13-185">`Dispose()` se invoca el protegido `Dispose(Boolean)` método con el `disposing` parámetro establecido en `true`.</span><span class="sxs-lookup"><span data-stu-id="cac13-185">`Dispose()` invokes the protected `Dispose(Boolean)` method with the `disposing` parameter set to `true`.</span></span> <span data-ttu-id="cac13-186">`Finalize` invoca `Dispose` con `disposing` establecido en `false`.</span><span class="sxs-lookup"><span data-stu-id="cac13-186">`Finalize` invokes `Dispose` with `disposing` set to `false`.</span></span>  
  
 <span data-ttu-id="cac13-187">Cuando el parámetro `disposing` es `true`, este método libera todos los recursos retenidos por los objetos administrados a los que el control <xref:System.Security.Cryptography.PasswordDeriveBytes> hace referencia.</span><span class="sxs-lookup"><span data-stu-id="cac13-187">When the `disposing` parameter is `true`, this method releases all resources held by any managed objects that this <xref:System.Security.Cryptography.PasswordDeriveBytes> references.</span></span> <span data-ttu-id="cac13-188">Este método invoca al método `Dispose()` de cada uno de los objetos a los que se hace referencia.</span><span class="sxs-lookup"><span data-stu-id="cac13-188">This method invokes the `Dispose()` method of each referenced object.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>
            <span data-ttu-id="cac13-189"><see langword="Dispose" /> puede recibir varias llamadas de otros objetos.</span><span class="sxs-lookup"><span data-stu-id="cac13-189"><see langword="Dispose" /> can be called multiple times by other objects.</span></span> <span data-ttu-id="cac13-190">Al reemplazar <see langword="Dispose(Boolean)" />, tenga cuidado de no hacer referencia a objetos que se hayan eliminado en una llamada anterior a <see langword="Dispose" />.</span><span class="sxs-lookup"><span data-stu-id="cac13-190">When overriding <see langword="Dispose(Boolean)" />, be careful not to reference objects that have been previously disposed in an earlier call to <see langword="Dispose" />.</span></span> <span data-ttu-id="cac13-191">Para obtener más información sobre cómo implementar <see langword="Dispose(Boolean)" />, consulte [implementa un método Dispose](~/docs/standard/garbage-collection/implementing-dispose.md).</span><span class="sxs-lookup"><span data-stu-id="cac13-191">For more information about how to implement <see langword="Dispose(Boolean)" />, see [Implementing a Dispose Method](~/docs/standard/garbage-collection/implementing-dispose.md).</span></span>  
  
 <span data-ttu-id="cac13-192">Para obtener más información acerca de <see langword="Dispose" /> y <see langword="Finalize" />, consulte [limpiar recursos no administrados](~/docs/standard/garbage-collection/unmanaged.md).</span><span class="sxs-lookup"><span data-stu-id="cac13-192">For more information about <see langword="Dispose" /> and <see langword="Finalize" />, see [Cleaning Up Unmanaged Resources](~/docs/standard/garbage-collection/unmanaged.md).</span></span></para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="GetBytes">
      <MemberSignature Language="C#" Value="public override byte[] GetBytes (int cb);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance unsigned int8[] GetBytes(int32 cb) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.PasswordDeriveBytes.GetBytes(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetBytes (cb As Integer) As Byte()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override cli::array &lt;System::Byte&gt; ^ GetBytes(int cb);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Csp</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("Rfc2898DeriveBytes replaces PasswordDeriveBytes for deriving key material from a password and is preferred in new applications.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cb" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="cb"><span data-ttu-id="cac13-193">Número de bytes de clave pseudoaleatorios que se van a generar.</span><span class="sxs-lookup"><span data-stu-id="cac13-193">The number of pseudo-random key bytes to generate.</span></span></param>
        <summary><span data-ttu-id="cac13-194">Devuelve bytes de clave pseudoaleatorios.</span><span class="sxs-lookup"><span data-stu-id="cac13-194">Returns pseudo-random key bytes.</span></span></summary>
        <returns><span data-ttu-id="cac13-195">Matriz de bytes rellena de bytes de clave pseudoaleatorios.</span><span class="sxs-lookup"><span data-stu-id="cac13-195">A byte array filled with pseudo-random key bytes.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cac13-196">Este método puede crear cualquier número de bytes pseudoaleatorios.</span><span class="sxs-lookup"><span data-stu-id="cac13-196">This method can create any number of pseudo-random bytes.</span></span> <span data-ttu-id="cac13-197">Sin embargo, el nivel de la secuencia de bytes está limitado por el número de bytes en la salida de hash.</span><span class="sxs-lookup"><span data-stu-id="cac13-197">However, the strength of the byte sequence is limited by the number of bytes in the hash output.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="HashName">
      <MemberSignature Language="C#" Value="public string HashName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string HashName" />
      <MemberSignature Language="DocId" Value="P:System.Security.Cryptography.PasswordDeriveBytes.HashName" />
      <MemberSignature Language="VB.NET" Value="Public Property HashName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ HashName { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Csp</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="cac13-198">Obtiene o establece el nombre del algoritmo hash de la operación.</span><span class="sxs-lookup"><span data-stu-id="cac13-198">Gets or sets the name of the hash algorithm for the operation.</span></span></summary>
        <value><span data-ttu-id="cac13-199">Nombre del algoritmo hash de la operación.</span><span class="sxs-lookup"><span data-stu-id="cac13-199">The name of the hash algorithm for the operation.</span></span></value>
        <remarks>To be added.</remarks>
        <exception cref="T:System.Security.Cryptography.CryptographicException"><span data-ttu-id="cac13-200">El nombre del valor hash es fijo, y se ha intentado cambiar este valor.</span><span class="sxs-lookup"><span data-stu-id="cac13-200">The name of the hash value is fixed and an attempt is made to change this value.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="IterationCount">
      <MemberSignature Language="C#" Value="public int IterationCount { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 IterationCount" />
      <MemberSignature Language="DocId" Value="P:System.Security.Cryptography.PasswordDeriveBytes.IterationCount" />
      <MemberSignature Language="VB.NET" Value="Public Property IterationCount As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int IterationCount { int get(); void set(int value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Csp</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="cac13-201">Obtiene o establece el número de iteraciones de la operación.</span><span class="sxs-lookup"><span data-stu-id="cac13-201">Gets or sets the number of iterations for the operation.</span></span></summary>
        <value><span data-ttu-id="cac13-202">Número de iteraciones de la operación.</span><span class="sxs-lookup"><span data-stu-id="cac13-202">The number of iterations for the operation.</span></span></value>
        <remarks>To be added.</remarks>
        <exception cref="T:System.Security.Cryptography.CryptographicException"><span data-ttu-id="cac13-203">El número de iteraciones es fijo, y se ha intentado cambiar este valor.</span><span class="sxs-lookup"><span data-stu-id="cac13-203">The number of iterations is fixed and an attempt is made to change this value.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="cac13-204">No se puede establecer la propiedad porque su valor está fuera del intervalo.</span><span class="sxs-lookup"><span data-stu-id="cac13-204">The property cannot be set because its value is out of range.</span></span> <span data-ttu-id="cac13-205">Esta propiedad requiere un número no negativo.</span><span class="sxs-lookup"><span data-stu-id="cac13-205">This property requires a non-negative number.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Reset">
      <MemberSignature Language="C#" Value="public override void Reset ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Reset() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.PasswordDeriveBytes.Reset" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Reset ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Reset();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Csp</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="cac13-206">Restablece el estado de la operación.</span><span class="sxs-lookup"><span data-stu-id="cac13-206">Resets the state of the operation.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Salt">
      <MemberSignature Language="C#" Value="public byte[] Salt { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance unsigned int8[] Salt" />
      <MemberSignature Language="DocId" Value="P:System.Security.Cryptography.PasswordDeriveBytes.Salt" />
      <MemberSignature Language="VB.NET" Value="Public Property Salt As Byte()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property cli::array &lt;System::Byte&gt; ^ Salt { cli::array &lt;System::Byte&gt; ^ get(); void set(cli::array &lt;System::Byte&gt; ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Csp</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="cac13-207">Obtiene o establece el valor de clave "salt" de la operación.</span><span class="sxs-lookup"><span data-stu-id="cac13-207">Gets or sets the key salt value for the operation.</span></span></summary>
        <value><span data-ttu-id="cac13-208">Valor de clave "salt" de clave de la operación.</span><span class="sxs-lookup"><span data-stu-id="cac13-208">The key salt value for the operation.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cac13-209">Un ataque de diccionario es un ataque en el que el atacante intenta descifrar un mensaje cifrado comparando el valor cifrado con los valores cifrados calculados previamente para las claves más probables.</span><span class="sxs-lookup"><span data-stu-id="cac13-209">A dictionary attack is an attack in which the attacker attempts to decrypt an encrypted message by comparing the encrypted value with previously computed encrypted values for the most likely keys.</span></span> <span data-ttu-id="cac13-210">Este ataque se hace mucho más difícil la introducción de bytes aleatorios al final de la contraseña antes de la derivación de claves.</span><span class="sxs-lookup"><span data-stu-id="cac13-210">This attack is made much more difficult by the introduction of random bytes at the end of the password before the key derivation.</span></span> <span data-ttu-id="cac13-211">Estos bytes aleatorios se conocen como valor "salt".</span><span class="sxs-lookup"><span data-stu-id="cac13-211">These random bytes are known as salt.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.Cryptography.CryptographicException"><span data-ttu-id="cac13-212">El valor salt de clave es fijo, y se ha intentado cambiar este valor.</span><span class="sxs-lookup"><span data-stu-id="cac13-212">The key salt value is fixed and an attempt is made to change this value.</span></span></exception>
      </Docs>
    </Member>
  </Members>
</Type>