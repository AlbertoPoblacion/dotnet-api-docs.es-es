<Type Name="DataProtector" FullName="System.Security.Cryptography.DataProtector">
  <Metadata><Meta Name="ms.openlocfilehash" Value="d4e4bce52f8586be414a74c5308080a771fe7937" /><Meta Name="ms.sourcegitcommit" Value="434f60616a9793fa8436744549fc856e94f7a648" /><Meta Name="ms.translationtype" Value="HT" /><Meta Name="ms.contentlocale" Value="es-ES" /><Meta Name="ms.lasthandoff" Value="08/24/2018" /><Meta Name="ms.locfileid" Value="36625349" /></Metadata><TypeSignature Language="C#" Value="public abstract class DataProtector" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit DataProtector extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Security.Cryptography.DataProtector" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class DataProtector" />
  <TypeSignature Language="C++ CLI" Value="public ref class DataProtector abstract" />
  <TypeSignature Language="F#" Value="type DataProtector = class" />
  <AssemblyInfo>
    <AssemblyName>System.Security</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Proporciona la clase base para los protectores de datos.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Esta clase protege los datos almacenados de visualización y manipulación. El acceso a los datos protegidos se obtiene mediante la creación de una instancia de esta clase y el uso de las cadenas de propósito exacto que se usaron para proteger los datos.  El llamador no necesita una clave para proteger o desproteger los datos. La clave se proporciona mediante el algoritmo de cifrado.  
  
 Las clases derivadas deben invalidar el <xref:System.Security.Cryptography.DataProtector.ProviderProtect%2A> y <xref:System.Security.Cryptography.DataProtector.Unprotect%2A> métodos, que el <xref:System.Security.Cryptography.DataProtector> base clase devoluciones de llamadas en. También debe reemplazar el <xref:System.Security.Cryptography.DataProtector.IsReprotectRequired%2A> método, que siempre puede volver `true` con una posible pérdida de pequeña de eficacia cuando las aplicaciones actualización su base de datos de texto cifrado almacenados. Las clases derivadas deben proporcionar un constructor que llame al constructor de clase base, que establece el <xref:System.Security.Cryptography.DataProtector.ApplicationName%2A>, <xref:System.Security.Cryptography.DataProtector.SpecificPurposes%2A>, y <xref:System.Security.Cryptography.DataProtector.PrimaryPurpose%2A> propiedades.  
  
   
  
## Examples  
 El ejemplo siguiente muestra cómo crear datos de un protector que usa una clase de protección con una opción para entropía adicional. De forma predeterminada, el <xref:System.Security.Cryptography.DataProtector> clase antepone el hash de las propiedades de uso a los datos que se cifren. Puede desactivar esa funcionalidad y usar el propósito con hash como entropía adicional al llamar a un protector de datos con una opción de entropía adicional.  
  
 [!code-csharp[Cryptography.DataProtector#1](~/samples/snippets/csharp/VS_Snippets_CLR/cryptography.dataprotector/cs/class1.cs#1)]
 [!code-vb[Cryptography.DataProtector#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/cryptography.dataprotector/vb/class1.vb#1)]  
  
 En el ejemplo siguiente se muestra un protector de datos simple que usa el <xref:System.Security.Cryptography.DataProtector.PrependHashedPurposeToPlaintext%2A> funcionalidad de la <xref:System.Security.Cryptography.DataProtector> clase.  
  
 [!code-csharp[Cryptography.MemoryProtector#1](~/samples/snippets/csharp/VS_Snippets_CLR/cryptography.memoryprotector/cs/class1.cs#1)]
 [!code-vb[Cryptography.MemoryProtector#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/cryptography.memoryprotector/vb/class1.vb#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected DataProtector (string applicationName, string primaryPurpose, string[] specificPurposes);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(string applicationName, string primaryPurpose, string[] specificPurposes) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.DataProtector.#ctor(System.String,System.String,System.String[])" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New (applicationName As String, primaryPurpose As String, specificPurposes As String())" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; DataProtector(System::String ^ applicationName, System::String ^ primaryPurpose, cli::array &lt;System::String ^&gt; ^ specificPurposes);" />
      <MemberSignature Language="F#" Value="new System.Security.Cryptography.DataProtector : string * string * string[] -&gt; System.Security.Cryptography.DataProtector" Usage="new System.Security.Cryptography.DataProtector (applicationName, primaryPurpose, specificPurposes)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="applicationName" Type="System.String" />
        <Parameter Name="primaryPurpose" Type="System.String" />
        <Parameter Name="specificPurposes" Type="System.String[]" />
      </Parameters>
      <Docs>
        <param name="applicationName">El nombre de la aplicación.</param>
        <param name="primaryPurpose">El propósito principal de los datos protegidos.</param>
        <param name="specificPurposes">Los propósitos específicos para los datos protegidos.</param>
        <summary>Crea una nueva instancia de la clase <see cref="T:System.Security.Cryptography.DataProtector" /> utilizando el nombre de aplicación, el propósito principal y los propósitos concretos proporcionados.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este constructor establece la <xref:System.Security.Cryptography.DataProtector.ApplicationName%2A>, <xref:System.Security.Cryptography.DataProtector.PrimaryPurpose%2A>, y <xref:System.Security.Cryptography.DataProtector.SpecificPurposes%2A> propiedades. La combinación de estas tres propiedades debe identificar exclusivamente los datos que se va a proteger. Si los datos no tiene una identificación exclusiva, sin darse cuenta podría leer los datos incorrectos u otros datos pueden sustituirse por el suyo. Ejemplos de pares principales y específicos de uso son "factura" y número, "de regalo" y el número de tarjeta de regalo, "password" y cadena de dirección URL de la factura.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="applicationName" /> es una cadena vacía o <see langword="null" />.  
  
O bien 
 <paramref name="primaryPurpose" /> es una cadena vacía o <see langword="null" />.  
  
O bien 
 <paramref name="specificPurposes" /> contiene una cadena vacía o <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="ApplicationName">
      <MemberSignature Language="C#" Value="protected string ApplicationName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ApplicationName" />
      <MemberSignature Language="DocId" Value="P:System.Security.Cryptography.DataProtector.ApplicationName" />
      <MemberSignature Language="VB.NET" Value="Protected ReadOnly Property ApplicationName As String" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; property System::String ^ ApplicationName { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ApplicationName : string" Usage="System.Security.Cryptography.DataProtector.ApplicationName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene el nombre de la aplicación.</summary>
        <value>El nombre de la aplicación.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Create">
      <MemberSignature Language="C#" Value="public static System.Security.Cryptography.DataProtector Create (string providerClass, string applicationName, string primaryPurpose, params string[] specificPurposes);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Security.Cryptography.DataProtector Create(string providerClass, string applicationName, string primaryPurpose, string[] specificPurposes) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.DataProtector.Create(System.String,System.String,System.String,System.String[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Create (providerClass As String, applicationName As String, primaryPurpose As String, ParamArray specificPurposes As String()) As DataProtector" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Security::Cryptography::DataProtector ^ Create(System::String ^ providerClass, System::String ^ applicationName, System::String ^ primaryPurpose, ... cli::array &lt;System::String ^&gt; ^ specificPurposes);" />
      <MemberSignature Language="F#" Value="static member Create : string * string * string * string[] -&gt; System.Security.Cryptography.DataProtector" Usage="System.Security.Cryptography.DataProtector.Create (providerClass, applicationName, primaryPurpose, specificPurposes)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.Cryptography.DataProtector</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="providerClass" Type="System.String" />
        <Parameter Name="applicationName" Type="System.String" />
        <Parameter Name="primaryPurpose" Type="System.String" />
        <Parameter Name="specificPurposes" Type="System.String[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="providerClass">Nombre de clase del protector de datos.</param>
        <param name="applicationName">El nombre de la aplicación.</param>
        <param name="primaryPurpose">El propósito principal de los datos protegidos.</param>
        <param name="specificPurposes">Los propósitos específicos para los datos protegidos.</param>
        <summary>Crea una instancia de una implementación de protector de datos utilizando el nombre de clase del protector de datos, el nombre de la aplicación, el propósito principal y los propósitos concretos especificados.</summary>
        <returns>Objeto de la implementación del protector de los datos.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="providerClass" /> es <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="GetHashedPurpose">
      <MemberSignature Language="C#" Value="protected virtual byte[] GetHashedPurpose ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance unsigned int8[] GetHashedPurpose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.DataProtector.GetHashedPurpose" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function GetHashedPurpose () As Byte()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual cli::array &lt;System::Byte&gt; ^ GetHashedPurpose();" />
      <MemberSignature Language="F#" Value="abstract member GetHashedPurpose : unit -&gt; byte[]&#xA;override this.GetHashedPurpose : unit -&gt; byte[]" Usage="dataProtector.GetHashedPurpose " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Crea un hash de los valores de propiedad especificados por el constructor.</summary>
        <returns>Una matriz de bytes que contienen el valor hash de las propiedades <see cref="P:System.Security.Cryptography.DataProtector.ApplicationName" />, <see cref="P:System.Security.Cryptography.DataProtector.PrimaryPurpose" /> y <see cref="P:System.Security.Cryptography.DataProtector.SpecificPurposes" /> .</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Security.Cryptography.DataProtector.GetHashedPurpose%2A> calcula el hash de nombre de la aplicación y el propósito completo.  El propósito completo es una concatenación de todos los <xref:System.Security.Cryptography.DataProtector.PrimaryPurpose%2A> y <xref:System.Security.Cryptography.DataProtector.SpecificPurposes%2A> propiedades.  Cada una de las tres partes se prologa con su longitud, por lo que se puede invertir el hash.  
  
   
  
## Examples  
 El ejemplo siguiente muestra cómo usar el <xref:System.Security.Cryptography.DataProtector.GetHashedPurpose%2A> método a las propiedades de propósito para su uso como entropía adicional de hash.  Forma parte de un ejemplo más extenso de código para el <xref:System.Security.Cryptography.DataProtector> clase.  
  
 [!code-csharp[Cryptography.DataProtector#3](~/samples/snippets/csharp/VS_Snippets_CLR/cryptography.dataprotector/cs/class1.cs#3)]
 [!code-vb[Cryptography.DataProtector#3](~/samples/snippets/visualbasic/VS_Snippets_CLR/cryptography.dataprotector/vb/class1.vb#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsReprotectRequired">
      <MemberSignature Language="C#" Value="public abstract bool IsReprotectRequired (byte[] encryptedData);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool IsReprotectRequired(unsigned int8[] encryptedData) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.DataProtector.IsReprotectRequired(System.Byte[])" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function IsReprotectRequired (encryptedData As Byte()) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract bool IsReprotectRequired(cli::array &lt;System::Byte&gt; ^ encryptedData);" />
      <MemberSignature Language="F#" Value="abstract member IsReprotectRequired : byte[] -&gt; bool" Usage="dataProtector.IsReprotectRequired encryptedData" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="encryptedData" Type="System.Byte[]" />
      </Parameters>
      <Docs>
        <param name="encryptedData">Datos cifrados que se van a evaluar.</param>
        <summary>Determina si es preciso volver a cifrar los datos cifrados especificados.</summary>
        <returns><see langword="true" /> si los datos se deben volver a cifrar; si no, <see langword="false" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PrependHashedPurposeToPlaintext">
      <MemberSignature Language="C#" Value="protected virtual bool PrependHashedPurposeToPlaintext { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool PrependHashedPurposeToPlaintext" />
      <MemberSignature Language="DocId" Value="P:System.Security.Cryptography.DataProtector.PrependHashedPurposeToPlaintext" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable ReadOnly Property PrependHashedPurposeToPlaintext As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual property bool PrependHashedPurposeToPlaintext { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.PrependHashedPurposeToPlaintext : bool" Usage="System.Security.Cryptography.DataProtector.PrependHashedPurposeToPlaintext" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Especifica si el elemento hash se antepone a la matriz de texto antes del cifrado.</summary>
        <value>Siempre es <see langword="true" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 De forma predeterminada, se supone que las clases derivadas antepondrá el hash de la <xref:System.Security.Cryptography.DataProtector.ApplicationName%2A>, <xref:System.Security.Cryptography.DataProtector.PrimaryPurpose%2A>, y <xref:System.Security.Cryptography.DataProtector.SpecificPurposes%2A> propiedades para el texto sin formato antes de cifrado y se compruebe y comprobar el hash durante el descifrado.  Si desea implementar una clase derivada especificar los datos antepuestos por sí mismo (por ejemplo, como un valor de entropía opcional), esta propiedad puede reemplazar y se establece para devolver `false`.  Si <xref:System.Security.Cryptography.DataProtector.PrependHashedPurposeToPlaintext%2A> es `false`, <xref:System.Security.Cryptography.DataProtector.Protect%2A> y <xref:System.Security.Cryptography.DataProtector.Unprotect%2A> pasa directamente a la <xref:System.Security.Cryptography.DataProtector.ProviderProtect%2A> y <xref:System.Security.Cryptography.DataProtector.ProviderUnprotect%2A> invalida sin alterar la matriz de bytes.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PrimaryPurpose">
      <MemberSignature Language="C#" Value="protected string PrimaryPurpose { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string PrimaryPurpose" />
      <MemberSignature Language="DocId" Value="P:System.Security.Cryptography.DataProtector.PrimaryPurpose" />
      <MemberSignature Language="VB.NET" Value="Protected ReadOnly Property PrimaryPurpose As String" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; property System::String ^ PrimaryPurpose { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.PrimaryPurpose : string" Usage="System.Security.Cryptography.DataProtector.PrimaryPurpose" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene el propósito principal de los datos protegidos.</summary>
        <value>El propósito principal de los datos protegidos.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Protect">
      <MemberSignature Language="C#" Value="public byte[] Protect (byte[] userData);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance unsigned int8[] Protect(unsigned int8[] userData) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.DataProtector.Protect(System.Byte[])" />
      <MemberSignature Language="VB.NET" Value="Public Function Protect (userData As Byte()) As Byte()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::Byte&gt; ^ Protect(cli::array &lt;System::Byte&gt; ^ userData);" />
      <MemberSignature Language="F#" Value="member this.Protect : byte[] -&gt; byte[]" Usage="dataProtector.Protect userData" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="userData" Type="System.Byte[]" />
      </Parameters>
      <Docs>
        <param name="userData">Datos que se van a proteger.</param>
        <summary>Protege los datos especificados pro el usuario.</summary>
        <returns>Matriz de bytes que contiene los datos cifrados.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="userData" /> es <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="ProviderProtect">
      <MemberSignature Language="C#" Value="protected abstract byte[] ProviderProtect (byte[] userData);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance unsigned int8[] ProviderProtect(unsigned int8[] userData) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.DataProtector.ProviderProtect(System.Byte[])" />
      <MemberSignature Language="VB.NET" Value="Protected MustOverride Function ProviderProtect (userData As Byte()) As Byte()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; abstract cli::array &lt;System::Byte&gt; ^ ProviderProtect(cli::array &lt;System::Byte&gt; ^ userData);" />
      <MemberSignature Language="F#" Value="abstract member ProviderProtect : byte[] -&gt; byte[]" Usage="dataProtector.ProviderProtect userData" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="userData" Type="System.Byte[]" />
      </Parameters>
      <Docs>
        <param name="userData">Datos que se van a cifrar.</param>
        <summary>Especifica el método delegado de la clase derivada a la que el método <see cref="M:System.Security.Cryptography.DataProtector.Protect(System.Byte[])" /> de la clase base devuelve la llamada.</summary>
        <returns>Matriz de bytes que contiene los datos cifrados.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 En el siguiente ejemplo se muestra una implementación del método <xref:System.Security.Cryptography.DataProtector.ProviderProtect%2A>.  Forma parte de un ejemplo más extenso de código para el <xref:System.Security.Cryptography.DataProtector> clase.  
  
 [!code-csharp[Cryptography.MemoryProtector#3](~/samples/snippets/csharp/VS_Snippets_CLR/cryptography.memoryprotector/cs/class1.cs#3)]
 [!code-vb[Cryptography.MemoryProtector#3](~/samples/snippets/visualbasic/VS_Snippets_CLR/cryptography.memoryprotector/vb/class1.vb#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ProviderUnprotect">
      <MemberSignature Language="C#" Value="protected abstract byte[] ProviderUnprotect (byte[] encryptedData);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance unsigned int8[] ProviderUnprotect(unsigned int8[] encryptedData) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.DataProtector.ProviderUnprotect(System.Byte[])" />
      <MemberSignature Language="VB.NET" Value="Protected MustOverride Function ProviderUnprotect (encryptedData As Byte()) As Byte()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; abstract cli::array &lt;System::Byte&gt; ^ ProviderUnprotect(cli::array &lt;System::Byte&gt; ^ encryptedData);" />
      <MemberSignature Language="F#" Value="abstract member ProviderUnprotect : byte[] -&gt; byte[]" Usage="dataProtector.ProviderUnprotect encryptedData" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="encryptedData" Type="System.Byte[]" />
      </Parameters>
      <Docs>
        <param name="encryptedData">Datos que se van a descifrar.</param>
        <summary>Especifica el método delegado de la clase derivada a la que el método <see cref="M:System.Security.Cryptography.DataProtector.Unprotect(System.Byte[])" /> de la clase base devuelve la llamada.</summary>
        <returns>Datos sin cifrar...</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 En el siguiente ejemplo se muestra una implementación del método <xref:System.Security.Cryptography.DataProtector.ProviderUnprotect%2A>.  Forma parte de un ejemplo más extenso de código para el <xref:System.Security.Cryptography.DataProtector> clase.  
  
 [!code-csharp[Cryptography.MemoryProtector#4](~/samples/snippets/csharp/VS_Snippets_CLR/cryptography.memoryprotector/cs/class1.cs#4)]
 [!code-vb[Cryptography.MemoryProtector#4](~/samples/snippets/visualbasic/VS_Snippets_CLR/cryptography.memoryprotector/vb/class1.vb#4)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SpecificPurposes">
      <MemberSignature Language="C#" Value="protected System.Collections.Generic.IEnumerable&lt;string&gt; SpecificPurposes { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.IEnumerable`1&lt;string&gt; SpecificPurposes" />
      <MemberSignature Language="DocId" Value="P:System.Security.Cryptography.DataProtector.SpecificPurposes" />
      <MemberSignature Language="VB.NET" Value="Protected ReadOnly Property SpecificPurposes As IEnumerable(Of String)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; property System::Collections::Generic::IEnumerable&lt;System::String ^&gt; ^ SpecificPurposes { System::Collections::Generic::IEnumerable&lt;System::String ^&gt; ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.SpecificPurposes : seq&lt;string&gt;" Usage="System.Security.Cryptography.DataProtector.SpecificPurposes" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.String&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene los propósitos específicos para los datos protegidos.</summary>
        <value>Colección de fines concretos para los datos protegidos.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Unprotect">
      <MemberSignature Language="C#" Value="public byte[] Unprotect (byte[] encryptedData);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance unsigned int8[] Unprotect(unsigned int8[] encryptedData) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.DataProtector.Unprotect(System.Byte[])" />
      <MemberSignature Language="VB.NET" Value="Public Function Unprotect (encryptedData As Byte()) As Byte()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::Byte&gt; ^ Unprotect(cli::array &lt;System::Byte&gt; ^ encryptedData);" />
      <MemberSignature Language="F#" Value="member this.Unprotect : byte[] -&gt; byte[]" Usage="dataProtector.Unprotect encryptedData" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="encryptedData" Type="System.Byte[]" />
      </Parameters>
      <Docs>
        <param name="encryptedData">Datos cifrados que se van a desproteger.</param>
        <summary>Desprotege los datos protegidos especificados.</summary>
        <returns>Matriz de bytes que contiene los datos de texto sin formato.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="encryptedData" /> es <see langword="null" />.</exception>
        <exception cref="T:System.Security.Cryptography.CryptographicException"><paramref name="encryptedData" /> contenía un propósito no válido.</exception>
      </Docs>
    </Member>
  </Members>
</Type>