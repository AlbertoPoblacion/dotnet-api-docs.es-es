<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="RandomNumberGenerator.xml" source-language="en-US" target-language="es-ES">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac58941c4f4b7b3820fa1d653e1d60c162a44fab8e2.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">8941c4f4b7b3820fa1d653e1d60c162a44fab8e2</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-1.0,netcore-1.1,netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,netstandard-1.3,netstandard-1.4,netstandard-1.6,netstandard-2.0,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.Security.Cryptography.RandomNumberGenerator">
          <source>Represents the abstract class from which all implementations of cryptographic random number generators derive.</source>
          <target state="translated">Representa la clase abstracta de la que se derivan todas las implementaciones de los generadores de números aleatorios criptográficos.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Security.Cryptography.RandomNumberGenerator">
          <source>Cryptographic random number generators create cryptographically strong random values.</source>
          <target state="translated">Los generadores de números aleatorios criptográficos crear valores aleatorios criptográficamente seguros.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Security.Cryptography.RandomNumberGenerator">
          <source>To create a random number generator, call the <ph id="ph1">@System.Security.Cryptography.RandomNumberGenerator.Create</ph> method.</source>
          <target state="translated">Para crear un generador de números aleatorios, llame a la <ph id="ph1">@System.Security.Cryptography.RandomNumberGenerator.Create</ph> método.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Security.Cryptography.RandomNumberGenerator">
          <source>This is prefered over calling the constructor of the derived class <ph id="ph1">@System.Security.Cryptography.RNGCryptoServiceProvider</ph>, which is not available on all platforms.</source>
          <target state="translated">Se trata de preferida a través de una llamada al constructor de la clase derivada <ph id="ph1">@System.Security.Cryptography.RNGCryptoServiceProvider</ph>, que no está disponible en todas las plataformas.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" uid="M:System.Security.Cryptography.RandomNumberGenerator.#ctor">
          <source>Initializes a new instance of <ph id="ph1">&lt;see cref="T:System.Security.Cryptography.RandomNumberGenerator" /&gt;</ph>.</source>
          <target state="translated">Inicializa una nueva instancia de la clase <ph id="ph1">&lt;see cref="T:System.Security.Cryptography.RandomNumberGenerator" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.Cryptography.RandomNumberGenerator.#ctor">
          <source>You cannot create an instance of an abstract class.</source>
          <target state="translated">No se puede crear una instancia de una clase abstracta.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.Cryptography.RandomNumberGenerator.#ctor">
          <source>Application code will create a new instance of a derived class.</source>
          <target state="translated">Código de la aplicación creará una nueva instancia de una clase derivada.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.Cryptography.RandomNumberGenerator.#ctor">
          <source>For an implementation of a cryptographic random number generator, use the derived class <ph id="ph1">&lt;xref:System.Security.Cryptography.RNGCryptoServiceProvider&gt;</ph>.</source>
          <target state="translated">Para obtener una implementación de un generador de números aleatorio criptográficos, utilice la clase derivada <ph id="ph1">&lt;xref:System.Security.Cryptography.RNGCryptoServiceProvider&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" uid="T:System.Security.Cryptography.RandomNumberGenerator">
          <source>Creates an instance of an implementation of a cryptographic random number generator.</source>
          <target state="translated">Crea una instancia de una implementación de un generador de números aleatorios criptográficos.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" uid="M:System.Security.Cryptography.RandomNumberGenerator.Create">
          <source>Creates an instance of the default implementation of a cryptographic random number generator that can be used to generate random data.</source>
          <target state="translated">Crea una instancia de la implementación predeterminada de un generador de números aleatorios criptográficos que se puede usar para generar datos aleatorios.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" uid="M:System.Security.Cryptography.RandomNumberGenerator.Create">
          <source>A new instance of a cryptographic random number generator.</source>
          <target state="translated">Nueva instancia de un generador de números aleatorios criptográficos.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" uid="M:System.Security.Cryptography.RandomNumberGenerator.Create(System.String)">
          <source>The name of the random number generator implementation to use.</source>
          <target state="translated">Nombre de la implementación del generador de números aleatorios que se va a usar.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" uid="M:System.Security.Cryptography.RandomNumberGenerator.Create(System.String)">
          <source>Creates an instance of the specified implementation of a cryptographic random number generator.</source>
          <target state="translated">Crea una instancia de la implementación especificada de un generador de números aleatorios criptográficos.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" uid="M:System.Security.Cryptography.RandomNumberGenerator.Create(System.String)">
          <source>A new instance of a cryptographic random number generator.</source>
          <target state="translated">Nueva instancia de un generador de números aleatorios criptográficos.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" uid="T:System.Security.Cryptography.RandomNumberGenerator">
          <source>When overridden in a derived class, releases the unmanaged resources used by the current instance of the <ph id="ph1">&lt;see cref="T:System.Security.Cryptography.RandomNumberGenerator" /&gt;</ph> class.</source>
          <target state="translated">Cuando se reemplaza en una clase derivada, libera los recursos no administrados usados por la instancia actual de la clase <ph id="ph1">&lt;see cref="T:System.Security.Cryptography.RandomNumberGenerator" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" uid="M:System.Security.Cryptography.RandomNumberGenerator.Dispose">
          <source>When overridden in a derived class, releases all resources used by the current instance of the <ph id="ph1">&lt;see cref="T:System.Security.Cryptography.RandomNumberGenerator" /&gt;</ph> class.</source>
          <target state="translated">Cuando se reemplaza en una clase derivada, libera todos los recursos usados por la instancia actual de la clase <ph id="ph1">&lt;see cref="T:System.Security.Cryptography.RandomNumberGenerator" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.Cryptography.RandomNumberGenerator.Dispose">
          <source>Call <ph id="ph1">`Dispose`</ph> when you are finished using the <ph id="ph2">&lt;xref:System.Security.Cryptography.RandomNumberGenerator&gt;</ph>.</source>
          <target state="translated">Llame a <ph id="ph1">`Dispose`</ph> cuando haya terminado de usar <ph id="ph2">&lt;xref:System.Security.Cryptography.RandomNumberGenerator&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.Cryptography.RandomNumberGenerator.Dispose">
          <source>The <ph id="ph1">`Dispose`</ph> method leaves the <ph id="ph2">&lt;xref:System.Security.Cryptography.RandomNumberGenerator&gt;</ph> in an unusable state.</source>
          <target state="translated">El método <ph id="ph1">`Dispose`</ph> deja el <ph id="ph2">&lt;xref:System.Security.Cryptography.RandomNumberGenerator&gt;</ph> en un estado no utilizable.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.Cryptography.RandomNumberGenerator.Dispose">
          <source>After calling <ph id="ph1">`Dispose`</ph>, you must release all references to the <ph id="ph2">&lt;xref:System.Security.Cryptography.RandomNumberGenerator&gt;</ph> so the garbage collector can reclaim the memory that the <ph id="ph3">&lt;xref:System.Security.Cryptography.RandomNumberGenerator&gt;</ph> was occupying.</source>
          <target state="translated">Después de llamar a <ph id="ph1">`Dispose`</ph>, debe liberar todas las referencias a la <ph id="ph2">&lt;xref:System.Security.Cryptography.RandomNumberGenerator&gt;</ph> para que el recolector de elementos no utilizados pueda reclamar la memoria que el <ph id="ph3">&lt;xref:System.Security.Cryptography.RandomNumberGenerator&gt;</ph> estaba ocupando.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.Cryptography.RandomNumberGenerator.Dispose">
          <source>For more information, see <bpt id="p1">[</bpt>Cleaning Up Unmanaged Resources<ept id="p1">](~/docs/standard/garbage-collection/unmanaged.md)</ept> and <bpt id="p2">[</bpt>Implementing a Dispose Method<ept id="p2">](~/docs/standard/garbage-collection/implementing-dispose.md)</ept>.</source>
          <target state="translated">Para obtener más información, consulte <bpt id="p1">[</bpt>limpiar recursos no administrados<ept id="p1">](~/docs/standard/garbage-collection/unmanaged.md)</ept> y <bpt id="p2">[</bpt>implementa un método Dispose<ept id="p2">](~/docs/standard/garbage-collection/implementing-dispose.md)</ept>.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.Cryptography.RandomNumberGenerator.Dispose">
          <source>Always call <ph id="ph1">`Dispose`</ph> before you release your last reference to the <ph id="ph2">&lt;xref:System.Security.Cryptography.RandomNumberGenerator&gt;</ph>.</source>
          <target state="translated">Realice siempre una llamada a <ph id="ph1">`Dispose`</ph> antes de liberar la última referencia al objeto <ph id="ph2">&lt;xref:System.Security.Cryptography.RandomNumberGenerator&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.Cryptography.RandomNumberGenerator.Dispose">
          <source>Otherwise, the resources it is using will not be freed until the garbage collector calls the <ph id="ph1">&lt;xref:System.Security.Cryptography.RandomNumberGenerator&gt;</ph> object's <ph id="ph2">`Finalize`</ph> method.</source>
          <target state="translated">En caso contrario, los recursos que está usando no se liberarán hasta que el recolector de elementos no utilizados llame al método <ph id="ph1">&lt;xref:System.Security.Cryptography.RandomNumberGenerator&gt;</ph> del objeto <ph id="ph2">`Finalize`</ph>.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" uid="M:System.Security.Cryptography.RandomNumberGenerator.Dispose(System.Boolean)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> to release both managed and unmanaged resources; <ph id="ph2">&lt;see langword="false" /&gt;</ph> to release only unmanaged resources.</source>
          <target state="translated">Es <ph id="ph1">&lt;see langword="true" /&gt;</ph> para liberar tanto recursos administrados como no administrados; es <ph id="ph2">&lt;see langword="false" /&gt;</ph> para liberar únicamente recursos no administrados.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" uid="M:System.Security.Cryptography.RandomNumberGenerator.Dispose(System.Boolean)">
          <source>When overridden in a derived class, releases the unmanaged resources used by the <ph id="ph1">&lt;see cref="T:System.Security.Cryptography.RandomNumberGenerator" /&gt;</ph> and optionally releases the managed resources.</source>
          <target state="translated">Cuando se reemplaza en una clase derivada, libera los recursos no administrados usados por <ph id="ph1">&lt;see cref="T:System.Security.Cryptography.RandomNumberGenerator" /&gt;</ph> y, de forma opcional, libera los recursos administrados.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.Cryptography.RandomNumberGenerator.Dispose(System.Boolean)">
          <source>This method is called by the public <ph id="ph1">`Dispose()`</ph> method and the <ph id="ph2">`Finalize`</ph> method.</source>
          <target state="translated">Se llama a este método público <ph id="ph1">`Dispose()`</ph> método y <ph id="ph2">`Finalize`</ph> método.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.Cryptography.RandomNumberGenerator.Dispose(System.Boolean)">
          <source><ph id="ph1">`Dispose()`</ph> invokes the protected <ph id="ph2">`Dispose(Boolean)`</ph> method with the <ph id="ph3">`disposing`</ph> parameter set to <ph id="ph4">`true`</ph>.</source>
          <target state="translated"><ph id="ph1">`Dispose()`</ph> se invoca el protegido <ph id="ph2">`Dispose(Boolean)`</ph> método con el <ph id="ph3">`disposing`</ph> parámetro establecido en <ph id="ph4">`true`</ph>.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.Cryptography.RandomNumberGenerator.Dispose(System.Boolean)">
          <source><ph id="ph1">`Finalize`</ph> invokes <ph id="ph2">`Dispose`</ph> with <ph id="ph3">`disposing`</ph> set to <ph id="ph4">`false`</ph>.</source>
          <target state="translated"><ph id="ph1">`Finalize`</ph> invoca <ph id="ph2">`Dispose`</ph> con <ph id="ph3">`disposing`</ph> establecido en <ph id="ph4">`false`</ph>.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.Cryptography.RandomNumberGenerator.Dispose(System.Boolean)">
          <source>When the <ph id="ph1">`disposing`</ph> parameter is <ph id="ph2">`true`</ph>, this method releases all resources held by any managed objects that this <ph id="ph3">&lt;xref:System.Security.Cryptography.RandomNumberGenerator&gt;</ph> references.</source>
          <target state="translated">Cuando el parámetro <ph id="ph1">`disposing`</ph> es <ph id="ph2">`true`</ph>, este método libera todos los recursos retenidos por los objetos administrados a los que el control <ph id="ph3">&lt;xref:System.Security.Cryptography.RandomNumberGenerator&gt;</ph> hace referencia.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.Cryptography.RandomNumberGenerator.Dispose(System.Boolean)">
          <source>This method invokes the <ph id="ph1">`Dispose()`</ph> method of each referenced object.</source>
          <target state="translated">Este método invoca al método <ph id="ph1">`Dispose()`</ph> de cada uno de los objetos a los que se hace referencia.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.Cryptography.RandomNumberGenerator.Dispose(System.Boolean)">
          <source><ph id="ph1">&lt;see langword="Dispose" /&gt;</ph> can be called multiple times by other objects.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="Dispose" /&gt;</ph> puede recibir varias llamadas de otros objetos.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.Cryptography.RandomNumberGenerator.Dispose(System.Boolean)">
          <source>When overriding <ph id="ph1">&lt;see langword="Dispose(Boolean)" /&gt;</ph>, be careful not to reference objects that have been previously disposed in an earlier call to <ph id="ph2">&lt;see langword="Dispose" /&gt;</ph>.</source>
          <target state="translated">Al reemplazar <ph id="ph1">&lt;see langword="Dispose(Boolean)" /&gt;</ph>, tenga cuidado de no hacer referencia a objetos que se hayan eliminado en una llamada anterior a <ph id="ph2">&lt;see langword="Dispose" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.Cryptography.RandomNumberGenerator.Dispose(System.Boolean)">
          <source>For more information about how to implement <ph id="ph1">&lt;see langword="Dispose(Boolean)" /&gt;</ph>, see <bpt id="p1">[</bpt>Implementing a Dispose Method<ept id="p1">](~/docs/standard/garbage-collection/implementing-dispose.md)</ept>.</source>
          <target state="translated">Para obtener más información sobre cómo implementar <ph id="ph1">&lt;see langword="Dispose(Boolean)" /&gt;</ph>, consulte <bpt id="p1">[</bpt>implementa un método Dispose<ept id="p1">](~/docs/standard/garbage-collection/implementing-dispose.md)</ept>.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.Cryptography.RandomNumberGenerator.Dispose(System.Boolean)">
          <source>For more information about <ph id="ph1">&lt;see langword="Dispose" /&gt;</ph> and <ph id="ph2">&lt;see langword="Finalize" /&gt;</ph>, see <bpt id="p1">[</bpt>Cleaning Up Unmanaged Resources<ept id="p1">](~/docs/standard/garbage-collection/unmanaged.md)</ept>.</source>
          <target state="translated">Para obtener más información acerca de <ph id="ph1">&lt;see langword="Dispose" /&gt;</ph> y <ph id="ph2">&lt;see langword="Finalize" /&gt;</ph>, consulte <bpt id="p1">[</bpt>limpiar recursos no administrados<ept id="p1">](~/docs/standard/garbage-collection/unmanaged.md)</ept>.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" uid="T:System.Security.Cryptography.RandomNumberGenerator">
          <source>Fills an array of bytes with a cryptographically strong random sequence of values.</source>
          <target state="translated">Rellena una matriz de bytes con una secuencia aleatoria de valores sólidamente cifrada.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" uid="M:System.Security.Cryptography.RandomNumberGenerator.GetBytes(System.Byte[])">
          <source>The array to fill with cryptographically strong random bytes.</source>
          <target state="translated">Matriz que se va a rellenar con los bytes aleatorios sólidamente cifrados.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" uid="M:System.Security.Cryptography.RandomNumberGenerator.GetBytes(System.Byte[])">
          <source>When overridden in a derived class, fills an array of bytes with a cryptographically strong random sequence of values.</source>
          <target state="translated">Cuando se reemplaza en una clase derivada, rellena una matriz de bytes con una secuencia aleatoria de valores sólidamente cifrada.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.Cryptography.RandomNumberGenerator.GetBytes(System.Byte[])">
          <source>The length of the byte array determines how many random bytes are produced.</source>
          <target state="translated">La longitud de la matriz de bytes determina cuántos bytes aleatorios que se generan.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.Cryptography.RandomNumberGenerator.GetBytes(System.Byte[])">
          <source>The following example creates a random sequence 100 bytes long and stores it in <ph id="ph1">`random`</ph>.</source>
          <target state="translated">En el ejemplo siguiente se crea una secuencia aleatoria de 100 bytes de longitud y lo almacena en <ph id="ph1">`random`</ph>.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" uid="M:System.Security.Cryptography.RandomNumberGenerator.GetBytes(System.Byte[],System.Int32,System.Int32)">
          <source>The array to fill with cryptographically strong random bytes.</source>
          <target state="translated">Matriz que se va a rellenar con los bytes aleatorios sólidamente cifrados.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" uid="M:System.Security.Cryptography.RandomNumberGenerator.GetBytes(System.Byte[],System.Int32,System.Int32)">
          <source>The index of the array to start the fill operation.</source>
          <target state="translated">Índice de la matriz donde empezará la operación de relleno.</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" uid="M:System.Security.Cryptography.RandomNumberGenerator.GetBytes(System.Byte[],System.Int32,System.Int32)">
          <source>The number of bytes to fill.</source>
          <target state="translated">Número de bytes para rellenar.</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" uid="M:System.Security.Cryptography.RandomNumberGenerator.GetBytes(System.Byte[],System.Int32,System.Int32)">
          <source>Fills the specified byte array with a cryptographically strong random sequence of values.</source>
          <target state="translated">Rellena la matriz de bytes especificada con una secuencia aleatoria de valores sólidamente cifrada.</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" uid="M:System.Security.Cryptography.RandomNumberGenerator.GetBytes(System.Byte[],System.Int32,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="data" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="data" /&gt;</ph> es <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" uid="M:System.Security.Cryptography.RandomNumberGenerator.GetBytes(System.Byte[],System.Int32,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="offset" /&gt;</ph> or <ph id="ph2">&lt;paramref name="count" /&gt;</ph> is less than 0</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="offset" /&gt;</ph> o <ph id="ph2">&lt;paramref name="count" /&gt;</ph> es menor que 0.</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" uid="M:System.Security.Cryptography.RandomNumberGenerator.GetBytes(System.Byte[],System.Int32,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="offset" /&gt;</ph> plus <ph id="ph2">&lt;paramref name="count" /&gt;</ph> exceeds the length of <ph id="ph3">&lt;paramref name="data" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="offset" /&gt;</ph> más <ph id="ph2">&lt;paramref name="count" /&gt;</ph> supera la longitud de <ph id="ph3">&lt;paramref name="data" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" uid="M:System.Security.Cryptography.RandomNumberGenerator.GetNonZeroBytes(System.Byte[])">
          <source>The array to fill with cryptographically strong random nonzero bytes.</source>
          <target state="translated">Matriz que se va a rellenar con los bytes aleatorios sólidamente cifrados distintos de cero.</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" uid="M:System.Security.Cryptography.RandomNumberGenerator.GetNonZeroBytes(System.Byte[])">
          <source>When overridden in a derived class, fills an array of bytes with a cryptographically strong random sequence of nonzero values.</source>
          <target state="translated">Cuando se reemplaza en una clase derivada, rellena una matriz de bytes con una secuencia aleatoria de valores distintos de cero sólidamente cifrada.</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.Cryptography.RandomNumberGenerator.GetNonZeroBytes(System.Byte[])">
          <source>The length of the byte array determines how many random bytes are produced.</source>
          <target state="translated">La longitud de la matriz de bytes determina cuántos bytes aleatorios que se generan.</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.Cryptography.RandomNumberGenerator.GetNonZeroBytes(System.Byte[])">
          <source>The following example creates a random sequence of 100 nonzero bytes and stores it in <ph id="ph1">`random`</ph>.</source>
          <target state="translated">En el ejemplo siguiente se crea una secuencia aleatoria de 100 bytes distintos de cero y se almacena en <ph id="ph1">`random`</ph>.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>