<Type Name="DesignerActionMethodItem" FullName="System.ComponentModel.Design.DesignerActionMethodItem">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="45b05f3e5aa7097b1504f87e8b21aa341ea73dd5" />
    <Meta Name="ms.sourcegitcommit" Value="4b4804968da1dfdf71c501075a5b66957b54f2e8" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="es-ES" />
    <Meta Name="ms.lasthandoff" Value="04/27/2018" />
    <Meta Name="ms.locfileid" Value="32040439" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class DesignerActionMethodItem : System.ComponentModel.Design.DesignerActionItem" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit DesignerActionMethodItem extends System.ComponentModel.Design.DesignerActionItem" />
  <TypeSignature Language="DocId" Value="T:System.ComponentModel.Design.DesignerActionMethodItem" />
  <TypeSignature Language="VB.NET" Value="Public Class DesignerActionMethodItem&#xA;Inherits DesignerActionItem" />
  <TypeSignature Language="C++ CLI" Value="public ref class DesignerActionMethodItem : System::ComponentModel::Design::DesignerActionItem" />
  <AssemblyInfo>
    <AssemblyName>System.Design</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.ComponentModel.Design.DesignerActionItem</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Representa un elemento de panel de etiquetas inteligentes que está asociado a un método en una clase derivada de <see cref="T:System.ComponentModel.Design.DesignerActionList" />.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La <xref:System.ComponentModel.Design.DesignerActionMethodItem> clase representa los elementos individuales de un panel de etiquetas inteligentes. Un elemento de este tipo se muestra como un elemento de la interfaz de usuario activo, como un hipervínculo, que invoca un método proporcionado por programador en una clase derivada de <xref:System.ComponentModel.Design.DesignerActionList>. La asociación entre el elemento y el método se mantiene a través del valor de la <xref:System.ComponentModel.Design.DesignerActionMethodItem.MemberName%2A> propiedad. El método que invoca este elemento debe tomar parámetros ni devolver un valor.  
  
 Elementos de panel individuales están asociados entre sí para formar un panel mediante una llamada a la <xref:System.ComponentModel.Design.DesignerActionList.GetSortedActionItems%2A> método de la <xref:System.ComponentModel.Design.DesignerActionList> clase.  
  
   
  
## Examples  
 En el ejemplo de código siguiente se muestra cómo crear una colección de <xref:System.ComponentModel.Design.DesignerActionItem> objetos.  
  
 Para obtener un ejemplo completo de la implementación de etiquetas inteligentes, consulte [Cómo: adjuntar etiquetas inteligentes para un componente de Windows Forms](http://msdn.microsoft.com/library/42cc4a0c-9ab3-47e1-93b8-03b6a6ccf233).  
  
 [!code-csharp[System.ComponentModel.Design.DesignerAction.AddSmartTagsToWFComponent#7](~/samples/snippets/csharp/VS_Snippets_Winforms/System.ComponentModel.Design.DesignerAction.AddSmartTagsToWFComponent/CS/smarttags.cs#7)]
 [!code-vb[System.ComponentModel.Design.DesignerAction.AddSmartTagsToWFComponent#7](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.ComponentModel.Design.DesignerAction.AddSmartTagsToWFComponent/VB/smarttags.vb#7)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.ComponentModel.Design.DesignerActionList" />
    <altmember cref="M:System.ComponentModel.Design.DesignerActionList.GetSortedActionItems" />
    <altmember cref="P:System.ComponentModel.Design.DesignerActionMethodItem.MemberName" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Inicializa una nueva instancia de la clase <see cref="T:System.ComponentModel.Design.DesignerActionMethodItem" />.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DesignerActionMethodItem (System.ComponentModel.Design.DesignerActionList actionList, string memberName, string displayName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.ComponentModel.Design.DesignerActionList actionList, string memberName, string displayName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.DesignerActionMethodItem.#ctor(System.ComponentModel.Design.DesignerActionList,System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (actionList As DesignerActionList, memberName As String, displayName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DesignerActionMethodItem(System::ComponentModel::Design::DesignerActionList ^ actionList, System::String ^ memberName, System::String ^ displayName);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="actionList" Type="System.ComponentModel.Design.DesignerActionList" />
        <Parameter Name="memberName" Type="System.String" />
        <Parameter Name="displayName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="actionList">Objeto <see cref="T:System.ComponentModel.Design.DesignerActionList" /> que contiene el método al que se asocia este elemento.</param>
        <param name="memberName">Nombre con distinción entre mayúsculas y minúsculas del método en la clase derivada de <see cref="T:System.ComponentModel.Design.DesignerActionList" /> al que se va a invocar a través del elemento de panel.</param>
        <param name="displayName">Texto de panel para este elemento.</param>
        <summary>Inicializa una nueva instancia de la clase <see cref="T:System.ComponentModel.Design.DesignerActionMethodItem" /> con los nombres para mostrar y de método especificados.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.ComponentModel.Design.DesignerActionMethodItem.%23ctor%2A> constructor establece la <xref:System.ComponentModel.Design.DesignerActionItem.Category%2A> y <xref:System.ComponentModel.Design.DesignerActionItem.Description%2A> propiedades a `null`y el <xref:System.ComponentModel.Design.DesignerActionMethodItem.IncludeAsDesignerVerb%2A> propiedad `false`.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.ComponentModel.Design.DesignerVerb" />
        <altmember cref="P:System.ComponentModel.Design.ComponentDesigner.Verbs" />
        <altmember cref="T:System.ComponentModel.Design.DesignerActionList" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DesignerActionMethodItem (System.ComponentModel.Design.DesignerActionList actionList, string memberName, string displayName, bool includeAsDesignerVerb);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.ComponentModel.Design.DesignerActionList actionList, string memberName, string displayName, bool includeAsDesignerVerb) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.DesignerActionMethodItem.#ctor(System.ComponentModel.Design.DesignerActionList,System.String,System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (actionList As DesignerActionList, memberName As String, displayName As String, includeAsDesignerVerb As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DesignerActionMethodItem(System::ComponentModel::Design::DesignerActionList ^ actionList, System::String ^ memberName, System::String ^ displayName, bool includeAsDesignerVerb);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="actionList" Type="System.ComponentModel.Design.DesignerActionList" />
        <Parameter Name="memberName" Type="System.String" />
        <Parameter Name="displayName" Type="System.String" />
        <Parameter Name="includeAsDesignerVerb" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="actionList">Objeto <see cref="T:System.ComponentModel.Design.DesignerActionList" /> que contiene el método al que se asocia este elemento.</param>
        <param name="memberName">Nombre con distinción entre mayúsculas y minúsculas del método en la clase derivada de <see cref="T:System.ComponentModel.Design.DesignerActionList" /> al que se va a invocar a través del elemento de panel.</param>
        <param name="displayName">Texto de panel para este elemento.</param>
        <param name="includeAsDesignerVerb">Marcador que especifica si el método asociado también debe tratarse como un verbo de diseñador.</param>
        <summary>Inicializa una nueva instancia de la clase <see cref="T:System.ComponentModel.Design.DesignerActionMethodItem" />, con los nombres para mostrar y de método especificados, y con un marcador que especifica si el elemento debe aparecer en otros contextos de la interfaz de usuario.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si el `includeAsDesignerVerb` parámetro está establecido en `true`, este elemento también se considera un <xref:System.ComponentModel.Design.DesignerVerb>; por lo tanto, se agregará al menú contextual de tiempo de diseño del componente. En Visual Studio, también se agregará un comando a la **atributos** panel de la ventana Propiedades. Una lista de verbos de diseñador son accesibles a través del diseñador <xref:System.ComponentModel.Design.ComponentDesigner.Verbs%2A> propiedad de colección.  
  
 El <xref:System.ComponentModel.Design.DesignerActionMethodItem.%23ctor%2A> constructor establece la <xref:System.ComponentModel.Design.DesignerActionItem.Category%2A> y <xref:System.ComponentModel.Design.DesignerActionItem.Description%2A> propiedades para `null`.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.ComponentModel.Design.DesignerVerb" />
        <altmember cref="P:System.ComponentModel.Design.ComponentDesigner.Verbs" />
        <altmember cref="T:System.ComponentModel.Design.DesignerActionList" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DesignerActionMethodItem (System.ComponentModel.Design.DesignerActionList actionList, string memberName, string displayName, string category);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.ComponentModel.Design.DesignerActionList actionList, string memberName, string displayName, string category) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.DesignerActionMethodItem.#ctor(System.ComponentModel.Design.DesignerActionList,System.String,System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (actionList As DesignerActionList, memberName As String, displayName As String, category As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DesignerActionMethodItem(System::ComponentModel::Design::DesignerActionList ^ actionList, System::String ^ memberName, System::String ^ displayName, System::String ^ category);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="actionList" Type="System.ComponentModel.Design.DesignerActionList" />
        <Parameter Name="memberName" Type="System.String" />
        <Parameter Name="displayName" Type="System.String" />
        <Parameter Name="category" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="actionList">Objeto <see cref="T:System.ComponentModel.Design.DesignerActionList" /> que contiene el método al que se asocia este elemento.</param>
        <param name="memberName">Nombre con distinción entre mayúsculas y minúsculas del método en la clase derivada de <see cref="T:System.ComponentModel.Design.DesignerActionList" /> al que se va a invocar a través del elemento de panel.</param>
        <param name="displayName">Texto de panel para este elemento.</param>
        <param name="category">
          <see cref="T:System.String" /> con distinción entre mayúsculas y minúsculas que se utiliza para agrupar elementos similares en el panel.</param>
        <summary>Inicializa una nueva instancia de la clase <see cref="T:System.ComponentModel.Design.DesignerActionMethodItem" /> con los nombres de categoría, para mostrar y de método especificados.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.ComponentModel.Design.DesignerActionMethodItem.%23ctor%2A> constructor establece la <xref:System.ComponentModel.Design.DesignerActionItem.Description%2A> propiedad `null` y <xref:System.ComponentModel.Design.DesignerActionMethodItem.IncludeAsDesignerVerb%2A> propiedad a `false`.  
  
 Para obtener más información acerca de cómo los `category` parámetro se usa para agrupar elementos en un panel, vea el <xref:System.ComponentModel.Design.DesignerActionList.GetSortedActionItems%2A> método.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.ComponentModel.Design.DesignerVerb" />
        <altmember cref="P:System.ComponentModel.Design.ComponentDesigner.Verbs" />
        <altmember cref="T:System.ComponentModel.Design.DesignerActionList" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DesignerActionMethodItem (System.ComponentModel.Design.DesignerActionList actionList, string memberName, string displayName, string category, bool includeAsDesignerVerb);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.ComponentModel.Design.DesignerActionList actionList, string memberName, string displayName, string category, bool includeAsDesignerVerb) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.DesignerActionMethodItem.#ctor(System.ComponentModel.Design.DesignerActionList,System.String,System.String,System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (actionList As DesignerActionList, memberName As String, displayName As String, category As String, includeAsDesignerVerb As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DesignerActionMethodItem(System::ComponentModel::Design::DesignerActionList ^ actionList, System::String ^ memberName, System::String ^ displayName, System::String ^ category, bool includeAsDesignerVerb);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="actionList" Type="System.ComponentModel.Design.DesignerActionList" />
        <Parameter Name="memberName" Type="System.String" />
        <Parameter Name="displayName" Type="System.String" />
        <Parameter Name="category" Type="System.String" />
        <Parameter Name="includeAsDesignerVerb" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="actionList">Objeto <see cref="T:System.ComponentModel.Design.DesignerActionList" /> que contiene el método al que se asocia este elemento.</param>
        <param name="memberName">Nombre con distinción entre mayúsculas y minúsculas del método en la clase derivada de <see cref="T:System.ComponentModel.Design.DesignerActionList" /> al que se va a invocar a través del elemento de panel.</param>
        <param name="displayName">Texto de panel para este elemento.</param>
        <param name="category">
          <see cref="T:System.String" /> con distinción entre mayúsculas y minúsculas que se utiliza para agrupar elementos similares en el panel.</param>
        <param name="includeAsDesignerVerb">Marcador que especifica si el método asociado también debe tratarse como un verbo del diseñador para el componente asociado.</param>
        <summary>Inicializa una nueva instancia de la clase <see cref="T:System.ComponentModel.Design.DesignerActionMethodItem" /> con los nombres de categoría, para mostrar y de método especificados, y con un marcador que especifica si el elemento debe aparecer en otros contextos de la interfaz de usuario.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si el `includeAsDesignerVerb` parámetro está establecido en `true`, el elemento también se considera un <xref:System.ComponentModel.Design.DesignerVerb>; por lo tanto, se agregará al menú contextual de tiempo de diseño del componente. Una lista de verbos de diseñador son accesibles a través del diseñador <xref:System.ComponentModel.Design.ComponentDesigner.Verbs%2A> propiedad de colección.  
  
 El <xref:System.ComponentModel.Design.DesignerActionMethodItem.%23ctor%2A> constructor establece la <xref:System.ComponentModel.Design.DesignerActionItem.Description%2A> propiedad `null`.  
  
 Para obtener más información sobre cómo las `category` parámetro se usa para agrupar elementos en un panel, vea el <xref:System.ComponentModel.Design.DesignerActionList.GetSortedActionItems%2A> método.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.ComponentModel.Design.DesignerVerb" />
        <altmember cref="P:System.ComponentModel.Design.ComponentDesigner.Verbs" />
        <altmember cref="T:System.ComponentModel.Design.DesignerActionList" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DesignerActionMethodItem (System.ComponentModel.Design.DesignerActionList actionList, string memberName, string displayName, string category, string description);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.ComponentModel.Design.DesignerActionList actionList, string memberName, string displayName, string category, string description) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.DesignerActionMethodItem.#ctor(System.ComponentModel.Design.DesignerActionList,System.String,System.String,System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (actionList As DesignerActionList, memberName As String, displayName As String, category As String, description As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DesignerActionMethodItem(System::ComponentModel::Design::DesignerActionList ^ actionList, System::String ^ memberName, System::String ^ displayName, System::String ^ category, System::String ^ description);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="actionList" Type="System.ComponentModel.Design.DesignerActionList" />
        <Parameter Name="memberName" Type="System.String" />
        <Parameter Name="displayName" Type="System.String" />
        <Parameter Name="category" Type="System.String" />
        <Parameter Name="description" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="actionList">Objeto <see cref="T:System.ComponentModel.Design.DesignerActionList" /> que contiene el método al que se asocia este elemento.</param>
        <param name="memberName">Nombre con distinción entre mayúsculas y minúsculas del método en la clase derivada de <see cref="T:System.ComponentModel.Design.DesignerActionList" /> al que se va a invocar a través del elemento de panel.</param>
        <param name="displayName">Texto de panel para este elemento.</param>
        <param name="category">
          <see cref="T:System.String" /> con distinción entre mayúsculas y minúsculas que se utiliza para agrupar elementos similares en el panel.</param>
        <param name="description">Texto complementario para este elemento, que se utiliza en la información sobre herramientas o en la barra de estado.</param>
        <summary>Inicializa una nueva instancia de la clase <see cref="T:System.ComponentModel.Design.DesignerActionMethodItem" /> con los nombres de categoría y método especificados, así como texto para mostrar y de descripción.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.ComponentModel.Design.DesignerActionMethodItem.%23ctor%2A> constructor establece la <xref:System.ComponentModel.Design.DesignerActionMethodItem.IncludeAsDesignerVerb%2A> propiedad `false`.  
  
 Para obtener más información sobre cómo las `category` parámetro se usa para agrupar elementos en un panel, vea el <xref:System.ComponentModel.Design.DesignerActionList.GetSortedActionItems%2A> método.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.ComponentModel.Design.DesignerVerb" />
        <altmember cref="P:System.ComponentModel.Design.ComponentDesigner.Verbs" />
        <altmember cref="T:System.ComponentModel.Design.DesignerActionList" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DesignerActionMethodItem (System.ComponentModel.Design.DesignerActionList actionList, string memberName, string displayName, string category, string description, bool includeAsDesignerVerb);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.ComponentModel.Design.DesignerActionList actionList, string memberName, string displayName, string category, string description, bool includeAsDesignerVerb) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.DesignerActionMethodItem.#ctor(System.ComponentModel.Design.DesignerActionList,System.String,System.String,System.String,System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (actionList As DesignerActionList, memberName As String, displayName As String, category As String, description As String, includeAsDesignerVerb As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DesignerActionMethodItem(System::ComponentModel::Design::DesignerActionList ^ actionList, System::String ^ memberName, System::String ^ displayName, System::String ^ category, System::String ^ description, bool includeAsDesignerVerb);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="actionList" Type="System.ComponentModel.Design.DesignerActionList" />
        <Parameter Name="memberName" Type="System.String" />
        <Parameter Name="displayName" Type="System.String" />
        <Parameter Name="category" Type="System.String" />
        <Parameter Name="description" Type="System.String" />
        <Parameter Name="includeAsDesignerVerb" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="actionList">Objeto <see cref="T:System.ComponentModel.Design.DesignerActionList" /> que contiene el método al que se asocia este elemento.</param>
        <param name="memberName">Nombre con distinción entre mayúsculas y minúsculas del método en la clase derivada de <see cref="T:System.ComponentModel.Design.DesignerActionList" /> al que se va a invocar a través del elemento de panel.</param>
        <param name="displayName">Texto de panel para este elemento.</param>
        <param name="category">
          <see cref="T:System.String" /> con distinción entre mayúsculas y minúsculas que se utiliza para agrupar elementos similares en el panel.</param>
        <param name="description">Texto complementario para este elemento, que se utiliza en la información sobre herramientas o en la barra de estado.</param>
        <param name="includeAsDesignerVerb">Marcador que especifica si el método asociado también debe tratarse como un verbo del diseñador para el componente asociado.</param>
        <summary>Inicializa una nueva instancia de la clase <see cref="T:System.ComponentModel.Design.DesignerActionMethodItem" />, con los nombres de categoría y de método establecidos, el texto de descripción y para mostrar y un marcador que especifica si el elemento debe aparecer en otros contextos de la interfaz de usuario.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si el `includeAsDesignerVerb` parámetro está establecido en `true`, este elemento también se considera un <xref:System.ComponentModel.Design.DesignerVerb>; por lo tanto, se agregará al menú contextual de tiempo de diseño del componente. Una lista de verbos de diseñador son accesibles a través del diseñador <xref:System.ComponentModel.Design.ComponentDesigner.Verbs%2A> propiedad de colección.  
  
 Para obtener más información acerca de cómo los `category` parámetro se usa para agrupar elementos en un panel, vea el <xref:System.ComponentModel.Design.DesignerActionList.GetSortedActionItems%2A> método.  
  
   
  
## Examples  
 En el ejemplo de código siguiente se muestra cómo crear una colección de <xref:System.ComponentModel.Design.DesignerActionItem> objetos.  
  
 Para obtener un ejemplo completo de la implementación de etiquetas inteligentes, consulte [Cómo: adjuntar etiquetas inteligentes para un componente de Windows Forms](http://msdn.microsoft.com/library/42cc4a0c-9ab3-47e1-93b8-03b6a6ccf233).  
  
 [!code-csharp[System.ComponentModel.Design.DesignerAction.AddSmartTagsToWFComponent#7](~/samples/snippets/csharp/VS_Snippets_Winforms/System.ComponentModel.Design.DesignerAction.AddSmartTagsToWFComponent/CS/smarttags.cs#7)]
 [!code-vb[System.ComponentModel.Design.DesignerAction.AddSmartTagsToWFComponent#7](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.ComponentModel.Design.DesignerAction.AddSmartTagsToWFComponent/VB/smarttags.vb#7)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.ComponentModel.Design.DesignerVerb" />
        <altmember cref="P:System.ComponentModel.Design.ComponentDesigner.Verbs" />
        <altmember cref="T:System.ComponentModel.Design.DesignerActionList" />
      </Docs>
    </Member>
    <Member MemberName="IncludeAsDesignerVerb">
      <MemberSignature Language="C#" Value="public virtual bool IncludeAsDesignerVerb { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IncludeAsDesignerVerb" />
      <MemberSignature Language="DocId" Value="P:System.ComponentModel.Design.DesignerActionMethodItem.IncludeAsDesignerVerb" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property IncludeAsDesignerVerb As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IncludeAsDesignerVerb { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene un valor que indica que el objeto <see cref="T:System.ComponentModel.Design.DesignerActionMethodItem" /> debe aparecer en otros contextos de la interfaz de usuario.</summary>
        <value>
          <see langword="true" /> si el elemento se va a utilizar en menús contextuales; de lo contrario, <see langword="false" />. El valor predeterminado es <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si el <xref:System.ComponentModel.Design.DesignerActionMethodItem.IncludeAsDesignerVerb%2A> propiedad está establecida en `true`, el elemento también se considera un <xref:System.ComponentModel.Design.DesignerVerb>; por lo tanto, se agregará al menú contextual de tiempo de diseño del componente. Una lista de verbos de diseñador son accesibles a través del diseñador <xref:System.ComponentModel.Design.ComponentDesigner.Verbs%2A> propiedad de colección.  
  
 El valor de la <xref:System.ComponentModel.Design.DesignerActionMethodItem.IncludeAsDesignerVerb%2A> propiedad se establece en el constructor para esta clase.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.ComponentModel.Design.DesignerActionListCollection.#ctor(System.ComponentModel.Design.DesignerActionList[])" />
        <altmember cref="T:System.ComponentModel.Design.DesignerVerb" />
        <altmember cref="P:System.ComponentModel.Design.ComponentDesigner.Verbs" />
      </Docs>
    </Member>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public virtual void Invoke ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Invoke() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.DesignerActionMethodItem.Invoke" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub Invoke ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Invoke();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Ejecuta mediante programación el método asociado al objeto <see cref="T:System.ComponentModel.Design.DesignerActionMethodItem" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si el <xref:System.ComponentModel.Design.DesignerActionMethodItem.IncludeAsDesignerVerb%2A> propiedad se inicializa en `true`, también puede invocarse el método asociado a través del evento de verbo del diseñador correspondiente.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">No se encuentra el método cuyo nombre aparece en <see cref="P:System.ComponentModel.Design.DesignerActionMethodItem.MemberName" />.</exception>
        <altmember cref="T:System.ComponentModel.Design.DesignerVerb" />
      </Docs>
    </Member>
    <Member MemberName="MemberName">
      <MemberSignature Language="C#" Value="public virtual string MemberName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string MemberName" />
      <MemberSignature Language="DocId" Value="P:System.ComponentModel.Design.DesignerActionMethodItem.MemberName" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property MemberName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ MemberName { System::String ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene el nombre del método al que está asociado este objeto <see cref="T:System.ComponentModel.Design.DesignerActionMethodItem" />.</summary>
        <value>
          <see cref="T:System.String" /> que contiene el nombre del método asociado.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.ComponentModel.Design.DesignerActionMethodItem.MemberName%2A> propiedad especifica qué propiedad de la clase derivada de la <xref:System.ComponentModel.Design.DesignerActionList> (clase), que se debe enlazar el elemento. Cuando el programador interactúe con el elemento del panel a través de la interfaz de usuario (UI), se establecerá esta propiedad asociada.  
  
 El método de enlace no debe tomar parámetros ni devuelve ningún valor.  
  
 Esta propiedad se establece en el constructor. Distingue mayúsculas de minúsculas.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.ComponentModel.Design.DesignerActionMethodItem.#ctor(System.ComponentModel.Design.DesignerActionList,System.String,System.String)" />
        <altmember cref="T:System.ComponentModel.Design.DesignerActionList" />
      </Docs>
    </Member>
    <Member MemberName="RelatedComponent">
      <MemberSignature Language="C#" Value="public System.ComponentModel.IComponent RelatedComponent { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.ComponentModel.IComponent RelatedComponent" />
      <MemberSignature Language="DocId" Value="P:System.ComponentModel.Design.DesignerActionMethodItem.RelatedComponent" />
      <MemberSignature Language="VB.NET" Value="Public Property RelatedComponent As IComponent" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::ComponentModel::IComponent ^ RelatedComponent { System::ComponentModel::IComponent ^ get(); void set(System::ComponentModel::IComponent ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ComponentModel.IComponent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene o establece un componente que contribuye con sus objetos <see cref="T:System.ComponentModel.Design.DesignerActionMethodItem" /> al panel actual.</summary>
        <value>Componente suministrado, que debería tener un diseñador asociado que proporcionase elementos.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.ComponentModel.Design.DesignerActionPropertyItem.RelatedComponent%2A> propiedad permite que otro componente puede prestar una etiqueta inteligente de elementos del panel a la lista actual. Por ejemplo, un control de usuario podría agregar los elementos de uno de sus controles constituyentes estándares.  
  
 Esta propiedad funciona junto con el <xref:System.ComponentModel.Design.DesignerActionItem.AllowAssociate%2A?displayProperty=nameWithType> propiedad.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.ComponentModel.Design.DesignerActionList" />
        <altmember cref="P:System.ComponentModel.Design.DesignerActionItem.AllowAssociate" />
      </Docs>
    </Member>
  </Members>
</Type>