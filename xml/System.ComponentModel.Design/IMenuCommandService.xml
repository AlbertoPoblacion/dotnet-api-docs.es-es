<Type Name="IMenuCommandService" FullName="System.ComponentModel.Design.IMenuCommandService">
  <Metadata><Meta Name="ms.openlocfilehash" Value="976c49c5d36348692e3a77461d5fbbd4d7aa2874" /><Meta Name="ms.sourcegitcommit" Value="0ec122ee5f3681159b8460ab15b409fd6e3d3ae0" /><Meta Name="ms.translationtype" Value="HT" /><Meta Name="ms.contentlocale" Value="es-ES" /><Meta Name="ms.lasthandoff" Value="10/04/2018" /><Meta Name="ms.locfileid" Value="48630537" /></Metadata><TypeSignature Language="C#" Value="public interface IMenuCommandService" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IMenuCommandService" />
  <TypeSignature Language="DocId" Value="T:System.ComponentModel.Design.IMenuCommandService" />
  <TypeSignature Language="VB.NET" Value="Public Interface IMenuCommandService" />
  <TypeSignature Language="C++ CLI" Value="public interface class IMenuCommandService" />
  <TypeSignature Language="F#" Value="type IMenuCommandService = interface" />
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Proporciona métodos para administrar los verbos globales del diseñador y los comandos de menú disponibles en modo de diseño, así como para mostrar algunos tipos de menús contextuales.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Esta interfaz proporciona métodos para:  
  
-   Buscar, invocar, agregar y quitar comandos globales verbo del diseñador.  
  
-   Buscar, invocar, agregar y quitar comandos de menú estándar.  
  
-   Modificar los controladores de eventos asociados a comandos de menú estándar.  
  
-   Mostrar un menú contextual de comandos estándar que está asociado a un menú <xref:System.ComponentModel.Design.CommandID>.  
  
 Verbos de diseñador representan comandos personalizado que se muestran en el menú contextual en modo de diseño. Un verbo de diseñador puede proporcionar una etiqueta de texto especificado. Cada verbo de diseñador se asigna automáticamente un único <xref:System.ComponentModel.Design.CommandID>. Un diseñador puede proporcionar los verbos de diseñador a través de su <xref:System.ComponentModel.Design.IDesigner.Verbs%2A> propiedad, pero estos solo están disponibles cuando el componente del diseñador está seleccionado actualmente. Verbos globales del diseñador son comandos de verbo de diseñador que se pueden acceder desde un menú contextual de modo de diseño independientemente del componente seleccionado. Esta interfaz permite administrar el conjunto de verbos globales del diseñador que están disponibles en modo de diseño.  
  
 Puede agregar un verbo de diseñador global mediante el <xref:System.ComponentModel.Design.IMenuCommandService.AddVerb%2A> método y se puede quitar un verbo de diseñador global utilizando el <xref:System.ComponentModel.Design.IMenuCommandService.RemoveVerb%2A> método. Puede invocar un verbo de diseñador utilizando el <xref:System.ComponentModel.Design.IMenuCommandService.GlobalInvoke%2A> método si sabe el <xref:System.ComponentModel.Design.CommandID> del verbo. El <xref:System.ComponentModel.Design.IMenuCommandService.Verbs%2A> propiedad de esta interfaz contiene el conjunto actual de comandos de verbo del diseñador para mostrar en un menú contextual. Este conjunto de comandos de verbo de diseñador consta de todos los verbos globales del diseñador y los verbos de diseñador proporcionados por el Diseñador de cualquier componente seleccionado actualmente. Este conjunto de verbos se actualiza cada vez que se selecciona o anula la selección de un componente con un diseñador que ofrece comandos de verbo del diseñador.  
  
 Comandos de menú se limitan al conjunto de comandos estándar predefinidos. La mayoría de los comandos estándares predefinidos se define en el <xref:System.ComponentModel.Design.StandardCommands> y <xref:System.Windows.Forms.Design.MenuCommands> enumeraciones. Puede agregar, quitar, invocar comandos de menú y buscar los comandos de menú que se han agregado a un menú mediante los métodos de esta interfaz.  
  
 Puede agregar un comando de menú estándar mediante el <xref:System.ComponentModel.Design.IMenuCommandService.AddCommand%2A> método y quitar un comando de menú estándar mediante el <xref:System.ComponentModel.Design.IMenuCommandService.RemoveCommand%2A> método. Puede adjuntar un controlador de eventos a un comando de menú estándar predefinido siguiendo el procedimiento detallado en la documentación de la <xref:System.ComponentModel.Design.IMenuCommandService.AddCommand%2A> método. Puede recuperar un comando de menú por <xref:System.ComponentModel.Design.CommandID> si se ha agregado a un menú mediante el <xref:System.ComponentModel.Design.IMenuCommandService.FindCommand%2A> método. Puede invocar un comando de menú o un comando de verbo de diseñador por <xref:System.ComponentModel.Design.CommandID> utilizando el <xref:System.ComponentModel.Design.IMenuCommandService.GlobalInvoke%2A> método.  
  
> [!NOTE]
>  Intento de agregar un comando de menú con una ya existente <xref:System.ComponentModel.Design.CommandID> producirá una <xref:System.InvalidOperationException>. Al agregar un comando de menú, asegúrese de comprobar que aún no está en un menú con el <xref:System.ComponentModel.Design.IMenuCommandService.FindCommand%2A> método o con cuidado el control de excepciones de uso.  
  
> [!NOTE]
>  Un comando de menú se pueden agregar a un menú y tienen su <xref:System.ComponentModel.Design.MenuCommand.Visible%2A> o <xref:System.ComponentModel.Design.MenuCommand.Enabled%2A> propiedades establecidas en `false`. Si no encuentra un comando de menú que se ha agregado un menú visualmente, una de estas propiedades puede haberse establecida `false`.  
  
 Puede mostrar determinados menús contextuales que contiene los comandos de menú en una ubicación especificada utilizando el <xref:System.ComponentModel.Design.IMenuCommandService.ShowContextMenu%2A> método. La documentación de este método contiene una tabla que enumera los identificadores de comando que especifican los menús para mostrar válidos.  
  
   
  
## Examples  
 En este ejemplo se muestra cómo utilizar el <xref:System.ComponentModel.Design.IMenuCommandService> para agregar un <xref:System.ComponentModel.Design.MenuCommand>.  
  
 [!code-cpp[MenuCommand Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/MenuCommand Example/CPP/component1.cpp#1)]
 [!code-csharp[MenuCommand Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/MenuCommand Example/CS/component1.cs#1)]
 [!code-vb[MenuCommand Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/MenuCommand Example/VB/component1.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.ComponentModel.Design.MenuCommand" />
    <altmember cref="T:System.ComponentModel.Design.DesignerVerb" />
    <altmember cref="T:System.ComponentModel.Design.CommandID" />
    <altmember cref="T:System.Windows.Forms.Design.MenuCommands" />
    <altmember cref="T:System.ComponentModel.Design.StandardCommands" />
  </Docs>
  <Members>
    <Member MemberName="AddCommand">
      <MemberSignature Language="C#" Value="public void AddCommand (System.ComponentModel.Design.MenuCommand command);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AddCommand(class System.ComponentModel.Design.MenuCommand command) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.IMenuCommandService.AddCommand(System.ComponentModel.Design.MenuCommand)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AddCommand (command As MenuCommand)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AddCommand(System::ComponentModel::Design::MenuCommand ^ command);" />
      <MemberSignature Language="F#" Value="abstract member AddCommand : System.ComponentModel.Design.MenuCommand -&gt; unit" Usage="iMenuCommandService.AddCommand command" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="command" Type="System.ComponentModel.Design.MenuCommand" />
      </Parameters>
      <Docs>
        <param name="command"><see cref="T:System.ComponentModel.Design.MenuCommand" /> que se va a sumar.</param>
        <summary>Agrega el comando de menú estándar especificado al menú.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Windows.Forms.Design.MenuCommands> y <xref:System.ComponentModel.Design.StandardCommands> enumeraciones contienen <xref:System.ComponentModel.Design.CommandID> identificadores para predefinidos comandos estándar y los comandos de menú que ya están asociados con una ubicación en un menú determinado.  
  
> [!NOTE]
>  Intento de agregar un comando de menú con una ya existente <xref:System.ComponentModel.Design.CommandID> producirá una <xref:System.InvalidOperationException>. Al agregar un comando de menú, asegúrese de comprobar que aún no está en un menú con el <xref:System.ComponentModel.Design.IMenuCommandService.FindCommand%2A> método o con cuidado el control de excepciones de uso.  
  
 Puede adjuntar un controlador de eventos a un comando de menú predefinido con el siguiente procedimiento:  
  
1.  Si el comando de menú para vincular con un controlador de eventos se ha agregado a un menú o se encuentra con el <xref:System.ComponentModel.Design.IMenuCommandService.FindCommand%2A> método, considere la posibilidad de si desea restaurar más adelante en este comando de menú y, si desea utilizar invocar el controlador de eventos actual desde el nuevo controlador de eventos. Si el código restablece el comando de menú o la cadena de la invocación de controladores de eventos, asegúrese de almacenar una referencia al comando de menú en algún lugar.  
  
2.  Asegúrese de que cualquier comando de menú previamente existente con el mismo <xref:System.ComponentModel.Design.CommandID> ha quitado el menú mediante el <xref:System.ComponentModel.Design.IMenuCommandService.RemoveCommand%2A> método.  
  
3.  Cree un nuevo <xref:System.ComponentModel.Design.MenuCommand> y especifique el controlador de eventos en el constructor, junto con un <xref:System.ComponentModel.Design.CommandID> que representa el comando para agregar. Está asociado a una ubicación predefinida del menú donde se agrega a cada comando de menú estándar. Los identificadores de comando admitidos se definen en el <xref:System.ComponentModel.Design.StandardCommands> y <xref:System.Windows.Forms.Design.MenuCommands> enumeraciones.  
  
4.  Si desea invocar cualquier controlador de eventos preexistentes para el comando de menú, llame a la <xref:System.ComponentModel.Design.MenuCommand.Invoke%2A> método del comando de menú que ha reemplazado en el menú en el controlador de eventos que controla el evento invoke de que el comando de menú.  
  
5.  Si está interesado en el controlador de eventos de un comando de menú preexistente que se ha reemplazado de restauración, agregue almacenado, preexistente de comando de menú después de quitar el comando de menú de reemplazo que creó. Es posible que desea agregar este comportamiento para el `Dispose` método para su tipo.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">El objeto <see cref="T:System.ComponentModel.Design.CommandID" /> del objeto <see cref="T:System.ComponentModel.Design.MenuCommand" /> especificado ya existe en un menú.</exception>
        <altmember cref="T:System.ComponentModel.Design.MenuCommand" />
        <altmember cref="T:System.ComponentModel.Design.CommandID" />
      </Docs>
    </Member>
    <Member MemberName="AddVerb">
      <MemberSignature Language="C#" Value="public void AddVerb (System.ComponentModel.Design.DesignerVerb verb);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AddVerb(class System.ComponentModel.Design.DesignerVerb verb) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.IMenuCommandService.AddVerb(System.ComponentModel.Design.DesignerVerb)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AddVerb (verb As DesignerVerb)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AddVerb(System::ComponentModel::Design::DesignerVerb ^ verb);" />
      <MemberSignature Language="F#" Value="abstract member AddVerb : System.ComponentModel.Design.DesignerVerb -&gt; unit" Usage="iMenuCommandService.AddVerb verb" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="verb" Type="System.ComponentModel.Design.DesignerVerb" />
      </Parameters>
      <Docs>
        <param name="verb"><see cref="T:System.ComponentModel.Design.DesignerVerb" /> que se va a sumar.</param>
        <summary>Agrega el verbo del diseñador especificado al conjunto de verbos globales del diseñador.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Los diseñadores de componentes que proporcionan los verbos de diseñador deben utilizar el <xref:System.ComponentModel.Design.IDesigner.Verbs%2A> propiedad de su diseñador en lugar de llamar a este método. Este método agrega un verbo de diseñador global que se puede acceder desde el menú contextual en modo de diseño, independientemente del componente seleccionado actualmente.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.ComponentModel.Design.DesignerVerb" />
      </Docs>
    </Member>
    <Member MemberName="FindCommand">
      <MemberSignature Language="C#" Value="public System.ComponentModel.Design.MenuCommand FindCommand (System.ComponentModel.Design.CommandID commandID);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.ComponentModel.Design.MenuCommand FindCommand(class System.ComponentModel.Design.CommandID commandID) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.IMenuCommandService.FindCommand(System.ComponentModel.Design.CommandID)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::ComponentModel::Design::MenuCommand ^ FindCommand(System::ComponentModel::Design::CommandID ^ commandID);" />
      <MemberSignature Language="F#" Value="abstract member FindCommand : System.ComponentModel.Design.CommandID -&gt; System.ComponentModel.Design.MenuCommand" Usage="iMenuCommandService.FindCommand commandID" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ComponentModel.Design.MenuCommand</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="commandID" Type="System.ComponentModel.Design.CommandID" />
      </Parameters>
      <Docs>
        <param name="commandID">Objeto <see cref="T:System.ComponentModel.Design.CommandID" /> que se va a buscar.</param>
        <summary>Busca el identificador de comando especificado y devuelve el comando de menú asociado.</summary>
        <returns><see cref="T:System.ComponentModel.Design.MenuCommand" /> asociado a este identificador de comando o <see langword="null" /> si no se encuentra ningún comando.</returns>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.ComponentModel.Design.CommandID" />
      </Docs>
    </Member>
    <Member MemberName="GlobalInvoke">
      <MemberSignature Language="C#" Value="public bool GlobalInvoke (System.ComponentModel.Design.CommandID commandID);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool GlobalInvoke(class System.ComponentModel.Design.CommandID commandID) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.IMenuCommandService.GlobalInvoke(System.ComponentModel.Design.CommandID)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool GlobalInvoke(System::ComponentModel::Design::CommandID ^ commandID);" />
      <MemberSignature Language="F#" Value="abstract member GlobalInvoke : System.ComponentModel.Design.CommandID -&gt; bool" Usage="iMenuCommandService.GlobalInvoke commandID" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="commandID" Type="System.ComponentModel.Design.CommandID" />
      </Parameters>
      <Docs>
        <param name="commandID"><see cref="T:System.ComponentModel.Design.CommandID" /> del comando que se va a buscar y ejecutar.</param>
        <summary>Invoca a un comando de menú o de verbo del diseñador que coincida con el identificador de comando especificado.</summary>
        <returns>Es <see langword="true" /> si el comando se invocó y se encontró satisfactoriamente; en caso contrario, es <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este método busca un comando de menú o un verbo de diseñador con un <xref:System.ComponentModel.Design.CommandID> coincidencia especificado <xref:System.ComponentModel.Design.CommandID>. Este método busca en primer lugar dentro de la colección de verbos de diseñador que consta de los verbos globales y activos proporcionado por el diseñador antes de continuar la búsqueda, si es necesario, mediante el servicio de comandos del entorno global. Si se encuentra un comando de menú correspondiente o el verbo de diseñador, se invoca el comando.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.ComponentModel.Design.CommandID" />
      </Docs>
    </Member>
    <Member MemberName="RemoveCommand">
      <MemberSignature Language="C#" Value="public void RemoveCommand (System.ComponentModel.Design.MenuCommand command);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RemoveCommand(class System.ComponentModel.Design.MenuCommand command) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.IMenuCommandService.RemoveCommand(System.ComponentModel.Design.MenuCommand)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RemoveCommand (command As MenuCommand)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RemoveCommand(System::ComponentModel::Design::MenuCommand ^ command);" />
      <MemberSignature Language="F#" Value="abstract member RemoveCommand : System.ComponentModel.Design.MenuCommand -&gt; unit" Usage="iMenuCommandService.RemoveCommand command" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="command" Type="System.ComponentModel.Design.MenuCommand" />
      </Parameters>
      <Docs>
        <param name="command">Objeto <see cref="T:System.ComponentModel.Design.MenuCommand" /> que se va a quitar.</param>
        <summary>Quita el comando de menú estándar especificado del menú.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este método quita especificado <xref:System.ComponentModel.Design.MenuCommand> si se encuentra. Este método producirá una excepción o devuelve un valor si no especificado <xref:System.ComponentModel.Design.MenuCommand> no se encuentra. Use la <xref:System.ComponentModel.Design.IMenuCommandService.FindCommand%2A> método para determinar si un <xref:System.ComponentModel.Design.MenuCommand> coincidencia especificado <xref:System.ComponentModel.Design.CommandID> se encuentra en un menú.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.ComponentModel.Design.MenuCommand" />
      </Docs>
    </Member>
    <Member MemberName="RemoveVerb">
      <MemberSignature Language="C#" Value="public void RemoveVerb (System.ComponentModel.Design.DesignerVerb verb);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RemoveVerb(class System.ComponentModel.Design.DesignerVerb verb) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.IMenuCommandService.RemoveVerb(System.ComponentModel.Design.DesignerVerb)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RemoveVerb (verb As DesignerVerb)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RemoveVerb(System::ComponentModel::Design::DesignerVerb ^ verb);" />
      <MemberSignature Language="F#" Value="abstract member RemoveVerb : System.ComponentModel.Design.DesignerVerb -&gt; unit" Usage="iMenuCommandService.RemoveVerb verb" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="verb" Type="System.ComponentModel.Design.DesignerVerb" />
      </Parameters>
      <Docs>
        <param name="verb">Objeto <see cref="T:System.ComponentModel.Design.DesignerVerb" /> que se va a quitar.</param>
        <summary>Quita el verbo del diseñador especificado del conjunto de verbos globales del diseñador.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este método quita el verbo de diseñador global especificado si se encuentra dentro de la colección de verbos globales del diseñador. Puede agregar un verbo de diseñador a la colección de verbos globales del diseñador utilizando el <xref:System.ComponentModel.Design.IMenuCommandService.AddVerb%2A> método.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.ComponentModel.Design.DesignerVerb" />
      </Docs>
    </Member>
    <Member MemberName="ShowContextMenu">
      <MemberSignature Language="C#" Value="public void ShowContextMenu (System.ComponentModel.Design.CommandID menuID, int x, int y);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ShowContextMenu(class System.ComponentModel.Design.CommandID menuID, int32 x, int32 y) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.IMenuCommandService.ShowContextMenu(System.ComponentModel.Design.CommandID,System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ShowContextMenu (menuID As CommandID, x As Integer, y As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ShowContextMenu(System::ComponentModel::Design::CommandID ^ menuID, int x, int y);" />
      <MemberSignature Language="F#" Value="abstract member ShowContextMenu : System.ComponentModel.Design.CommandID * int * int -&gt; unit" Usage="iMenuCommandService.ShowContextMenu (menuID, x, y)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="menuID" Type="System.ComponentModel.Design.CommandID" />
        <Parameter Name="x" Type="System.Int32" />
        <Parameter Name="y" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="menuID"><see cref="T:System.ComponentModel.Design.CommandID" /> del menú contextual que se va a mostrar.</param>
        <param name="x">Coordenada x donde se va a mostrar el menú de acceso directo, en coordenadas de pantalla.</param>
        <param name="y">Coordenada y donde se va a mostrar el menú de acceso directo, en coordenadas de pantalla.</param>
        <summary>Muestra el menú contextual especificado en la ubicación especificada.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.ComponentModel.Design.IMenuCommandService.ShowContextMenu%2A> método puede mostrar cualquiera de los siguientes menús contextuales de Visual Studio que contiene los comandos de menú en un punto especificado:  
  
|Menú|CommandID|  
|----------|---------------|  
|El menú contextual que se muestra para un contenedor|<xref:System.Windows.Forms.Design.MenuCommands.ContainerMenu>|  
|El menú contextual que se muestra en la Bandeja de componentes|<xref:System.Windows.Forms.Design.MenuCommands.ComponentTrayMenu>|  
|El menú contextual que se muestra para una selección|<xref:System.Windows.Forms.Design.MenuCommands.SelectionMenu>|  
|El menú contextual que se muestra para una selección de la Bandeja|<xref:System.Windows.Forms.Design.MenuCommands.TraySelectionMenu>|  
  
 Este método también puede mostrar otros menús contextuales registrados.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.ComponentModel.Design.CommandID" />
      </Docs>
    </Member>
    <Member MemberName="Verbs">
      <MemberSignature Language="C#" Value="public System.ComponentModel.Design.DesignerVerbCollection Verbs { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.ComponentModel.Design.DesignerVerbCollection Verbs" />
      <MemberSignature Language="DocId" Value="P:System.ComponentModel.Design.IMenuCommandService.Verbs" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Verbs As DesignerVerbCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::ComponentModel::Design::DesignerVerbCollection ^ Verbs { System::ComponentModel::Design::DesignerVerbCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Verbs : System.ComponentModel.Design.DesignerVerbCollection" Usage="System.ComponentModel.Design.IMenuCommandService.Verbs" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ComponentModel.Design.DesignerVerbCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene una colección de los verbos de diseñador que están disponibles actualmente.</summary>
        <value>Objeto <see cref="T:System.ComponentModel.Design.DesignerVerbCollection" /> de los verbos de diseñador que están disponibles actualmente.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El conjunto de verbos de diseñador actualmente disponibles consta de todos los verbos globales del diseñador, que se agregan mediante el <xref:System.ComponentModel.Design.IMenuCommandService.AddVerb%2A> método en esta interfaz y los verbos de diseñador individuales, que ofrecen el <xref:System.ComponentModel.Design.IDesigner.Verbs%2A> propiedad de los distintos diseñadores. Si el nombre de un verbo global entra en conflicto con el nombre de un verbo de diseñador, el verbo de diseñador proporcionado por el diseñador tiene prioridad.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.ComponentModel.Design.DesignerVerbCollection" />
        <altmember cref="P:System.ComponentModel.Design.IDesigner.Verbs" />
      </Docs>
    </Member>
  </Members>
</Type>