<Type Name="ITypeDescriptorFilterService" FullName="System.ComponentModel.Design.ITypeDescriptorFilterService">
  <Metadata><Meta Name="ms.openlocfilehash" Value="dde13c6623bf839a58865ff79bd94fd5c045fa19" /><Meta Name="ms.sourcegitcommit" Value="1bb00d2f4343e73ae8d58668f02297a3cf10a4c1" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="es-ES" /><Meta Name="ms.lasthandoff" Value="06/15/2019" /><Meta Name="ms.locfileid" Value="63898735" /></Metadata><TypeSignature Language="C#" Value="public interface ITypeDescriptorFilterService" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract ITypeDescriptorFilterService" />
  <TypeSignature Language="DocId" Value="T:System.ComponentModel.Design.ITypeDescriptorFilterService" />
  <TypeSignature Language="VB.NET" Value="Public Interface ITypeDescriptorFilterService" />
  <TypeSignature Language="C++ CLI" Value="public interface class ITypeDescriptorFilterService" />
  <TypeSignature Language="F#" Value="type ITypeDescriptorFilterService = interface" />
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Docs>
    <summary>Proporciona una interfaz para modificar el conjunto de descriptores de miembro para un componente en tiempo de diseño.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.ComponentModel.Design.ITypeDescriptorFilterService> interfaz proporciona una interfaz que permite la modificación de las propiedades, eventos y los atributos de nivel de clase de un componente en tiempo de diseño. Esta modificación se produce a través del conjunto de descriptores que proporciona un componente a través de un <xref:System.ComponentModel.TypeDescriptor>. El descriptor de tipos consultará el sitio de un componente para el <xref:System.ComponentModel.Design.ITypeDescriptorFilterService> de servicio y, si existe, el descriptor de tipos pasará todos los metadatos que se ha recopilado a este servicio. El servicio, a continuación, puede modificar los metadatos agregando, quitando y modificando las características existentes del componente.  
  
 Por ejemplo, se pueden modificar las propiedades de un componente a través de una llamada a la <xref:System.ComponentModel.Design.ITypeDescriptorFilterService.FilterProperties%2A> método. El servicio de filtro Obtiene un diccionario que contiene los nombres de propiedad y sus descriptores de propiedad de tipo <xref:System.ComponentModel.PropertyDescriptor>. Las modificaciones se implementan utilizando la lógica siguiente.  
  
|Modificación|Implementación|  
|------------------|--------------------|  
|Eliminación|Elimine la entrada correspondiente en el diccionario.|  
|Adición|Agregue la entrada correspondiente al diccionario.|  
|Modificación|Llamar a métodos de descriptor de propiedad existente, reemplace la entrada del descriptor de propiedad asociada o el par clave/valor de propiedad completa en el diccionario.|  
  
 El valor devuelto de <xref:System.ComponentModel.Design.ITypeDescriptorFilterService.FilterProperties%2A> determina si este conjunto de propiedades es fijo. Si este método devuelve `true`, <xref:System.ComponentModel.TypeDescriptor> para este componente puede almacenar en caché los resultados. Esta caché se mantiene hasta que el componente se recolectan o <xref:System.ComponentModel.TypeDescriptor.Refresh%2A> se llama al método de descriptor de tipos.  
  
   
  
## Examples  
 En el ejemplo de código siguiente se muestra un diseñador que utiliza la <xref:System.ComponentModel.Design.ITypeDescriptorFilterService> para filtrar la colección de atributos de cualquier nueva o existente <xref:System.Windows.Forms.Button> para agregar un atributo de diseñador para un nuevo diseñador antes de cargar o volver a cargar el diseñador para el botón.  
  
 Para usar el ejemplo, agregue el código a un proyecto de Windows Forms y cargar los componentes de la biblioteca de clases en el cuadro de herramientas.  
  
 Consulte también [Tutorial: Rellenar automáticamente el cuadro de herramientas con componentes personalizados](https://msdn.microsoft.com/library/fw694kde\(v=vs.110\).aspx).  
  
 Agregar algunos botones al formulario. Agregar un `ButtonDesignerFilterComponent` al formulario, y aparecerá en la Bandeja de componentes. El `ButtonDesignerFilterComponent` agregará un `ButtonDesignerFilterService`, que implementa <xref:System.ComponentModel.Design.ITypeDescriptorFilterService>, como un proveedor de servicios de modo de diseño. Nueva o existente <xref:System.Windows.Forms.Button> objetos en el formulario iniciará de color cíclicamente después la `ButtonDesignerFilterService` reemplaza el diseñador para cada botón nueva y existente con un `ColorCycleButtonDesigner`. Los botones mostrará de color ciclo al mover el puntero del mouse sobre ellos y también puede continuar el recorrido o restablecer los colores de primer plano y fondo en `MouseLeave` eventos. Nuevo <xref:System.Windows.Forms.Button> objetos le ofrecerá la `ColorCycleButtonDesigner` a través de la <xref:System.ComponentModel.Design.ITypeDescriptorFilterService.FilterAttributes%2A> método de la `ButtonDesignerFilterService` que se ha cargado, hasta el `ButtonDesignerFilterComponent` se elimina y reemplaza al original <xref:System.ComponentModel.Design.ITypeDescriptorFilterService>. El `ColorCycleButton` clase en este ejemplo es un <xref:System.Windows.Forms.Button> asociado con un `ColorCycleButtonDesigner`.  
  
 [!code-cpp[ITypeDescriptorFilterService#1](~/samples/snippets/cpp/VS_Snippets_Winforms/ITypeDescriptorFilterService/CPP/source.cpp#1)]
 [!code-csharp[ITypeDescriptorFilterService#1](~/samples/snippets/csharp/VS_Snippets_Winforms/ITypeDescriptorFilterService/CS/source.cs#1)]
 [!code-vb[ITypeDescriptorFilterService#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/ITypeDescriptorFilterService/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <block subset="none" type="overrides"><para>Para filtrar los descriptores de miembro expuestos por un <see cref="T:System.ComponentModel.TypeDescriptor" />, implemente esta interfaz en un componente e invalide el <see cref="M:System.ComponentModel.Design.ITypeDescriptorFilterService.FilterAttributes(System.ComponentModel.IComponent,System.Collections.IDictionary)" />, <see cref="M:System.ComponentModel.Design.ITypeDescriptorFilterService.FilterEvents(System.ComponentModel.IComponent,System.Collections.IDictionary)" />, o <see cref="M:System.ComponentModel.Design.ITypeDescriptorFilterService.FilterProperties(System.ComponentModel.IComponent,System.Collections.IDictionary)" /> métodos de esta clase para filtrar los atributos, eventos o propiedades, respectivamente.</para></block>
    <altmember cref="T:System.ComponentModel.TypeDescriptor" />
    <altmember cref="T:System.ComponentModel.EventDescriptor" />
    <altmember cref="T:System.ComponentModel.PropertyDescriptor" />
    <altmember cref="T:System.Attribute" />
    <altmember cref="T:System.Collections.IDictionary" />
  </Docs>
  <Members>
    <Member MemberName="FilterAttributes">
      <MemberSignature Language="C#" Value="public bool FilterAttributes (System.ComponentModel.IComponent component, System.Collections.IDictionary attributes);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool FilterAttributes(class System.ComponentModel.IComponent component, class System.Collections.IDictionary attributes) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.ITypeDescriptorFilterService.FilterAttributes(System.ComponentModel.IComponent,System.Collections.IDictionary)" />
      <MemberSignature Language="VB.NET" Value="Public Function FilterAttributes (component As IComponent, attributes As IDictionary) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool FilterAttributes(System::ComponentModel::IComponent ^ component, System::Collections::IDictionary ^ attributes);" />
      <MemberSignature Language="F#" Value="abstract member FilterAttributes : System.ComponentModel.IComponent * System.Collections.IDictionary -&gt; bool" Usage="iTypeDescriptorFilterService.FilterAttributes (component, attributes)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="component" Type="System.ComponentModel.IComponent" />
        <Parameter Name="attributes" Type="System.Collections.IDictionary" />
      </Parameters>
      <Docs>
        <param name="component">Componente cuyos atributos se van a filtrar.</param>
        <param name="attributes">Diccionario de atributos que pueden modificarse.</param>
        <summary>Filtra los atributos que expone un componente mediante un <see cref="T:System.ComponentModel.TypeDescriptor" />.</summary>
        <returns>Es <see langword="true" /> si el conjunto de atributos filtrados se debe guardar en caché; <see langword="false" /> si el servicio de filtros debe volver a consultar.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este método se llama cuando un usuario solicita un conjunto de atributos para un componente. Los atributos se agregan al diccionario con el atributo <xref:System.Attribute.TypeId%2A> como las claves y el atributo como el valor real. Los implementadores de este servicio pueden agregar, quitar o modificar las entradas de atributo existentes en el diccionario.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>Devolver <see langword="false" /> sólo cuando es necesario, dado que las consultas para el servicio de filtros del descriptor de tipo pueden disminuir el rendimiento.</para></block>
        <altmember cref="T:System.Attribute" />
        <altmember cref="P:System.Attribute.TypeId" />
        <altmember cref="T:System.Collections.IDictionary" />
      </Docs>
    </Member>
    <Member MemberName="FilterEvents">
      <MemberSignature Language="C#" Value="public bool FilterEvents (System.ComponentModel.IComponent component, System.Collections.IDictionary events);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool FilterEvents(class System.ComponentModel.IComponent component, class System.Collections.IDictionary events) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.ITypeDescriptorFilterService.FilterEvents(System.ComponentModel.IComponent,System.Collections.IDictionary)" />
      <MemberSignature Language="VB.NET" Value="Public Function FilterEvents (component As IComponent, events As IDictionary) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool FilterEvents(System::ComponentModel::IComponent ^ component, System::Collections::IDictionary ^ events);" />
      <MemberSignature Language="F#" Value="abstract member FilterEvents : System.ComponentModel.IComponent * System.Collections.IDictionary -&gt; bool" Usage="iTypeDescriptorFilterService.FilterEvents (component, events)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="component" Type="System.ComponentModel.IComponent" />
        <Parameter Name="events" Type="System.Collections.IDictionary" />
      </Parameters>
      <Docs>
        <param name="component">Componente cuyos eventos se van a filtrar.</param>
        <param name="events">Diccionario de eventos que pueden modificarse.</param>
        <summary>Filtra los eventos que expone un componente mediante un <see cref="T:System.ComponentModel.TypeDescriptor" />.</summary>
        <returns>Es <see langword="true" /> si el conjunto de eventos filtrados se debe guardar en caché; es <see langword="false" /> si el servicio de filtros debe volver a consultar.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este método se llama cuando un usuario solicita un conjunto de eventos para un componente. Los eventos se agregan al diccionario con los nombres de evento como claves y los correspondientes <xref:System.ComponentModel.EventDescriptor> objetos como los valores. Los implementadores de este servicio pueden agregar, quitar o modificar entradas de eventos en el diccionario.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>Devolver <see langword="false" /> sólo cuando es necesario, dado que las consultas para el servicio de filtros del descriptor de tipo pueden disminuir el rendimiento.</para></block>
        <altmember cref="T:System.ComponentModel.EventDescriptor" />
        <altmember cref="T:System.Collections.IDictionary" />
      </Docs>
    </Member>
    <Member MemberName="FilterProperties">
      <MemberSignature Language="C#" Value="public bool FilterProperties (System.ComponentModel.IComponent component, System.Collections.IDictionary properties);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool FilterProperties(class System.ComponentModel.IComponent component, class System.Collections.IDictionary properties) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.ITypeDescriptorFilterService.FilterProperties(System.ComponentModel.IComponent,System.Collections.IDictionary)" />
      <MemberSignature Language="VB.NET" Value="Public Function FilterProperties (component As IComponent, properties As IDictionary) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool FilterProperties(System::ComponentModel::IComponent ^ component, System::Collections::IDictionary ^ properties);" />
      <MemberSignature Language="F#" Value="abstract member FilterProperties : System.ComponentModel.IComponent * System.Collections.IDictionary -&gt; bool" Usage="iTypeDescriptorFilterService.FilterProperties (component, properties)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="component" Type="System.ComponentModel.IComponent" />
        <Parameter Name="properties" Type="System.Collections.IDictionary" />
      </Parameters>
      <Docs>
        <param name="component">Componente cuyas propiedades se van a filtrar.</param>
        <param name="properties">Diccionario de propiedades que pueden modificarse.</param>
        <summary>Filtra las propiedades que expone un componente mediante un <see cref="T:System.ComponentModel.TypeDescriptor" />.</summary>
        <returns>Es <see langword="true" /> si el conjunto de propiedades filtradas se debe guardar en caché; es <see langword="false" /> si el servicio de filtros debe volver a consultar.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este método se llama cuando un usuario solicita un conjunto de propiedades para un componente. Las propiedades se agregan al diccionario con los nombres de propiedad como claves y los correspondientes <xref:System.ComponentModel.PropertyDescriptor> objetos como los valores. Los implementadores de este servicio pueden agregar, quitar o modificar las entradas de propiedad en el diccionario.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>Devolver <see langword="false" /> sólo cuando es necesario, dado que las consultas para el servicio de filtros del descriptor de tipo pueden disminuir el rendimiento.</para></block>
        <altmember cref="T:System.ComponentModel.PropertyDescriptor" />
        <altmember cref="T:System.Collections.IDictionary" />
      </Docs>
    </Member>
  </Members>
</Type>