<Type Name="MenuCommandService" FullName="System.ComponentModel.Design.MenuCommandService">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="5c39de537c917ee90494af7918ff30d9a3c1046f" />
    <Meta Name="ms.sourcegitcommit" Value="434f60616a9793fa8436744549fc856e94f7a648" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="es-ES" />
    <Meta Name="ms.lasthandoff" Value="08/25/2018" />
    <Meta Name="ms.locfileid" Value="39869614" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class MenuCommandService : IDisposable, System.ComponentModel.Design.IMenuCommandService" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit MenuCommandService extends System.Object implements class System.ComponentModel.Design.IMenuCommandService, class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.ComponentModel.Design.MenuCommandService" />
  <TypeSignature Language="VB.NET" Value="Public Class MenuCommandService&#xA;Implements IDisposable, IMenuCommandService" />
  <TypeSignature Language="C++ CLI" Value="public ref class MenuCommandService : IDisposable, System::ComponentModel::Design::IMenuCommandService" />
  <TypeSignature Language="F#" Value="type MenuCommandService = class&#xA;    interface IMenuCommandService&#xA;    interface IDisposable" />
  <AssemblyInfo>
    <AssemblyName>System.Design</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.ComponentModel.Design.IMenuCommandService</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>
      <span data-ttu-id="19283-101">Implementa la interfaz <see cref="T:System.ComponentModel.Design.IMenuCommandService" />.</span>
      <span class="sxs-lookup">
        <span data-stu-id="19283-101">Implements the <see cref="T:System.ComponentModel.Design.IMenuCommandService" /> interface.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="19283-102">El <xref:System.ComponentModel.Design.MenuCommandService> la clase implementa la <xref:System.ComponentModel.Design.IMenuCommandService> interfaz, que es la interfaz administrada que se utiliza para agregar controladores para comandos de menú y definir verbos.</span><span class="sxs-lookup"><span data-stu-id="19283-102">The <xref:System.ComponentModel.Design.MenuCommandService> class implements the <xref:System.ComponentModel.Design.IMenuCommandService> interface, which is the managed interface used to add handlers for menu commands and to define verbs.</span></span>  
  
 <span data-ttu-id="19283-103">El <xref:System.ComponentModel.Design.MenuCommandService> clase automáticamente ofrecida por la clase de paquete comandos globales de un paquete completo, y también se ofrece por la `Microsoft.VisualStudio.Shell.WindowPane` clase ofrece los comandos de la ventana actual.</span><span class="sxs-lookup"><span data-stu-id="19283-103">The <xref:System.ComponentModel.Design.MenuCommandService> class is automatically offered by the package class to offer global commands for an entire package, and it is also offered by the `Microsoft.VisualStudio.Shell.WindowPane` class to offer commands for the current window.</span></span> <span data-ttu-id="19283-104">Esta oferta siempre se realiza a través del contenedor de servicio, por lo que cualquier persona derivar desde el paquete o clases de ventana de panel pueden quitar o reemplazar la implementación predeterminada de la <xref:System.ComponentModel.Design.IMenuCommandService> interfaz.</span><span class="sxs-lookup"><span data-stu-id="19283-104">This offering is always done through the service container, so anyone deriving from the package or window pane classes can remove or replace the default implementation of the <xref:System.ComponentModel.Design.IMenuCommandService> interface.</span></span>  
  
 <span data-ttu-id="19283-105">La <xref:System.ComponentModel.Design.MenuCommandService> clase utiliza otros servicios.</span><span class="sxs-lookup"><span data-stu-id="19283-105">The <xref:System.ComponentModel.Design.MenuCommandService> class utilizes several other services.</span></span> <span data-ttu-id="19283-106">Todos estos servicios son opcionales, por lo que el comportamiento de la <xref:System.ComponentModel.Design.MenuCommandService> clase degrada si uno o más servicios se han perdido.</span><span class="sxs-lookup"><span data-stu-id="19283-106">All of these services are optional, so the behavior of the <xref:System.ComponentModel.Design.MenuCommandService> class degrades if one or more services are missing.</span></span> <span data-ttu-id="19283-107">La siguiente tabla muestra qué servicios se utilizan y su finalidad.</span><span class="sxs-lookup"><span data-stu-id="19283-107">The following table shows which services are used and for what purpose.</span></span>  
  
|<span data-ttu-id="19283-108">web de Office</span><span class="sxs-lookup"><span data-stu-id="19283-108">Service</span></span>|<span data-ttu-id="19283-109">Propósito</span><span class="sxs-lookup"><span data-stu-id="19283-109">Purpose</span></span>|  
|-------------|-------------|  
|<xref:System.ComponentModel.Design.ISelectionService>|<span data-ttu-id="19283-110">Se usa para detectar la selección actual con el fin de obtener los verbos proporcionados por el diseñador actualmente seleccionado.</span><span class="sxs-lookup"><span data-stu-id="19283-110">Used to discover the current selection in order to obtain verbs offered by the currently selected designer.</span></span>|  
|<xref:System.ComponentModel.Design.IDesignerHost>|<span data-ttu-id="19283-111">Se usa para obtener el diseñador para el componente seleccionado actualmente, si existe alguno.</span><span class="sxs-lookup"><span data-stu-id="19283-111">Used to obtain the designer for the currently selected component, if any.</span></span>|  
|`Microsoft.VisualStudio.Shell.Interop.IVsUIShell`|<span data-ttu-id="19283-112">Se utiliza para notificar a Visual Studio que ha cambiado el estado del comando.</span><span class="sxs-lookup"><span data-stu-id="19283-112">Used to notify Visual Studio that the command status has changed.</span></span>|  
|`Microsoft.VisualStudio.Shell.Interop.IOleComponentUIManager`|<span data-ttu-id="19283-113">Se usa para mostrar menús contextuales.</span><span class="sxs-lookup"><span data-stu-id="19283-113">Used to show context menus.</span></span>|  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.ComponentModel.Design.MenuCommand" />
    <altmember cref="T:System.ComponentModel.Design.DesignerVerb" />
    <altmember cref="T:System.ComponentModel.Design.CommandID" />
    <altmember cref="T:System.IServiceProvider" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public MenuCommandService (IServiceProvider serviceProvider);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.IServiceProvider serviceProvider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.MenuCommandService.#ctor(System.IServiceProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (serviceProvider As IServiceProvider)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; MenuCommandService(IServiceProvider ^ serviceProvider);" />
      <MemberSignature Language="F#" Value="new System.ComponentModel.Design.MenuCommandService : IServiceProvider -&gt; System.ComponentModel.Design.MenuCommandService" Usage="new System.ComponentModel.Design.MenuCommandService serviceProvider" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="serviceProvider" Type="System.IServiceProvider" />
      </Parameters>
      <Docs>
        <param name="serviceProvider">
          <span data-ttu-id="19283-114">Proveedor de servicios que utiliza este servicio para obtener otros servicios.</span>
          <span class="sxs-lookup">
            <span data-stu-id="19283-114">The service provider that this service uses to obtain other services.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="19283-115">Inicializa una nueva instancia de la clase <see cref="T:System.ComponentModel.Design.MenuCommandService" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="19283-115">Initializes a new instance of the <see cref="T:System.ComponentModel.Design.MenuCommandService" /> class.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="19283-116">Si el servicio se utiliza con un diseñador, el `serviceProvider` parámetro debe ser el proveedor de servicios para el diseñador, como sucede con <xref:System.ComponentModel.Design.DesignSurface>.</span><span class="sxs-lookup"><span data-stu-id="19283-116">If the service is being used with a designer, the `serviceProvider` parameter should be the service provider for the designer, as is the case with <xref:System.ComponentModel.Design.DesignSurface>.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.ComponentModel.Design.MenuCommand" />
        <altmember cref="T:System.IServiceProvider" />
      </Docs>
    </Member>
    <Member MemberName="AddCommand">
      <MemberSignature Language="C#" Value="public virtual void AddCommand (System.ComponentModel.Design.MenuCommand command);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AddCommand(class System.ComponentModel.Design.MenuCommand command) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.MenuCommandService.AddCommand(System.ComponentModel.Design.MenuCommand)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub AddCommand (command As MenuCommand)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void AddCommand(System::ComponentModel::Design::MenuCommand ^ command);" />
      <MemberSignature Language="F#" Value="abstract member AddCommand : System.ComponentModel.Design.MenuCommand -&gt; unit&#xA;override this.AddCommand : System.ComponentModel.Design.MenuCommand -&gt; unit" Usage="menuCommandService.AddCommand command" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="command" Type="System.ComponentModel.Design.MenuCommand" />
      </Parameters>
      <Docs>
        <param name="command">
          <span data-ttu-id="19283-117">
            <see cref="T:System.ComponentModel.Design.MenuCommand" /> que se va a agregar.</span>
          <span class="sxs-lookup">
            <span data-stu-id="19283-117">The <see cref="T:System.ComponentModel.Design.MenuCommand" /> to add.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="19283-118">Agrega un controlador de comandos al servicio de comandos de menú.</span>
          <span class="sxs-lookup">
            <span data-stu-id="19283-118">Adds a command handler to the menu command service.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="19283-119">El <xref:System.ComponentModel.Design.MenuCommandService.AddCommand%2A> método agrega un controlador de comandos para el servicio de comandos de menú.</span><span class="sxs-lookup"><span data-stu-id="19283-119">The <xref:System.ComponentModel.Design.MenuCommandService.AddCommand%2A> method adds a command handler to the menu command service.</span></span> <span data-ttu-id="19283-120">Controladores de comandos no define el texto, el acceso directo o la selección de ubicación de un elemento de menú.</span><span class="sxs-lookup"><span data-stu-id="19283-120">Command handlers do not define the text, shortcut, or placement of a menu item.</span></span> <span data-ttu-id="19283-121">En su lugar, define el comportamiento del elemento de menú si se hace clic en el elemento.</span><span class="sxs-lookup"><span data-stu-id="19283-121">Rather, they define the menu item’s behavior if the item is clicked.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="19283-122">
            <paramref name="command" /> es <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="19283-122">
              <paramref name="command" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="19283-123">Ya existe un <paramref name="command" /> de controlador de comandos.</span>
          <span class="sxs-lookup">
            <span data-stu-id="19283-123">A command handler <paramref name="command" /> already exists.</span>
          </span>
        </exception>
        <altmember cref="T:System.ComponentModel.Design.MenuCommand" />
        <altmember cref="T:System.ComponentModel.Design.DesignerVerb" />
        <altmember cref="T:System.ComponentModel.Design.CommandID" />
        <altmember cref="T:System.IServiceProvider" />
      </Docs>
    </Member>
    <Member MemberName="AddVerb">
      <MemberSignature Language="C#" Value="public virtual void AddVerb (System.ComponentModel.Design.DesignerVerb verb);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AddVerb(class System.ComponentModel.Design.DesignerVerb verb) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.MenuCommandService.AddVerb(System.ComponentModel.Design.DesignerVerb)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub AddVerb (verb As DesignerVerb)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void AddVerb(System::ComponentModel::Design::DesignerVerb ^ verb);" />
      <MemberSignature Language="F#" Value="abstract member AddVerb : System.ComponentModel.Design.DesignerVerb -&gt; unit&#xA;override this.AddVerb : System.ComponentModel.Design.DesignerVerb -&gt; unit" Usage="menuCommandService.AddVerb verb" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="verb" Type="System.ComponentModel.Design.DesignerVerb" />
      </Parameters>
      <Docs>
        <param name="verb">
          <span data-ttu-id="19283-124">
            <see cref="T:System.ComponentModel.Design.DesignerVerb" /> que se va a agregar.</span>
          <span class="sxs-lookup">
            <span data-stu-id="19283-124">The <see cref="T:System.ComponentModel.Design.DesignerVerb" /> to add.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="19283-125">Agrega un verbo a la tabla de verbos del objeto <see cref="T:System.ComponentModel.Design.MenuCommandService" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="19283-125">Adds a verb to the verb table of the <see cref="T:System.ComponentModel.Design.MenuCommandService" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="19283-126">Este verbo está disponible, independientemente de qué diseñador está seleccionado actualmente.</span><span class="sxs-lookup"><span data-stu-id="19283-126">This verb is available regardless of what designer is currently selected.</span></span> <span data-ttu-id="19283-127">A diferencia de los comandos de menú, verbos pueden definir el texto que se muestra al usuario, pero no define la posición del comando en el menú real.</span><span class="sxs-lookup"><span data-stu-id="19283-127">Unlike menu commands, verbs can define the text that is displayed to the user, but they do not define the placement of the command on the actual menu.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="19283-128">
            <paramref name="verb" /> es <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="19283-128">
              <paramref name="verb" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <altmember cref="T:System.ComponentModel.Design.MenuCommand" />
        <altmember cref="T:System.ComponentModel.Design.DesignerVerb" />
        <altmember cref="T:System.ComponentModel.Design.CommandID" />
        <altmember cref="T:System.IServiceProvider" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Dispose">
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="19283-129">Libera todos los recursos que usa <see cref="T:System.ComponentModel.Design.MenuCommandService" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="19283-129">Releases all resources used by the <see cref="T:System.ComponentModel.Design.MenuCommandService" />.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.MenuCommandService.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Dispose();" />
      <MemberSignature Language="F#" Value="abstract member Dispose : unit -&gt; unit&#xA;override this.Dispose : unit -&gt; unit" Usage="menuCommandService.Dispose " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="19283-130">Libera todos los recursos que usa <see cref="T:System.ComponentModel.Design.MenuCommandService" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="19283-130">Releases all resources used by the <see cref="T:System.ComponentModel.Design.MenuCommandService" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="19283-131">Llame a <xref:System.ComponentModel.Design.MenuCommandService.Dispose%2A> cuando haya terminado de usar <xref:System.ComponentModel.Design.MenuCommandService>.</span><span class="sxs-lookup"><span data-stu-id="19283-131">Call <xref:System.ComponentModel.Design.MenuCommandService.Dispose%2A> when you are finished using the <xref:System.ComponentModel.Design.MenuCommandService>.</span></span> <span data-ttu-id="19283-132">El método <xref:System.ComponentModel.Design.MenuCommandService.Dispose%2A> deja el <xref:System.ComponentModel.Design.MenuCommandService> en un estado no utilizable.</span><span class="sxs-lookup"><span data-stu-id="19283-132">The <xref:System.ComponentModel.Design.MenuCommandService.Dispose%2A> method leaves the <xref:System.ComponentModel.Design.MenuCommandService> in an unusable state.</span></span> <span data-ttu-id="19283-133">Después de llamar a <xref:System.ComponentModel.Design.MenuCommandService.Dispose%2A>, debe liberar todas las referencias a la <xref:System.ComponentModel.Design.MenuCommandService> por lo que el recolector de elementos no utilizados pueda reclamar la memoria que el <xref:System.ComponentModel.Design.MenuCommandService> estaba ocupando.</span><span class="sxs-lookup"><span data-stu-id="19283-133">After calling <xref:System.ComponentModel.Design.MenuCommandService.Dispose%2A>, you must release all references to the <xref:System.ComponentModel.Design.MenuCommandService> so the garbage collector can reclaim the memory that the <xref:System.ComponentModel.Design.MenuCommandService> was occupying.</span></span> <span data-ttu-id="19283-134">Para obtener más información, consulte [limpiar recursos no administrados](~/docs/standard/garbage-collection/unmanaged.md) y [implementar un método Dispose](~/docs/standard/garbage-collection/implementing-dispose.md).</span><span class="sxs-lookup"><span data-stu-id="19283-134">For more information, see [Cleaning Up Unmanaged Resources](~/docs/standard/garbage-collection/unmanaged.md) and [Implementing a Dispose Method](~/docs/standard/garbage-collection/implementing-dispose.md).</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="19283-135">Realice siempre una llamada a <xref:System.ComponentModel.Design.MenuCommandService.Dispose%2A> antes de liberar la última referencia al objeto <xref:System.ComponentModel.Design.MenuCommandService>.</span><span class="sxs-lookup"><span data-stu-id="19283-135">Always call <xref:System.ComponentModel.Design.MenuCommandService.Dispose%2A> before you release your last reference to the <xref:System.ComponentModel.Design.MenuCommandService>.</span></span> <span data-ttu-id="19283-136">En caso contrario, los recursos que está usando no se liberarán hasta que el recolector de elementos no utilizados llame al método <xref:System.ComponentModel.Design.MenuCommandService> del objeto `Finalize`.</span><span class="sxs-lookup"><span data-stu-id="19283-136">Otherwise, the resources it is using will not be freed until the garbage collector calls the <xref:System.ComponentModel.Design.MenuCommandService> object's `Finalize` method.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected virtual void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.MenuCommandService.Dispose(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub Dispose (disposing As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void Dispose(bool disposing);" />
      <MemberSignature Language="F#" Value="abstract member Dispose : bool -&gt; unit&#xA;override this.Dispose : bool -&gt; unit" Usage="menuCommandService.Dispose disposing" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing">
          <span data-ttu-id="19283-137">Es <see langword="true" /> para liberar tanto recursos administrados como no administrados; es <see langword="false" /> para liberar únicamente recursos no administrados.</span>
          <span class="sxs-lookup">
            <span data-stu-id="19283-137">
              <see langword="true" /> to release both managed and unmanaged resources; <see langword="false" /> to release only unmanaged resources.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="19283-138">Libera todos los recursos que usa <see cref="T:System.ComponentModel.Design.MenuCommandService" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="19283-138">Releases all resources used by the <see cref="T:System.ComponentModel.Design.MenuCommandService" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="19283-139">Este método se llama por el público `Dispose()` método y el <xref:System.Object.Finalize%2A> método.</span><span class="sxs-lookup"><span data-stu-id="19283-139">This method is called by the public `Dispose()` method and the <xref:System.Object.Finalize%2A> method.</span></span> <span data-ttu-id="19283-140">`Dispose()` invoca el protegido `Dispose(Boolean)` método con el `disposing` parámetro establecido en `true`.</span><span class="sxs-lookup"><span data-stu-id="19283-140">`Dispose()` invokes the protected `Dispose(Boolean)` method with the `disposing` parameter set to `true`.</span></span> <span data-ttu-id="19283-141"><xref:System.Object.Finalize%2A> invoca `Dispose` con `disposing` establecido en `false`.</span><span class="sxs-lookup"><span data-stu-id="19283-141"><xref:System.Object.Finalize%2A> invokes `Dispose` with `disposing` set to `false`.</span></span>  
  
 <span data-ttu-id="19283-142">Cuando el `disposing` parámetro es true, este método libera todos los recursos mantenidos por los objetos administrados que este <xref:System.ComponentModel.Design.MenuCommandService> referencias.</span><span class="sxs-lookup"><span data-stu-id="19283-142">When the `disposing` parameter is true, this method releases all resources held by any managed objects that this <xref:System.ComponentModel.Design.MenuCommandService> references.</span></span> <span data-ttu-id="19283-143">Este método invoca al método `Dispose()` de cada uno de los objetos a los que se hace referencia.</span><span class="sxs-lookup"><span data-stu-id="19283-143">This method invokes the `Dispose()` method of each referenced object.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <span data-ttu-id="19283-144">
            <para>
              <see langword="Dispose" /> puede llamarse varias veces por otros objetos. Cuando se reemplaza <see langword="Dispose(Boolean)" /> tenga cuidado de no hacer referencia a objetos que se hayan eliminado en una llamada anterior a <see langword="Dispose" />. Para obtener más información sobre cómo implementar <see langword="Dispose(Boolean)" />, consulte [implementar un método Dispose](~/docs/standard/garbage-collection/implementing-dispose.md).  Para obtener más información acerca de <see langword="Dispose" /> y <see cref="M:System.Object.Finalize" />, consulte [limpiar recursos no administrados](~/docs/standard/garbage-collection/unmanaged.md) y [reemplazar el método Finalize](http://msdn.microsoft.com/library/8026cb68-fe93-43fc-96c1-c09ad7d64cd3).</para>
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="19283-144">
              <para>
                <see langword="Dispose" /> can be called multiple times by other objects. When overriding <see langword="Dispose(Boolean)" /> be careful not to reference objects that have been previously disposed of in an earlier call to <see langword="Dispose" />. For more information about how to implement <see langword="Dispose(Boolean)" />, see [Implementing a Dispose Method](~/docs/standard/garbage-collection/implementing-dispose.md).  For more information about <see langword="Dispose" /> and <see cref="M:System.Object.Finalize" />, see [Cleaning Up Unmanaged Resources](~/docs/standard/garbage-collection/unmanaged.md) and [Overriding the Finalize Method](http://msdn.microsoft.com/library/8026cb68-fe93-43fc-96c1-c09ad7d64cd3).</para>
            </span>
          </span>
        </block>
      </Docs>
    </Member>
    <Member MemberName="EnsureVerbs">
      <MemberSignature Language="C#" Value="protected void EnsureVerbs ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void EnsureVerbs() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.MenuCommandService.EnsureVerbs" />
      <MemberSignature Language="VB.NET" Value="Protected Sub EnsureVerbs ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void EnsureVerbs();" />
      <MemberSignature Language="F#" Value="member this.EnsureVerbs : unit -&gt; unit" Usage="menuCommandService.EnsureVerbs " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="19283-145">Garantiza que se ha creado la lista de verbos.</span>
          <span class="sxs-lookup">
            <span data-stu-id="19283-145">Ensures that the verb list has been created.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="19283-146">El <xref:System.ComponentModel.Design.MenuCommandService.EnsureVerbs%2A> método crea la lista de verbos si ya no se ha creado.</span><span class="sxs-lookup"><span data-stu-id="19283-146">The <xref:System.ComponentModel.Design.MenuCommandService.EnsureVerbs%2A> method creates the verb list if it has not already been created.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.ComponentModel.Design.MenuCommand" />
        <altmember cref="T:System.ComponentModel.Design.DesignerVerb" />
        <altmember cref="T:System.ComponentModel.Design.CommandID" />
        <altmember cref="T:System.IServiceProvider" />
      </Docs>
    </Member>
    <MemberGroup MemberName="FindCommand">
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="19283-147">Busca el <see cref="T:System.ComponentModel.Design.MenuCommand" /> asociado al identificador de comandos especificado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="19283-147">Searches for the <see cref="T:System.ComponentModel.Design.MenuCommand" /> associated with the given command ID.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="FindCommand">
      <MemberSignature Language="C#" Value="public System.ComponentModel.Design.MenuCommand FindCommand (System.ComponentModel.Design.CommandID commandID);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.ComponentModel.Design.MenuCommand FindCommand(class System.ComponentModel.Design.CommandID commandID) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.MenuCommandService.FindCommand(System.ComponentModel.Design.CommandID)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::ComponentModel::Design::MenuCommand ^ FindCommand(System::ComponentModel::Design::CommandID ^ commandID);" />
      <MemberSignature Language="F#" Value="abstract member FindCommand : System.ComponentModel.Design.CommandID -&gt; System.ComponentModel.Design.MenuCommand&#xA;override this.FindCommand : System.ComponentModel.Design.CommandID -&gt; System.ComponentModel.Design.MenuCommand" Usage="menuCommandService.FindCommand commandID" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ComponentModel.Design.MenuCommand</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="commandID" Type="System.ComponentModel.Design.CommandID" />
      </Parameters>
      <Docs>
        <param name="commandID">
          <span data-ttu-id="19283-148">
            <see cref="T:System.ComponentModel.Design.CommandID" /> que se va a buscar.</span>
          <span class="sxs-lookup">
            <span data-stu-id="19283-148">The <see cref="T:System.ComponentModel.Design.CommandID" /> to find.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="19283-149">Busca el <see cref="T:System.ComponentModel.Design.MenuCommand" /> asociado al identificador de comandos especificado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="19283-149">Searches for the <see cref="T:System.ComponentModel.Design.MenuCommand" /> associated with the given command ID.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="19283-150">Objeto <see cref="T:System.ComponentModel.Design.MenuCommand" /> asociado al comando especificado; en caso contrario, si no se encuentra el comando, <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="19283-150">The <see cref="T:System.ComponentModel.Design.MenuCommand" /> associated with the given command; otherwise, <see langword="null" /> if the command is not found.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.ComponentModel.Design.MenuCommand" />
        <altmember cref="T:System.ComponentModel.Design.DesignerVerb" />
        <altmember cref="T:System.ComponentModel.Design.CommandID" />
        <altmember cref="T:System.IServiceProvider" />
      </Docs>
    </Member>
    <Member MemberName="FindCommand">
      <MemberSignature Language="C#" Value="protected System.ComponentModel.Design.MenuCommand FindCommand (Guid guid, int id);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance class System.ComponentModel.Design.MenuCommand FindCommand(valuetype System.Guid guid, int32 id) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.MenuCommandService.FindCommand(System.Guid,System.Int32)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; System::ComponentModel::Design::MenuCommand ^ FindCommand(Guid guid, int id);" />
      <MemberSignature Language="F#" Value="member this.FindCommand : Guid * int -&gt; System.ComponentModel.Design.MenuCommand" Usage="menuCommandService.FindCommand (guid, id)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ComponentModel.Design.MenuCommand</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="guid" Type="System.Guid" />
        <Parameter Name="id" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="guid">
          <span data-ttu-id="19283-151">GUID del comando.</span>
          <span class="sxs-lookup">
            <span data-stu-id="19283-151">The GUID of the command.</span>
          </span>
        </param>
        <param name="id">
          <span data-ttu-id="19283-152">Identificador del comando.</span>
          <span class="sxs-lookup">
            <span data-stu-id="19283-152">The ID of the command.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="19283-153">Busca el <see cref="T:System.ComponentModel.Design.MenuCommand" /> asociado al comando especificado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="19283-153">Searches for the <see cref="T:System.ComponentModel.Design.MenuCommand" /> associated with the given command.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="19283-154">Objeto <see cref="T:System.ComponentModel.Design.MenuCommand" /> asociado al comando especificado; en caso contrario, si no se encuentra el comando, <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="19283-154">The <see cref="T:System.ComponentModel.Design.MenuCommand" /> associated with the given command; otherwise, <see langword="null" /> if the command is not found.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.ComponentModel.Design.MenuCommand" />
        <altmember cref="T:System.ComponentModel.Design.DesignerVerb" />
        <altmember cref="T:System.ComponentModel.Design.CommandID" />
        <altmember cref="T:System.IServiceProvider" />
      </Docs>
    </Member>
    <Member MemberName="GetCommandList">
      <MemberSignature Language="C#" Value="protected System.Collections.ICollection GetCommandList (Guid guid);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance class System.Collections.ICollection GetCommandList(valuetype System.Guid guid) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.MenuCommandService.GetCommandList(System.Guid)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; System::Collections::ICollection ^ GetCommandList(Guid guid);" />
      <MemberSignature Language="F#" Value="member this.GetCommandList : Guid -&gt; System.Collections.ICollection" Usage="menuCommandService.GetCommandList guid" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ICollection</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="guid" Type="System.Guid" />
      </Parameters>
      <Docs>
        <param name="guid">
          <span data-ttu-id="19283-155">GUID de la lista de comandos.</span>
          <span class="sxs-lookup">
            <span data-stu-id="19283-155">The GUID of the command list.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="19283-156">Obtiene la lista de comandos para un GUID determinado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="19283-156">Gets the command list for a given GUID.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="19283-157">
            <see cref="T:System.Collections.ICollection" /> de comandos.</span>
          <span class="sxs-lookup">
            <span data-stu-id="19283-157">An <see cref="T:System.Collections.ICollection" /> of commands.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.ComponentModel.Design.MenuCommand" />
        <altmember cref="T:System.ComponentModel.Design.DesignerVerb" />
        <altmember cref="T:System.ComponentModel.Design.CommandID" />
        <altmember cref="T:System.IServiceProvider" />
      </Docs>
    </Member>
    <Member MemberName="GetService">
      <MemberSignature Language="C#" Value="protected object GetService (Type serviceType);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance object GetService(class System.Type serviceType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.MenuCommandService.GetService(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Protected Function GetService (serviceType As Type) As Object" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; System::Object ^ GetService(Type ^ serviceType);" />
      <MemberSignature Language="F#" Value="member this.GetService : Type -&gt; obj" Usage="menuCommandService.GetService serviceType" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="serviceType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="serviceType">
          <span data-ttu-id="19283-158">
            <see cref="T:System.Type" /> del servicio que se va a recuperar.</span>
          <span class="sxs-lookup">
            <span data-stu-id="19283-158">The <see cref="T:System.Type" /> of the service to retrieve.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="19283-159">Obtiene una referencia sobre el servicio solicitado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="19283-159">Gets a reference to the requested service.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="19283-160">Referencia a <paramref name="serviceType" />; en caso contrario, si no se encuentra el servicio, <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="19283-160">A reference to <paramref name="serviceType" />; otherwise, <see langword="null" /> if the service is not found.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="19283-161">
            <paramref name="serviceType" /> es <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="19283-161">
              <paramref name="serviceType" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <altmember cref="T:System.ComponentModel.Design.MenuCommand" />
        <altmember cref="T:System.ComponentModel.Design.DesignerVerb" />
        <altmember cref="T:System.ComponentModel.Design.CommandID" />
        <altmember cref="T:System.IServiceProvider" />
      </Docs>
    </Member>
    <MemberGroup MemberName="GlobalInvoke">
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="19283-162">Invoca un comando del formulario local o del entorno global.</span>
          <span class="sxs-lookup">
            <span data-stu-id="19283-162">Invokes a command on the local form or in the global environment.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GlobalInvoke">
      <MemberSignature Language="C#" Value="public virtual bool GlobalInvoke (System.ComponentModel.Design.CommandID commandID);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool GlobalInvoke(class System.ComponentModel.Design.CommandID commandID) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.MenuCommandService.GlobalInvoke(System.ComponentModel.Design.CommandID)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool GlobalInvoke(System::ComponentModel::Design::CommandID ^ commandID);" />
      <MemberSignature Language="F#" Value="abstract member GlobalInvoke : System.ComponentModel.Design.CommandID -&gt; bool&#xA;override this.GlobalInvoke : System.ComponentModel.Design.CommandID -&gt; bool" Usage="menuCommandService.GlobalInvoke commandID" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="commandID" Type="System.ComponentModel.Design.CommandID" />
      </Parameters>
      <Docs>
        <param name="commandID">
          <span data-ttu-id="19283-163">Comando al que se va a invocar.</span>
          <span class="sxs-lookup">
            <span data-stu-id="19283-163">The command to invoke.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="19283-164">Invoca al comando especificado en el formulario local o en el entorno global.</span>
          <span class="sxs-lookup">
            <span data-stu-id="19283-164">Invokes the given command on the local form or in the global environment.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="19283-165">
            <see langword="true" /> si se encuentra el comando; en caso contrario, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="19283-165">
              <see langword="true" />, if the command was found; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="19283-166">Primero se busca en el formulario local para el identificador de comando especificado.</span><span class="sxs-lookup"><span data-stu-id="19283-166">The local form is first searched for the given command ID.</span></span> <span data-ttu-id="19283-167">Si se encuentra, se invoca.</span><span class="sxs-lookup"><span data-stu-id="19283-167">If it is found, it is invoked.</span></span> <span data-ttu-id="19283-168">En caso contrario, el identificador de comando se pasa al controlador de comandos de entorno global, si está disponible.</span><span class="sxs-lookup"><span data-stu-id="19283-168">Otherwise, the command ID is passed to the global environment command handler, if one is available.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.ComponentModel.Design.MenuCommand" />
        <altmember cref="T:System.ComponentModel.Design.DesignerVerb" />
        <altmember cref="T:System.ComponentModel.Design.CommandID" />
        <altmember cref="T:System.IServiceProvider" />
      </Docs>
    </Member>
    <Member MemberName="GlobalInvoke">
      <MemberSignature Language="C#" Value="public virtual bool GlobalInvoke (System.ComponentModel.Design.CommandID commandId, object arg);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool GlobalInvoke(class System.ComponentModel.Design.CommandID commandId, object arg) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.MenuCommandService.GlobalInvoke(System.ComponentModel.Design.CommandID,System.Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool GlobalInvoke(System::ComponentModel::Design::CommandID ^ commandId, System::Object ^ arg);" />
      <MemberSignature Language="F#" Value="abstract member GlobalInvoke : System.ComponentModel.Design.CommandID * obj -&gt; bool&#xA;override this.GlobalInvoke : System.ComponentModel.Design.CommandID * obj -&gt; bool" Usage="menuCommandService.GlobalInvoke (commandId, arg)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="commandId" Type="System.ComponentModel.Design.CommandID" />
        <Parameter Name="arg" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="commandId">
          <span data-ttu-id="19283-169">Comando al que se va a invocar.</span>
          <span class="sxs-lookup">
            <span data-stu-id="19283-169">The command to invoke.</span>
          </span>
        </param>
        <param name="arg">
          <span data-ttu-id="19283-170">Parámetro para la invocación.</span>
          <span class="sxs-lookup">
            <span data-stu-id="19283-170">A parameter for the invocation.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="19283-171">Invoca al comando especificado con el parámetro igualmente especificado en el formulario local o en el entorno global.</span>
          <span class="sxs-lookup">
            <span data-stu-id="19283-171">Invokes the given command with the given parameter on the local form or in the global environment.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="19283-172">
            <see langword="true" /> si se encuentra el comando; en caso contrario, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="19283-172">
              <see langword="true" />, if the command was found; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="19283-173">Primero se busca en el formulario local para el identificador de comando especificado.</span><span class="sxs-lookup"><span data-stu-id="19283-173">The local form is first searched for the given command ID.</span></span> <span data-ttu-id="19283-174">Si se encuentra, se invoca.</span><span class="sxs-lookup"><span data-stu-id="19283-174">If it is found, it is invoked.</span></span> <span data-ttu-id="19283-175">En caso contrario, el identificador de comando se pasa al controlador de comandos de entorno global, si está disponible.</span><span class="sxs-lookup"><span data-stu-id="19283-175">Otherwise, the command ID is passed to the global environment command handler, if one is available.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.ComponentModel.Design.MenuCommand" />
        <altmember cref="T:System.ComponentModel.Design.DesignerVerb" />
        <altmember cref="T:System.ComponentModel.Design.CommandID" />
        <altmember cref="T:System.IServiceProvider" />
      </Docs>
    </Member>
    <Member MemberName="MenuCommandsChanged">
      <MemberSignature Language="C#" Value="public event System.ComponentModel.Design.MenuCommandsChangedEventHandler MenuCommandsChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.ComponentModel.Design.MenuCommandsChangedEventHandler MenuCommandsChanged" />
      <MemberSignature Language="DocId" Value="E:System.ComponentModel.Design.MenuCommandService.MenuCommandsChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event MenuCommandsChanged As MenuCommandsChangedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::ComponentModel::Design::MenuCommandsChangedEventHandler ^ MenuCommandsChanged;" />
      <MemberSignature Language="F#" Value="member this.MenuCommandsChanged : System.ComponentModel.Design.MenuCommandsChangedEventHandler " Usage="member this.MenuCommandsChanged : System.ComponentModel.Design.MenuCommandsChangedEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ComponentModel.Design.MenuCommandsChangedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="19283-176">Se produce cuando cambia el estado de un comando de menú.</span>
          <span class="sxs-lookup">
            <span data-stu-id="19283-176">Occurs when the status of a menu command has changed.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="19283-177">Para obtener más información sobre cómo controlar eventos, vea [NIB: consumir eventos](http://msdn.microsoft.com/library/01e4f1bc-e55e-413f-98c7-6588493e5f67).</span><span class="sxs-lookup"><span data-stu-id="19283-177">For more information about handling events, see [NIB: Consuming Events](http://msdn.microsoft.com/library/01e4f1bc-e55e-413f-98c7-6588493e5f67).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnCommandsChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnCommandsChanged (System.ComponentModel.Design.MenuCommandsChangedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnCommandsChanged(class System.ComponentModel.Design.MenuCommandsChangedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.MenuCommandService.OnCommandsChanged(System.ComponentModel.Design.MenuCommandsChangedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnCommandsChanged (e As MenuCommandsChangedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnCommandsChanged(System::ComponentModel::Design::MenuCommandsChangedEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnCommandsChanged : System.ComponentModel.Design.MenuCommandsChangedEventArgs -&gt; unit&#xA;override this.OnCommandsChanged : System.ComponentModel.Design.MenuCommandsChangedEventArgs -&gt; unit" Usage="menuCommandService.OnCommandsChanged e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.ComponentModel.Design.MenuCommandsChangedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="19283-178">Objeto <see cref="T:System.ComponentModel.Design.MenuCommandsChangedEventArgs" /> que contiene los datos del evento.</span>
          <span class="sxs-lookup">
            <span data-stu-id="19283-178">A <see cref="T:System.ComponentModel.Design.MenuCommandsChangedEventArgs" /> that contains the event data.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="19283-179">Genera el evento <see cref="E:System.ComponentModel.Design.MenuCommandService.MenuCommandsChanged" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="19283-179">Raises the <see cref="E:System.ComponentModel.Design.MenuCommandService.MenuCommandsChanged" /> event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="19283-180">El <xref:System.ComponentModel.Design.MenuCommandService.OnCommandsChanged%2A> método se llama mediante un comando de menú cuando ha cambiado su estado.</span><span class="sxs-lookup"><span data-stu-id="19283-180">The <xref:System.ComponentModel.Design.MenuCommandService.OnCommandsChanged%2A> method is called by a menu command when its status has changed.</span></span>  
  
 <span data-ttu-id="19283-181">Cuando se genera un evento, se invoca el controlador de eventos a través de un delegado.</span><span class="sxs-lookup"><span data-stu-id="19283-181">Raising an event invokes the event handler through a delegate.</span></span> <span data-ttu-id="19283-182">Para obtener más información, consulte [controlar y provocar eventos](~/docs/standard/events/index.md).</span><span class="sxs-lookup"><span data-stu-id="19283-182">For more information, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
 <span data-ttu-id="19283-183">El método <xref:System.ComponentModel.Design.MenuCommandService.OnCommandsChanged%2A> también permite que las clases derivadas controlen el evento sin adjuntar ningún delegado.</span><span class="sxs-lookup"><span data-stu-id="19283-183">The <xref:System.ComponentModel.Design.MenuCommandService.OnCommandsChanged%2A> method also allows derived classes to handle the event without attaching a delegate.</span></span> <span data-ttu-id="19283-184">Ésta es la técnica preferida para controlar el evento en una clase derivada.</span><span class="sxs-lookup"><span data-stu-id="19283-184">This is the preferred technique for handling the event in a derived class.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <span data-ttu-id="19283-185">
            <para>Cuando se reemplaza <see cref="M:System.ComponentModel.Design.MenuCommandService.OnCommandsChanged(System.ComponentModel.Design.MenuCommandsChangedEventArgs)" /> en una clase derivada, asegúrese de llamar a la clase base <see cref="M:System.ComponentModel.Design.MenuCommandService.OnCommandsChanged(System.ComponentModel.Design.MenuCommandsChangedEventArgs)" /> método para que los delegados registrados reciban el evento.</para>
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="19283-185">
              <para>When overriding <see cref="M:System.ComponentModel.Design.MenuCommandService.OnCommandsChanged(System.ComponentModel.Design.MenuCommandsChangedEventArgs)" /> in a derived class, be sure to call the base class’s <see cref="M:System.ComponentModel.Design.MenuCommandService.OnCommandsChanged(System.ComponentModel.Design.MenuCommandsChangedEventArgs)" /> method so that registered delegates receive the event.</para>
            </span>
          </span>
        </block>
        <altmember cref="T:System.ComponentModel.Design.MenuCommand" />
        <altmember cref="T:System.ComponentModel.Design.DesignerVerb" />
        <altmember cref="T:System.ComponentModel.Design.CommandID" />
        <altmember cref="T:System.IServiceProvider" />
      </Docs>
    </Member>
    <Member MemberName="RemoveCommand">
      <MemberSignature Language="C#" Value="public virtual void RemoveCommand (System.ComponentModel.Design.MenuCommand command);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RemoveCommand(class System.ComponentModel.Design.MenuCommand command) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.MenuCommandService.RemoveCommand(System.ComponentModel.Design.MenuCommand)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub RemoveCommand (command As MenuCommand)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void RemoveCommand(System::ComponentModel::Design::MenuCommand ^ command);" />
      <MemberSignature Language="F#" Value="abstract member RemoveCommand : System.ComponentModel.Design.MenuCommand -&gt; unit&#xA;override this.RemoveCommand : System.ComponentModel.Design.MenuCommand -&gt; unit" Usage="menuCommandService.RemoveCommand command" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="command" Type="System.ComponentModel.Design.MenuCommand" />
      </Parameters>
      <Docs>
        <param name="command">
          <span data-ttu-id="19283-186">Comando que se va a quitar.</span>
          <span class="sxs-lookup">
            <span data-stu-id="19283-186">The command to remove.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="19283-187">Quita del documento el comando de menú especificado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="19283-187">Removes the given menu command from the document.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="19283-188">Si no hay ningún comando más en el grupo de comandos, se quita el grupo.</span><span class="sxs-lookup"><span data-stu-id="19283-188">If there are no more commands in the command group, the group is removed.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="19283-189">
            <paramref name="command" /> es <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="19283-189">
              <paramref name="command" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <altmember cref="T:System.ComponentModel.Design.MenuCommand" />
        <altmember cref="T:System.ComponentModel.Design.DesignerVerb" />
        <altmember cref="T:System.ComponentModel.Design.CommandID" />
        <altmember cref="T:System.IServiceProvider" />
      </Docs>
    </Member>
    <Member MemberName="RemoveVerb">
      <MemberSignature Language="C#" Value="public virtual void RemoveVerb (System.ComponentModel.Design.DesignerVerb verb);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RemoveVerb(class System.ComponentModel.Design.DesignerVerb verb) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.MenuCommandService.RemoveVerb(System.ComponentModel.Design.DesignerVerb)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub RemoveVerb (verb As DesignerVerb)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void RemoveVerb(System::ComponentModel::Design::DesignerVerb ^ verb);" />
      <MemberSignature Language="F#" Value="abstract member RemoveVerb : System.ComponentModel.Design.DesignerVerb -&gt; unit&#xA;override this.RemoveVerb : System.ComponentModel.Design.DesignerVerb -&gt; unit" Usage="menuCommandService.RemoveVerb verb" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="verb" Type="System.ComponentModel.Design.DesignerVerb" />
      </Parameters>
      <Docs>
        <param name="verb">
          <span data-ttu-id="19283-190">Verbo que se va a quitar.</span>
          <span class="sxs-lookup">
            <span data-stu-id="19283-190">The verb to remove.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="19283-191">Quita del documento el verbo especificado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="19283-191">Removes the given verb from the document.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="19283-192">
            <paramref name="verb" /> es <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="19283-192">
              <paramref name="verb" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <altmember cref="T:System.ComponentModel.Design.MenuCommand" />
        <altmember cref="T:System.ComponentModel.Design.DesignerVerb" />
        <altmember cref="T:System.ComponentModel.Design.CommandID" />
        <altmember cref="T:System.IServiceProvider" />
      </Docs>
    </Member>
    <Member MemberName="ShowContextMenu">
      <MemberSignature Language="C#" Value="public virtual void ShowContextMenu (System.ComponentModel.Design.CommandID menuID, int x, int y);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ShowContextMenu(class System.ComponentModel.Design.CommandID menuID, int32 x, int32 y) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.MenuCommandService.ShowContextMenu(System.ComponentModel.Design.CommandID,System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub ShowContextMenu (menuID As CommandID, x As Integer, y As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void ShowContextMenu(System::ComponentModel::Design::CommandID ^ menuID, int x, int y);" />
      <MemberSignature Language="F#" Value="abstract member ShowContextMenu : System.ComponentModel.Design.CommandID * int * int -&gt; unit&#xA;override this.ShowContextMenu : System.ComponentModel.Design.CommandID * int * int -&gt; unit" Usage="menuCommandService.ShowContextMenu (menuID, x, y)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="menuID" Type="System.ComponentModel.Design.CommandID" />
        <Parameter Name="x" Type="System.Int32" />
        <Parameter Name="y" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="menuID">
          <span data-ttu-id="19283-193">Menú contextual que se va a mostrar.</span>
          <span class="sxs-lookup">
            <span data-stu-id="19283-193">The shortcut menu to display.</span>
          </span>
        </param>
        <param name="x">
          <span data-ttu-id="19283-194">Coordenada x de la ubicación del menú contextual.</span>
          <span class="sxs-lookup">
            <span data-stu-id="19283-194">The x-coordinate of the shortcut menu's location.</span>
          </span>
        </param>
        <param name="y">
          <span data-ttu-id="19283-195">Coordenada y de la ubicación del menú contextual.</span>
          <span class="sxs-lookup">
            <span data-stu-id="19283-195">The y-coordinate of the shortcut menu's location.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="19283-196">Muestra el menú contextual con el identificador de comandos especificado en la ubicación indicada.</span>
          <span class="sxs-lookup">
            <span data-stu-id="19283-196">Shows the shortcut menu with the given command ID at the given location.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="19283-197">La implementación predeterminada no hace nada.</span><span class="sxs-lookup"><span data-stu-id="19283-197">The default implementation does nothing.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.ComponentModel.Design.MenuCommand" />
        <altmember cref="T:System.ComponentModel.Design.DesignerVerb" />
        <altmember cref="T:System.ComponentModel.Design.CommandID" />
        <altmember cref="T:System.IServiceProvider" />
      </Docs>
    </Member>
    <Member MemberName="Verbs">
      <MemberSignature Language="C#" Value="public virtual System.ComponentModel.Design.DesignerVerbCollection Verbs { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.ComponentModel.Design.DesignerVerbCollection Verbs" />
      <MemberSignature Language="DocId" Value="P:System.ComponentModel.Design.MenuCommandService.Verbs" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property Verbs As DesignerVerbCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::ComponentModel::Design::DesignerVerbCollection ^ Verbs { System::ComponentModel::Design::DesignerVerbCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Verbs : System.ComponentModel.Design.DesignerVerbCollection" Usage="System.ComponentModel.Design.MenuCommandService.Verbs" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ComponentModel.Design.DesignerVerbCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="19283-198">Obtiene una colección de los verbos de diseñador que están disponibles actualmente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="19283-198">Gets a collection of the designer verbs that are currently available.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="19283-199">Objeto <see cref="T:System.ComponentModel.Design.DesignerVerbCollection" /> de los verbos de diseñador que están disponibles actualmente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="19283-199">A <see cref="T:System.ComponentModel.Design.DesignerVerbCollection" /> of the designer verbs that are currently available.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="19283-200">El <xref:System.ComponentModel.Design.MenuCommandService.Verbs%2A> propiedad proporciona una colección de verbos.</span><span class="sxs-lookup"><span data-stu-id="19283-200">The <xref:System.ComponentModel.Design.MenuCommandService.Verbs%2A> property provides a collection of verbs.</span></span> <span data-ttu-id="19283-201">Estos verbos proceden de dos lugares:</span><span class="sxs-lookup"><span data-stu-id="19283-201">These verbs come from two places:</span></span>  
  
-   <span data-ttu-id="19283-202">Los verbos que se agregan mediante el <xref:System.ComponentModel.Design.MenuCommandService.AddVerb%2A> método <xref:System.ComponentModel.Design.MenuCommandService.Verbs%2A>.</span><span class="sxs-lookup"><span data-stu-id="19283-202">Verbs added through the <xref:System.ComponentModel.Design.MenuCommandService.AddVerb%2A> method of <xref:System.ComponentModel.Design.MenuCommandService.Verbs%2A>.</span></span>  
  
-   <span data-ttu-id="19283-203">Verbos proporcionados por el diseñador actualmente seleccionado.</span><span class="sxs-lookup"><span data-stu-id="19283-203">Verbs offered by the currently selected designer.</span></span>  
  
 <span data-ttu-id="19283-204">Verbos agregados a este servicio a través de la <xref:System.ComponentModel.Design.MenuCommandService.AddVerb%2A> verbos globales se llama al método porque son globales para este servicio, pero por lo general, hay una instancia de este servicio para cada ventana de herramientas o documento.</span><span class="sxs-lookup"><span data-stu-id="19283-204">Verbs added to this service through the <xref:System.ComponentModel.Design.MenuCommandService.AddVerb%2A> method are called global verbs because they are global to this service, but generally there is one instance of this service for each tool or document window.</span></span> <span data-ttu-id="19283-205">Verbos de diseñador se obtienen consultando el proveedor de servicios para <xref:System.ComponentModel.Design.IDesignerHost> y <xref:System.ComponentModel.Design.ISelectionService>.</span><span class="sxs-lookup"><span data-stu-id="19283-205">Designer verbs are obtained by querying the service provider for <xref:System.ComponentModel.Design.IDesignerHost> and <xref:System.ComponentModel.Design.ISelectionService>.</span></span> <span data-ttu-id="19283-206">Si el servicio de selección ofrece una selección primaria y se puede obtener un diseñador para esa selección desde <xref:System.ComponentModel.Design.IDesignerHost>, verbos del diseñador se agregan a esta lista.</span><span class="sxs-lookup"><span data-stu-id="19283-206">If the selection service offers a primary selection, and a designer can be obtained for that selection from <xref:System.ComponentModel.Design.IDesignerHost>, the designer’s verbs are added to this list.</span></span> <span data-ttu-id="19283-207">Si el nombre de un verbo global entra en conflicto con el nombre de un verbo de diseñador, el verbo de diseñador proporcionado por el diseñador tiene prioridad.</span><span class="sxs-lookup"><span data-stu-id="19283-207">If the name of a global verb conflicts with the name of a designer verb, the designer-provided designer verb takes precedence.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.ComponentModel.Design.MenuCommand" />
        <altmember cref="T:System.ComponentModel.Design.DesignerVerb" />
        <altmember cref="T:System.ComponentModel.Design.CommandID" />
        <altmember cref="T:System.IServiceProvider" />
      </Docs>
    </Member>
  </Members>
</Type>