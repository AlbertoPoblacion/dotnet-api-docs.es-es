<Type Name="DesignerActionService" FullName="System.ComponentModel.Design.DesignerActionService">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="88aef9e8c4732cac7db903011c2c029fe5358c95" />
    <Meta Name="ms.sourcegitcommit" Value="5a49536d99d2d0b54e4cb7280870903e043272df" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="es-ES" />
    <Meta Name="ms.lasthandoff" Value="07/03/2018" />
    <Meta Name="ms.locfileid" Value="37696848" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class DesignerActionService : IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit DesignerActionService extends System.Object implements class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.ComponentModel.Design.DesignerActionService" />
  <TypeSignature Language="VB.NET" Value="Public Class DesignerActionService&#xA;Implements IDisposable" />
  <TypeSignature Language="C++ CLI" Value="public ref class DesignerActionService : IDisposable" />
  <TypeSignature Language="F#" Value="type DesignerActionService = class&#xA;    interface IDisposable" />
  <AssemblyInfo>
    <AssemblyName>System.Design</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>Establece un servicio en tiempo de diseño que administra la colección de objetos <see cref="T:System.ComponentModel.Design.DesignerActionItem" /> para componentes.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.ComponentModel.Design.DesignerActionService> clase es responsable de administrar la colección de <xref:System.ComponentModel.Design.DesignerActionItem> objetos para cada instancia de un componente que existe en un formulario en tiempo de diseño. Esta clase permite un modelo de inserción directa de creación del elemento y sirve principalmente para su uso por los desarrolladores de herramientas de tiempo de diseño, aunque también puede usarse por componente y los desarrolladores de controles personalizados.  
  
 Los desarrolladores de herramientas de tiempo de diseño debe determinar la lista de elementos para mostrar para un componente y determinar cuándo cambia esta lista. También pueden crear complementos que funcionan junto con objetos del panel de etiquetas inteligentes.  
  
 Advanced componente desarrolladores pueden necesitar controlar dinámicamente los elementos asociados con un componente, por lo tanto, reemplazar o complementar el modelo de extracción estándar. Por ejemplo, los comandos del panel se pueden modificar según el contexto de su uso y el estado de tiempo de diseño del componente.  
  
> [!NOTE]
>  El <xref:System.ComponentModel.Design.DesignerActionService> es realmente el servicio impulsora detrás de los modelos de extracción e inserción; sin embargo, en el último caso funciona de forma implícita.  
  
 <xref:System.ComponentModel.Design.DesignerActionService> Proporciona una interfaz sencilla para obtener acceso y manipular los elementos de cada componente, incluidos los siguientes métodos y eventos:  
  
-   El <xref:System.ComponentModel.Design.DesignerActionService.Contains%2A> método determina si el <xref:System.ComponentModel.Design.DesignerActionService> está administrando actualmente un determinado componente.  
  
-   El <xref:System.ComponentModel.Design.DesignerActionService.GetComponentActions%2A> método es compatible con la enumeración de las listas de elementos.  
  
-   El <xref:System.ComponentModel.Design.DesignerActionService.Add%2A> método permite agregar un <xref:System.ComponentModel.Design.DesignerActionList> o <xref:System.ComponentModel.Design.DesignerActionListCollection> al conjunto de elementos existentes para una instancia del componente. En cambio, el <xref:System.ComponentModel.Design.DesignerActionService.Remove%2A> método quita una o todas las listas de elementos asociadas a un componente.  
  
    > [!NOTE]
    >  El <xref:System.ComponentModel.Design.DesignerActionService.Add%2A> método representa el modelo de inserción directa de asociación de los elementos del panel con un componente. En cambio, el modelo de extracción consiste en reemplazar el <xref:System.ComponentModel.Design.ComponentDesigner.ActionLists%2A> propiedad de la clase de diseñador para ese componente. El entorno de diseño es responsable de agregar estos elementos en el actual <xref:System.ComponentModel.Design.DesignerActionService> cuando se crea un componente en la superficie de diseño.  
  
    > [!IMPORTANT]
    >  El <xref:System.ComponentModel.Design.DesignerActionService.Add%2A>, <xref:System.ComponentModel.Design.DesignerActionService.Remove%2A>, <xref:System.ComponentModel.Design.DesignerActionService.Contains%2A>, y <xref:System.ComponentModel.Design.DesignerActionService.Clear%2A> métodos sólo considere o afecta a los elementos de modelo de inserción.  
  
-   El <xref:System.ComponentModel.Design.DesignerActionService.DesignerActionListsChanged> evento indica cuándo cambia la colección de elementos de un componente.  
  
 Dado que a menudo es deseable utilizar algunos de los mismos elementos de panel en el menú contextual en tiempo de diseño del componente y su panel, existe un alto grado de interoperabilidad entre <xref:System.ComponentModel.Design.DesignerActionItem> objetos y verbos de diseñador.  
  
 Si no especifica explícitamente un diseñador de componentes un <xref:System.ComponentModel.Design.DesignerActionList> (es decir, no tiene un invalidado <xref:System.ComponentModel.Design.ComponentDesigner.ActionLists%2A> propiedad), a continuación, se creará una lista de verbos del diseñador existentes. Estos verbos especificados por el <xref:System.ComponentModel.Design.ComponentDesigner.Verbs%2A> propiedad. En este caso, se usa una clase de lista de verbos interna para contener la colección de entradas en el panel elemento verbo.  
  
 Si desea que un <xref:System.ComponentModel.Design.DesignerActionMethodItem> para usarse como una entrada en el panel y una entrada de menú contextual en tiempo de diseño, puede establecer el `includeAsDesignerVerb` parámetro del constructor del elemento.  
  
 Use la <xref:System.ComponentModel.Design.DesignerActionUIService> para controlar la presentación de su diseñador <xref:System.ComponentModel.Design.ComponentDesigner.ActionLists%2A>.  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.ComponentModel.Design.DesignerActionListCollection" />
    <altmember cref="T:System.ComponentModel.Design.ComponentDesigner" />
    <altmember cref="T:System.ComponentModel.Design.DesignerActionItem" />
    <altmember cref="T:System.ComponentModel.Design.DesignerActionUIService" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DesignerActionService (IServiceProvider serviceProvider);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.IServiceProvider serviceProvider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.DesignerActionService.#ctor(System.IServiceProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (serviceProvider As IServiceProvider)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DesignerActionService(IServiceProvider ^ serviceProvider);" />
      <MemberSignature Language="F#" Value="new System.ComponentModel.Design.DesignerActionService : IServiceProvider -&gt; System.ComponentModel.Design.DesignerActionService" Usage="new System.ComponentModel.Design.DesignerActionService serviceProvider" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="serviceProvider" Type="System.IServiceProvider" />
      </Parameters>
      <Docs>
        <param name="serviceProvider">Proveedor de servicios para el entorno actual en tiempo de diseño.</param>
        <summary>Inicializa una nueva instancia de la clase <see cref="T:System.ComponentModel.Design.DesignerActionService" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Un proveedor de servicios es necesario para la supervisión de selección y cambios en los componentes. Se espera para admitir la <xref:System.ComponentModel.Design.IDesignerHost> y <xref:System.ComponentModel.Design.IComponentChangeService> tipos. El <xref:System.ComponentModel.Design.DesignerActionService> clase utiliza una tabla interna para administrar componentes y sus asociados <xref:System.ComponentModel.Design.DesignerActionList> etiquetas inteligentes.  
  
 Normalmente, los desarrolladores de componentes no necesitará crear una instancia de esta clase. en su lugar, puede adquirir una instancia existente mediante una llamada a la <xref:System.ComponentModel.Component.GetService%2A?displayProperty=nameWithType> método.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.ComponentModel.Design.DesignerActionService.Dispose" />
        <altmember cref="T:System.ComponentModel.Design.IDesignerHost" />
        <altmember cref="T:System.ComponentModel.Design.IComponentChangeService" />
        <altmember cref="M:System.ComponentModel.Component.GetService(System.Type)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Add">
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Agrega uno o varios objetos <see cref="T:System.ComponentModel.Design.DesignerActionList" /> a la colección actual de etiquetas inteligentes administradas.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public void Add (System.ComponentModel.IComponent comp, System.ComponentModel.Design.DesignerActionList actionList);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Add(class System.ComponentModel.IComponent comp, class System.ComponentModel.Design.DesignerActionList actionList) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.DesignerActionService.Add(System.ComponentModel.IComponent,System.ComponentModel.Design.DesignerActionList)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Add (comp As IComponent, actionList As DesignerActionList)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Add(System::ComponentModel::IComponent ^ comp, System::ComponentModel::Design::DesignerActionList ^ actionList);" />
      <MemberSignature Language="F#" Value="member this.Add : System.ComponentModel.IComponent * System.ComponentModel.Design.DesignerActionList -&gt; unit" Usage="designerActionService.Add (comp, actionList)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="comp" Type="System.ComponentModel.IComponent" />
        <Parameter Name="actionList" Type="System.ComponentModel.Design.DesignerActionList" />
      </Parameters>
      <Docs>
        <param name="comp">Interfaz <see cref="T:System.ComponentModel.IComponent" /> que se va a asociar a las etiquetas inteligentes.</param>
        <param name="actionList">Objeto <see cref="T:System.ComponentModel.Design.DesignerActionList" /> que contiene los nuevos elementos de etiqueta inteligente que se van a agregar.</param>
        <summary>Agrega un objeto <see cref="T:System.ComponentModel.Design.DesignerActionList" /> a la colección actual de etiquetas inteligentes administradas.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.ComponentModel.Design.DesignerActionService.Add%2A> método representa el modelo de inserción de agregar elementos de etiqueta inteligente. El modelo de extracción alternativo consiste en reemplazar el <xref:System.ComponentModel.Design.ComponentDesigner.ActionLists%2A> propiedad en el diseñador para el componente correspondiente.  
  
 Cuando se llama a este método, se examinan las listas que se va a agregar para cualquier <xref:System.ComponentModel.Design.DesignerActionMethodItem> con el <xref:System.ComponentModel.Design.DesignerActionMethodItem.IncludeAsDesignerVerb%2A> propiedad establecida en `true`. Estos elementos se agregan a la lista de verbos de diseñador para este componente, mediante una llamada a la <xref:System.ComponentModel.Design.MenuCommandService.AddVerb%2A?displayProperty=nameWithType> método.  
  
 Las etiquetas inteligentes se administran en una base de la instancia de componente. La colección administrada puede contener entradas duplicadas.  
  
 Este método provoca la <xref:System.ComponentModel.Design.DesignerActionService.DesignerActionListsChanged> eventos.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Uno o ambos parámetros son <see langword="null" />.</exception>
        <altmember cref="T:System.ComponentModel.Design.DesignerActionList" />
        <altmember cref="P:System.ComponentModel.Design.ComponentDesigner.ActionLists" />
        <altmember cref="Overload:System.ComponentModel.Design.DesignerActionService.Remove" />
        <altmember cref="M:System.ComponentModel.Design.DesignerActionService.Contains(System.ComponentModel.IComponent)" />
      </Docs>
    </Member>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public void Add (System.ComponentModel.IComponent comp, System.ComponentModel.Design.DesignerActionListCollection designerActionListCollection);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Add(class System.ComponentModel.IComponent comp, class System.ComponentModel.Design.DesignerActionListCollection designerActionListCollection) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.DesignerActionService.Add(System.ComponentModel.IComponent,System.ComponentModel.Design.DesignerActionListCollection)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Add(System::ComponentModel::IComponent ^ comp, System::ComponentModel::Design::DesignerActionListCollection ^ designerActionListCollection);" />
      <MemberSignature Language="F#" Value="member this.Add : System.ComponentModel.IComponent * System.ComponentModel.Design.DesignerActionListCollection -&gt; unit" Usage="designerActionService.Add (comp, designerActionListCollection)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="comp" Type="System.ComponentModel.IComponent" />
        <Parameter Name="designerActionListCollection" Type="System.ComponentModel.Design.DesignerActionListCollection" />
      </Parameters>
      <Docs>
        <param name="comp">Interfaz <see cref="T:System.ComponentModel.IComponent" /> que se va a asociar a las etiquetas inteligentes.</param>
        <param name="designerActionListCollection">Objeto <see cref="T:System.ComponentModel.Design.DesignerActionListCollection" /> que contiene los nuevos elementos de etiqueta inteligente que se van a agregar.</param>
        <summary>Agrega un objeto <see cref="T:System.ComponentModel.Design.DesignerActionListCollection" /> a la colección actual de etiquetas inteligentes administradas.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.ComponentModel.Design.DesignerActionService.Add%2A> método representa el modelo de inserción de agregar elementos de etiqueta inteligente. El modelo de extracción alternativo consiste en reemplazar el <xref:System.ComponentModel.Design.ComponentDesigner.ActionLists%2A> propiedad en el diseñador para el componente correspondiente.  
  
 Cuando se llama a este método, se examinan las listas que se va a agregar para cualquier <xref:System.ComponentModel.Design.DesignerActionMethodItem> con el <xref:System.ComponentModel.Design.DesignerActionMethodItem.IncludeAsDesignerVerb%2A> propiedad establecida en `true`. Estos elementos se agregan a la lista de verbos de diseñador para este componente, mediante una llamada a la <xref:System.ComponentModel.Design.MenuCommandService.AddVerb%2A?displayProperty=nameWithType> método.  
  
 Las etiquetas inteligentes se administran en una base de la instancia de componente. La colección administrada puede contener entradas duplicadas.  
  
 Este método provoca la <xref:System.ComponentModel.Design.DesignerActionService.DesignerActionListsChanged> eventos.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Uno o ambos parámetros son <see langword="null" />.</exception>
        <altmember cref="T:System.ComponentModel.Design.DesignerActionList" />
        <altmember cref="P:System.ComponentModel.Design.ComponentDesigner.ActionLists" />
        <altmember cref="Overload:System.ComponentModel.Design.DesignerActionService.Remove" />
        <altmember cref="M:System.ComponentModel.Design.DesignerActionService.Contains(System.ComponentModel.IComponent)" />
      </Docs>
    </Member>
    <Member MemberName="Clear">
      <MemberSignature Language="C#" Value="public void Clear ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Clear() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.DesignerActionService.Clear" />
      <MemberSignature Language="VB.NET" Value="Public Sub Clear ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Clear();" />
      <MemberSignature Language="F#" Value="member this.Clear : unit -&gt; unit" Usage="designerActionService.Clear " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Libera todos los componentes de la administración y borra todas las listas de etiquetas inteligentes de modelo de inserción.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.ComponentModel.Design.DesignerActionService.Clear%2A> método vacía la tabla interna que se utiliza para almacenar información acerca de los componentes y su modelo de inserción de listas de etiquetas inteligentes.  
  
> [!CAUTION]
>  Dado que este método afecta a todos los componentes administrados por el servicio actual y no solo el componente actual, este método se debe utilizar con prudencia. Normalmente, el desarrollador de la herramienta de tiempo de diseño usa cuando se restablece una superficie de diseño. Los desarrolladores de componentes deben usar uno de los <xref:System.ComponentModel.Design.DesignerActionService.Remove%2A> métodos en su lugar para quitar la etiqueta inteligente individual elementos o listas.  
  
 Un <xref:System.ComponentModel.Design.DesignerActionService.DesignerActionListsChanged> evento se desencadena para cada componente que anteriormente estaba administrada por el servicio actual.  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:System.ComponentModel.Design.DesignerActionService.Remove" />
      </Docs>
    </Member>
    <Member MemberName="Contains">
      <MemberSignature Language="C#" Value="public bool Contains (System.ComponentModel.IComponent comp);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Contains(class System.ComponentModel.IComponent comp) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.DesignerActionService.Contains(System.ComponentModel.IComponent)" />
      <MemberSignature Language="VB.NET" Value="Public Function Contains (comp As IComponent) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Contains(System::ComponentModel::IComponent ^ comp);" />
      <MemberSignature Language="F#" Value="member this.Contains : System.ComponentModel.IComponent -&gt; bool" Usage="designerActionService.Contains comp" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="comp" Type="System.ComponentModel.IComponent" />
      </Parameters>
      <Docs>
        <param name="comp">
          <see cref="T:System.ComponentModel.IComponent" /> que se va a buscar.</param>
        <summary>Determina si el servicio actual de etiquetas inteligentes administra las listas de acciones para el componente especificado.</summary>
        <returns>
          <see langword="true" /> si el servicio actual administra el componente; de lo contrario, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.ComponentModel.Design.DesignerActionService.Contains%2A> método sólo reconoce etiquetas inteligentes del modelo de inserción, que están asociadas a un componente con el <xref:System.ComponentModel.Design.DesignerActionService.Add%2A> método.  
  
 Aunque no hay ninguna limitación estructural en el número de simultáneas <xref:System.ComponentModel.Design.DesignerActionService> instancias creadas por una herramienta en tiempo de diseño, normalmente una sola instancia del servicio se crea por la superficie de diseño.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="comp" /> es <see langword="null" />.</exception>
        <altmember cref="Overload:System.ComponentModel.Design.DesignerActionService.Add" />
        <altmember cref="Overload:System.ComponentModel.Design.DesignerActionService.Remove" />
      </Docs>
    </Member>
    <Member MemberName="DesignerActionListsChanged">
      <MemberSignature Language="C#" Value="public event System.ComponentModel.Design.DesignerActionListsChangedEventHandler DesignerActionListsChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.ComponentModel.Design.DesignerActionListsChangedEventHandler DesignerActionListsChanged" />
      <MemberSignature Language="DocId" Value="E:System.ComponentModel.Design.DesignerActionService.DesignerActionListsChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event DesignerActionListsChanged As DesignerActionListsChangedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::ComponentModel::Design::DesignerActionListsChangedEventHandler ^ DesignerActionListsChanged;" />
      <MemberSignature Language="F#" Value="member this.DesignerActionListsChanged : System.ComponentModel.Design.DesignerActionListsChangedEventHandler " Usage="member this.DesignerActionListsChanged : System.ComponentModel.Design.DesignerActionListsChangedEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ComponentModel.Design.DesignerActionListsChangedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Se produce cuando se quita o agrega un objeto <see cref="T:System.ComponentModel.Design.DesignerActionList" /> para cualquier componente.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 En la tabla siguiente se muestra el conjunto de clases especializadas asociadas a la <xref:System.ComponentModel.Design.DesignerActionService.DesignerActionListsChanged> eventos.  
  
|Tipo especializado|Descripción|  
|----------------------|-----------------|  
|<xref:System.ComponentModel.Design.DesignerActionListsChangedEventArgs>|Agrega información concreta para la administración de la lista de etiquetas inteligentes. Esta clase está especializada en <xref:System.EventArgs>.|  
|<xref:System.ComponentModel.Design.DesignerActionListsChangedEventHandler>|Se conecta el <xref:System.ComponentModel.Design.DesignerActionListsChangedEventArgs> con su controlador.|  
|<xref:System.ComponentModel.Design.DesignerActionListsChangedType>|Indica si se agregó o quitó una lista.|  
  
 Para obtener más información sobre cómo controlar eventos, vea [NIB: consumir eventos](http://msdn.microsoft.com/library/01e4f1bc-e55e-413f-98c7-6588493e5f67).  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.ComponentModel.Design.DesignerActionListsChangedEventArgs" />
        <altmember cref="T:System.ComponentModel.Design.DesignerActionListsChangedType" />
        <altmember cref="T:System.ComponentModel.Design.DesignerActionListsChangedEventHandler" />
        <altmember cref="Overload:System.ComponentModel.Design.DesignerActionService.Add" />
        <altmember cref="Overload:System.ComponentModel.Design.DesignerActionService.Remove" />
        <altmember cref="M:System.ComponentModel.Design.DesignerActionService.Clear" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Dispose">
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Libera los recursos que usa <see cref="T:System.ComponentModel.Design.DesignerActionService" />.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.DesignerActionService.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Dispose();" />
      <MemberSignature Language="F#" Value="abstract member Dispose : unit -&gt; unit&#xA;override this.Dispose : unit -&gt; unit" Usage="designerActionService.Dispose " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Libera todos los recursos que utiliza la clase <see cref="T:System.ComponentModel.Design.DesignerActionService" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.ComponentModel.Design.DesignerActionService.Dispose%2A> método es la implementación del método solo asignada por el <xref:System.IDisposable> interfaz. Hay que llamar a este método cuando se deja de utilizar el objeto <xref:System.ComponentModel.Design.DesignerActionService>. Realiza dos acciones principales:  
  
-   Quita el servicio actual de la lista de servicios disponibles en el entorno de diseño a través de una llamada a la <xref:System.ComponentModel.Design.IServiceContainer.RemoveService%2A> método.  
  
-   Cancela la suscripción a eventos de cambio de componente de asociado <xref:System.ComponentModel.Design.IComponentChangeService> interfaz.  
  
 Llame a <xref:System.ComponentModel.Design.DesignerActionService.Dispose%2A> cuando haya terminado de usar <xref:System.ComponentModel.Design.DesignerActionService>. El método <xref:System.ComponentModel.Design.DesignerActionService.Dispose%2A> deja el <xref:System.ComponentModel.Design.DesignerActionService> en un estado no utilizable. Después de llamar a <xref:System.ComponentModel.Design.DesignerActionService.Dispose%2A>, debe liberar todas las referencias a la <xref:System.ComponentModel.Design.DesignerActionService> por lo que el recolector de elementos no utilizados pueda reclamar la memoria que el <xref:System.ComponentModel.Design.DesignerActionService> estaba ocupando. Para obtener más información, consulte [limpiar recursos no administrados](~/docs/standard/garbage-collection/unmanaged.md) y [implementar un método Dispose](~/docs/standard/garbage-collection/implementing-dispose.md).  
  
> [!NOTE]
>  Realice siempre una llamada a <xref:System.ComponentModel.Design.DesignerActionService.Dispose%2A> antes de liberar la última referencia al objeto <xref:System.ComponentModel.Design.DesignerActionService>. En caso contrario, los recursos que está usando no se liberarán hasta que el recolector de elementos no utilizados llame al método <xref:System.ComponentModel.Design.DesignerActionService> del objeto `Finalize`.  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:System.ComponentModel.Design.IServiceContainer.RemoveService" />
        <altmember cref="T:System.ComponentModel.Design.IComponentChangeService" />
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected virtual void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.DesignerActionService.Dispose(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub Dispose (disposing As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void Dispose(bool disposing);" />
      <MemberSignature Language="F#" Value="abstract member Dispose : bool -&gt; unit&#xA;override this.Dispose : bool -&gt; unit" Usage="designerActionService.Dispose disposing" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing">Es <see langword="true" /> para liberar tanto recursos administrados como no administrados; es <see langword="false" /> para liberar únicamente recursos no administrados.</param>
        <summary>Libera los recursos no administrados que usa <see cref="T:System.ComponentModel.Design.DesignerActionService" /> y, de forma opcional, libera los recursos administrados.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.ComponentModel.Design.DesignerActionService.Dispose%2A> método es la implementación del método solo asignada por el <xref:System.IDisposable> interfaz. Hay que llamar a este método cuando se deja de utilizar el objeto <xref:System.ComponentModel.Design.DesignerActionService>. Realiza dos acciones principales:  
  
-   Quita el servicio actual de la lista de servicios disponibles en el entorno de diseño a través de una llamada a la <xref:System.ComponentModel.Design.IServiceContainer.RemoveService%2A> método.  
  
-   Cancela la suscripción a eventos de cambio de componente de asociado <xref:System.ComponentModel.Design.IComponentChangeService> interfaz.  
  
 Este método se llama por el público `Dispose()` método y el <xref:System.Object.Finalize%2A> método. `Dispose()` invoca el protegido `Dispose(Boolean)` método con el `disposing` parámetro establecido en `true`. <xref:System.Object.Finalize%2A> invoca `Dispose` con `disposing` establecido en `false`.  
  
 Cuando el parámetro `disposing` es `true`, este método libera todos los recursos retenidos por los objetos administrados a los que el control <xref:System.ComponentModel.Design.DesignerActionService> hace referencia. Este método invoca al método `Dispose()` de cada uno de los objetos a los que se hace referencia.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>
            <see langword="Dispose" /> puede llamarse varias veces por otros objetos. Cuando se reemplaza <see langword="Dispose(Boolean)" /> tenga cuidado de no hacer referencia a objetos que se hayan eliminado en una llamada anterior a <see langword="Dispose" />. Para obtener más información sobre cómo implementar <see langword="Dispose(Boolean)" />, vea [implementar un Method](~/docs/standard/garbage-collection/implementing-dispose.md) Dispose.  Para obtener más información acerca de <see langword="Dispose" /> y <see cref="M:System.Object.Finalize" />, consulte [limpieza de Resources](~/docs/standard/garbage-collection/unmanaged.md) no administrado y [reemplazando el método Finalize] (http://msdn.microsoft.com/library/8026cb68-fe93-43fc-96c1-c09ad7d64cd3).</para>
        </block>
        <altmember cref="Overload:System.ComponentModel.Design.IServiceContainer.RemoveService" />
        <altmember cref="T:System.ComponentModel.Design.IComponentChangeService" />
      </Docs>
    </Member>
    <MemberGroup MemberName="GetComponentActions">
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Devuelve la colección de listas de elementos de etiqueta inteligente asociados a un componente.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetComponentActions">
      <MemberSignature Language="C#" Value="public System.ComponentModel.Design.DesignerActionListCollection GetComponentActions (System.ComponentModel.IComponent component);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.ComponentModel.Design.DesignerActionListCollection GetComponentActions(class System.ComponentModel.IComponent component) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.DesignerActionService.GetComponentActions(System.ComponentModel.IComponent)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetComponentActions (component As IComponent) As DesignerActionListCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::ComponentModel::Design::DesignerActionListCollection ^ GetComponentActions(System::ComponentModel::IComponent ^ component);" />
      <MemberSignature Language="F#" Value="member this.GetComponentActions : System.ComponentModel.IComponent -&gt; System.ComponentModel.Design.DesignerActionListCollection" Usage="designerActionService.GetComponentActions component" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ComponentModel.Design.DesignerActionListCollection</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="component" Type="System.ComponentModel.IComponent" />
      </Parameters>
      <Docs>
        <param name="component">Componente al que están asociadas las etiquetas inteligentes.</param>
        <summary>Devuelve la colección de listas de elementos de etiqueta inteligente asociados a un componente.</summary>
        <returns>Colección de etiquetas inteligentes para el componente especificado.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.ComponentModel.Design.DesignerActionService.GetComponentActions%2A> es equivalente a una llamada al método el <xref:System.ComponentModel.Design.DesignerActionService.GetComponentActions%28System.ComponentModel.IComponent%2CSystem.ComponentModel.Design.ComponentActionsType%29> método mediante un `type` parámetro de <xref:System.ComponentModel.Design.ComponentActionsType.All>. Por lo tanto, la colección devuelta contendrá las listas de inserción y extracción de etiquetas inteligentes.  
  
 El valor devuelto <xref:System.ComponentModel.Design.DesignerActionListCollection> es la unión de las listas de elementos que se agregan a través de la <xref:System.ComponentModel.Design.DesignerActionService.Add%2A> obtienen de los métodos así como las listas de la <xref:System.ComponentModel.Design.DesignerCommandSet> instancia obtenida al sitio del componente.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="comp" /> es <see langword="null" />.</exception>
        <altmember cref="M:System.ComponentModel.Design.DesignerActionService.GetComponentDesignerActions(System.ComponentModel.IComponent,System.ComponentModel.Design.DesignerActionListCollection)" />
        <altmember cref="M:System.ComponentModel.Design.DesignerActionService.GetComponentServiceActions(System.ComponentModel.IComponent,System.ComponentModel.Design.DesignerActionListCollection)" />
        <altmember cref="Overload:System.ComponentModel.Design.DesignerActionService.Add" />
        <altmember cref="T:System.ComponentModel.Design.DesignerCommandSet" />
      </Docs>
    </Member>
    <Member MemberName="GetComponentActions">
      <MemberSignature Language="C#" Value="public virtual System.ComponentModel.Design.DesignerActionListCollection GetComponentActions (System.ComponentModel.IComponent component, System.ComponentModel.Design.ComponentActionsType type);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.ComponentModel.Design.DesignerActionListCollection GetComponentActions(class System.ComponentModel.IComponent component, valuetype System.ComponentModel.Design.ComponentActionsType type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.DesignerActionService.GetComponentActions(System.ComponentModel.IComponent,System.ComponentModel.Design.ComponentActionsType)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetComponentActions (component As IComponent, type As ComponentActionsType) As DesignerActionListCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::ComponentModel::Design::DesignerActionListCollection ^ GetComponentActions(System::ComponentModel::IComponent ^ component, System::ComponentModel::Design::ComponentActionsType type);" />
      <MemberSignature Language="F#" Value="abstract member GetComponentActions : System.ComponentModel.IComponent * System.ComponentModel.Design.ComponentActionsType -&gt; System.ComponentModel.Design.DesignerActionListCollection&#xA;override this.GetComponentActions : System.ComponentModel.IComponent * System.ComponentModel.Design.ComponentActionsType -&gt; System.ComponentModel.Design.DesignerActionListCollection" Usage="designerActionService.GetComponentActions (component, type)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ComponentModel.Design.DesignerActionListCollection</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="component" Type="System.ComponentModel.IComponent" />
        <Parameter Name="type" Type="System.ComponentModel.Design.ComponentActionsType" />
      </Parameters>
      <Docs>
        <param name="component">Componente al que están asociadas las etiquetas inteligentes.</param>
        <param name="type">Enumeración <see cref="T:System.ComponentModel.Design.ComponentActionsType" /> con la que se filtran las etiquetas inteligentes asociadas.</param>
        <summary>Devuelve la colección de listas de elementos de etiqueta inteligente del tipo especificado asociado a un componente.</summary>
        <returns>Colección de etiquetas inteligentes del tipo especificado para el componente determinado.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Esta versión de sobrecargado <xref:System.ComponentModel.Design.DesignerActionService.GetComponentActions%2A> método filtra según la `type` parámetro, que puede tener uno de los siguientes valores.  
  
|Valor|Descripción|  
|-----------|-----------------|  
|<xref:System.ComponentModel.Design.ComponentActionsType.All>|Todas las etiquetas inteligentes asociadas.|  
|<xref:System.ComponentModel.Design.ComponentActionsType.Component>|Sólo etiquetas inteligentes del modelo de extracción.|  
|<xref:System.ComponentModel.Design.ComponentActionsType.Service>|Sólo etiquetas inteligentes del modelo de inserción.|  
  
 Si el diseñador asociado para un componente no proporciona una lista de etiquetas inteligentes del modelo de extracción, el <xref:System.ComponentModel.Design.DesignerActionService.GetComponentActions%2A> método en su lugar, usará los elementos de menú contextual en tiempo de diseño del diseñador desde el <xref:System.ComponentModel.Design.ComponentDesigner.Verbs%2A> propiedad.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="comp" /> es <see langword="null" />.</exception>
        <altmember cref="M:System.ComponentModel.Design.DesignerActionService.GetComponentDesignerActions(System.ComponentModel.IComponent,System.ComponentModel.Design.DesignerActionListCollection)" />
        <altmember cref="M:System.ComponentModel.Design.DesignerActionService.GetComponentServiceActions(System.ComponentModel.IComponent,System.ComponentModel.Design.DesignerActionListCollection)" />
        <altmember cref="T:System.ComponentModel.Design.DesignerActionListCollection" />
        <altmember cref="T:System.ComponentModel.Design.DesignerVerb" />
        <altmember cref="T:System.ComponentModel.Design.ComponentActionsType" />
      </Docs>
    </Member>
    <Member MemberName="GetComponentDesignerActions">
      <MemberSignature Language="C#" Value="protected virtual void GetComponentDesignerActions (System.ComponentModel.IComponent component, System.ComponentModel.Design.DesignerActionListCollection actionLists);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void GetComponentDesignerActions(class System.ComponentModel.IComponent component, class System.ComponentModel.Design.DesignerActionListCollection actionLists) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.DesignerActionService.GetComponentDesignerActions(System.ComponentModel.IComponent,System.ComponentModel.Design.DesignerActionListCollection)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub GetComponentDesignerActions (component As IComponent, actionLists As DesignerActionListCollection)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void GetComponentDesignerActions(System::ComponentModel::IComponent ^ component, System::ComponentModel::Design::DesignerActionListCollection ^ actionLists);" />
      <MemberSignature Language="F#" Value="abstract member GetComponentDesignerActions : System.ComponentModel.IComponent * System.ComponentModel.Design.DesignerActionListCollection -&gt; unit&#xA;override this.GetComponentDesignerActions : System.ComponentModel.IComponent * System.ComponentModel.Design.DesignerActionListCollection -&gt; unit" Usage="designerActionService.GetComponentDesignerActions (component, actionLists)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="component" Type="System.ComponentModel.IComponent" />
        <Parameter Name="actionLists" Type="System.ComponentModel.Design.DesignerActionListCollection" />
      </Parameters>
      <Docs>
        <param name="component">Componente al que están asociadas las etiquetas inteligentes.</param>
        <param name="actionLists">Colección a la que se van a agregar las etiquetas inteligentes asociadas.</param>
        <summary>Recupera las etiquetas inteligentes del modelo de extracción asociadas a un componente.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.ComponentModel.Design.DesignerActionService.GetComponentDesignerActions%2A> método es un método auxiliar para el <xref:System.ComponentModel.Design.DesignerActionService.GetComponentActions%2A> métodos. <xref:System.ComponentModel.Design.DesignerActionService.GetComponentDesignerActions%2A> busca el modelo de extracción inteligente de etiquetas del tipo <xref:System.ComponentModel.Design.ComponentActionsType.Component>y, a continuación, agrega a la proporcionada `actionLists` colección.  
  
 Si el desarrollador del componente no proporciona explícitamente una colección de etiquetas inteligentes a través de la <xref:System.ComponentModel.Design.ComponentDesigner.ActionLists%2A> propiedad de su diseñador, este método siempre reutilizará las entradas de menú contextual en tiempo de diseño, que se obtienen a través de la <xref:System.ComponentModel.Design.ComponentDesigner.Verbs%2A> propiedad de la diseñador.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Uno o ambos parámetros son <see langword="null" />.</exception>
        <altmember cref="Overload:System.ComponentModel.Design.DesignerActionService.GetComponentActions" />
        <altmember cref="M:System.ComponentModel.Design.DesignerActionService.GetComponentServiceActions(System.ComponentModel.IComponent,System.ComponentModel.Design.DesignerActionListCollection)" />
        <altmember cref="P:System.ComponentModel.Design.ComponentDesigner.ActionLists" />
        <altmember cref="P:System.ComponentModel.Design.ComponentDesigner.Verbs" />
      </Docs>
    </Member>
    <Member MemberName="GetComponentServiceActions">
      <MemberSignature Language="C#" Value="protected virtual void GetComponentServiceActions (System.ComponentModel.IComponent component, System.ComponentModel.Design.DesignerActionListCollection actionLists);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void GetComponentServiceActions(class System.ComponentModel.IComponent component, class System.ComponentModel.Design.DesignerActionListCollection actionLists) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.DesignerActionService.GetComponentServiceActions(System.ComponentModel.IComponent,System.ComponentModel.Design.DesignerActionListCollection)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub GetComponentServiceActions (component As IComponent, actionLists As DesignerActionListCollection)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void GetComponentServiceActions(System::ComponentModel::IComponent ^ component, System::ComponentModel::Design::DesignerActionListCollection ^ actionLists);" />
      <MemberSignature Language="F#" Value="abstract member GetComponentServiceActions : System.ComponentModel.IComponent * System.ComponentModel.Design.DesignerActionListCollection -&gt; unit&#xA;override this.GetComponentServiceActions : System.ComponentModel.IComponent * System.ComponentModel.Design.DesignerActionListCollection -&gt; unit" Usage="designerActionService.GetComponentServiceActions (component, actionLists)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="component" Type="System.ComponentModel.IComponent" />
        <Parameter Name="actionLists" Type="System.ComponentModel.Design.DesignerActionListCollection" />
      </Parameters>
      <Docs>
        <param name="component">Componente al que están asociadas las etiquetas inteligentes.</param>
        <param name="actionLists">Colección a la que se van a agregar las etiquetas inteligentes asociadas.</param>
        <summary>Recupera las etiquetas inteligentes del modelo de inserción asociadas a un componente.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.ComponentModel.Design.DesignerActionService.GetComponentServiceActions%2A> método es un método auxiliar para el <xref:System.ComponentModel.Design.DesignerActionService.GetComponentActions%2A> métodos. Busca de etiquetas inteligentes del modelo de inserción del tipo <xref:System.ComponentModel.Design.ComponentActionsType.Service>y, a continuación, agrega a la proporcionada `actionLists` colección.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Uno o ambos parámetros son <see langword="null" />.</exception>
        <altmember cref="Overload:System.ComponentModel.Design.DesignerActionService.GetComponentActions" />
        <altmember cref="M:System.ComponentModel.Design.DesignerActionService.GetComponentDesignerActions(System.ComponentModel.IComponent,System.ComponentModel.Design.DesignerActionListCollection)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Remove">
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Desasocia una o varias listas de etiquetas inteligentes de uno o varios componentes.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Remove">
      <MemberSignature Language="C#" Value="public void Remove (System.ComponentModel.Design.DesignerActionList actionList);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Remove(class System.ComponentModel.Design.DesignerActionList actionList) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.DesignerActionService.Remove(System.ComponentModel.Design.DesignerActionList)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Remove (actionList As DesignerActionList)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Remove(System::ComponentModel::Design::DesignerActionList ^ actionList);" />
      <MemberSignature Language="F#" Value="member this.Remove : System.ComponentModel.Design.DesignerActionList -&gt; unit" Usage="designerActionService.Remove actionList" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="actionList" Type="System.ComponentModel.Design.DesignerActionList" />
      </Parameters>
      <Docs>
        <param name="actionList">Lista de etiquetas inteligentes que se va a quitar.</param>
        <summary>Quita la lista de etiquetas inteligentes especificada de todos los componentes administrados mediante el servicio actual.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Esta versión de la <xref:System.ComponentModel.Design.DesignerActionService.Remove%2A> método suele usarse por desarrolladores de herramientas de diseño, ya que los desarrolladores de componentes normalmente no saben qué otros componentes existen en el espacio de diseño actual.  
  
 Si es correcto, este método provoca la <xref:System.ComponentModel.Design.DesignerActionService.DesignerActionListsChanged> eventos.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="actionList" /> es <see langword="null" />.</exception>
        <altmember cref="Overload:System.ComponentModel.Design.DesignerActionService.Add" />
        <altmember cref="M:System.ComponentModel.Design.DesignerActionUIService.HideUI(System.ComponentModel.IComponent)" />
        <altmember cref="M:System.ComponentModel.Design.DesignerActionService.Clear" />
      </Docs>
    </Member>
    <Member MemberName="Remove">
      <MemberSignature Language="C#" Value="public void Remove (System.ComponentModel.IComponent comp);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Remove(class System.ComponentModel.IComponent comp) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.DesignerActionService.Remove(System.ComponentModel.IComponent)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Remove (comp As IComponent)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Remove(System::ComponentModel::IComponent ^ comp);" />
      <MemberSignature Language="F#" Value="member this.Remove : System.ComponentModel.IComponent -&gt; unit" Usage="designerActionService.Remove comp" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="comp" Type="System.ComponentModel.IComponent" />
      </Parameters>
      <Docs>
        <param name="comp">Componente del que se van a desasociar las etiquetas inteligentes.</param>
        <summary>Quita todas las listas de etiquetas inteligentes asociadas al componente especificado.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si se realiza correctamente, el <xref:System.ComponentModel.Design.DesignerActionService.Remove%2A> método que provoca el <xref:System.ComponentModel.Design.DesignerActionService.DesignerActionListsChanged> eventos.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="comp" /> es <see langword="null" />.</exception>
        <altmember cref="Overload:System.ComponentModel.Design.DesignerActionService.Add" />
        <altmember cref="M:System.ComponentModel.Design.DesignerActionUIService.HideUI(System.ComponentModel.IComponent)" />
        <altmember cref="M:System.ComponentModel.Design.DesignerActionService.Clear" />
      </Docs>
    </Member>
    <Member MemberName="Remove">
      <MemberSignature Language="C#" Value="public void Remove (System.ComponentModel.IComponent comp, System.ComponentModel.Design.DesignerActionList actionList);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Remove(class System.ComponentModel.IComponent comp, class System.ComponentModel.Design.DesignerActionList actionList) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.DesignerActionService.Remove(System.ComponentModel.IComponent,System.ComponentModel.Design.DesignerActionList)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Remove (comp As IComponent, actionList As DesignerActionList)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Remove(System::ComponentModel::IComponent ^ comp, System::ComponentModel::Design::DesignerActionList ^ actionList);" />
      <MemberSignature Language="F#" Value="member this.Remove : System.ComponentModel.IComponent * System.ComponentModel.Design.DesignerActionList -&gt; unit" Usage="designerActionService.Remove (comp, actionList)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="comp" Type="System.ComponentModel.IComponent" />
        <Parameter Name="actionList" Type="System.ComponentModel.Design.DesignerActionList" />
      </Parameters>
      <Docs>
        <param name="comp">Componente del que se van a desasociar las etiquetas inteligentes.</param>
        <param name="actionList">Lista de etiquetas inteligentes que se va a quitar.</param>
        <summary>Quita la lista de etiquetas inteligentes especificada del componente determinado.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si se realiza correctamente, el <xref:System.ComponentModel.Design.DesignerActionService.Remove%2A> método que provoca el <xref:System.ComponentModel.Design.DesignerActionService.DesignerActionListsChanged> eventos.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Uno o ambos parámetros son <see langword="null" />.</exception>
        <altmember cref="Overload:System.ComponentModel.Design.DesignerActionService.Add" />
        <altmember cref="M:System.ComponentModel.Design.DesignerActionUIService.HideUI(System.ComponentModel.IComponent)" />
        <altmember cref="M:System.ComponentModel.Design.DesignerActionService.Clear" />
      </Docs>
    </Member>
  </Members>
</Type>