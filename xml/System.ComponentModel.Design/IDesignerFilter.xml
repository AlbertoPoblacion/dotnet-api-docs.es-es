<Type Name="IDesignerFilter" FullName="System.ComponentModel.Design.IDesignerFilter">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="2dbad6fdfb09f4fc16d8d85beafb69dfaa4f5eea" />
    <Meta Name="ms.sourcegitcommit" Value="5a49536d99d2d0b54e4cb7280870903e043272df" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="es-ES" />
    <Meta Name="ms.lasthandoff" Value="07/03/2018" />
    <Meta Name="ms.locfileid" Value="37696285" />
  </Metadata>
  <TypeSignature Language="C#" Value="public interface IDesignerFilter" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IDesignerFilter" />
  <TypeSignature Language="DocId" Value="T:System.ComponentModel.Design.IDesignerFilter" />
  <TypeSignature Language="VB.NET" Value="Public Interface IDesignerFilter" />
  <TypeSignature Language="C++ CLI" Value="public interface class IDesignerFilter" />
  <TypeSignature Language="F#" Value="type IDesignerFilter = interface" />
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Docs>
    <summary>Proporciona una interfaz que habilita a un diseñador para tener acceso y filtrar los diccionarios de un objeto <see cref="T:System.ComponentModel.TypeDescriptor" /> que almacena los descriptores de propiedad, atributo y evento que un diseñador de componentes puede exponer en el entorno en tiempo de diseño.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.ComponentModel.Design.IDesignerFilter> permite que un diseñador filtre el conjunto de descriptores de propiedad, atributo y evento que expone el componente asociado a través de un <xref:System.ComponentModel.TypeDescriptor>. Los métodos de esta interfaz cuyos nombres comienzan por `Pre` se llama inmediatamente antes que los métodos cuyos nombres comienzan por `Post`.  
  
 Si desea agregar los descriptores de propiedad, evento o atributo, utilice un <xref:System.ComponentModel.Design.IDesignerFilter.PreFilterAttributes%2A>, <xref:System.ComponentModel.Design.IDesignerFilter.PreFilterEvents%2A>, o <xref:System.ComponentModel.Design.IDesignerFilter.PreFilterProperties%2A> método.  
  
 Si desea cambiar o quitar el atributo, evento o descriptores de propiedad, use un <xref:System.ComponentModel.Design.IDesignerFilter.PostFilterAttributes%2A>, <xref:System.ComponentModel.Design.IDesignerFilter.PostFilterEvents%2A>, o <xref:System.ComponentModel.Design.IDesignerFilter.PostFilterProperties%2A> método.  
  
   
  
## Examples  
 En el ejemplo siguiente se muestra una invalidación de <xref:System.ComponentModel.Design.IDesignerFilter.PreFilterProperties%2A> que agrega una propiedad del diseñador a la ventana Propiedades cuando se selecciona el control del diseñador en tiempo de diseño. Vea el ejemplo de la <xref:System.Windows.Forms.Design.ControlDesigner> clase para un ejemplo completo de diseñador que usa el <xref:System.ComponentModel.Design.IDesignerFilter> interfaz.  
  
 [!code-cpp[ControlDesignerExample#2](~/samples/snippets/cpp/VS_Snippets_Winforms/ControlDesignerExample/CPP/controldesignerexample.cpp#2)]
 [!code-csharp[ControlDesignerExample#2](~/samples/snippets/csharp/VS_Snippets_Winforms/ControlDesignerExample/CS/controldesignerexample.cs#2)]
 [!code-vb[ControlDesignerExample#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/ControlDesignerExample/VB/controldesignerexample.vb#2)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.ComponentModel.Design.ITypeDescriptorFilterService" />
    <altmember cref="T:System.ComponentModel.TypeDescriptor" />
  </Docs>
  <Members>
    <Member MemberName="PostFilterAttributes">
      <MemberSignature Language="C#" Value="public void PostFilterAttributes (System.Collections.IDictionary attributes);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void PostFilterAttributes(class System.Collections.IDictionary attributes) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.IDesignerFilter.PostFilterAttributes(System.Collections.IDictionary)" />
      <MemberSignature Language="VB.NET" Value="Public Sub PostFilterAttributes (attributes As IDictionary)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void PostFilterAttributes(System::Collections::IDictionary ^ attributes);" />
      <MemberSignature Language="F#" Value="abstract member PostFilterAttributes : System.Collections.IDictionary -&gt; unit" Usage="iDesignerFilter.PostFilterAttributes attributes" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="attributes" Type="System.Collections.IDictionary" />
      </Parameters>
      <Docs>
        <param name="attributes">Objetos <see cref="T:System.Attribute" /> para la clase del componente. Las claves del diccionario de atributos son los valores de la propiedad <see cref="P:System.Attribute.TypeId" /> de los atributos.</param>
        <summary>Cuando se reemplaza en una clase derivada, permite que un diseñador cambie o quite elementos del conjunto de atributos que se exponen a través de un objeto <see cref="T:System.ComponentModel.TypeDescriptor" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este método proporciona una manera de cambiar o quitar elementos del diccionario de atributos que el componente asociado del diseñador que implementa esta interfaz se expone a través de un <xref:System.ComponentModel.TypeDescriptor>.  
  
 Las claves del diccionario de atributos son los identificadores de tipo de los atributos. Los objetos son del tipo <xref:System.Attribute>. Este método se llama inmediatamente después de <xref:System.ComponentModel.Design.IDesignerFilter.PreFilterAttributes%2A>.  
  
 Identificador del tipo de un atributo puede ser cualquier objeto. De forma predeterminada, <xref:System.Attribute> devuelve su <xref:System.Type> como el valor de su <xref:System.Attribute.TypeId%2A> propiedad. Puede comprobar el <xref:System.Attribute.TypeId%2A> de un atributo en el diccionario cuya equivalencia con un conocido <xref:System.Attribute.TypeId%2A> para un atributo identificarlo, o use <xref:System.Reflection> para identificar el propio objeto de atributo.  
  
 Cuando un atributo que tiene el mismo <xref:System.Attribute.TypeId%2A> como un atributo existente o heredado se agrega a un componente, el nuevo atributo reemplaza la anterior. Para muchos atributos, un atributo nuevo del mismo tipo reemplazará cualquier atributo anterior del tipo. Sin embargo, algunos tipos de atributos devuelven un <xref:System.Attribute.TypeId%2A> que distingue el atributo de forma selectiva. Por ejemplo, para proporcionar diferentes tipos de diseñadores activos simultáneamente para un tipo, como un <xref:System.ComponentModel.Design.IRootDesigner> y un <xref:System.ComponentModel.Design.IDesigner>, <xref:System.ComponentModel.DesignerAttribute> clase devuelve un <xref:System.Attribute.TypeId%2A> que identifica el atributo y el Diseñador de base tipo. El <xref:System.ComponentModel.DesignerAttribute> constructor le permite especificar el tipo de diseñador base del diseñador además de su tipo específico, y <xref:System.ComponentModel.DesignerAttribute> devuelve un <xref:System.Attribute.TypeId%2A> que refleje esto. Por lo tanto, cuando agrega un nuevo <xref:System.ComponentModel.DesignerAttribute> con un tipo de diseñador base del mismo tipo que el tipo base de diseñador de existente <xref:System.ComponentModel.DesignerAttribute>, el atributo anterior se reemplaza con el nuevo atributo.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Puede filtrar directamente el diccionario que sea accesible a través de la <paramref name="attributes" /> parámetro, o se puede dejar sin cambios. Si va a invalidar este método, llame a la implementación base después de realizar su propio filtrado.</para>
        </block>
        <altmember cref="M:System.ComponentModel.Design.ITypeDescriptorFilterService.FilterAttributes(System.ComponentModel.IComponent,System.Collections.IDictionary)" />
      </Docs>
    </Member>
    <Member MemberName="PostFilterEvents">
      <MemberSignature Language="C#" Value="public void PostFilterEvents (System.Collections.IDictionary events);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void PostFilterEvents(class System.Collections.IDictionary events) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.IDesignerFilter.PostFilterEvents(System.Collections.IDictionary)" />
      <MemberSignature Language="VB.NET" Value="Public Sub PostFilterEvents (events As IDictionary)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void PostFilterEvents(System::Collections::IDictionary ^ events);" />
      <MemberSignature Language="F#" Value="abstract member PostFilterEvents : System.Collections.IDictionary -&gt; unit" Usage="iDesignerFilter.PostFilterEvents events" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="events" Type="System.Collections.IDictionary" />
      </Parameters>
      <Docs>
        <param name="events">Objetos <see cref="T:System.ComponentModel.EventDescriptor" /> que representan los eventos de la clase del componente. Las claves del diccionario de eventos son nombres de evento.</param>
        <summary>Cuando se reemplaza en una clase derivada, permite que un diseñador cambie o quite elementos del conjunto de eventos que se exponen a través de un objeto <see cref="T:System.ComponentModel.TypeDescriptor" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este método proporciona una manera de cambiar o quitar elementos del diccionario de eventos que se exponen a través de un <xref:System.ComponentModel.TypeDescriptor>.  
  
 Las claves del diccionario de eventos son los nombres de los eventos. Los objetos son del tipo <xref:System.ComponentModel.EventDescriptor>. Este método se llama inmediatamente después de <xref:System.ComponentModel.Design.IDesignerFilter.PreFilterEvents%2A>.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Puede filtrar directamente el diccionario que sea accesible a través de la <paramref name="events" /> parámetro, o se puede dejar sin cambios. Si va a invalidar este método, llame a la implementación base después de realizar su propio filtrado.</para>
        </block>
        <altmember cref="M:System.ComponentModel.Design.ITypeDescriptorFilterService.FilterEvents(System.ComponentModel.IComponent,System.Collections.IDictionary)" />
      </Docs>
    </Member>
    <Member MemberName="PostFilterProperties">
      <MemberSignature Language="C#" Value="public void PostFilterProperties (System.Collections.IDictionary properties);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void PostFilterProperties(class System.Collections.IDictionary properties) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.IDesignerFilter.PostFilterProperties(System.Collections.IDictionary)" />
      <MemberSignature Language="VB.NET" Value="Public Sub PostFilterProperties (properties As IDictionary)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void PostFilterProperties(System::Collections::IDictionary ^ properties);" />
      <MemberSignature Language="F#" Value="abstract member PostFilterProperties : System.Collections.IDictionary -&gt; unit" Usage="iDesignerFilter.PostFilterProperties properties" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="properties" Type="System.Collections.IDictionary" />
      </Parameters>
      <Docs>
        <param name="properties">Objetos <see cref="T:System.ComponentModel.PropertyDescriptor" /> que representan las propiedades de la clase del componente. Las claves del diccionario de propiedades son nombres de propiedad.</param>
        <summary>Cuando se reemplaza en una clase derivada, permite que un diseñador cambie o quite elementos del conjunto de propiedades que se exponen a través de un objeto <see cref="T:System.ComponentModel.TypeDescriptor" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este método proporciona una manera de cambiar o quitar elementos del diccionario de propiedades que se exponen a través de un <xref:System.ComponentModel.TypeDescriptor>.  
  
 Las claves del diccionario de propiedades son los nombres de las propiedades. Los objetos son del tipo <xref:System.ComponentModel.PropertyDescriptor>. Este método se llama inmediatamente después de <xref:System.ComponentModel.Design.IDesignerFilter.PreFilterProperties%2A>.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Puede filtrar directamente el diccionario que sea accesible a través de la <paramref name="properties" /> parámetro, o se puede dejar sin cambios. Si va a invalidar este método, llame a la implementación base después de realizar su propio filtrado.</para>
        </block>
        <altmember cref="M:System.ComponentModel.Design.ITypeDescriptorFilterService.FilterProperties(System.ComponentModel.IComponent,System.Collections.IDictionary)" />
      </Docs>
    </Member>
    <Member MemberName="PreFilterAttributes">
      <MemberSignature Language="C#" Value="public void PreFilterAttributes (System.Collections.IDictionary attributes);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void PreFilterAttributes(class System.Collections.IDictionary attributes) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.IDesignerFilter.PreFilterAttributes(System.Collections.IDictionary)" />
      <MemberSignature Language="VB.NET" Value="Public Sub PreFilterAttributes (attributes As IDictionary)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void PreFilterAttributes(System::Collections::IDictionary ^ attributes);" />
      <MemberSignature Language="F#" Value="abstract member PreFilterAttributes : System.Collections.IDictionary -&gt; unit" Usage="iDesignerFilter.PreFilterAttributes attributes" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="attributes" Type="System.Collections.IDictionary" />
      </Parameters>
      <Docs>
        <param name="attributes">Objetos <see cref="T:System.Attribute" /> para la clase del componente. Las claves del diccionario de atributos son los valores de la propiedad <see cref="P:System.Attribute.TypeId" /> de los atributos.</param>
        <summary>Cuando se reemplaza en una clase derivada, permite que un diseñador agregue elementos al conjunto de atributos que se expone a través de un objeto <see cref="T:System.ComponentModel.TypeDescriptor" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este método proporciona una manera de agregar elementos al diccionario de atributos que el componente asociado del diseñador que implementa esta interfaz se expone a través de un <xref:System.ComponentModel.TypeDescriptor>.  
  
 Las claves del diccionario de atributos son los identificadores de tipo de los atributos. Los objetos son del tipo <xref:System.Attribute>. Este método se llama inmediatamente antes de <xref:System.ComponentModel.Design.IDesignerFilter.PostFilterAttributes%2A>.  
  
 Identificador del tipo de un atributo puede ser cualquier objeto. De forma predeterminada, <xref:System.Attribute> devuelve su <xref:System.Type> como el valor de su <xref:System.Attribute.TypeId%2A> propiedad. Puede comprobar el <xref:System.Attribute.TypeId%2A> de un atributo en el diccionario cuya equivalencia con un conocido <xref:System.Attribute.TypeId%2A> para un atributo identificarlo, o use <xref:System.Reflection> para identificar el propio objeto de atributo.  
  
 Cuando un atributo que tiene el mismo <xref:System.Attribute.TypeId%2A> como un atributo existente o heredado se agrega a un componente, el nuevo atributo reemplaza la anterior. Para muchos atributos, un atributo nuevo del mismo tipo reemplazará cualquier atributo anterior del tipo. Sin embargo, algunos tipos de atributos devuelven un <xref:System.Attribute.TypeId%2A> que distingue el atributo de forma selectiva. Por ejemplo, para proporcionar diferentes tipos de diseñadores activos simultáneamente para un tipo, como un <xref:System.ComponentModel.Design.IRootDesigner> y un <xref:System.ComponentModel.Design.IDesigner>, <xref:System.ComponentModel.DesignerAttribute> clase devuelve un <xref:System.Attribute.TypeId%2A> que identifica el atributo y el Diseñador de base tipo. El <xref:System.ComponentModel.DesignerAttribute> constructor le permite especificar el tipo de diseñador base del diseñador además de su tipo específico, y <xref:System.ComponentModel.DesignerAttribute> devuelve un <xref:System.Attribute.TypeId%2A> que refleje esto. Por lo tanto, cuando agrega un nuevo <xref:System.ComponentModel.DesignerAttribute> con un tipo de diseñador base del mismo tipo que el tipo base de diseñador de existente <xref:System.ComponentModel.DesignerAttribute>, el atributo anterior se reemplaza con el nuevo atributo.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Puede filtrar directamente el diccionario que sea accesible a través de la <paramref name="attributes" /> parámetro, o se puede dejar sin cambios. Si va a invalidar este método, llame a la implementación base después de realizar su propio filtrado.</para>
        </block>
        <altmember cref="M:System.ComponentModel.Design.ITypeDescriptorFilterService.FilterAttributes(System.ComponentModel.IComponent,System.Collections.IDictionary)" />
      </Docs>
    </Member>
    <Member MemberName="PreFilterEvents">
      <MemberSignature Language="C#" Value="public void PreFilterEvents (System.Collections.IDictionary events);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void PreFilterEvents(class System.Collections.IDictionary events) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.IDesignerFilter.PreFilterEvents(System.Collections.IDictionary)" />
      <MemberSignature Language="VB.NET" Value="Public Sub PreFilterEvents (events As IDictionary)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void PreFilterEvents(System::Collections::IDictionary ^ events);" />
      <MemberSignature Language="F#" Value="abstract member PreFilterEvents : System.Collections.IDictionary -&gt; unit" Usage="iDesignerFilter.PreFilterEvents events" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="events" Type="System.Collections.IDictionary" />
      </Parameters>
      <Docs>
        <param name="events">Objetos <see cref="T:System.ComponentModel.EventDescriptor" /> que representan los eventos de la clase del componente. Las claves del diccionario de eventos son nombres de evento.</param>
        <summary>Cuando se reemplaza en una clase derivada, permite que un diseñador agregue elementos al conjunto de eventos que se expone a través de un objeto <see cref="T:System.ComponentModel.TypeDescriptor" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este método proporciona una manera de agregar elementos al diccionario de eventos que un diseñador expone mediante un <xref:System.ComponentModel.TypeDescriptor>.  
  
 Las claves del diccionario de eventos son los nombres de los eventos. Los objetos son del tipo <xref:System.ComponentModel.EventDescriptor>. Este método se llama inmediatamente antes de <xref:System.ComponentModel.Design.IDesignerFilter.PostFilterEvents%2A>.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Puede modificar directamente el diccionario que sea accesible a través de la <paramref name="events" /> parámetro, o se puede dejar sin cambios. Si va a invalidar este método, llame a la implementación base antes de realizar su propio filtrado.</para>
        </block>
        <altmember cref="M:System.ComponentModel.Design.ITypeDescriptorFilterService.FilterEvents(System.ComponentModel.IComponent,System.Collections.IDictionary)" />
      </Docs>
    </Member>
    <Member MemberName="PreFilterProperties">
      <MemberSignature Language="C#" Value="public void PreFilterProperties (System.Collections.IDictionary properties);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void PreFilterProperties(class System.Collections.IDictionary properties) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.IDesignerFilter.PreFilterProperties(System.Collections.IDictionary)" />
      <MemberSignature Language="VB.NET" Value="Public Sub PreFilterProperties (properties As IDictionary)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void PreFilterProperties(System::Collections::IDictionary ^ properties);" />
      <MemberSignature Language="F#" Value="abstract member PreFilterProperties : System.Collections.IDictionary -&gt; unit" Usage="iDesignerFilter.PreFilterProperties properties" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="properties" Type="System.Collections.IDictionary" />
      </Parameters>
      <Docs>
        <param name="properties">Objetos <see cref="T:System.ComponentModel.PropertyDescriptor" /> que representan las propiedades de la clase del componente. Las claves del diccionario de propiedades son nombres de propiedad.</param>
        <summary>Cuando se reemplaza en una clase derivada, permite que un diseñador agregue elementos al conjunto de propiedades que se expone a través de un objeto <see cref="T:System.ComponentModel.TypeDescriptor" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este método proporciona una manera de agregar elementos al diccionario de propiedades que un diseñador expone mediante un <xref:System.ComponentModel.TypeDescriptor>.  
  
 Las claves del diccionario de propiedades son los nombres de las propiedades. Los objetos son del tipo <xref:System.ComponentModel.PropertyDescriptor>. Este método se llama inmediatamente antes de <xref:System.ComponentModel.Design.IDesignerFilter.PostFilterProperties%2A>.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Puede modificar directamente el diccionario que sea accesible a través de la <paramref name="properties" /> parámetro, o se puede dejar sin cambios. Si va a invalidar este método, llame a la implementación base antes de realizar su propio filtrado.</para>
        </block>
        <altmember cref="M:System.ComponentModel.Design.ITypeDescriptorFilterService.FilterProperties(System.ComponentModel.IComponent,System.Collections.IDictionary)" />
      </Docs>
    </Member>
  </Members>
</Type>