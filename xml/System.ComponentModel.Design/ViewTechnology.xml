<Type Name="ViewTechnology" FullName="System.ComponentModel.Design.ViewTechnology">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="fc9c23253cbc09cc29b28970c3f06961d8964b04" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="es-ES" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36705250" />
  </Metadata>
  <TypeSignature Language="C#" Value="public enum ViewTechnology" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed ViewTechnology extends System.Enum" />
  <TypeSignature Language="DocId" Value="T:System.ComponentModel.Design.ViewTechnology" />
  <TypeSignature Language="VB.NET" Value="Public Enum ViewTechnology" />
  <TypeSignature Language="C++ CLI" Value="public enum class ViewTechnology" />
  <TypeSignature Language="F#" Value="type ViewTechnology = " />
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Enum</BaseTypeName>
  </Base>
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Define identificadores para un conjunto de tecnologías admitidas por los hosts de diseñador.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El modelo de adaptador de vista reemplaza y agrega funcionalidad a la <xref:System.ComponentModel.Design.ViewTechnology> de características; sin embargo, la <xref:System.ComponentModel.Design.ViewTechnology> característica se conserva para compatibilidad con versiones anteriores y uso futuro, si elige. Para obtener más información, vea ".NET Shape Library: A Sample Designer" en Windows Forms Knowledge Base en http://windowsforms.net/articles/shapedesigner.aspx.  
  
 <xref:System.ComponentModel.Design.ViewTechnology> define los identificadores que pueden indicar el modo que se usará para controlar la presentación de un documento hospedado en el diseñador.  
  
 Sólo se debe utilizar el valor predeterminado en el entorno de hospedaje de diseñador. En versiones anteriores de la [!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)], el <xref:System.ComponentModel.Design.ViewTechnology.Default> enumeración especifica el tipo de modelo de interfaz de usuario admitido por un diseñador raíz. Dado que este modelo no es extensible, en su lugar, debe usar un *adaptador vista* modelo. Un adaptador de vista es un tipo que se adapta a un objeto de un tipo a otro.  
  
 Por ejemplo, un diseñador HTML podría devolver un `DemoDOM` árbol como su vista. El Diseñador HTML devuelve una tecnología de vista de forma predeterminada. Un entorno de hospedaje de Windows Forms tendría una o varias adaptador clases de vistas disponibles. Si una clase de ese tipo se puede convertir el `DemoDOM` en un control de formularios Windows Forms, la aplicación host puede admitir este tipo de diseñador. Si no hay ningún adaptador puede controlar el tipo de datos devuelto desde el diseñador <xref:System.ComponentModel.Design.IRootDesigner.GetView%2A> método, se producirá un error en la carga del diseñador y el usuario verá un error.  
  
 Visual Studio tiene un esquema extensible para proporcionar adaptadores de vista, por lo que puede adaptarse a cualquier tecnología de interfaz de usuario. Proveedores de tecnologías de otros fabricantes también pueden proporcionar un adaptador de vista adecuado y sus modelos de objetos se pueden utilizar inmediatamente.  
  
 Para obtener un ejemplo que utiliza adaptadores de vista, vea ".NET Shape Library: A Sample Designer" en Windows Forms Knowledge Base en http://windowsforms.net/articles/shapedesigner.aspx.  
  
   
  
## Examples  
 En el ejemplo de código siguiente se muestra cómo utilizar la <xref:System.ComponentModel.Design.ViewTechnology.Default> clase en un diseñador. Este ejemplo de código forma parte de un ejemplo más extenso de la <xref:System.ComponentModel.Design.IRootDesigner.GetView%2A> interfaz.  
  
 [!code-cpp[IRootDesigner Sample#1](~/samples/snippets/cpp/VS_Snippets_Winforms/IRootDesigner Sample/CPP/class1.cpp#1)]
 [!code-csharp[IRootDesigner Sample#1](~/samples/snippets/csharp/VS_Snippets_Winforms/IRootDesigner Sample/CS/class1.cs#1)]
 [!code-vb[IRootDesigner Sample#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/IRootDesigner Sample/VB/class1.vb#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="Default">
      <MemberSignature Language="C#" Value="Default" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.ComponentModel.Design.ViewTechnology Default = int32(2)" />
      <MemberSignature Language="DocId" Value="F:System.ComponentModel.Design.ViewTechnology.Default" />
      <MemberSignature Language="VB.NET" Value="Default" />
      <MemberSignature Language="C++ CLI" Value="Default" />
      <MemberSignature Language="F#" Value="Default = 2" Usage="System.ComponentModel.Design.ViewTechnology.Default" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ComponentModel.Design.ViewTechnology</ReturnType>
      </ReturnValue>
      <MemberValue>2</MemberValue>
      <Docs>
        <summary>Especifica la compatibilidad predeterminada con la tecnología de vista.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El diseñador raíz puede devolver cualquier tipo de objeto, pero el objeto debe ser compatible con un adaptador para la tecnología del host. Entornos de hospedaje, como Visual Studio proporcionan una manera de conectar nuevos adaptadores de tecnología de vista. El objeto de vista predeterminado para el Diseñador de formularios Windows Forms es un <xref:System.Windows.Forms.Control?displayProperty=nameWithType> instancia.  
  
   
  
## Examples  
 En el ejemplo de código siguiente se muestra cómo utilizar la <xref:System.ComponentModel.Design.ViewTechnology> clase en un diseñador. Este ejemplo de código forma parte de un ejemplo más extenso de la <xref:System.ComponentModel.Design.IRootDesigner> interfaz.  
  
 [!code-cpp[IRootDesigner Sample#1](~/samples/snippets/cpp/VS_Snippets_Winforms/IRootDesigner Sample/CPP/class1.cpp#1)]
 [!code-csharp[IRootDesigner Sample#1](~/samples/snippets/csharp/VS_Snippets_Winforms/IRootDesigner Sample/CS/class1.cs#1)]
 [!code-vb[IRootDesigner Sample#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/IRootDesigner Sample/VB/class1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Passthrough">
      <MemberSignature Language="C#" Value="Passthrough" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.ComponentModel.Design.ViewTechnology Passthrough = int32(0)" />
      <MemberSignature Language="DocId" Value="F:System.ComponentModel.Design.ViewTechnology.Passthrough" />
      <MemberSignature Language="VB.NET" Value="Passthrough" />
      <MemberSignature Language="C++ CLI" Value="Passthrough" />
      <MemberSignature Language="F#" Value="Passthrough = 0" Usage="System.ComponentModel.Design.ViewTechnology.Passthrough" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("This value has been deprecated. Use ViewTechnology.Default instead.  http://go.microsoft.com/fwlink/?linkid=14202")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.ComponentModel.Design.ViewTechnology</ReturnType>
      </ReturnValue>
      <MemberValue>0</MemberValue>
      <Docs>
        <summary>Representa un modo en que el objeto de vista se pasa directamente al entorno de desarrollo.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El objeto de vista debe implementar las interfaces que requiere el entorno de desarrollo. El entorno de desarrollo de Visual Studio admite objetos de vista de un control ActiveX, un documento activo, o un objeto que implementa la interfaz IVsWindowPane, que está disponible a través del programa de Visual Studio VSI (integración de Visual Studio). El entorno de desarrollo de Visual Studio proporciona compatibilidad para esta tecnología de vista. Compatibilidad con esta tecnología de vista no está necesariamente disponible en todos los entornos de desarrollo.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WindowsForms">
      <MemberSignature Language="C#" Value="WindowsForms" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.ComponentModel.Design.ViewTechnology WindowsForms = int32(1)" />
      <MemberSignature Language="DocId" Value="F:System.ComponentModel.Design.ViewTechnology.WindowsForms" />
      <MemberSignature Language="VB.NET" Value="WindowsForms" />
      <MemberSignature Language="C++ CLI" Value="WindowsForms" />
      <MemberSignature Language="F#" Value="WindowsForms = 1" Usage="System.ComponentModel.Design.ViewTechnology.WindowsForms" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("This value has been deprecated. Use ViewTechnology.Default instead.  http://go.microsoft.com/fwlink/?linkid=14202")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.ComponentModel.Design.ViewTechnology</ReturnType>
      </ReturnValue>
      <MemberValue>1</MemberValue>
      <Docs>
        <summary>Representa un modo en el que un objeto de control de formularios Windows Forms proporciona la presentación para el diseñador raíz.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El host del diseñador rellena la ventana de documento del entorno de desarrollo con el control de formularios Windows Forms.  
  
   
  
## Examples  
 En el ejemplo de código siguiente se muestra cómo utilizar la <xref:System.ComponentModel.Design.ViewTechnology> clase en un diseñador. Este ejemplo de código forma parte de un ejemplo mayor proporcionado para el <xref:System.ComponentModel.Design.LocalizationExtenderProvider> clase.  
  
 [!code-cpp[LocalizationExtenderProviderExample#1](~/samples/snippets/cpp/VS_Snippets_Winforms/LocalizationExtenderProviderExample/CPP/class1.cpp#1)]
 [!code-csharp[LocalizationExtenderProviderExample#1](~/samples/snippets/csharp/VS_Snippets_Winforms/LocalizationExtenderProviderExample/CS/class1.cs#1)]
 [!code-vb[LocalizationExtenderProviderExample#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/LocalizationExtenderProviderExample/VB/class1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>