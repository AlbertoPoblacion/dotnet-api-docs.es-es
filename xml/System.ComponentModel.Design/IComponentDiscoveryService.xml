<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="IComponentDiscoveryService.xml" source-language="en-US" target-language="es-ES">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac5699a9fcb6fc7b56096a548d1d5b1c74f1239f311.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">699a9fcb6fc7b56096a548d1d5b1c74f1239f311</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,netstandard-2.0,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.ComponentModel.Design.IComponentDiscoveryService">
          <source>Enables enumeration of components at design time.</source>
          <target state="translated">Habilita la enumeración de componentes en tiempo de diseño.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.Design.IComponentDiscoveryService">
          <source>The default implementation of the <ph id="ph1">&lt;xref:System.ComponentModel.Design.IComponentDiscoveryService&gt;</ph> interface enables design-time enumeration of components in the Toolbox.</source>
          <target state="translated">La implementación predeterminada de la <ph id="ph1">&lt;xref:System.ComponentModel.Design.IComponentDiscoveryService&gt;</ph> interfaz habilita la enumeración de tiempo de diseño de componentes en el cuadro de herramientas.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.Design.IComponentDiscoveryService">
          <source>You could provide a custom implementation that enumerates across other types available at design time.</source>
          <target state="translated">Puede proporcionar una implementación personalizada que se enumera a través de otros tipos disponibles en tiempo de diseño.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.Design.IComponentDiscoveryService">
          <source>For example, your implementation could enumerate the components that are present in a particular designer.</source>
          <target state="translated">Por ejemplo, la implementación puede enumerar los componentes que están presentes en un diseñador determinado.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.Design.IComponentDiscoveryService">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.ComponentModel.Design.IComponentDiscoveryService&gt;</ph> to find all the types that derive from the <ph id="ph2">&lt;xref:System.Windows.Forms.ScrollableControl&gt;</ph> type.</source>
          <target state="translated">En el ejemplo de código siguiente se muestra cómo utilizar <ph id="ph1">&lt;xref:System.ComponentModel.Design.IComponentDiscoveryService&gt;</ph> para buscar todos los tipos que derivan de la <ph id="ph2">&lt;xref:System.Windows.Forms.ScrollableControl&gt;</ph> tipo.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.Design.IComponentDiscoveryService.GetComponentTypes(System.ComponentModel.Design.IDesignerHost,System.Type)">
          <source>The designer host providing design-time services.</source>
          <target state="translated">Host del diseñador que proporciona servicios en tiempo de diseño.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.Design.IComponentDiscoveryService.GetComponentTypes(System.ComponentModel.Design.IDesignerHost,System.Type)">
          <source>Can be <ph id="ph1">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">Puede ser <ph id="ph1">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.Design.IComponentDiscoveryService.GetComponentTypes(System.ComponentModel.Design.IDesignerHost,System.Type)">
          <source>The base type specifying the components to retrieve.</source>
          <target state="translated">Tipo base que especifica los componentes que se van a recuperar.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.Design.IComponentDiscoveryService.GetComponentTypes(System.ComponentModel.Design.IDesignerHost,System.Type)">
          <source>Can be <ph id="ph1">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">Puede ser <ph id="ph1">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.Design.IComponentDiscoveryService.GetComponentTypes(System.ComponentModel.Design.IDesignerHost,System.Type)">
          <source>Gets the list of available component types.</source>
          <target state="translated">Obtiene la lista de tipos de componente disponibles.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.Design.IComponentDiscoveryService.GetComponentTypes(System.ComponentModel.Design.IDesignerHost,System.Type)">
          <source>The list of available component types.</source>
          <target state="translated">La lista de tipos de componente disponibles.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.Design.IComponentDiscoveryService.GetComponentTypes(System.ComponentModel.Design.IDesignerHost,System.Type)">
          <source>The <ph id="ph1">&lt;xref:System.ComponentModel.Design.IComponentDiscoveryService.GetComponentTypes%2A&gt;</ph> method retrieves the list of available component types, which are types implementing the <ph id="ph2">&lt;xref:System.ComponentModel.IComponent&gt;</ph> interface.</source>
          <target state="translated">El <ph id="ph1">&lt;xref:System.ComponentModel.Design.IComponentDiscoveryService.GetComponentTypes%2A&gt;</ph> método recupera la lista de tipos de componentes disponibles, que son tipos de implementación de la <ph id="ph2">&lt;xref:System.ComponentModel.IComponent&gt;</ph> interfaz.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.Design.IComponentDiscoveryService.GetComponentTypes(System.ComponentModel.Design.IDesignerHost,System.Type)">
          <source>If the <ph id="ph1">`baseType`</ph> parameter is <ph id="ph2">`null`</ph>, all components are retrieved; otherwise, only component types derived from <ph id="ph3">`baseType`</ph> are returned.</source>
          <target state="translated">Si el <ph id="ph1">`baseType`</ph> parámetro es <ph id="ph2">`null`</ph>, se recuperan todos los componentes; en caso contrario, solo los tipos de componente derivan de <ph id="ph3">`baseType`</ph> se devuelven.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.Design.IComponentDiscoveryService.GetComponentTypes(System.ComponentModel.Design.IDesignerHost,System.Type)">
          <source>When you pass in a value for the <ph id="ph1">`designerHost`</ph> parameter, type resolution is scoped to <ph id="ph2">`designerHost`</ph>.</source>
          <target state="translated">Cuando se pasa un valor para el <ph id="ph1">`designerHost`</ph> parámetro, resolución de tipos tiene un ámbito para <ph id="ph2">`designerHost`</ph>.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.Design.IComponentDiscoveryService.GetComponentTypes(System.ComponentModel.Design.IDesignerHost,System.Type)">
          <source>This means that if there is a <ph id="ph1">&lt;xref:System.Drawing.Design.ToolboxItem&gt;</ph> whose type is on disk, and not in the global assembly cache, its type will fail to load through <ph id="ph2">`designerHost`</ph>.</source>
          <target state="translated">Esto significa que si hay un <ph id="ph1">&lt;xref:System.Drawing.Design.ToolboxItem&gt;</ph> cuyo tipo está en el disco y no en la caché global de ensamblados, se producirá un error de su tipo a cargar a través de <ph id="ph2">`designerHost`</ph>.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.Design.IComponentDiscoveryService.GetComponentTypes(System.ComponentModel.Design.IDesignerHost,System.Type)">
          <source>If you pass in <ph id="ph1">`null`</ph> for <ph id="ph2">`designerHost`</ph>, it returns all types that can be queried from the global assembly cache or the <ph id="ph3">&lt;xref:System.Reflection.Assembly.LoadFrom%2A?displayProperty=nameWithType&gt;</ph> method.</source>
          <target state="translated">Si se pasa <ph id="ph1">`null`</ph> para <ph id="ph2">`designerHost`</ph>, devuelve todos los tipos que se pueden consultar desde la caché global de ensamblados o <ph id="ph3">&lt;xref:System.Reflection.Assembly.LoadFrom%2A?displayProperty=nameWithType&gt;</ph> método.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.Design.IComponentDiscoveryService.GetComponentTypes(System.ComponentModel.Design.IDesignerHost,System.Type)">
          <source>The following code example demonstrates how to use the <ph id="ph1">&lt;xref:System.ComponentModel.Design.IComponentDiscoveryService.GetComponentTypes%2A&gt;</ph> method to find all the types that derive from the <ph id="ph2">&lt;xref:System.Windows.Forms.ScrollableControl&gt;</ph> type.</source>
          <target state="translated">En el ejemplo de código siguiente se muestra cómo utilizar el <ph id="ph1">&lt;xref:System.ComponentModel.Design.IComponentDiscoveryService.GetComponentTypes%2A&gt;</ph> método para buscar todos los tipos que derivan de la <ph id="ph2">&lt;xref:System.Windows.Forms.ScrollableControl&gt;</ph> tipo.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>