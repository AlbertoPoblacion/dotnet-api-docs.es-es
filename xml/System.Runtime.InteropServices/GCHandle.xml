<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="GCHandle.xml" source-language="en-US" target-language="es-ES">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac5946c1ad89f5a538ac3d94bc1906117001ed964b3.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">946c1ad89f5a538ac3d94bc1906117001ed964b3</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-1.0,netcore-1.1,netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,netstandard-1.1,netstandard-1.2,netstandard-1.3,netstandard-1.4,netstandard-1.5,netstandard-1.6,netstandard-2.0,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.Runtime.InteropServices.GCHandle">
          <source>Provides a way to access a managed object from unmanaged memory.</source>
          <target state="translated">Proporciona una forma de obtener acceso a un objeto administrado desde la memoria no administrada.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.InteropServices.GCHandle">
          <source>The <ph id="ph1">&lt;xref:System.Runtime.InteropServices.GCHandle&gt;</ph> structure is used with the <ph id="ph2">&lt;xref:System.Runtime.InteropServices.GCHandleType&gt;</ph> enumeration to create a handle corresponding to any managed object.</source>
          <target state="translated">El <ph id="ph1">&lt;xref:System.Runtime.InteropServices.GCHandle&gt;</ph> estructura se usa con el <ph id="ph2">&lt;xref:System.Runtime.InteropServices.GCHandleType&gt;</ph> enumeración para crear un identificador que corresponde a los objetos administrados.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.InteropServices.GCHandle">
          <source>This handle can be one of four types: <ph id="ph1">`Weak`</ph>, <ph id="ph2">`WeakTrackResurrection`</ph>, <ph id="ph3">`Normal`</ph>, or <ph id="ph4">`Pinned`</ph>.</source>
          <target state="translated">Este identificador puede ser uno de cuatro tipos: <ph id="ph1">`Weak`</ph>, <ph id="ph2">`WeakTrackResurrection`</ph>, <ph id="ph3">`Normal`</ph>, o <ph id="ph4">`Pinned`</ph>.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.InteropServices.GCHandle">
          <source>When the handle has been allocated, you can use it to prevent the managed object from being collected by the garbage collector when an unmanaged client holds the only reference.</source>
          <target state="translated">Cuando se ha asignado el identificador, se puede usar para impedir que el objeto administrado que se recopilan por el recolector de elementos no utilizados cuando un cliente no administrado contiene la única referencia.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.InteropServices.GCHandle">
          <source>Without such a handle, the object can be collected by the garbage collector before completing its work on behalf of the unmanaged client.</source>
          <target state="translated">Sin un identificador de este tipo, el objeto se puede recopilar el recolector de elementos no utilizados antes de completar su trabajo en nombre del cliente no administrado.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.InteropServices.GCHandle">
          <source>You can also use <ph id="ph1">&lt;xref:System.Runtime.InteropServices.GCHandle&gt;</ph> to create a pinned object that returns a memory address to prevent the garbage collector from moving the object in memory.</source>
          <target state="translated">También puede usar <ph id="ph1">&lt;xref:System.Runtime.InteropServices.GCHandle&gt;</ph> para crear un objeto anclado que devuelva una dirección de memoria para evitar que el recolector de elementos no utilizados al mover el objeto en la memoria.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.InteropServices.GCHandle">
          <source>When the handle goes out of scope you must explicitly release it by calling the <ph id="ph1">&lt;xref:System.Runtime.InteropServices.GCHandle.Free%2A&gt;</ph> method; otherwise, memory leaks may occur.</source>
          <target state="translated">Cuando el controlador sale del ámbito debe libere de forma explícita mediante una llamada a la <ph id="ph1">&lt;xref:System.Runtime.InteropServices.GCHandle.Free%2A&gt;</ph> método; pueden producirse pérdidas de memoria en caso contrario,.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.InteropServices.GCHandle">
          <source>When you free a pinned handle, the associated object will be unpinned and will become eligible for garbage collection, if there are no other references to it.</source>
          <target state="translated">Al liberar un controlador anclado, el objeto asociado se liberarán y estará apto para la recolección de elementos no utilizados, si no hay ninguna otra referencia a él.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.InteropServices.GCHandle">
          <source>The following example shows an <ph id="ph1">`App`</ph> class that creates a handle to a managed object using the <ph id="ph2">`GCHandle.Alloc`</ph> method, which prevents the managed object from being collected.</source>
          <target state="translated">El ejemplo siguiente muestra un <ph id="ph1">`App`</ph> clase que crea un identificador a un objeto administrado mediante el <ph id="ph2">`GCHandle.Alloc`</ph> método, lo que impide que el objeto administrado que se recopilan.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.InteropServices.GCHandle">
          <source>A call to the <ph id="ph1">`EnumWindows`</ph> method passes a delegate and a managed object (both declared as managed types, but not shown), and casts the handle to an <ph id="ph2">&lt;xref:System.IntPtr&gt;</ph>.</source>
          <target state="translated">Una llamada a la <ph id="ph1">`EnumWindows`</ph> método pasa un delegado y un objeto administrado (ambos declarados como tipos administrados, pero no se muestra) y convierte el identificador a un <ph id="ph2">&lt;xref:System.IntPtr&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.InteropServices.GCHandle">
          <source>The unmanaged function passes the type back to the caller as a parameter of the callback function.</source>
          <target state="translated">La función no administrada pasa el tipo de vuelta al llamador como un parámetro de la función de devolución de llamada.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" uid="M:System.Runtime.InteropServices.GCHandle.AddrOfPinnedObject">
          <source>Retrieves the address of an object in a <ph id="ph1">&lt;see cref="F:System.Runtime.InteropServices.GCHandleType.Pinned" /&gt;</ph> handle.</source>
          <target state="translated">Recupera la dirección de un objeto en un identificador <ph id="ph1">&lt;see cref="F:System.Runtime.InteropServices.GCHandleType.Pinned" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" uid="M:System.Runtime.InteropServices.GCHandle.AddrOfPinnedObject">
          <source>The address of the pinned object as an <ph id="ph1">&lt;see cref="T:System.IntPtr" /&gt;</ph>.</source>
          <target state="translated">Dirección del objeto anclado como <ph id="ph1">&lt;see cref="T:System.IntPtr" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.InteropServices.GCHandle.AddrOfPinnedObject">
          <source>This method is used to get a stable pointer to the object.</source>
          <target state="translated">Este método se utiliza para obtener un puntero estable al objeto.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.InteropServices.GCHandle.AddrOfPinnedObject">
          <source>Pinning an object prevents the garbage collector from moving it around in memory, thereby reducing the efficiency of the garbage collector.</source>
          <target state="translated">Al anclar un objeto impide que el recolector de elementos no utilizados moverlo en la memoria, lo que reduce la eficacia del recolector de elementos no utilizados.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" uid="M:System.Runtime.InteropServices.GCHandle.AddrOfPinnedObject">
          <source>The handle is any type other than <ph id="ph1">&lt;see cref="F:System.Runtime.InteropServices.GCHandleType.Pinned" /&gt;</ph>.</source>
          <target state="translated">El identificador es de cualquier tipo menos <ph id="ph1">&lt;see cref="F:System.Runtime.InteropServices.GCHandleType.Pinned" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.InteropServices.GCHandle.AddrOfPinnedObject">
          <source>requires full trust for the immediate caller.</source>
          <target state="translated">requiere plena confianza para el llamador inmediato.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.InteropServices.GCHandle.AddrOfPinnedObject">
          <source>This member cannot be used by partially trusted or transparent code.</source>
          <target state="translated">Este miembro no puede usarse por código de confianza parcial o transparente.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" uid="T:System.Runtime.InteropServices.GCHandle">
          <source>Allocates a handle for the specified object.</source>
          <target state="translated">Asigna un identificador para el objeto especificado.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" uid="M:System.Runtime.InteropServices.GCHandle.Alloc(System.Object)">
          <source>The object that uses the <ph id="ph1">&lt;see cref="T:System.Runtime.InteropServices.GCHandle" /&gt;</ph>.</source>
          <target state="translated">Objeto que utiliza <ph id="ph1">&lt;see cref="T:System.Runtime.InteropServices.GCHandle" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" uid="M:System.Runtime.InteropServices.GCHandle.Alloc(System.Object)">
          <source>Allocates a <ph id="ph1">&lt;see cref="F:System.Runtime.InteropServices.GCHandleType.Normal" /&gt;</ph> handle for the specified object.</source>
          <target state="translated">Asigna un identificador <ph id="ph1">&lt;see cref="F:System.Runtime.InteropServices.GCHandleType.Normal" /&gt;</ph> para el objeto especificado.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" uid="M:System.Runtime.InteropServices.GCHandle.Alloc(System.Object)">
          <source>A new <ph id="ph1">&lt;see cref="T:System.Runtime.InteropServices.GCHandle" /&gt;</ph> that protects the object from garbage collection.</source>
          <target state="translated">Nuevo <ph id="ph1">&lt;see cref="T:System.Runtime.InteropServices.GCHandle" /&gt;</ph> que protege al objeto de la recolección de elementos no utilizados.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" uid="M:System.Runtime.InteropServices.GCHandle.Alloc(System.Object)">
          <source>This <ph id="ph1">&lt;see cref="T:System.Runtime.InteropServices.GCHandle" /&gt;</ph> must be released with <ph id="ph2">&lt;see cref="M:System.Runtime.InteropServices.GCHandle.Free" /&gt;</ph> when it is no longer needed.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Runtime.InteropServices.GCHandle" /&gt;</ph> debe liberarse con <ph id="ph2">&lt;see cref="M:System.Runtime.InteropServices.GCHandle.Free" /&gt;</ph> cuando ya no sea necesario.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.InteropServices.GCHandle.Alloc(System.Object)">
          <source><ph id="ph1">&lt;xref:System.Runtime.InteropServices.GCHandleType.Normal&gt;</ph> handles are opaque, which means that you cannot resolve the address of the object it contains through the handle.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Runtime.InteropServices.GCHandleType.Normal&gt;</ph> identificadores son opacos, lo que significa que no se puede resolver la dirección del objeto que contiene a través del identificador.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.InteropServices.GCHandle.Alloc(System.Object)">
          <source>The following example shows an <ph id="ph1">`App`</ph> class that creates a handle to a managed object using the <ph id="ph2">`GCHandle.Alloc`</ph> method, which prevents the managed object from being collected.</source>
          <target state="translated">El ejemplo siguiente muestra un <ph id="ph1">`App`</ph> clase que crea un identificador a un objeto administrado mediante el <ph id="ph2">`GCHandle.Alloc`</ph> método, lo que impide que el objeto administrado que se recopilan.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.InteropServices.GCHandle.Alloc(System.Object)">
          <source>A call to the <ph id="ph1">`EnumWindows`</ph> method passes a delegate and a managed object (both declared as managed types, but not shown), and casts the handle to an <ph id="ph2">&lt;xref:System.IntPtr&gt;</ph>.</source>
          <target state="translated">Una llamada a la <ph id="ph1">`EnumWindows`</ph> método pasa un delegado y un objeto administrado (ambos declarados como tipos administrados, pero no se muestra) y convierte el identificador a un <ph id="ph2">&lt;xref:System.IntPtr&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.InteropServices.GCHandle.Alloc(System.Object)">
          <source>The unmanaged function passes the type back to the caller as a parameter of the callback function.</source>
          <target state="translated">La función no administrada pasa el tipo de vuelta al llamador como un parámetro de la función de devolución de llamada.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" uid="M:System.Runtime.InteropServices.GCHandle.Alloc(System.Object)">
          <source>An instance with nonprimitive (non-blittable) members cannot be pinned.</source>
          <target state="translated">Una instancia con miembros no primitivos (que no pueden transferirse en bloque de bits) no puede anclarse.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.InteropServices.GCHandle.Alloc(System.Object)">
          <source>requires full trust for the immediate caller.</source>
          <target state="translated">requiere plena confianza para el llamador inmediato.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.InteropServices.GCHandle.Alloc(System.Object)">
          <source>This member cannot be used by partially trusted or transparent code.</source>
          <target state="translated">Este miembro no puede usarse por código de confianza parcial o transparente.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" uid="M:System.Runtime.InteropServices.GCHandle.Alloc(System.Object,System.Runtime.InteropServices.GCHandleType)">
          <source>The object that uses the <ph id="ph1">&lt;see cref="T:System.Runtime.InteropServices.GCHandle" /&gt;</ph>.</source>
          <target state="translated">Objeto que utiliza <ph id="ph1">&lt;see cref="T:System.Runtime.InteropServices.GCHandle" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" uid="M:System.Runtime.InteropServices.GCHandle.Alloc(System.Object,System.Runtime.InteropServices.GCHandleType)">
          <source>One of the <ph id="ph1">&lt;see cref="T:System.Runtime.InteropServices.GCHandleType" /&gt;</ph> values, indicating the type of <ph id="ph2">&lt;see cref="T:System.Runtime.InteropServices.GCHandle" /&gt;</ph> to create.</source>
          <target state="translated">Uno de los valores de <ph id="ph1">&lt;see cref="T:System.Runtime.InteropServices.GCHandleType" /&gt;</ph>, que indica el tipo de <ph id="ph2">&lt;see cref="T:System.Runtime.InteropServices.GCHandle" /&gt;</ph> que se va a crear.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" uid="M:System.Runtime.InteropServices.GCHandle.Alloc(System.Object,System.Runtime.InteropServices.GCHandleType)">
          <source>Allocates a handle of the specified type for the specified object.</source>
          <target state="translated">Asigna un identificador del tipo especificado para el objeto especificado.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" uid="M:System.Runtime.InteropServices.GCHandle.Alloc(System.Object,System.Runtime.InteropServices.GCHandleType)">
          <source>A new <ph id="ph1">&lt;see cref="T:System.Runtime.InteropServices.GCHandle" /&gt;</ph> of the specified type.</source>
          <target state="translated">Nuevo <ph id="ph1">&lt;see cref="T:System.Runtime.InteropServices.GCHandle" /&gt;</ph> del tipo especificado.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" uid="M:System.Runtime.InteropServices.GCHandle.Alloc(System.Object,System.Runtime.InteropServices.GCHandleType)">
          <source>This <ph id="ph1">&lt;see cref="T:System.Runtime.InteropServices.GCHandle" /&gt;</ph> must be released with <ph id="ph2">&lt;see cref="M:System.Runtime.InteropServices.GCHandle.Free" /&gt;</ph> when it is no longer needed.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Runtime.InteropServices.GCHandle" /&gt;</ph> debe liberarse con <ph id="ph2">&lt;see cref="M:System.Runtime.InteropServices.GCHandle.Free" /&gt;</ph> cuando ya no sea necesario.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" uid="M:System.Runtime.InteropServices.GCHandle.Alloc(System.Object,System.Runtime.InteropServices.GCHandleType)">
          <source>An instance with nonprimitive (non-blittable) members cannot be pinned.</source>
          <target state="translated">Una instancia con miembros no primitivos (que no pueden transferirse en bloque de bits) no puede anclarse.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.InteropServices.GCHandle.Alloc(System.Object,System.Runtime.InteropServices.GCHandleType)">
          <source>requires full trust for the immediate caller.</source>
          <target state="translated">requiere plena confianza para el llamador inmediato.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.InteropServices.GCHandle.Alloc(System.Object,System.Runtime.InteropServices.GCHandleType)">
          <source>This member cannot be used by partially trusted or transparent code.</source>
          <target state="translated">Este miembro no puede usarse por código de confianza parcial o transparente.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" uid="M:System.Runtime.InteropServices.GCHandle.Equals(System.Object)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Runtime.InteropServices.GCHandle" /&gt;</ph> object to compare with the current <ph id="ph2">&lt;see cref="T:System.Runtime.InteropServices.GCHandle" /&gt;</ph> object.</source>
          <target state="translated">Objeto <ph id="ph1">&lt;see cref="T:System.Runtime.InteropServices.GCHandle" /&gt;</ph> que se va a comparar con el objeto <ph id="ph2">&lt;see cref="T:System.Runtime.InteropServices.GCHandle" /&gt;</ph> actual.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" uid="M:System.Runtime.InteropServices.GCHandle.Equals(System.Object)">
          <source>Determines whether the specified <ph id="ph1">&lt;see cref="T:System.Runtime.InteropServices.GCHandle" /&gt;</ph> object is equal to the current <ph id="ph2">&lt;see cref="T:System.Runtime.InteropServices.GCHandle" /&gt;</ph> object.</source>
          <target state="translated">Determina si el objeto <ph id="ph1">&lt;see cref="T:System.Runtime.InteropServices.GCHandle" /&gt;</ph> especificado es igual al objeto <ph id="ph2">&lt;see cref="T:System.Runtime.InteropServices.GCHandle" /&gt;</ph> actual.</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" uid="M:System.Runtime.InteropServices.GCHandle.Equals(System.Object)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the specified <ph id="ph2">&lt;see cref="T:System.Runtime.InteropServices.GCHandle" /&gt;</ph> object is equal to the current <ph id="ph3">&lt;see cref="T:System.Runtime.InteropServices.GCHandle" /&gt;</ph> object; otherwise, <ph id="ph4">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">Es <ph id="ph1">&lt;see langword="true" /&gt;</ph> si el objeto <ph id="ph2">&lt;see cref="T:System.Runtime.InteropServices.GCHandle" /&gt;</ph> especificado es igual al objeto <ph id="ph3">&lt;see cref="T:System.Runtime.InteropServices.GCHandle" /&gt;</ph> actual; de lo contrario, es <ph id="ph4">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.InteropServices.GCHandle.Equals(System.Object)">
          <source>Two <ph id="ph1">&lt;xref:System.Runtime.InteropServices.GCHandle&gt;</ph> objects are equal if they point to the same memory handle.</source>
          <target state="translated">Dos <ph id="ph1">&lt;xref:System.Runtime.InteropServices.GCHandle&gt;</ph> objetos son iguales si señalan al mismo identificador de memoria.</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" uid="M:System.Runtime.InteropServices.GCHandle.Free">
          <source>Releases a <ph id="ph1">&lt;see cref="T:System.Runtime.InteropServices.GCHandle" /&gt;</ph>.</source>
          <target state="translated">Libera un <ph id="ph1">&lt;see cref="T:System.Runtime.InteropServices.GCHandle" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.InteropServices.GCHandle.Free">
          <source>The caller must ensure that for a given handle, <ph id="ph1">&lt;xref:System.Runtime.InteropServices.GCHandle.Free%2A&gt;</ph> is called only once.</source>
          <target state="translated">El llamador debe asegurarse de que para un identificador dado, <ph id="ph1">&lt;xref:System.Runtime.InteropServices.GCHandle.Free%2A&gt;</ph> se llama solo una vez.</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.InteropServices.GCHandle.Free">
          <source>The following example shows an <ph id="ph1">`App`</ph> class that creates a handle to a managed object using the <ph id="ph2">`GCHandle.Alloc`</ph> method, which prevents the managed object from being collected.</source>
          <target state="translated">El ejemplo siguiente muestra un <ph id="ph1">`App`</ph> clase que crea un identificador a un objeto administrado mediante el <ph id="ph2">`GCHandle.Alloc`</ph> método, lo que impide que el objeto administrado que se recopilan.</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.InteropServices.GCHandle.Free">
          <source>A call to the <ph id="ph1">`EnumWindows`</ph> method passes a delegate and a managed object (both declared as managed types, but not shown), and casts the handle to an <ph id="ph2">&lt;xref:System.IntPtr&gt;</ph>.</source>
          <target state="translated">Una llamada a la <ph id="ph1">`EnumWindows`</ph> método pasa un delegado y un objeto administrado (ambos declarados como tipos administrados, pero no se muestra) y convierte el identificador a un <ph id="ph2">&lt;xref:System.IntPtr&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.InteropServices.GCHandle.Free">
          <source>The unmanaged function passes the type back to the caller as a parameter of the callback function.</source>
          <target state="translated">La función no administrada pasa el tipo de vuelta al llamador como un parámetro de la función de devolución de llamada.</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" uid="M:System.Runtime.InteropServices.GCHandle.Free">
          <source>The handle was freed or never initialized.</source>
          <target state="translated">El identificador fue liberado o nunca se inicializó.</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.InteropServices.GCHandle.Free">
          <source>requires full trust for the immediate caller.</source>
          <target state="translated">requiere plena confianza para el llamador inmediato.</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.InteropServices.GCHandle.Free">
          <source>This member cannot be used by partially trusted or transparent code.</source>
          <target state="translated">Este miembro no puede usarse por código de confianza parcial o transparente.</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" uid="M:System.Runtime.InteropServices.GCHandle.FromIntPtr(System.IntPtr)">
          <source>An <ph id="ph1">&lt;see cref="T:System.IntPtr" /&gt;</ph> handle to a managed object to create a <ph id="ph2">&lt;see cref="T:System.Runtime.InteropServices.GCHandle" /&gt;</ph> object from.</source>
          <target state="translated">Identificador <ph id="ph1">&lt;see cref="T:System.IntPtr" /&gt;</ph> a un objeto administrado del que se va a crear un objeto <ph id="ph2">&lt;see cref="T:System.Runtime.InteropServices.GCHandle" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" uid="M:System.Runtime.InteropServices.GCHandle.FromIntPtr(System.IntPtr)">
          <source>Returns a new <ph id="ph1">&lt;see cref="T:System.Runtime.InteropServices.GCHandle" /&gt;</ph> object created from a handle to a managed object.</source>
          <target state="translated">Devuelve un nuevo objeto <ph id="ph1">&lt;see cref="T:System.Runtime.InteropServices.GCHandle" /&gt;</ph> creado a partir de un identificador a un objeto administrado.</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" uid="M:System.Runtime.InteropServices.GCHandle.FromIntPtr(System.IntPtr)">
          <source>A new <ph id="ph1">&lt;see cref="T:System.Runtime.InteropServices.GCHandle" /&gt;</ph> object that corresponds to the value parameter.</source>
          <target state="translated">Nuevo objeto <ph id="ph1">&lt;see cref="T:System.Runtime.InteropServices.GCHandle" /&gt;</ph> que corresponde al parámetro de valor.</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.InteropServices.GCHandle.FromIntPtr(System.IntPtr)">
          <source>The following code example shows an <ph id="ph1">`App`</ph> class that creates a handle to a managed object using the <ph id="ph2">`GCHandle.Alloc`</ph> method, which prevents the managed object from being collected.</source>
          <target state="translated">El siguiente ejemplo de código muestra un <ph id="ph1">`App`</ph> clase que crea un identificador a un objeto administrado mediante el <ph id="ph2">`GCHandle.Alloc`</ph> método, lo que impide que el objeto administrado que se recopilan.</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.InteropServices.GCHandle.FromIntPtr(System.IntPtr)">
          <source>A call to the <ph id="ph1">`EnumWindows`</ph> method passes a delegate and a managed object (both declared as managed types, but not shown), and casts the handle to an <ph id="ph2">&lt;xref:System.IntPtr&gt;</ph> object.</source>
          <target state="translated">Una llamada a la <ph id="ph1">`EnumWindows`</ph> método pasa un delegado y un objeto administrado (ambos declarados como tipos administrados, pero no se muestra) y convierte el identificador a un <ph id="ph2">&lt;xref:System.IntPtr&gt;</ph> objeto.</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.InteropServices.GCHandle.FromIntPtr(System.IntPtr)">
          <source>The unmanaged function passes the type back to the caller as a parameter of the callback function.</source>
          <target state="translated">La función no administrada pasa el tipo de vuelta al llamador como un parámetro de la función de devolución de llamada.</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" uid="M:System.Runtime.InteropServices.GCHandle.FromIntPtr(System.IntPtr)">
          <source>The value of the <ph id="ph1">&lt;paramref name="value" /&gt;</ph> parameter is <ph id="ph2">&lt;see cref="F:System.IntPtr.Zero" /&gt;</ph>.</source>
          <target state="translated">El valor del parámetro <ph id="ph1">&lt;paramref name="value" /&gt;</ph> es <ph id="ph2">&lt;see cref="F:System.IntPtr.Zero" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.InteropServices.GCHandle.FromIntPtr(System.IntPtr)">
          <source>requires full trust for the immediate caller.</source>
          <target state="translated">requiere plena confianza para el llamador inmediato.</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.InteropServices.GCHandle.FromIntPtr(System.IntPtr)">
          <source>This member cannot be used by partially trusted or transparent code.</source>
          <target state="translated">Este miembro no puede usarse por código de confianza parcial o transparente.</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" uid="M:System.Runtime.InteropServices.GCHandle.GetHashCode">
          <source>Returns an identifier for the current <ph id="ph1">&lt;see cref="T:System.Runtime.InteropServices.GCHandle" /&gt;</ph> object.</source>
          <target state="translated">Devuelve un identificador para el objeto <ph id="ph1">&lt;see cref="T:System.Runtime.InteropServices.GCHandle" /&gt;</ph> actual.</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" uid="M:System.Runtime.InteropServices.GCHandle.GetHashCode">
          <source>An identifier for the current <ph id="ph1">&lt;see cref="T:System.Runtime.InteropServices.GCHandle" /&gt;</ph> object.</source>
          <target state="translated">Identificador para el objeto <ph id="ph1">&lt;see cref="T:System.Runtime.InteropServices.GCHandle" /&gt;</ph> actual.</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.InteropServices.GCHandle.GetHashCode">
          <source>The <ph id="ph1">&lt;xref:System.Runtime.InteropServices.GCHandle.GetHashCode%2A&gt;</ph> method returns an integer representation of the internal memory handle encapsulated by the <ph id="ph2">&lt;xref:System.Runtime.InteropServices.GCHandle&gt;</ph> structure.</source>
          <target state="translated">El <ph id="ph1">&lt;xref:System.Runtime.InteropServices.GCHandle.GetHashCode%2A&gt;</ph> método devuelve una representación de entero del identificador de memoria interna encapsulado por el <ph id="ph2">&lt;xref:System.Runtime.InteropServices.GCHandle&gt;</ph> estructura.</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" uid="P:System.Runtime.InteropServices.GCHandle.IsAllocated">
          <source>Gets a value indicating whether the handle is allocated.</source>
          <target state="translated">Obtiene un valor que indica si el identificador está asignado.</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Runtime.InteropServices.GCHandle.IsAllocated">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the handle is allocated; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">Es <ph id="ph1">&lt;see langword="true" /&gt;</ph> si el identificador está asignado; en caso contrario, es <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Runtime.InteropServices.GCHandle.IsAllocated">
          <source>Use this property when using <ph id="ph1">&lt;xref:System.Runtime.InteropServices.GCHandleType.Weak&gt;</ph> handles to determine if the <ph id="ph2">&lt;xref:System.Runtime.InteropServices.GCHandle&gt;</ph> is still available.</source>
          <target state="translated">Utilice esta propiedad cuando se usa <ph id="ph1">&lt;xref:System.Runtime.InteropServices.GCHandleType.Weak&gt;</ph> controladores para determinar si el <ph id="ph2">&lt;xref:System.Runtime.InteropServices.GCHandle&gt;</ph> sigue estando disponible.</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Runtime.InteropServices.GCHandle.IsAllocated">
          <source>When the garbage collector collects the object, the <ph id="ph1">&lt;xref:System.Runtime.InteropServices.GCHandleType.Weak&gt;</ph> handle can still be resurrected in the finalizer.</source>
          <target state="translated">Cuando el recolector de elementos no utilizados recoge el objeto, el <ph id="ph1">&lt;xref:System.Runtime.InteropServices.GCHandleType.Weak&gt;</ph> identificador aún puede restablecerse en el finalizador.</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Runtime.InteropServices.GCHandle.IsAllocated">
          <source>In that case, the handle is not allocated (it is lost when the garbage collector attempts to collect the object), even though the target object is valid.</source>
          <target state="translated">En ese caso, el identificador no se asigna (se pierde cuando el recolector de elementos no utilizados intenta recoger el objeto), aunque el objeto de destino es válido.</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" uid="M:System.Runtime.InteropServices.GCHandle.op_Equality(System.Runtime.InteropServices.GCHandle,System.Runtime.InteropServices.GCHandle)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Runtime.InteropServices.GCHandle" /&gt;</ph> object to compare with the <bpt id="p1">&lt;c&gt;</bpt>b<ept id="p1">&lt;/c&gt;</ept> parameter.</source>
          <target state="translated">Objeto <ph id="ph1">&lt;see cref="T:System.Runtime.InteropServices.GCHandle" /&gt;</ph> que se va a comparar con el parámetro <bpt id="p1">&lt;c&gt;</bpt>b<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" uid="M:System.Runtime.InteropServices.GCHandle.op_Equality(System.Runtime.InteropServices.GCHandle,System.Runtime.InteropServices.GCHandle)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Runtime.InteropServices.GCHandle" /&gt;</ph> object to compare with the <bpt id="p1">&lt;c&gt;</bpt>a<ept id="p1">&lt;/c&gt;</ept> parameter.</source>
          <target state="translated">Objeto <ph id="ph1">&lt;see cref="T:System.Runtime.InteropServices.GCHandle" /&gt;</ph> que se va a comparar con el parámetro <bpt id="p1">&lt;c&gt;</bpt>a<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" uid="M:System.Runtime.InteropServices.GCHandle.op_Equality(System.Runtime.InteropServices.GCHandle,System.Runtime.InteropServices.GCHandle)">
          <source>Returns a value indicating whether two <ph id="ph1">&lt;see cref="T:System.Runtime.InteropServices.GCHandle" /&gt;</ph> objects are equal.</source>
          <target state="translated">Devuelve un valor que indica si dos objetos <ph id="ph1">&lt;see cref="T:System.Runtime.InteropServices.GCHandle" /&gt;</ph> son iguales.</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" uid="M:System.Runtime.InteropServices.GCHandle.op_Equality(System.Runtime.InteropServices.GCHandle,System.Runtime.InteropServices.GCHandle)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the <ph id="ph2">&lt;paramref name="a" /&gt;</ph> and <ph id="ph3">&lt;paramref name="b" /&gt;</ph> parameters are equal; otherwise, <ph id="ph4">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">Es <ph id="ph1">&lt;see langword="true" /&gt;</ph> si los parámetros <ph id="ph2">&lt;paramref name="a" /&gt;</ph> y <ph id="ph3">&lt;paramref name="b" /&gt;</ph> son iguales; en caso contrario, es <ph id="ph4">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.InteropServices.GCHandle.op_Equality(System.Runtime.InteropServices.GCHandle,System.Runtime.InteropServices.GCHandle)">
          <source>The equivalent method for this operator is <ph id="ph1">&lt;xref:System.Runtime.InteropServices.GCHandle.Equals%2A?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">El método equivalente para este operador es <ph id="ph1">&lt;xref:System.Runtime.InteropServices.GCHandle.Equals%2A?displayProperty=nameWithType&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" uid="T:System.Runtime.InteropServices.GCHandle">
          <source>Converts the value of a <ph id="ph1">&lt;see cref="T:System.Runtime.InteropServices.GCHandle" /&gt;</ph> object to another type.</source>
          <target state="translated">Convierte el valor de un objeto <ph id="ph1">&lt;see cref="T:System.Runtime.InteropServices.GCHandle" /&gt;</ph> en otro tipo.</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" uid="M:System.Runtime.InteropServices.GCHandle.op_Explicit(System.IntPtr)~System.Runtime.InteropServices.GCHandle">
          <source>An <ph id="ph1">&lt;see cref="T:System.IntPtr" /&gt;</ph> that indicates the handle for which the conversion is required.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.IntPtr" /&gt;</ph> que indica el identificador para el que se requiere la conversión.</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" uid="M:System.Runtime.InteropServices.GCHandle.op_Explicit(System.IntPtr)~System.Runtime.InteropServices.GCHandle">
          <source>A <ph id="ph1">&lt;see cref="T:System.Runtime.InteropServices.GCHandle" /&gt;</ph> is stored using an internal integer representation.</source>
          <target state="translated">Un <ph id="ph1">&lt;see cref="T:System.Runtime.InteropServices.GCHandle" /&gt;</ph> se almacena mediante una representación de entero interna.</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" uid="M:System.Runtime.InteropServices.GCHandle.op_Explicit(System.IntPtr)~System.Runtime.InteropServices.GCHandle">
          <source>The stored <ph id="ph1">&lt;see cref="T:System.Runtime.InteropServices.GCHandle" /&gt;</ph> object using an internal integer representation.</source>
          <target state="translated">Objeto <ph id="ph1">&lt;see cref="T:System.Runtime.InteropServices.GCHandle" /&gt;</ph> almacenado mediante una representación de entero interna.</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.InteropServices.GCHandle.op_Explicit(System.IntPtr)~System.Runtime.InteropServices.GCHandle">
          <source>This method allows you to retrieve a <ph id="ph1">&lt;xref:System.Runtime.InteropServices.GCHandle&gt;</ph> from an integer value.</source>
          <target state="translated">Este método le permite recuperar una <ph id="ph1">&lt;xref:System.Runtime.InteropServices.GCHandle&gt;</ph> de un valor entero.</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.InteropServices.GCHandle.op_Explicit(System.IntPtr)~System.Runtime.InteropServices.GCHandle">
          <source>requires full trust for the immediate caller.</source>
          <target state="translated">requiere plena confianza para el llamador inmediato.</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.InteropServices.GCHandle.op_Explicit(System.IntPtr)~System.Runtime.InteropServices.GCHandle">
          <source>This member cannot be used by partially trusted or transparent code.</source>
          <target state="translated">Este miembro no puede usarse por código de confianza parcial o transparente.</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve" uid="M:System.Runtime.InteropServices.GCHandle.op_Explicit(System.Runtime.InteropServices.GCHandle)~System.IntPtr">
          <source>The <ph id="ph1">&lt;see cref="T:System.Runtime.InteropServices.GCHandle" /&gt;</ph> for which the integer is required.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Runtime.InteropServices.GCHandle" /&gt;</ph> para el que se requiere el entero.</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve" uid="M:System.Runtime.InteropServices.GCHandle.op_Explicit(System.Runtime.InteropServices.GCHandle)~System.IntPtr">
          <source>A <ph id="ph1">&lt;see cref="T:System.Runtime.InteropServices.GCHandle" /&gt;</ph> is stored using an internal integer representation.</source>
          <target state="translated">Un <ph id="ph1">&lt;see cref="T:System.Runtime.InteropServices.GCHandle" /&gt;</ph> se almacena mediante una representación de entero interna.</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve" uid="M:System.Runtime.InteropServices.GCHandle.op_Explicit(System.Runtime.InteropServices.GCHandle)~System.IntPtr">
          <source>The integer value.</source>
          <target state="translated">El valor del entero.</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.InteropServices.GCHandle.op_Explicit(System.Runtime.InteropServices.GCHandle)~System.IntPtr">
          <source>This method can be used to retrieve the integer value from a <ph id="ph1">&lt;xref:System.Runtime.InteropServices.GCHandle&gt;</ph>.</source>
          <target state="translated">Este método se puede utilizar para recuperar el valor entero de un <ph id="ph1">&lt;xref:System.Runtime.InteropServices.GCHandle&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.InteropServices.GCHandle.op_Explicit(System.Runtime.InteropServices.GCHandle)~System.IntPtr">
          <source>requires full trust for the immediate caller.</source>
          <target state="translated">requiere plena confianza para el llamador inmediato.</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.InteropServices.GCHandle.op_Explicit(System.Runtime.InteropServices.GCHandle)~System.IntPtr">
          <source>This member cannot be used by partially trusted or transparent code.</source>
          <target state="translated">Este miembro no puede usarse por código de confianza parcial o transparente.</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve" uid="M:System.Runtime.InteropServices.GCHandle.op_Inequality(System.Runtime.InteropServices.GCHandle,System.Runtime.InteropServices.GCHandle)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Runtime.InteropServices.GCHandle" /&gt;</ph> object to compare with the <bpt id="p1">&lt;c&gt;</bpt>b<ept id="p1">&lt;/c&gt;</ept> parameter.</source>
          <target state="translated">Objeto <ph id="ph1">&lt;see cref="T:System.Runtime.InteropServices.GCHandle" /&gt;</ph> que se va a comparar con el parámetro <bpt id="p1">&lt;c&gt;</bpt>b<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve" uid="M:System.Runtime.InteropServices.GCHandle.op_Inequality(System.Runtime.InteropServices.GCHandle,System.Runtime.InteropServices.GCHandle)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Runtime.InteropServices.GCHandle" /&gt;</ph> object to compare with the <bpt id="p1">&lt;c&gt;</bpt>a<ept id="p1">&lt;/c&gt;</ept> parameter.</source>
          <target state="translated">Objeto <ph id="ph1">&lt;see cref="T:System.Runtime.InteropServices.GCHandle" /&gt;</ph> que se va a comparar con el parámetro <bpt id="p1">&lt;c&gt;</bpt>a<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve" uid="M:System.Runtime.InteropServices.GCHandle.op_Inequality(System.Runtime.InteropServices.GCHandle,System.Runtime.InteropServices.GCHandle)">
          <source>Returns a value indicating whether two <ph id="ph1">&lt;see cref="T:System.Runtime.InteropServices.GCHandle" /&gt;</ph> objects are not equal.</source>
          <target state="translated">Devuelve un valor que indica si dos objetos <ph id="ph1">&lt;see cref="T:System.Runtime.InteropServices.GCHandle" /&gt;</ph> no son iguales.</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve" uid="M:System.Runtime.InteropServices.GCHandle.op_Inequality(System.Runtime.InteropServices.GCHandle,System.Runtime.InteropServices.GCHandle)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the <ph id="ph2">&lt;paramref name="a" /&gt;</ph> and <ph id="ph3">&lt;paramref name="b" /&gt;</ph> parameters are not equal; otherwise, <ph id="ph4">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">Es <ph id="ph1">&lt;see langword="true" /&gt;</ph> si los parámetros <ph id="ph2">&lt;paramref name="a" /&gt;</ph> y <ph id="ph3">&lt;paramref name="b" /&gt;</ph> no son iguales; en caso contrario, es <ph id="ph4">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.InteropServices.GCHandle.op_Inequality(System.Runtime.InteropServices.GCHandle,System.Runtime.InteropServices.GCHandle)">
          <source>The equivalent method for this operator is <ph id="ph1">&lt;xref:System.Runtime.InteropServices.GCHandle.Equals%2A?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">El método equivalente para este operador es <ph id="ph1">&lt;xref:System.Runtime.InteropServices.GCHandle.Equals%2A?displayProperty=nameWithType&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve" uid="P:System.Runtime.InteropServices.GCHandle.Target">
          <source>Gets or sets the object this handle represents.</source>
          <target state="translated">Obtiene o establece el objeto al que representa este identificador.</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Runtime.InteropServices.GCHandle.Target">
          <source>The object this handle represents.</source>
          <target state="translated">Objeto que representa este identificador.</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Runtime.InteropServices.GCHandle.Target">
          <source>The following example shows an <ph id="ph1">`App`</ph> class that creates a handle to a managed object using the <ph id="ph2">`GCHandle.Alloc`</ph> method, which prevents the managed object from being collected.</source>
          <target state="translated">El ejemplo siguiente muestra un <ph id="ph1">`App`</ph> clase que crea un identificador a un objeto administrado mediante el <ph id="ph2">`GCHandle.Alloc`</ph> método, lo que impide que el objeto administrado que se recopilan.</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Runtime.InteropServices.GCHandle.Target">
          <source>A call to the <ph id="ph1">`EnumWindows`</ph> method passes a delegate and a managed object (both declared as managed types, but not shown), and casts the handle to an <ph id="ph2">&lt;xref:System.IntPtr&gt;</ph>.</source>
          <target state="translated">Una llamada a la <ph id="ph1">`EnumWindows`</ph> método pasa un delegado y un objeto administrado (ambos declarados como tipos administrados, pero no se muestra) y convierte el identificador a un <ph id="ph2">&lt;xref:System.IntPtr&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Runtime.InteropServices.GCHandle.Target">
          <source>The unmanaged function passes the type back to the caller as a parameter of the callback function.</source>
          <target state="translated">La función no administrada pasa el tipo de vuelta al llamador como un parámetro de la función de devolución de llamada.</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve" uid="P:System.Runtime.InteropServices.GCHandle.Target">
          <source>The handle was freed, or never initialized.</source>
          <target state="translated">El identificador fue liberado o nunca se inicializó.</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Runtime.InteropServices.GCHandle.Target">
          <source>requires full trust for the immediate caller.</source>
          <target state="translated">requiere plena confianza para el llamador inmediato.</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Runtime.InteropServices.GCHandle.Target">
          <source>This member cannot be used by partially trusted or transparent code.</source>
          <target state="translated">Este miembro no puede usarse por código de confianza parcial o transparente.</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve" uid="M:System.Runtime.InteropServices.GCHandle.ToIntPtr(System.Runtime.InteropServices.GCHandle)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Runtime.InteropServices.GCHandle" /&gt;</ph> object to retrieve an internal integer representation from.</source>
          <target state="translated">Objeto <ph id="ph1">&lt;see cref="T:System.Runtime.InteropServices.GCHandle" /&gt;</ph> del que se va a recuperar una representación de entero interno.</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve" uid="M:System.Runtime.InteropServices.GCHandle.ToIntPtr(System.Runtime.InteropServices.GCHandle)">
          <source>Returns the internal integer representation of a <ph id="ph1">&lt;see cref="T:System.Runtime.InteropServices.GCHandle" /&gt;</ph> object.</source>
          <target state="translated">Devuelve la representación entera interna de un objeto <ph id="ph1">&lt;see cref="T:System.Runtime.InteropServices.GCHandle" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve" uid="M:System.Runtime.InteropServices.GCHandle.ToIntPtr(System.Runtime.InteropServices.GCHandle)">
          <source>An <ph id="ph1">&lt;see cref="T:System.IntPtr" /&gt;</ph> object that represents a <ph id="ph2">&lt;see cref="T:System.Runtime.InteropServices.GCHandle" /&gt;</ph> object.</source>
          <target state="translated">Objeto <ph id="ph1">&lt;see cref="T:System.IntPtr" /&gt;</ph> que representa un objeto <ph id="ph2">&lt;see cref="T:System.Runtime.InteropServices.GCHandle" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.InteropServices.GCHandle.ToIntPtr(System.Runtime.InteropServices.GCHandle)">
          <source>The following code example shows an <ph id="ph1">`App`</ph> class that creates a handle to a managed object using the <ph id="ph2">`GCHandle.Alloc`</ph> method, which prevents the managed object from being collected.</source>
          <target state="translated">El siguiente ejemplo de código muestra un <ph id="ph1">`App`</ph> clase que crea un identificador a un objeto administrado mediante el <ph id="ph2">`GCHandle.Alloc`</ph> método, lo que impide que el objeto administrado que se recopilan.</target>       </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.InteropServices.GCHandle.ToIntPtr(System.Runtime.InteropServices.GCHandle)">
          <source>A call to the <ph id="ph1">`EnumWindows`</ph> method passes a delegate and a managed object (both declared as managed types, but not shown), and casts the handle to an <ph id="ph2">&lt;xref:System.IntPtr&gt;</ph> object.</source>
          <target state="translated">Una llamada a la <ph id="ph1">`EnumWindows`</ph> método pasa un delegado y un objeto administrado (ambos declarados como tipos administrados, pero no se muestra) y convierte el identificador a un <ph id="ph2">&lt;xref:System.IntPtr&gt;</ph> objeto.</target>       </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.InteropServices.GCHandle.ToIntPtr(System.Runtime.InteropServices.GCHandle)">
          <source>The unmanaged function passes the type back to the caller as a parameter of the callback function.</source>
          <target state="translated">La función no administrada pasa el tipo de vuelta al llamador como un parámetro de la función de devolución de llamada.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>