<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="HandleRef.xml" source-language="en-US" target-language="es-ES">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac5c6025563932e240869a1ba4e28b71c466b6e7e86.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">c6025563932e240869a1ba4e28b71c466b6e7e86</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,netstandard-2.0,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.Runtime.InteropServices.HandleRef">
          <source>Wraps a managed object holding a handle to a resource that is passed to unmanaged code using platform invoke.</source>
          <target state="translated">Encapsula un objeto administrado que contiene un identificador de un recurso que se pasa a código no administrado mediante la invocación de la plataforma.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.InteropServices.HandleRef">
          <source>Starting with the .NET Framework 2.0, the functionality of the <ph id="ph1">&lt;xref:System.Runtime.InteropServices.HandleRef&gt;</ph> class has been replaced by the <ph id="ph2">&lt;xref:System.Runtime.InteropServices.SafeHandle&gt;</ph> class and its derived classes, as well as by the <ph id="ph3">&lt;xref:System.Runtime.InteropServices.CriticalHandle&gt;</ph> class.</source>
          <target state="translated">A partir de .NET Framework 2.0, la funcionalidad de la <ph id="ph1">&lt;xref:System.Runtime.InteropServices.HandleRef&gt;</ph> clase se ha reemplazado por la <ph id="ph2">&lt;xref:System.Runtime.InteropServices.SafeHandle&gt;</ph> clase y sus clases derivadas, como así como por el <ph id="ph3">&lt;xref:System.Runtime.InteropServices.CriticalHandle&gt;</ph> clase.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.InteropServices.HandleRef">
          <source>If you use platform invoke to call a managed object, and the object is not referenced elsewhere after the platform invoke call, it is possible for the garbage collector to finalize the managed object.</source>
          <target state="translated">Si usa la plataforma de invocación para llamar a un objeto administrado y el objeto no se hace referencia en otro lugar después de llamada de invocación de la plataforma, es posible que el recolector de elementos no utilizados finalice el objeto administrado.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.InteropServices.HandleRef">
          <source>This action releases the resource and invalidates the handle, causing the platform invoke call to fail.</source>
          <target state="translated">Esta acción libera el recurso e invalida el identificador, provocando la plataforma de invocar la llamada produzca un error.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.InteropServices.HandleRef">
          <source>Wrapping a handle with <ph id="ph1">&lt;xref:System.Runtime.InteropServices.HandleRef&gt;</ph> guarantees that the managed object is not garbage collected until the platform invoke call completes.</source>
          <target state="translated">Ajuste de un identificador con <ph id="ph1">&lt;xref:System.Runtime.InteropServices.HandleRef&gt;</ph> completa garantiza que el objeto administrado no es recolección hasta que la llamada de invocación de la plataforma.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.InteropServices.HandleRef">
          <source>For a description of platform invoke services, see <bpt id="p1">[</bpt>Consuming Unmanaged DLL Functions<ept id="p1">](~/docs/framework/interop/consuming-unmanaged-dll-functions.md)</ept>.</source>
          <target state="translated">Para obtener una descripción de la plataforma de servicios de invocación, consulte <bpt id="p1">[</bpt>consumir funciones DLL no administradas<ept id="p1">](~/docs/framework/interop/consuming-unmanaged-dll-functions.md)</ept>.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.InteropServices.HandleRef">
          <source>The <ph id="ph1">&lt;xref:System.Runtime.InteropServices.HandleRef&gt;</ph> value type, like <ph id="ph2">&lt;xref:System.Runtime.InteropServices.GCHandle&gt;</ph>, is a special type recognized by the interop marshaler.</source>
          <target state="translated">El <ph id="ph1">&lt;xref:System.Runtime.InteropServices.HandleRef&gt;</ph> tipo de valor, como <ph id="ph2">&lt;xref:System.Runtime.InteropServices.GCHandle&gt;</ph>, es un tipo especial reconocido por el serializador de interoperabilidad.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.InteropServices.HandleRef">
          <source>A normal, nonpinned <ph id="ph1">&lt;xref:System.Runtime.InteropServices.GCHandle&gt;</ph> also prevents untimely garbage collection, yet <ph id="ph2">&lt;xref:System.Runtime.InteropServices.HandleRef&gt;</ph> provides better performance.</source>
          <target state="translated">Normal, anclado <ph id="ph1">&lt;xref:System.Runtime.InteropServices.GCHandle&gt;</ph> también evita la recolección prematura, todavía <ph id="ph2">&lt;xref:System.Runtime.InteropServices.HandleRef&gt;</ph> proporciona un mejor rendimiento.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.InteropServices.HandleRef">
          <source>Although using <ph id="ph1">&lt;xref:System.Runtime.InteropServices.HandleRef&gt;</ph> to keep an object alive for the duration of a platform invoke call is preferred, you can also use the <ph id="ph2">&lt;xref:System.GC.KeepAlive%2A?displayProperty=nameWithType&gt;</ph> method for the same purpose.</source>
          <target state="translated">Aunque el uso de <ph id="ph1">&lt;xref:System.Runtime.InteropServices.HandleRef&gt;</ph> mantener activa un objeto de llamada de invocación de la duración de una plataforma se prefiere, también puede usar el <ph id="ph2">&lt;xref:System.GC.KeepAlive%2A?displayProperty=nameWithType&gt;</ph> método con el mismo propósito.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.InteropServices.HandleRef">
          <source>The <ph id="ph1">&lt;xref:System.Runtime.InteropServices.HandleRef&gt;</ph> constructor takes two parameters: an <ph id="ph2">&lt;xref:System.Object&gt;</ph> representing the wrapper, and an <ph id="ph3">&lt;xref:System.IntPtr&gt;</ph> representing the unmanaged handle.</source>
          <target state="translated">El <ph id="ph1">&lt;xref:System.Runtime.InteropServices.HandleRef&gt;</ph> constructor toma dos parámetros: una <ph id="ph2">&lt;xref:System.Object&gt;</ph> que representa el contenedor y un <ph id="ph3">&lt;xref:System.IntPtr&gt;</ph> que representa el identificador no administrado.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.InteropServices.HandleRef">
          <source>The interop marshaler passes only the handle to unmanaged code, and guarantees that the wrapper (passed as the first parameter to the constructor of the <ph id="ph1">`HandleRef`</ph>) remains alive for the duration of the call.</source>
          <target state="translated">El serializador de interoperabilidad sólo pasa el identificador al código no administrado y garantiza que el contenedor (pasado como primer parámetro al constructor de la <ph id="ph1">`HandleRef`</ph>) permanece activo durante la duración de la llamada.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" uid="M:System.Runtime.InteropServices.HandleRef.#ctor(System.Object,System.IntPtr)">
          <source>A managed object that should not be finalized until the platform invoke call returns.</source>
          <target state="translated">Objeto administrado que no debe finalizarse hasta que se devuelva la llamada de invocación de plataforma.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" uid="M:System.Runtime.InteropServices.HandleRef.#ctor(System.Object,System.IntPtr)">
          <source>An <ph id="ph1">&lt;see cref="T:System.IntPtr" /&gt;</ph> that indicates a handle to a resource.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.IntPtr" /&gt;</ph> que indica un identificador de un recurso.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" uid="M:System.Runtime.InteropServices.HandleRef.#ctor(System.Object,System.IntPtr)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Runtime.InteropServices.HandleRef" /&gt;</ph> class with the object to wrap and a handle to the resource used by unmanaged code.</source>
          <target state="translated">Inicializa una nueva instancia de la clase <ph id="ph1">&lt;see cref="T:System.Runtime.InteropServices.HandleRef" /&gt;</ph> con el objeto que se va a incluir en un contenedor y un identificador del recurso utilizado por el código no administrado.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" uid="P:System.Runtime.InteropServices.HandleRef.Handle">
          <source>Gets the handle to a resource.</source>
          <target state="translated">Obtiene el identificador de un recurso.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Runtime.InteropServices.HandleRef.Handle">
          <source>The handle to a resource.</source>
          <target state="translated">Identificador de un recurso.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" uid="M:System.Runtime.InteropServices.HandleRef.op_Explicit(System.Runtime.InteropServices.HandleRef)~System.IntPtr">
          <source>The object that needs a handle.</source>
          <target state="translated">Objeto que necesita un identificador.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" uid="M:System.Runtime.InteropServices.HandleRef.op_Explicit(System.Runtime.InteropServices.HandleRef)~System.IntPtr">
          <source>Returns the handle to a resource of the specified <ph id="ph1">&lt;see cref="T:System.Runtime.InteropServices.HandleRef" /&gt;</ph> object.</source>
          <target state="translated">Devuelve el identificador de un recurso del objeto <ph id="ph1">&lt;see cref="T:System.Runtime.InteropServices.HandleRef" /&gt;</ph> especificado.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" uid="M:System.Runtime.InteropServices.HandleRef.op_Explicit(System.Runtime.InteropServices.HandleRef)~System.IntPtr">
          <source>The handle to a resource of the specified <ph id="ph1">&lt;see cref="T:System.Runtime.InteropServices.HandleRef" /&gt;</ph> object.</source>
          <target state="translated">Identificador de un recurso del objeto <ph id="ph1">&lt;see cref="T:System.Runtime.InteropServices.HandleRef" /&gt;</ph> especificado.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.InteropServices.HandleRef.op_Explicit(System.Runtime.InteropServices.HandleRef)~System.IntPtr">
          <source>The equivalent method for this operator is <ph id="ph1">&lt;xref:System.Runtime.InteropServices.HandleRef.Handle?displayProperty=nameWithType&gt;</ph></source>
          <target state="translated">El método equivalente para este operador es <ph id="ph1">&lt;xref:System.Runtime.InteropServices.HandleRef.Handle?displayProperty=nameWithType&gt;</ph></target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" uid="M:System.Runtime.InteropServices.HandleRef.ToIntPtr(System.Runtime.InteropServices.HandleRef)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Runtime.InteropServices.HandleRef" /&gt;</ph> object to retrieve an internal integer representation from.</source>
          <target state="translated">Objeto <ph id="ph1">&lt;see cref="T:System.Runtime.InteropServices.HandleRef" /&gt;</ph> del que se va a recuperar una representación de entero interno.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" uid="M:System.Runtime.InteropServices.HandleRef.ToIntPtr(System.Runtime.InteropServices.HandleRef)">
          <source>Returns the internal integer representation of a <ph id="ph1">&lt;see cref="T:System.Runtime.InteropServices.HandleRef" /&gt;</ph> object.</source>
          <target state="translated">Devuelve la representación entera interna de un objeto <ph id="ph1">&lt;see cref="T:System.Runtime.InteropServices.HandleRef" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" uid="M:System.Runtime.InteropServices.HandleRef.ToIntPtr(System.Runtime.InteropServices.HandleRef)">
          <source>An <ph id="ph1">&lt;see cref="T:System.IntPtr" /&gt;</ph> object that represents a <ph id="ph2">&lt;see cref="T:System.Runtime.InteropServices.HandleRef" /&gt;</ph> object.</source>
          <target state="translated">Objeto <ph id="ph1">&lt;see cref="T:System.IntPtr" /&gt;</ph> que representa un objeto <ph id="ph2">&lt;see cref="T:System.Runtime.InteropServices.HandleRef" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" uid="P:System.Runtime.InteropServices.HandleRef.Wrapper">
          <source>Gets the object holding the handle to a resource.</source>
          <target state="translated">Obtiene el objeto que contiene el identificador de un recurso.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Runtime.InteropServices.HandleRef.Wrapper">
          <source>The object holding the handle to a resource.</source>
          <target state="translated">Objeto que contiene el identificador de un recurso.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>