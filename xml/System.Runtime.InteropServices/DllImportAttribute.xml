<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="DllImportAttribute.xml" source-language="en-US" target-language="es-ES">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac523e3cd02f7b0f8ccc396f11c5abc9af18628f6b7.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">23e3cd02f7b0f8ccc396f11c5abc9af18628f6b7</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-1.0,netcore-1.1,netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,netstandard-1.1,netstandard-1.2,netstandard-1.3,netstandard-1.4,netstandard-1.5,netstandard-1.6,netstandard-2.0,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.Runtime.InteropServices.DllImportAttribute">
          <source>Indicates that the attributed method is exposed by an unmanaged dynamic-link library (DLL) as a static entry point.</source>
          <target state="translated">Indica que una biblioteca de vínculos dinámicos (DLL) no administrada expone el método con atributos como un punto de entrada estático.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.InteropServices.DllImportAttribute">
          <source>You can apply this attribute to methods.</source>
          <target state="translated">Este atributo se puede aplicar a métodos.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.InteropServices.DllImportAttribute">
          <source>The <ph id="ph1">&lt;xref:System.Runtime.InteropServices.DllImportAttribute&gt;</ph> attribute provides the information needed to call a function exported from an unmanaged DLL.</source>
          <target state="translated">El <ph id="ph1">&lt;xref:System.Runtime.InteropServices.DllImportAttribute&gt;</ph> atributo proporciona la información necesaria para llamar a una función exportada desde una DLL no administrada.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.InteropServices.DllImportAttribute">
          <source>As a minimum requirement, you must supply the name of the DLL containing the entry point.</source>
          <target state="translated">Como requisito mínimo, debe proporcionar el nombre de la DLL que contiene el punto de entrada.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.InteropServices.DllImportAttribute">
          <source>You apply this attribute directly to C# and C++ method definitions; however, the Visual Basic compiler emits this attribute when you use the <ph id="ph1">`Declare`</ph> statement.</source>
          <target state="translated">Este atributo se aplican directamente a C# y definiciones de método de C++; Sin embargo, el compilador de Visual Basic emite este atributo cuando se usa el <ph id="ph1">`Declare`</ph> instrucción.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.InteropServices.DllImportAttribute">
          <source>For complex method definitions that include <ph id="ph1">&lt;xref:System.Runtime.InteropServices.DllImportAttribute.BestFitMapping&gt;</ph>, <ph id="ph2">&lt;xref:System.Runtime.InteropServices.DllImportAttribute.CallingConvention&gt;</ph>, <ph id="ph3">&lt;xref:System.Runtime.InteropServices.DllImportAttribute.ExactSpelling&gt;</ph>, <ph id="ph4">&lt;xref:System.Runtime.InteropServices.DllImportAttribute.PreserveSig&gt;</ph>, <ph id="ph5">&lt;xref:System.Runtime.InteropServices.DllImportAttribute.SetLastError&gt;</ph>, or <ph id="ph6">&lt;xref:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar&gt;</ph> fields, you apply this attribute directly to Visual Basic method definitions.</source>
          <target state="translated">Para obtener definiciones de método complejo que incluyen <ph id="ph1">&lt;xref:System.Runtime.InteropServices.DllImportAttribute.BestFitMapping&gt;</ph>, <ph id="ph2">&lt;xref:System.Runtime.InteropServices.DllImportAttribute.CallingConvention&gt;</ph>, <ph id="ph3">&lt;xref:System.Runtime.InteropServices.DllImportAttribute.ExactSpelling&gt;</ph>, <ph id="ph4">&lt;xref:System.Runtime.InteropServices.DllImportAttribute.PreserveSig&gt;</ph>, <ph id="ph5">&lt;xref:System.Runtime.InteropServices.DllImportAttribute.SetLastError&gt;</ph>, o <ph id="ph6">&lt;xref:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar&gt;</ph> campos, aplicar este atributo directamente a las definiciones de método de Visual Basic.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.InteropServices.DllImportAttribute">
          <source><bpt id="p1">**</bpt>Note<ept id="p1">**</ept> JScript does not support this attribute.</source>
          <target state="translated"><bpt id="p1">**</bpt>Tenga en cuenta<ept id="p1">**</ept> JScript no admite este atributo.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.InteropServices.DllImportAttribute">
          <source>You can use C# or Visual Basic wrapper classes to access unmanaged API methods from JScript programs.</source>
          <target state="translated">Puede usar C# o Visual Basic estas clases contenedoras para tener acceso a los métodos de API no administrados desde programas JScript.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.InteropServices.DllImportAttribute">
          <source>For additional information about using the platform invoke service to access functions in unmanaged DLLs, see <bpt id="p1">[</bpt>Consuming Unmanaged DLL Functions<ept id="p1">](~/docs/framework/interop/consuming-unmanaged-dll-functions.md)</ept>.</source>
          <target state="translated">Para obtener información adicional acerca del uso de la plataforma de invocación de servicio a las funciones de acceso de DLL no administradas, vea <bpt id="p1">[</bpt>consumir funciones DLL no administradas<ept id="p1">](~/docs/framework/interop/consuming-unmanaged-dll-functions.md)</ept>.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.InteropServices.DllImportAttribute">
          <source>The <ph id="ph1">&lt;xref:System.Runtime.InteropServices.DllImportAttribute&gt;</ph> does not support marshaling of generic types.</source>
          <target state="translated">El <ph id="ph1">&lt;xref:System.Runtime.InteropServices.DllImportAttribute&gt;</ph> no se admite la serialización de tipos genéricos.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.InteropServices.DllImportAttribute">
          <source>The following code example shows how to use the <ph id="ph1">&lt;xref:System.Runtime.InteropServices.DllImportAttribute&gt;</ph> attribute to import the Win32 <ph id="ph2">`MessageBox`</ph> function.</source>
          <target state="translated">En el ejemplo de código siguiente se muestra cómo utilizar el <ph id="ph1">&lt;xref:System.Runtime.InteropServices.DllImportAttribute&gt;</ph> atributo importar Win32 <ph id="ph2">`MessageBox`</ph> función.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.InteropServices.DllImportAttribute">
          <source>The code example then calls the imported method.</source>
          <target state="translated">El ejemplo de código, a continuación, llama al método importado.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" uid="M:System.Runtime.InteropServices.DllImportAttribute.#ctor(System.String)">
          <source>The name of the DLL that contains the unmanaged method.</source>
          <target state="translated">Nombre del archivo DLL que contiene el método no administrado.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" uid="M:System.Runtime.InteropServices.DllImportAttribute.#ctor(System.String)">
          <source>This can include an assembly display name, if the DLL is included in an assembly.</source>
          <target state="translated">Puede incluir un nombre para mostrar del ensamblado, si el archivo DLL está incluido en un ensamblado.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" uid="M:System.Runtime.InteropServices.DllImportAttribute.#ctor(System.String)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Runtime.InteropServices.DllImportAttribute" /&gt;</ph> class with the name of the DLL containing the method to import.</source>
          <target state="translated">Inicializa una nueva instancia de la clase <ph id="ph1">&lt;see cref="T:System.Runtime.InteropServices.DllImportAttribute" /&gt;</ph> con el nombre del archivo DLL que contiene el método que se va a importar.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.InteropServices.DllImportAttribute.#ctor(System.String)">
          <source>If an unmanaged DLL file is included in an assembly, for example, by using the linker or the <ph id="ph1">`/linkresource`</ph> compiler option, you can specify the assembly display name as part of <ph id="ph2">`dllName`</ph>.</source>
          <target state="translated">Si se incluye un archivo DLL no administrado en un ensamblado, por ejemplo, utilizando el vinculador o <ph id="ph1">`/linkresource`</ph> opción del compilador, puede especificar el nombre de presentación del ensamblado como parte de <ph id="ph2">`dllName`</ph>.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.InteropServices.DllImportAttribute.#ctor(System.String)">
          <source>For example, if an unmanaged DLL named <ph id="ph1">`unmanaged.dll`</ph> is included in a managed assembly named <ph id="ph2">`MyAssembly`</ph>, the attribute might be specified as shown in the following code.</source>
          <target state="translated">Por ejemplo, si una archivo DLL no administrada denominado <ph id="ph1">`unmanaged.dll`</ph> se incluye en un ensamblado administrado denominado <ph id="ph2">`MyAssembly`</ph>, podría especificar el atributo como se muestra en el código siguiente.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.InteropServices.DllImportAttribute.#ctor(System.String)">
          <source>The following code example shows how to use the <ph id="ph1">&lt;xref:System.Runtime.InteropServices.DllImportAttribute&gt;</ph> attribute to import the Win32 <ph id="ph2">`MessageBox`</ph> function.</source>
          <target state="translated">En el ejemplo de código siguiente se muestra cómo utilizar el <ph id="ph1">&lt;xref:System.Runtime.InteropServices.DllImportAttribute&gt;</ph> atributo importar Win32 <ph id="ph2">`MessageBox`</ph> función.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.InteropServices.DllImportAttribute.#ctor(System.String)">
          <source>The code example then calls the imported method.</source>
          <target state="translated">El ejemplo de código, a continuación, llama al método importado.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" uid="F:System.Runtime.InteropServices.DllImportAttribute.BestFitMapping">
          <source>Enables or disables best-fit mapping behavior when converting Unicode characters to ANSI characters.</source>
          <target state="translated">Habilita o deshabilita el comportamiento de asignación de ajuste perfecto al convertir caracteres Unicode en caracteres ANSI.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Runtime.InteropServices.DllImportAttribute.BestFitMapping">
          <source>If <ph id="ph1">`true`</ph>, best-fit mapping behavior is enabled; otherwise, best-fit mapping is disabled.</source>
          <target state="translated">Si <ph id="ph1">`true`</ph>, con ajuste perfecto el comportamiento de asignación está habilitado; en caso contrario, con ajuste perfecto asignación está deshabilitada.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Runtime.InteropServices.DllImportAttribute.BestFitMapping">
          <source>The <ph id="ph1">&lt;xref:System.Runtime.InteropServices.DllImportAttribute.BestFitMapping&gt;</ph> field is <ph id="ph2">`true`</ph> by default.</source>
          <target state="translated">El <ph id="ph1">&lt;xref:System.Runtime.InteropServices.DllImportAttribute.BestFitMapping&gt;</ph> campo es <ph id="ph2">`true`</ph> de forma predeterminada.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Runtime.InteropServices.DllImportAttribute.BestFitMapping">
          <source>Settings for this field override the any level settings for the <ph id="ph1">&lt;xref:System.Runtime.InteropServices.BestFitMappingAttribute?displayProperty=nameWithType&gt;</ph> attribute.</source>
          <target state="translated">La configuración para este campo invalida la configuración de cualquier nivel para el <ph id="ph1">&lt;xref:System.Runtime.InteropServices.BestFitMappingAttribute?displayProperty=nameWithType&gt;</ph> atributo.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Runtime.InteropServices.DllImportAttribute.BestFitMapping">
          <source>The common language runtime converts to ANSI characters any managed Unicode characters passed to an unmanaged method executing on Windows 98 or Windows Me.</source>
          <target state="translated">Common language runtime se convierte en caracteres ANSI que cualquier carácter Unicode administrado pasado a un método no administrado que se ejecute en Windows 98 o Windows Millennium Edition.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Runtime.InteropServices.DllImportAttribute.BestFitMapping">
          <source>Best-fit mapping enables the interop marshaler to provide a close-matching character when no exact match exists.</source>
          <target state="translated">Asignación con ajuste perfecto permite que el serializador de interoperabilidad proporcionar un carácter de coincidencia de cierre cuando no existe ninguna coincidencia exacta.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Runtime.InteropServices.DllImportAttribute.BestFitMapping">
          <source>For example, the marshaler converts the Unicode copyright character to 'c' for unmanaged methods that accept ANSI characters.</source>
          <target state="translated">Por ejemplo, el contador de referencias convierte el carácter Unicode de copyright en "c" para los métodos no administrados que aceptan caracteres ANSI.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Runtime.InteropServices.DllImportAttribute.BestFitMapping">
          <source>Some characters lack a best-fit representation; these characters are called unmappable.</source>
          <target state="translated">Algunos caracteres carecen de una representación de ajuste perfecto; estos caracteres se denominan no se puede asignar.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Runtime.InteropServices.DllImportAttribute.BestFitMapping">
          <source>Unmappable characters are usually converted to the default '?' ANSI character.</source>
          <target state="translated">No se puede asignar caracteres normalmente se convierten en el valor predeterminado '?' Carácter ANSI.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Runtime.InteropServices.DllImportAttribute.BestFitMapping">
          <source>Certain Unicode characters are converted to dangerous characters, such as the backslash '<ph id="ph1">\\</ph>' character, which can inadvertently change a path.</source>
          <target state="translated">Algunos caracteres Unicode se convierten en caracteres peligrosos, como la barra diagonal inversa '<ph id="ph1">\\</ph>' carácter, que puede cambiar accidentalmente una ruta de acceso.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Runtime.InteropServices.DllImportAttribute.BestFitMapping">
          <source>By setting the <ph id="ph1">&lt;xref:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar&gt;</ph> field to <ph id="ph2">`true`</ph>, you can signal the presence of an unmappable character to the caller by throwing an exception.</source>
          <target state="translated">Estableciendo la <ph id="ph1">&lt;xref:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar&gt;</ph> campo <ph id="ph2">`true`</ph>, puede indicar la presencia de un carácter no asignable al llamador iniciando una excepción.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Runtime.InteropServices.DllImportAttribute.BestFitMapping">
          <source>You cannot change the default values provided by the <ph id="ph1">&lt;xref:System.Runtime.InteropServices.DllImportAttribute.BestFitMapping&gt;</ph> and <ph id="ph2">&lt;xref:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar&gt;</ph> fields when passing a managed array whose elements are ANSI Chars or LPSTRs to an unmanaged safe array.</source>
          <target state="translated">No se puede cambiar los valores predeterminados proporcionados por el <ph id="ph1">&lt;xref:System.Runtime.InteropServices.DllImportAttribute.BestFitMapping&gt;</ph> y <ph id="ph2">&lt;xref:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar&gt;</ph> campos cuando pasa una matriz administrada cuyos elementos son caracteres ANSI o punteros LPSTR a una matriz segura no administrada.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Runtime.InteropServices.DllImportAttribute.BestFitMapping">
          <source>Best-fit mapping is always enabled and no exception is thrown.</source>
          <target state="translated">Asignación con ajuste perfecto siempre está habilitada y se inicia ninguna excepción.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Runtime.InteropServices.DllImportAttribute.BestFitMapping">
          <source>Be aware that this combination can compromise your security model.</source>
          <target state="translated">Tenga en cuenta que esta combinación puede poner en peligro su modelo de seguridad.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Runtime.InteropServices.DllImportAttribute.BestFitMapping">
          <source>In some cases, Visual Basic developers use the <ph id="ph1">&lt;xref:System.Runtime.InteropServices.DllImportAttribute&gt;</ph>, instead of the <ph id="ph2">`Declare`</ph> statement, to define a DLL function in managed code.</source>
          <target state="translated">En algunos casos, los desarrolladores de Visual Basic utilizan el <ph id="ph1">&lt;xref:System.Runtime.InteropServices.DllImportAttribute&gt;</ph>, en lugar de la <ph id="ph2">`Declare`</ph> instrucción, para definir una función DLL en código administrado.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Runtime.InteropServices.DllImportAttribute.BestFitMapping">
          <source>Setting the <ph id="ph1">&lt;xref:System.Runtime.InteropServices.DllImportAttribute.BestFitMapping&gt;</ph> field is one of those cases.</source>
          <target state="translated">Establecer el <ph id="ph1">&lt;xref:System.Runtime.InteropServices.DllImportAttribute.BestFitMapping&gt;</ph> campo es uno de los casos.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Runtime.InteropServices.DllImportAttribute.BestFitMapping">
          <source>The following example shows how to apply the strictest character mapping security to a platform invoke method definitions by specifying the ANSI character set, disabling best fit mapping behavior, and throwing an exception on unmapped Unicode characters.</source>
          <target state="translated">En el ejemplo siguiente se muestra cómo aplicar el más estricto definiciones de método de invocación de seguridad de la asignación de caracteres para una plataforma especificando el juego de caracteres ANSI, deshabilitando el comportamiento de asignación con ajuste perfecto y producir una excepción en los caracteres Unicode no asignados.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" uid="F:System.Runtime.InteropServices.DllImportAttribute.CallingConvention">
          <source>Indicates the calling convention of an entry point.</source>
          <target state="translated">Indica la convención de llamada de un punto de entrada.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Runtime.InteropServices.DllImportAttribute.CallingConvention">
          <source>You set this field to one of the <ph id="ph1">&lt;xref:System.Runtime.InteropServices.CallingConvention&gt;</ph> enumeration members.</source>
          <target state="translated">Establezca este campo en uno de los <ph id="ph1">&lt;xref:System.Runtime.InteropServices.CallingConvention&gt;</ph> miembros de la enumeración.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Runtime.InteropServices.DllImportAttribute.CallingConvention">
          <source>The default value for the <ph id="ph1">&lt;xref:System.Runtime.InteropServices.DllImportAttribute.CallingConvention&gt;</ph> field is <ph id="ph2">&lt;xref:System.Runtime.InteropServices.CallingConvention.Winapi&gt;</ph>, which in turn defaults to <ph id="ph3">&lt;xref:System.Runtime.InteropServices.CallingConvention.StdCall&gt;</ph> convention.</source>
          <target state="translated">El valor predeterminado para la <ph id="ph1">&lt;xref:System.Runtime.InteropServices.DllImportAttribute.CallingConvention&gt;</ph> campo es <ph id="ph2">&lt;xref:System.Runtime.InteropServices.CallingConvention.Winapi&gt;</ph>, que a su vez de forma predeterminada <ph id="ph3">&lt;xref:System.Runtime.InteropServices.CallingConvention.StdCall&gt;</ph> convención.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Runtime.InteropServices.DllImportAttribute.CallingConvention">
          <source>For more information, see Calling Convention in the MSDN library.</source>
          <target state="translated">Para obtener más información, vea la convención de llamada en MSDN library.</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Runtime.InteropServices.DllImportAttribute.CallingConvention">
          <source>In some cases, Visual Basic developers use the <ph id="ph1">&lt;xref:System.Runtime.InteropServices.DllImportAttribute&gt;</ph>, instead of the <ph id="ph2">`Declare`</ph> statement, to define a DLL function in managed code.</source>
          <target state="translated">En algunos casos, los desarrolladores de Visual Basic utilizan el <ph id="ph1">&lt;xref:System.Runtime.InteropServices.DllImportAttribute&gt;</ph>, en lugar de la <ph id="ph2">`Declare`</ph> instrucción, para definir una función DLL en código administrado.</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Runtime.InteropServices.DllImportAttribute.CallingConvention">
          <source>Setting the <ph id="ph1">&lt;xref:System.Runtime.InteropServices.DllImportAttribute.CallingConvention&gt;</ph> field is one of those cases.</source>
          <target state="translated">Establecer el <ph id="ph1">&lt;xref:System.Runtime.InteropServices.DllImportAttribute.CallingConvention&gt;</ph> campo es uno de los casos.</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Runtime.InteropServices.DllImportAttribute.CallingConvention">
          <source>System.Runtime.InteropServices.DllImportAttribute#1</source>
          <target state="translated">System.Runtime.InteropServices.DllImportAttribute#1</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" uid="F:System.Runtime.InteropServices.DllImportAttribute.CharSet">
          <source>Indicates how to marshal string parameters to the method and controls name mangling.</source>
          <target state="translated">Indica la forma de calcular las referencias de los parámetros de cadena al método, y controla los daños en los nombres.</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Runtime.InteropServices.DllImportAttribute.CharSet">
          <source>Use this field with a member of the <ph id="ph1">&lt;xref:System.Runtime.InteropServices.CharSet&gt;</ph> enumeration to specify the marshaling behavior of string parameters and to specify which entry-point name to invoke (the exact name given or a name ending with "A" or "W").</source>
          <target state="translated">Utilice este campo con un miembro de la <ph id="ph1">&lt;xref:System.Runtime.InteropServices.CharSet&gt;</ph> enumeración para especificar el comportamiento de serialización de parámetros de cadena y para especificar qué nombre de punto de entrada para invocar (el nombre exacto especificado o un nombre que termina con "A" o "W").</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Runtime.InteropServices.DllImportAttribute.CharSet">
          <source>The default enumeration member for C# and Visual Basic is <ph id="ph1">`CharSet.Ansi`</ph> and the default enumeration member for C++ is <ph id="ph2">`CharSet.None`</ph>, which is equivalent to <ph id="ph3">`CharSet.Ansi`</ph>.</source>
          <target state="translated">El miembro de enumeración predeterminado para C# y Visual Basic es <ph id="ph1">`CharSet.Ansi`</ph> y el miembro de enumeración predeterminado para C++ es <ph id="ph2">`CharSet.None`</ph>, lo que equivale a <ph id="ph3">`CharSet.Ansi`</ph>.</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Runtime.InteropServices.DllImportAttribute.CharSet">
          <source>In Visual Basic, you use the <ph id="ph1">`Declare`</ph> statement to specify the <ph id="ph2">`CharSet`</ph> field.</source>
          <target state="translated">En Visual Basic, utilice la <ph id="ph1">`Declare`</ph> instrucción para especificar el <ph id="ph2">`CharSet`</ph> campo.</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Runtime.InteropServices.DllImportAttribute.CharSet">
          <source>The <ph id="ph1">&lt;xref:System.Runtime.InteropServices.DllImportAttribute.ExactSpelling&gt;</ph> field influences the behavior of the <ph id="ph2">`CharSet`</ph> field in determining which entry-point name to invoke.</source>
          <target state="translated">El <ph id="ph1">&lt;xref:System.Runtime.InteropServices.DllImportAttribute.ExactSpelling&gt;</ph> campo influye en el comportamiento de la <ph id="ph2">`CharSet`</ph> campo para determinar qué nombre de punto de entrada va a invocar.</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Runtime.InteropServices.DllImportAttribute.CharSet">
          <source>For a detailed description and examples of the string marshaling and name matching behavior associated with the <ph id="ph1">`CharSet`</ph> field, see <bpt id="p1">[</bpt>Specifying a Character Set<ept id="p1">](~/docs/framework/interop/specifying-a-character-set.md)</ept>.</source>
          <target state="translated">Para obtener una descripción detallada y ejemplos de la serialización de cadena y el comportamiento asociado con la coincidencia de nombres el <ph id="ph1">`CharSet`</ph> campo, vea <bpt id="p1">[</bpt>especificar un juego de caracteres<ept id="p1">](~/docs/framework/interop/specifying-a-character-set.md)</ept>.</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Runtime.InteropServices.DllImportAttribute.CharSet">
          <source>The following code example shows how to use the <ph id="ph1">&lt;xref:System.Runtime.InteropServices.DllImportAttribute&gt;</ph> attribute to import the Win32 <ph id="ph2">`MessageBox`</ph> function.</source>
          <target state="translated">En el ejemplo de código siguiente se muestra cómo utilizar el <ph id="ph1">&lt;xref:System.Runtime.InteropServices.DllImportAttribute&gt;</ph> atributo importar Win32 <ph id="ph2">`MessageBox`</ph> función.</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Runtime.InteropServices.DllImportAttribute.CharSet">
          <source>The code example then calls the imported method.</source>
          <target state="translated">El ejemplo de código, a continuación, llama al método importado.</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" uid="F:System.Runtime.InteropServices.DllImportAttribute.EntryPoint">
          <source>Indicates the name or ordinal of the DLL entry point to be called.</source>
          <target state="translated">Indica el nombre u ordinal del punto de entrada de la DLL al que se va a llamar.</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Runtime.InteropServices.DllImportAttribute.EntryPoint">
          <source>You can specify the entry-point name by supplying a string indicating the name of the DLL containing the entry point, or you can identify the entry point by its ordinal.</source>
          <target state="translated">Puede especificar el nombre de punto de entrada si se suministra una cadena que indica el nombre de la DLL que contiene el punto de entrada, o puede identificar el punto de entrada por su ordinal.</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Runtime.InteropServices.DllImportAttribute.EntryPoint">
          <source>Ordinals are prefixed with the # sign, for example, #1.</source>
          <target state="translated">Ordinales van precedidos del signo #, por ejemplo, #1.</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Runtime.InteropServices.DllImportAttribute.EntryPoint">
          <source>If you omit this field, the common language runtime uses the name of the.NET method marked with the <ph id="ph1">&lt;xref:System.Runtime.InteropServices.DllImportAttribute&gt;</ph>.</source>
          <target state="translated">Si se omite este campo, common language runtime usa el nombre del método de.NET marcado con el <ph id="ph1">&lt;xref:System.Runtime.InteropServices.DllImportAttribute&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Runtime.InteropServices.DllImportAttribute.EntryPoint">
          <source>For additional information, see <bpt id="p1">[</bpt>Identifying Functions in DLLs<ept id="p1">](~/docs/framework/interop/identifying-functions-in-dlls.md)</ept>.</source>
          <target state="translated">Para obtener más información, consulte <bpt id="p1">[</bpt>identificar funciones en archivos DLL<ept id="p1">](~/docs/framework/interop/identifying-functions-in-dlls.md)</ept>.</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Runtime.InteropServices.DllImportAttribute.EntryPoint">
          <source>For examples showing how to use the <ph id="ph1">&lt;xref:System.Runtime.InteropServices.DllImportAttribute.EntryPoint&gt;</ph> field, see <bpt id="p1">[</bpt>Specifying an Entry Point<ept id="p1">](~/docs/framework/interop/specifying-an-entry-point.md)</ept>.</source>
          <target state="translated">Para obtener ejemplos que muestran cómo utilizar el <ph id="ph1">&lt;xref:System.Runtime.InteropServices.DllImportAttribute.EntryPoint&gt;</ph> campo, vea <bpt id="p1">[</bpt>especificar un punto de entrada<ept id="p1">](~/docs/framework/interop/specifying-an-entry-point.md)</ept>.</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Runtime.InteropServices.DllImportAttribute.EntryPoint">
          <source>The following code example shows how to use the <ph id="ph1">&lt;xref:System.Runtime.InteropServices.DllImportAttribute&gt;</ph> attribute to import the Win32 <ph id="ph2">`MessageBox`</ph> function.</source>
          <target state="translated">En el ejemplo de código siguiente se muestra cómo utilizar el <ph id="ph1">&lt;xref:System.Runtime.InteropServices.DllImportAttribute&gt;</ph> atributo importar Win32 <ph id="ph2">`MessageBox`</ph> función.</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Runtime.InteropServices.DllImportAttribute.EntryPoint">
          <source>The code example uses the <ph id="ph1">&lt;xref:System.Runtime.InteropServices.DllImportAttribute.EntryPoint&gt;</ph> property to specify the function to import and then changes the name to <ph id="ph2">`MyNewMessageBoxMethod`</ph>.</source>
          <target state="translated">El ejemplo de código se utiliza el <ph id="ph1">&lt;xref:System.Runtime.InteropServices.DllImportAttribute.EntryPoint&gt;</ph> propiedad para especificar la función que se va a importar y, a continuación, cambia el nombre a <ph id="ph2">`MyNewMessageBoxMethod`</ph>.</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" uid="F:System.Runtime.InteropServices.DllImportAttribute.ExactSpelling">
          <source>Controls whether the <ph id="ph1">&lt;see cref="F:System.Runtime.InteropServices.DllImportAttribute.CharSet" /&gt;</ph> field causes the common language runtime to search an unmanaged DLL for entry-point names other than the one specified.</source>
          <target state="translated">Controla si el campo <ph id="ph1">&lt;see cref="F:System.Runtime.InteropServices.DllImportAttribute.CharSet" /&gt;</ph> hace que Common Language Runtime busque en un archivo DLL no administrado nombres de puntos de entrada distintos del especificado.</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Runtime.InteropServices.DllImportAttribute.ExactSpelling">
          <source>If <ph id="ph1">`false`</ph>, the entry point name appended with the letter A is invoked when the <ph id="ph2">&lt;xref:System.Runtime.InteropServices.DllImportAttribute.CharSet?displayProperty=nameWithType&gt;</ph> field is set to <ph id="ph3">`CharSet.Ansi`</ph>, and the entry-point name appended with the letter W is invoked when the <ph id="ph4">&lt;xref:System.Runtime.InteropServices.DllImportAttribute.CharSet?displayProperty=nameWithType&gt;</ph> field is set to the <ph id="ph5">`CharSet.Unicode`</ph>.</source>
          <target state="translated">Si <ph id="ph1">`false`</ph>, se invoca el nombre del punto de entrada anexado por la letra A cuando el <ph id="ph2">&lt;xref:System.Runtime.InteropServices.DllImportAttribute.CharSet?displayProperty=nameWithType&gt;</ph> campo está establecido en <ph id="ph3">`CharSet.Ansi`</ph>, y el nombre de punto de entrada con la letra W anexado se invoca cuando el <ph id="ph4">&lt;xref:System.Runtime.InteropServices.DllImportAttribute.CharSet?displayProperty=nameWithType&gt;</ph> campo está establecido en el <ph id="ph5">`CharSet.Unicode`</ph>.</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Runtime.InteropServices.DllImportAttribute.ExactSpelling">
          <source>Typically, managed compilers set this field.</source>
          <target state="translated">Normalmente, los compiladores administrados establecen este campo.</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Runtime.InteropServices.DllImportAttribute.ExactSpelling">
          <source>The following table shows the relationship between the <ph id="ph1">&lt;xref:System.Runtime.InteropServices.DllImportAttribute.CharSet&gt;</ph> and <ph id="ph2">&lt;xref:System.Runtime.InteropServices.DllImportAttribute.ExactSpelling&gt;</ph> fields, based on default values imposed by the programming language.</source>
          <target state="translated">En la tabla siguiente muestra la relación entre el <ph id="ph1">&lt;xref:System.Runtime.InteropServices.DllImportAttribute.CharSet&gt;</ph> y <ph id="ph2">&lt;xref:System.Runtime.InteropServices.DllImportAttribute.ExactSpelling&gt;</ph> campos, en función de los valores predeterminados impuestos por el lenguaje de programación.</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Runtime.InteropServices.DllImportAttribute.ExactSpelling">
          <source>You can override the default setting, but do so with caution.</source>
          <target state="translated">Puede invalidar la configuración predeterminada, pero hacerlo con precaución.</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Runtime.InteropServices.DllImportAttribute.ExactSpelling">
          <source>Language</source>
          <target state="translated">Lenguaje</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Runtime.InteropServices.DllImportAttribute.ExactSpelling">
          <source>ANSI</source>
          <target state="translated">ANSI</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Runtime.InteropServices.DllImportAttribute.ExactSpelling">
          <source>Unicode</source>
          <target state="translated">Unicode</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Runtime.InteropServices.DllImportAttribute.ExactSpelling">
          <source>Auto</source>
          <target state="translated">Automático</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Runtime.InteropServices.DllImportAttribute.ExactSpelling">
          <source>Visual Basic</source>
          <target state="translated">Visual Basic</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Runtime.InteropServices.DllImportAttribute.ExactSpelling">
          <source>ExactSpelling:=True</source>
          <target state="translated">ExactSpelling:=True</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Runtime.InteropServices.DllImportAttribute.ExactSpelling">
          <source>ExactSpelling:=True</source>
          <target state="translated">ExactSpelling:=True</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Runtime.InteropServices.DllImportAttribute.ExactSpelling">
          <source>ExactSpelling:=False</source>
          <target state="translated">ExactSpelling:=False</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Runtime.InteropServices.DllImportAttribute.ExactSpelling">
          <source>C#</source>
          <target state="translated">C#</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Runtime.InteropServices.DllImportAttribute.ExactSpelling">
          <source>ExactSpelling=false</source>
          <target state="translated">ExactSpelling = false</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Runtime.InteropServices.DllImportAttribute.ExactSpelling">
          <source>ExactSpelling=false</source>
          <target state="translated">ExactSpelling = false</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Runtime.InteropServices.DllImportAttribute.ExactSpelling">
          <source>ExactSpelling=false</source>
          <target state="translated">ExactSpelling = false</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Runtime.InteropServices.DllImportAttribute.ExactSpelling">
          <source>C++</source>
          <target state="translated">C++</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Runtime.InteropServices.DllImportAttribute.ExactSpelling">
          <source>ExactSpelling=false</source>
          <target state="translated">ExactSpelling = false</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Runtime.InteropServices.DllImportAttribute.ExactSpelling">
          <source>ExactSpelling=false</source>
          <target state="translated">ExactSpelling = false</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Runtime.InteropServices.DllImportAttribute.ExactSpelling">
          <source>ExactSpelling=false</source>
          <target state="translated">ExactSpelling = false</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Runtime.InteropServices.DllImportAttribute.ExactSpelling">
          <source>In some cases, Visual Basic developers use the <ph id="ph1">&lt;xref:System.Runtime.InteropServices.DllImportAttribute&gt;</ph>, instead of using the <ph id="ph2">`Declare`</ph> statement, to define a DLL function in managed code.</source>
          <target state="translated">En algunos casos, los desarrolladores de Visual Basic utilizan el <ph id="ph1">&lt;xref:System.Runtime.InteropServices.DllImportAttribute&gt;</ph>, en lugar de utilizar el <ph id="ph2">`Declare`</ph> instrucción, para definir una función DLL en código administrado.</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Runtime.InteropServices.DllImportAttribute.ExactSpelling">
          <source>Setting the <ph id="ph1">&lt;xref:System.Runtime.InteropServices.DllImportAttribute.ExactSpelling&gt;</ph> field is one of those cases.</source>
          <target state="translated">Establecer el <ph id="ph1">&lt;xref:System.Runtime.InteropServices.DllImportAttribute.ExactSpelling&gt;</ph> campo es uno de los casos.</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve" uid="F:System.Runtime.InteropServices.DllImportAttribute.PreserveSig">
          <source>Indicates whether unmanaged methods that have <ph id="ph1">&lt;see langword="HRESULT" /&gt;</ph> or <ph id="ph2">&lt;see langword="retval" /&gt;</ph> return values are directly translated or whether <ph id="ph3">&lt;see langword="HRESULT" /&gt;</ph> or <ph id="ph4">&lt;see langword="retval" /&gt;</ph> return values are automatically converted to exceptions.</source>
          <target state="translated">Indica si los métodos no administrados que tienen el valor devuelto <ph id="ph1">&lt;see langword="HRESULT" /&gt;</ph> o <ph id="ph2">&lt;see langword="retval" /&gt;</ph> se traducen directamente o si los valores devueltos <ph id="ph3">&lt;see langword="HRESULT" /&gt;</ph> o <ph id="ph4">&lt;see langword="retval" /&gt;</ph> se convierten automáticamente en excepciones.</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Runtime.InteropServices.DllImportAttribute.PreserveSig">
          <source>Set the <ph id="ph1">&lt;xref:System.Runtime.InteropServices.DllImportAttribute.PreserveSig&gt;</ph> field to <ph id="ph2">`true`</ph> to directly translate unmanaged signatures with <ph id="ph3">`HRESULT`</ph> or <ph id="ph4">`retval`</ph> values; set it to <ph id="ph5">`false`</ph> to automatically convert <ph id="ph6">`HRESULT`</ph> or <ph id="ph7">`retval`</ph> values to exceptions.</source>
          <target state="translated">Establecer el <ph id="ph1">&lt;xref:System.Runtime.InteropServices.DllImportAttribute.PreserveSig&gt;</ph> campo <ph id="ph2">`true`</ph> para traducir directamente firmas no administradas con <ph id="ph3">`HRESULT`</ph> o <ph id="ph4">`retval`</ph> valores; establézcalo en <ph id="ph5">`false`</ph> para convertir automáticamente <ph id="ph6">`HRESULT`</ph> o <ph id="ph7">`retval`</ph> valores a las excepciones.</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Runtime.InteropServices.DllImportAttribute.PreserveSig">
          <source>By default, the <ph id="ph1">&lt;xref:System.Runtime.InteropServices.DllImportAttribute.PreserveSig&gt;</ph> field is <ph id="ph2">`true`</ph>.</source>
          <target state="translated">De forma predeterminada, el <ph id="ph1">&lt;xref:System.Runtime.InteropServices.DllImportAttribute.PreserveSig&gt;</ph> campo es <ph id="ph2">`true`</ph>.</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Runtime.InteropServices.DllImportAttribute.PreserveSig">
          <source>When <ph id="ph1">`true`</ph>, the resulting method signature returns an integer value that contains the <ph id="ph2">`HRESULT`</ph> value.</source>
          <target state="translated">Cuando <ph id="ph1">`true`</ph>, la firma del método resultante devuelve un valor entero que contiene el <ph id="ph2">`HRESULT`</ph> valor.</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Runtime.InteropServices.DllImportAttribute.PreserveSig">
          <source>In this case, you must manually inspect the return value and respond accordingly in your application.</source>
          <target state="translated">En este caso, debe inspeccionar el valor devuelto y responder según corresponda en su aplicación.</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Runtime.InteropServices.DllImportAttribute.PreserveSig">
          <source>When you set the <ph id="ph1">&lt;xref:System.Runtime.InteropServices.DllImportAttribute.PreserveSig&gt;</ph> field to <ph id="ph2">`false`</ph>, the resulting method signature contains a void return type instead of an integer (<ph id="ph3">`HRESULT`</ph>) return type.</source>
          <target state="translated">Al establecer el <ph id="ph1">&lt;xref:System.Runtime.InteropServices.DllImportAttribute.PreserveSig&gt;</ph> campo <ph id="ph2">`false`</ph>, la firma del método resultante contiene un tipo de valor devuelto void en lugar de un entero (<ph id="ph3">`HRESULT`</ph>) tipo de valor devuelto.</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Runtime.InteropServices.DllImportAttribute.PreserveSig">
          <source>When the unmanaged method produces an <ph id="ph1">`HRESULT`</ph>, the runtime automatically ignores a return value of <ph id="ph2">`S_OK`</ph> (or 0) and does not throw an exception.</source>
          <target state="translated">Cuando el método no administrado produce una <ph id="ph1">`HRESULT`</ph>, el tiempo de ejecución omite automáticamente un valor devuelto de <ph id="ph2">`S_OK`</ph> (o 0) y no produce una excepción.</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Runtime.InteropServices.DllImportAttribute.PreserveSig">
          <source>For <ph id="ph1">`HRESULT`</ph>s other than <ph id="ph2">`S_OK`</ph>, the runtime automatically throws an exception that corresponds to the <ph id="ph3">`HRESULT`</ph>.</source>
          <target state="translated">Para <ph id="ph1">`HRESULT`</ph>s distinto de <ph id="ph2">`S_OK`</ph>, automáticamente, el tiempo de ejecución produce una excepción que corresponde a la <ph id="ph3">`HRESULT`</ph>.</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Runtime.InteropServices.DllImportAttribute.PreserveSig">
          <source>Note that the <ph id="ph1">&lt;xref:System.Runtime.InteropServices.DllImportAttribute&gt;</ph> attribute only performs this conversion to methods that return an <ph id="ph2">`HRESULT`</ph>.</source>
          <target state="translated">Tenga en cuenta que la <ph id="ph1">&lt;xref:System.Runtime.InteropServices.DllImportAttribute&gt;</ph> atributo sólo realiza esta conversión a métodos que devuelven un <ph id="ph2">`HRESULT`</ph>.</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Runtime.InteropServices.DllImportAttribute.PreserveSig">
          <source>You might decide to change the default error reporting behavior from <ph id="ph1">`HRESULT`</ph>s to exceptions in cases where exceptions better fit the error reporting structure of your application.</source>
          <target state="translated">Puede cambiar el comportamiento de informe de errores predeterminado <ph id="ph1">`HRESULT`</ph>s a las excepciones en casos donde las excepciones se ajusten mejor a la estructura de la aplicación de informes de errores.</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Runtime.InteropServices.DllImportAttribute.PreserveSig">
          <source>This field is similar to the <ph id="ph1">&lt;xref:System.Runtime.InteropServices.PreserveSigAttribute&gt;</ph>; however, in contrast to the <ph id="ph2">&lt;xref:System.Runtime.InteropServices.DllImportAttribute.PreserveSig&gt;</ph> field, the default value for the attribute is <ph id="ph3">`false`</ph>.</source>
          <target state="translated">Este campo es similar a la <ph id="ph1">&lt;xref:System.Runtime.InteropServices.PreserveSigAttribute&gt;</ph>; sin embargo, contrasta con la <ph id="ph2">&lt;xref:System.Runtime.InteropServices.DllImportAttribute.PreserveSig&gt;</ph> campo, el valor predeterminado para el atributo es <ph id="ph3">`false`</ph>.</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Runtime.InteropServices.DllImportAttribute.PreserveSig">
          <source>In some cases, Visual Basic developers use the <ph id="ph1">&lt;xref:System.Runtime.InteropServices.DllImportAttribute&gt;</ph>, instead of using the <ph id="ph2">`Declare`</ph> statement, to define a DLL function in managed code.</source>
          <target state="translated">En algunos casos, los desarrolladores de Visual Basic utilizan el <ph id="ph1">&lt;xref:System.Runtime.InteropServices.DllImportAttribute&gt;</ph>, en lugar de utilizar el <ph id="ph2">`Declare`</ph> instrucción, para definir una función DLL en código administrado.</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Runtime.InteropServices.DllImportAttribute.PreserveSig">
          <source>Setting the <ph id="ph1">&lt;xref:System.Runtime.InteropServices.DllImportAttribute.PreserveSig&gt;</ph> field is one of those cases.</source>
          <target state="translated">Establecer el <ph id="ph1">&lt;xref:System.Runtime.InteropServices.DllImportAttribute.PreserveSig&gt;</ph> campo es uno de los casos.</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Runtime.InteropServices.DllImportAttribute.PreserveSig">
          <source>The following code example uses the <ph id="ph1">&lt;xref:System.Runtime.InteropServices.DllImportAttribute&gt;</ph> to import the unmanaged <ph id="ph2">`SHAutoComplete`</ph> function once with the <ph id="ph3">&lt;xref:System.Runtime.InteropServices.DllImportAttribute.PreserveSig&gt;</ph> field set to <ph id="ph4">`true`</ph> and again with the <ph id="ph5">&lt;xref:System.Runtime.InteropServices.DllImportAttribute.PreserveSig&gt;</ph> field set to <ph id="ph6">`false`</ph>.</source>
          <target state="translated">El siguiente ejemplo de código utiliza el <ph id="ph1">&lt;xref:System.Runtime.InteropServices.DllImportAttribute&gt;</ph> para importar el no administrado <ph id="ph2">`SHAutoComplete`</ph> funcionando una vez con la <ph id="ph3">&lt;xref:System.Runtime.InteropServices.DllImportAttribute.PreserveSig&gt;</ph> campo establecido en <ph id="ph4">`true`</ph> y luego con el <ph id="ph5">&lt;xref:System.Runtime.InteropServices.DllImportAttribute.PreserveSig&gt;</ph> campo establecido en <ph id="ph6">`false`</ph>.</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Runtime.InteropServices.DllImportAttribute.PreserveSig">
          <source>This code example causes the <ph id="ph1">`SHAutoComplete`</ph> function to generate any errors with an exception one time and an <ph id="ph2">`HRESULT`</ph> the next.</source>
          <target state="translated">Este ejemplo de código hace que el <ph id="ph1">`SHAutoComplete`</ph> función puede generar errores con una excepción una vez y <ph id="ph2">`HRESULT`</ph> la siguiente.</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve" uid="F:System.Runtime.InteropServices.DllImportAttribute.SetLastError">
          <source>Indicates whether the callee calls the <ph id="ph1">&lt;see langword="SetLastError" /&gt;</ph> Win32 API function before returning from the attributed method.</source>
          <target state="translated">Indica que el destinatario de la llamada llamará a la función <ph id="ph1">&lt;see langword="SetLastError" /&gt;</ph> de la API Win32 antes de volver del método con atributos.</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Runtime.InteropServices.DllImportAttribute.SetLastError">
          <source><ph id="ph1">`true`</ph> to indicate that the callee will call <ph id="ph2">`SetLastError`</ph>; otherwise, <ph id="ph3">`false`</ph>.</source>
          <target state="translated"><ph id="ph1">`true`</ph> para indicar que el destinatario llamará <ph id="ph2">`SetLastError`</ph>; en caso contrario, <ph id="ph3">`false`</ph>.</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Runtime.InteropServices.DllImportAttribute.SetLastError">
          <source>The default is <ph id="ph1">`false`</ph>.</source>
          <target state="translated">El valor predeterminado es <ph id="ph1">`false`</ph>.</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Runtime.InteropServices.DllImportAttribute.SetLastError">
          <source>The runtime marshaler calls <ph id="ph1">`GetLastError`</ph> and caches the value returned to prevent it from being overwritten by other API calls.</source>
          <target state="translated">Las llamadas de contador de referencias en tiempo de ejecución <ph id="ph1">`GetLastError`</ph> y almacena en caché el valor devuelto para evitar que se sobrescriban por otras llamadas de API.</target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Runtime.InteropServices.DllImportAttribute.SetLastError">
          <source>You can retrieve the error code by calling <ph id="ph1">&lt;xref:System.Runtime.InteropServices.Marshal.GetLastWin32Error%2A&gt;</ph>.</source>
          <target state="translated">Puede recuperar el código de error mediante una llamada a <ph id="ph1">&lt;xref:System.Runtime.InteropServices.Marshal.GetLastWin32Error%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Runtime.InteropServices.DllImportAttribute.SetLastError">
          <source>In some cases, Visual Basic developers use the <ph id="ph1">&lt;xref:System.Runtime.InteropServices.DllImportAttribute&gt;</ph>, instead of using the <ph id="ph2">`Declare`</ph> statement, to define a DLL function in managed code.</source>
          <target state="translated">En algunos casos, los desarrolladores de Visual Basic utilizan el <ph id="ph1">&lt;xref:System.Runtime.InteropServices.DllImportAttribute&gt;</ph>, en lugar de utilizar el <ph id="ph2">`Declare`</ph> instrucción, para definir una función DLL en código administrado.</target>       </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Runtime.InteropServices.DllImportAttribute.SetLastError">
          <source>Setting the <ph id="ph1">&lt;xref:System.Runtime.InteropServices.DllImportAttribute.SetLastError&gt;</ph> field is one of those cases.</source>
          <target state="translated">Establecer el <ph id="ph1">&lt;xref:System.Runtime.InteropServices.DllImportAttribute.SetLastError&gt;</ph> campo es uno de los casos.</target>       </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve" uid="F:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar">
          <source>Enables or disables the throwing of an exception on an unmappable Unicode character that is converted to an ANSI "?" character.</source>
          <target state="translated">Habilita o deshabilita el inicio de una excepción cuando un carácter Unicode que no se puede asignar se convierte en un carácter ANSI "?".</target>       </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar">
          <source><ph id="ph1">`true`</ph> to indicate that an exception is thrown each time the interop marshaler converts an unmappable character; <ph id="ph2">`false`</ph> to indicate that the <ph id="ph3">&lt;xref:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar&gt;</ph> field is disabled.</source>
          <target state="translated"><ph id="ph1">`true`</ph> para indicar que una excepción se produce cada vez que el contador de referencias de interoperabilidad convierte un carácter que no puede asignarse; <ph id="ph2">`false`</ph> para indicar que el <ph id="ph3">&lt;xref:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar&gt;</ph> campo está deshabilitado.</target>       </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar">
          <source>This field is <ph id="ph1">`false`</ph> by default.</source>
          <target state="translated">Este campo es <ph id="ph1">`false`</ph> de forma predeterminada.</target>       </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar">
          <source>The common language runtime converts to ANSI characters any managed Unicode characters passed to an unmanaged method executing on Windows 98 or Windows Me.</source>
          <target state="translated">Common language runtime se convierte en caracteres ANSI que cualquier carácter Unicode administrado pasado a un método no administrado que se ejecute en Windows 98 o Windows Millennium Edition.</target>       </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar">
          <source>Best-fit mapping enables the interop marshaler to provide a close-matching character when no exact match exists.</source>
          <target state="translated">Asignación con ajuste perfecto permite que el serializador de interoperabilidad proporcionar un carácter de coincidencia de cierre cuando no existe ninguna coincidencia exacta.</target>       </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar">
          <source>For example, the marshaler converts the Unicode copyright character to 'c' for unmanaged methods that accept ANSI characters.</source>
          <target state="translated">Por ejemplo, el contador de referencias convierte el carácter Unicode de copyright en "c" para los métodos no administrados que aceptan caracteres ANSI.</target>       </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar">
          <source>Some characters lack a best-fit representation; these characters are called unmappable.</source>
          <target state="translated">Algunos caracteres carecen de una representación de ajuste perfecto; estos caracteres se denominan no se puede asignar.</target>       </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar">
          <source>Unmappable characters are usually converted to the default '?' ANSI character.</source>
          <target state="translated">No se puede asignar caracteres normalmente se convierten en el valor predeterminado '?' Carácter ANSI.</target>       </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar">
          <source>Certain Unicode characters are converted to dangerous characters, such as the backslash '<ph id="ph1">\\</ph>' character, which can inadvertently change a path.</source>
          <target state="translated">Algunos caracteres Unicode se convierten en caracteres peligrosos, como la barra diagonal inversa '<ph id="ph1">\\</ph>' carácter, que puede cambiar accidentalmente una ruta de acceso.</target>       </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar">
          <source>By setting the <ph id="ph1">&lt;xref:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar&gt;</ph> field to <ph id="ph2">`true`</ph>, you can signal the presence of an unmappable character to the caller by throwing an exception.</source>
          <target state="translated">Estableciendo la <ph id="ph1">&lt;xref:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar&gt;</ph> campo <ph id="ph2">`true`</ph>, puede indicar la presencia de un carácter no asignable al llamador iniciando una excepción.</target>       </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar">
          <source>You cannot change the default values provided by the <ph id="ph1">&lt;xref:System.Runtime.InteropServices.DllImportAttribute.BestFitMapping&gt;</ph> and <ph id="ph2">&lt;xref:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar&gt;</ph> fields when passing a managed array whose elements are ANSI Chars or LPSTRs to an unmanaged safe array.</source>
          <target state="translated">No se puede cambiar los valores predeterminados proporcionados por el <ph id="ph1">&lt;xref:System.Runtime.InteropServices.DllImportAttribute.BestFitMapping&gt;</ph> y <ph id="ph2">&lt;xref:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar&gt;</ph> campos cuando pasa una matriz administrada cuyos elementos son caracteres ANSI o punteros LPSTR a una matriz segura no administrada.</target>       </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar">
          <source>Best-fit mapping is always enabled and no exception is thrown.</source>
          <target state="translated">Asignación con ajuste perfecto siempre está habilitada y se inicia ninguna excepción.</target>       </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar">
          <source>Be aware that this combination can compromise your security model.</source>
          <target state="translated">Tenga en cuenta que esta combinación puede poner en peligro su modelo de seguridad.</target>       </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar">
          <source>In some cases, Visual Basic developers use the <ph id="ph1">&lt;xref:System.Runtime.InteropServices.DllImportAttribute&gt;</ph> to define a DLL function in managed code, instead of using the <ph id="ph2">`Declare`</ph> statement.</source>
          <target state="translated">En algunos casos, los desarrolladores de Visual Basic utilizan el <ph id="ph1">&lt;xref:System.Runtime.InteropServices.DllImportAttribute&gt;</ph> para definir una función DLL en código administrado, en lugar de utilizar el <ph id="ph2">`Declare`</ph> instrucción.</target>       </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar">
          <source>Setting the <ph id="ph1">&lt;xref:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar&gt;</ph> field is one of those cases.</source>
          <target state="translated">Establecer el <ph id="ph1">&lt;xref:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar&gt;</ph> campo es uno de los casos.</target>       </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar">
          <source>The following example shows how to apply the strictest character mapping security to a platform invoke method definitions by specifying the ANSI character set, disabling best fit mapping behavior, and throwing an exception on unmapped Unicode characters.</source>
          <target state="translated">En el ejemplo siguiente se muestra cómo aplicar el más estricto definiciones de método de invocación de seguridad de la asignación de caracteres para una plataforma especificando el juego de caracteres ANSI, deshabilitando el comportamiento de asignación con ajuste perfecto y producir una excepción en los caracteres Unicode no asignados.</target>       </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve" uid="P:System.Runtime.InteropServices.DllImportAttribute.Value">
          <source>Gets the name of the DLL file that contains the entry point.</source>
          <target state="translated">Obtiene el nombre del archivo DLL que contiene el punto de entrada.</target>       </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Runtime.InteropServices.DllImportAttribute.Value">
          <source>The name of the DLL file that contains the entry point.</source>
          <target state="translated">Nombre del archivo DLL que contiene el punto de entrada.</target>       </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Runtime.InteropServices.DllImportAttribute.Value">
          <source>You can provide a full or relative path.</source>
          <target state="translated">Puede proporcionar una ruta de acceso completa o relativa.</target>       </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Runtime.InteropServices.DllImportAttribute.Value">
          <source>If you provide no path, the DLL must be in the current path at run time, unless the DLL is loaded by some other means.</source>
          <target state="translated">Si se proporciona ninguna ruta de acceso, el archivo DLL debe ser en la ruta de acceso actual en tiempo de ejecución, a menos que se carga el archivo DLL por otros medios.</target>       </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Runtime.InteropServices.DllImportAttribute.Value">
          <source>Be aware, however, that using a fully qualified path can introduce inaccuracy if the DLL is moved.</source>
          <target state="translated">Tenga en cuenta, sin embargo, que utiliza una ruta de acceso completa puede introducir imprecisión si se mueve el archivo DLL.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>