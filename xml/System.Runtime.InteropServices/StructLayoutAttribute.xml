<Type Name="StructLayoutAttribute" FullName="System.Runtime.InteropServices.StructLayoutAttribute">
  <Metadata><Meta Name="ms.openlocfilehash" Value="8da8e8868ebf3b487633fb997a4ddd560266391d" /><Meta Name="ms.sourcegitcommit" Value="4ee26ac79338b0bf99fa1e0913e8a06b21994d8e" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="es-ES" /><Meta Name="ms.lasthandoff" Value="03/26/2019" /><Meta Name="ms.locfileid" Value="58453719" /></Metadata><TypeSignature Language="C#" Value="public sealed class StructLayoutAttribute : Attribute" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit StructLayoutAttribute extends System.Attribute" />
  <TypeSignature Language="DocId" Value="T:System.Runtime.InteropServices.StructLayoutAttribute" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class StructLayoutAttribute&#xA;Inherits Attribute" />
  <TypeSignature Language="C++ CLI" Value="public ref class StructLayoutAttribute sealed : Attribute" />
  <TypeSignature Language="F#" Value="type StructLayoutAttribute = class&#xA;    inherit Attribute" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Attribute</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2;dotnet-uwp-10.0;netcore-3.0">
      <AttributeName>System.AttributeUsage(System.AttributeTargets.Class | System.AttributeTargets.Struct, Inherited=false)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Le permite controlar el diseño físico de los campos de datos de una clase o una estructura en la memoria.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este atributo se puede aplicar a clases o estructuras.  
  
 Common language runtime controla el diseño físico de los campos de datos de una clase o estructura en la memoria administrada. Sin embargo, si desea pasar el tipo al código no administrado, puede usar el <xref:System.Runtime.InteropServices.StructLayoutAttribute> atributo para controlar el diseño del tipo no administrado. Usar el atributo con <xref:System.Runtime.InteropServices.LayoutKind.Sequential?displayProperty=nameWithType> para forzar que los miembros que se disponen secuencialmente en el orden en que aparecen. Para los tipos de bits/bytes, <xref:System.Runtime.InteropServices.LayoutKind.Sequential?displayProperty=nameWithType> controla tanto el diseño en la memoria administrada y el diseño en memoria no administrada. Para los tipos del espacio, controla el diseño cuando la clase o estructura se calculan las referencias a código no administrado, pero no controla el diseño en la memoria administrada. Usar el atributo con <xref:System.Runtime.InteropServices.LayoutKind.Explicit?displayProperty=nameWithType> para controlar la posición exacta de cada miembro de datos. Esto afecta al diseño administrado y, para los tipos de tanto espacio como bits/bytes. Uso de <xref:System.Runtime.InteropServices.LayoutKind.Explicit?displayProperty=nameWithType> requiere el uso de la <xref:System.Runtime.InteropServices.FieldOffsetAttribute> atributo para indicar la posición de cada campo dentro del tipo.  
  
 Los compiladores de C#, Visual Basic y C++ se aplican los <xref:System.Runtime.InteropServices.LayoutKind.Sequential> valor de diseño a las estructuras de forma predeterminada. Para las clases, debe aplicar el <xref:System.Runtime.InteropServices.LayoutKind.Sequential?displayProperty=nameWithType> valor explícitamente. El [Tlbimp.exe (importador de biblioteca)](~/docs/framework/tools/tlbimp-exe-type-library-importer.md) también se aplica el <xref:System.Runtime.InteropServices.StructLayoutAttribute> atributo; siempre se aplica el <xref:System.Runtime.InteropServices.LayoutKind.Sequential?displayProperty=nameWithType> cuando importa una biblioteca de tipos de valor.  
  
   
  
## Examples  
 En el ejemplo siguiente se muestra una declaración administrada de la `GetSystemTime` de función y define `MySystemTime` clase con <xref:System.Runtime.InteropServices.LayoutKind.Explicit?displayProperty=nameWithType> diseño. `GetSystemTime` Obtiene la hora del sistema y se imprime en la consola.  
  
 [!code-cpp[StructLayoutAttribute#1](~/samples/snippets/cpp/VS_Snippets_CLR/StructLayoutAttribute/CPP/structlayoutattribute.cpp#1)]
 [!code-csharp[StructLayoutAttribute#1](~/samples/snippets/csharp/VS_Snippets_CLR/StructLayoutAttribute/CS/structlayoutattribute.cs#1)]
 [!code-vb[StructLayoutAttribute#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/StructLayoutAttribute/VB/structlayoutattribute.vb#1)]  
  
 ]]></format>
    </remarks>
    <related type="Article" href="~/docs/framework/tools/tlbimp-exe-type-library-importer.md">TlbImp.exe (Importador de la biblioteca de tipos)</related>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Runtime.InteropServices.StructLayoutAttribute" />.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public StructLayoutAttribute (short layoutKind);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int16 layoutKind) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.StructLayoutAttribute.#ctor(System.Int16)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (layoutKind As Short)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; StructLayoutAttribute(short layoutKind);" />
      <MemberSignature Language="F#" Value="new System.Runtime.InteropServices.StructLayoutAttribute : int16 -&gt; System.Runtime.InteropServices.StructLayoutAttribute" Usage="new System.Runtime.InteropServices.StructLayoutAttribute layoutKind" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="layoutKind" Type="System.Int16" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="layoutKind">Entero de 16 bits que representa uno de los valores de <see cref="T:System.Runtime.InteropServices.LayoutKind" /> que especifica cómo debe organizarse la clase o la estructura.</param>
        <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Runtime.InteropServices.StructLayoutAttribute" /> con el miembro de enumeración <see cref="T:System.Runtime.InteropServices.LayoutKind" /> especificado.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este constructor toma un entero de 16 bits subyacente que representa cada <xref:System.Runtime.InteropServices.LayoutKind> miembro de enumeración. El [Tlbimp.exe (importador de biblioteca)](~/docs/framework/tools/tlbimp-exe-type-library-importer.md) utiliza este constructor.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Runtime.InteropServices.LayoutKind" />
        <related type="Article" href="~/docs/framework/tools/tlbimp-exe-type-library-importer.md">TlbImp.exe (Importador de la biblioteca de tipos)</related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public StructLayoutAttribute (System.Runtime.InteropServices.LayoutKind layoutKind);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype System.Runtime.InteropServices.LayoutKind layoutKind) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.StructLayoutAttribute.#ctor(System.Runtime.InteropServices.LayoutKind)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; StructLayoutAttribute(System::Runtime::InteropServices::LayoutKind layoutKind);" />
      <MemberSignature Language="F#" Value="new System.Runtime.InteropServices.StructLayoutAttribute : System.Runtime.InteropServices.LayoutKind -&gt; System.Runtime.InteropServices.StructLayoutAttribute" Usage="new System.Runtime.InteropServices.StructLayoutAttribute layoutKind" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="layoutKind" Type="System.Runtime.InteropServices.LayoutKind" />
      </Parameters>
      <Docs>
        <param name="layoutKind">Uno de los valores de enumeración que especifica cómo debe organizarse la clase o la estructura.</param>
        <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Runtime.InteropServices.StructLayoutAttribute" /> con el miembro de enumeración <see cref="T:System.Runtime.InteropServices.LayoutKind" /> especificado.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Para que el código legible es menos propenso a errores, siempre que utilice este constructor.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Runtime.InteropServices.LayoutKind" />
      </Docs>
    </Member>
    <Member MemberName="CharSet">
      <MemberSignature Language="C#" Value="public System.Runtime.InteropServices.CharSet CharSet;" />
      <MemberSignature Language="ILAsm" Value=".field public valuetype System.Runtime.InteropServices.CharSet CharSet" />
      <MemberSignature Language="DocId" Value="F:System.Runtime.InteropServices.StructLayoutAttribute.CharSet" />
      <MemberSignature Language="VB.NET" Value="Public CharSet As CharSet " />
      <MemberSignature Language="C++ CLI" Value="public: System::Runtime::InteropServices::CharSet CharSet;" />
      <MemberSignature Language="F#" Value="val mutable CharSet : System.Runtime.InteropServices.CharSet" Usage="System.Runtime.InteropServices.StructLayoutAttribute.CharSet" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Runtime.InteropServices.CharSet</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Indica si las referencias de los campos de datos de cadena dentro de la clase deben calcularse como <see langword="LPWSTR" /> o <see langword="LPSTR" /> de forma predeterminada.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si el `CharSet` campo se establece en <xref:System.Runtime.InteropServices.CharSet.Unicode?displayProperty=nameWithType>, todos los argumentos de cadena se convierten en caracteres Unicode (`LPWSTR`) antes de pasarlos a la implementación no administrada. Si el campo se establece en <xref:System.Runtime.InteropServices.CharSet.Ansi?displayProperty=nameWithType>, las cadenas se convierten en cadenas ANSI (`LPSTR`). Si el `CharSet` campo se establece en <xref:System.Runtime.InteropServices.CharSet.Auto?displayProperty=nameWithType>, la conversión es dependiente de la plataforma (ANSI en Windows 98 y Windows Millennium Edition y Unicode en las versiones posteriores).  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Runtime.InteropServices.CharSet" />
      </Docs>
    </Member>
    <Member MemberName="Pack">
      <MemberSignature Language="C#" Value="public int Pack;" />
      <MemberSignature Language="ILAsm" Value=".field public int32 Pack" />
      <MemberSignature Language="DocId" Value="F:System.Runtime.InteropServices.StructLayoutAttribute.Pack" />
      <MemberSignature Language="VB.NET" Value="Public Pack As Integer " />
      <MemberSignature Language="C++ CLI" Value="public: int Pack;" />
      <MemberSignature Language="F#" Value="val mutable Pack : int" Usage="System.Runtime.InteropServices.StructLayoutAttribute.Pack" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Controla la alineación de los campos de datos de una clase o una estructura en la memoria.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Runtime.InteropServices.StructLayoutAttribute.Pack> campo controla la alineación de los campos de un tipo en la memoria.  Afecta a ambas <xref:System.Runtime.InteropServices.LayoutKind.Sequential?displayProperty=nameWithType> y <xref:System.Runtime.InteropServices.LayoutKind.Explicit?displayProperty=nameWithType>. De forma predeterminada, el valor es 0, que indica el tamaño de la plataforma actual de empaquetado predeterminado. El valor de <xref:System.Runtime.InteropServices.StructLayoutAttribute.Pack> debe ser 0, 1, 2, 4, 8, 16, 32, 64 o 128:  
  
 Los campos de una instancia de tipo se alinean con las reglas siguientes:  
  
-   La alineación del tipo es el tamaño de su elemento más grande (1, 2, 4, 8, etc., bytes) o el empaquetado especificado de tamaño, lo que sea menor.  
  
-   Cada campo debe corresponderse con los campos de su propio tamaño (1, 2, 4, 8, etc., bytes) o la alineación del tipo, lo que sea menor.  Dado que la alineación predeterminada del tipo es el tamaño de su elemento mayor, que es mayor o igual que todas las otras longitudes de campo, esto suele significar que los campos se alinean según su tamaño. Por ejemplo, incluso si el campo más grande en un tipo es un entero de 64 bits (8 bytes) o el campo de módulo se establece en 8, <xref:System.Byte> campos se alinean en límites de 1 byte, <xref:System.Int16> campos se alinean en límites de 2 bytes, y <xref:System.Int32> campos se alinean en límites de 4 bytes.  
  
-   Se agrega relleno entre los campos para satisfacer los requisitos de alineación.  
  
 Por ejemplo, considere la siguiente estructura, que consta de dos <xref:System.Byte> campos y uno <xref:System.Int32> campo cuando se usa con varios valores para el <xref:System.Runtime.InteropServices.StructLayoutAttribute.Pack> campo.  
  
 [!code-csharp[System.Runtime.InteropServices.StructLayoutAttribute.Pack#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.runtime.interopservices.structlayoutattribute.pack/cs/packex0.cs#1)]  
  
> [!IMPORTANT]
>  Para los ejemplos de C# se compila correctamente, debe especificar el `/unsafe` modificador del compilador.  
  
 Si especifica el tamaño de empaquetado predeterminado, el tamaño de la estructura tiene 8 bytes. Los dos bytes ocupan los dos primeros bytes de memoria, porque los bytes deben alinear en límites de un byte. Dado que la alineación predeterminada del tipo es de 4 bytes, que es el tamaño de sus campos de mayor tamaño, `i3`, hay dos bytes de relleno seguido por el campo numérico entero.  
  
 [!code-csharp[System.Runtime.InteropServices.StructLayoutAttribute.Pack#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.runtime.interopservices.structlayoutattribute.pack/cs/packex1.cs#2)]  
  
 Si <xref:System.Runtime.InteropServices.StructLayoutAttribute.Pack> está establecido en 2, el tamaño de la estructura es 6 bytes. Como antes, los dos bytes que ocupan los dos primeros bytes de memoria. Porque ahora, los campos se alinean en límites de 2 bytes, no hay ningún relleno entre el segundo byte y el número entero.  
  
 [!code-csharp[System.Runtime.InteropServices.StructLayoutAttribute.Pack#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.runtime.interopservices.structlayoutattribute.pack/cs/packex2.cs#3)]  
  
 Si <xref:System.Runtime.InteropServices.StructLayoutAttribute.Pack> se establece en 4, el tamaño de la estructura es igual que en el caso predeterminado, donde la alineación del tipo se ha definido por el tamaño de su campo más grande, `i3`, que es 4.  
  
 [!code-csharp[System.Runtime.InteropServices.StructLayoutAttribute.Pack#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.runtime.interopservices.structlayoutattribute.pack/cs/packex3.cs#4)]  
  
 Si <xref:System.Runtime.InteropServices.StructLayoutAttribute.Pack> está establecido en 8, el tamaño de la estructura sigue siendo igual que en el valor predeterminado de casos, dado que el `i3` campo se alinea en un límite de 4 bytes, que es menor que el límite de 8 bytes especificado por el campo de módulo.  
  
 [!code-csharp[System.Runtime.InteropServices.StructLayoutAttribute.Pack#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.runtime.interopservices.structlayoutattribute.pack/cs/packex4.cs#5)]  
  
 He aquí otro ejemplo, considere la siguiente estructura, que consta de campos de dos bytes, el campo de un entero de 32 bits con signo, una matriz de bytes de solo elemento y un valor decimal. Con el tamaño de empaquetado predeterminado, el tamaño de la estructura es 28 bytes. Los dos bytes que ocupan los dos primeros bytes de memoria, seguido de dos bytes de relleno, seguido por el número entero. A continuación es la matriz de byte único, seguida de tres bytes de relleno. Por último, el <xref:System.Decimal> alinea el campo, d5, en un límite de 4 bytes porque un valor decimal se compone de cuatro <xref:System.Int32> campos, por lo que su alineación se basa en el tamaño de la mayor de sus campos en lugar de en el tamaño de la <xref:System.Decimal> estructura como un todo.  
  
 [!code-csharp[System.Runtime.InteropServices.StructLayoutAttribute.Pack#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.runtime.interopservices.structlayoutattribute.pack/cs/packex5.cs#6)]  
  
 Si <xref:System.Runtime.InteropServices.StructLayoutAttribute.Pack> está establecido en 2, el tamaño de la estructura es de 24 bytes. En comparación con la alineación predeterminada, se han quitado los dos bytes de relleno entre los dos bytes y el entero porque la alineación del tipo ahora es 4 en lugar de 2. Y los tres bytes de relleno después `a4` han sido reemplazados por un byte de relleno, ya que `d5` ahora se alinea en un límite de 2 bytes en lugar de un límite de 4 bytes.  
  
 [!code-csharp[System.Runtime.InteropServices.StructLayoutAttribute.Pack#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.runtime.interopservices.structlayoutattribute.pack/cs/packex6.cs#7)]  
  
 Si <xref:System.Runtime.InteropServices.StructLayoutAttribute.Pack> está establecido en 8, el tamaño de la estructura es igual que en el caso predeterminado, porque todos los requisitos de alineación de esta estructura están menor que 8.  
  
 [!code-csharp[System.Runtime.InteropServices.StructLayoutAttribute.Pack#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.runtime.interopservices.structlayoutattribute.pack/cs/packex7.cs#8)]  
  
 El <xref:System.Runtime.InteropServices.StructLayoutAttribute.Pack> campo se utiliza con frecuencia cuando se exportan las estructuras durante el disco y las operaciones de escritura de la red. El campo también se suele usar durante la plataforma de invocación y las operaciones de interoperabilidad.  
  
 En ocasiones, el campo se utiliza para reducir los requisitos de memoria mediante la generación de un tamaño de empaquetado más estricto. Sin embargo, este uso requiere una consideración cuidadosa de las restricciones de hardware real y realmente puede degradar el rendimiento.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Size">
      <MemberSignature Language="C#" Value="public int Size;" />
      <MemberSignature Language="ILAsm" Value=".field public int32 Size" />
      <MemberSignature Language="DocId" Value="F:System.Runtime.InteropServices.StructLayoutAttribute.Size" />
      <MemberSignature Language="VB.NET" Value="Public Size As Integer " />
      <MemberSignature Language="C++ CLI" Value="public: int Size;" />
      <MemberSignature Language="F#" Value="val mutable Size : int" Usage="System.Runtime.InteropServices.StructLayoutAttribute.Size" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Indica el tamaño absoluto de la clase o estructura.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este campo debe ser igual o mayor que el tamaño total, en bytes, de los miembros de la clase o estructura. Este campo es principalmente para los autores de compiladores que desean ampliar la memoria ocupada por una estructura para el acceso directo, no administrado. Por ejemplo, puede usar este campo cuando se trabaja con uniones que no están representadas directamente en los metadatos.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Value">
      <MemberSignature Language="C#" Value="public System.Runtime.InteropServices.LayoutKind Value { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Runtime.InteropServices.LayoutKind Value" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.InteropServices.StructLayoutAttribute.Value" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Value As LayoutKind" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Runtime::InteropServices::LayoutKind Value { System::Runtime::InteropServices::LayoutKind get(); };" />
      <MemberSignature Language="F#" Value="member this.Value : System.Runtime.InteropServices.LayoutKind" Usage="System.Runtime.InteropServices.StructLayoutAttribute.Value" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Runtime.InteropServices.LayoutKind</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene el valor de <see cref="T:System.Runtime.InteropServices.LayoutKind" /> que especifica la forma en que está organizada la clase o estructura.</summary>
        <value>Uno de los valores de enumeración que especifica cómo se organiza la clase o la estructura.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>