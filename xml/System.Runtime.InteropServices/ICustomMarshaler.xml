<Type Name="ICustomMarshaler" FullName="System.Runtime.InteropServices.ICustomMarshaler">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="39f080201b9247188e6562c5fd981137ce4f6fec" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="es-ES" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36538236" />
  </Metadata>
  <TypeSignature Language="C#" Value="public interface ICustomMarshaler" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract ICustomMarshaler" />
  <TypeSignature Language="DocId" Value="T:System.Runtime.InteropServices.ICustomMarshaler" />
  <TypeSignature Language="VB.NET" Value="Public Interface ICustomMarshaler" />
  <TypeSignature Language="C++ CLI" Value="public interface class ICustomMarshaler" />
  <TypeSignature Language="F#" Value="type ICustomMarshaler = interface" />
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Runtime.InteropServices</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Proporciona contenedores personalizados para controlar las llamadas a métodos.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Un contador de referencias proporciona un puente entre las funciones de antiguas y nuevas interfaces. Cálculo de referencias personalizado proporciona las siguientes ventajas:  
  
-   Permite que las aplicaciones de cliente que se han diseñado para trabajar con una interfaz antigua y funcionar también con servidores que implementan una interfaz nueva.  
  
-   Permite que las aplicaciones de cliente creadas para trabajar con una nueva interfaz trabajar con servidores que implementan una interfaz antigua.  
  
 Si tiene una interfaz que presenta un comportamiento de serialización diferente o que se expone para el modelo de objetos componentes (COM) de forma diferente, puede diseñar un contador de referencias personalizado en lugar de utilizar al serializador de interoperabilidad. Mediante el uso de un contador de referencias personalizado, puede minimizar la distinción entre los nuevos componentes de .NET Framework y los componentes COM existentes.  
  
 Por ejemplo, supongamos que está desarrollando una interfaz administrada denominada `INew`. Cuando esta interfaz se expone a COM a través de un estándar contenedor COM invocable (CCW), tiene los mismos métodos que la interfaz administrada y usa las reglas de cálculo de referencias integradas en el contador de referencias de interoperabilidad. Ahora supongamos que una interfaz COM conocida llama `IOld` ya proporciona la misma funcionalidad que la `INew` interfaz. Al diseñar un contador de referencias personalizado, puede proporcionar una implementación no administrada de `IOld` que simplemente delega las llamadas a la implementación administrada de la `INew` interfaz. Por lo tanto, el contador de referencias personalizado actúa como un puente entre las interfaces no administradas y no administrado.  
  
> [!NOTE]
>  Contadores de referencias personalizados no se invocan cuando se llama desde código administrado a código no administrado en una interfaz solo de envío.  
  
## <a name="defining-the-marshaling-type"></a>Definir el tipo de serialización  
 Antes de poder crear un contador de referencias personalizado, debe definir las interfaces administradas y no administradas que se pueden calcular las referencias. Estas interfaces normalmente realizan la misma función, pero se exponen de manera diferente a los objetos administrados y no administrados.  
  
 Un compilador administrado produce una interfaz administrada de metadatos y la interfaz resultante es similar a cualquier otra interfaz administrada. En el ejemplo siguiente se muestra una interfaz típica.  
  
 [!code-cpp[System.Runtime.InteropServices.ICustomMarshaler#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.runtime.interopservices.icustommarshaler/cpp/source.cpp#1)]
 [!code-csharp[System.Runtime.InteropServices.ICustomMarshaler#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.runtime.interopservices.icustommarshaler/cs/source.cs#1)]
 [!code-vb[System.Runtime.InteropServices.ICustomMarshaler#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.runtime.interopservices.icustommarshaler/vb/source.vb#1)]  
  
 Definir el tipo no administrado en el lenguaje de definición de interfaz (IDL) y compílelo con el compilador de lenguaje de definición de interfaz de Microsoft (MIDL). Definir la interfaz dentro de una instrucción de biblioteca y asignar un identificador de interfaz con el atributo de identificador único universal (UUID), como se muestra en el ejemplo siguiente.  
  
```  
 [uuid(9B2BAADA-0705-11D3-A0CD-00C04FA35826)]  
library OldLib {  
     [uuid(9B2BAADD-0705-11D3-A0CD-00C04FA35826)]  
     interface IOld : IUnknown  
         HRESULT OldMethod();  
}  
```  
  
 El compilador MIDL produce varios archivos de salida. Si la interfaz se define en Old.idl, el archivo de salida Old_i.c define una `const` variable con el identificador de interfaz (IID) de la interfaz, como se muestra en el ejemplo siguiente.  
  
```  
const IID IID_IOld = {0x9B2BAADD,0x0705,0x11D3,{0xA0,0xCD,0x00,0xC0,0x4F,0xA3,0x58,0x26}};  
```  
  
 El archivo Old.h también se produce por MIDL. Contiene una definición de C++ de la interfaz que puede incluirse en el código fuente de C++.  
  
## <a name="implementing-the-icustommarshaler-interface"></a>Implementar la interfaz ICustomMarshaler  
 El contador de referencias personalizado debe implementar la <xref:System.Runtime.InteropServices.ICustomMarshaler> interfaz para proporcionar los contenedores adecuados para el tiempo de ejecución.  
  
 El código de C# siguiente muestra la interfaz base que debe ser implementada por todos los cálculos de referencia personalizados.  
  
 [!code-cpp[System.Runtime.InteropServices.ICustomMarshaler#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.runtime.interopservices.icustommarshaler/cpp/source.cpp#2)]
 [!code-csharp[System.Runtime.InteropServices.ICustomMarshaler#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.runtime.interopservices.icustommarshaler/cs/source.cs#2)]
 [!code-vb[System.Runtime.InteropServices.ICustomMarshaler#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.runtime.interopservices.icustommarshaler/vb/source.vb#2)]  
  
 El <xref:System.Runtime.InteropServices.ICustomMarshaler> interfaz incluye métodos que proporcionan compatibilidad con la conversión, compatibilidad de limpieza e información sobre los datos que se van a calcular.  
  
|Tipo de operación|Método ICustomMarshaler|Descripción|  
|-----------------------|-----------------------------|-----------------|  
|Conversión (de código nativo a código administrado)|<xref:System.Runtime.InteropServices.ICustomMarshaler.MarshalNativeToManaged%2A>|Calcula las referencias de un puntero a datos nativos en un objeto administrado. Este método devuelve un contenedor CCW personalizado en tiempo de ejecución (RCW) que se puede calcular las referencias de la interfaz no administrada que se pasa como un argumento. El contador de referencias debe devolver una instancia del contenedor RCW personalizado para ese tipo.|  
|Conversión (de código administrado en código nativo)|<xref:System.Runtime.InteropServices.ICustomMarshaler.MarshalManagedToNative%2A>|Calcula las referencias a un objeto administrado en un puntero a datos nativos. Este método devuelve un personalizado contenedor COM invocable (CCW) que se puede calcular las referencias de la interfaz administrada que se pasa como un argumento. El contador de referencias debe devolver una instancia del contenedor CCW personalizado para ese tipo.|  
|Limpieza (de código nativo)|<xref:System.Runtime.InteropServices.ICustomMarshaler.CleanUpNativeData%2A>|Habilita el contador de referencias limpiar los datos nativos (el CCW) devuelto por la <xref:System.Runtime.InteropServices.ICustomMarshaler.MarshalManagedToNative%2A> método.|  
|Limpieza (de código administrado)|<xref:System.Runtime.InteropServices.ICustomMarshaler.CleanUpManagedData%2A>|Habilita el contador de referencias limpiar los datos administrados (el contenedor RCW) devuelto por la <xref:System.Runtime.InteropServices.ICustomMarshaler.MarshalNativeToManaged%2A> método.|  
|Información (sobre código nativo)|<xref:System.Runtime.InteropServices.ICustomMarshaler.GetNativeDataSize%2A>|Devuelve el tamaño de los datos no administrados que se van a calcular.|  
  
### <a name="conversion"></a>Conversión  
 <xref:System.Runtime.InteropServices.ICustomMarshaler.MarshalNativeToManaged%2A?displayProperty=nameWithType>  
  
 Calcula las referencias de un puntero a datos nativos en un objeto administrado. Este método devuelve un contenedor CCW personalizado en tiempo de ejecución (RCW) que se puede calcular las referencias de la interfaz no administrada que se pasa como un argumento. El contador de referencias debe devolver una instancia del contenedor RCW personalizado para ese tipo.  
  
 <xref:System.Runtime.InteropServices.ICustomMarshaler.MarshalManagedToNative%2A?displayProperty=nameWithType>  
  
 Calcula las referencias a un objeto administrado en un puntero a datos nativos. Este método devuelve un personalizado contenedor COM invocable (CCW) que se puede calcular las referencias de la interfaz administrada que se pasa como un argumento. El contador de referencias debe devolver una instancia del contenedor CCW personalizado para ese tipo.  
  
### <a name="cleanup"></a>Limpieza  
 <xref:System.Runtime.InteropServices.ICustomMarshaler.CleanUpNativeData%2A?displayProperty=nameWithType>  
  
 Habilita el contador de referencias limpiar los datos nativos (el CCW) devuelto por la <xref:System.Runtime.InteropServices.ICustomMarshaler.MarshalManagedToNative%2A> método.  
  
 <xref:System.Runtime.InteropServices.ICustomMarshaler.CleanUpManagedData%2A?displayProperty=nameWithType>  
  
 Habilita el contador de referencias limpiar los datos administrados (el contenedor RCW) devuelto por la <xref:System.Runtime.InteropServices.ICustomMarshaler.MarshalNativeToManaged%2A> método.  
  
### <a name="size-information"></a>Información de tamaño  
 <xref:System.Runtime.InteropServices.ICustomMarshaler.GetNativeDataSize%2A?displayProperty=nameWithType>  
  
 Devuelve el tamaño de los datos no administrados que se van a calcular.  
  
## <a name="implementing-the-getinstance-method"></a>Implementar el método GetInstance  
 Además de implementar la <xref:System.Runtime.InteropServices.ICustomMarshaler> interfaz, contadores de referencias personalizados deben implementar un `static` método llamado `GetInstance` que acepta un <xref:System.String> como un parámetro y tiene un tipo de valor devuelto de <xref:System.Runtime.InteropServices.ICustomMarshaler>. Esto `static` método se llama por la capa de interoperabilidad COM de common language runtime para crear una instancia del contador de referencias personalizado. La cadena que se pasa a `GetInstance` es una cookie que el método puede utilizar para personalizar el contenedor personalizado devuelto.  
  
```  
static ICustomMarshaler *GetInstance(String *pstrCookie);  
```  
  
## <a name="applying-marshalasattribute"></a>Aplicar MarshalAsAttribute  
 Para utilizar un contador de referencias personalizado, debe aplicar la <xref:System.Runtime.InteropServices.MarshalAsAttribute> para el parámetro o un campo que se calculan las referencias de atributo.  
  
 También se debe pasar la <xref:System.Runtime.InteropServices.UnmanagedType.CustomMarshaler?displayProperty=nameWithType> valor de enumeración para la <xref:System.Runtime.InteropServices.MarshalAsAttribute> constructor. Además, debe especificar el <xref:System.Runtime.InteropServices.MarshalAsAttribute.MarshalType> campo con uno de los siguientes parámetros con nombre:  
  
-   <xref:System.Runtime.InteropServices.MarshalAsAttribute.MarshalType> (obligatorio): el nombre calificado con el ensamblado del contador de referencias personalizado. El nombre debe incluir el espacio de nombres y la clase de contador de referencias personalizado. Si el contador de referencias personalizado no está definido en el ensamblado que se utiliza en, debe especificar el nombre del ensamblado en el que está definido.  
  
    > [!NOTE]
    >  Puede usar el <xref:System.Runtime.InteropServices.MarshalAsAttribute.MarshalTypeRef> campo en lugar de la <xref:System.Runtime.InteropServices.MarshalAsAttribute.MarshalType> campo. <xref:System.Runtime.InteropServices.MarshalAsAttribute.MarshalTypeRef> toma un tipo que es fácil de especificar.  
  
-   <xref:System.Runtime.InteropServices.MarshalAsAttribute.MarshalCookie> (opcional): una cookie que se pasa al contador de referencias personalizado. Puede usar la cookie para proporcionar información adicional al contador de referencias. Por ejemplo, si se usa el mismo contador de referencias para proporcionar un número de contenedores, la cookie identifica un contenedor específico. La cookie se pasa a la `GetInstance` método del contador de referencias.  
  
 El <xref:System.Runtime.InteropServices.MarshalAsAttribute> atributo identifica el contador de referencias personalizado para que Active el contenedor adecuado. Servicio de interoperabilidad de common language runtime, a continuación, examina el atributo y crea el tiempo de cálculo de referencias de la primera de las necesidades de argumento (parámetro o campo) que se van a calcular.  
  
 El tiempo de ejecución, a continuación, llama a la <xref:System.Runtime.InteropServices.ICustomMarshaler.MarshalNativeToManaged%2A> y <xref:System.Runtime.InteropServices.ICustomMarshaler.MarshalManagedToNative%2A> métodos en el contador de referencias personalizado para activar el contenedor correcto para controlar la llamada.  
  
## <a name="using-a-custom-marshaler"></a>Uso de un contador de referencias personalizado  
 Una vez completado el contador de referencias personalizado, puede usar como contenedor personalizado para un tipo determinado. En el ejemplo siguiente se muestra la definición de la `IUserData` interfaz administrada:  
  
 [!code-cpp[System.Runtime.InteropServices.ICustomMarshaler#3](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.runtime.interopservices.icustommarshaler/cpp/source.cpp#3)]
 [!code-csharp[System.Runtime.InteropServices.ICustomMarshaler#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.runtime.interopservices.icustommarshaler/cs/source.cs#3)]
 [!code-vb[System.Runtime.InteropServices.ICustomMarshaler#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.runtime.interopservices.icustommarshaler/vb/source.vb#3)]  
  
 En el ejemplo siguiente, la `IUserData` utiliza la interfaz la `NewOldMarshaler` contador de referencias personalizado para permitir que las aplicaciones cliente no administrado pasar un `IOld` interfaz para el `DoSomeStuff` método. La descripción administrada de la `DoSomeStuff` método toma una `INew` de la interfaz, como se muestra en el ejemplo anterior, mientras que la versión no administrada de `DoSomeStuff` toma una `IOld` puntero de interfaz, como se muestra en el ejemplo siguiente.  
  
```  
[uuid(9B2BAADA-0705-11D3-A0CD-00C04FA35826)]  
library UserLib {  
     [uuid(9B2BABCD-0705-11D3-A0CD-00C04FA35826)]  
     interface IUserData : IUnknown  
         HRESULT DoSomeStuff(IUnknown* pIOld);  
}  
```  
  
 La biblioteca de tipos que se genera mediante la exportación de la definición administrada de `IUserData` produce la definición no administrada que se muestra en este ejemplo en lugar de la definición del estándar. El <xref:System.Runtime.InteropServices.MarshalAsAttribute> atributo aplicado a la `INew` argumento en la definición administrada de la `DoSomeStuff` método indica que el argumento utiliza un contador de referencias personalizado, como se muestra en el ejemplo siguiente.  
  
 [!code-cpp[System.Runtime.InteropServices.ICustomMarshaler#4](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.runtime.interopservices.icustommarshaler/cpp/source.cpp#4)]
 [!code-csharp[System.Runtime.InteropServices.ICustomMarshaler#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.runtime.interopservices.icustommarshaler/cs/source.cs#4)]
 [!code-vb[System.Runtime.InteropServices.ICustomMarshaler#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.runtime.interopservices.icustommarshaler/vb/source.vb#4)]  
  
 [!code-cpp[System.Runtime.InteropServices.ICustomMarshaler#5](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.runtime.interopservices.icustommarshaler/cpp/source.cpp#5)]
 [!code-csharp[System.Runtime.InteropServices.ICustomMarshaler#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.runtime.interopservices.icustommarshaler/cs/source.cs#5)]
 [!code-vb[System.Runtime.InteropServices.ICustomMarshaler#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.runtime.interopservices.icustommarshaler/vb/source.vb#5)]  
  
 En los ejemplos anteriores, el primer parámetro proporcionado a la <xref:System.Runtime.InteropServices.MarshalAsAttribute> atributo es el <xref:System.Runtime.InteropServices.UnmanagedType.CustomMarshaler?displayProperty=nameWithType> valor de enumeración `UnmanagedType.CustomMarshaler`.  
  
 El segundo parámetro es el <xref:System.Runtime.InteropServices.MarshalAsAttribute.MarshalType> campo, que proporciona el nombre calificado con el ensamblado del contador de referencias personalizado. Este nombre consta del espacio de nombres y la clase de contador de referencias personalizado (`MarshalType="MyCompany.NewOldMarshaler"`).  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="CleanUpManagedData">
      <MemberSignature Language="C#" Value="public void CleanUpManagedData (object ManagedObj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void CleanUpManagedData(object ManagedObj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.ICustomMarshaler.CleanUpManagedData(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub CleanUpManagedData (ManagedObj As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void CleanUpManagedData(System::Object ^ ManagedObj);" />
      <MemberSignature Language="F#" Value="abstract member CleanUpManagedData : obj -&gt; unit" Usage="iCustomMarshaler.CleanUpManagedData ManagedObj" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ManagedObj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="ManagedObj">Objeto administrado que se va a destruir.</param>
        <summary>Realiza la limpieza necesaria en los datos administrados cuando ya no son necesarios.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CleanUpNativeData">
      <MemberSignature Language="C#" Value="public void CleanUpNativeData (IntPtr pNativeData);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void CleanUpNativeData(native int pNativeData) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.ICustomMarshaler.CleanUpNativeData(System.IntPtr)" />
      <MemberSignature Language="VB.NET" Value="Public Sub CleanUpNativeData (pNativeData As IntPtr)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void CleanUpNativeData(IntPtr pNativeData);" />
      <MemberSignature Language="F#" Value="abstract member CleanUpNativeData : nativeint -&gt; unit" Usage="iCustomMarshaler.CleanUpNativeData pNativeData" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pNativeData" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="pNativeData">Puntero a los datos no administrados que se van a destruir.</param>
        <summary>Realiza la limpieza necesaria en los datos no administrados cuando ya no es necesario.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetNativeDataSize">
      <MemberSignature Language="C#" Value="public int GetNativeDataSize ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 GetNativeDataSize() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.ICustomMarshaler.GetNativeDataSize" />
      <MemberSignature Language="VB.NET" Value="Public Function GetNativeDataSize () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int GetNativeDataSize();" />
      <MemberSignature Language="F#" Value="abstract member GetNativeDataSize : unit -&gt; int" Usage="iCustomMarshaler.GetNativeDataSize " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Devuelve el tamaño de los datos nativos cuyas referencias se van a calcular.</summary>
        <returns>Tamaño de los datos nativos, en bytes.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MarshalManagedToNative">
      <MemberSignature Language="C#" Value="public IntPtr MarshalManagedToNative (object ManagedObj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance native int MarshalManagedToNative(object ManagedObj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.ICustomMarshaler.MarshalManagedToNative(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function MarshalManagedToNative (ManagedObj As Object) As IntPtr" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IntPtr MarshalManagedToNative(System::Object ^ ManagedObj);" />
      <MemberSignature Language="F#" Value="abstract member MarshalManagedToNative : obj -&gt; nativeint" Usage="iCustomMarshaler.MarshalManagedToNative ManagedObj" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ManagedObj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="ManagedObj">Objeto administrado que se va a convertir.</param>
        <summary>Convierte los datos administrados en datos no administrados.</summary>
        <returns>Puntero a la vista COM del objeto administrado.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MarshalNativeToManaged">
      <MemberSignature Language="C#" Value="public object MarshalNativeToManaged (IntPtr pNativeData);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object MarshalNativeToManaged(native int pNativeData) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.ICustomMarshaler.MarshalNativeToManaged(System.IntPtr)" />
      <MemberSignature Language="VB.NET" Value="Public Function MarshalNativeToManaged (pNativeData As IntPtr) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ MarshalNativeToManaged(IntPtr pNativeData);" />
      <MemberSignature Language="F#" Value="abstract member MarshalNativeToManaged : nativeint -&gt; obj" Usage="iCustomMarshaler.MarshalNativeToManaged pNativeData" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pNativeData" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="pNativeData">Puntero a los datos no administrados que se van a ajustar.</param>
        <summary>Convierte los datos no administrados en datos administrados.</summary>
        <returns>Objeto que representa la vista administrada de los datos COM.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>