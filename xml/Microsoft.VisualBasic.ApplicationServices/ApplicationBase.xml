<Type Name="ApplicationBase" FullName="Microsoft.VisualBasic.ApplicationServices.ApplicationBase">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="e7e33aeefede07a0ceecef4a9c198881c9a09a59" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="es-ES" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30340909" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class ApplicationBase" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi ApplicationBase extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.VisualBasic.ApplicationServices.ApplicationBase" />
  <TypeSignature Language="VB.NET" Value="Public Class ApplicationBase" />
  <TypeSignature Language="C++ CLI" Value="public ref class ApplicationBase" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.VisualBasic</AssemblyName>
    <AssemblyVersion>10.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Proporciona las propiedades, los métodos y los eventos relacionados con la aplicación actual.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Las propiedades expuestas por el `My.Application` devueltos datos que se asocia únicamente a la aplicación actual o el archivo DLL del objeto. No se puede modificar la información de nivel de sistema mediante `My.Application`.  
  
 El objeto `My.Application` consta de las clases siguientes:  
  
-   <xref:Microsoft.VisualBasic.ApplicationServices.ApplicationBase> proporciona miembros que están disponibles en todos los proyectos.  
  
-   <xref:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase> proporciona a miembros que están disponibles en aplicaciones de Windows Forms.  
  
-   <xref:Microsoft.VisualBasic.ApplicationServices.ConsoleApplicationBase> proporciona a miembros que están disponibles en las aplicaciones de consola.  
  
   
  
## Examples  
 Este ejemplo se utiliza la `My.Application.GetEnvironmentVariable` método para obtener y mostrar el valor de la variable de entorno PATH, si este valor está disponible. De lo contrario, aparecerá un mensaje que indica que la variable de entorno PATH no existe.  
  
 [!code-vb[VbVbalrMyApplication#7](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMyApplication/VB/Form1.vb#7)]  
  
 ]]></format>
    </remarks>
    <altmember cref="P:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.ApplicationContext" />
    <altmember cref="T:Microsoft.VisualBasic.ApplicationServices.ConsoleApplicationBase" />
    <altmember cref="T:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ApplicationBase ();" />
      <MemberSignature Language="ILAsm" Value=".method public specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.ApplicationServices.ApplicationBase.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ApplicationBase();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Inicializa una nueva instancia de la clase <see cref="T:Microsoft.VisualBasic.ApplicationServices.ApplicationBase" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ChangeCulture">
      <MemberSignature Language="C#" Value="public void ChangeCulture (string cultureName);" />
      <MemberSignature Language="ILAsm" Value=".method public instance void ChangeCulture(string cultureName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.ApplicationServices.ApplicationBase.ChangeCulture(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ChangeCulture (cultureName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ChangeCulture(System::String ^ cultureName);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cultureName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="cultureName">
          <see langword="String" />. Nombre de la referencia cultural en forma de cadena. Para obtener una lista de posibles nombres, vea <see cref="T:System.Globalization.CultureInfo" />.</param>
        <summary>Cambia la referencia cultural utilizada por el actual subproceso para manipular las cadenas y aplicarles un formato.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El `My.Application.ChangeCulture` método los cambios del subproceso actual <xref:System.Threading.Thread.CurrentCulture%2A> propiedad. <xref:System.Threading.Thread.CurrentCulture%2A> Determina los formatos predeterminados para las fechas, horas, monedas, números, criterio de ordenación de texto, las comparaciones de cadenas y mayúsculas y minúsculas para todos los cálculos en ese subproceso.  
  
 Para recuperar la referencia cultural actual, puede usar el <xref:Microsoft.VisualBasic.ApplicationServices.ApplicationBase.Culture%2A> propiedad o <xref:System.Threading.Thread.CurrentCulture%2A> propiedad.  
  
 El <xref:System.Threading.Thread.CurrentCulture%2A> configuración es distinta de una configuración de idioma. Contiene solo los datos relacionados con la configuración estándar para una región geográfica. Por lo tanto, la <xref:System.Threading.Thread.CurrentCulture%2A> propiedad solo puede establecerse en una referencia cultural específica o en la <xref:System.Globalization.CultureInfo.InvariantCulture%2A>.  
  
 Use la `My.Application.ChangeUICulture` método para cambiar la referencia cultural que utiliza el subproceso actual para recuperar los recursos específicos de la referencia cultural.  
  
> [!IMPORTANT]
>  El `My.Application.ChangeCulture` método requiere un <xref:System.Security.Permissions.SecurityPermission> con el <xref:System.Security.Permissions.SecurityPermissionFlag.ControlThread> establecido. Manipular subprocesos es peligrosa debido al estado de seguridad asociado a ellos. Por lo tanto, este se debe conceder permiso únicamente cuando sea necesario a código de confianza. No se puede cambiar la referencia cultural de un subproceso en código de confianza parcial.  
  
## <a name="availability-by-project-type"></a>Disponibilidad por tipo de proyecto  
  
|Tipo de proyecto|Disponible|  
|-|-|  
|Aplicación de Windows Forms|**Sí**|  
|Biblioteca de clases|**Sí**|  
|Aplicación de consola|**Sí**|  
|Biblioteca de controles de Windows Forms|**Sí**|  
|Biblioteca de controles Web|No|  
|Servicio de Windows|**Sí**|  
|Sitio web|No|  
  
   
  
## Examples  
 En este ejemplo se muestra cómo cambiar la referencia cultural cambia la representación de cadena de fechas.  
  
 [!code-vb[VbVbalrMyApplication#1](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMyApplication/VB/Form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="cultureName" /> es <see langword="Nothing" />.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="cultureName" /> no es un nombre de referencia cultural válido.</exception>
        <altmember cref="P:System.Threading.Thread.CurrentCulture" />
      </Docs>
    </Member>
    <Member MemberName="ChangeUICulture">
      <MemberSignature Language="C#" Value="public void ChangeUICulture (string cultureName);" />
      <MemberSignature Language="ILAsm" Value=".method public instance void ChangeUICulture(string cultureName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.ApplicationServices.ApplicationBase.ChangeUICulture(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ChangeUICulture (cultureName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ChangeUICulture(System::String ^ cultureName);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cultureName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="cultureName">
          <see langword="String" />. Nombre de la referencia cultural en forma de cadena. Para obtener una lista de posibles nombres, vea <see cref="T:System.Globalization.CultureInfo" />.</param>
        <summary>Cambia la referencia cultural que utiliza el subproceso actual para recuperar los recursos específicos de la referencia cultural.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El `My.Application.ChangeUICulture` método los cambios del subproceso actual <xref:System.Threading.Thread.CurrentUICulture%2A> propiedad. El <xref:System.Threading.Thread.CurrentUICulture%2A> propiedad determina la referencia cultural utilizada por el Administrador de recursos y la `My.Resources` objeto; usa esta información para buscar recursos específicos de la referencia cultural en tiempo de ejecución.  
  
 Para recuperar la referencia cultural de interfaz de usuario actual, puede usar el <xref:Microsoft.VisualBasic.ApplicationServices.ApplicationBase.UICulture%2A> propiedad o <xref:System.Threading.Thread.CurrentUICulture%2A> propiedad.  
  
 Use la `My.Application.ChangeCulture` método para cambiar la referencia cultural que utiliza el subproceso actual para la manipulación de cadenas y el formato de cadena.  
  
## <a name="availability-by-project-type"></a>Disponibilidad por tipo de proyecto  
  
|Tipo de proyecto|Disponible|  
|-|-|  
|Aplicación de Windows Forms|**Sí**|  
|Biblioteca de clases|**Sí**|  
|Aplicación de consola|**Sí**|  
|Biblioteca de controles de Windows Forms|**Sí**|  
|Biblioteca de controles Web|No|  
|Servicio de Windows|**Sí**|  
|Sitio web|No|  
  
   
  
## Examples  
 Este ejemplo se utiliza la `My.Application.ChangeUICulture` método para establecer la referencia cultural que el `My.Resources` object utiliza para recuperar recursos.  
  
 [!code-vb[VbVbalrMyResources#10](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMyResources/VB/Form1.vb#10)]  
  
 En este ejemplo funcione, la aplicación debe tener una cadena denominada `Message` en recursos de la aplicación de archivos y la aplicación deben tener la versión de referencia cultural francesa de ese archivo de recursos, `Resources.fr-FR.resx`. Para obtener más información, consulte [Cómo: agregar o quitar recursos](http://msdn.microsoft.com/library/7b77bc06-3952-4799-b029-def3f8f7f88d).  
  
 Si la aplicación no tiene la versión de referencia cultural francesa de ese archivo de recursos, el `My.Resources` objeto recupera el recurso desde el archivo de recursos de la referencia cultural predeterminada.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="cultureName" /> es <see langword="Nothing" />.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="cultureName" /> no es un nombre de referencia cultural válido.</exception>
      </Docs>
    </Member>
    <Member MemberName="Culture">
      <MemberSignature Language="C#" Value="public System.Globalization.CultureInfo Culture { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Globalization.CultureInfo Culture" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.ApplicationServices.ApplicationBase.Culture" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Culture As CultureInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Globalization::CultureInfo ^ Culture { System::Globalization::CultureInfo ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Globalization.CultureInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene la referencia cultural que utiliza el subproceso actual para manipular las cadenas y aplicarles un formato.</summary>
        <value>Objeto <see cref="T:System.Globalization.CultureInfo" /> que representa la referencia cultural que el subproceso actual usa para manipular las cadenas y aplicarles un formato.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El `My.Application.CurrentCulture` propiedad obtiene el <xref:System.Globalization.CultureInfo> objeto que utiliza el subproceso actual para la manipulación de cadenas y el formato de cadena. Este objeto es idéntico al devuelto por la <xref:System.Threading.Thread.CurrentCulture%2A> propiedad, que controla muchos de los cálculos relacionados con cadenas en ese subproceso. El <xref:System.Threading.Thread.CurrentCulture%2A> propiedad determina los formatos predeterminados para las fechas, horas, moneda y números. También determina cómo ordenar, comparar y poner en mayúsculas las cadenas.  
  
 Para cambiar la referencia cultural, puede usar el <xref:Microsoft.VisualBasic.ApplicationServices.ApplicationBase.ChangeCulture%2A> method o asignar otra <xref:System.Globalization.CultureInfo> el objeto a la <xref:System.Threading.Thread.CurrentCulture%2A> propiedad.  
  
 El <xref:System.Threading.Thread.CurrentCulture%2A> configuración es distinta de una configuración de idioma. Contiene solo los datos relacionados con la configuración estándar para una región geográfica.  
  
 Use la `My.Application.CurrentUICulture` propiedad que se va a obtener la referencia cultural que utiliza el subproceso actual para recuperar los recursos específicos de la referencia cultural.  
  
## <a name="availability-by-project-type"></a>Disponibilidad por tipo de proyecto  
  
|Tipo de proyecto|Disponible|  
|-|-|  
|Aplicación de Windows Forms|**Sí**|  
|Biblioteca de clases|**Sí**|  
|Aplicación de consola|**Sí**|  
|Biblioteca de controles de Windows Forms|**Sí**|  
|Biblioteca de controles Web|No|  
|Servicio de Windows|**Sí**|  
|Sitio web|No|  
  
   
  
## Examples  
 En este ejemplo se muestra cómo afecta la referencia cultural a la representación de cadena de fechas.  
  
 [!code-vb[VbVbalrMyApplication#1](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMyApplication/VB/Form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Globalization.CultureInfo" />
        <altmember cref="P:System.Threading.Thread.CurrentCulture" />
      </Docs>
    </Member>
    <Member MemberName="GetEnvironmentVariable">
      <MemberSignature Language="C#" Value="public string GetEnvironmentVariable (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public instance string GetEnvironmentVariable(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.ApplicationServices.ApplicationBase.GetEnvironmentVariable(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetEnvironmentVariable (name As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ GetEnvironmentVariable(System::String ^ name);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">
          <see langword="String" /> que contiene el nombre de la variable de entorno.</param>
        <summary>Devuelve el valor de la variable de entorno especificada.</summary>
        <returns>
          <see langword="String" /> que contiene el valor de la variable de entorno con el parámetro <paramref name="name" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El `My.Application.GetEnvironmentVariable` método devuelve la variable de entorno con el nombre `name`. Este método es similar a <xref:System.Environment.GetEnvironmentVariable%28System.String%29?displayProperty=nameWithType>, salvo que este método produce una excepción si la variable de entorno especificada por `name` no existe.  
  
## <a name="availability-by-project-type"></a>Disponibilidad por tipo de proyecto  
  
|Tipo de proyecto|Disponible|  
|-|-|  
|Aplicación de Windows Forms|**Sí**|  
|Biblioteca de clases|**Sí**|  
|Aplicación de consola|**Sí**|  
|Biblioteca de controles de Windows Forms|**Sí**|  
|Biblioteca de controles Web|No|  
|Servicio de Windows|**Sí**|  
|Sitio web|No|  
  
   
  
## Examples  
 Este ejemplo se utiliza la `My.Application.GetEnvironmentVariable` método para obtener y mostrar el valor de la variable de entorno PATH, si está disponible. De lo contrario, aparecerá un mensaje que indica que la variable de entorno PATH no existe.  
  
 [!code-vb[VbVbalrMyApplication#7](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMyApplication/VB/Form1.vb#7)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="name" /> es <see langword="Nothing" />.</exception>
        <exception cref="T:System.ArgumentException">La variable de entorno especificada por <paramref name="name" /> no existe.</exception>
        <exception cref="T:System.Security.SecurityException">El código de llamada no tiene permisos <see cref="T:System.Security.Permissions.EnvironmentPermission" /> con acceso <see langword="Read" />.</exception>
        <altmember cref="M:System.Environment.GetEnvironmentVariable(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="Info">
      <MemberSignature Language="C#" Value="public Microsoft.VisualBasic.ApplicationServices.AssemblyInfo Info { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.VisualBasic.ApplicationServices.AssemblyInfo Info" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.ApplicationServices.ApplicationBase.Info" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Info As AssemblyInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Microsoft::VisualBasic::ApplicationServices::AssemblyInfo ^ Info { Microsoft::VisualBasic::ApplicationServices::AssemblyInfo ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.VisualBasic.ApplicationServices.AssemblyInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene un objeto que proporciona las propiedades para obtener información sobre el ensamblado de la aplicación, como el número de versión, la descripción, etc.</summary>
        <value>Objeto <see cref="T:Microsoft.VisualBasic.ApplicationServices.AssemblyInfo" /> de la aplicación actual.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Este ejemplo se utiliza la `My.Application.Info.Version` propiedad para mostrar la versión de la aplicación.  
  
 [!code-vb[VbVbalrMyApplication#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMyApplication/VB/Form1.vb#30)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:Microsoft.VisualBasic.ApplicationServices.AssemblyInfo" />
      </Docs>
    </Member>
    <Member MemberName="Log">
      <MemberSignature Language="C#" Value="public Microsoft.VisualBasic.Logging.Log Log { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.VisualBasic.Logging.Log Log" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.ApplicationServices.ApplicationBase.Log" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Log As Log" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Microsoft::VisualBasic::Logging::Log ^ Log { Microsoft::VisualBasic::Logging::Log ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.VisualBasic.Logging.Log</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene un objeto que proporciona las propiedades y los métodos para escribir la información de los eventos y excepciones en los agentes de escucha de registro de la aplicación.</summary>
        <value>Objeto <see cref="T:Microsoft.VisualBasic.Logging.Log" /> de la aplicación actual.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Este ejemplo muestra cómo usar el método `My.Application.Log.WriteEntry` para registrar información de seguimiento. Para obtener más información, consulte [Cómo: escribir mensajes de registro](~/docs/visual-basic/developing-apps/programming/log-info/how-to-write-log-messages.md).  
  
 [!code-vb[VbVbalrMyApplicationLog#11](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMyApplicationLog/VB/Form1.vb#11)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:Microsoft.VisualBasic.Logging.Log" />
      </Docs>
    </Member>
    <Member MemberName="UICulture">
      <MemberSignature Language="C#" Value="public System.Globalization.CultureInfo UICulture { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Globalization.CultureInfo UICulture" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.ApplicationServices.ApplicationBase.UICulture" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property UICulture As CultureInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Globalization::CultureInfo ^ UICulture { System::Globalization::CultureInfo ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Globalization.CultureInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene la referencia cultural que utiliza el subproceso actual para recuperar los recursos específicos de la referencia cultural.</summary>
        <value>Objeto <see cref="T:System.Globalization.CultureInfo" /> que representa la referencia cultural que el subproceso actual usa para recuperar recursos específicos de la referencia cultural.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El `My.Application.CurrentUICulture` propiedad obtiene el <xref:System.Globalization.CultureInfo> que utiliza el subproceso actual para recuperar los recursos específicos de la referencia cultural del objeto. Este objeto es idéntico al devuelto por la <xref:System.Threading.Thread.CurrentUICulture%2A> propiedad. El <xref:System.Threading.Thread.CurrentUICulture%2A> propiedad determina la referencia cultural utilizada por el Administrador de recursos y la `My.Resources` (objeto), información que necesita para buscar recursos específicos de la referencia cultural en tiempo de ejecución.  
  
 Para cambiar la referencia cultural, puede usar el <xref:Microsoft.VisualBasic.ApplicationServices.ApplicationBase.ChangeUICulture%2A> method o asignar otra <xref:System.Globalization.CultureInfo> el objeto a la <xref:System.Threading.Thread.CurrentUICulture%2A> propiedad.  
  
 El <xref:System.Threading.Thread.CurrentCulture%2A> configuración es distinta de una configuración de idioma. Contiene solo los datos relacionados con la configuración estándar para una región geográfica.  
  
 Use la `My.Application.CurrentCulture` propiedad que se va a obtener la referencia cultural que utiliza el subproceso actual para la manipulación de cadenas y el formato de cadena.  
  
## <a name="availability-by-project-type"></a>Disponibilidad por tipo de proyecto  
  
|Tipo de proyecto|Disponible|  
|-|-|  
|Aplicación de Windows Forms|**Sí**|  
|Biblioteca de clases|**Sí**|  
|Aplicación de consola|**Sí**|  
|Biblioteca de controles de Windows Forms|**Sí**|  
|Biblioteca de controles Web|No|  
|Servicio de Windows|**Sí**|  
|Sitio web|No|  
  
   
  
## Examples  
 Este ejemplo se utiliza la `My.Application.CurrentCulture` propiedad que se va a almacenar en caché la referencia cultural actual antes de cambiar mediante el uso de <xref:Microsoft.VisualBasic.ApplicationServices.ApplicationBase.ChangeUICulture%2A>. El `My.Application.ChangeUICulture` método establece la referencia cultural que el `My.Resources` object utiliza para recuperar recursos.  
  
 [!code-vb[VbVbalrMyResources#10](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMyResources/VB/Form1.vb#10)]  
  
 En este ejemplo funcione, la aplicación debe tener una cadena denominada `Message` en recursos de la aplicación de archivos y la aplicación deben tener la versión de referencia cultural francesa de ese archivo de recursos, `Resources.fr-FR.resx`. Para obtener más información, consulte [Cómo: agregar o quitar recursos](http://msdn.microsoft.com/library/7b77bc06-3952-4799-b029-def3f8f7f88d).  
  
 Si la aplicación no tiene la versión de referencia cultural francesa de ese archivo de recursos, el `My.Resources` objeto recupera el recurso desde el archivo de recursos de la referencia cultural predeterminada.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Globalization.CultureInfo" />
        <altmember cref="P:System.Threading.Thread.CurrentUICulture" />
      </Docs>
    </Member>
  </Members>
</Type>