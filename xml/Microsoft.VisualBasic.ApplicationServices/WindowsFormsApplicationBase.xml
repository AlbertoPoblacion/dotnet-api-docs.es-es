<Type Name="WindowsFormsApplicationBase" FullName="Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="bcd610cd3ee405c4d61295d812032303aeaaf2ad" />
    <Meta Name="ms.sourcegitcommit" Value="5a49536d99d2d0b54e4cb7280870903e043272df" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="es-ES" />
    <Meta Name="ms.lasthandoff" Value="07/03/2018" />
    <Meta Name="ms.locfileid" Value="37715620" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class WindowsFormsApplicationBase : Microsoft.VisualBasic.ApplicationServices.ConsoleApplicationBase" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi WindowsFormsApplicationBase extends Microsoft.VisualBasic.ApplicationServices.ConsoleApplicationBase" />
  <TypeSignature Language="DocId" Value="T:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase" />
  <TypeSignature Language="VB.NET" Value="Public Class WindowsFormsApplicationBase&#xA;Inherits ConsoleApplicationBase" />
  <TypeSignature Language="C++ CLI" Value="public ref class WindowsFormsApplicationBase : Microsoft::VisualBasic::ApplicationServices::ConsoleApplicationBase" />
  <TypeSignature Language="F#" Value="type WindowsFormsApplicationBase = class&#xA;    inherit ConsoleApplicationBase" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.VisualBasic</AssemblyName>
    <AssemblyVersion>8.0.0.0</AssemblyVersion>
    <AssemblyVersion>10.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Microsoft.VisualBasic.ApplicationServices.ConsoleApplicationBase</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Proporciona las propiedades, los métodos y los eventos relacionados con la aplicación actual.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Las propiedades expuestas por el `My.Application` devueltos datos que se asocia únicamente a la aplicación actual o el archivo DLL del objeto. No se puede modificar la información de nivel de sistema mediante `My.Application`.  
  
 El objeto `My.Application` consta de las clases siguientes:  
  
-   <xref:Microsoft.VisualBasic.ApplicationServices.ApplicationBase> proporciona miembros que están disponibles en todos los proyectos.  
  
-   <xref:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase> proporciona a miembros que están disponibles en las aplicaciones de Windows Forms.  
  
-   <xref:Microsoft.VisualBasic.ApplicationServices.ConsoleApplicationBase> proporciona a miembros que están disponibles en las aplicaciones de consola.  
  
   
  
## Examples  
 En este ejemplo usa un bucle para recorrer en iteración los formularios abiertos de la aplicación, selecciona las formas que se pueden acceder directamente por el subproceso actual y muestra sus títulos en un <xref:System.Windows.Forms.ListBox> control. Para obtener información acerca de cómo obtener acceso a los formularios abiertos, vea <xref:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.OpenForms%2A>.  
  
 [!code-vb[VbVbalrMyApplication#10](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMyApplication/VB/Form1.vb#10)]  
  
 Este ejemplo requiere que la aplicación de Windows Forms tienen un formulario denominado `Form1` que contiene un cuadro de lista denominado `ListBox1`.  
  
 ]]></format>
    </remarks>
    <altmember cref="T:Microsoft.VisualBasic.ApplicationServices.ConsoleApplicationBase" />
    <altmember cref="T:Microsoft.VisualBasic.ApplicationServices.ApplicationBase" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Inicializa una nueva instancia de la clase <see cref="T:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase" />.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public WindowsFormsApplicationBase ();" />
      <MemberSignature Language="ILAsm" Value=".method public specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; WindowsFormsApplicationBase();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Inicializa una nueva instancia de la clase <see cref="T:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public WindowsFormsApplicationBase (Microsoft.VisualBasic.ApplicationServices.AuthenticationMode authenticationMode);" />
      <MemberSignature Language="ILAsm" Value=".method public specialname rtspecialname instance void .ctor(valuetype Microsoft.VisualBasic.ApplicationServices.AuthenticationMode authenticationMode) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.#ctor(Microsoft.VisualBasic.ApplicationServices.AuthenticationMode)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; WindowsFormsApplicationBase(Microsoft::VisualBasic::ApplicationServices::AuthenticationMode authenticationMode);" />
      <MemberSignature Language="F#" Value="new Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase : Microsoft.VisualBasic.ApplicationServices.AuthenticationMode -&gt; Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase" Usage="new Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase authenticationMode" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="authenticationMode" Type="Microsoft.VisualBasic.ApplicationServices.AuthenticationMode" />
      </Parameters>
      <Docs>
        <param name="authenticationMode">
          <see cref="T:Microsoft.VisualBasic.ApplicationServices.AuthenticationMode" />. Especifica el modo de autenticación de la aplicación.</param>
        <summary>Inicializa una nueva instancia de la clase <see cref="T:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase" /> con el modo de autenticación especificado.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si el `authenticationMode` parámetro es el <xref:Microsoft.VisualBasic.ApplicationServices.AuthenticationMode.Windows> valor de enumeración y, a continuación, este constructor intenta establecer el subproceso actual <xref:System.Threading.Thread.CurrentPrincipal%2A> propiedad a la <xref:System.Security.Principal.WindowsPrincipal> para el usuario actual.  
  
 Si el `authenticationMode` parámetro es el <xref:Microsoft.VisualBasic.ApplicationServices.AuthenticationMode.ApplicationDefined> valor de enumeración y, a continuación, este constructor sale del subproceso actual <xref:System.Threading.Thread.CurrentPrincipal%2A> sin cambios de propiedad.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ApplicationContext">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.ApplicationContext ApplicationContext { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.ApplicationContext ApplicationContext" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.ApplicationContext" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ApplicationContext As ApplicationContext" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::ApplicationContext ^ ApplicationContext { System::Windows::Forms::ApplicationContext ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ApplicationContext : System.Windows.Forms.ApplicationContext" Usage="Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.ApplicationContext" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ApplicationContext</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene el objeto <see cref="T:System.Windows.Forms.ApplicationContext" /> del actual subproceso de una aplicación de Windows Forms.</summary>
        <value>Esta propiedad devuelve el objeto <see cref="T:System.Windows.Forms.ApplicationContext" /> del actual subproceso. Ese objeto contiene información contextual sobre el subproceso.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Se trata de un miembro avanzado; no aparecen en IntelliSense a menos que haga clic en el **todas** ficha.  
  
## <a name="availability-by-project-type"></a>Disponibilidad por tipo de proyecto  
  
|Tipo de proyecto|Disponible|  
|-|-|  
|Aplicación de Windows Forms|**Sí**|  
|Biblioteca de clases|No|  
|Aplicación de consola|No|  
|Biblioteca de controles de Windows Forms|No|  
|Biblioteca de controles Web|No|  
|Servicio de Windows|No|  
|Sitio web|No|  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.ApplicationContext" />
      </Docs>
    </Member>
    <Member MemberName="DoEvents">
      <MemberSignature Language="C#" Value="public void DoEvents ();" />
      <MemberSignature Language="ILAsm" Value=".method public instance void DoEvents() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.DoEvents" />
      <MemberSignature Language="VB.NET" Value="Public Sub DoEvents ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DoEvents();" />
      <MemberSignature Language="F#" Value="member this.DoEvents : unit -&gt; unit" Usage="windowsFormsApplicationBase.DoEvents " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Procesa todos los mensajes de Windows que hay actualmente en la cola de mensajes.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El `My.Application.DoEvents` método permite que la aplicación controlar otros eventos que se puedan producir mientras se ejecuta el código. El `My.Application.DoEvents` método tiene el mismo comportamiento que el <xref:System.Windows.Forms.Application.DoEvents%2A> método.  
  
 Al ejecutar una aplicación de Windows Forms, crea un nuevo formulario, que, a continuación, espera a controlar eventos. Cada vez que el formulario controla un evento, como un clic del botón, procesa todo el código asociado al evento. Todos los demás eventos de espera en la cola. Mientras que el código controla el evento, la aplicación no responde. Por ejemplo, la ventana no vuelve a dibujarse si se arrastra otra ventana en la parte superior.  
  
 Si se llama a `My.Application.DoEvents` en el código, la aplicación puede controlar los demás eventos. Por ejemplo, si el código agrega datos a un <xref:System.Windows.Forms.ListBox> en un bucle y después de cada paso del bucle llama a `My.Application.DoEvents`, el formulario se vuelve a dibujar cuando se arrastra otra ventana. Si quita `My.Application.DoEvents` desde el código, el formulario no volverá a dibujarse hasta que finalice el controlador de eventos click del botón ejecutar.  
  
 Por lo general, use este método en un bucle para procesar los mensajes.  
  
> [!NOTE]
>  El `My.Application.DoEvents` método no procesa los eventos en la misma manera como lo hace el formulario. Utilice el subprocesamiento múltiple para que el formulario controle directamente los eventos. Para obtener más información, consulte [aplicaciones multiproceso con comportamiento](http://msdn.microsoft.com/library/a06a1a56-dd16-44e8-bc01-2c2255511bc6).  
  
> [!CAUTION]
>  Si llama un método que controla un evento de interfaz de usuario la `My.Application.DoEvents` método, el método podría ser volver a escribir antes de que finalice. Esto puede ocurrir porque el `My.Application.DoEvents` método procesa los mensajes de Windows, y los mensajes de Windows pueden provocar eventos.  
  
 La tabla siguiente muestra un ejemplo de una tarea que implica la `My.Application.DoEvents` método.  
  
|En|Vea|  
|-|-|  
|Permitir a un formulario responder a la interfaz de usuario de entrada mientras está ocupado|[Tutorial: Controlar eventos](~/docs/visual-basic/programming-guide/language-features/events/walkthrough-handling-events.md)|  
  
## <a name="availability-by-project-type"></a>Disponibilidad por tipo de proyecto  
  
|Tipo de proyecto|Disponible|  
|-|-|  
|Aplicación de Windows Forms|**Sí**|  
|Biblioteca de clases|No|  
|Aplicación de consola|No|  
|Biblioteca de controles de Windows Forms|No|  
|Biblioteca de controles Web|No|  
|Servicio de Windows|No|  
|Sitio web|No|  
  
   
  
## Examples  
 Este ejemplo se usa el `My.Application.DoEvents` método para permitir que la interfaz de usuario para `TextBox1` para actualizar.  
  
 [!code-vb[VbVbalrMyApplication#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMyApplication/VB/Form1.vb#6)]  
  
 Este código debe estar en un formulario que tiene un `TextBox1` componente con un `Text` propiedad.  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.FileIOPermission">Controla la capacidad para tener acceso a archivos y carpetas. Enumeración asociada: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />.</permission>
        <permission cref="T:System.Security.Permissions.UIPermission">Controla los permisos relacionados con las interfaces de usuario y el Portapapeles. Enumeración asociada: <see cref="F:System.Security.Permissions.UIPermissionWindow.AllWindows" />.</permission>
        <altmember cref="M:System.Windows.Forms.Application.DoEvents" />
      </Docs>
    </Member>
    <Member MemberName="EnableVisualStyles">
      <MemberSignature Language="C#" Value="protected bool EnableVisualStyles { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool EnableVisualStyles" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.EnableVisualStyles" />
      <MemberSignature Language="VB.NET" Value="Protected Property EnableVisualStyles As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; property bool EnableVisualStyles { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.EnableVisualStyles : bool with get, set" Usage="Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.EnableVisualStyles" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Determina si esta aplicación usará los estilos de Windows XP para las ventanas, los controles, etc.</summary>
        <value>Un valor de tipo <see cref="T:System.Boolean" /> que indica si esta aplicación utilizará los estilos de Windows XP para las ventanas, los controles, etc.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.OnInitialize%2A> método usa esta propiedad para determinar si se debe llamar a <xref:System.Windows.Forms.Application.EnableVisualStyles%2A>.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.OnInitialize(System.Collections.ObjectModel.ReadOnlyCollection{System.String})" />
        <altmember cref="M:System.Windows.Forms.Application.EnableVisualStyles" />
      </Docs>
    </Member>
    <Member MemberName="HideSplashScreen">
      <MemberSignature Language="C#" Value="protected void HideSplashScreen ();" />
      <MemberSignature Language="ILAsm" Value=".method familyinstance void HideSplashScreen() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.HideSplashScreen" />
      <MemberSignature Language="VB.NET" Value="Protected Sub HideSplashScreen ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void HideSplashScreen();" />
      <MemberSignature Language="F#" Value="member this.HideSplashScreen : unit -&gt; unit" Usage="windowsFormsApplicationBase.HideSplashScreen " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Oculta la pantalla de presentación de la aplicación.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La <xref:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase> clase crea la pantalla de presentación en un subproceso independiente. Este método calcula las referencias de la llamada en el subproceso correcto.  
  
 Este método se llama cuando se realiza el formulario principal carga.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.MinimumSplashScreenDisplayTime" />
        <altmember cref="M:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.ShowSplashScreen" />
        <altmember cref="M:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.OnCreateSplashScreen" />
      </Docs>
    </Member>
    <Member MemberName="IsSingleInstance">
      <MemberSignature Language="C#" Value="protected bool IsSingleInstance { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsSingleInstance" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.IsSingleInstance" />
      <MemberSignature Language="VB.NET" Value="Protected Property IsSingleInstance As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; property bool IsSingleInstance { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.IsSingleInstance : bool with get, set" Usage="Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.IsSingleInstance" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Determina si esta aplicación es una aplicación de instancia única.</summary>
        <value>Un valor de tipo <see cref="T:System.Boolean" /> que indica si esta aplicación es una aplicación de instancia única.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.Run%2A> método utiliza esta propiedad para determinar si esta aplicación es una aplicación de instancia única.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.Run(System.String[])" />
      </Docs>
    </Member>
    <Member MemberName="MainForm">
      <MemberSignature Language="C#" Value="protected System.Windows.Forms.Form MainForm { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.Form MainForm" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.MainForm" />
      <MemberSignature Language="VB.NET" Value="Protected Property MainForm As Form" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; property System::Windows::Forms::Form ^ MainForm { System::Windows::Forms::Form ^ get(); void set(System::Windows::Forms::Form ^ value); };" />
      <MemberSignature Language="F#" Value="member this.MainForm : System.Windows.Forms.Form with get, set" Usage="Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.MainForm" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.Form</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene o establece el formulario principal de esta aplicación.</summary>
        <value>Obtiene o establece el formulario principal de esta aplicación.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use la `MainForm` propiedad para obtener o establecer el <xref:System.Windows.Forms.Form> objeto que utiliza el modelo de inicio/cierre de la aplicación de Visual Basic como formulario principal de la aplicación.  
  
 Esta propiedad admite el modelo de inicio/cierre de la aplicación de Visual Basic. Para obtener más información, consulte [general del modelo de aplicación de Visual Basic](~/docs/visual-basic/developing-apps/development-with-my/overview-of-the-visual-basic-application-model.md).  
  
 Los cambios a esta propiedad no se conservan cuando se cierra la aplicación. Para cambiar de forma permanente el formulario principal, debe cambiar la configuración en el **Diseñador de proyectos**.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.Form" />
      </Docs>
    </Member>
    <Member MemberName="MinimumSplashScreenDisplayTime">
      <MemberSignature Language="C#" Value="public int MinimumSplashScreenDisplayTime { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 MinimumSplashScreenDisplayTime" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.MinimumSplashScreenDisplayTime" />
      <MemberSignature Language="VB.NET" Value="Public Property MinimumSplashScreenDisplayTime As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int MinimumSplashScreenDisplayTime { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.MinimumSplashScreenDisplayTime : int with get, set" Usage="Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.MinimumSplashScreenDisplayTime" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Determina el intervalo mínimo, expresado en milisegundos, durante el cual se muestra la pantalla de presentación.</summary>
        <value>
          <see langword="Integer" />. Intervalo mínimo, expresado en milisegundos, durante el cual se muestra la pantalla de presentación.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El `My.Application.MinimumSplashScreenDisplayTime` propiedad le permite especificar la longitud mínima de tiempo que desea la pantalla de presentación de la aplicación que se mostrará. Si el formulario principal termina de inicializarse en menos tiempo que el especificado por esta propiedad, la pantalla de presentación sigue siendo hasta la cantidad solicitada de paso del tiempo, momento en el que se muestra el formulario principal. Si la aplicación tarda más en iniciarse, la pantalla de presentación se cierra una vez que el formulario principal se vuelve activo.  
  
 Al agregar una pantalla de presentación a la aplicación mediante el Diseñador de proyectos, Establece el `My.Application.MinimumSplashScreenDisplayTime` propiedad a 2000, lo que proporciona un tiempo mínimo de presentación de dos segundos.  
  
 Esta propiedad admite el modelo de aplicación de Visual Basic. Para obtener más información, consulte [general del modelo de aplicación de Visual Basic](~/docs/visual-basic/developing-apps/development-with-my/overview-of-the-visual-basic-application-model.md).  
  
 Debe establecer el `My.Application.MinimumSplashScreenDisplayTime` propiedad en un método que reemplaza el <xref:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.OnInitialize%2A> o <xref:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.OnCreateSplashScreen%2A> método. Código que invalida los métodos de la <xref:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase> clase se debe escribir en el archivo ApplicationEvents.vb, que está oculta de forma predeterminada.  
  
| |  
|-|  
|Para obtener acceso a la ventana del Editor de código para invalidar los miembros|  
|1.  Con un proyecto seleccionado en **el Explorador de soluciones**, haga clic en **propiedades** en el **proyecto** menú.<br />2.  Haga clic en la pestaña **Aplicación** .<br />3.  Haga clic en el botón **Ver eventos de aplicaciones** para abrir el Editor de código.<br /><br />Para obtener más información, consulte [Application Page, Project Designer (Visual Basic)](https://docs.microsoft.com/visualstudio/ide/reference/application-page-project-designer-visual-basic).|  
  
## <a name="availability-by-project-type"></a>Disponibilidad por tipo de proyecto  
  
|Tipo de proyecto|Disponible|  
|-|-|  
|Aplicación de Windows Forms|**Sí**|  
|Biblioteca de clases|No|  
|Aplicación de consola|No|  
|Biblioteca de controles de Windows Forms|No|  
|Biblioteca de controles Web|No|  
|Servicio de Windows|No|  
|Sitio web|No|  
  
   
  
## Examples  
 En este ejemplo se muestra cómo establecer el `My.Application.MinimumSplashScreenDisplayTime` propiedad invalidando el <xref:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.OnInitialize%2A> propiedad.  
  
 [!code-vb[VbVbalrMyApplication#51](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMyApplication/VB/FakeMyEvents.vb#51)]  
  
 En este ejemplo requiere que el proyecto tenga una pantalla de presentación.  
  
 Debe escribir este código en la ventana del Editor de código para eventos de aplicación. Para obtener más información, consulte [Application Page, Project Designer (Visual Basic)](https://docs.microsoft.com/visualstudio/ide/reference/application-page-project-designer-visual-basic).  
  
 ]]></format>
        </remarks>
        <altmember cref="P:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.SplashScreen" />
        <altmember cref="M:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.OnInitialize(System.Collections.ObjectModel.ReadOnlyCollection{System.String})" />
        <altmember cref="M:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.OnCreateSplashScreen" />
        <altmember cref="T:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase" />
      </Docs>
    </Member>
    <Member MemberName="NetworkAvailabilityChanged">
      <MemberSignature Language="C#" Value="public event Microsoft.VisualBasic.Devices.NetworkAvailableEventHandler NetworkAvailabilityChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class Microsoft.VisualBasic.Devices.NetworkAvailableEventHandler NetworkAvailabilityChanged" />
      <MemberSignature Language="DocId" Value="E:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.NetworkAvailabilityChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event NetworkAvailabilityChanged As NetworkAvailableEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event Microsoft::VisualBasic::Devices::NetworkAvailableEventHandler ^ NetworkAvailabilityChanged;" />
      <MemberSignature Language="F#" Value="member this.NetworkAvailabilityChanged : Microsoft.VisualBasic.Devices.NetworkAvailableEventHandler " Usage="member this.NetworkAvailabilityChanged : Microsoft.VisualBasic.Devices.NetworkAvailableEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.VisualBasic.Devices.NetworkAvailableEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Se produce cuando cambia la disponibilidad de la red.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Una aplicación provoca la `NetworkAvailabilityChanged` evento cada vez que cambia la disponibilidad de la red. Puede usar el <xref:Microsoft.VisualBasic.Devices.NetworkAvailableEventArgs.IsNetworkAvailable%2A> propiedad de la `e` para obtener el nuevo estado de la conexión de red. Para obtener el estado actual de la conexión de red, use el <xref:Microsoft.VisualBasic.Devices.Network.IsAvailable%2A> propiedad.  
  
 Este evento se desencadena en el subproceso principal de la aplicación con los otros eventos de interfaz de usuario. Esto permite que el controlador de eventos tener acceso directamente a la interfaz de usuario de la aplicación. Sin embargo, si la aplicación está ocupada con otro evento de interfaz de usuario cuando se genera este evento, este evento no se puede procesar hasta que el otro controlador de eventos finaliza o se llama a la <xref:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.DoEvents%2A> método.  
  
 El <xref:Microsoft.VisualBasic.Devices.Network.NetworkAvailabilityChanged> evento proporciona la misma funcionalidad que este evento pero está disponible para todos los tipos de aplicación.  
  
 El código para el `NetworkAvailabilityChanged` controlador de eventos se almacena en el archivo ApplicationEvents.vb, que está oculta de forma predeterminada.  
  
| |  
|-|  
|Para obtener acceso a la ventana del Editor de código para eventos de aplicación|  
|1.  Tiene un proyecto seleccionado en **el Explorador de soluciones.** Haga clic en **propiedades** en el **proyecto** menú.<br />2.  Haga clic en la pestaña **Aplicación** .<br />3.  Haga clic en el botón **Ver eventos de aplicaciones** para abrir el Editor de código.<br /><br />Para obtener más información, consulte [Application Page, Project Designer (Visual Basic)](https://docs.microsoft.com/visualstudio/ide/reference/application-page-project-designer-visual-basic).|  
  
> [!NOTE]
>  Muchos centros de red proporcionará una conexión de red, incluso aunque el concentrador se desconecta de una red más grande. Por lo tanto, para conexiones con cable, este evento indica el cambio en la conexión entre el equipo y un centro.  
  
> [!NOTE]
>  El `NetworkAvailabilityChanged` aplicaciones no provoca eventos cuando se ejecutan en Windows 95 y Windows 98, o cuando se ejecutan en Windows 2000 por un usuario no administrador. Si se puede ejecutar la aplicación en estos sistemas operativos, use el <xref:Microsoft.VisualBasic.Devices.Network.IsAvailable%2A> property para comprobar la disponibilidad de la red.  
  
## <a name="availability-by-project-type"></a>Disponibilidad por tipo de proyecto  
  
|Tipo de proyecto|Disponible|  
|-|-|  
|Aplicación de Windows Forms|**Sí**|  
|Biblioteca de clases|No|  
|Aplicación de consola|No|  
|Biblioteca de controles de Windows Forms|No|  
|Biblioteca de controles Web|No|  
|Servicio de Windows|No|  
|Sitio web|No|  
  
   
  
## Examples  
 Este ejemplo llama a la `SetConnectionStatus` método predeterminado `Form1` clase cuando se cambia la disponibilidad de la red.  
  
 Debe escribir el código en la ventana del Editor de código para eventos de aplicación. Para obtener acceso a esta ventana, siga las instrucciones de la sección Comentarios de este tema.  
  
 El proyecto debe tener un formulario denominado `Form1`. Debe tener un método denominado `SetConnectionStatus` que toma un `Boolean` parámetro.  
  
 [!code-vb[VbVbalrMyApplication#9](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMyApplication/VB/FakeMyEvents.vb#9)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase" />
        <altmember cref="N:Microsoft.VisualBasic.ApplicationServices" />
        <altmember cref="T:Microsoft.VisualBasic.Devices.NetworkAvailableEventHandler" />
        <altmember cref="E:Microsoft.VisualBasic.Devices.Network.NetworkAvailabilityChanged" />
        <altmember cref="T:Microsoft.VisualBasic.Devices.NetworkAvailableEventArgs" />
      </Docs>
    </Member>
    <Member MemberName="OnCreateMainForm">
      <MemberSignature Language="C#" Value="protected virtual void OnCreateMainForm ();" />
      <MemberSignature Language="ILAsm" Value=".method familynewslot virtual instance void OnCreateMainForm() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.OnCreateMainForm" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnCreateMainForm ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnCreateMainForm();" />
      <MemberSignature Language="F#" Value="abstract member OnCreateMainForm : unit -&gt; unit&#xA;override this.OnCreateMainForm : unit -&gt; unit" Usage="windowsFormsApplicationBase.OnCreateMainForm " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Cuando se reemplaza en una clase derivada, permite a un diseñador emitir código que configura la pantalla de presentación y el formulario principal.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 De forma predeterminada, este método no hace nada. Sin embargo, cuando selecciona un formulario principal de la aplicación en Visual Basic **Diseñador de proyectos**, el diseñador reemplaza este método con un método que establece el <xref:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.MainForm%2A> propiedad a una nueva instancia del formulario principal.  
  
 Este método es invocado por el <xref:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.OnRun%2A> método.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnCreateSplashScreen">
      <MemberSignature Language="C#" Value="protected virtual void OnCreateSplashScreen ();" />
      <MemberSignature Language="ILAsm" Value=".method familynewslot virtual instance void OnCreateSplashScreen() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.OnCreateSplashScreen" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnCreateSplashScreen ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnCreateSplashScreen();" />
      <MemberSignature Language="F#" Value="abstract member OnCreateSplashScreen : unit -&gt; unit&#xA;override this.OnCreateSplashScreen : unit -&gt; unit" Usage="windowsFormsApplicationBase.OnCreateSplashScreen " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Cuando se reemplaza en una clase derivada, permite a un diseñador emitir código que inicializa la pantalla de presentación.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 De forma predeterminada, este método no hace nada. Si selecciona una pantalla de presentación para su aplicación en Visual Basic **Diseñador de proyectos**, invalida el diseñador la <xref:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.OnCreateSplashScreen%2A> método con un método que establece el <xref:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.SplashScreen%2A> propiedad a una nueva instancia de la forma de pantalla de presentación .  
  
 Este método es invocado por el <xref:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.OnInitialize%2A> método.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnInitialize">
      <MemberSignature Language="C#" Value="protected virtual bool OnInitialize (System.Collections.ObjectModel.ReadOnlyCollection&lt;string&gt; commandLineArgs);" />
      <MemberSignature Language="ILAsm" Value=".method familynewslot virtual instance bool OnInitialize(class System.Collections.ObjectModel.ReadOnlyCollection`1&lt;string&gt; commandLineArgs) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.OnInitialize(System.Collections.ObjectModel.ReadOnlyCollection{System.String})" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function OnInitialize (commandLineArgs As ReadOnlyCollection(Of String)) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual bool OnInitialize(System::Collections::ObjectModel::ReadOnlyCollection&lt;System::String ^&gt; ^ commandLineArgs);" />
      <MemberSignature Language="F#" Value="abstract member OnInitialize : System.Collections.ObjectModel.ReadOnlyCollection&lt;string&gt; -&gt; bool&#xA;override this.OnInitialize : System.Collections.ObjectModel.ReadOnlyCollection&lt;string&gt; -&gt; bool" Usage="windowsFormsApplicationBase.OnInitialize commandLineArgs" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.STAThread</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="commandLineArgs" Type="System.Collections.ObjectModel.ReadOnlyCollection&lt;System.String&gt;" />
      </Parameters>
      <Docs>
        <param name="commandLineArgs">Colección <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> de <see langword="String" />, que contiene los argumentos de la línea de comandos correspondientes a la aplicación actual en forma de cadenas.</param>
        <summary>Establece los estilos visuales, los estilos de presentación de texto y la entidad de seguridad actual del subproceso principal de la aplicación (si esta utiliza la autenticación de Windows), e inicializa la pantalla de presentación si está definida.</summary>
        <returns>Un valor de tipo <see cref="T:System.Boolean" /> que indica si debe continuar el inicio de la aplicación.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 De forma predeterminada, este método establece los estilos visuales, los estilos de presentación de texto y una entidad de seguridad actual para el subproceso principal de la aplicación (si la aplicación utiliza la autenticación de Windows) y las llamadas `ShowSplashScreen` si no `/nosplash` ni `-nosplash` se utiliza como un argumento de línea de comandos.  
  
 Este método llama a los métodos siguientes:  
  
-   <xref:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.ShowSplashScreen%2A>.  
  
-   <xref:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.OnCreateSplashScreen%2A>.  
  
 ]]></format>
        </remarks>
        <altCompliant cref="None." />
        <altmember cref="P:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.EnableVisualStyles" />
        <altmember cref="M:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.ShowSplashScreen" />
        <altmember cref="M:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.OnCreateSplashScreen" />
      </Docs>
    </Member>
    <Member MemberName="OnRun">
      <MemberSignature Language="C#" Value="protected virtual void OnRun ();" />
      <MemberSignature Language="ILAsm" Value=".method familynewslot virtual instance void OnRun() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.OnRun" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnRun ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnRun();" />
      <MemberSignature Language="F#" Value="abstract member OnRun : unit -&gt; unit&#xA;override this.OnRun : unit -&gt; unit" Usage="windowsFormsApplicationBase.OnRun " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Proporciona el punto inicial cuando la aplicación principal está lista para comenzar a ejecutarse, después de finalizar la inicialización.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 De forma predeterminada, antes de entrar en el bucle de mensajes de Windows Forms, este método llama a la `OnCreateMainForm` (para crear el formulario principal de la aplicación) y `HideSplashScreen` (para cerrar la pantalla de presentación) métodos:  
  
-   <xref:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.OnCreateMainForm%2A>. Proporciona una manera para que un diseñador emitir código que inicializa el formulario principal.  
  
     De forma predeterminada, este método no hace nada. Sin embargo, cuando selecciona un formulario principal de la aplicación en Visual Basic **Diseñador de proyectos**, el diseñador reemplaza el <xref:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.OnCreateMainForm%2A> método con un método que establece el <xref:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.MainForm%2A> propiedad a una nueva instancia del formulario principal.  
  
-   <xref:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.HideSplashScreen%2A>. Si la aplicación tiene definida una pantalla de presentación y está abierta, este método cierra la pantalla de presentación.  
  
     De forma predeterminada, este método cierra la pantalla de presentación.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnShutdown">
      <MemberSignature Language="C#" Value="protected virtual void OnShutdown ();" />
      <MemberSignature Language="ILAsm" Value=".method familynewslot virtual instance void OnShutdown() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.OnShutdown" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnShutdown ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnShutdown();" />
      <MemberSignature Language="F#" Value="abstract member OnShutdown : unit -&gt; unit&#xA;override this.OnShutdown : unit -&gt; unit" Usage="windowsFormsApplicationBase.OnShutdown " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Cuando se reemplaza en una clase derivada, permite que se ejecute el código cuando la aplicación se cierra.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este método no se ejecuta si se produce una excepción no controlada en la aplicación principal.  
  
 De forma predeterminada, este método provoca la <xref:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.Shutdown> eventos.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnStartup">
      <MemberSignature Language="C#" Value="protected virtual bool OnStartup (Microsoft.VisualBasic.ApplicationServices.StartupEventArgs eventArgs);" />
      <MemberSignature Language="ILAsm" Value=".method familynewslot virtual instance bool OnStartup(class Microsoft.VisualBasic.ApplicationServices.StartupEventArgs eventArgs) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.OnStartup(Microsoft.VisualBasic.ApplicationServices.StartupEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function OnStartup (eventArgs As StartupEventArgs) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual bool OnStartup(Microsoft::VisualBasic::ApplicationServices::StartupEventArgs ^ eventArgs);" />
      <MemberSignature Language="F#" Value="abstract member OnStartup : Microsoft.VisualBasic.ApplicationServices.StartupEventArgs -&gt; bool&#xA;override this.OnStartup : Microsoft.VisualBasic.ApplicationServices.StartupEventArgs -&gt; bool" Usage="windowsFormsApplicationBase.OnStartup eventArgs" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="eventArgs" Type="Microsoft.VisualBasic.ApplicationServices.StartupEventArgs" />
      </Parameters>
      <Docs>
        <param name="eventArgs">
          <see cref="T:Microsoft.VisualBasic.ApplicationServices.StartupEventArgs" />. Contiene los argumentos de la línea de comandos de la aplicación e indica si debe cancelarse el inicio de la aplicación.</param>
        <summary>Cuando se reemplaza en una clase derivada, permite que se ejecute el código cuando se inicia la aplicación.</summary>
        <returns>Un valor de tipo <see cref="T:System.Boolean" /> que indica si debe continuar el inicio de la aplicación.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 De forma predeterminada, este método provoca la <xref:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.Startup> eventos. El controlador de eventos puede establecer el <xref:System.ComponentModel.CancelEventArgs.Cancel%2A> propiedad del argumento del evento. Si <xref:System.ComponentModel.CancelEventArgs.Cancel%2A> es `True`, este método devuelve `False` para cancelar el inicio de la aplicación. En caso contrario, este método devuelve `True`.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:Microsoft.VisualBasic.ApplicationServices.StartupEventArgs" />
      </Docs>
    </Member>
    <Member MemberName="OnStartupNextInstance">
      <MemberSignature Language="C#" Value="protected virtual void OnStartupNextInstance (Microsoft.VisualBasic.ApplicationServices.StartupNextInstanceEventArgs eventArgs);" />
      <MemberSignature Language="ILAsm" Value=".method familynewslot virtual instance void OnStartupNextInstance(class Microsoft.VisualBasic.ApplicationServices.StartupNextInstanceEventArgs eventArgs) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.OnStartupNextInstance(Microsoft.VisualBasic.ApplicationServices.StartupNextInstanceEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnStartupNextInstance (eventArgs As StartupNextInstanceEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnStartupNextInstance(Microsoft::VisualBasic::ApplicationServices::StartupNextInstanceEventArgs ^ eventArgs);" />
      <MemberSignature Language="F#" Value="abstract member OnStartupNextInstance : Microsoft.VisualBasic.ApplicationServices.StartupNextInstanceEventArgs -&gt; unit&#xA;override this.OnStartupNextInstance : Microsoft.VisualBasic.ApplicationServices.StartupNextInstanceEventArgs -&gt; unit" Usage="windowsFormsApplicationBase.OnStartupNextInstance eventArgs" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="eventArgs" Type="Microsoft.VisualBasic.ApplicationServices.StartupNextInstanceEventArgs" />
      </Parameters>
      <Docs>
        <param name="eventArgs">
          <see cref="T:Microsoft.VisualBasic.ApplicationServices.StartupNextInstanceEventArgs" />. Contiene los argumentos de la línea de comandos correspondientes a la instancia subsiguiente de la aplicación e indica si la primera instancia de la aplicación debe llevarse al primer plano al salir del controlador de excepciones.</param>
        <summary>Cuando se reemplaza en una clase derivada, permite que el código se ejecute cuando se inicia una instancia subsiguiente de una aplicación de instancia única.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 De forma predeterminada, este método provoca la <xref:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.StartupNextInstance> eventos. El controlador de eventos puede establecer el <xref:Microsoft.VisualBasic.ApplicationServices.StartupNextInstanceEventArgs.BringToForeground%2A> propiedad del argumento del evento. Si <xref:Microsoft.VisualBasic.ApplicationServices.StartupNextInstanceEventArgs.BringToForeground%2A> es `True`, el método activa el formulario principal. En caso contrario, el formulario principal se deja en su estado actual.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.IsSingleInstance" />
        <altmember cref="T:Microsoft.VisualBasic.ApplicationServices.StartupNextInstanceEventArgs" />
        <altmember cref="E:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.StartupNextInstance" />
      </Docs>
    </Member>
    <Member MemberName="OnUnhandledException">
      <MemberSignature Language="C#" Value="protected virtual bool OnUnhandledException (Microsoft.VisualBasic.ApplicationServices.UnhandledExceptionEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familynewslot virtual instance bool OnUnhandledException(class Microsoft.VisualBasic.ApplicationServices.UnhandledExceptionEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.OnUnhandledException(Microsoft.VisualBasic.ApplicationServices.UnhandledExceptionEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function OnUnhandledException (e As UnhandledExceptionEventArgs) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual bool OnUnhandledException(Microsoft::VisualBasic::ApplicationServices::UnhandledExceptionEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnUnhandledException : Microsoft.VisualBasic.ApplicationServices.UnhandledExceptionEventArgs -&gt; bool&#xA;override this.OnUnhandledException : Microsoft.VisualBasic.ApplicationServices.UnhandledExceptionEventArgs -&gt; bool" Usage="windowsFormsApplicationBase.OnUnhandledException e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="Microsoft.VisualBasic.ApplicationServices.UnhandledExceptionEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <see cref="T:Microsoft.VisualBasic.ApplicationServices.UnhandledExceptionEventArgs" />.</param>
        <summary>Cuando se reemplaza en una clase derivada, permite que el código se ejecute cuando se produce una excepción no controlada en la aplicación.</summary>
        <returns>
          <see cref="T:System.Boolean" /> que indica si se generó el evento <see cref="E:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.UnhandledException" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 De forma predeterminada, este método provoca la <xref:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.UnhandledException> eventos siempre y cuando no se adjunta un depurador y el usuario lleva a cabo la `UnhandledException` eventos. El controlador de eventos puede establecer el <xref:Microsoft.VisualBasic.ApplicationServices.UnhandledExceptionEventArgs.ExitApplication%2A> propiedad. Si <xref:Microsoft.VisualBasic.ApplicationServices.UnhandledExceptionEventArgs.ExitApplication%2A> es `False`, o si no se controla el evento, la aplicación se cierra cuando se devuelve desde el controlador de excepciones. En caso contrario, se devuelve el control de la aplicación para el bucle de mensajes de Windows Forms.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:Microsoft.VisualBasic.ApplicationServices.UnhandledExceptionEventArgs" />
        <altmember cref="E:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.UnhandledException" />
      </Docs>
    </Member>
    <Member MemberName="OpenForms">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.FormCollection OpenForms { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.FormCollection OpenForms" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.OpenForms" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property OpenForms As FormCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::FormCollection ^ OpenForms { System::Windows::Forms::FormCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.OpenForms : System.Windows.Forms.FormCollection" Usage="Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.OpenForms" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.FormCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene una colección de todos los formularios abiertos de la aplicación.</summary>
        <value>Un objeto <see cref="T:System.Windows.Forms.FormCollection" /> que contiene todos los formularios abiertos de la aplicación.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El `My.Application.OpenForms` propiedad obtiene una colección de los formularios abiertos de toda la aplicación. El comportamiento es idéntico del <xref:System.Windows.Forms.Application.OpenForms%2A?displayProperty=nameWithType> propiedad.  
  
> [!NOTE]
>  El `My.Application.OpenForms` propiedad devuelve todos los formularios abiertos, independientemente del subproceso que abrió. Debe comprobar la <xref:System.Windows.Forms.Control.InvokeRequired%2A> propiedad de cada formulario antes de acceder a él; de lo contrario, se podría producir un <xref:System.InvalidOperationException> excepción.  
  
## <a name="availability-by-project-type"></a>Disponibilidad por tipo de proyecto  
  
|Tipo de proyecto|Disponible|  
|-|-|  
|Aplicación de Windows Forms|**Sí**|  
|Biblioteca de clases|No|  
|Aplicación de consola|No|  
|Biblioteca de controles de Windows Forms|No|  
|Biblioteca de controles Web|No|  
|Servicio de Windows|No|  
|Sitio web|No|  
  
   
  
## Examples  
 En este ejemplo recorre en iteración los formularios abiertos de la aplicación, selecciona aquellos accesibles directamente por el subproceso actual y muestra sus títulos en un <xref:System.Windows.Forms.ListBox> control. Este ejemplo requiere que la aplicación de Windows Forms tienen un formulario denominado `Form1` que contiene un cuadro de lista denominado `ListBox1`.  
  
 [!code-vb[VbVbalrMyApplication#10](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMyApplication/VB/Form1.vb#10)]  
  
 Este ejemplo recorre en iteración los formularios abiertos de la aplicación y muestra sus títulos en un <xref:System.Windows.Forms.ListBox> control.  
  
 [!code-vb[VbVbalrMyApplication#11](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMyApplication/VB/Form1.vb#11)]  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.UIPermission">Controla los permisos que están relacionados con las interfaces de usuario y el Portapapeles. Enumeración asociada: <see cref="F:System.Security.Permissions.UIPermissionWindow.AllWindows" />.</permission>
        <altmember cref="T:System.Windows.Forms.FormCollection" />
        <altmember cref="P:System.Windows.Forms.Application.OpenForms" />
      </Docs>
    </Member>
    <Member MemberName="Run">
      <MemberSignature Language="C#" Value="public void Run (string[] commandLine);" />
      <MemberSignature Language="ILAsm" Value=".method public instance void Run(string[] commandLine) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.Run(System.String[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub Run (commandLine As String())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Run(cli::array &lt;System::String ^&gt; ^ commandLine);" />
      <MemberSignature Language="F#" Value="member this.Run : string[] -&gt; unit" Usage="windowsFormsApplicationBase.Run commandLine" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="commandLine" Type="System.String[]" />
      </Parameters>
      <Docs>
        <param name="commandLine">Matriz de tipo <see langword="String" />. Línea de comandos de <see langword="Sub Main" />.</param>
        <summary>Prepara e inicia el Modelo de aplicaciones de Visual Basic.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El `My.Application.Run` método proporciona compatibilidad para el modelo de aplicación de Visual Basic. Este método debe llamarse únicamente desde la aplicación `Sub Main`. De forma predeterminada, el `Sub Main` de un formulario Windows Forms aplicación llama a este método. Para obtener más información, consulte [general del modelo de aplicación de Visual Basic](~/docs/visual-basic/developing-apps/development-with-my/overview-of-the-visual-basic-application-model.md).  
  
## <a name="availability-by-project-type"></a>Disponibilidad por tipo de proyecto  
  
|Tipo de proyecto|Disponible|  
|-|-|  
|Aplicación de Windows Forms|**Sí**|  
|Biblioteca de clases|No|  
|Aplicación de consola|No|  
|Biblioteca de controles de Windows Forms|No|  
|Biblioteca de controles Web|No|  
|Servicio de Windows|No|  
|Sitio web|No|  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.EnvironmentPermission">Controla la capacidad para tener acceso a todas las variables de entorno. Enumeración asociada: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />.</permission>
        <permission cref="T:System.Security.Permissions.FileIOPermission">Controla la capacidad para tener acceso a archivos y carpetas. Enumeración asociada: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />.</permission>
        <permission cref="T:System.Security.Permissions.RegistryPermission">Controla la capacidad para tener acceso a las variables del registro. Enumeración asociada: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />.</permission>
        <permission cref="T:System.Security.Permissions.UIPermission">Controla los permisos relacionados con las interfaces de usuario y el Portapapeles. Enumeración asociada: <see cref="F:System.Security.Permissions.UIPermissionWindow.AllWindows" />.</permission>
        <permission cref="T:System.Net.WebPermission">Controla los derechos de acceso a los recursos HTTP de Internet. Enumeración asociada: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />.</permission>
        <permission cref="T:System.Net.SocketPermission">Controla los derechos para realizar o aceptar conexiones en una dirección de transporte. Enumeración asociada: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />.</permission>
        <permission cref="T:System.Diagnostics.PerformanceCounterPermission">Controla el acceso a un componente de contador de rendimiento de Windows NT. Enumeración asociada: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />.</permission>
      </Docs>
    </Member>
    <Member MemberName="SaveMySettingsOnExit">
      <MemberSignature Language="C#" Value="public bool SaveMySettingsOnExit { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool SaveMySettingsOnExit" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.SaveMySettingsOnExit" />
      <MemberSignature Language="VB.NET" Value="Public Property SaveMySettingsOnExit As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool SaveMySettingsOnExit { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.SaveMySettingsOnExit : bool with get, set" Usage="Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.SaveMySettingsOnExit" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Determina si la aplicación guarda la configuración del usuario al cerrarse.</summary>
        <value>
          <see langword="Boolean" />. <see langword="True" /> indica que la aplicación guarda la configuración del usuario al cerrarse. De lo contrario, no se guarda implícitamente la configuración.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El `SaveMySettingsOnExit` propiedad permite al usuario cambiar la forma en que la aplicación guarda la configuración, en tiempo de ejecución. Puede guardar explícitamente los cambios de configuración mediante el uso de la <xref:System.Configuration.ApplicationSettingsBase.Save%2A> método de la `My.Settings` objeto. Para obtener más información sobre cómo cambiar y guardar la configuración, consulte [propiedades de la aplicación](http://msdn.microsoft.com/library/0ad4926f-636e-41f8-a5b1-faf9d9b0a254).  
  
 Los cambios a esta propiedad no se conservan cuando se cierra la aplicación. Para cambiar la `SaveMySettingsOnExit` propiedad permanentemente, debe cambiar la configuración en el **Diseñador de proyectos**:  
  
| |  
|-|  
|Para cambiar la configuración en el Diseñador de proyectos|  
|1.  Seleccione un proyecto en el **Explorador de soluciones**. Haga clic en **propiedades** en el **proyecto** menú.<br />2.  Haga clic en la pestaña **Aplicación** .<br />3.  Seleccione **Guardar My.Settings al apagar**.|  
  
## <a name="availability-by-project-type"></a>Disponibilidad por tipo de proyecto  
  
|Tipo de proyecto|Disponible|  
|-|-|  
|Aplicación de Windows Forms|**Sí**|  
|Biblioteca de clases|No|  
|Aplicación de consola|No|  
|Biblioteca de controles de Windows Forms|No|  
|Biblioteca de controles Web|No|  
|Servicio de Windows|No|  
|Sitio web|No|  
  
   
  
## Examples  
 En este ejemplo tiene dos partes.  
  
-   El `InitializeSaveMySettingsOnExit` subrutina, que inicializa el estado activado de un <xref:System.Windows.Forms.CheckBox> control en el valor actual de la `SaveMySettingsOnExit` propiedad.  
  
-   El `SaveMySettingsOnExit_CheckedChanged` subrutina, que controla los cambios realizados en un <xref:System.Windows.Forms.CheckBox> control para actualizar el `My.Application.SaveMySettingsOnExit` propiedad.  
  
 [!code-vb[VbVbalrMyApplication#12](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMyApplication/VB/Form1.vb#12)]  
  
 Para que funcione este ejemplo, la aplicación debe tener un <xref:System.Windows.Forms.CheckBox> control denominado `SaveMySettingsOnExit`.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Configuration.ApplicationSettingsBase.Save" />
      </Docs>
    </Member>
    <Member MemberName="ShowSplashScreen">
      <MemberSignature Language="C#" Value="protected void ShowSplashScreen ();" />
      <MemberSignature Language="ILAsm" Value=".method familyinstance void ShowSplashScreen() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.ShowSplashScreen" />
      <MemberSignature Language="VB.NET" Value="Protected Sub ShowSplashScreen ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void ShowSplashScreen();" />
      <MemberSignature Language="F#" Value="member this.ShowSplashScreen : unit -&gt; unit" Usage="windowsFormsApplicationBase.ShowSplashScreen " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Determina si la aplicación tiene definida una pantalla de presentación y, si es el caso, la muestra.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 De forma predeterminada, este método llama a `OnCreateSplashScreen` de forma segura para subprocesos.  
  
 El <xref:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.ShowSplashScreen%2A> método contiene el código que muestra la presentación de pantalla de al menos el número de milisegundos especificados por el <xref:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.MinimumSplashScreenDisplayTime%2A> propiedad. Para usar esta funcionalidad, debe establecer el `My.Application.MinimumSplashScreenDisplayTime` propiedad en un método que reemplaza el <xref:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.ShowSplashScreen%2A> o <xref:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.OnCreateSplashScreen%2A> método, o agregar la pantalla de presentación a la aplicación mediante el **Diseñador de proyectos**. Para obtener más información, vea <xref:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.MinimumSplashScreenDisplayTime%2A>.  
  
 Este método es invocado por el <xref:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.OnInitialize%2A> método.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.OnInitialize(System.Collections.ObjectModel.ReadOnlyCollection{System.String})" />
      </Docs>
    </Member>
    <Member MemberName="Shutdown">
      <MemberSignature Language="C#" Value="public event Microsoft.VisualBasic.ApplicationServices.ShutdownEventHandler Shutdown;" />
      <MemberSignature Language="ILAsm" Value=".event class Microsoft.VisualBasic.ApplicationServices.ShutdownEventHandler Shutdown" />
      <MemberSignature Language="DocId" Value="E:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.Shutdown" />
      <MemberSignature Language="VB.NET" Value="Public Event Shutdown As ShutdownEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event Microsoft::VisualBasic::ApplicationServices::ShutdownEventHandler ^ Shutdown;" />
      <MemberSignature Language="F#" Value="member this.Shutdown : Microsoft.VisualBasic.ApplicationServices.ShutdownEventHandler " Usage="member this.Shutdown : Microsoft.VisualBasic.ApplicationServices.ShutdownEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.VisualBasic.ApplicationServices.ShutdownEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Se produce cuando se cierra la aplicación.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Una aplicación provoca la `Shutdown` eventos antes de salir. Esto le permite controlar cómo cierra la aplicación a sus recursos. Este evento es parte del modelo de aplicación de Visual Basic. Para obtener más información, consulte [general del modelo de aplicación de Visual Basic](~/docs/visual-basic/developing-apps/development-with-my/overview-of-the-visual-basic-application-model.md).  
  
 El código para el `Shutdown` controlador de eventos se almacena en el archivo ApplicationEvents.vb, que está oculta de forma predeterminada.  
  
| |  
|-|  
|Para obtener acceso a la ventana del Editor de código para eventos de aplicación|  
|1.  Con un proyecto seleccionado en **el Explorador de soluciones**, haga clic en **propiedades** en el **proyecto** menú.<br />2.  Haga clic en la pestaña **Aplicación** .<br />3.  Haga clic en el botón **Ver eventos de aplicaciones** para abrir el Editor de código.<br /><br />Para obtener más información, consulte [Application Page, Project Designer (Visual Basic)](https://docs.microsoft.com/visualstudio/ide/reference/application-page-project-designer-visual-basic).|  
  
## <a name="availability-by-project-type"></a>Disponibilidad por tipo de proyecto  
  
|Tipo de proyecto|Disponible|  
|-|-|  
|Aplicación de Windows Forms|**Sí**|  
|Biblioteca de clases|No|  
|Aplicación de consola|No|  
|Biblioteca de controles de Windows Forms|No|  
|Biblioteca de controles Web|No|  
|Servicio de Windows|No|  
|Sitio web|No|  
  
   
  
## Examples  
 En este ejemplo registra los mensajes cuando se cierra la aplicación.  
  
 [!code-vb[VbVbalrMyApplication#13](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMyApplication/VB/FakeMyEvents.vb#13)]  
  
 Debe escribir el código en la ventana del Editor de código para eventos de aplicación. Para obtener acceso a esta ventana, siga las instrucciones de la sección Comentarios de este tema. Para obtener más información, consulte [Cómo: registro de mensajes cuando la aplicación se inicia o se cierra abajo](~/docs/visual-basic/developing-apps/programming/log-info/how-to-log-messages-when-the-application-starts-or-shuts-down.md).  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.EventArgs" />
      </Docs>
    </Member>
    <Member MemberName="ShutdownStyle">
      <MemberSignature Language="C#" Value="protected internal Microsoft.VisualBasic.ApplicationServices.ShutdownMode ShutdownStyle { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype Microsoft.VisualBasic.ApplicationServices.ShutdownMode ShutdownStyle" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.ShutdownStyle" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Property ShutdownStyle As ShutdownMode" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; property Microsoft::VisualBasic::ApplicationServices::ShutdownMode ShutdownStyle { Microsoft::VisualBasic::ApplicationServices::ShutdownMode get(); void set(Microsoft::VisualBasic::ApplicationServices::ShutdownMode value); };" />
      <MemberSignature Language="F#" Value="member this.ShutdownStyle : Microsoft.VisualBasic.ApplicationServices.ShutdownMode with get, set" Usage="Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.ShutdownStyle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.VisualBasic.ApplicationServices.ShutdownMode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Determina lo que sucede cuando se cierra el formulario principal de la aplicación.</summary>
        <value>Un valor de la enumeración <see cref="T:Microsoft.VisualBasic.ApplicationServices.ShutdownMode" />, que indica lo que debe hacer la aplicación cuando se cierra el formulario principal.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Windows.Forms.ApplicationContext.OnMainFormClosed%2A> método comprueba el valor de esta propiedad para determinar si la aplicación debe cerrarse cuando se cierra el formulario principal, o si hay abierto otro formulario debe promocionar como el nuevo formulario principal.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:Microsoft.VisualBasic.ApplicationServices.ShutdownMode" />
      </Docs>
    </Member>
    <Member MemberName="SplashScreen">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.Form SplashScreen { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.Form SplashScreen" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.SplashScreen" />
      <MemberSignature Language="VB.NET" Value="Public Property SplashScreen As Form" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::Form ^ SplashScreen { System::Windows::Forms::Form ^ get(); void set(System::Windows::Forms::Form ^ value); };" />
      <MemberSignature Language="F#" Value="member this.SplashScreen : System.Windows.Forms.Form with get, set" Usage="Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.SplashScreen" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.Form</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene o establece la pantalla de presentación de esta aplicación.</summary>
        <value>Un objeto <see cref="T:System.Windows.Forms.Form" /> que la aplicación utiliza como pantalla de presentación.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El `My.Application.SplashScreen` propiedad le permite obtener o establecer el <xref:System.Windows.Forms.Form> objeto que utiliza la aplicación como la pantalla de presentación, la primera forma gráfica que se muestra mientras se está iniciando una aplicación.  
  
 Esta propiedad admite el modelo de aplicación de Visual Basic. Para obtener más información, consulte [general del modelo de aplicación de Visual Basic](~/docs/visual-basic/developing-apps/development-with-my/overview-of-the-visual-basic-application-model.md).  
  
 Los cambios a esta propiedad no se conservan cuando se cierra la aplicación. Para cambiar la pantalla de presentación de forma permanente, debe cambiar la configuración en el **Diseñador de proyectos**.  
  
## <a name="availability-by-project-type"></a>Disponibilidad por tipo de proyecto  
  
|Tipo de proyecto|Disponible|  
|-|-|  
|Aplicación de Windows Forms|**Sí**|  
|Biblioteca de clases|No|  
|Aplicación de consola|No|  
|Biblioteca de controles de Windows Forms|No|  
|Biblioteca de controles Web|No|  
|Servicio de Windows|No|  
|Sitio web|No|  
  
   
  
## Examples  
 Este ejemplo se usa el `My.Application.SplashScreen` propiedad y el `My.Application.Startup` eventos para actualizar la pantalla de presentación con información de estado cuando se inicia la aplicación.  
  
 [!code-vb[VbVbalrMyApplication#14](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMyApplication/VB/FakeMyEvents.vb#14)]  
  
 Este ejemplo requiere que el proyecto tenga una pantalla de presentación denominada `SplashScreen1`. La pantalla de presentación debe tener una propiedad denominada `Status` que actualiza su interfaz de usuario.  
  
 Debe escribir este código en la ventana del Editor de código para eventos de aplicación. Para obtener más información, consulte [Application Page, Project Designer (Visual Basic)](https://docs.microsoft.com/visualstudio/ide/reference/application-page-project-designer-visual-basic).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Se ha asignado el mismo valor a esta propiedad y a la propiedad <see cref="P:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.MainForm" />.</exception>
        <altmember cref="P:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.MinimumSplashScreenDisplayTime" />
        <altmember cref="T:System.Windows.Forms.Form" />
      </Docs>
    </Member>
    <Member MemberName="Startup">
      <MemberSignature Language="C#" Value="public event Microsoft.VisualBasic.ApplicationServices.StartupEventHandler Startup;" />
      <MemberSignature Language="ILAsm" Value=".event class Microsoft.VisualBasic.ApplicationServices.StartupEventHandler Startup" />
      <MemberSignature Language="DocId" Value="E:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.Startup" />
      <MemberSignature Language="VB.NET" Value="Public Event Startup As StartupEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event Microsoft::VisualBasic::ApplicationServices::StartupEventHandler ^ Startup;" />
      <MemberSignature Language="F#" Value="member this.Startup : Microsoft.VisualBasic.ApplicationServices.StartupEventHandler " Usage="member this.Startup : Microsoft.VisualBasic.ApplicationServices.StartupEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.VisualBasic.ApplicationServices.StartupEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Se produce cuando se inicia la aplicación.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Una aplicación normal de (que no son de instancia única) provoca la `Startup` evento cada vez se inicia. Una aplicación de instancia única provoca la `Startup` evento cuando se inicia sólo si la aplicación ya no está activo; en caso contrario, genera el `StartupNextInstance` eventos. Para obtener más información, vea <xref:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.StartupNextInstance>.  
  
 Este evento es parte del modelo de aplicación de Visual Basic. Para obtener más información, consulte [general del modelo de aplicación de Visual Basic](~/docs/visual-basic/developing-apps/development-with-my/overview-of-the-visual-basic-application-model.md).  
  
 Puede usar el <xref:System.ComponentModel.CancelEventArgs.Cancel%2A> propiedad de la `e` parámetro para controlar la carga del formulario de inicio de la aplicación. Cuando el <xref:System.ComponentModel.CancelEventArgs.Cancel%2A> propiedad está establecida en `True`, el formulario de inicio no se inicia. En ese caso, el código debe llamar a una ruta de acceso del código de inicio alternativa.  
  
 Puede usar el <xref:Microsoft.VisualBasic.ApplicationServices.StartupEventArgs.CommandLine%2A> propiedad de la `e` parámetro o el <xref:Microsoft.VisualBasic.ApplicationServices.ConsoleApplicationBase.CommandLineArgs%2A> propiedad para tener acceso a argumentos de línea de comandos de la aplicación.  
  
 El código para el `Startup` controlador de eventos se almacena en el archivo ApplicationEvents.vb, que está oculta de forma predeterminada.  
  
| |  
|-|  
|Para obtener acceso a la ventana del Editor de código para eventos de aplicación|  
|1.  Con un proyecto seleccionado en **el Explorador de soluciones**, haga clic en **propiedades** en el **proyecto** menú.<br />2.  Haga clic en la pestaña **Aplicación** .<br />3.  Haga clic en el botón **Ver eventos de aplicaciones** para abrir el Editor de código.<br /><br /> Para obtener más información, consulte [Application Page, Project Designer (Visual Basic)](https://docs.microsoft.com/visualstudio/ide/reference/application-page-project-designer-visual-basic).|  
  
## <a name="availability-by-project-type"></a>Disponibilidad por tipo de proyecto  
  
|Tipo de proyecto|Disponible|  
|-|-|  
|Aplicación de Windows Forms|**Sí**|  
|Biblioteca de clases|No|  
|Aplicación de consola|No|  
|Biblioteca de controles de Windows Forms|No|  
|Biblioteca de controles Web|No|  
|Servicio de Windows|No|  
|Sitio web|No|  
  
   
  
## Examples  
 Este ejemplo se usa el `My.Application.SplashScreen` propiedad y el `My.Application.Startup` eventos para actualizar la pantalla de presentación con información de estado cuando se inicia la aplicación.  
  
 [!code-vb[VbVbalrMyApplication#14](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMyApplication/VB/FakeMyEvents.vb#14)]  
  
 Este ejemplo requiere que el proyecto tenga una pantalla de presentación denominada `SplashScreen1`. La pantalla de presentación debe tener una propiedad denominada `Status` que actualiza su interfaz de usuario.  
  
 Debe escribir el código en la ventana del Editor de código para eventos de aplicación. Para obtener acceso a esta ventana, siga las instrucciones de la sección Comentarios de este tema. Para obtener más información, consulte [Application Page, Project Designer (Visual Basic)](https://docs.microsoft.com/visualstudio/ide/reference/application-page-project-designer-visual-basic).  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission">Controla la capacidad para agregar un controlador de eventos para este evento. Enumeración asociada: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlAppDomain" />.</permission>
        <altmember cref="E:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.StartupNextInstance" />
        <altmember cref="P:Microsoft.VisualBasic.ApplicationServices.ConsoleApplicationBase.CommandLineArgs" />
      </Docs>
    </Member>
    <Member MemberName="StartupNextInstance">
      <MemberSignature Language="C#" Value="public event Microsoft.VisualBasic.ApplicationServices.StartupNextInstanceEventHandler StartupNextInstance;" />
      <MemberSignature Language="ILAsm" Value=".event class Microsoft.VisualBasic.ApplicationServices.StartupNextInstanceEventHandler StartupNextInstance" />
      <MemberSignature Language="DocId" Value="E:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.StartupNextInstance" />
      <MemberSignature Language="VB.NET" Value="Public Event StartupNextInstance As StartupNextInstanceEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event Microsoft::VisualBasic::ApplicationServices::StartupNextInstanceEventHandler ^ StartupNextInstance;" />
      <MemberSignature Language="F#" Value="member this.StartupNextInstance : Microsoft.VisualBasic.ApplicationServices.StartupNextInstanceEventHandler " Usage="member this.StartupNextInstance : Microsoft.VisualBasic.ApplicationServices.StartupNextInstanceEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.VisualBasic.ApplicationServices.StartupNextInstanceEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Se produce cuando se intenta iniciar una aplicación de instancia única y la aplicación ya está activa.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Una aplicación de instancia única provoca la <xref:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.StartupNextInstance> eventos cuando se intenta reiniciar la aplicación cuando ya está activa. Cuando una aplicación de instancia única se inicia por primera vez, provoca la <xref:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.Startup> eventos. Para obtener más información, vea <xref:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.Startup>.  
  
 Este evento es parte del modelo de aplicación de Visual Basic. Para obtener más información, consulte [general del modelo de aplicación de Visual Basic](~/docs/visual-basic/developing-apps/development-with-my/overview-of-the-visual-basic-application-model.md).  
  
 Este evento se desencadena en el subproceso principal de la aplicación con los otros eventos de interfaz de usuario. Esto permite que el controlador de eventos obtener acceso a la interfaz de usuario de la aplicación directamente. Sin embargo, si la aplicación está ocupada con otro evento de interfaz de usuario cuando se genera este evento, este evento no se puede procesar hasta que el otro controlador de eventos finaliza o se llama a la <xref:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.DoEvents%2A> método.  
  
> [!NOTE]
>  El `StartupNextInstance` evento se produce solo en aplicaciones de instancia única. Para habilitar el comportamiento de instancia única de la aplicación, debe comprobar la **crear aplicación de instancia única** casilla de verificación en el Diseñador de proyectos.  
  
| |  
|-|  
|Para realizar una única instancia de aplicación|  
|1.  Con un proyecto seleccionado en **el Explorador de soluciones**, haga clic en **propiedades** en el **proyecto** menú.<br />2.  Haga clic en la pestaña **Aplicación** .<br />3.  Seleccione el **crear aplicación de instancia única** casilla de verificación.|  
  
 Debe usar el <xref:Microsoft.VisualBasic.ApplicationServices.StartupEventArgs.CommandLine%2A> propiedad de la `e` parámetro para tener acceso a los argumentos para los posteriores intentos de iniciar una aplicación de instancia única. El <xref:Microsoft.VisualBasic.ApplicationServices.ConsoleApplicationBase.CommandLineArgs%2A> propiedad proporciona los argumentos usados para iniciar la primera instancia de una aplicación de instancia única.  
  
 El código para el <xref:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.StartupNextInstance> controlador de eventos se almacena en el archivo ApplicationEvents.vb, que está oculta de forma predeterminada.  
  
| |  
|-|  
|Para obtener acceso a la ventana del Editor de código para eventos de aplicación|  
|1.  Con un proyecto seleccionado en **el Explorador de soluciones**, haga clic en **propiedades** en el **proyecto** menú.<br />2.  Haga clic en la pestaña **Aplicación** .<br />3.  Haga clic en el botón **Ver eventos de aplicaciones** para abrir el Editor de código.<br /><br />Para obtener más información, consulte [Application Page, Project Designer (Visual Basic)](https://docs.microsoft.com/visualstudio/ide/reference/application-page-project-designer-visual-basic).|  
  
 En la tabla siguiente se muestra ejemplos de tareas que implican la `My.Application.StartupNextInstance` eventos.  
  
|En|Vea|  
|-|-|  
|Compruebe los argumentos de línea de comandos de la primera instancia de aplicación|<xref:Microsoft.VisualBasic.ApplicationServices.ConsoleApplicationBase.CommandLineArgs%2A>|  
  
## <a name="availability-by-project-type"></a>Disponibilidad por tipo de proyecto  
  
|Tipo de proyecto|Disponible|  
|-|-|  
|Aplicación de Windows Forms|Sí|  
|Biblioteca de clases|No|  
|Aplicación de consola|No|  
|Biblioteca de controles de Windows Forms|No|  
|Biblioteca de controles Web|No|  
|Servicio de Windows|No|  
|Sitio web|No|  
  
   
  
## Examples  
 Este ejemplo se usa el `e` parámetro de la <xref:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.StartupNextInstance> controlador de eventos para examinar los argumentos de línea de comandos de la aplicación. Si se encuentra un argumento que comienza con `/input=`, se muestra el resto de ese argumento.  
  
 [!code-vb[VbVbalrMyApplication#15](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMyApplication/VB/FakeMyEvents.vb#15)]  
  
 Debe escribir el código en la ventana del Editor de código para eventos de aplicación. Para obtener acceso a esta ventana, siga las instrucciones de la sección Comentarios de este tema. Para obtener más información, consulte [Application Page, Project Designer (Visual Basic)](https://docs.microsoft.com/visualstudio/ide/reference/application-page-project-designer-visual-basic).  
  
 ]]></format>
        </remarks>
        <altmember cref="E:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.Startup" />
        <altmember cref="P:Microsoft.VisualBasic.ApplicationServices.ConsoleApplicationBase.CommandLineArgs" />
        <altmember cref="T:Microsoft.VisualBasic.ApplicationServices.StartupEventArgs" />
        <altmember cref="P:Microsoft.VisualBasic.ApplicationServices.StartupEventArgs.CommandLine" />
      </Docs>
    </Member>
    <Member MemberName="UnhandledException">
      <MemberSignature Language="C#" Value="public event Microsoft.VisualBasic.ApplicationServices.UnhandledExceptionEventHandler UnhandledException;" />
      <MemberSignature Language="ILAsm" Value=".event class Microsoft.VisualBasic.ApplicationServices.UnhandledExceptionEventHandler UnhandledException" />
      <MemberSignature Language="DocId" Value="E:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.UnhandledException" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event UnhandledException As UnhandledExceptionEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event Microsoft::VisualBasic::ApplicationServices::UnhandledExceptionEventHandler ^ UnhandledException;" />
      <MemberSignature Language="F#" Value="member this.UnhandledException : Microsoft.VisualBasic.ApplicationServices.UnhandledExceptionEventHandler " Usage="member this.UnhandledException : Microsoft.VisualBasic.ApplicationServices.UnhandledExceptionEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.VisualBasic.ApplicationServices.UnhandledExceptionEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Se produce si la aplicación detecta una excepción no controlada.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Una aplicación provoca la `UnhandledException` eventos cuando encuentra una excepción no controlada. Este evento es parte del modelo de aplicación de Visual Basic. Para obtener más información, consulte [general del modelo de aplicación de Visual Basic](~/docs/visual-basic/developing-apps/development-with-my/overview-of-the-visual-basic-application-model.md).  
  
 Puede usar el <xref:System.Threading.ThreadExceptionEventArgs.Exception%2A> propiedad de la `e` parámetro para tener acceso a la excepción no controlada que provocó este evento.  
  
 Puede usar el <xref:Microsoft.VisualBasic.ApplicationServices.UnhandledExceptionEventArgs.ExitApplication%2A> propiedad de la `e` parámetro para controlar si se cierra la aplicación. De forma predeterminada, <xref:Microsoft.VisualBasic.ApplicationServices.UnhandledExceptionEventArgs.ExitApplication%2A> es `True`. Por lo tanto, la aplicación se cierra después de completar la `UnhandledException` controlador de eventos. Puede establecer el valor en `False` en el `UnhandledException` controlador de eventos para mantener la aplicación en ejecución y volver a un estado de espera.  
  
 El código para el `UnhandledException` controlador de eventos se almacena en el archivo ApplicationEvents.vb, que está oculta de forma predeterminada.  
  
| |  
|-|  
|Para obtener acceso a la ventana del Editor de código para eventos de aplicación|  
|1.  Con un proyecto seleccionado en **el Explorador de soluciones**, haga clic en **propiedades** en el **proyecto** menú.<br />2.  Haga clic en la pestaña **Aplicación** .<br />3.  Haga clic en el botón **Ver eventos de aplicaciones** para abrir el Editor de código.|  
  
 Para obtener más información, consulte [Application Page, Project Designer (Visual Basic)](https://docs.microsoft.com/visualstudio/ide/reference/application-page-project-designer-visual-basic).  
  
> [!NOTE]
>  El compilador de Visual Basic impide que las aplicaciones que se generan para la depuración desde lo que genera este evento para habilitar un depurador controlar las excepciones no controladas. Esto significa que si está probando su aplicación ejecutándola en el depurador de Visual Studio de entorno de desarrollo integrado, su `UnhandledException` no se llamará el controlador de eventos. Para obtener más información sobre la creación de aplicaciones para la depuración, vea [/debug (Visual Basic)](~/docs/visual-basic/reference/command-line-compiler/debug.md).  
  
## <a name="tasks"></a>Tareas  
 En la tabla siguiente se muestra ejemplos de tareas que implican la `My.Application.UnhandledException` eventos.  
  
|En|Vea|  
|-|-|  
|Registrar excepciones no controladas|[Registrar excepciones](~/docs/visual-basic/developing-apps/programming/log-info/how-to-log-exceptions.md)|  
  
## <a name="availability-by-project-type"></a>Disponibilidad por tipo de proyecto  
  
|Tipo de proyecto|Disponible|  
|-|-|  
|Aplicación de Windows Forms|**Sí**|  
|Biblioteca de clases|No|  
|Aplicación de consola|No|  
|Biblioteca de controles de Windows Forms|No|  
|Biblioteca de controles Web|No|  
|Servicio de Windows|No|  
|Sitio web|No|  
  
   
  
## Examples  
 Este ejemplo se usa el `My.Application.UnhandledException` las excepciones no controlan de eventos para registrar cualquiera.  
  
 Debe escribir el código en la ventana del Editor de código para eventos de aplicación. Para obtener acceso a esta ventana, siga el procedimiento que se encuentra en la sección Comentarios de este tema. Para obtener más información, consulte [Application Page, Project Designer (Visual Basic)](https://docs.microsoft.com/visualstudio/ide/reference/application-page-project-designer-visual-basic).  
  
 Dado que el `UnhandledException` evento no se produce cuando se adjunta un depurador a la aplicación, tendrá que ejecutar este ejemplo fuera del entorno de desarrollo integrado de Visual Studio.  
  
 [!code-vb[VbVbalrMyApplication#17](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMyApplication/VB/FakeMyEvents.vb#17)]  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission">Controla la capacidad para agregar un controlador de eventos para este evento. Enumeración asociada: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlAppDomain" />.</permission>
        <altmember cref="T:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase" />
        <altmember cref="N:Microsoft.VisualBasic.ApplicationServices" />
        <altmember cref="T:Microsoft.VisualBasic.ApplicationServices.UnhandledExceptionEventHandler" />
        <altmember cref="T:Microsoft.VisualBasic.ApplicationServices.UnhandledExceptionEventArgs" />
      </Docs>
    </Member>
    <Member MemberName="UseCompatibleTextRendering">
      <MemberSignature Language="C#" Value="protected static bool UseCompatibleTextRendering { get; }" />
      <MemberSignature Language="ILAsm" Value=".property bool UseCompatibleTextRendering" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.UseCompatibleTextRendering" />
      <MemberSignature Language="VB.NET" Value="Protected Shared ReadOnly Property UseCompatibleTextRendering As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; static property bool UseCompatibleTextRendering { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.UseCompatibleTextRendering : bool" Usage="Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.UseCompatibleTextRendering" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Cuando se reemplaza en una clase derivada, esta propiedad permite que un diseñador especifique el motor de representación de texto predeterminado para los formularios de la aplicación.</summary>
        <value>
          <see langword="Boolean" />. Un valor de <see langword="False" /> indica que la aplicación debe utilizar el motor de representación de texto predeterminado para [! INCLUDE[vbprvblong](~/includes/vbprvblong-MD.MD)]. El valor <see langword="True" /> indica que la aplicación debe utilizar el motor de representación de texto de Visual Basic .NET 2002 y Visual Basic .NET 2003.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 De forma predeterminada, esta propiedad devuelve `False` para indicar que el texto GDI motor de representación [!INCLUDE[vbprvblong](~/includes/vbprvblong-md.md)] se usa para los formularios de la aplicación. Sin embargo, puede invalidar esta propiedad para devolver `True` y especificar que los formularios de la aplicación usa el motor de representación del texto GDI + que se utiliza en Visual Basic .NET 2002 y Visual Basic .NET 2003.  
  
 Esta propiedad se llama el <xref:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase> constructor.  
  
 Código que invalida los métodos de la <xref:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase> clase se debe escribir en el archivo ApplicationEvents.vb, que está oculta de forma predeterminada.  
  
| |  
|-|  
|Para obtener acceso a la ventana del Editor de código para invalidar los miembros|  
|1.  Con un proyecto seleccionado en **el Explorador de soluciones**, haga clic en **propiedades** en el **proyecto** menú.<br />2.  Haga clic en la pestaña **Aplicación** .<br />3.  Haga clic en el botón **Ver eventos de aplicaciones** para abrir el Editor de código.<br /><br />Para obtener más información, consulte [Application Page, Project Designer (Visual Basic)](https://docs.microsoft.com/visualstudio/ide/reference/application-page-project-designer-visual-basic).|  
  
   
  
## Examples  
 Este ejemplo muestra cómo establecer el motor de representación de texto GDI + como motor de representación de la aplicación predeterminada invalidando el <xref:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.UseCompatibleTextRendering%2A> propiedad.  
  
```vb  
Protected Overloads Shared ReadOnly Property UseCompatibleTextRendering() As Boolean  
    Get  
        ' Use the GDI+ text rendering engine.  
        Return True  
    End Get  
End Property  
```  
  
 Debe escribir este código en la ventana del Editor de código para eventos de aplicación. Para obtener más información, consulte [Application Page, Project Designer (Visual Basic)](https://docs.microsoft.com/visualstudio/ide/reference/application-page-project-designer-visual-basic).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>