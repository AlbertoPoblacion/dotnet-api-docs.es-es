<Type Name="User" FullName="Microsoft.VisualBasic.ApplicationServices.User">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="7f77fd2917800e7f15fa7fb160d23edf74c600a8" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="es-ES" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36661093" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class User" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi User extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.VisualBasic.ApplicationServices.User" />
  <TypeSignature Language="VB.NET" Value="Public Class User" />
  <TypeSignature Language="C++ CLI" Value="public ref class User" />
  <TypeSignature Language="F#" Value="type User = class" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.VisualBasic</AssemblyName>
    <AssemblyVersion>10.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Proporciona acceso a la información sobre el usuario actual.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Las propiedades y métodos expuestos por la `My.User` objeto proporcionan acceso a la información sobre el usuario actual. El significado de "usuario actual" difiere ligeramente entre Windows y las aplicaciones Web. En una aplicación de Windows, el usuario actual es el usuario que ejecuta la aplicación. En una aplicación Web, el usuario actual es el usuario que tiene acceso a la aplicación.  
  
 El `My.User` propiedad también proporciona acceso a la <xref:System.Security.Principal.IPrincipal> para el usuario actual. Un objeto principal representa el contexto de seguridad del usuario, incluidas la identidad del usuario y los roles a los que pertenece el usuario.  
  
 Para las aplicaciones de Windows, esta propiedad proporciona la misma funcionalidad que la <xref:System.Threading.Thread.CurrentPrincipal%2A> propiedad. Para aplicaciones Web, esta propiedad proporciona la misma funcionalidad que la <xref:System.Web.HttpContext.User%2A> propiedad del objeto devuelto por la <xref:System.Web.HttpContext.Current%2A> propiedad.  
  
> [!NOTE]
>  Para las aplicaciones de Windows, sólo los proyectos se generan el **aplicación de Windows** plantilla inicializar el `My.User` objeto de forma predeterminada. En todos los demás tipos de proyecto de Windows, debe inicializar el `My.User` objeto mediante una llamada a la <xref:Microsoft.VisualBasic.ApplicationServices.User.InitializeWithWindowsUser%2A> método explícitamente o asignando un valor a <xref:System.Threading.Thread.CurrentPrincipal%2A>.  
  
> [!NOTE]
>  La `My.User` objeto no proporcionan información sobre el usuario actual de Windows cuando se ejecuta en Windows 95 y Windows 98 porque esos sistemas operativos no admiten el concepto de un usuario ha iniciado sesión. Debe implementar la autenticación personalizada que se utilizará la `My.User` objeto en esos sistemas operativos.  
  
   
  
## Examples  
 Este ejemplo se comprueba si la aplicación está utilizando Windows o autenticación personalizada y utiliza esa información para analizar la `My.User.Name` propiedad.  
  
 [!code-vb[VbVbalrMyUser#3](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMyUser/VB/Class1.vb#3)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Security.Principal.IPrincipal" />
    <altmember cref="P:System.Threading.Thread.CurrentPrincipal" />
    <altmember cref="P:System.Web.HttpContext.User" />
    <altmember cref="P:System.Web.HttpContext.Current" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public User ();" />
      <MemberSignature Language="ILAsm" Value=".method public specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.ApplicationServices.User.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; User();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Inicializa una nueva instancia de la clase <see cref="T:Microsoft.VisualBasic.ApplicationServices.User" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Las propiedades y métodos expuestos por la `My.User` objeto proporcionan acceso a información sobre el usuario actual.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CurrentPrincipal">
      <MemberSignature Language="C#" Value="public System.Security.Principal.IPrincipal CurrentPrincipal { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Security.Principal.IPrincipal CurrentPrincipal" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.ApplicationServices.User.CurrentPrincipal" />
      <MemberSignature Language="VB.NET" Value="Public Property CurrentPrincipal As IPrincipal" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Security::Principal::IPrincipal ^ CurrentPrincipal { System::Security::Principal::IPrincipal ^ get(); void set(System::Security::Principal::IPrincipal ^ value); };" />
      <MemberSignature Language="F#" Value="member this.CurrentPrincipal : System.Security.Principal.IPrincipal with get, set" Usage="Microsoft.VisualBasic.ApplicationServices.User.CurrentPrincipal" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Security.Principal.IPrincipal</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene o establece la entidad de seguridad (de la seguridad basada en roles).</summary>
        <value>Un valor de <see cref="T:System.Security.Principal.IPrincipal" /> que representa el contexto de seguridad.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Puede establecer la `My.User.CurrentPrincipal` propiedad a un objeto que implementa el <xref:System.Security.Principal.IPrincipal> interfaz para habilitar la autenticación personalizada.  
  
 En la mayoría de los tipos de proyecto, esta propiedad obtiene y establece la entidad de seguridad actual del subproceso. En una aplicación ASP.NET, esta propiedad obtiene y establece la información de seguridad para la identidad del usuario de la solicitud HTTP actual.  
  
 Se trata de un miembro avanzado; no aparece en IntelliSense, a menos que haga clic en el **todos los** ficha.  
  
## <a name="availability-by-project-type"></a>Disponibilidad por tipo de proyecto  
  
|Tipo de proyecto|Disponible|  
|-|-|  
|Aplicación Windows|**Sí**|  
|Biblioteca de clases|**Sí**|  
|Aplicación de consola|**Sí**|  
|Biblioteca de controles de Windows|**Sí**|  
|Biblioteca de controles Web|**Sí**|  
|Servicio de Windows|**Sí**|  
|Sitio web|**Sí**|  
  
   
  
## Examples  
 Este ejemplo se comprueba si la aplicación está utilizando Windows o autenticación personalizada y utiliza esa información para analizar `My.User.Name` propiedad.  
  
 [!code-vb[VbVbalrMyUser#3](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMyUser/VB/Class1.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.SecurityException">El autor de llamada no tiene el permiso necesario para establecer la entidad de seguridad.</exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">Describe un conjunto de permisos de seguridad aplicados al código. Enumeración asociada: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlPrincipal" />.</permission>
        <altmember cref="T:System.Security.Principal.IPrincipal" />
      </Docs>
    </Member>
    <Member MemberName="InitializeWithWindowsUser">
      <MemberSignature Language="C#" Value="public void InitializeWithWindowsUser ();" />
      <MemberSignature Language="ILAsm" Value=".method public instance void InitializeWithWindowsUser() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.ApplicationServices.User.InitializeWithWindowsUser" />
      <MemberSignature Language="VB.NET" Value="Public Sub InitializeWithWindowsUser ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void InitializeWithWindowsUser();" />
      <MemberSignature Language="F#" Value="member this.InitializeWithWindowsUser : unit -&gt; unit" Usage="user.InitializeWithWindowsUser " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Establece la entidad de seguridad actual del subproceso en el usuario de Windows que inició la aplicación.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Puede usar el `My.User.InitializeWithWindowsUser` método para establecer la entidad de seguridad actual del subproceso para el usuario de Windows que inició la aplicación. El modelo de aplicación de Visual Basic en una aplicación de Windows llama a este método durante el inicio de forma predeterminada. En otros tipos de proyecto, debe establecer la entidad de seguridad actual del subproceso llamando explícitamente a este método o asignando un valor a <xref:System.Threading.Thread.CurrentPrincipal%2A?displayProperty=nameWithType>.  
  
 En los proyectos de Windows, la `My.User` objeto se basa en la entidad de seguridad actual del subproceso; por lo tanto, este método puede cambiar la información `My.User` devuelve. En una aplicación ASP.NET, la `My.User` objeto se basa en la identidad de usuario de la solicitud HTTP actual y no se ve afectado por este método.  
  
> [!NOTE]
>  El comportamiento exacto de la `My.User` objeto depende del tipo de aplicación y en el sistema operativo en el que se ejecuta la aplicación. Para obtener más información, consulte el <xref:Microsoft.VisualBasic.ApplicationServices.User> general sobre la clase.  
  
 Se trata de un miembro avanzado; no aparece en IntelliSense, a menos que haga clic en el **todos los** ficha.  
  
## <a name="availability-by-project-type"></a>Disponibilidad por tipo de proyecto  
  
|Tipo de proyecto|Disponible|  
|-|-|  
|Aplicación Windows|**Sí**|  
|Biblioteca de clases|**Sí**|  
|Aplicación de consola|**Sí**|  
|Biblioteca de controles de Windows|**Sí**|  
|Biblioteca de controles Web|**Sí**|  
|Servicio de Windows|**Sí**|  
|Sitio web|**Sí**|  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission">Describe un conjunto de permisos de seguridad aplicados al código. Enumeración asociada: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlPrincipal" />.</permission>
      </Docs>
    </Member>
    <Member MemberName="InternalPrincipal">
      <MemberSignature Language="C#" Value="protected virtual System.Security.Principal.IPrincipal InternalPrincipal { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Security.Principal.IPrincipal InternalPrincipal" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.ApplicationServices.User.InternalPrincipal" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Property InternalPrincipal As IPrincipal" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual property System::Security::Principal::IPrincipal ^ InternalPrincipal { System::Security::Principal::IPrincipal ^ get(); void set(System::Security::Principal::IPrincipal ^ value); };" />
      <MemberSignature Language="F#" Value="member this.InternalPrincipal : System.Security.Principal.IPrincipal with get, set" Usage="Microsoft.VisualBasic.ApplicationServices.User.InternalPrincipal" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.Principal.IPrincipal</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene o establece el objeto principal que representa al usuario actual.</summary>
        <value>Objeto <see cref="T:System.Security.Principal.IPrincipal" /> que representa al usuario actual.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 En el <xref:Microsoft.VisualBasic.ApplicationServices.User> de objeto, esta propiedad incluye la <xref:System.Threading.Thread.CurrentPrincipal%2A?displayProperty=nameWithType> propiedad. Invalide este método en una clase derivada para proporcionar un comportamiento diferente. Por ejemplo, el <xref:Microsoft.VisualBasic.ApplicationServices.WebUser.InternalPrincipal%2A?displayProperty=nameWithType> propiedad reemplaza esta propiedad.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsAuthenticated">
      <MemberSignature Language="C#" Value="public bool IsAuthenticated { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsAuthenticated" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.ApplicationServices.User.IsAuthenticated" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsAuthenticated As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsAuthenticated { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsAuthenticated : bool" Usage="Microsoft.VisualBasic.ApplicationServices.User.IsAuthenticated" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene un valor que indica si el usuario se ha autenticado.</summary>
        <value>
          <see langword="True" /> si se ha autenticado al usuario; en caso contrario, <see langword="False" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El `My.User.IsAuthenticated` propiedad permite que el código determinar si se ha autenticado el usuario actual.  
  
> [!NOTE]
>  El comportamiento exacto de `My.User` objeto depende del tipo de la aplicación y en el sistema operativo en el que se ejecuta la aplicación. Para obtener más información, consulte el <xref:Microsoft.VisualBasic.ApplicationServices.User> general sobre la clase.  
  
## <a name="availability-by-project-type"></a>Disponibilidad por tipo de proyecto  
  
|Tipo de proyecto|Disponible|  
|-|-|  
|Aplicación Windows|**Sí**|  
|Biblioteca de clases|**Sí**|  
|Aplicación de consola|**Sí**|  
|Biblioteca de controles de Windows|**Sí**|  
|Biblioteca de controles Web|**Sí**|  
|Servicio de Windows|**Sí**|  
|Sitio web|**Sí**|  
  
   
  
## Examples  
 En este ejemplo se comprueba que se ha autenticado el usuario antes de acceder a un recurso.  
  
 [!code-vb[VbVbalrMyUser#2](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMyUser/VB/Class1.vb#2)]  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission">Describe un conjunto de permisos de seguridad aplicados al código. Enumeración asociada: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlPrincipal" />.</permission>
      </Docs>
    </Member>
    <MemberGroup MemberName="IsInRole">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Determina si el usuario actual pertenece al rol especificado.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="IsInRole">
      <MemberSignature Language="C#" Value="public bool IsInRole (Microsoft.VisualBasic.ApplicationServices.BuiltInRole role);" />
      <MemberSignature Language="ILAsm" Value=".method public instance bool IsInRole(valuetype Microsoft.VisualBasic.ApplicationServices.BuiltInRole role) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.ApplicationServices.User.IsInRole(Microsoft.VisualBasic.ApplicationServices.BuiltInRole)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsInRole (role As BuiltInRole) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsInRole(Microsoft::VisualBasic::ApplicationServices::BuiltInRole role);" />
      <MemberSignature Language="F#" Value="member this.IsInRole : Microsoft.VisualBasic.ApplicationServices.BuiltInRole -&gt; bool" Usage="user.IsInRole role" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="role" Type="Microsoft.VisualBasic.ApplicationServices.BuiltInRole" />
      </Parameters>
      <Docs>
        <param name="role">El rol de Windows integrado cuya pertenencia se va a comprobar.</param>
        <summary>Determina si el usuario actual pertenece al rol especificado.</summary>
        <returns>Es <see langword="True" /> si el usuario actual es un miembro del rol especificado; en caso contrario, es <see langword="False" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El `My.User.IsInRole` método permite que el código determinar si el usuario actual es un miembro del rol especificado.  
  
 La sobrecarga de la `My.User.IsInRole` método que toma una cadena proporciona fácil acceso a la <xref:System.Security.Principal.IPrincipal.IsInRole%2A> método de la entidad de seguridad actual.  
  
 La sobrecarga de la `My.User.IsInRole` método que toma un `BuiltInRole` enumeración tiene un comportamiento diferente, dependiendo de la entidad de seguridad actual. Si es una entidad de seguridad de usuario de Windows (<xref:System.Security.Principal.WindowsPrincipal>), esta función convierte `role` en el equivalente de <xref:System.Security.Principal.WindowsBuiltInRole> enumeración y devuelve el resultado de llamar al método <xref:System.Security.Principal.WindowsPrincipal.IsInRole%2A>. Si la entidad de seguridad actual es cualquier otra entidad de seguridad, esta función pasa el nombre del valor de enumeración en `role` a la entidad de seguridad <xref:System.Security.Principal.IPrincipal.IsInRole%2A> método.  
  
> [!NOTE]
>  El comportamiento exacto de la `My.User` objeto depende del tipo de la aplicación y en el sistema operativo en el que se ejecuta la aplicación. Para obtener más información, consulte el <xref:Microsoft.VisualBasic.ApplicationServices.User> general sobre la clase.  
  
## <a name="availability-by-project-type"></a>Disponibilidad por tipo de proyecto  
  
|Tipo de proyecto|Disponible|  
|-|-|  
|Aplicación Windows|**Sí**|  
|Biblioteca de clases|**Sí**|  
|Aplicación de consola|**Sí**|  
|Biblioteca de controles de Windows|**Sí**|  
|Biblioteca de controles Web|**Sí**|  
|Servicio de Windows|**Sí**|  
|Sitio web|**Sí**|  
  
   
  
## Examples  
 Este ejemplo se comprueba si el usuario es un administrador antes de obtener acceso a un recurso.  
  
 [!code-vb[VbVbalrMyUser#1](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMyUser/VB/Class1.vb#1)]  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission">Describe un conjunto de permisos de seguridad aplicados al código. Enumeración asociada: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlPrincipal" />.</permission>
      </Docs>
    </Member>
    <Member MemberName="IsInRole">
      <MemberSignature Language="C#" Value="public bool IsInRole (string role);" />
      <MemberSignature Language="ILAsm" Value=".method public instance bool IsInRole(string role) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.ApplicationServices.User.IsInRole(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsInRole (role As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsInRole(System::String ^ role);" />
      <MemberSignature Language="F#" Value="member this.IsInRole : string -&gt; bool" Usage="user.IsInRole role" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="role" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="role">Nombre del rol cuya condición de pertenencia se va a comprobar.</param>
        <summary>Determina si el usuario actual pertenece al rol especificado.</summary>
        <returns>Es <see langword="True" /> si el usuario actual es un miembro del rol especificado; en caso contrario, es <see langword="False" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El `My.User.IsInRole` método permite que el código determinar si el usuario actual es un miembro del rol especificado.  
  
 La sobrecarga de la `My.User.IsInRole` método que toma una cadena proporciona fácil acceso a la <xref:System.Security.Principal.IPrincipal.IsInRole%2A> método de la entidad de seguridad actual.  
  
 La sobrecarga de la `My.User.IsInRole` método que toma un `BuiltInRole` enumeración tiene un comportamiento diferente, dependiendo de la entidad de seguridad actual. Si es una entidad de seguridad de usuario de Windows (<xref:System.Security.Principal.WindowsPrincipal>), esta función convierte `role` en el equivalente de <xref:System.Security.Principal.WindowsBuiltInRole> enumeración y devuelve el resultado de llamar al método <xref:System.Security.Principal.WindowsPrincipal.IsInRole%2A>. Si la entidad de seguridad actual es cualquier otra entidad de seguridad, esta función pasa el nombre del valor de enumeración en `role` a la entidad de seguridad <xref:System.Security.Principal.IPrincipal.IsInRole%2A> método.  
  
> [!NOTE]
>  El comportamiento exacto de la `My.User` objeto depende del tipo de la aplicación y en el sistema operativo en el que se ejecuta la aplicación. Para obtener más información, consulte el <xref:Microsoft.VisualBasic.ApplicationServices.User> general sobre la clase.  
  
## <a name="availability-by-project-type"></a>Disponibilidad por tipo de proyecto  
  
|Tipo de proyecto|Disponible|  
|-|-|  
|Aplicación Windows|**Sí**|  
|Biblioteca de clases|**Sí**|  
|Aplicación de consola|**Sí**|  
|Biblioteca de controles de Windows|**Sí**|  
|Biblioteca de controles Web|**Sí**|  
|Servicio de Windows|**Sí**|  
|Sitio web|**Sí**|  
  
   
  
## Examples  
 Este ejemplo se comprueba si el usuario es un administrador antes de obtener acceso a un recurso.  
  
 [!code-vb[VbVbalrMyUser#1](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMyUser/VB/Class1.vb#1)]  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission">Describe un conjunto de permisos de seguridad aplicados al código. Enumeración asociada: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlPrincipal" />.</permission>
        <altmember cref="T:Microsoft.VisualBasic.ApplicationServices.BuiltInRole" />
      </Docs>
    </Member>
    <Member MemberName="Name">
      <MemberSignature Language="C#" Value="public string Name { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Name" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.ApplicationServices.User.Name" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Name As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Name { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Name : string" Usage="Microsoft.VisualBasic.ApplicationServices.User.Name" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene el nombre del usuario actual.</summary>
        <value>
          <see langword="String" />. Nombre del usuario actual.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Puede usar el `My.User` objeto para obtener información sobre el usuario actual.  
  
 La entidad de seguridad que autentica al usuario también controla el formato del nombre de usuario. De forma predeterminada, una aplicación utiliza la autenticación de Windows y el nombre de usuario tiene el formato dominio ombre de usuario. Una implementación personalizada de la entidad de seguridad no utiliza necesariamente el mismo formato.  
  
> [!NOTE]
>  El `My.User.Name` propiedad devuelve una cadena vacía cuando se ejecuta en Windows 95 y Windows 98 porque esos sistemas operativos no reconocen los nombres de usuario.  
  
> [!NOTE]
>  El comportamiento exacto de la `My.User` objeto depende del tipo de la aplicación y en el sistema operativo en el que se ejecuta la aplicación. Para obtener más información, consulte el <xref:Microsoft.VisualBasic.ApplicationServices.User> general sobre la clase.  
  
## <a name="availability-by-project-type"></a>Disponibilidad por tipo de proyecto  
  
|Tipo de proyecto|Disponible|  
|-|-|  
|Aplicación Windows|**Sí**|  
|Biblioteca de clases|**Sí**|  
|Aplicación de consola|**Sí**|  
|Biblioteca de controles de Windows|**Sí**|  
|Biblioteca de controles Web|**Sí**|  
|Servicio de Windows|**Sí**|  
|Sitio web|**Sí**|  
  
   
  
## Examples  
 Este ejemplo se comprueba si la aplicación está utilizando Windows o autenticación personalizada y utiliza esa información para analizar la `My.User.Name` propiedad.  
  
 [!code-vb[VbVbalrMyUser#3](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMyUser/VB/Class1.vb#3)]  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission">Describe un conjunto de permisos de seguridad aplicados al código. Enumeración asociada: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlPrincipal" />.</permission>
      </Docs>
    </Member>
  </Members>
</Type>