<Type Name="BuiltInRoleConverter" FullName="Microsoft.VisualBasic.ApplicationServices.BuiltInRoleConverter">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="dde467a490d0b03ce78e6a6ede7d41ca24bc88b1" />
    <Meta Name="ms.sourcegitcommit" Value="cbcba80f998e27b87425ad54726bdb684fb3a932" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="es-ES" />
    <Meta Name="ms.lasthandoff" Value="09/04/2018" />
    <Meta Name="ms.locfileid" Value="43582156" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class BuiltInRoleConverter : System.ComponentModel.TypeConverter" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi BuiltInRoleConverter extends System.ComponentModel.TypeConverter" />
  <TypeSignature Language="DocId" Value="T:Microsoft.VisualBasic.ApplicationServices.BuiltInRoleConverter" />
  <TypeSignature Language="VB.NET" Value="Public Class BuiltInRoleConverter&#xA;Inherits TypeConverter" />
  <TypeSignature Language="C++ CLI" Value="public ref class BuiltInRoleConverter : System::ComponentModel::TypeConverter" />
  <TypeSignature Language="F#" Value="type BuiltInRoleConverter = class&#xA;    inherit TypeConverter" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.VisualBasic</AssemblyName>
    <AssemblyVersion>8.0.0.0</AssemblyVersion>
    <AssemblyVersion>10.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.ComponentModel.TypeConverter</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Proporciona un convertidor de tipos para convertir los valores de enumeración <see cref="T:Microsoft.VisualBasic.ApplicationServices.BuiltInRole" /> en los valores de enumeración <see cref="T:System.Security.Principal.WindowsBuiltInRole" />.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este convertidor admite Visual Basic <xref:Microsoft.VisualBasic.ApplicationServices.User> objeto.  
  
 Para obtener más información sobre los convertidores de tipos, vea la <xref:System.ComponentModel.TypeConverter> clase base y [Cómo: implementar un convertidor de tipos](https://docs.microsoft.com/previous-versions/visualstudio/visual-studio-2013/ayybcxe5(v=vs.120)).  
  
> [!CAUTION]
>  Nunca se debe crear una instancia de un <xref:Microsoft.VisualBasic.ApplicationServices.BuiltInRoleConverter> clase. En su lugar, se llama al método <xref:System.ComponentModel.TypeDescriptor.GetConverter%2A> de la clase <xref:System.ComponentModel.TypeDescriptor>. Para obtener más información, vea los ejemplos en la <xref:System.ComponentModel.TypeConverter> clase base.  
  
 ]]></format>
    </remarks>
    <altmember cref="T:Microsoft.VisualBasic.ApplicationServices.User" />
    <altmember cref="T:Microsoft.VisualBasic.ApplicationServices.BuiltInRole" />
    <altmember cref="T:System.Security.Principal.WindowsBuiltInRole" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public BuiltInRoleConverter ();" />
      <MemberSignature Language="ILAsm" Value=".method public specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.ApplicationServices.BuiltInRoleConverter.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; BuiltInRoleConverter();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>Inicializa una nueva instancia de la clase <see cref="T:Microsoft.VisualBasic.ApplicationServices.BuiltInRoleConverter" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este convertidor admite Visual Basic <xref:Microsoft.VisualBasic.ApplicationServices.User> objeto.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:Microsoft.VisualBasic.ApplicationServices.User" />
        <altmember cref="T:Microsoft.VisualBasic.ApplicationServices.BuiltInRole" />
        <altmember cref="T:System.Security.Principal.WindowsBuiltInRole" />
      </Docs>
    </Member>
    <Member MemberName="CanConvertTo">
      <MemberSignature Language="C#" Value="public override bool CanConvertTo (System.ComponentModel.ITypeDescriptorContext context, Type destinationType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool CanConvertTo(class System.ComponentModel.ITypeDescriptorContext context, class System.Type destinationType) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.ApplicationServices.BuiltInRoleConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function CanConvertTo (context As ITypeDescriptorContext, destinationType As Type) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool CanConvertTo(System::ComponentModel::ITypeDescriptorContext ^ context, Type ^ destinationType);" />
      <MemberSignature Language="F#" Value="abstract member CanConvertTo : System.ComponentModel.ITypeDescriptorContext * Type -&gt; bool&#xA;override this.CanConvertTo : System.ComponentModel.ITypeDescriptorContext * Type -&gt; bool" Usage="builtInRoleConverter.CanConvertTo (context, destinationType)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="System.ComponentModel.ITypeDescriptorContext" />
        <Parameter Name="destinationType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="context">Objeto <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> que proporciona un contexto de formato.</param>
        <param name="destinationType">Objeto <see cref="T:System.Type" /> que representa el tipo al que se desea convertir.</param>
        <summary>Obtiene un valor que indica si este convertidor puede convertir un objeto al tipo de destino especificado usando el contexto.</summary>
        <returns>Un objeto <see cref="T:System.Boolean" /> que indica si este convertidor puede realizar la conversión.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El parámetro `context` puede utilizarse para extraer información adicional acerca del entorno desde el que se está llamando a este convertidor. Puede ser `Nothing`, por lo que debe comprobarse siempre. Asimismo, las propiedades del objeto de contexto pueden devolver `Nothing`.  
  
 Este convertidor admite Visual Basic <xref:Microsoft.VisualBasic.ApplicationServices.User> objeto.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:Microsoft.VisualBasic.ApplicationServices.User" />
        <altmember cref="T:Microsoft.VisualBasic.ApplicationServices.BuiltInRole" />
        <altmember cref="T:System.Security.Principal.WindowsBuiltInRole" />
      </Docs>
    </Member>
    <Member MemberName="ConvertTo">
      <MemberSignature Language="C#" Value="public override object ConvertTo (System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value, Type destinationType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance object ConvertTo(class System.ComponentModel.ITypeDescriptorContext context, class System.Globalization.CultureInfo culture, object value, class System.Type destinationType) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.ApplicationServices.BuiltInRoleConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ConvertTo (context As ITypeDescriptorContext, culture As CultureInfo, value As Object, destinationType As Type) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Object ^ ConvertTo(System::ComponentModel::ITypeDescriptorContext ^ context, System::Globalization::CultureInfo ^ culture, System::Object ^ value, Type ^ destinationType);" />
      <MemberSignature Language="F#" Value="abstract member ConvertTo : System.ComponentModel.ITypeDescriptorContext * System.Globalization.CultureInfo * obj * Type -&gt; obj&#xA;override this.ConvertTo : System.ComponentModel.ITypeDescriptorContext * System.Globalization.CultureInfo * obj * Type -&gt; obj" Usage="builtInRoleConverter.ConvertTo (context, culture, value, destinationType)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="System.ComponentModel.ITypeDescriptorContext" />
        <Parameter Name="culture" Type="System.Globalization.CultureInfo" />
        <Parameter Name="value" Type="System.Object" />
        <Parameter Name="destinationType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="context">Un contexto de formateador.</param>
        <param name="culture">Referencia cultural en la que se convertirá <c>value</c>.</param>
        <param name="value">Objeto que se va a convertir.</param>
        <param name="destinationType">Tipo en el que se va a convertir el objeto.</param>
        <summary>Convierte el objeto especificado en otro tipo.</summary>
        <returns>El objeto convertido.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Para convertir a y convertir los tipos más comunes son objetos de cadena. La implementación predeterminada realiza una llamada a <xref:System.Object.ToString%2A> en el objeto si el objeto es válido y si el tipo de destino es <xref:System.String>.  
  
 El parámetro `context` puede utilizarse para extraer información adicional acerca del entorno desde el que se está llamando a este convertidor. Puede ser `Nothing`, por lo que debe comprobarse siempre. Asimismo, las propiedades del objeto de contexto pueden devolver `Nothing`.  
  
 Este convertidor admite Visual Basic <xref:Microsoft.VisualBasic.ApplicationServices.User> objeto.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="destinationType" /> es <see langword="Nothing" />.</exception>
        <exception cref="T:System.NotSupportedException">No se puede realizar la conversión.</exception>
        <altmember cref="T:Microsoft.VisualBasic.ApplicationServices.User" />
        <altmember cref="T:Microsoft.VisualBasic.ApplicationServices.BuiltInRole" />
        <altmember cref="T:System.Security.Principal.WindowsBuiltInRole" />
      </Docs>
    </Member>
  </Members>
</Type>