<Type Name="ElapsedEventArgs" FullName="System.Timers.ElapsedEventArgs">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="72a34db2282a94779876af67262c3fe6f5b4dcb3" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="es-ES" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36406143" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class ElapsedEventArgs : EventArgs" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit ElapsedEventArgs extends System.EventArgs" />
  <TypeSignature Language="DocId" Value="T:System.Timers.ElapsedEventArgs" />
  <TypeSignature Language="VB.NET" Value="Public Class ElapsedEventArgs&#xA;Inherits EventArgs" />
  <TypeSignature Language="C++ CLI" Value="public ref class ElapsedEventArgs : EventArgs" />
  <TypeSignature Language="F#" Value="type ElapsedEventArgs = class&#xA;    inherit EventArgs" />
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.EventArgs</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Proporciona datos para el evento <see cref="E:System.Timers.Timer.Elapsed" />.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Examples  
 El ejemplo siguiente crea un <xref:System.Timers.Timer> objeto que se activa su <xref:System.Timers.Timer.Elapsed?displayProperty=nameWithType> evento cada dos segundos (2000 milisegundos), configura un controlador de eventos para el evento e inicia el temporizador. El controlador de eventos muestra el valor de la <xref:System.Timers.ElapsedEventArgs.SignalTime%2A?displayProperty=nameWithType> propiedad cada vez que se genera.  
  
 [!code-cpp[System.Timers.Timer#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.timers.timer/cpp/timer1.cpp#1)]
 [!code-csharp[System.Timers.Timer#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.timers.timer/cs/timer1.cs#1)]
 [!code-vb[System.Timers.Timer#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.timers.timer/vb/timer1.vb#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="SignalTime">
      <MemberSignature Language="C#" Value="public DateTime SignalTime { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.DateTime SignalTime" />
      <MemberSignature Language="DocId" Value="P:System.Timers.ElapsedEventArgs.SignalTime" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property SignalTime As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property DateTime SignalTime { DateTime get(); };" />
      <MemberSignature Language="F#" Value="member this.SignalTime : DateTime" Usage="System.Timers.ElapsedEventArgs.SignalTime" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene la fecha y hora a la que se generó el evento <see cref="E:System.Timers.Timer.Elapsed" />.</summary>
        <value>Hora a la que se generó el evento <see cref="E:System.Timers.Timer.Elapsed" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Timers.Timer.Elapsed?displayProperty=nameWithType> evento se desencadena en un <xref:System.Threading.ThreadPool> subprocesos, por lo que el método de control de eventos puede ejecutarse en un subproceso al mismo tiempo que una llamada a la <xref:System.Timers.Timer.Stop%2A?displayProperty=nameWithType> método se ejecuta en otro subproceso. Esto podría dar lugar a la <xref:System.Timers.Timer.Elapsed> evento que se provoca después de la <xref:System.Timers.Timer.Stop%2A> se llama al método. No se puede evitar esta condición de carrera simplemente comparando el <xref:System.Timers.ElapsedEventArgs.SignalTime%2A> propiedad con el tiempo cuando el <xref:System.Timers.Timer.Stop%2A> se llama el método, el método de control de eventos podría ya se está ejecutando cuando el <xref:System.Timers.Timer.Stop%2A> método se llama o debería comenzar ejecutar entre el momento cuando la <xref:System.Timers.Timer.Stop%2A> se llama al método y el momento en que cuando se guarda la hora de detención. Si es fundamental para evitar que el subproceso que llama el <xref:System.Timers.Timer.Stop%2A> método continúe mientras todavía se está ejecutando el método de control de eventos, use un mecanismo de sincronización más sólido como el <xref:System.Threading.Monitor> clase o <xref:System.Threading.Interlocked.CompareExchange%2A> método. Código que usa el <xref:System.Threading.Interlocked.CompareExchange%2A> método puede encontrarse en el ejemplo para el <xref:System.Timers.Timer.Stop%2A?displayProperty=nameWithType> método.  
  
   
  
## Examples  
 El ejemplo siguiente crea un <xref:System.Timers.Timer> objeto que se activa su <xref:System.Timers.Timer.Elapsed?displayProperty=nameWithType> evento cada dos segundos (2000 milisegundos), configura un controlador de eventos para el evento e inicia el temporizador. El controlador de eventos muestra el valor de la <xref:System.Timers.ElapsedEventArgs.SignalTime%2A?displayProperty=nameWithType> propiedad cada vez que se genera.  
  
 [!code-cpp[System.Timers.Timer#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.timers.timer/cpp/timer1.cpp#1)]
 [!code-csharp[System.Timers.Timer#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.timers.timer/cs/timer1.cs#1)]
 [!code-vb[System.Timers.Timer#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.timers.timer/vb/timer1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Timers.Timer.Stop" />
      </Docs>
    </Member>
  </Members>
</Type>