<Type Name="Timer" FullName="System.Timers.Timer">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="618b69c9a4d91151391fe5e2c79054e0441f4aec" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="es-ES" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class Timer : System.ComponentModel.Component, System.ComponentModel.ISupportInitialize" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit Timer extends System.ComponentModel.Component implements class System.ComponentModel.ISupportInitialize" />
  <TypeSignature Language="DocId" Value="T:System.Timers.Timer" />
  <TypeSignature Language="VB.NET" Value="Public Class Timer&#xA;Inherits Component&#xA;Implements ISupportInitialize" />
  <TypeSignature Language="C++ CLI" Value="public ref class Timer : System::ComponentModel::Component, System::ComponentModel::ISupportInitialize" />
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.ComponentModel.Component</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.ComponentModel.ISupportInitialize</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.ComponentModel.DefaultEvent("Elapsed")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.ComponentModel.DefaultProperty("Interval")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <span data-ttu-id="f5863-101">Genera un evento después de un intervalo establecido, con la opción de generar eventos recurrentes.</span>
      <span class="sxs-lookup">
        <span data-stu-id="f5863-101">Generates an event after a set interval, with an option to generate recurring events.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f5863-102">El <xref:System.Timers.Timer> componente es un temporizador basado en servidor que genera un <xref:System.Timers.Timer.Elapsed> eventos en la aplicación después del número de milisegundos en la <xref:System.Timers.Timer.Interval%2A> ha transcurrido la propiedad.</span><span class="sxs-lookup"><span data-stu-id="f5863-102">The <xref:System.Timers.Timer> component is a server-based timer that raises an <xref:System.Timers.Timer.Elapsed> event in your application after the number of milliseconds in the <xref:System.Timers.Timer.Interval%2A> property has elapsed.</span></span> <span data-ttu-id="f5863-103">Puede configurar la <xref:System.Timers.Timer> objeto para generar el evento solo una vez o varias veces mediante la <xref:System.Timers.Timer.AutoReset%2A> propiedad.</span><span class="sxs-lookup"><span data-stu-id="f5863-103">You can configure the <xref:System.Timers.Timer> object to raise the event just once or repeatedly using the <xref:System.Timers.Timer.AutoReset%2A> property.</span></span> <span data-ttu-id="f5863-104">Normalmente, un <xref:System.Timers.Timer> objeto se declara en el nivel de clase para que permanezca en el ámbito siempre y cuando sea necesario.</span><span class="sxs-lookup"><span data-stu-id="f5863-104">Typically, a <xref:System.Timers.Timer> object is declared at the class level so that it stays in scope as long as it is needed.</span></span> <span data-ttu-id="f5863-105">A continuación, puede controlar su <xref:System.Timers.Timer.Elapsed> eventos para proporcionar procesamiento normal.</span><span class="sxs-lookup"><span data-stu-id="f5863-105">You can then handle its <xref:System.Timers.Timer.Elapsed> event to provide regular processing.</span></span> <span data-ttu-id="f5863-106">Por ejemplo, suponga que tiene un servidor crítico que se debe mantener ejecuta 24 horas al día, 7 días a la semana.</span><span class="sxs-lookup"><span data-stu-id="f5863-106">For example, suppose you have a critical server that must be kept running 24 hours a day, 7 days a week.</span></span> <span data-ttu-id="f5863-107">Puede crear un servicio que utiliza un <xref:System.Timers.Timer> objeto para comprobar periódicamente el servidor y asegúrese de que el sistema está en funcionamiento.</span><span class="sxs-lookup"><span data-stu-id="f5863-107">You could create a service that uses a <xref:System.Timers.Timer> object to periodically check the server and ensure that the system is up and running.</span></span> <span data-ttu-id="f5863-108">Si el sistema no responde, el servicio podría intentar reiniciar el servidor o para notificar a un administrador.</span><span class="sxs-lookup"><span data-stu-id="f5863-108">If the system is not responding, the service could attempt to restart the server or notify an administrator.</span></span>  
  
> [!IMPORTANT]
> <span data-ttu-id="f5863-109">La <xref:System.Timers.Timer> clase no está disponible para todas las implementaciones de .NET y las versiones, como 1.6 estándar de .NET y las versiones inferiores.</span><span class="sxs-lookup"><span data-stu-id="f5863-109">The <xref:System.Timers.Timer> class is not available for all .NET implementations and versions, such as .NET Standard 1.6 and lower versions.</span></span>
> <span data-ttu-id="f5863-110">En estos casos, puede usar el <xref:System.Threading.Timer?displayProperty=nameWithType> clase en su lugar.</span><span class="sxs-lookup"><span data-stu-id="f5863-110">In these cases, you can use the <xref:System.Threading.Timer?displayProperty=nameWithType> class instead.</span></span>
  
 <span data-ttu-id="f5863-111">Este tipo implementa la <xref:System.IDisposable> interfaz.</span><span class="sxs-lookup"><span data-stu-id="f5863-111">This type implements the <xref:System.IDisposable> interface.</span></span> <span data-ttu-id="f5863-112">Cuando haya terminado de utilizar el tipo, debe eliminar del mismo directa o indirectamente.</span><span class="sxs-lookup"><span data-stu-id="f5863-112">When you have finished using the type, you should dispose of it either directly or indirectly.</span></span> <span data-ttu-id="f5863-113">Para deshacerse del tipo directamente, llame a su <xref:System.IDisposable.Dispose%2A> método en un `try` / `catch` bloque.</span><span class="sxs-lookup"><span data-stu-id="f5863-113">To dispose of the type directly, call its <xref:System.IDisposable.Dispose%2A> method in a `try`/`catch` block.</span></span> <span data-ttu-id="f5863-114">Para deshacerse de él indirectamente, use una construcción de lenguaje como `using` (en C#) o `Using` (en Visual Basic).</span><span class="sxs-lookup"><span data-stu-id="f5863-114">To dispose of it indirectly, use a language construct such as `using` (in C#) or `Using` (in Visual Basic).</span></span> <span data-ttu-id="f5863-115">Para obtener más información, vea la sección "Uso de un objeto que implementa IDisposable" en el <xref:System.IDisposable> tema de la interfaz.</span><span class="sxs-lookup"><span data-stu-id="f5863-115">For more information, see the "Using an Object that Implements IDisposable" section in the <xref:System.IDisposable> interface topic.</span></span>  
  
 <span data-ttu-id="f5863-116">Basada en el servidor <xref:System.Timers.Timer?displayProperty=nameWithType> clase está diseñada para su uso con subprocesos de trabajo en un entorno multiproceso.</span><span class="sxs-lookup"><span data-stu-id="f5863-116">The server-based <xref:System.Timers.Timer?displayProperty=nameWithType> class is designed for use with worker threads in a multithreaded environment.</span></span> <span data-ttu-id="f5863-117">Temporizadores de servidor pueden desplazarse entre subprocesos para controlar presionado <xref:System.Timers.Timer.Elapsed> eventos, lo que produce más precisión que los temporizadores de Windows en generar el evento de tiempo.</span><span class="sxs-lookup"><span data-stu-id="f5863-117">Server timers can move among threads to handle the raised <xref:System.Timers.Timer.Elapsed> event, resulting in more accuracy than Windows timers in raising the event on time.</span></span>  
  
 <span data-ttu-id="f5863-118">El <xref:System.Timers.Timer?displayProperty=nameWithType> componente genera el <xref:System.Timers.Timer.Elapsed> eventos, en función del valor (en milisegundos) de la <xref:System.Timers.Timer.Interval%2A> propiedad.</span><span class="sxs-lookup"><span data-stu-id="f5863-118">The <xref:System.Timers.Timer?displayProperty=nameWithType> component raises the <xref:System.Timers.Timer.Elapsed> event, based on the value (in milliseconds) of the <xref:System.Timers.Timer.Interval%2A> property.</span></span> <span data-ttu-id="f5863-119">Puede controlar este evento para realizar el procesamiento que es necesario.</span><span class="sxs-lookup"><span data-stu-id="f5863-119">You can handle this event to perform the processing you need.</span></span> <span data-ttu-id="f5863-120">Por ejemplo, suponga que tiene una aplicación de ventas en línea que envía continuamente pedidos de ventas a una base de datos.</span><span class="sxs-lookup"><span data-stu-id="f5863-120">For example, suppose that you have an online sales application that continuously posts sales orders to a database.</span></span> <span data-ttu-id="f5863-121">El servicio que compila las instrucciones de envío funciona en un lote de pedidos, en lugar de procesar cada pedido individualmente.</span><span class="sxs-lookup"><span data-stu-id="f5863-121">The service that compiles the instructions for shipping operates on a batch of orders rather than processing each order individually.</span></span> <span data-ttu-id="f5863-122">Puede usar un <xref:System.Timers.Timer> para iniciar la cada 30 minutos de procesamiento por lotes.</span><span class="sxs-lookup"><span data-stu-id="f5863-122">You could use a <xref:System.Timers.Timer> to start the batch processing every 30 minutes.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="f5863-123">La clase System.Timers.Timer tiene la misma resolución que el reloj del sistema.</span><span class="sxs-lookup"><span data-stu-id="f5863-123">The System.Timers.Timer class has the same resolution as the system clock.</span></span> <span data-ttu-id="f5863-124">Esto significa que la <xref:System.Timers.Timer.Elapsed> evento se desencadenará a un intervalo definido por la resolución del reloj del sistema si el <xref:System.Timers.Timer.Interval%2A> propiedad es menor que la resolución del reloj del sistema.</span><span class="sxs-lookup"><span data-stu-id="f5863-124">This means that the <xref:System.Timers.Timer.Elapsed> event will fire at an interval defined by the resolution of the system clock if the <xref:System.Timers.Timer.Interval%2A> property is less than the resolution of the system clock.</span></span> <span data-ttu-id="f5863-125">Para obtener más información, vea la propiedad <xref:System.Timers.Timer.Interval%2A>.</span><span class="sxs-lookup"><span data-stu-id="f5863-125">For more information, see the <xref:System.Timers.Timer.Interval%2A> property.</span></span>  
  
 <span data-ttu-id="f5863-126">Cuando <xref:System.Timers.Timer.AutoReset%2A> está establecido en `false`, <xref:System.Timers.Timer?displayProperty=nameWithType> objeto genera el <xref:System.Timers.Timer.Elapsed> eventos una sola vez, después de la primera <xref:System.Timers.Timer.Interval%2A> ha transcurrido.</span><span class="sxs-lookup"><span data-stu-id="f5863-126">When <xref:System.Timers.Timer.AutoReset%2A> is set to `false`, a <xref:System.Timers.Timer?displayProperty=nameWithType> object raises the <xref:System.Timers.Timer.Elapsed> event only once, after the first <xref:System.Timers.Timer.Interval%2A> has elapsed.</span></span> <span data-ttu-id="f5863-127">Para mantener la <xref:System.Timers.Timer.Elapsed> eventos periódicamente en el intervalo definido por el <xref:System.Timers.Timer.Interval%2A>, establezca <xref:System.Timers.Timer.AutoReset%2A> a `true`, que es el valor predeterminado.</span><span class="sxs-lookup"><span data-stu-id="f5863-127">To keep raising the <xref:System.Timers.Timer.Elapsed> event regularly at the interval defined by the <xref:System.Timers.Timer.Interval%2A>, set <xref:System.Timers.Timer.AutoReset%2A> to `true`, which is the default value.</span></span>  
  
 <span data-ttu-id="f5863-128">El <xref:System.Timers.Timer> componente detecta y suprime todas las excepciones producidas por controladores de eventos para el <xref:System.Timers.Timer.Elapsed> eventos.</span><span class="sxs-lookup"><span data-stu-id="f5863-128">The <xref:System.Timers.Timer> component catches and suppresses all exceptions thrown by event handlers for the <xref:System.Timers.Timer.Elapsed> event.</span></span> <span data-ttu-id="f5863-129">Este comportamiento está sujeta a cambios en futuras versiones de .NET Framework.</span><span class="sxs-lookup"><span data-stu-id="f5863-129">This behavior is subject to change in future releases of the .NET Framework.</span></span> <span data-ttu-id="f5863-130">Sin embargo, tenga en cuenta que esto no es así para controladores de eventos que se ejecutan de forma asincrónica e incluyen la `await` operador (en C#) o `Await` (operador) (en Visual Basic).</span><span class="sxs-lookup"><span data-stu-id="f5863-130">Note, however, that this is not true of event handlers that execute asynchronously and include the `await` operator (in C#)  or the `Await` operator (in Visual Basic).</span></span> <span data-ttu-id="f5863-131">Las excepciones iniciadas en estos controladores de eventos se propagan hacia el subproceso que realiza la llamada, como se muestra en el ejemplo siguiente.</span><span class="sxs-lookup"><span data-stu-id="f5863-131">Exceptions thrown in these event handlers are propagated back to the calling thread, as the following example illustrates.</span></span> <span data-ttu-id="f5863-132">Para obtener más información sobre las excepciones iniciadas en métodos asincrónicos, vea [Exception Handling](~/docs/standard/parallel-programming/exception-handling-task-parallel-library.md).</span><span class="sxs-lookup"><span data-stu-id="f5863-132">For more information on exceptions thrown in asynchronous methods, see   [Exception Handling](~/docs/standard/parallel-programming/exception-handling-task-parallel-library.md).</span></span>  
  
 [!code-csharp[System.Timers.Timer#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.timers.timer/cs/AsyncHandlerEx1.cs#3)]
 [!code-vb[System.Timers.Timer#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.timers.timer/vb/AsyncHandlerEx1.vb#3)]  
  
 <span data-ttu-id="f5863-133">Si el <xref:System.Timers.Timer.SynchronizingObject%2A> propiedad es `null`, <xref:System.Timers.Timer.Elapsed> evento se desencadena en un <xref:System.Threading.ThreadPool> subproceso.</span><span class="sxs-lookup"><span data-stu-id="f5863-133">If the <xref:System.Timers.Timer.SynchronizingObject%2A> property is `null`, the <xref:System.Timers.Timer.Elapsed> event is raised on a <xref:System.Threading.ThreadPool> thread.</span></span> <span data-ttu-id="f5863-134">Si el procesamiento de la <xref:System.Timers.Timer.Elapsed> evento dura más de <xref:System.Timers.Timer.Interval%2A>, el evento se puede generar de nuevo en otro <xref:System.Threading.ThreadPool> subproceso.</span><span class="sxs-lookup"><span data-stu-id="f5863-134">If processing of the <xref:System.Timers.Timer.Elapsed> event lasts longer than <xref:System.Timers.Timer.Interval%2A>, the event might be raised again on another <xref:System.Threading.ThreadPool> thread.</span></span> <span data-ttu-id="f5863-135">En esta situación, el controlador de eventos debe ser de reentrada.</span><span class="sxs-lookup"><span data-stu-id="f5863-135">In this situation, the event handler should be reentrant.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="f5863-136">El método de control de eventos puede ejecutarse en un subproceso al mismo tiempo que otro subproceso llama a la <xref:System.Timers.Timer.Stop%2A> método o establece la <xref:System.Timers.Timer.Enabled%2A> propiedad `false`.</span><span class="sxs-lookup"><span data-stu-id="f5863-136">The event-handling method might run on one thread at the same time that another thread calls the <xref:System.Timers.Timer.Stop%2A> method or sets the <xref:System.Timers.Timer.Enabled%2A> property to `false`.</span></span> <span data-ttu-id="f5863-137">Esto podría dar lugar a la <xref:System.Timers.Timer.Elapsed> evento que se provoca cuando se detiene el temporizador.</span><span class="sxs-lookup"><span data-stu-id="f5863-137">This might result in the <xref:System.Timers.Timer.Elapsed> event being raised after the timer is stopped.</span></span> <span data-ttu-id="f5863-138">El código de ejemplo para el <xref:System.Timers.Timer.Stop%2A> método muestra una manera de evitar esta condición de carrera.</span><span class="sxs-lookup"><span data-stu-id="f5863-138">The example code for the <xref:System.Timers.Timer.Stop%2A> method shows one way to avoid this race condition.</span></span>  
  
 <span data-ttu-id="f5863-139">Aunque <xref:System.Timers.Timer.SynchronizingObject%2A> no es `null`, <xref:System.Timers.Timer.Elapsed> eventos pueden producirse después de la <xref:System.Timers.Timer.Dispose%2A> o <xref:System.Timers.Timer.Stop%2A> ha llamado al método o después la <xref:System.Timers.Timer.Enabled%2A> propiedad se ha establecido en `false`, porque la señal para generar el <xref:System.Timers.Timer.Elapsed> eventos siempre está en cola para su ejecución en un subproceso del grupo.</span><span class="sxs-lookup"><span data-stu-id="f5863-139">Even if <xref:System.Timers.Timer.SynchronizingObject%2A> is not `null`, <xref:System.Timers.Timer.Elapsed> events can occur after the <xref:System.Timers.Timer.Dispose%2A> or <xref:System.Timers.Timer.Stop%2A> method has been called or after the <xref:System.Timers.Timer.Enabled%2A> property has been set to `false`, because the signal to raise the <xref:System.Timers.Timer.Elapsed> event is always queued for execution on a thread pool thread.</span></span> <span data-ttu-id="f5863-140">Una manera de resolver esta condición de carrera es establecer una marca que indica el controlador de eventos para el <xref:System.Timers.Timer.Elapsed> evento omita algunos eventos posteriores.</span><span class="sxs-lookup"><span data-stu-id="f5863-140">One way to resolve this race condition is to set a flag that tells the event handler for the <xref:System.Timers.Timer.Elapsed> event to ignore subsequent events.</span></span>  
  
 <span data-ttu-id="f5863-141">Si usa el <xref:System.Timers.Timer?displayProperty=nameWithType> clase con un elemento de la interfaz de usuario, como un formulario o control, sin colocar el temporizador en ese elemento de la interfaz de usuario, asignar el formulario o control que contiene el <xref:System.Timers.Timer> a la <xref:System.Timers.Timer.SynchronizingObject%2A> propiedad, por lo que el evento se calculan las referencias para el subproceso de interfaz de usuario.</span><span class="sxs-lookup"><span data-stu-id="f5863-141">If you use the <xref:System.Timers.Timer?displayProperty=nameWithType> class with a user interface element, such as a form or control, without placing the timer on that user interface element, assign the form or control that contains the <xref:System.Timers.Timer> to the <xref:System.Timers.Timer.SynchronizingObject%2A> property, so that the event is marshaled to the user interface thread.</span></span>  
  
 <span data-ttu-id="f5863-142">Para obtener una lista de valores de propiedad predeterminados para una instancia de <xref:System.Timers.Timer>, consulte el <xref:System.Timers.Timer.%23ctor%2A> constructor.</span><span class="sxs-lookup"><span data-stu-id="f5863-142">For a list of default property values for an instance of <xref:System.Timers.Timer>, see the <xref:System.Timers.Timer.%23ctor%2A> constructor.</span></span>  
  
> [!TIP]
>  <span data-ttu-id="f5863-143">Tenga en cuenta que .NET incluye cuatro clases denominadas `Timer`, cada una de la que ofrece una funcionalidad diferente:</span><span class="sxs-lookup"><span data-stu-id="f5863-143">Be aware that .NET includes four classes named `Timer`, each of which offers different functionality:</span></span>  
>   
> - <span data-ttu-id="f5863-144"><xref:System.Timers.Timer?displayProperty=nameWithType> (este tema): se desencadena un evento a intervalos regulares.</span><span class="sxs-lookup"><span data-stu-id="f5863-144"><xref:System.Timers.Timer?displayProperty=nameWithType> (this topic): fires an event at regular intervals.</span></span> <span data-ttu-id="f5863-145">La clase está diseñada para usarla como basada en un servidor o componente del servicio en un entorno multiproceso; no tiene ninguna interfaz de usuario y no es visible en tiempo de ejecución.</span><span class="sxs-lookup"><span data-stu-id="f5863-145">The class is intended for use as a server-based or service component in a multithreaded environment; it has no user interface and is not visible at runtime.</span></span>  
> - <span data-ttu-id="f5863-146"><xref:System.Threading.Timer?displayProperty=nameWithType>: ejecuta un método de devolución de llamada solo en un subproceso del grupo a intervalos regulares.</span><span class="sxs-lookup"><span data-stu-id="f5863-146"><xref:System.Threading.Timer?displayProperty=nameWithType>: executes a single callback method on a thread pool thread at regular intervals.</span></span> <span data-ttu-id="f5863-147">Se define el método de devolución de llamada cuando el temporizador se crea una instancia y no se puede cambiar.</span><span class="sxs-lookup"><span data-stu-id="f5863-147">The callback method is defined when the timer is instantiated and cannot be changed.</span></span> <span data-ttu-id="f5863-148">Al igual que el <xref:System.Timers.Timer?displayProperty=nameWithType> (clase), esta clase está pensada para su uso como un componente basado en servidor o el servicio en un entorno multiproceso; no tiene ninguna interfaz de usuario y no es visible en tiempo de ejecución.</span><span class="sxs-lookup"><span data-stu-id="f5863-148">Like the <xref:System.Timers.Timer?displayProperty=nameWithType> class, this class is intended for use as a server-based or service component in a multithreaded environment; it has no user interface and is not visible at runtime.</span></span>  
> - <span data-ttu-id="f5863-149"><xref:System.Windows.Forms.Timer?displayProperty=nameWithType> (Solo en .NET framework): un componente de Windows Forms que se desencadena un evento a intervalos regulares.</span><span class="sxs-lookup"><span data-stu-id="f5863-149"><xref:System.Windows.Forms.Timer?displayProperty=nameWithType> (.NET Framework only): a Windows Forms component that fires an event at regular intervals.</span></span> <span data-ttu-id="f5863-150">El componente no tiene ninguna interfaz de usuario y está diseñado para su uso en un entorno de un único subproceso.</span><span class="sxs-lookup"><span data-stu-id="f5863-150">The component has no user interface and is designed for use in a single-threaded environment.</span></span>  
> - <span data-ttu-id="f5863-151"><xref:System.Web.UI.Timer?displayProperty=nameWithType> (Solo en .NET framework): un componente ASP.NET que realiza postback de página web asincrónicos o sincrónicos a intervalos regulares.</span><span class="sxs-lookup"><span data-stu-id="f5863-151"><xref:System.Web.UI.Timer?displayProperty=nameWithType> (.NET Framework only): an ASP.NET component that performs asynchronous or synchronous web page postbacks at a regular interval.</span></span>  

## Examples  
 <span data-ttu-id="f5863-152">El ejemplo siguiente crea un `System.Timers.Timer` objeto que se activa su <xref:System.Timers.Timer.Elapsed?displayProperty=nameWithType> evento cada dos segundos (2.000 milisegundos), configura un controlador de eventos para el evento e inicia el temporizador.</span><span class="sxs-lookup"><span data-stu-id="f5863-152">The following example instantiates a `System.Timers.Timer` object that fires its <xref:System.Timers.Timer.Elapsed?displayProperty=nameWithType> event every two seconds (2,000 milliseconds), sets up an event handler for the  event, and starts the timer.</span></span> <span data-ttu-id="f5863-153">El controlador de eventos muestra el valor de la <xref:System.Timers.ElapsedEventArgs.SignalTime%2A?displayProperty=nameWithType> propiedad cada vez que se genera.</span><span class="sxs-lookup"><span data-stu-id="f5863-153">The event handler displays the value of the <xref:System.Timers.ElapsedEventArgs.SignalTime%2A?displayProperty=nameWithType> property each time it is raised.</span></span>  
  
 [!code-csharp[System.Timers.Timer#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.timers.timer/cs/timer2a.cs#2)]
 [!code-vb[System.Timers.Timer#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.timers.timer/vb/timer2a.vb#2)]  
  
 ]]></format>
    </remarks>
    <threadsafe>
      <span data-ttu-id="f5863-154">Cualquier público <see langword="static" /> miembros de este tipo son seguros para subprocesos.</span>
      <span class="sxs-lookup">
        <span data-stu-id="f5863-154">Any public <see langword="static" /> members of this type are thread safe.</span>
      </span>
      <span data-ttu-id="f5863-155">No se garantiza que los miembros de instancias sean seguros para la ejecución de subprocesos.</span>
      <span class="sxs-lookup">
        <span data-stu-id="f5863-155">Any instance members are not guaranteed to be thread safe.</span>
      </span>
    </threadsafe>
    <altmember cref="P:System.Timers.Timer.AutoReset" />
    <altmember cref="P:System.Timers.Timer.Interval" />
    <altmember cref="E:System.Timers.Timer.Elapsed" />
    <altmember cref="M:System.Timers.Timer.#ctor" />
    <altmember cref="T:System.Threading.Timer" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="f5863-156">Inicializa una nueva instancia de la clase <see cref="T:System.Timers.Timer" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f5863-156">Initializes a new instance of the <see cref="T:System.Timers.Timer" /> class.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Timer ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Timers.Timer.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Timer();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="f5863-157">Inicializa una nueva instancia de la clase <see cref="T:System.Timers.Timer" /> y establece todas las propiedades en sus valores iniciales.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f5863-157">Initializes a new instance of the <see cref="T:System.Timers.Timer" /> class, and sets all the properties to their initial values.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f5863-158">La siguiente tabla muestra los valores de propiedad iniciales para una instancia de <xref:System.Timers.Timer>.</span><span class="sxs-lookup"><span data-stu-id="f5863-158">The following table shows initial property values for an instance of <xref:System.Timers.Timer>.</span></span>  
  
|<span data-ttu-id="f5863-159">Propiedad.</span><span class="sxs-lookup"><span data-stu-id="f5863-159">Property</span></span>|<span data-ttu-id="f5863-160">Valor inicial</span><span class="sxs-lookup"><span data-stu-id="f5863-160">Initial value</span></span>|  
|--------------|-------------------|  
|<xref:System.Timers.Timer.AutoReset%2A>|`true`|  
|<xref:System.Timers.Timer.Enabled%2A>|`false`|  
|<xref:System.Timers.Timer.Interval%2A>|<span data-ttu-id="f5863-161">100 milisegundos</span><span class="sxs-lookup"><span data-stu-id="f5863-161">100 milliseconds</span></span>|  
|<xref:System.Timers.Timer.SynchronizingObject%2A>|<span data-ttu-id="f5863-162">Referencia nula (`Nothing` en Visual Basic).</span><span class="sxs-lookup"><span data-stu-id="f5863-162">A null reference (`Nothing` in Visual Basic).</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="f5863-163">El ejemplo siguiente crea un <xref:System.Timers.Timer> objeto que se activa su <xref:System.Timers.Timer.Elapsed?displayProperty=nameWithType> evento cada dos segundos (2000 milisegundos), configura un controlador de eventos para el evento e inicia el temporizador.</span><span class="sxs-lookup"><span data-stu-id="f5863-163">The following example instantiates a <xref:System.Timers.Timer> object that fires its <xref:System.Timers.Timer.Elapsed?displayProperty=nameWithType> event every two seconds (2000 milliseconds), sets up an event handler for the event, and starts the timer.</span></span> <span data-ttu-id="f5863-164">El controlador de eventos muestra el valor de la <xref:System.Timers.ElapsedEventArgs.SignalTime%2A?displayProperty=nameWithType> propiedad cada vez que se genera.</span><span class="sxs-lookup"><span data-stu-id="f5863-164">The event handler displays the value of the <xref:System.Timers.ElapsedEventArgs.SignalTime%2A?displayProperty=nameWithType> property each time it is raised.</span></span>  
  
 [!code-cpp[System.Timers.Timer#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.timers.timer/cpp/timer1.cpp#1)]
 [!code-csharp[System.Timers.Timer#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.timers.timer/cs/timer1.cs#1)]
 [!code-vb[System.Timers.Timer#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.timers.timer/vb/timer1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Timers.Timer.AutoReset" />
        <altmember cref="P:System.Timers.Timer.Enabled" />
        <altmember cref="P:System.Timers.Timer.Interval" />
        <altmember cref="P:System.Timers.Timer.SynchronizingObject" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Timer (double interval);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(float64 interval) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Timers.Timer.#ctor(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (interval As Double)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Timer(double interval);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="interval" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="interval">
          <span data-ttu-id="f5863-165">Tiempo, en milisegundos, entre eventos.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f5863-165">The time, in milliseconds, between events.</span>
          </span>
          <span data-ttu-id="f5863-166">Este valor debe ser mayor que cero y menor o igual que <see cref="F:System.Int32.MaxValue" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f5863-166">The value must be greater than zero and less than or equal to <see cref="F:System.Int32.MaxValue" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="f5863-167">Inicializa una nueva instancia de la clase <see cref="T:System.Timers.Timer" /> y establece la propiedad <see cref="P:System.Timers.Timer.Interval" /> en el número de milisegundos especificado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f5863-167">Initializes a new instance of the <see cref="T:System.Timers.Timer" /> class, and sets the <see cref="P:System.Timers.Timer.Interval" /> property to the specified number of milliseconds.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f5863-168">Este constructor establece la <xref:System.Timers.Timer.Interval%2A> propiedad de la nueva instancia de temporizador, pero no habilita el temporizador.</span><span class="sxs-lookup"><span data-stu-id="f5863-168">This constructor sets the <xref:System.Timers.Timer.Interval%2A> property of the new timer instance, but does not enable the timer.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f5863-169">El ejemplo siguiente crea un <xref:System.Timers.Timer> objeto que se activa su <xref:System.Timers.Timer.Elapsed?displayProperty=nameWithType> evento cada dos segundos (2000 milisegundos), configura un controlador de eventos para el evento e inicia el temporizador.</span><span class="sxs-lookup"><span data-stu-id="f5863-169">The following example instantiates a <xref:System.Timers.Timer> object that fires its <xref:System.Timers.Timer.Elapsed?displayProperty=nameWithType> event every two seconds (2000 milliseconds), sets up an event handler for the event, and starts the timer.</span></span> <span data-ttu-id="f5863-170">El controlador de eventos muestra el valor de la <xref:System.Timers.ElapsedEventArgs.SignalTime%2A?displayProperty=nameWithType> propiedad cada vez que se genera.</span><span class="sxs-lookup"><span data-stu-id="f5863-170">The event handler displays the value of the <xref:System.Timers.ElapsedEventArgs.SignalTime%2A?displayProperty=nameWithType> property each time it is raised.</span></span>  
  
 [!code-csharp[System.Timers.Timer#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.timers.timer/cs/AsyncHandlerEx1.cs#3)]
 [!code-vb[System.Timers.Timer#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.timers.timer/vb/AsyncHandlerEx1.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="f5863-171">El valor del parámetro <paramref name="interval" /> es menor o igual a cero, o mayor que <see cref="F:System.Int32.MaxValue" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f5863-171">The value of the <paramref name="interval" /> parameter is less than or equal to zero, or greater than <see cref="F:System.Int32.MaxValue" />.</span>
          </span>
        </exception>
        <altmember cref="P:System.Timers.Timer.Interval" />
      </Docs>
    </Member>
    <Member MemberName="AutoReset">
      <MemberSignature Language="C#" Value="public bool AutoReset { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AutoReset" />
      <MemberSignature Language="DocId" Value="P:System.Timers.Timer.AutoReset" />
      <MemberSignature Language="VB.NET" Value="Public Property AutoReset As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool AutoReset { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Behavior")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Timers.TimersDescription("Indicates whether the timer will be restarted when it is enabled.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="f5863-172">Obtiene o establece un valor booleano que indica si <see cref="T:System.Timers.Timer" /> debe generar el evento <see cref="E:System.Timers.Timer.Elapsed" /> solo una vez (<see langword="false" />) o repetidamente (<see langword="true" />).</span>
          <span class="sxs-lookup">
            <span data-stu-id="f5863-172">Gets or sets a Boolean indicating whether the <see cref="T:System.Timers.Timer" /> should raise the <see cref="E:System.Timers.Timer.Elapsed" /> event only once (<see langword="false" />) or repeatedly (<see langword="true" />).</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="f5863-173">Es <see langword="true" /> si <see cref="T:System.Timers.Timer" /> debe generar el evento <see cref="E:System.Timers.Timer.Elapsed" /> cada vez que transcurre el intervalo; es <see langword="false" /> si debe generar el evento <see cref="E:System.Timers.Timer.Elapsed" /> solo una vez, cuando el intervalo transcurre por primera vez.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f5863-173">
              <see langword="true" /> if the <see cref="T:System.Timers.Timer" /> should raise the <see cref="E:System.Timers.Timer.Elapsed" /> event each time the interval elapses; <see langword="false" /> if it should raise the <see cref="E:System.Timers.Timer.Elapsed" /> event only once, after the first time the interval elapses.</span>
          </span>
          <span data-ttu-id="f5863-174">El valor predeterminado es <see langword="true" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f5863-174">The default is <see langword="true" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f5863-175">Si el <xref:System.Timers.Timer> ya está habilitado cuando el <xref:System.Timers.Timer.Start%2A> se llama al método, el intervalo se restablece.</span><span class="sxs-lookup"><span data-stu-id="f5863-175">If the <xref:System.Timers.Timer> is already enabled when the <xref:System.Timers.Timer.Start%2A> method is called, the interval is reset.</span></span> <span data-ttu-id="f5863-176">Si <xref:System.Timers.Timer.AutoReset%2A> es `false`, el <xref:System.Timers.Timer.Start%2A> debe llamar al método para iniciar el recuento de nuevo.</span><span class="sxs-lookup"><span data-stu-id="f5863-176">If <xref:System.Timers.Timer.AutoReset%2A> is `false`, the <xref:System.Timers.Timer.Start%2A> method must be called in order to start the count again.</span></span>  
  
 <span data-ttu-id="f5863-177">Restablecer el intervalo afecta cuando el <xref:System.Timers.Timer.Elapsed> evento se desencadena.</span><span class="sxs-lookup"><span data-stu-id="f5863-177">Resetting the interval affects when the <xref:System.Timers.Timer.Elapsed> event is raised.</span></span> <span data-ttu-id="f5863-178">Por ejemplo, si establece el intervalo en 5 segundos y, a continuación, establezca el <xref:System.Timers.Timer.Enabled%2A> propiedad `true`, el recuento se inicia en el momento <xref:System.Timers.Timer.Enabled%2A> se establece.</span><span class="sxs-lookup"><span data-stu-id="f5863-178">For example, if you set the interval to 5 seconds and then set the <xref:System.Timers.Timer.Enabled%2A> property to `true`, the count starts at the time <xref:System.Timers.Timer.Enabled%2A> is set.</span></span> <span data-ttu-id="f5863-179">Si restablece el intervalo en 10 segundos cuando el recuento es de 3 segundos, el <xref:System.Timers.Timer.Elapsed> evento se desencadena por primera vez 13 segundos después de la <xref:System.Timers.Timer.Enabled%2A> propiedad se estableció en `true`.</span><span class="sxs-lookup"><span data-stu-id="f5863-179">If you reset the interval to 10 seconds when the count is 3 seconds, the <xref:System.Timers.Timer.Elapsed> event is raised for the first time 13 seconds after the <xref:System.Timers.Timer.Enabled%2A> property was set to `true`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f5863-180">En el ejemplo siguiente se crea un <xref:System.Timers.Timer> cuyo <xref:System.Timers.Timer.Elapsed> evento se desencadena tras 1,5 segundos.</span><span class="sxs-lookup"><span data-stu-id="f5863-180">The following example creates a <xref:System.Timers.Timer> whose <xref:System.Timers.Timer.Elapsed> event fires after 1.5 seconds.</span></span> <span data-ttu-id="f5863-181">Su controlador de eventos, a continuación, muestra "¡Hello World!"</span><span class="sxs-lookup"><span data-stu-id="f5863-181">Its event handler then displays "Hello World!"</span></span> <span data-ttu-id="f5863-182">en la consola.</span><span class="sxs-lookup"><span data-stu-id="f5863-182">on the console.</span></span>  
  
 [!code-cpp[Classic Timer.Timer1 Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Timer.Timer1 Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Timer.Timer1 Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Timer.Timer1 Example/CS/source.cs#1)]
 [!code-vb[Classic Timer.Timer1 Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Timer.Timer1 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Timers.Timer.Interval" />
        <altmember cref="P:System.Timers.Timer.Enabled" />
        <altmember cref="M:System.Timers.Timer.Start" />
        <altmember cref="E:System.Timers.Timer.Elapsed" />
      </Docs>
    </Member>
    <Member MemberName="BeginInit">
      <MemberSignature Language="C#" Value="public void BeginInit ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void BeginInit() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Timers.Timer.BeginInit" />
      <MemberSignature Language="VB.NET" Value="Public Sub BeginInit ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void BeginInit();" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.ComponentModel.ISupportInitialize.BeginInit</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="f5863-183">Comienza la inicialización en tiempo de ejecución de un objeto <see cref="T:System.Timers.Timer" /> que se usa en un formulario o que lo usa otro componente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f5863-183">Begins the run-time initialization of a <see cref="T:System.Timers.Timer" /> that is used on a form or by another component.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f5863-184">El [!INCLUDE[vsprvslong](~/includes/vsprvslong-md.md)] diseño entorno usa este método para comenzar la inicialización de un componente que se utiliza en un formulario o por otro componente.</span><span class="sxs-lookup"><span data-stu-id="f5863-184">The [!INCLUDE[vsprvslong](~/includes/vsprvslong-md.md)] design environment uses this method to start the initialization of a component that is used on a form or by another component.</span></span> <span data-ttu-id="f5863-185">El <xref:System.Timers.Timer.EndInit%2A> método termina la inicialización.</span><span class="sxs-lookup"><span data-stu-id="f5863-185">The <xref:System.Timers.Timer.EndInit%2A> method ends the initialization.</span></span> <span data-ttu-id="f5863-186">Mediante el <xref:System.Timers.Timer.BeginInit%2A> y <xref:System.Timers.Timer.EndInit%2A> métodos impide que el control que se va a usar antes de que esté totalmente inicializado.</span><span class="sxs-lookup"><span data-stu-id="f5863-186">Using the <xref:System.Timers.Timer.BeginInit%2A> and <xref:System.Timers.Timer.EndInit%2A> methods prevents the control from being used before it is fully initialized.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Timers.Timer.Enabled" />
        <altmember cref="M:System.Timers.Timer.EndInit" />
        <altmember cref="P:System.Timers.Timer.Interval" />
      </Docs>
    </Member>
    <Member MemberName="Close">
      <MemberSignature Language="C#" Value="public void Close ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Close() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Timers.Timer.Close" />
      <MemberSignature Language="VB.NET" Value="Public Sub Close ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Close();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="f5863-187">Libera los recursos que usa <see cref="T:System.Timers.Timer" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f5863-187">Releases the resources used by the <see cref="T:System.Timers.Timer" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f5863-188">El <xref:System.Timers.Timer.Close%2A> método llama a su vez el `Dispose` método.</span><span class="sxs-lookup"><span data-stu-id="f5863-188">The <xref:System.Timers.Timer.Close%2A> method in turn calls the `Dispose` method.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected override void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Timers.Timer.Dispose(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub Dispose (disposing As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void Dispose(bool disposing);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing">
          <span data-ttu-id="f5863-189">Es <see langword="true" /> para liberar tanto recursos administrados como no administrados; es <see langword="false" /> para liberar únicamente recursos no administrados.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f5863-189">
              <see langword="true" /> to release both managed and unmanaged resources; <see langword="false" /> to release only unmanaged resources.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="f5863-190">Libera todos los recursos que usa la clase <see cref="T:System.Timers.Timer" /> actual.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f5863-190">Releases all resources used by the current <see cref="T:System.Timers.Timer" />.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Elapsed">
      <MemberSignature Language="C#" Value="public event System.Timers.ElapsedEventHandler Elapsed;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Timers.ElapsedEventHandler Elapsed" />
      <MemberSignature Language="DocId" Value="E:System.Timers.Timer.Elapsed" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Elapsed As ElapsedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Timers::ElapsedEventHandler ^ Elapsed;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Behavior")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Timers.TimersDescription("Occurs when the Interval has elapsed.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Timers.ElapsedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="f5863-191">Se produce cuando transcurre el intervalo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f5863-191">Occurs when the interval elapses.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f5863-192">El <xref:System.Timers.Timer.Elapsed> evento se desencadena si el <xref:System.Timers.Timer.Enabled%2A> propiedad es `true` y el intervalo de tiempo (en milisegundos) definido por el <xref:System.Timers.Timer.Interval%2A> transcurra de propiedad.</span><span class="sxs-lookup"><span data-stu-id="f5863-192">The <xref:System.Timers.Timer.Elapsed> event is raised if the <xref:System.Timers.Timer.Enabled%2A> property is `true` and the time interval (in milliseconds) defined by the <xref:System.Timers.Timer.Interval%2A> property elapses.</span></span> <span data-ttu-id="f5863-193">Si el <xref:System.Timers.Timer.AutoReset%2A> propiedad es `true`, el evento se produce repetidamente en un intervalo definido por el <xref:System.Timers.Timer.Interval%2A> propiedad; en caso contrario, se genera el evento solo una vez, la primera vez el <xref:System.Timers.Timer.Interval%2A> valor transcurra.</span><span class="sxs-lookup"><span data-stu-id="f5863-193">If the <xref:System.Timers.Timer.AutoReset%2A> property is `true`, the event is raised repeatedly at an interval defined by the <xref:System.Timers.Timer.Interval%2A> property; otherwise, the event is raised only once, the first time the <xref:System.Timers.Timer.Interval%2A> value elapses.</span></span>  
  
 <span data-ttu-id="f5863-194">Si <xref:System.Timers.Timer.Interval%2A> se establece después de la <xref:System.Timers.Timer> ha iniciado, se restablece el recuento.</span><span class="sxs-lookup"><span data-stu-id="f5863-194">If <xref:System.Timers.Timer.Interval%2A> is set after the <xref:System.Timers.Timer> has started, the count is reset.</span></span> <span data-ttu-id="f5863-195">Por ejemplo, si establece el intervalo en 5 segundos y, a continuación, establecer <xref:System.Timers.Timer.Enabled%2A> a `true`, el recuento se inicia en el momento <xref:System.Timers.Timer.Enabled%2A> se establece.</span><span class="sxs-lookup"><span data-stu-id="f5863-195">For example, if you set the interval to 5 seconds and then set <xref:System.Timers.Timer.Enabled%2A> to `true`, the count starts at the time <xref:System.Timers.Timer.Enabled%2A> is set.</span></span> <span data-ttu-id="f5863-196">Si restablece el intervalo en 10 segundos cuando el recuento es 3 segundos, el <xref:System.Timers.Timer.Elapsed> evento se desencadena por primera vez 13 segundos después de <xref:System.Timers.Timer.Enabled%2A> se estableció en `true`.</span><span class="sxs-lookup"><span data-stu-id="f5863-196">If you reset the interval to 10 seconds when count is 3 seconds, the <xref:System.Timers.Timer.Elapsed> event is raised for the first time 13 seconds after <xref:System.Timers.Timer.Enabled%2A> was set to `true`.</span></span>  
  
 <span data-ttu-id="f5863-197">Si el <xref:System.Timers.Timer.SynchronizingObject%2A> propiedad es `null`, <xref:System.Timers.Timer.Elapsed> evento se desencadena en un <xref:System.Threading.ThreadPool> subproceso.</span><span class="sxs-lookup"><span data-stu-id="f5863-197">If the <xref:System.Timers.Timer.SynchronizingObject%2A> property is `null`,the <xref:System.Timers.Timer.Elapsed> event is raised on a <xref:System.Threading.ThreadPool> thread.</span></span> <span data-ttu-id="f5863-198">Si el procesamiento de la <xref:System.Timers.Timer.Elapsed> evento dura más de <xref:System.Timers.Timer.Interval%2A>, el evento se puede generar de nuevo en otro <xref:System.Threading.ThreadPool> subproceso.</span><span class="sxs-lookup"><span data-stu-id="f5863-198">If the processing of the <xref:System.Timers.Timer.Elapsed> event lasts longer than <xref:System.Timers.Timer.Interval%2A>, the event might be raised again on another <xref:System.Threading.ThreadPool> thread.</span></span> <span data-ttu-id="f5863-199">En esta situación, el controlador de eventos debe ser de reentrada.</span><span class="sxs-lookup"><span data-stu-id="f5863-199">In this situation, the event handler should be reentrant.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="f5863-200">El método de control de eventos puede ejecutarse en un subproceso al mismo tiempo que otro subproceso llama a la <xref:System.Timers.Timer.Stop%2A> método o establece la <xref:System.Timers.Timer.Enabled%2A> propiedad `false`.</span><span class="sxs-lookup"><span data-stu-id="f5863-200">The event-handling method might run on one thread at the same time that another thread calls the <xref:System.Timers.Timer.Stop%2A> method or sets the <xref:System.Timers.Timer.Enabled%2A> property to `false`.</span></span> <span data-ttu-id="f5863-201">Esto podría dar lugar a la <xref:System.Timers.Timer.Elapsed> evento que se provoca cuando se detiene el temporizador.</span><span class="sxs-lookup"><span data-stu-id="f5863-201">This might result in the <xref:System.Timers.Timer.Elapsed> event being raised after the timer is stopped.</span></span> <span data-ttu-id="f5863-202">El código de ejemplo para el <xref:System.Timers.Timer.Stop%2A> método muestra una manera de evitar esta condición de carrera.</span><span class="sxs-lookup"><span data-stu-id="f5863-202">The example code for the <xref:System.Timers.Timer.Stop%2A> method shows one way to avoid this race condition.</span></span>  
  
 <span data-ttu-id="f5863-203">Aunque <xref:System.Timers.Timer.SynchronizingObject%2A> no es `null`, <xref:System.Timers.Timer.Elapsed> eventos pueden producirse después de la <xref:System.Timers.Timer.Dispose%2A> o <xref:System.Timers.Timer.Stop%2A> ha llamado al método o después la <xref:System.Timers.Timer.Enabled%2A> propiedad se ha establecido en `false`, porque la señal para generar el <xref:System.Timers.Timer.Elapsed> eventos siempre está en cola para su ejecución en un subproceso del grupo.</span><span class="sxs-lookup"><span data-stu-id="f5863-203">Even if <xref:System.Timers.Timer.SynchronizingObject%2A> is not `null`, <xref:System.Timers.Timer.Elapsed> events can occur after the <xref:System.Timers.Timer.Dispose%2A> or <xref:System.Timers.Timer.Stop%2A> method has been called or after the <xref:System.Timers.Timer.Enabled%2A> property has been set to `false`, because the signal to raise the <xref:System.Timers.Timer.Elapsed> event is always queued for execution on a thread pool thread.</span></span> <span data-ttu-id="f5863-204">Una manera de resolver esta condición de carrera es establecer una marca que indica el controlador de eventos para el <xref:System.Timers.Timer.Elapsed> evento omita algunos eventos posteriores.</span><span class="sxs-lookup"><span data-stu-id="f5863-204">One way to resolve this race condition is to set a flag that tells the event handler for the <xref:System.Timers.Timer.Elapsed> event to ignore subsequent events.</span></span>  
  
 <span data-ttu-id="f5863-205">El <xref:System.Timers.Timer> componente detecta y suprime todas las excepciones producidas por controladores de eventos para el <xref:System.Timers.Timer.Elapsed> eventos.</span><span class="sxs-lookup"><span data-stu-id="f5863-205">The <xref:System.Timers.Timer> component catches and suppresses all exceptions thrown by event handlers for the <xref:System.Timers.Timer.Elapsed> event.</span></span> <span data-ttu-id="f5863-206">Este comportamiento está sujeta a cambios en futuras versiones de .NET Framework.</span><span class="sxs-lookup"><span data-stu-id="f5863-206">This behavior is subject to change in future releases of the .NET Framework.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f5863-207">El ejemplo siguiente crea un <xref:System.Timers.Timer> objeto que se activa su <xref:System.Timers.Timer.Elapsed?displayProperty=nameWithType> evento cada dos segundos (2000 milisegundos), configura un controlador de eventos para el evento e inicia el temporizador.</span><span class="sxs-lookup"><span data-stu-id="f5863-207">The following example instantiates a <xref:System.Timers.Timer> object that fires its <xref:System.Timers.Timer.Elapsed?displayProperty=nameWithType> event every two seconds (2000 milliseconds), sets up an event handler for the event, and starts the timer.</span></span> <span data-ttu-id="f5863-208">El controlador de eventos muestra el valor de la <xref:System.Timers.ElapsedEventArgs.SignalTime%2A?displayProperty=nameWithType> propiedad cada vez que se genera.</span><span class="sxs-lookup"><span data-stu-id="f5863-208">The event handler displays the value of the <xref:System.Timers.ElapsedEventArgs.SignalTime%2A?displayProperty=nameWithType> property each time it is raised.</span></span>  
  
 [!code-cpp[System.Timers.Timer#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.timers.timer/cpp/timer1.cpp#1)]
 [!code-csharp[System.Timers.Timer#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.timers.timer/cs/timer1.cs#1)]
 [!code-vb[System.Timers.Timer#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.timers.timer/vb/timer1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Timers.Timer.Interval" />
        <altmember cref="P:System.Timers.Timer.AutoReset" />
        <altmember cref="E:System.Timers.Timer.Elapsed" />
        <altmember cref="T:System.Timers.ElapsedEventArgs" />
        <altmember cref="T:System.Timers.ElapsedEventHandler" />
        <altmember cref="P:System.Timers.Timer.Enabled" />
      </Docs>
    </Member>
    <Member MemberName="Enabled">
      <MemberSignature Language="C#" Value="public bool Enabled { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Enabled" />
      <MemberSignature Language="DocId" Value="P:System.Timers.Timer.Enabled" />
      <MemberSignature Language="VB.NET" Value="Public Property Enabled As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool Enabled { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Behavior")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Timers.TimersDescription("Indicates whether the timer is enabled to fire events at a defined interval.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="f5863-209">Obtiene o establece un valor que indica si <see cref="T:System.Timers.Timer" /> debe generar el evento <see cref="E:System.Timers.Timer.Elapsed" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f5863-209">Gets or sets a value indicating whether the <see cref="T:System.Timers.Timer" /> should raise the <see cref="E:System.Timers.Timer.Elapsed" /> event.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="f5863-210">Es <see langword="true" /> si <see cref="T:System.Timers.Timer" /> debe generar el evento <see cref="E:System.Timers.Timer.Elapsed" />; en caso contrario, es <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f5863-210">
              <see langword="true" /> if the <see cref="T:System.Timers.Timer" /> should raise the <see cref="E:System.Timers.Timer.Elapsed" /> event; otherwise, <see langword="false" />.</span>
          </span>
          <span data-ttu-id="f5863-211">El valor predeterminado es <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f5863-211">The default is <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f5863-212">Establecer <xref:System.Timers.Timer.Enabled%2A> a `true` es igual que llamar a <xref:System.Timers.Timer.Start%2A>, durante la instalación <xref:System.Timers.Timer.Enabled%2A> a `false` es igual que llamar a <xref:System.Timers.Timer.Stop%2A>.</span><span class="sxs-lookup"><span data-stu-id="f5863-212">Setting <xref:System.Timers.Timer.Enabled%2A> to `true` is the same as calling <xref:System.Timers.Timer.Start%2A>, while setting <xref:System.Timers.Timer.Enabled%2A> to `false` is the same as calling <xref:System.Timers.Timer.Stop%2A>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="f5863-213">La señal para generar el <xref:System.Timers.Timer.Elapsed> eventos siempre está en cola para su ejecución en un <xref:System.Threading.ThreadPool> subproceso.</span><span class="sxs-lookup"><span data-stu-id="f5863-213">The signal to raise the <xref:System.Timers.Timer.Elapsed> event is always queued for execution on a <xref:System.Threading.ThreadPool> thread.</span></span> <span data-ttu-id="f5863-214">Esto podría dar lugar a la <xref:System.Timers.Timer.Elapsed> evento que se provoca después de la <xref:System.Timers.Timer.Enabled%2A> propiedad está establecida en `false`.</span><span class="sxs-lookup"><span data-stu-id="f5863-214">This might result in the <xref:System.Timers.Timer.Elapsed> event being raised after the <xref:System.Timers.Timer.Enabled%2A> property is set to `false`.</span></span> <span data-ttu-id="f5863-215">El ejemplo de código para el <xref:System.Timers.Timer.Stop%2A> método muestra una manera de evitar esta condición de carrera.</span><span class="sxs-lookup"><span data-stu-id="f5863-215">The code example for the <xref:System.Timers.Timer.Stop%2A> method shows one way to work around this race condition.</span></span>  
  
 <span data-ttu-id="f5863-216">Si <xref:System.Timers.Timer.Enabled%2A> está establecido en `true` y <xref:System.Timers.Timer.AutoReset%2A> está establecido en `false`, el <xref:System.Timers.Timer> provoca la <xref:System.Timers.Timer.Elapsed> eventos una sola vez, la primera vez que el intervalo transcurre.</span><span class="sxs-lookup"><span data-stu-id="f5863-216">If <xref:System.Timers.Timer.Enabled%2A> is set to `true` and <xref:System.Timers.Timer.AutoReset%2A> is set to `false`, the <xref:System.Timers.Timer> raises the <xref:System.Timers.Timer.Elapsed> event only once, the first time the interval elapses.</span></span>  
  
 <span data-ttu-id="f5863-217">Si el intervalo se establece después de la <xref:System.Timers.Timer> ha iniciado, se restablece el recuento.</span><span class="sxs-lookup"><span data-stu-id="f5863-217">If the interval is set after the <xref:System.Timers.Timer> has started, the count is reset.</span></span> <span data-ttu-id="f5863-218">Por ejemplo, si establece el intervalo en 5 segundos y, a continuación, establezca el <xref:System.Timers.Timer.Enabled%2A> propiedad `true`, el recuento se inicia en el momento <xref:System.Timers.Timer.Enabled%2A> se establece.</span><span class="sxs-lookup"><span data-stu-id="f5863-218">For example, if you set the interval to 5 seconds and then set the <xref:System.Timers.Timer.Enabled%2A> property to `true`, the count starts at the time <xref:System.Timers.Timer.Enabled%2A> is set.</span></span> <span data-ttu-id="f5863-219">Si restablece el intervalo en 10 segundos cuando el recuento es 3 segundos, el <xref:System.Timers.Timer.Elapsed> evento se desencadena por primera vez 13 segundos después de <xref:System.Timers.Timer.Enabled%2A> se estableció en `true`.</span><span class="sxs-lookup"><span data-stu-id="f5863-219">If you reset the interval to 10 seconds when count is 3 seconds, the <xref:System.Timers.Timer.Elapsed> event is raised for the first time 13 seconds after <xref:System.Timers.Timer.Enabled%2A> was set to `true`.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="f5863-220">Algunos diseñadores visuales, como los de Microsoft Visual Studio, establezca el <xref:System.Timers.Timer.Enabled%2A> propiedad `true` al insertar un nuevo <xref:System.Timers.Timer>.</span><span class="sxs-lookup"><span data-stu-id="f5863-220">Some visual designers, such as those in Microsoft Visual Studio, set the <xref:System.Timers.Timer.Enabled%2A> property to `true` when inserting a new <xref:System.Timers.Timer>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f5863-221">El ejemplo siguiente crea un <xref:System.Timers.Timer> objeto que se activa su <xref:System.Timers.Timer.Elapsed?displayProperty=nameWithType> evento cada dos segundos (2000 milisegundos), configura un controlador de eventos para el evento e inicia el temporizador.</span><span class="sxs-lookup"><span data-stu-id="f5863-221">The following example instantiates a <xref:System.Timers.Timer> object that fires its <xref:System.Timers.Timer.Elapsed?displayProperty=nameWithType> event every two seconds (2000 milliseconds), sets up an event handler for the  event, and starts the timer.</span></span> <span data-ttu-id="f5863-222">El controlador de eventos muestra el valor de la <xref:System.Timers.ElapsedEventArgs.SignalTime%2A?displayProperty=nameWithType> propiedad cada vez que se genera.</span><span class="sxs-lookup"><span data-stu-id="f5863-222">The event handler displays the value of the <xref:System.Timers.ElapsedEventArgs.SignalTime%2A?displayProperty=nameWithType> property each time it is raised.</span></span>  
  
 [!code-cpp[System.Timers.Timer#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.timers.timer/cpp/timer1.cpp#1)]
 [!code-csharp[System.Timers.Timer#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.timers.timer/cs/timer1.cs#1)]
 [!code-vb[System.Timers.Timer#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.timers.timer/vb/timer1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="f5863-223">No se puede establecer esta propiedad porque se ha desechado el temporizador.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f5863-223">This property cannot be set because the timer has been disposed.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="f5863-224">La propiedad <see cref="P:System.Timers.Timer.Interval" /> se estableció en un valor mayor que <see cref="F:System.Int32.MaxValue" /> antes de que el temporizador estuviera habilitado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f5863-224">The <see cref="P:System.Timers.Timer.Interval" /> property was set to a value greater than <see cref="F:System.Int32.MaxValue" /> before the timer was enabled.</span>
          </span>
        </exception>
        <altmember cref="P:System.Timers.Timer.Interval" />
        <altmember cref="P:System.Timers.Timer.AutoReset" />
        <altmember cref="M:System.Timers.Timer.Start" />
        <altmember cref="M:System.Timers.Timer.Stop" />
        <altmember cref="E:System.Timers.Timer.Elapsed" />
      </Docs>
    </Member>
    <Member MemberName="EndInit">
      <MemberSignature Language="C#" Value="public void EndInit ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void EndInit() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Timers.Timer.EndInit" />
      <MemberSignature Language="VB.NET" Value="Public Sub EndInit ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void EndInit();" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.ComponentModel.ISupportInitialize.EndInit</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="f5863-225">Finaliza la inicialización en tiempo de ejecución de un objeto <see cref="T:System.Timers.Timer" /> que se usa en un formulario o que lo usa otro componente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f5863-225">Ends the run-time initialization of a <see cref="T:System.Timers.Timer" /> that is used on a form or by another component.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f5863-226">El [!INCLUDE[vsprvslong](~/includes/vsprvslong-md.md)] diseño entorno usa este método para finalizar la inicialización de un componente que se utiliza en un formulario o por otro componente.</span><span class="sxs-lookup"><span data-stu-id="f5863-226">The [!INCLUDE[vsprvslong](~/includes/vsprvslong-md.md)] design environment uses this method to end the initialization of a component that is used on a form or by another component.</span></span> <span data-ttu-id="f5863-227">El <xref:System.Timers.Timer.BeginInit%2A> método comienza la inicialización.</span><span class="sxs-lookup"><span data-stu-id="f5863-227">The <xref:System.Timers.Timer.BeginInit%2A> method starts the initialization.</span></span> <span data-ttu-id="f5863-228">Mediante el <xref:System.Timers.Timer.BeginInit%2A> y <xref:System.Timers.Timer.EndInit%2A> métodos impide que el control que se va a usar antes de que esté totalmente inicializado.</span><span class="sxs-lookup"><span data-stu-id="f5863-228">Using the <xref:System.Timers.Timer.BeginInit%2A> and <xref:System.Timers.Timer.EndInit%2A> methods prevents the control from being used before it is fully initialized.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Timers.Timer.BeginInit" />
        <altmember cref="P:System.Timers.Timer.Enabled" />
        <altmember cref="P:System.Timers.Timer.Interval" />
      </Docs>
    </Member>
    <Member MemberName="Interval">
      <MemberSignature Language="C#" Value="public double Interval { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float64 Interval" />
      <MemberSignature Language="DocId" Value="P:System.Timers.Timer.Interval" />
      <MemberSignature Language="VB.NET" Value="Public Property Interval As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property double Interval { double get(); void set(double value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Behavior")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(100)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.SettingsBindable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Timers.TimersDescription("The number of milliseconds between timer events.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="f5863-229">Obtiene o establece el intervalo, expresado en milisegundos, en el que se generará el evento <see cref="E:System.Timers.Timer.Elapsed" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f5863-229">Gets or sets the interval, expressed in milliseconds, at which to raise the <see cref="E:System.Timers.Timer.Elapsed" /> event.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="f5863-230">Tiempo, en milisegundos, entre eventos <see cref="E:System.Timers.Timer.Elapsed" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f5863-230">The time, in milliseconds, between <see cref="E:System.Timers.Timer.Elapsed" /> events.</span>
          </span>
          <span data-ttu-id="f5863-231">Este valor debe ser mayor que cero y menor o igual que <see cref="F:System.Int32.MaxValue" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f5863-231">The value must be greater than zero, and less than or equal to <see cref="F:System.Int32.MaxValue" />.</span>
          </span>
          <span data-ttu-id="f5863-232">El valor predeterminado es de 100 milisegundos.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f5863-232">The default is 100 milliseconds.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f5863-233">Usa el <xref:System.Timers.Timer.Interval%2A> propiedad para determinar la frecuencia con la que el <xref:System.Timers.Timer.Elapsed> desencadena el evento.</span><span class="sxs-lookup"><span data-stu-id="f5863-233">You use the <xref:System.Timers.Timer.Interval%2A> property to determine the frequency at which the <xref:System.Timers.Timer.Elapsed> event is fired.</span></span> <span data-ttu-id="f5863-234">Dado que la <xref:System.Timers.Timer> clase depende del reloj del sistema, tiene la misma resolución que el reloj del sistema.</span><span class="sxs-lookup"><span data-stu-id="f5863-234">Because the <xref:System.Timers.Timer> class depends on the system clock, it has the same resolution as the system clock.</span></span> <span data-ttu-id="f5863-235">Esto significa que la <xref:System.Timers.Timer.Elapsed> evento se desencadenará a un intervalo definido por la resolución del reloj del sistema si el <xref:System.Timers.Timer.Interval%2A> propiedad es menor que la resolución del reloj del sistema.</span><span class="sxs-lookup"><span data-stu-id="f5863-235">This means that the <xref:System.Timers.Timer.Elapsed> event will fire at an interval defined by the resolution of the system clock if the <xref:System.Timers.Timer.Interval%2A> property is less than the resolution of the system clock.</span></span> <span data-ttu-id="f5863-236">El ejemplo siguiente se establece la <xref:System.Timers.Timer.Interval%2A> propiedad de 5 milisegundos.</span><span class="sxs-lookup"><span data-stu-id="f5863-236">The following example sets the <xref:System.Timers.Timer.Interval%2A> property to 5 milliseconds.</span></span> <span data-ttu-id="f5863-237">Cuando se ejecuta en un [!INCLUDE[win7](~/includes/win7-md.md)] sistema cuyo reloj del sistema tiene una resolución de aproximadamente 15 milisegundos, que se desencadene el evento aproximadamente cada 15 milisegundos en lugar de cada 5 milisegundos.</span><span class="sxs-lookup"><span data-stu-id="f5863-237">When run on a [!INCLUDE[win7](~/includes/win7-md.md)] system whose system clock has a resolution of approximately 15 milliseconds, the event fires approximately every 15 milliseconds rather than every 5 milliseconds.</span></span>  
  
 [!code-csharp[System.Timers.Timer.Interval#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.timers.timer.interval/cs/interval2.cs#1)]
 [!code-vb[System.Timers.Timer.Interval#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.timers.timer.interval/vb/interval2.vb#1)]  
  
 <span data-ttu-id="f5863-238">Puede usar el código siguiente para determinar la resolución del reloj del sistema en el sistema actual:</span><span class="sxs-lookup"><span data-stu-id="f5863-238">You can use the following code to determine the resolution of the system clock on the current system:</span></span>  
  
 [!code-csharp[System.Timers.Timer.Interval#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.timers.timer.interval/cs/resolution1.cs#2)]
 [!code-vb[System.Timers.Timer.Interval#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.timers.timer.interval/vb/resolution1.vb#2)]  
  
 <span data-ttu-id="f5863-239">Si la aplicación requiere una resolución mayor que la ofrecida por la <xref:System.Timers.Timer> clase o el reloj del sistema, utilice los temporizadores de multimedia de alta resolución, consulte [Cómo: utilizar el temporizador de alta resolución](http://msdn.microsoft.com/library/aa964692.aspx).</span><span class="sxs-lookup"><span data-stu-id="f5863-239">If your app requires greater resolution than that offered by the <xref:System.Timers.Timer> class or the system clock, use the high-resolution multimedia timers; see [How to: Use the High-Resolution Timer](http://msdn.microsoft.com/library/aa964692.aspx).</span></span>  
  
 <span data-ttu-id="f5863-240">Si el intervalo se establece después de la <xref:System.Timers.Timer> ha iniciado, se restablece el recuento.</span><span class="sxs-lookup"><span data-stu-id="f5863-240">If the interval is set after the <xref:System.Timers.Timer> has started, the count is reset.</span></span> <span data-ttu-id="f5863-241">Por ejemplo, si establece el intervalo en 5 segundos y, a continuación, establezca el <xref:System.Timers.Timer.Enabled%2A> propiedad `true`, el recuento se inicia en el momento <xref:System.Timers.Timer.Enabled%2A> se establece.</span><span class="sxs-lookup"><span data-stu-id="f5863-241">For example, if you set the interval to 5 seconds and then set the <xref:System.Timers.Timer.Enabled%2A> property to `true`, the count starts at the time <xref:System.Timers.Timer.Enabled%2A> is set.</span></span> <span data-ttu-id="f5863-242">Si restablece el intervalo en 10 segundos cuando el recuento es 3 segundos, el <xref:System.Timers.Timer.Elapsed> evento se desencadena por primera vez 13 segundos después de <xref:System.Timers.Timer.Enabled%2A> se estableció en `true`.</span><span class="sxs-lookup"><span data-stu-id="f5863-242">If you reset the interval to 10 seconds when count is 3 seconds, the <xref:System.Timers.Timer.Elapsed> event is raised for the first time 13 seconds after <xref:System.Timers.Timer.Enabled%2A> was set to `true`.</span></span>  
  
 <span data-ttu-id="f5863-243">Si <xref:System.Timers.Timer.Enabled%2A> está establecido en `true` y <xref:System.Timers.Timer.AutoReset%2A> está establecido en `false`, el <xref:System.Timers.Timer> provoca la <xref:System.Timers.Timer.Elapsed> eventos una sola vez, la primera vez que el intervalo transcurre.</span><span class="sxs-lookup"><span data-stu-id="f5863-243">If <xref:System.Timers.Timer.Enabled%2A> is set to `true` and <xref:System.Timers.Timer.AutoReset%2A> is set to `false`, the <xref:System.Timers.Timer> raises the <xref:System.Timers.Timer.Elapsed> event only once, the first time the interval elapses.</span></span> <span data-ttu-id="f5863-244"><xref:System.Timers.Timer.Enabled%2A> a continuación, se establece en `false`.</span><span class="sxs-lookup"><span data-stu-id="f5863-244"><xref:System.Timers.Timer.Enabled%2A> is then set to `false`.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="f5863-245">Si <xref:System.Timers.Timer.Enabled%2A> y <xref:System.Timers.Timer.AutoReset%2A> están establecidos en `false`, y se habilitó anteriormente el temporizador, establecer el <xref:System.Timers.Timer.Interval%2A> propiedad causa el <xref:System.Timers.Timer.Elapsed> evento una vez, como si la <xref:System.Timers.Timer.Enabled%2A> propiedad hubiera establecido en `true`.</span><span class="sxs-lookup"><span data-stu-id="f5863-245">If <xref:System.Timers.Timer.Enabled%2A> and <xref:System.Timers.Timer.AutoReset%2A> are both set to `false`, and the timer has previously been enabled, setting the <xref:System.Timers.Timer.Interval%2A> property causes the <xref:System.Timers.Timer.Elapsed> event to be raised once, as if the <xref:System.Timers.Timer.Enabled%2A> property had been set to `true`.</span></span> <span data-ttu-id="f5863-246">Para establecer el intervalo sin que se produzca el evento, puede establecer temporalmente el <xref:System.Timers.Timer.Enabled%2A> propiedad a `true`, establezca el <xref:System.Timers.Timer.Interval%2A> propiedad en el intervalo de tiempo que desee y, a continuación, se establece inmediatamente la <xref:System.Timers.Timer.Enabled%2A> propiedad volver a `false`.</span><span class="sxs-lookup"><span data-stu-id="f5863-246">To set the interval without raising the event, you can temporarily set the <xref:System.Timers.Timer.Enabled%2A> property to `true`, set the <xref:System.Timers.Timer.Interval%2A> property to the desired time interval, and then immediately set the <xref:System.Timers.Timer.Enabled%2A> property back to `false`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f5863-247">El ejemplo siguiente crea un <xref:System.Timers.Timer> objeto que se activa su <xref:System.Timers.Timer.Elapsed?displayProperty=nameWithType> evento cada dos segundos (2000 milisegundos), configura un controlador de eventos para el evento e inicia el temporizador.</span><span class="sxs-lookup"><span data-stu-id="f5863-247">The following example instantiates a <xref:System.Timers.Timer> object that fires its <xref:System.Timers.Timer.Elapsed?displayProperty=nameWithType> event every two seconds (2000 milliseconds), sets up an event handler for the event, and starts the timer.</span></span> <span data-ttu-id="f5863-248">El controlador de eventos muestra el valor de la <xref:System.Timers.ElapsedEventArgs.SignalTime%2A?displayProperty=nameWithType> propiedad cada vez que se genera.</span><span class="sxs-lookup"><span data-stu-id="f5863-248">The event handler displays the value of the <xref:System.Timers.ElapsedEventArgs.SignalTime%2A?displayProperty=nameWithType> property each time it is raised.</span></span>  
  
 [!code-cpp[System.Timers.Timer#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.timers.timer/cpp/timer1.cpp#1)]
 [!code-csharp[System.Timers.Timer#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.timers.timer/cs/timer1.cs#1)]
 [!code-vb[System.Timers.Timer#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.timers.timer/vb/timer1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="f5863-249">El intervalo es menor o igual que cero.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f5863-249">The interval is less than or equal to zero.</span>
          </span>
          <span data-ttu-id="f5863-250">O bien</span>
          <span class="sxs-lookup">
            <span data-stu-id="f5863-250">-or-</span>
          </span>
          <span data-ttu-id="f5863-251">El intervalo es mayor que <see cref="F:System.Int32.MaxValue" /> y el temporizador está habilitado actualmente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f5863-251">The interval is greater than <see cref="F:System.Int32.MaxValue" />, and the timer is currently enabled.</span>
          </span>
          <span data-ttu-id="f5863-252">(Si el temporizador no está habilitado actualmente, no se produce ninguna excepción hasta que se habilita.)</span>
          <span class="sxs-lookup">
            <span data-stu-id="f5863-252">(If the timer is not currently enabled, no exception is thrown until it becomes enabled.)</span>
          </span>
        </exception>
        <altmember cref="P:System.Timers.Timer.AutoReset" />
        <altmember cref="P:System.Timers.Timer.Enabled" />
        <altmember cref="E:System.Timers.Timer.Elapsed" />
      </Docs>
    </Member>
    <Member MemberName="Site">
      <MemberSignature Language="C#" Value="public override System.ComponentModel.ISite Site { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.ComponentModel.ISite Site" />
      <MemberSignature Language="DocId" Value="P:System.Timers.Timer.Site" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Property Site As ISite" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::ComponentModel::ISite ^ Site { System::ComponentModel::ISite ^ get(); void set(System::ComponentModel::ISite ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ComponentModel.ISite</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="f5863-253">Obtiene o establece el sitio que enlaza el objeto <see cref="T:System.Timers.Timer" /> a su contenedor en modo de diseño.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f5863-253">Gets or sets the site that binds the <see cref="T:System.Timers.Timer" /> to its container in design mode.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="f5863-254">Interfaz <see cref="T:System.ComponentModel.ISite" /> que representa el sitio que enlaza el objeto <see cref="T:System.Timers.Timer" /> a su contenedor.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f5863-254">An <see cref="T:System.ComponentModel.ISite" /> interface representing the site that binds the <see cref="T:System.Timers.Timer" /> object to its container.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f5863-255">Sitios de enlazan un <xref:System.ComponentModel.Component> a una <xref:System.ComponentModel.Container> y habilitar la comunicación entre ellos, así como proporcionar una manera para que el contenedor administrar sus componentes.</span><span class="sxs-lookup"><span data-stu-id="f5863-255">Sites bind a <xref:System.ComponentModel.Component> to a <xref:System.ComponentModel.Container> and enable communication between them, as well as providing a way for the container to manage its components.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Start">
      <MemberSignature Language="C#" Value="public void Start ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Start() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Timers.Timer.Start" />
      <MemberSignature Language="VB.NET" Value="Public Sub Start ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Start();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="f5863-256">Empieza a generar el evento <see cref="E:System.Timers.Timer.Elapsed" /> al establecer <see cref="P:System.Timers.Timer.Enabled" /> en <see langword="true" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f5863-256">Starts raising the <see cref="E:System.Timers.Timer.Elapsed" /> event by setting <see cref="P:System.Timers.Timer.Enabled" /> to <see langword="true" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f5863-257">Si <xref:System.Timers.Timer.Start%2A> se llama y <xref:System.Timers.Timer.AutoReset%2A> está establecido en `false`, el <xref:System.Timers.Timer> provoca la <xref:System.Timers.Timer.Elapsed> eventos una sola vez, la primera vez que el intervalo transcurre.</span><span class="sxs-lookup"><span data-stu-id="f5863-257">If <xref:System.Timers.Timer.Start%2A> is called and <xref:System.Timers.Timer.AutoReset%2A> is set to `false`, the <xref:System.Timers.Timer> raises the <xref:System.Timers.Timer.Elapsed> event only once, the first time the interval elapses.</span></span> <span data-ttu-id="f5863-258">Si <xref:System.Timers.Timer.Start%2A> se llama y <xref:System.Timers.Timer.AutoReset%2A> es `true`, <xref:System.Timers.Timer> provoca la <xref:System.Timers.Timer.Elapsed> hora del evento del primer transcurrido el intervalo y continúa generar el evento en el intervalo especificado.</span><span class="sxs-lookup"><span data-stu-id="f5863-258">If <xref:System.Timers.Timer.Start%2A> is called and <xref:System.Timers.Timer.AutoReset%2A> is `true`, the <xref:System.Timers.Timer> raises the <xref:System.Timers.Timer.Elapsed> event the first time the interval elapses and continues to raise the event on the specified interval.</span></span>  
  
 <span data-ttu-id="f5863-259">También puede iniciar la temporización estableciendo <xref:System.Timers.Timer.Enabled%2A> a `true`.</span><span class="sxs-lookup"><span data-stu-id="f5863-259">You can also start timing by setting <xref:System.Timers.Timer.Enabled%2A> to `true`.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="f5863-260">Si <xref:System.Timers.Timer.AutoReset%2A> es `false`, el <xref:System.Timers.Timer.Start%2A> debe llamar al método para iniciar el recuento de nuevo.</span><span class="sxs-lookup"><span data-stu-id="f5863-260">If <xref:System.Timers.Timer.AutoReset%2A> is `false`, the <xref:System.Timers.Timer.Start%2A> method must be called in order to start the count again.</span></span>  
  
 <span data-ttu-id="f5863-261">Una llamada a la <xref:System.Timers.Timer.Start%2A> método cuando está habilitado el temporizador no tiene ningún efecto.</span><span class="sxs-lookup"><span data-stu-id="f5863-261">A call to the <xref:System.Timers.Timer.Start%2A> method when the timer is enabled has no effect.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="f5863-262">El objeto <see cref="T:System.Timers.Timer" /> se crea con un intervalo igual a o mayor que <see cref="F:System.Int32.MaxValue" /> + 1, o se establece en un intervalo menor que cero.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f5863-262">The <see cref="T:System.Timers.Timer" /> is created with an interval equal to or greater than <see cref="F:System.Int32.MaxValue" /> + 1, or set to an interval less than zero.</span>
          </span>
        </exception>
        <altmember cref="P:System.Timers.Timer.Interval" />
        <altmember cref="P:System.Timers.Timer.AutoReset" />
        <altmember cref="P:System.Timers.Timer.Enabled" />
        <altmember cref="M:System.Timers.Timer.Stop" />
        <altmember cref="E:System.Timers.Timer.Elapsed" />
      </Docs>
    </Member>
    <Member MemberName="Stop">
      <MemberSignature Language="C#" Value="public void Stop ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Stop() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Timers.Timer.Stop" />
      <MemberSignature Language="VB.NET" Value="Public Sub Stop ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Stop();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="f5863-263">Deja de generar el evento <see cref="E:System.Timers.Timer.Elapsed" /> al establecer <see cref="P:System.Timers.Timer.Enabled" /> en <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f5863-263">Stops raising the <see cref="E:System.Timers.Timer.Elapsed" /> event by setting <see cref="P:System.Timers.Timer.Enabled" /> to <see langword="false" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f5863-264">Detener la temporización, también se puede establecer <xref:System.Timers.Timer.Enabled%2A> a `false`.</span><span class="sxs-lookup"><span data-stu-id="f5863-264">You can also stop timing by setting <xref:System.Timers.Timer.Enabled%2A> to `false`.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="f5863-265">La señal para generar el <xref:System.Timers.Timer.Elapsed> eventos siempre está en cola para su ejecución en un <xref:System.Threading.ThreadPool> subprocesos, por lo que el método de control de eventos puede ejecutarse en un subproceso al mismo tiempo que una llamada a la <xref:System.Timers.Timer.Stop%2A> método se ejecuta en otro subproceso.</span><span class="sxs-lookup"><span data-stu-id="f5863-265">The signal to raise the <xref:System.Timers.Timer.Elapsed> event is always queued for execution on a <xref:System.Threading.ThreadPool> thread, so the event-handling method might run on one thread at the same time that a call to the <xref:System.Timers.Timer.Stop%2A> method runs on another thread.</span></span> <span data-ttu-id="f5863-266">Esto podría dar lugar a la <xref:System.Timers.Timer.Elapsed> evento que se provoca después de la <xref:System.Timers.Timer.Stop%2A> se llama al método.</span><span class="sxs-lookup"><span data-stu-id="f5863-266">This might result in the <xref:System.Timers.Timer.Elapsed> event being raised after the <xref:System.Timers.Timer.Stop%2A> method is called.</span></span> <span data-ttu-id="f5863-267">El ejemplo de código en la sección siguiente muestra una manera de evitar esta condición de carrera.</span><span class="sxs-lookup"><span data-stu-id="f5863-267">The code example in the next section shows one way to work around this race condition.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f5863-268">El ejemplo siguiente crea un `System.Timers.Timer` objeto que se activa su <xref:System.Timers.Timer.Elapsed?displayProperty=nameWithType> evento cada dos segundos (2.000 milisegundos), configura un controlador de eventos para el evento e inicia el temporizador.</span><span class="sxs-lookup"><span data-stu-id="f5863-268">The following example instantiates a `System.Timers.Timer` object that fires its <xref:System.Timers.Timer.Elapsed?displayProperty=nameWithType> event every two seconds (2,000 milliseconds), sets up an event handler for the  event, and starts the timer.</span></span> <span data-ttu-id="f5863-269">El controlador de eventos muestra el valor de la <xref:System.Timers.ElapsedEventArgs.SignalTime%2A?displayProperty=nameWithType> propiedad cada vez que se genera.</span><span class="sxs-lookup"><span data-stu-id="f5863-269">The event handler displays the value of the <xref:System.Timers.ElapsedEventArgs.SignalTime%2A?displayProperty=nameWithType> property each time it is raised.</span></span> <span data-ttu-id="f5863-270">Cuando el usuario presiona la tecla ENTRAR, la aplicación llama a la <xref:System.Timers.Timer.Stop%2A> método antes de terminar la aplicación.</span><span class="sxs-lookup"><span data-stu-id="f5863-270">When the user presses the Enter key, the application calls the  <xref:System.Timers.Timer.Stop%2A> method before terminating the application.</span></span>  
  
 [!code-csharp[System.Timers.Timer#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.timers.timer/cs/timer2a.cs#2)]
 [!code-vb[System.Timers.Timer#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.timers.timer/vb/timer2a.vb#2)]  
  
 <span data-ttu-id="f5863-271">En el ejemplo de código siguiente se muestra una manera de evitar que el subproceso que llama el <xref:System.Timers.Timer.Stop%2A> método impide continuar hasta que se ejecuta actualmente <xref:System.Timers.Timer.Elapsed> extremos de evento y también para evitar que dos <xref:System.Timers.Timer.Elapsed> eventos de ejecutar el controlador de eventos en el mismo tiempo (a menudo denominado reentrada).</span><span class="sxs-lookup"><span data-stu-id="f5863-271">The following code example shows one way to prevent the thread that calls the <xref:System.Timers.Timer.Stop%2A> method from continuing until a currently executing <xref:System.Timers.Timer.Elapsed> event ends, and also to prevent two <xref:System.Timers.Timer.Elapsed> events from executing the event handler at the same time (often referred to as reentrancy).</span></span>  
  
 <span data-ttu-id="f5863-272">El ejemplo ejecuta a 100 ejecuciones de prueba.</span><span class="sxs-lookup"><span data-stu-id="f5863-272">The example executes 100 test runs.</span></span> <span data-ttu-id="f5863-273">Cada vez que se ejecuta la prueba, se inicia el temporizador con un intervalo de 150 milisegundos.</span><span class="sxs-lookup"><span data-stu-id="f5863-273">Each time the test is run, the timer is started with an interval of 150 milliseconds.</span></span> <span data-ttu-id="f5863-274">El controlador de eventos usa el <xref:System.Threading.Thread.Sleep%2A?displayProperty=nameWithType> método para simular una tarea que aleatoriamente varía en longitud de 50 a 200 milisegundos.</span><span class="sxs-lookup"><span data-stu-id="f5863-274">The event handler uses the <xref:System.Threading.Thread.Sleep%2A?displayProperty=nameWithType> method to simulate a task that randomly varies in length from 50 to 200 milliseconds.</span></span> <span data-ttu-id="f5863-275">El método de prueba también inicia un subproceso de control que espera un segundo y, a continuación, detiene el temporizador.</span><span class="sxs-lookup"><span data-stu-id="f5863-275">The test method also starts a control thread that waits for a second and then stops the timer.</span></span> <span data-ttu-id="f5863-276">Si se controla un evento cuando el subproceso de control detiene el temporizador, el subproceso de control debe esperar hasta que finalice el evento antes de continuar.</span><span class="sxs-lookup"><span data-stu-id="f5863-276">If an event is being handled when the control thread stops the timer, the control thread must wait until the event is finished before proceeding.</span></span>  
  
 <span data-ttu-id="f5863-277">El <xref:System.Threading.Interlocked.CompareExchange%28System.Int32%40%2CSystem.Int32%2CSystem.Int32%29?displayProperty=nameWithType> sobrecarga del método se utiliza para evitar la reentrada y para impedir que el subproceso de control continúe hasta que finaliza un evento en ejecución.</span><span class="sxs-lookup"><span data-stu-id="f5863-277">The <xref:System.Threading.Interlocked.CompareExchange%28System.Int32%40%2CSystem.Int32%2CSystem.Int32%29?displayProperty=nameWithType> method overload is used to avoid reentrancy and to prevent the control thread from continuing until an executing event ends.</span></span> <span data-ttu-id="f5863-278">El controlador de eventos usa el <xref:System.Threading.Interlocked.CompareExchange%28System.Int32%40%2CSystem.Int32%2CSystem.Int32%29> método para establecer un control de la variable en 1, pero solo si el valor es cero actualmente.</span><span class="sxs-lookup"><span data-stu-id="f5863-278">The event handler uses the <xref:System.Threading.Interlocked.CompareExchange%28System.Int32%40%2CSystem.Int32%2CSystem.Int32%29> method to set a control variable to 1, but only if the value is currently zero.</span></span> <span data-ttu-id="f5863-279">Se trata de una operación atómica.</span><span class="sxs-lookup"><span data-stu-id="f5863-279">This is an atomic operation.</span></span> <span data-ttu-id="f5863-280">Si el valor devuelto es cero, la variable de control se ha establecido en 1 y el controlador de eventos continúa.</span><span class="sxs-lookup"><span data-stu-id="f5863-280">If the return value is zero, the control variable has been set to 1 and the event handler proceeds.</span></span> <span data-ttu-id="f5863-281">Si el valor devuelto es distinto de cero, el evento se descarta para evitar la reentrada.</span><span class="sxs-lookup"><span data-stu-id="f5863-281">If the return value is non-zero, the event is simply discarded to avoid reentrancy.</span></span> <span data-ttu-id="f5863-282">(Si fuese necesario ejecutar todos los eventos, el <xref:System.Threading.Monitor> clase sería una mejor manera de sincronizar los eventos.) Cuando el controlador de eventos finaliza, Establece la variable de control vuelve a cero.</span><span class="sxs-lookup"><span data-stu-id="f5863-282">(If it were necessary to execute every event, the <xref:System.Threading.Monitor> class would be a better way to synchronize the events.) When the event handler ends, it sets the control variable back to zero.</span></span> <span data-ttu-id="f5863-283">En el ejemplo se registra el número total de eventos ejecutados que se descartaron debido a la reentrada y que se ha producido después de la <xref:System.Timers.Timer.Stop%2A> método se llamó.</span><span class="sxs-lookup"><span data-stu-id="f5863-283">The example records the total number of events that executed, that were discarded because of reentrancy, and that occurred after the <xref:System.Timers.Timer.Stop%2A> method was called.</span></span>  
  
 <span data-ttu-id="f5863-284">El subproceso de control utiliza la <xref:System.Threading.Interlocked.CompareExchange%28System.Int32%40%2CSystem.Int32%2CSystem.Int32%29> método para establecer el control de variable en -1 (menos uno), pero solo si el valor es cero actualmente.</span><span class="sxs-lookup"><span data-stu-id="f5863-284">The control thread uses the <xref:System.Threading.Interlocked.CompareExchange%28System.Int32%40%2CSystem.Int32%2CSystem.Int32%29> method to set the control variable to -1 (minus one), but only if the value is currently zero.</span></span> <span data-ttu-id="f5863-285">Si la operación atómica devuelve distinto de cero, un evento se está ejecutando actualmente.</span><span class="sxs-lookup"><span data-stu-id="f5863-285">If the atomic operation returns non-zero, an event is currently executing.</span></span> <span data-ttu-id="f5863-286">El subproceso de control espera y lo intenta de nuevo.</span><span class="sxs-lookup"><span data-stu-id="f5863-286">The control thread waits and tries again.</span></span> <span data-ttu-id="f5863-287">En el ejemplo se registra el número de veces que el subproceso de control tuvieron que esperar a que finalice un evento.</span><span class="sxs-lookup"><span data-stu-id="f5863-287">The example records the number of times the control thread had to wait for an event to finish.</span></span>  
  
 [!code-csharp[Timer.Stop#1](~/samples/snippets/csharp/VS_Snippets_CLR/Timer.Stop/CS/source.cs#1)]
 [!code-vb[Timer.Stop#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Timer.Stop/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Timers.Timer.Enabled" />
        <altmember cref="M:System.Timers.Timer.Start" />
        <altmember cref="E:System.Timers.Timer.Elapsed" />
      </Docs>
    </Member>
    <Member MemberName="SynchronizingObject">
      <MemberSignature Language="C#" Value="public System.ComponentModel.ISynchronizeInvoke SynchronizingObject { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.ComponentModel.ISynchronizeInvoke SynchronizingObject" />
      <MemberSignature Language="DocId" Value="P:System.Timers.Timer.SynchronizingObject" />
      <MemberSignature Language="VB.NET" Value="Public Property SynchronizingObject As ISynchronizeInvoke" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::ComponentModel::ISynchronizeInvoke ^ SynchronizingObject { System::ComponentModel::ISynchronizeInvoke ^ get(); void set(System::ComponentModel::ISynchronizeInvoke ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Timers.TimersDescription("The object used to marshal the event handler calls issued when an interval has elapsed.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.ComponentModel.ISynchronizeInvoke</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="f5863-288">Obtiene o establece el objeto que se utiliza para calcular las referencias de las llamadas del controlador de eventos que se emiten al transcurrir un intervalo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f5863-288">Gets or sets the object used to marshal event-handler calls that are issued when an interval has elapsed.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="f5863-289">
            <see cref="T:System.ComponentModel.ISynchronizeInvoke" /> que representa el objeto que se usa para calcular las referencias de las llamadas del controlador de eventos que se emiten al transcurrir un intervalo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f5863-289">The <see cref="T:System.ComponentModel.ISynchronizeInvoke" /> representing the object used to marshal the event-handler calls that are issued when an interval has elapsed.</span>
          </span>
          <span data-ttu-id="f5863-290">El valor predeterminado es <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f5863-290">The default is <see langword="null" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f5863-291">Cuando <xref:System.Timers.Timer.SynchronizingObject%2A> es `null`, el método que controla el <xref:System.Timers.Timer.Elapsed> se denomina eventos en un subproceso del grupo de subprocesos del sistema.</span><span class="sxs-lookup"><span data-stu-id="f5863-291">When <xref:System.Timers.Timer.SynchronizingObject%2A> is `null`, the method that handles the <xref:System.Timers.Timer.Elapsed> event is called on a thread from the system-thread pool.</span></span> <span data-ttu-id="f5863-292">Para obtener más información acerca de los grupos de subprocesos del sistema, consulte <xref:System.Threading.ThreadPool>.</span><span class="sxs-lookup"><span data-stu-id="f5863-292">For more information on system-thread pools, see <xref:System.Threading.ThreadPool>.</span></span>  
  
 <span data-ttu-id="f5863-293">Cuando el <xref:System.Timers.Timer.Elapsed> evento está controlado por un componente visual de formularios Windows Forms, como un botón, acceso al componente a través del grupo de subprocesos del sistema podría resultado una excepción o simplemente podría no funcionar.</span><span class="sxs-lookup"><span data-stu-id="f5863-293">When the <xref:System.Timers.Timer.Elapsed> event is handled by a visual Windows Forms component, such as a button, accessing the component through the system-thread pool might result in an exception or just might not work.</span></span> <span data-ttu-id="f5863-294">Evitar este efecto estableciendo <xref:System.Timers.Timer.SynchronizingObject%2A> a un componente de Windows Forms, lo que hace que el método que controla el <xref:System.Timers.Timer.Elapsed> evento al que se llama en el mismo subproceso donde se creó el componente.</span><span class="sxs-lookup"><span data-stu-id="f5863-294">Avoid this effect by setting <xref:System.Timers.Timer.SynchronizingObject%2A> to a Windows Forms component, which causes the method that handles the <xref:System.Timers.Timer.Elapsed> event to be called on the same thread that the component was created on.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="f5863-295">Incluso si la <xref:System.Timers.Timer.SynchronizingObject%2A> propiedad no es `null`, <xref:System.Timers.Timer.Elapsed> eventos pueden producirse después de la <xref:System.Timers.Timer.Dispose%2A> o <xref:System.Timers.Timer.Stop%2A> ha llamado al método o después la <xref:System.Timers.Timer.Enabled%2A> propiedad se ha establecido en `false`, porque la señal para generar el <xref:System.Timers.Timer.Elapsed> eventos siempre está en cola para su ejecución en un subproceso del grupo.</span><span class="sxs-lookup"><span data-stu-id="f5863-295">Even if the <xref:System.Timers.Timer.SynchronizingObject%2A> property is not `null`, <xref:System.Timers.Timer.Elapsed> events can occur after the <xref:System.Timers.Timer.Dispose%2A> or <xref:System.Timers.Timer.Stop%2A> method has been called or after the <xref:System.Timers.Timer.Enabled%2A> property has been set to `false`, because the signal to raise the <xref:System.Timers.Timer.Elapsed> event is always queued for execution on a thread pool thread.</span></span> <span data-ttu-id="f5863-296">Una manera de resolver esta condición de carrera es establecer una marca que indica el controlador de eventos para el <xref:System.Timers.Timer.Elapsed> evento omita algunos eventos posteriores.</span><span class="sxs-lookup"><span data-stu-id="f5863-296">One way to resolve this race condition is to set a flag that tells the event handler for the <xref:System.Timers.Timer.Elapsed> event to ignore subsequent events.</span></span>  
  
 <span data-ttu-id="f5863-297">Si el <xref:System.Timers.Timer> se utiliza dentro de Visual Studio en un diseñador de formularios Windows Forms, <xref:System.Timers.Timer.SynchronizingObject%2A> se establece automáticamente en el control que contiene el <xref:System.Timers.Timer>.</span><span class="sxs-lookup"><span data-stu-id="f5863-297">If the <xref:System.Timers.Timer> is used inside Visual Studio in a Windows Forms designer, <xref:System.Timers.Timer.SynchronizingObject%2A> is automatically set to the control that contains the <xref:System.Timers.Timer>.</span></span> <span data-ttu-id="f5863-298">Por ejemplo, si coloca un <xref:System.Timers.Timer> en un diseñador para `Form1` (que hereda de <xref:System.Windows.Forms.Form>), el <xref:System.Timers.Timer.SynchronizingObject%2A> propiedad de <xref:System.Timers.Timer> se establece en la instancia de `Form1`.</span><span class="sxs-lookup"><span data-stu-id="f5863-298">For example, if you place a <xref:System.Timers.Timer> on a designer for `Form1` (which inherits from <xref:System.Windows.Forms.Form>), the <xref:System.Timers.Timer.SynchronizingObject%2A> property of <xref:System.Timers.Timer> is set to the instance of `Form1`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f5863-299">El ejemplo siguiente es una aplicación de formularios Windows Forms que actúa como un editor de archivos de texto muy simple.</span><span class="sxs-lookup"><span data-stu-id="f5863-299">The following example is a Windows Forms app that serves as a very simple text file editor.</span></span> <span data-ttu-id="f5863-300">Cuando no se ha guardado el texto en el cuadro de texto, la aplicación pide al usuario a intervalos de un minuto si desea guardar el contenido del cuadro de texto.</span><span class="sxs-lookup"><span data-stu-id="f5863-300">When the text in the text box has not been saved, the app asks the user at one-minute intervals whether he or she wants to save the contents of the text box.</span></span>  <span data-ttu-id="f5863-301">Para ello, el <xref:System.Timers.Timer.Interval%2A> propiedad está establecida en un minuto (60.000 milisegundos) y el <xref:System.Timers.Timer.SynchronizingObject%2A> propiedad está establecida en el <xref:System.Windows.Forms.Form> objeto.</span><span class="sxs-lookup"><span data-stu-id="f5863-301">To do this, the <xref:System.Timers.Timer.Interval%2A> property is set to one minute (60,000 milliseconds), and the <xref:System.Timers.Timer.SynchronizingObject%2A> property is set to the <xref:System.Windows.Forms.Form> object.</span></span>  
  
 [!code-csharp[System.Timers.Timer.SynchronizingObject#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.Timers.Timer.SynchronizingObject/cs/Form1.cs#1)]
 [!code-vb[System.Timers.Timer.SynchronizingObject#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.Timers.Timer.SynchronizingObject/vb/Form1.vb#1)]  
  
 <span data-ttu-id="f5863-302">En el ejemplo se requiere que agregue los siguientes controles al formulario:</span><span class="sxs-lookup"><span data-stu-id="f5863-302">The example requires that you add the following controls to the form:</span></span>  
  
-   <span data-ttu-id="f5863-303">A <xref:System.Windows.Forms.TextBox> control denominado `TextBox1` (su nombre predeterminado).</span><span class="sxs-lookup"><span data-stu-id="f5863-303">A <xref:System.Windows.Forms.TextBox> control named `TextBox1` (its default name).</span></span>  
  
-   <span data-ttu-id="f5863-304">A <xref:System.Windows.Forms.Button> control denominado `Button1` (su nombre predeterminado).</span><span class="sxs-lookup"><span data-stu-id="f5863-304">A <xref:System.Windows.Forms.Button> control named `Button1` (its default name).</span></span>  
  
-   <span data-ttu-id="f5863-305">A <xref:System.Windows.Forms.SaveFileDialog> control denominado `SaveSaveFileDialog1` (su nombre predeterminado).</span><span class="sxs-lookup"><span data-stu-id="f5863-305">A <xref:System.Windows.Forms.SaveFileDialog> control named `SaveSaveFileDialog1` (its default name) .</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.Form" />
        <altmember cref="T:System.ComponentModel.ISynchronizeInvoke" />
        <altmember cref="T:System.Threading.ThreadPool" />
        <altmember cref="E:System.Timers.Timer.Elapsed" />
      </Docs>
    </Member>
  </Members>
</Type>