<Type Name="CollectionAdapters" FullName="System.AddIn.Pipeline.CollectionAdapters">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="34de4fd4b3dc174a4fb57efb7ce25cd03607c8b1" />
    <Meta Name="ms.sourcegitcommit" Value="16d2d159872fd213cae4b8f371d7ae9c8b027c89" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="es-ES" />
    <Meta Name="ms.lasthandoff" Value="11/17/2018" />
    <Meta Name="ms.locfileid" Value="51923072" />
  </Metadata>
  <TypeSignature Language="C#" Value="public static class CollectionAdapters" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit CollectionAdapters extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.AddIn.Pipeline.CollectionAdapters" />
  <TypeSignature Language="VB.NET" Value="Public Class CollectionAdapters" />
  <TypeSignature Language="C++ CLI" Value="public ref class CollectionAdapters abstract sealed" />
  <TypeSignature Language="F#" Value="type CollectionAdapters = class" />
  <AssemblyInfo>
    <AssemblyName>System.AddIn</AssemblyName>
    <AssemblyVersion>3.5.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Permite pasar colecciones entre un complemento y su aplicación host.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Esta clase proporciona métodos que permiten una <xref:System.Collections.Generic.IList%601> colección va a convertir en un <xref:System.AddIn.Contract.IListContract%601> colección. El <xref:System.AddIn.Contract.IListContract%601> colección se pasa a través del límite de aislamiento y volver a convertir a un <xref:System.Collections.Generic.IList%601> colección que puede usar el complemento o la aplicación host.  
  
 Objetos en las colecciones deben ser utilizables de forma remota. Para obtener más información acerca de los tipos de objeto que se pueden pasar, vea [contratos, vistas y adaptadores](https://msdn.microsoft.com/library/a6460173-9507-4b87-8c07-d4ee245d715c).  
  
 ]]></format>
    </remarks>
    <related type="Article" href="https://msdn.microsoft.com/library/8dd45b02-7218-40f9-857d-40d7b98b850b">Complementos y extensibilidad</related>
  </Docs>
  <Members>
    <Member MemberName="ToIList&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IList&lt;T&gt; ToIList&lt;T&gt; (System.AddIn.Contract.IListContract&lt;T&gt; collection);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IList`1&lt;!!T&gt; ToIList&lt;T&gt;(class System.AddIn.Contract.IListContract`1&lt;!!T&gt; collection) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.AddIn.Pipeline.CollectionAdapters.ToIList``1(System.AddIn.Contract.IListContract{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToIList(Of T) (collection As IListContract(Of T)) As IList(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; static System::Collections::Generic::IList&lt;T&gt; ^ ToIList(System::AddIn::Contract::IListContract&lt;T&gt; ^ collection);" />
      <MemberSignature Language="F#" Value="static member ToIList : System.AddIn.Contract.IListContract&lt;'T&gt; -&gt; System.Collections.Generic.IList&lt;'T&gt;" Usage="System.AddIn.Pipeline.CollectionAdapters.ToIList collection" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.AddIn</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IList&lt;T&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="collection" Type="System.AddIn.Contract.IListContract&lt;T&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="T">Tipo de objetos incluidos en la lista. <c>T</c> deben ser serializables.</typeparam>
        <param name="collection">Colección al otro lado de la canalización.</param>
        <summary>Convierte la colección <see cref="T:System.AddIn.Contract.IListContract`1" /> especificada en una colección <see cref="T:System.Collections.Generic.IList`1" />.</summary>
        <returns>Colección que se ha convertido.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La aplicación host o el complemento puede utilizar el valor devuelto <xref:System.Collections.Generic.IList%601> colección. El <xref:System.Collections.Generic.IList%601> colección tendrá un token de duración para el control remoto <xref:System.AddIn.Contract.IListContract%601> colección.  
  
 Debe utilizar esta sobrecarga del método solo cuando el contenido de la <xref:System.AddIn.Contract.IListContract%601> son tipos serializables que se pueden pasar directamente a los complementos y host (en lugar de tipos que deben adaptarse a las vistas).  
  
   
  
## Examples  
 El ejemplo siguiente implementa un segmento de canalización del adaptador del host, como se describe [Tutorial: pasar colecciones entre Hosts y complementos](https://msdn.microsoft.com/library/b532c604-548e-4fab-b11c-377257dd0ee5). En el ejemplo se adapta personalizado `ProcessBooks` método tomando el <xref:System.AddIn.Contract.IListContract%601> colección, pasado desde el complemento y su conversión a un <xref:System.Collections.Generic.IList%601> colección, que, a continuación, puede usar la aplicación host.  
  
 [!code-csharp[AddInCollectionPipelineAddInSideAdapter#3](~/samples/snippets/csharp/VS_Snippets_CLR/AddInCollectionPipelineAddInSideAdapter/cs/LibraryManagerViewToContractAddInAdapter.cs#3)]
 [!code-vb[AddInCollectionPipelineAddInSideAdapter#3](~/samples/snippets/visualbasic/VS_Snippets_CLR/AddInCollectionPipelineAddInSideAdapter/vb/LibraryManagerViewToContractAddInAdapter.vb#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToIList&lt;TContract,TView&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IList&lt;TView&gt; ToIList&lt;TContract,TView&gt; (System.AddIn.Contract.IListContract&lt;TContract&gt; collection, Converter&lt;TContract,TView&gt; contractViewAdapter, Converter&lt;TView,TContract&gt; viewContractAdapter);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IList`1&lt;!!TView&gt; ToIList&lt;TContract, TView&gt;(class System.AddIn.Contract.IListContract`1&lt;!!TContract&gt; collection, class System.Converter`2&lt;!!TContract, !!TView&gt; contractViewAdapter, class System.Converter`2&lt;!!TView, !!TContract&gt; viewContractAdapter) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.AddIn.Pipeline.CollectionAdapters.ToIList``2(System.AddIn.Contract.IListContract{``0},System.Converter{``0,``1},System.Converter{``1,``0})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToIList(Of TContract, TView) (collection As IListContract(Of TContract), contractViewAdapter As Converter(Of TContract, TView), viewContractAdapter As Converter(Of TView, TContract)) As IList(Of TView)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TContract, typename TView&gt;&#xA; static System::Collections::Generic::IList&lt;TView&gt; ^ ToIList(System::AddIn::Contract::IListContract&lt;TContract&gt; ^ collection, Converter&lt;TContract, TView&gt; ^ contractViewAdapter, Converter&lt;TView, TContract&gt; ^ viewContractAdapter);" />
      <MemberSignature Language="F#" Value="static member ToIList : System.AddIn.Contract.IListContract&lt;'Contract&gt; * Converter&lt;'Contract, 'View&gt; * Converter&lt;'View, 'Contract&gt; -&gt; System.Collections.Generic.IList&lt;'View&gt;" Usage="System.AddIn.Pipeline.CollectionAdapters.ToIList (collection, contractViewAdapter, viewContractAdapter)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.AddIn</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IList&lt;TView&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TContract" />
        <TypeParameter Name="TView" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="collection" Type="System.AddIn.Contract.IListContract&lt;TContract&gt;" />
        <Parameter Name="contractViewAdapter" Type="System.Converter&lt;TContract,TView&gt;" />
        <Parameter Name="viewContractAdapter" Type="System.Converter&lt;TView,TContract&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TContract">El tipo que define el contrato para pasar objetos de tipo <c>PROD117</c> a través del límite de aislamiento.</typeparam>
        <typeparam name="TView">Tipo que define la vista de los objetos de la lista.</typeparam>
        <param name="collection">Colección que se va a pasar al otro lado de la canalización.</param>
        <param name="contractViewAdapter">Convertidor que adapta los datos del tipo definido en el contrato al tipo que se espera en la vista.</param>
        <param name="viewContractAdapter">Convertidor que adapta los datos del tipo definido en la vista al tipo que se espera en el contrato.</param>
        <summary>Convierte la colección <see cref="T:System.AddIn.Contract.IListContract`1" /> especificada en una colección <see cref="T:System.Collections.Generic.IList`1" /> utilizando adaptadores de convertidor.</summary>
        <returns>Colección que se ha convertido.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Utilice esta sobrecarga del método para <xref:System.AddIn.Contract.IListContract%601> colecciones que contienen tipos que deben adaptarse antes de que se puede pasar a los complementos o host (en lugar de simples tipos serializables que se pueden pasar directamente). La aplicación host o el complemento puede utilizar el valor devuelto <xref:System.Collections.Generic.IList%601> colección. Tendrá un token de duración para el control remoto <xref:System.AddIn.Contract.IListContract%601>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToIListContract&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static System.AddIn.Contract.IListContract&lt;T&gt; ToIListContract&lt;T&gt; (System.Collections.Generic.IList&lt;T&gt; collection);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.AddIn.Contract.IListContract`1&lt;!!T&gt; ToIListContract&lt;T&gt;(class System.Collections.Generic.IList`1&lt;!!T&gt; collection) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.AddIn.Pipeline.CollectionAdapters.ToIListContract``1(System.Collections.Generic.IList{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToIListContract(Of T) (collection As IList(Of T)) As IListContract(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; static System::AddIn::Contract::IListContract&lt;T&gt; ^ ToIListContract(System::Collections::Generic::IList&lt;T&gt; ^ collection);" />
      <MemberSignature Language="F#" Value="static member ToIListContract : System.Collections.Generic.IList&lt;'T&gt; -&gt; System.AddIn.Contract.IListContract&lt;'T&gt;" Usage="System.AddIn.Pipeline.CollectionAdapters.ToIListContract collection" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.AddIn</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.AddIn.Contract.IListContract&lt;T&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="collection" Type="System.Collections.Generic.IList&lt;T&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="T">Tipo de objetos incluidos en la lista. <c>T</c> deben ser serializables.</typeparam>
        <param name="collection">Colección que se va a convertir.</param>
        <summary>Convierte la colección <see cref="T:System.Collections.Generic.IList`1" /> especificada en una colección <see cref="T:System.AddIn.Contract.IListContract`1" />.</summary>
        <returns>Colección que se ha convertido.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.AddIn.Contract.IListContract%601> colección se puede serializar a través del límite de aislamiento entre el complemento y su aplicación host.  
  
 Debe utilizar esta sobrecarga del método solo cuando el contenido de la <xref:System.Collections.Generic.IList%601> colección son tipos serializables que se pueden pasar directamente en el contrato (en lugar de tipos que deben adaptarse en contratos).  
  
   
  
## Examples  
 El ejemplo siguiente implementa la clase que define un segmento de canalización del adaptador del lado del complemento. Adapta personalizado `ProcessBooks` método tomando el <xref:System.Collections.Generic.IList%601> colección, pasado desde el segmento de vista de complemento y su conversión a un <xref:System.AddIn.Contract.IListContract%601> colección que se puede serializar a través del límite de aislamiento para el host.  
  
 [!code-csharp[AddInCollectionPipelineHostSideAdapter#4](~/samples/snippets/csharp/VS_Snippets_CLR/AddInCollectionPipelineHostSideAdapter/cs/LibraryManagerContractToViewHostAdapter.cs#4)]
 [!code-vb[AddInCollectionPipelineHostSideAdapter#4](~/samples/snippets/visualbasic/VS_Snippets_CLR/AddInCollectionPipelineHostSideAdapter/vb/LibraryManagerContractToViewHostAdapter.vb#4)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToIListContract&lt;TView,TContract&gt;">
      <MemberSignature Language="C#" Value="public static System.AddIn.Contract.IListContract&lt;TContract&gt; ToIListContract&lt;TView,TContract&gt; (System.Collections.Generic.IList&lt;TView&gt; collection, Converter&lt;TView,TContract&gt; viewContractAdapter, Converter&lt;TContract,TView&gt; contractViewAdapter);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.AddIn.Contract.IListContract`1&lt;!!TContract&gt; ToIListContract&lt;TView, TContract&gt;(class System.Collections.Generic.IList`1&lt;!!TView&gt; collection, class System.Converter`2&lt;!!TView, !!TContract&gt; viewContractAdapter, class System.Converter`2&lt;!!TContract, !!TView&gt; contractViewAdapter) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.AddIn.Pipeline.CollectionAdapters.ToIListContract``2(System.Collections.Generic.IList{``0},System.Converter{``0,``1},System.Converter{``1,``0})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToIListContract(Of TView, TContract) (collection As IList(Of TView), viewContractAdapter As Converter(Of TView, TContract), contractViewAdapter As Converter(Of TContract, TView)) As IListContract(Of TContract)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TView, typename TContract&gt;&#xA; static System::AddIn::Contract::IListContract&lt;TContract&gt; ^ ToIListContract(System::Collections::Generic::IList&lt;TView&gt; ^ collection, Converter&lt;TView, TContract&gt; ^ viewContractAdapter, Converter&lt;TContract, TView&gt; ^ contractViewAdapter);" />
      <MemberSignature Language="F#" Value="static member ToIListContract : System.Collections.Generic.IList&lt;'View&gt; * Converter&lt;'View, 'Contract&gt; * Converter&lt;'Contract, 'View&gt; -&gt; System.AddIn.Contract.IListContract&lt;'Contract&gt;" Usage="System.AddIn.Pipeline.CollectionAdapters.ToIListContract (collection, viewContractAdapter, contractViewAdapter)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.AddIn</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.AddIn.Contract.IListContract&lt;TContract&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TView" />
        <TypeParameter Name="TContract" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="collection" Type="System.Collections.Generic.IList&lt;TView&gt;" />
        <Parameter Name="viewContractAdapter" Type="System.Converter&lt;TView,TContract&gt;" />
        <Parameter Name="contractViewAdapter" Type="System.Converter&lt;TContract,TView&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TView">Tipo que define la vista de los objetos de la lista.</typeparam>
        <typeparam name="TContract">El tipo que define el contrato para pasar objetos de tipo <c>PROD117</c> a través del límite de aislamiento.</typeparam>
        <param name="collection">Colección que se va a convertir.</param>
        <param name="viewContractAdapter">Convertidor que adapta los datos del tipo definido en la vista al tipo que se espera en el contrato.</param>
        <param name="contractViewAdapter">Convertidor que adapta los datos del tipo definido en el contrato al tipo que se espera en la vista.</param>
        <summary>Convierte la colección <see cref="T:System.Collections.Generic.IList`1" /> especificada en una colección <see cref="T:System.AddIn.Contract.IListContract`1" /> utilizando adaptadores de convertidor.</summary>
        <returns>Colección que se ha convertido.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Utilice esta sobrecarga del método para <xref:System.Collections.Generic.IList%601> colecciones que contienen tipos que deben adaptarse en contratos antes de que se puede pasar el contrato (en lugar de simples tipos serializables que se pueden pasar directamente). El <xref:System.AddIn.Contract.IListContract%601> colección se puede serializar a través del límite de aislamiento entre un complemento y su aplicación host.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>