<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="CollectionAdapters.xml" source-language="en-US" target-language="es-ES">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac5cda5b936b22052f7b99b2c7e5bd552235a459181.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">cda5b936b22052f7b99b2c7e5bd552235a459181</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.AddIn.Pipeline.CollectionAdapters">
          <source>Enables collections to be passed between an add-in and its host application.</source>
          <target state="translated">Permite pasar colecciones entre un complemento y su aplicación host.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.AddIn.Pipeline.CollectionAdapters">
          <source>This class provides methods that enable an <ph id="ph1">&lt;xref:System.Collections.Generic.IList%601&gt;</ph> collection to be converted to a <ph id="ph2">&lt;xref:System.AddIn.Contract.IListContract%601&gt;</ph> collection.</source>
          <target state="translated">Esta clase proporciona métodos que permiten una <ph id="ph1">&lt;xref:System.Collections.Generic.IList%601&gt;</ph> colección se convierta en un <ph id="ph2">&lt;xref:System.AddIn.Contract.IListContract%601&gt;</ph> colección.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.AddIn.Pipeline.CollectionAdapters">
          <source>The <ph id="ph1">&lt;xref:System.AddIn.Contract.IListContract%601&gt;</ph> collection is passed across the isolation boundary and converted back to an <ph id="ph2">&lt;xref:System.Collections.Generic.IList%601&gt;</ph> collection that the add-in or the host application can use.</source>
          <target state="translated">El <ph id="ph1">&lt;xref:System.AddIn.Contract.IListContract%601&gt;</ph> colección se pasa a través del límite de aislamiento y volver a convertir a un <ph id="ph2">&lt;xref:System.Collections.Generic.IList%601&gt;</ph> colección que puede usar el complemento o la aplicación host.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.AddIn.Pipeline.CollectionAdapters">
          <source>Objects in collections must be remotable.</source>
          <target state="translated">Objetos de las colecciones deben ser utilizables de forma remota.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.AddIn.Pipeline.CollectionAdapters">
          <source>For more information about the object types that you can pass, see <bpt id="p1">[</bpt>Contracts, Views, and Adapters<ept id="p1">](http://msdn.microsoft.com/library/a6460173-9507-4b87-8c07-d4ee245d715c)</ept>.</source>
          <target state="translated">Para obtener más información acerca de los tipos de objeto que se pueden pasar, vea <bpt id="p1">[</bpt>contratos, vistas y adaptadores<ept id="p1">](http://msdn.microsoft.com/library/a6460173-9507-4b87-8c07-d4ee245d715c)</ept>.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AddIn.Pipeline.CollectionAdapters.ToIList``1(System.AddIn.Contract.IListContract{``0})">
          <source>The type of objects that are contained in the list.</source>
          <target state="translated">Tipo de objetos incluidos en la lista.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AddIn.Pipeline.CollectionAdapters.ToIList``1(System.AddIn.Contract.IListContract{``0})">
          <source><bpt id="p1">&lt;c&gt;</bpt>T<ept id="p1">&lt;/c&gt;</ept> must be serializable.</source>
          <target state="translated"><bpt id="p1">&lt;c&gt;</bpt>T<ept id="p1">&lt;/c&gt;</ept> deben ser serializables.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" uid="M:System.AddIn.Pipeline.CollectionAdapters.ToIList``1(System.AddIn.Contract.IListContract{``0})">
          <source>The collection from the other side of the pipeline.</source>
          <target state="translated">Colección al otro lado de la canalización.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" uid="M:System.AddIn.Pipeline.CollectionAdapters.ToIList``1(System.AddIn.Contract.IListContract{``0})">
          <source>Converts the specified <ph id="ph1">&lt;see cref="T:System.AddIn.Contract.IListContract`1" /&gt;</ph> collection to an <ph id="ph2">&lt;see cref="T:System.Collections.Generic.IList`1" /&gt;</ph> collection.</source>
          <target state="translated">Convierte la colección <ph id="ph1">&lt;see cref="T:System.AddIn.Contract.IListContract`1" /&gt;</ph> especificada en una colección <ph id="ph2">&lt;see cref="T:System.Collections.Generic.IList`1" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" uid="M:System.AddIn.Pipeline.CollectionAdapters.ToIList``1(System.AddIn.Contract.IListContract{``0})">
          <source>The converted collection.</source>
          <target state="translated">Colección que se ha convertido.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AddIn.Pipeline.CollectionAdapters.ToIList``1(System.AddIn.Contract.IListContract{``0})">
          <source>The host application or add-in can use the returned <ph id="ph1">&lt;xref:System.Collections.Generic.IList%601&gt;</ph> collection.</source>
          <target state="translated">La aplicación de host o el complemento puede utilizar el valor devuelto <ph id="ph1">&lt;xref:System.Collections.Generic.IList%601&gt;</ph> colección.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AddIn.Pipeline.CollectionAdapters.ToIList``1(System.AddIn.Contract.IListContract{``0})">
          <source>The <ph id="ph1">&lt;xref:System.Collections.Generic.IList%601&gt;</ph> collection will have a lifetime token for the remote <ph id="ph2">&lt;xref:System.AddIn.Contract.IListContract%601&gt;</ph> collection.</source>
          <target state="translated">El <ph id="ph1">&lt;xref:System.Collections.Generic.IList%601&gt;</ph> colección tendrá un token de duración para el control remoto <ph id="ph2">&lt;xref:System.AddIn.Contract.IListContract%601&gt;</ph> colección.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AddIn.Pipeline.CollectionAdapters.ToIList``1(System.AddIn.Contract.IListContract{``0})">
          <source>You should use this method overload only when the contents of the <ph id="ph1">&lt;xref:System.AddIn.Contract.IListContract%601&gt;</ph> are serializable types that can be passed directly to the add-in and host (rather than types that must be adapted into views).</source>
          <target state="translated">Debe utilizar esta sobrecarga del método solo cuando el contenido de la <ph id="ph1">&lt;xref:System.AddIn.Contract.IListContract%601&gt;</ph> son tipos serializables que pueden pasarse directamente en el complemento y host (en lugar de tipos que deben adaptarse a las vistas).</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AddIn.Pipeline.CollectionAdapters.ToIList``1(System.AddIn.Contract.IListContract{``0})">
          <source>The following example implements a host-side adapter pipeline segment as described <bpt id="p1">[</bpt>Walkthrough: Passing Collections Between Hosts and Add-Ins<ept id="p1">](http://msdn.microsoft.com/library/b532c604-548e-4fab-b11c-377257dd0ee5)</ept>. The example adapts the custom <ph id="ph1">`ProcessBooks`</ph> method by taking the <ph id="ph2">&lt;xref:System.AddIn.Contract.IListContract%601&gt;</ph> collection passed from the add-in and converting it to an <ph id="ph3">&lt;xref:System.Collections.Generic.IList%601&gt;</ph> collection, which the host application can then use.</source>
          <target state="translated">En el ejemplo siguiente se implementa un segmento de canalización del adaptador del host, como se describe <bpt id="p1">[</bpt>Tutorial: pasar colecciones entre Hosts y complementos<ept id="p1">](http://msdn.microsoft.com/library/b532c604-548e-4fab-b11c-377257dd0ee5)</ept>. En el ejemplo se adapta personalizado <ph id="ph1">`ProcessBooks`</ph> método tomando el <ph id="ph2">&lt;xref:System.AddIn.Contract.IListContract%601&gt;</ph> colección pasa desde el complemento y convertirlo en un <ph id="ph3">&lt;xref:System.Collections.Generic.IList%601&gt;</ph> colección, que, a continuación, puede usar la aplicación host.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AddIn.Pipeline.CollectionAdapters.ToIList``2(System.AddIn.Contract.IListContract{``0},System.Converter{``0,``1},System.Converter{``1,``0})">
          <source>The type that defines the contract for passing objects of type <bpt id="p1">&lt;c&gt;</bpt>TView<ept id="p1">&lt;/c&gt;</ept> across the isolation boundary.</source>
          <target state="translated">El tipo que define el contrato para pasar objetos de tipo <bpt id="p1">&lt;c&gt;</bpt>PROD117<ept id="p1">&lt;/c&gt;</ept> a través del límite de aislamiento.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AddIn.Pipeline.CollectionAdapters.ToIList``2(System.AddIn.Contract.IListContract{``0},System.Converter{``0,``1},System.Converter{``1,``0})">
          <source>The type that defines the view of the objects in the list.</source>
          <target state="translated">Tipo que define la vista de los objetos de la lista.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" uid="M:System.AddIn.Pipeline.CollectionAdapters.ToIList``2(System.AddIn.Contract.IListContract{``0},System.Converter{``0,``1},System.Converter{``1,``0})">
          <source>The collection to pass to the other side of the pipeline.</source>
          <target state="translated">Colección que se va a pasar al otro lado de la canalización.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" uid="M:System.AddIn.Pipeline.CollectionAdapters.ToIList``2(System.AddIn.Contract.IListContract{``0},System.Converter{``0,``1},System.Converter{``1,``0})">
          <source>A converter that adapts the data from the type defined in the contract to the type expected in the view.</source>
          <target state="translated">Convertidor que adapta los datos del tipo definido en el contrato al tipo que se espera en la vista.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" uid="M:System.AddIn.Pipeline.CollectionAdapters.ToIList``2(System.AddIn.Contract.IListContract{``0},System.Converter{``0,``1},System.Converter{``1,``0})">
          <source>A converter that adapts the data from the type defined in the view to the type expected by the contract.</source>
          <target state="translated">Convertidor que adapta los datos del tipo definido en la vista al tipo que se espera en el contrato.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" uid="M:System.AddIn.Pipeline.CollectionAdapters.ToIList``2(System.AddIn.Contract.IListContract{``0},System.Converter{``0,``1},System.Converter{``1,``0})">
          <source>Converts a specified <ph id="ph1">&lt;see cref="T:System.AddIn.Contract.IListContract`1" /&gt;</ph> collection to an <ph id="ph2">&lt;see cref="T:System.Collections.Generic.IList`1" /&gt;</ph> collection by using converter adapters.</source>
          <target state="translated">Convierte la colección <ph id="ph1">&lt;see cref="T:System.AddIn.Contract.IListContract`1" /&gt;</ph> especificada en una colección <ph id="ph2">&lt;see cref="T:System.Collections.Generic.IList`1" /&gt;</ph> utilizando adaptadores de convertidor.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" uid="M:System.AddIn.Pipeline.CollectionAdapters.ToIList``2(System.AddIn.Contract.IListContract{``0},System.Converter{``0,``1},System.Converter{``1,``0})">
          <source>The converted collection.</source>
          <target state="translated">Colección que se ha convertido.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AddIn.Pipeline.CollectionAdapters.ToIList``2(System.AddIn.Contract.IListContract{``0},System.Converter{``0,``1},System.Converter{``1,``0})">
          <source>Use this method overload for <ph id="ph1">&lt;xref:System.AddIn.Contract.IListContract%601&gt;</ph> collections that contain types that must be adapted before they can be passed to the add-in or host (rather than simple serializable types that can be passed directly).</source>
          <target state="translated">Utilice esta sobrecarga del método para <ph id="ph1">&lt;xref:System.AddIn.Contract.IListContract%601&gt;</ph> colecciones que contienen tipos que deben adaptarse antes de que se puede pasar el complemento o host (en lugar de simples tipos serializables que se pueden pasar directamente).</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AddIn.Pipeline.CollectionAdapters.ToIList``2(System.AddIn.Contract.IListContract{``0},System.Converter{``0,``1},System.Converter{``1,``0})">
          <source>The host application or add-in can use the returned <ph id="ph1">&lt;xref:System.Collections.Generic.IList%601&gt;</ph> collection.</source>
          <target state="translated">La aplicación de host o el complemento puede utilizar el valor devuelto <ph id="ph1">&lt;xref:System.Collections.Generic.IList%601&gt;</ph> colección.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AddIn.Pipeline.CollectionAdapters.ToIList``2(System.AddIn.Contract.IListContract{``0},System.Converter{``0,``1},System.Converter{``1,``0})">
          <source>It will have a lifetime token for the remote <ph id="ph1">&lt;xref:System.AddIn.Contract.IListContract%601&gt;</ph>.</source>
          <target state="translated">Tendrá un token de duración para el control remoto <ph id="ph1">&lt;xref:System.AddIn.Contract.IListContract%601&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AddIn.Pipeline.CollectionAdapters.ToIListContract``1(System.Collections.Generic.IList{``0})">
          <source>The type of objects that are contained in the list.</source>
          <target state="translated">Tipo de objetos incluidos en la lista.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AddIn.Pipeline.CollectionAdapters.ToIListContract``1(System.Collections.Generic.IList{``0})">
          <source><bpt id="p1">&lt;c&gt;</bpt>T<ept id="p1">&lt;/c&gt;</ept> must be serializable.</source>
          <target state="translated"><bpt id="p1">&lt;c&gt;</bpt>T<ept id="p1">&lt;/c&gt;</ept> deben ser serializables.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" uid="M:System.AddIn.Pipeline.CollectionAdapters.ToIListContract``1(System.Collections.Generic.IList{``0})">
          <source>The collection to convert.</source>
          <target state="translated">Colección que se va a convertir.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" uid="M:System.AddIn.Pipeline.CollectionAdapters.ToIListContract``1(System.Collections.Generic.IList{``0})">
          <source>Converts a specified <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IList`1" /&gt;</ph> collection to an <ph id="ph2">&lt;see cref="T:System.AddIn.Contract.IListContract`1" /&gt;</ph> collection.</source>
          <target state="translated">Convierte la colección <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IList`1" /&gt;</ph> especificada en una colección <ph id="ph2">&lt;see cref="T:System.AddIn.Contract.IListContract`1" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" uid="M:System.AddIn.Pipeline.CollectionAdapters.ToIListContract``1(System.Collections.Generic.IList{``0})">
          <source>The converted collection.</source>
          <target state="translated">Colección que se ha convertido.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AddIn.Pipeline.CollectionAdapters.ToIListContract``1(System.Collections.Generic.IList{``0})">
          <source>The <ph id="ph1">&lt;xref:System.AddIn.Contract.IListContract%601&gt;</ph> collection can be marshaled across the isolation boundary between the add-in and its host application.</source>
          <target state="translated">El <ph id="ph1">&lt;xref:System.AddIn.Contract.IListContract%601&gt;</ph> colección puede calcularse a través del límite de aislamiento entre el complemento y su aplicación host.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AddIn.Pipeline.CollectionAdapters.ToIListContract``1(System.Collections.Generic.IList{``0})">
          <source>You should use this method overload only when the contents of the <ph id="ph1">&lt;xref:System.Collections.Generic.IList%601&gt;</ph> collection are serializable types that can be passed directly to the contract (rather than types that must be adapted into contracts).</source>
          <target state="translated">Debe utilizar esta sobrecarga del método solo cuando el contenido de la <ph id="ph1">&lt;xref:System.Collections.Generic.IList%601&gt;</ph> colección son tipos serializables que pueden pasarse directamente en el contrato (en lugar de tipos que deben adaptarse a los contratos).</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AddIn.Pipeline.CollectionAdapters.ToIListContract``1(System.Collections.Generic.IList{``0})">
          <source>The following example implements the class that defines an add-in side adapter pipeline segment.</source>
          <target state="translated">En el ejemplo siguiente se implementa la clase que define un segmento de canalización del adaptador de lado del complemento.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AddIn.Pipeline.CollectionAdapters.ToIListContract``1(System.Collections.Generic.IList{``0})">
          <source>It adapts the custom <ph id="ph1">`ProcessBooks`</ph> method by taking the <ph id="ph2">&lt;xref:System.Collections.Generic.IList%601&gt;</ph> collection passed from the add-in view segment and converting it to an <ph id="ph3">&lt;xref:System.AddIn.Contract.IListContract%601&gt;</ph> collection that can be marshaled across the isolation boundary to the host.</source>
          <target state="translated">Adapta personalizado <ph id="ph1">`ProcessBooks`</ph> método tomando el <ph id="ph2">&lt;xref:System.Collections.Generic.IList%601&gt;</ph> colección pasa desde el segmento de la vista de complemento y convertirlo en un <ph id="ph3">&lt;xref:System.AddIn.Contract.IListContract%601&gt;</ph> colección que se puede calcular referencias a través del límite de aislamiento para el host.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AddIn.Pipeline.CollectionAdapters.ToIListContract``2(System.Collections.Generic.IList{``0},System.Converter{``0,``1},System.Converter{``1,``0})">
          <source>The type that defines the view of the objects in the list.</source>
          <target state="translated">Tipo que define la vista de los objetos de la lista.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AddIn.Pipeline.CollectionAdapters.ToIListContract``2(System.Collections.Generic.IList{``0},System.Converter{``0,``1},System.Converter{``1,``0})">
          <source>The type that defines the contract for passing objects of type <bpt id="p1">&lt;c&gt;</bpt>TView<ept id="p1">&lt;/c&gt;</ept> across the isolation boundary.</source>
          <target state="translated">El tipo que define el contrato para pasar objetos de tipo <bpt id="p1">&lt;c&gt;</bpt>PROD117<ept id="p1">&lt;/c&gt;</ept> a través del límite de aislamiento.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" uid="M:System.AddIn.Pipeline.CollectionAdapters.ToIListContract``2(System.Collections.Generic.IList{``0},System.Converter{``0,``1},System.Converter{``1,``0})">
          <source>The collection to convert.</source>
          <target state="translated">Colección que se va a convertir.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" uid="M:System.AddIn.Pipeline.CollectionAdapters.ToIListContract``2(System.Collections.Generic.IList{``0},System.Converter{``0,``1},System.Converter{``1,``0})">
          <source>A converter that adapts the data from the type defined in the view to the type expected by the contract.</source>
          <target state="translated">Convertidor que adapta los datos del tipo definido en la vista al tipo que se espera en el contrato.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" uid="M:System.AddIn.Pipeline.CollectionAdapters.ToIListContract``2(System.Collections.Generic.IList{``0},System.Converter{``0,``1},System.Converter{``1,``0})">
          <source>A converter that adapts the data from the type defined in the contract to the type expected in the view.</source>
          <target state="translated">Convertidor que adapta los datos del tipo definido en el contrato al tipo que se espera en la vista.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" uid="M:System.AddIn.Pipeline.CollectionAdapters.ToIListContract``2(System.Collections.Generic.IList{``0},System.Converter{``0,``1},System.Converter{``1,``0})">
          <source>Converts a specified <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IList`1" /&gt;</ph> collection to an <ph id="ph2">&lt;see cref="T:System.AddIn.Contract.IListContract`1" /&gt;</ph> collection by using converter adapters.</source>
          <target state="translated">Convierte la colección <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IList`1" /&gt;</ph> especificada en una colección <ph id="ph2">&lt;see cref="T:System.AddIn.Contract.IListContract`1" /&gt;</ph> utilizando adaptadores de convertidor.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" uid="M:System.AddIn.Pipeline.CollectionAdapters.ToIListContract``2(System.Collections.Generic.IList{``0},System.Converter{``0,``1},System.Converter{``1,``0})">
          <source>The converted collection.</source>
          <target state="translated">Colección que se ha convertido.</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AddIn.Pipeline.CollectionAdapters.ToIListContract``2(System.Collections.Generic.IList{``0},System.Converter{``0,``1},System.Converter{``1,``0})">
          <source>Use this method overload for <ph id="ph1">&lt;xref:System.Collections.Generic.IList%601&gt;</ph> collections that contain types that must be adapted into contracts before they can be passed to the contract (rather than simple serializable types that can be passed directly).</source>
          <target state="translated">Utilice esta sobrecarga del método para <ph id="ph1">&lt;xref:System.Collections.Generic.IList%601&gt;</ph> colecciones que contienen tipos que deben adaptarse a los contratos antes de que se puede pasar el contrato (en lugar de simples tipos serializables que se pueden pasar directamente).</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AddIn.Pipeline.CollectionAdapters.ToIListContract``2(System.Collections.Generic.IList{``0},System.Converter{``0,``1},System.Converter{``1,``0})">
          <source>The <ph id="ph1">&lt;xref:System.AddIn.Contract.IListContract%601&gt;</ph> collection can be marshaled across the isolation boundary between an add-in and its host application.</source>
          <target state="translated">El <ph id="ph1">&lt;xref:System.AddIn.Contract.IListContract%601&gt;</ph> colección puede calcularse a través del límite de aislamiento entre un complemento y su aplicación host.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>