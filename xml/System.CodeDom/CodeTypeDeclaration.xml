<Type Name="CodeTypeDeclaration" FullName="System.CodeDom.CodeTypeDeclaration">
  <TypeSignature Language="C#" Value="public class CodeTypeDeclaration : System.CodeDom.CodeTypeMember" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable beforefieldinit CodeTypeDeclaration extends System.CodeDom.CodeTypeMember" />
  <TypeSignature Language="DocId" Value="T:System.CodeDom.CodeTypeDeclaration" />
  <TypeSignature Language="VB.NET" Value="Public Class CodeTypeDeclaration&#xA;Inherits CodeTypeMember" />
  <TypeSignature Language="C++ CLI" Value="public ref class CodeTypeDeclaration : System::CodeDom::CodeTypeMember" />
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.CodeDom</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.CodeDom.CodeTypeMember</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ClassInterface</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="151fe-101">Representa una declaración de tipos para una clase, estructura, interfaz o enumeración.</span><span class="sxs-lookup"><span data-stu-id="151fe-101">Represents a type declaration for a class, structure, interface, or enumeration.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="151fe-102"><xref:System.CodeDom.CodeTypeDeclaration> puede usarse para representar el código que declara una clase, estructura, interfaz o enumeración.</span><span class="sxs-lookup"><span data-stu-id="151fe-102"><xref:System.CodeDom.CodeTypeDeclaration> can be used to represent code that declares a class, structure, interface, or enumeration.</span></span> <span data-ttu-id="151fe-103"><xref:System.CodeDom.CodeTypeDeclaration> puede utilizarse para declarar un tipo que está anidado dentro de otro tipo.</span><span class="sxs-lookup"><span data-stu-id="151fe-103"><xref:System.CodeDom.CodeTypeDeclaration> can be used to declare a type that is nested within another type.</span></span>  
  
 <span data-ttu-id="151fe-104">El <xref:System.CodeDom.CodeTypeDeclaration.BaseTypes%2A> propiedad especifica el tipo base o tipos base del tipo que se declara.</span><span class="sxs-lookup"><span data-stu-id="151fe-104">The <xref:System.CodeDom.CodeTypeDeclaration.BaseTypes%2A> property specifies the base type or base types of the type being declared.</span></span> <span data-ttu-id="151fe-105">El <xref:System.CodeDom.CodeTypeDeclaration.Members%2A> propiedad contiene los miembros de tipo, que pueden incluir métodos, campos, propiedades, comentarios y otros tipos.</span><span class="sxs-lookup"><span data-stu-id="151fe-105">The <xref:System.CodeDom.CodeTypeDeclaration.Members%2A> property contains the type members, which can include methods, fields, properties, comments and other types.</span></span> <span data-ttu-id="151fe-106">El <xref:System.CodeDom.CodeTypeDeclaration.TypeAttributes%2A> propiedad indica la <xref:System.Reflection.TypeAttributes> valores para la declaración de tipos, que indican la categoría del tipo.</span><span class="sxs-lookup"><span data-stu-id="151fe-106">The <xref:System.CodeDom.CodeTypeDeclaration.TypeAttributes%2A> property indicates the <xref:System.Reflection.TypeAttributes> values for the type declaration, which indicate the type category of the type.</span></span> <span data-ttu-id="151fe-107">El <xref:System.CodeDom.CodeTypeDeclaration.IsClass%2A>, <xref:System.CodeDom.CodeTypeDeclaration.IsStruct%2A>, <xref:System.CodeDom.CodeTypeDeclaration.IsEnum%2A>, y <xref:System.CodeDom.CodeTypeDeclaration.IsInterface%2A> métodos indican si el tipo es una clase, estructura, enumeración o tipo de interfaz, respectivamente.</span><span class="sxs-lookup"><span data-stu-id="151fe-107">The <xref:System.CodeDom.CodeTypeDeclaration.IsClass%2A>, <xref:System.CodeDom.CodeTypeDeclaration.IsStruct%2A>, <xref:System.CodeDom.CodeTypeDeclaration.IsEnum%2A>, and <xref:System.CodeDom.CodeTypeDeclaration.IsInterface%2A> methods indicate whether the type is a class, structure, enumeration, or interface type, respectively.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="151fe-108">Algunos lenguajes de programación solo admiten la declaración de tipos de referencia, o de clases.</span><span class="sxs-lookup"><span data-stu-id="151fe-108">Some programming languages only support the declaration of reference types, or classes.</span></span> <span data-ttu-id="151fe-109">Para comprobar si un generador de código de CodeDOM específico del lenguaje para la compatibilidad para la declaración de interfaces, enumeraciones o tipos de valor, llame a la <xref:System.CodeDom.Compiler.ICodeGenerator.Supports%2A> método para comprobar la correspondiente <xref:System.CodeDom.Compiler.GeneratorSupport> marcas.</span><span class="sxs-lookup"><span data-stu-id="151fe-109">To check a language-specific CodeDOM code generator for support for declaring interfaces, enumerations, or value types, call the <xref:System.CodeDom.Compiler.ICodeGenerator.Supports%2A> method to test for the appropriate <xref:System.CodeDom.Compiler.GeneratorSupport> flags.</span></span> <span data-ttu-id="151fe-110"><xref:System.CodeDom.Compiler.GeneratorSupport.DeclareInterfaces> indica la compatibilidad para las interfaces, <xref:System.CodeDom.Compiler.GeneratorSupport.DeclareEnums> indica compatibilidad con las enumeraciones, y <xref:System.CodeDom.Compiler.GeneratorSupport.DeclareValueTypes> indica compatibilidad con tipos de valor como estructuras.</span><span class="sxs-lookup"><span data-stu-id="151fe-110"><xref:System.CodeDom.Compiler.GeneratorSupport.DeclareInterfaces> indicates support for interfaces, <xref:System.CodeDom.Compiler.GeneratorSupport.DeclareEnums> indicates support for enumerations, and <xref:System.CodeDom.Compiler.GeneratorSupport.DeclareValueTypes> indicates support for value types such as structures.</span></span>  
  
 <span data-ttu-id="151fe-111">Puede generar una clase o una implementación de la estructura en una declaración completa, o extender la implementación en varias declaraciones.</span><span class="sxs-lookup"><span data-stu-id="151fe-111">You can build a class or a structure implementation in one complete declaration, or spread the implementation across multiple declarations.</span></span> <span data-ttu-id="151fe-112">El <xref:System.CodeDom.CodeTypeDeclaration.IsPartial%2A> propiedad indica si la declaración del tipo es completa o parcial.</span><span class="sxs-lookup"><span data-stu-id="151fe-112">The <xref:System.CodeDom.CodeTypeDeclaration.IsPartial%2A> property indicates whether the type declaration is complete or partial.</span></span> <span data-ttu-id="151fe-113">No todos los generadores de código admiten declaraciones parciales de tipos, por lo que debe probar esta compatibilidad llamando a la <xref:System.CodeDom.Compiler.ICodeGenerator.Supports%2A> método con la marca <xref:System.CodeDom.Compiler.GeneratorSupport.PartialTypes>.</span><span class="sxs-lookup"><span data-stu-id="151fe-113">Not all code generators support partial type declarations, so you should test for this support by calling the <xref:System.CodeDom.Compiler.ICodeGenerator.Supports%2A> method with the flag <xref:System.CodeDom.Compiler.GeneratorSupport.PartialTypes>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="151fe-114">Este ejemplo muestra cómo utilizar un <xref:System.CodeDom.CodeTypeDeclaration> para declarar un tipo.</span><span class="sxs-lookup"><span data-stu-id="151fe-114">This example demonstrates using a <xref:System.CodeDom.CodeTypeDeclaration> to declare a type.</span></span>  
  
 [!code-cpp[CodeTypeDeclarationExample#2](~/samples/snippets/cpp/VS_Snippets_CLR/CodeTypeDeclarationExample/CPP/codetypedeclarationexample.cpp#2)]
 [!code-csharp[CodeTypeDeclarationExample#2](~/samples/snippets/csharp/VS_Snippets_CLR/CodeTypeDeclarationExample/CS/codetypedeclarationexample.cs#2)]
 [!code-vb[CodeTypeDeclarationExample#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/CodeTypeDeclarationExample/VB/codetypedeclarationexample.vb#2)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.CodeDom.CodeTypeDeclarationCollection" />
    <altmember cref="T:System.CodeDom.Compiler.GeneratorSupport" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="151fe-115">Inicializa una nueva instancia de la clase <see cref="T:System.CodeDom.CodeTypeDeclaration" />.</span><span class="sxs-lookup"><span data-stu-id="151fe-115">Initializes a new instance of the <see cref="T:System.CodeDom.CodeTypeDeclaration" /> class.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CodeTypeDeclaration ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.CodeTypeDeclaration.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; CodeTypeDeclaration();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="151fe-116">Inicializa una nueva instancia de la clase <see cref="T:System.CodeDom.CodeTypeDeclaration" />.</span><span class="sxs-lookup"><span data-stu-id="151fe-116">Initializes a new instance of the <see cref="T:System.CodeDom.CodeTypeDeclaration" /> class.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CodeTypeDeclaration (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.CodeTypeDeclaration.#ctor(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (name As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; CodeTypeDeclaration(System::String ^ name);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="151fe-117">Nombre del nuevo tipo.</span><span class="sxs-lookup"><span data-stu-id="151fe-117">The name for the new type.</span></span></param>
        <summary><span data-ttu-id="151fe-118">Inicializa una nueva instancia de la clase <see cref="T:System.CodeDom.CodeTypeDeclaration" /> con el nombre especificado.</span><span class="sxs-lookup"><span data-stu-id="151fe-118">Initializes a new instance of the <see cref="T:System.CodeDom.CodeTypeDeclaration" /> class with the specified name.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="BaseTypes">
      <MemberSignature Language="C#" Value="public System.CodeDom.CodeTypeReferenceCollection BaseTypes { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.CodeDom.CodeTypeReferenceCollection BaseTypes" />
      <MemberSignature Language="DocId" Value="P:System.CodeDom.CodeTypeDeclaration.BaseTypes" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property BaseTypes As CodeTypeReferenceCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::CodeDom::CodeTypeReferenceCollection ^ BaseTypes { System::CodeDom::CodeTypeReferenceCollection ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.CodeDom.CodeTypeReferenceCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="151fe-119">Obtiene los tipos base del tipo.</span><span class="sxs-lookup"><span data-stu-id="151fe-119">Gets the base types of the type.</span></span></summary>
        <value><span data-ttu-id="151fe-120">Objeto <see cref="T:System.CodeDom.CodeTypeReferenceCollection" /> que indica los tipos base del tipo.</span><span class="sxs-lookup"><span data-stu-id="151fe-120">A <see cref="T:System.CodeDom.CodeTypeReferenceCollection" /> object that indicates the base types of the type.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="151fe-121">Para generar una clase en Visual Basic que no hereda de un tipo base, pero que implementan una o más interfaces, debe incluir <xref:System.Object> como el primer elemento de la <xref:System.CodeDom.CodeTypeDeclaration.BaseTypes%2A> colección.</span><span class="sxs-lookup"><span data-stu-id="151fe-121">To generate a class in Visual Basic that does not inherit from a base type, but that does implement one or more interfaces, you must include <xref:System.Object> as the first item in the <xref:System.CodeDom.CodeTypeDeclaration.BaseTypes%2A> collection.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="151fe-122">En .NET Framework versión 2.0 no es necesario el <xref:System.CodeDom.CodeTypeReference> para <xref:System.Object> si la interfaz que está implementando ya existe y se hace referencia a él por tipo.</span><span class="sxs-lookup"><span data-stu-id="151fe-122">In the .NET Framework version 2.0 you do not need the <xref:System.CodeDom.CodeTypeReference> for <xref:System.Object> if the interface you are implementing already exists and you are referring to it by type.</span></span> <span data-ttu-id="151fe-123">Por ejemplo, si está implementando el <xref:System.Collections.ICollection> interfaz y lo agrega a la colección con esta instrucción, `ctd.BaseTypes.Add(New CodeTypeReference(typeof(ICollection)))`, no es necesario anterior `ctd.BaseTypes.Add(New CodeTypeReference(GetType(Object)))` instrucción.</span><span class="sxs-lookup"><span data-stu-id="151fe-123">For example, if you are implementing the <xref:System.Collections.ICollection> interface and add it to the collection with this statement, `ctd.BaseTypes.Add(New CodeTypeReference(typeof(ICollection)))`, you do not need the preceding `ctd.BaseTypes.Add(New CodeTypeReference(GetType(Object)))` statement.</span></span>  
  
 <span data-ttu-id="151fe-124">El código siguiente muestra la adición de un <xref:System.CodeDom.CodeTypeReference> a la colección que hace referencia a <xref:System.Object>.</span><span class="sxs-lookup"><span data-stu-id="151fe-124">The following code illustrates the addition of a <xref:System.CodeDom.CodeTypeReference> to the collection that refers to <xref:System.Object>.</span></span>  
  
```vb  
Dim ctd As New CodeTypeDeclaration("Class1")  
ctd.IsClass = True  
ctd.BaseTypes.Add(New CodeTypeReference(GetType(Object)))  
ctd.BaseTypes.Add(New CodeTypeReference("Interface1"))  
```  
  
```csharp  
CodeTypeDeclaration ctd = new CodeTypeDeclaration("Class1");  
ctd.IsClass = true;  
ctd.BaseTypes.Add(new CodeTypeReference(typeof(Object)));  
ctd.BaseTypes.Add(new CodeTypeReference("Interface1"));  
```  
  
 <span data-ttu-id="151fe-125">El código anterior genera el equivalente del siguiente código de Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="151fe-125">The preceding code generates the equivalent of the following Visual Basic code.</span></span>  
  
```vb  
Public Class Class1  
Implements Interface1  
```  
  
 <span data-ttu-id="151fe-126">Sin embargo, el código de Visual Basic generado realmente es el siguiente.</span><span class="sxs-lookup"><span data-stu-id="151fe-126">However, the Visual Basic code actually generated is the following.</span></span>  
  
```vb  
Public Class Class1  
Inherits Object  
Implements Interface1  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.CodeDom.CodeTypeReferenceCollection" />
      </Docs>
    </Member>
    <Member MemberName="IsClass">
      <MemberSignature Language="C#" Value="public bool IsClass { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsClass" />
      <MemberSignature Language="DocId" Value="P:System.CodeDom.CodeTypeDeclaration.IsClass" />
      <MemberSignature Language="VB.NET" Value="Public Property IsClass As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsClass { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="151fe-127">Obtiene o establece un valor que indica si el tipo es una clase o un tipo de referencia.</span><span class="sxs-lookup"><span data-stu-id="151fe-127">Gets or sets a value indicating whether the type is a class or reference type.</span></span></summary>
        <value>
          <span data-ttu-id="151fe-128">Es <see langword="true" /> si el tipo es una clase o un tipo de referencia; de lo contrario, es <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="151fe-128"><see langword="true" /> if the type is a class or reference type; otherwise, <see langword="false" />.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsEnum">
      <MemberSignature Language="C#" Value="public bool IsEnum { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsEnum" />
      <MemberSignature Language="DocId" Value="P:System.CodeDom.CodeTypeDeclaration.IsEnum" />
      <MemberSignature Language="VB.NET" Value="Public Property IsEnum As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsEnum { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="151fe-129">Obtiene o establece un valor que indica si el tipo es una enumeración.</span><span class="sxs-lookup"><span data-stu-id="151fe-129">Gets or sets a value indicating whether the type is an enumeration.</span></span></summary>
        <value>
          <span data-ttu-id="151fe-130">Es <see langword="true" /> si el tipo es una enumeración; en caso contrario, es <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="151fe-130"><see langword="true" /> if the type is an enumeration; otherwise, <see langword="false" />.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsInterface">
      <MemberSignature Language="C#" Value="public bool IsInterface { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsInterface" />
      <MemberSignature Language="DocId" Value="P:System.CodeDom.CodeTypeDeclaration.IsInterface" />
      <MemberSignature Language="VB.NET" Value="Public Property IsInterface As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsInterface { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="151fe-131">Obtiene o establece un valor que indica si el tipo es una interfaz.</span><span class="sxs-lookup"><span data-stu-id="151fe-131">Gets or sets a value indicating whether the type is an interface.</span></span></summary>
        <value>
          <span data-ttu-id="151fe-132">Es <see langword="true" /> si el tipo es una interfaz; en caso contrario, es <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="151fe-132"><see langword="true" /> if the type is an interface; otherwise, <see langword="false" />.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsPartial">
      <MemberSignature Language="C#" Value="public bool IsPartial { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsPartial" />
      <MemberSignature Language="DocId" Value="P:System.CodeDom.CodeTypeDeclaration.IsPartial" />
      <MemberSignature Language="VB.NET" Value="Public Property IsPartial As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsPartial { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="151fe-133">Obtiene o establece un valor que indica si la declaración de tipos es completa o parcial.</span><span class="sxs-lookup"><span data-stu-id="151fe-133">Gets or sets a value indicating whether the type declaration is complete or partial.</span></span></summary>
        <value>
          <span data-ttu-id="151fe-134">Es <see langword="true" /> si la declaración de clase o de estructura es una representación parcial de la implementación; es <see langword="false" /> si la declaración es una implementación completa de la clase o la estructura.</span><span class="sxs-lookup"><span data-stu-id="151fe-134"><see langword="true" /> if the class or structure declaration is a partial representation of the implementation; <see langword="false" /> if the declaration is a complete implementation of the class or structure.</span></span> <span data-ttu-id="151fe-135">El valor predeterminado es <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="151fe-135">The default is <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="151fe-136">Puede generar una implementación de clase o estructura en una declaración completa, o extender la implementación en varias declaraciones.</span><span class="sxs-lookup"><span data-stu-id="151fe-136">You can build a class or structure implementation in one complete declaration, or spread the implementation across multiple declarations.</span></span> <span data-ttu-id="151fe-137">Las implementaciones se proporcionan normalmente en la declaración de un tipo completo.</span><span class="sxs-lookup"><span data-stu-id="151fe-137">Implementations are commonly supplied in one complete type declaration.</span></span> <span data-ttu-id="151fe-138">En este caso, establezca la declaración de tipos <xref:System.CodeDom.CodeTypeDeclaration.IsPartial%2A> propiedad `false`, lo que indica que la declaración de tipos representa todos los detalles de la implementación de clase o estructura.</span><span class="sxs-lookup"><span data-stu-id="151fe-138">In this case, set the type declaration <xref:System.CodeDom.CodeTypeDeclaration.IsPartial%2A> property to `false`, which indicates that the type declaration represents all details for the class or structure implementation.</span></span>  
  
 <span data-ttu-id="151fe-139">Una declaración de tipo parcial facilita la creación de diferentes partes de una implementación de clase o estructura en módulos diferentes de la aplicación.</span><span class="sxs-lookup"><span data-stu-id="151fe-139">A partial type declaration makes it easier to build different portions of a class or structure implementation in different modules of your application.</span></span> <span data-ttu-id="151fe-140">Las declaraciones parciales de tipos se pueda almacenar en un archivo de origen o distribuir en varios archivos de origen que se compilan finalmente juntos para formar la implementación de tipo combinado.</span><span class="sxs-lookup"><span data-stu-id="151fe-140">The partial type declarations can be stored in one source file, or spread across multiple source files that are eventually compiled together to form the combined type implementation.</span></span>  
  
 <span data-ttu-id="151fe-141">El lenguaje C# admite declaraciones parciales de tipos de clases y estructuras mediante la `partial` palabra clave.</span><span class="sxs-lookup"><span data-stu-id="151fe-141">The C# language supports partial type declarations of classes and structures through the `partial` keyword.</span></span> <span data-ttu-id="151fe-142">Visual Basic admite declaraciones parciales de tipos de clases y estructuras con el `Partial` palabra clave.</span><span class="sxs-lookup"><span data-stu-id="151fe-142">Visual Basic supports partial type declarations of classes and structures with the `Partial` keyword.</span></span> <span data-ttu-id="151fe-143">No todos los generadores de código admiten declaraciones parciales de tipos, por lo que debe probar esta compatibilidad llamando a la <xref:System.CodeDom.Compiler.ICodeGenerator.Supports%2A> método con la marca <xref:System.CodeDom.Compiler.GeneratorSupport.PartialTypes>.</span><span class="sxs-lookup"><span data-stu-id="151fe-143">Not all code generators support partial type declarations, so you should test for this support by calling the <xref:System.CodeDom.Compiler.ICodeGenerator.Supports%2A> method with the flag <xref:System.CodeDom.Compiler.GeneratorSupport.PartialTypes>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="151fe-144">Declaraciones parciales de tipos se admiten para las clases y estructuras.</span><span class="sxs-lookup"><span data-stu-id="151fe-144">Partial type declarations are supported for classes and structures.</span></span> <span data-ttu-id="151fe-145">Si especifica una declaración de tipo parcial para una interfaz o enumeración, el código generado produce errores de compilador.</span><span class="sxs-lookup"><span data-stu-id="151fe-145">If you specify a partial type declaration for an enumeration or interface, the generated code produces compiler errors.</span></span>  
  
 <span data-ttu-id="151fe-146">Al proporcionar una implementación de clase o estructura entre varias declaraciones, establezca la <xref:System.CodeDom.CodeTypeDeclaration.IsPartial%2A> propiedad `true` para la declaración inicial y todas las declaraciones complementarias.</span><span class="sxs-lookup"><span data-stu-id="151fe-146">When supplying a class or structure implementation across multiple declarations, set the <xref:System.CodeDom.CodeTypeDeclaration.IsPartial%2A> property to `true` for the initial declaration and all supplemental declarations.</span></span> <span data-ttu-id="151fe-147">La declaración inicial completa debe especificar el tipo de firma, incluidos los modificadores de acceso, los tipos heredados y las interfaces implementadas.</span><span class="sxs-lookup"><span data-stu-id="151fe-147">The initial declaration must fully specify the type signature, including access modifiers, inherited types, and implemented interfaces.</span></span> <span data-ttu-id="151fe-148">Las declaraciones complementarias no es necesario volver a especificar la firma del tipo.</span><span class="sxs-lookup"><span data-stu-id="151fe-148">The supplementary declarations do not need to re-specify the type signature.</span></span> <span data-ttu-id="151fe-149">Normalmente se produce un error de compilador si vuelve a definir la firma de tipo en una declaración complementaria.</span><span class="sxs-lookup"><span data-stu-id="151fe-149">A compiler error typically results if you redefine the type signature in a supplementary declaration.</span></span>  
  
 <span data-ttu-id="151fe-150">Visual Studio 2005 utiliza tipos parciales para separar el código generado por el usuario del código del diseñador.</span><span class="sxs-lookup"><span data-stu-id="151fe-150">Visual Studio 2005 uses partial types to separate user-generated code from designer code.</span></span> <span data-ttu-id="151fe-151">En los proyectos de aplicación de Windows de Visual Basic, el código de usuario se coloca en una clase parcial que no está calificada por el `Partial` palabra clave; proporcionados por el Diseñador de código aparece en la clase parcial que tiene el `Partial` (palabra clave).</span><span class="sxs-lookup"><span data-stu-id="151fe-151">In Visual Basic Windows Application projects, the user code is placed in a partial class that is not qualified by the `Partial` keyword; the designer-provided code appears in the partial class that has the `Partial` keyword.</span></span> <span data-ttu-id="151fe-152">En C#, el código de usuario y el código del diseñador aparecen en clases parciales identificadas por la `partial` (palabra clave).</span><span class="sxs-lookup"><span data-stu-id="151fe-152">In C#, both the user code and designer code appear in partial classes identified by the `partial` keyword.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="151fe-153">Este ejemplo muestra cómo utilizar un <xref:System.CodeDom.CodeTypeDeclaration> para proporcionar una implementación de clase en varias declaraciones.</span><span class="sxs-lookup"><span data-stu-id="151fe-153">This example demonstrates using a <xref:System.CodeDom.CodeTypeDeclaration> to supply a class implementation across multiple declarations.</span></span> <span data-ttu-id="151fe-154">En el ejemplo se compila la instrucción de declaración de clase inicial y establece el <xref:System.CodeDom.CodeTypeDeclaration.IsPartial%2A> propiedad `true`.</span><span class="sxs-lookup"><span data-stu-id="151fe-154">The example builds the initial class declaration statement and sets the <xref:System.CodeDom.CodeTypeDeclaration.IsPartial%2A> property to `true`.</span></span>  
  
 [!code-cpp[CodeDomPartialTypeExample#3](~/samples/snippets/cpp/VS_Snippets_CLR/CodeDomPartialTypeExample/CPP/source.cpp#3)]
 [!code-csharp[CodeDomPartialTypeExample#3](~/samples/snippets/csharp/VS_Snippets_CLR/CodeDomPartialTypeExample/CS/source.cs#3)]
 [!code-vb[CodeDomPartialTypeExample#3](~/samples/snippets/visualbasic/VS_Snippets_CLR/CodeDomPartialTypeExample/VB/source.vb#3)]  
  
 <span data-ttu-id="151fe-155">Un método diferente en el ejemplo extiende la implementación de la clase.</span><span class="sxs-lookup"><span data-stu-id="151fe-155">A different method in the example extends the class implementation.</span></span> <span data-ttu-id="151fe-156">Este método crea una nueva instrucción de declaración de tipo para la clase existente y establece el <xref:System.CodeDom.CodeTypeDeclaration.IsPartial%2A> propiedad `true`.</span><span class="sxs-lookup"><span data-stu-id="151fe-156">This method builds a new type declaration statement for the existing class and sets the <xref:System.CodeDom.CodeTypeDeclaration.IsPartial%2A> property to `true`.</span></span> <span data-ttu-id="151fe-157">El compilador combina las dos declaraciones parciales de tipos para la implementación de clase completa.</span><span class="sxs-lookup"><span data-stu-id="151fe-157">The compiler combines the two partial type declarations together for the complete class implementation.</span></span>  
  
 [!code-cpp[CodeDomPartialTypeExample#7](~/samples/snippets/cpp/VS_Snippets_CLR/CodeDomPartialTypeExample/CPP/source.cpp#7)]
 [!code-csharp[CodeDomPartialTypeExample#7](~/samples/snippets/csharp/VS_Snippets_CLR/CodeDomPartialTypeExample/CS/source.cs#7)]
 [!code-vb[CodeDomPartialTypeExample#7](~/samples/snippets/visualbasic/VS_Snippets_CLR/CodeDomPartialTypeExample/VB/source.vb#7)]  
  
 ]]></format>
        </remarks>
        <altmember cref="F:System.CodeDom.Compiler.GeneratorSupport.PartialTypes" />
      </Docs>
    </Member>
    <Member MemberName="IsStruct">
      <MemberSignature Language="C#" Value="public bool IsStruct { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsStruct" />
      <MemberSignature Language="DocId" Value="P:System.CodeDom.CodeTypeDeclaration.IsStruct" />
      <MemberSignature Language="VB.NET" Value="Public Property IsStruct As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsStruct { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="151fe-158">Obtiene o establece un valor que indica si el tipo es un tipo de valor (struct).</span><span class="sxs-lookup"><span data-stu-id="151fe-158">Gets or sets a value indicating whether the type is a value type (struct).</span></span></summary>
        <value>
          <span data-ttu-id="151fe-159">Es <see langword="true" /> si el tipo es un tipo de valor; de lo contrario, es <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="151fe-159"><see langword="true" /> if the type is a value type; otherwise, <see langword="false" />.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Members">
      <MemberSignature Language="C#" Value="public System.CodeDom.CodeTypeMemberCollection Members { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.CodeDom.CodeTypeMemberCollection Members" />
      <MemberSignature Language="DocId" Value="P:System.CodeDom.CodeTypeDeclaration.Members" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Members As CodeTypeMemberCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::CodeDom::CodeTypeMemberCollection ^ Members { System::CodeDom::CodeTypeMemberCollection ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.CodeDom.CodeTypeMemberCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="151fe-160">Obtiene la colección de miembros de clase del tipo representado.</span><span class="sxs-lookup"><span data-stu-id="151fe-160">Gets the collection of class members for the represented type.</span></span></summary>
        <value><span data-ttu-id="151fe-161">Objeto <see cref="T:System.CodeDom.CodeTypeMemberCollection" /> que indica los miembros de la clase.</span><span class="sxs-lookup"><span data-stu-id="151fe-161">A <see cref="T:System.CodeDom.CodeTypeMemberCollection" /> object that indicates the class members.</span></span></value>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.CodeDom.CodeTypeMemberCollection" />
      </Docs>
    </Member>
    <Member MemberName="PopulateBaseTypes">
      <MemberSignature Language="C#" Value="public event EventHandler PopulateBaseTypes;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler PopulateBaseTypes" />
      <MemberSignature Language="DocId" Value="E:System.CodeDom.CodeTypeDeclaration.PopulateBaseTypes" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PopulateBaseTypes As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ PopulateBaseTypes;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="151fe-162">Se produce cuando se obtiene acceso a la colección <see cref="P:System.CodeDom.CodeTypeDeclaration.BaseTypes" /> por primera vez.</span><span class="sxs-lookup"><span data-stu-id="151fe-162">Occurs when the <see cref="P:System.CodeDom.CodeTypeDeclaration.BaseTypes" /> collection is accessed for the first time.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PopulateMembers">
      <MemberSignature Language="C#" Value="public event EventHandler PopulateMembers;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler PopulateMembers" />
      <MemberSignature Language="DocId" Value="E:System.CodeDom.CodeTypeDeclaration.PopulateMembers" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PopulateMembers As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ PopulateMembers;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="151fe-163">Se produce cuando se obtiene acceso a la colección <see cref="P:System.CodeDom.CodeTypeDeclaration.Members" /> por primera vez.</span><span class="sxs-lookup"><span data-stu-id="151fe-163">Occurs when the <see cref="P:System.CodeDom.CodeTypeDeclaration.Members" /> collection is accessed for the first time.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TypeAttributes">
      <MemberSignature Language="C#" Value="public System.Reflection.TypeAttributes TypeAttributes { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Reflection.TypeAttributes TypeAttributes" />
      <MemberSignature Language="DocId" Value="P:System.CodeDom.CodeTypeDeclaration.TypeAttributes" />
      <MemberSignature Language="VB.NET" Value="Public Property TypeAttributes As TypeAttributes" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Reflection::TypeAttributes TypeAttributes { System::Reflection::TypeAttributes get(); void set(System::Reflection::TypeAttributes value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.TypeAttributes</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="151fe-164">Obtiene o establece los atributos del tipo.</span><span class="sxs-lookup"><span data-stu-id="151fe-164">Gets or sets the attributes of the type.</span></span></summary>
        <value><span data-ttu-id="151fe-165">Objeto <see cref="T:System.Reflection.TypeAttributes" /> que indica los atributos del tipo.</span><span class="sxs-lookup"><span data-stu-id="151fe-165">A <see cref="T:System.Reflection.TypeAttributes" /> object that indicates the attributes of the type.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="151fe-166">El <xref:System.Reflection.TypeAttributes> propiedad contiene el mismo tipo de valores usados por <xref:System.Reflection> al investigar un tipo en tiempo de ejecución.</span><span class="sxs-lookup"><span data-stu-id="151fe-166">The <xref:System.Reflection.TypeAttributes> property contains the same type of values used by <xref:System.Reflection> when investigating a type at run time.</span></span> <span data-ttu-id="151fe-167">Muchas de estas marcas no se corresponden con la sintaxis de declaración de tipo para algunos idiomas.</span><span class="sxs-lookup"><span data-stu-id="151fe-167">Many of these flags do not correspond to the type declaration syntax for some languages.</span></span> <span data-ttu-id="151fe-168">Como resultado, solo las marcas siguientes son importantes para <xref:System.CodeDom.CodeTypeDeclaration> : <xref:System.Reflection.TypeAttributes.Class>, <xref:System.Reflection.TypeAttributes.Interface>, <xref:System.Reflection.TypeAttributes.Abstract>, <xref:System.Reflection.TypeAttributes.Sealed>, <xref:System.Reflection.TypeAttributes.Public>, <xref:System.Reflection.TypeAttributes.NotPublic>, <xref:System.Reflection.TypeAttributes.NestedPublic>, y <xref:System.Reflection.TypeAttributes.NestedPrivate>.</span><span class="sxs-lookup"><span data-stu-id="151fe-168">As a result, only the following flags are significant to <xref:System.CodeDom.CodeTypeDeclaration> : <xref:System.Reflection.TypeAttributes.Class>, <xref:System.Reflection.TypeAttributes.Interface>, <xref:System.Reflection.TypeAttributes.Abstract>, <xref:System.Reflection.TypeAttributes.Sealed>, <xref:System.Reflection.TypeAttributes.Public>, <xref:System.Reflection.TypeAttributes.NotPublic>, <xref:System.Reflection.TypeAttributes.NestedPublic>, and <xref:System.Reflection.TypeAttributes.NestedPrivate>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="151fe-169">Algunos de los indicadores como <xref:System.Reflection.TypeAttributes.Abstract> se superponen con el significado de los indicadores de la <xref:System.CodeDom.CodeTypeMember.Attributes%2A> propiedad de <xref:System.CodeDom.CodeTypeDeclaration> que se hereda de <xref:System.CodeDom.CodeTypeMember>.</span><span class="sxs-lookup"><span data-stu-id="151fe-169">Some of the flags such as <xref:System.Reflection.TypeAttributes.Abstract> overlap with the meaning of flags in the <xref:System.CodeDom.CodeTypeMember.Attributes%2A> property of <xref:System.CodeDom.CodeTypeDeclaration> that is inherited from <xref:System.CodeDom.CodeTypeMember>.</span></span> <span data-ttu-id="151fe-170">El <xref:System.CodeDom.CodeTypeMember.Attributes%2A> propiedad es un efecto secundario de la <xref:System.CodeDom.CodeTypeDeclaration> clase que hereda de <xref:System.CodeDom.CodeTypeMember> para que las clases pueden anidarse.</span><span class="sxs-lookup"><span data-stu-id="151fe-170">The <xref:System.CodeDom.CodeTypeMember.Attributes%2A> property is a side effect of the <xref:System.CodeDom.CodeTypeDeclaration> class inheriting from <xref:System.CodeDom.CodeTypeMember> so that classes can be nested.</span></span> <span data-ttu-id="151fe-171">Las marcas en el <xref:System.CodeDom.CodeTypeDeclaration.TypeAttributes%2A> propiedad debe utilizarse en lugar de las marcas en el <xref:System.CodeDom.CodeTypeMember.Attributes%2A> propiedad.</span><span class="sxs-lookup"><span data-stu-id="151fe-171">The flags in the <xref:System.CodeDom.CodeTypeDeclaration.TypeAttributes%2A> property should be used instead of the flags in the <xref:System.CodeDom.CodeTypeMember.Attributes%2A> property.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="151fe-172">El modelo para establecer las marcas de visibilidad (marcadores que contienen las palabras `Public` o `Nested`) es enmascarar visibilidad de todos los indicadores con el <xref:System.Reflection.TypeAttributes.VisibilityMask> y, a continuación, defina el indicador de visibilidad deseado.</span><span class="sxs-lookup"><span data-stu-id="151fe-172">The pattern for setting the visibility flags (flags containing the words `Public` or `Nested`) is to mask out all visibility flags using the <xref:System.Reflection.TypeAttributes.VisibilityMask> and then set the desired visibility flag.</span></span> <span data-ttu-id="151fe-173">Por ejemplo, el código instrucción de C# para identificar la <xref:System.CodeDom.CodeTypeDeclaration> (denominado `cd`) como una clase interna es `cd.TypeAttributes = (cd.TypeAttributes & ~TypeAttributes.VisibilityMask) | TypeAttributes.NotPublic;`.</span><span class="sxs-lookup"><span data-stu-id="151fe-173">For example, the C# code statement to identify the <xref:System.CodeDom.CodeTypeDeclaration> (named `cd`) as an internal class is `cd.TypeAttributes = (cd.TypeAttributes & ~TypeAttributes.VisibilityMask) | TypeAttributes.NotPublic;`.</span></span>  <span data-ttu-id="151fe-174">El código para establecer el mismo valor en Visual Basic es `cd.TypeAttributes = (cd.TypeAttributes And (TypeAttributes.VisibilityMask Xor -1)) Or TypeAttributes.NotPublic`.</span><span class="sxs-lookup"><span data-stu-id="151fe-174">The code to set the same value in Visual Basic is `cd.TypeAttributes = (cd.TypeAttributes And (TypeAttributes.VisibilityMask Xor -1)) Or TypeAttributes.NotPublic`.</span></span> <span data-ttu-id="151fe-175">Establecer el <xref:System.CodeDom.CodeTypeDeclaration.TypeAttributes%2A> propiedad directamente a un marcador de visibilidad (`cd.TypeAttributes = TypeAttributes.NotPublic;`) borra todas las otras marcas que se puede establecer.</span><span class="sxs-lookup"><span data-stu-id="151fe-175">Setting the <xref:System.CodeDom.CodeTypeDeclaration.TypeAttributes%2A> property directly to a visibility flag (`cd.TypeAttributes = TypeAttributes.NotPublic;`) erases all other flags that might be set.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Reflection.TypeAttributes" />
      </Docs>
    </Member>
    <Member MemberName="TypeParameters">
      <MemberSignature Language="C#" Value="public System.CodeDom.CodeTypeParameterCollection TypeParameters { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.CodeDom.CodeTypeParameterCollection TypeParameters" />
      <MemberSignature Language="DocId" Value="P:System.CodeDom.CodeTypeDeclaration.TypeParameters" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property TypeParameters As CodeTypeParameterCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::CodeDom::CodeTypeParameterCollection ^ TypeParameters { System::CodeDom::CodeTypeParameterCollection ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.CodeDom.CodeTypeParameterCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="151fe-176">Obtiene los parámetros de tipo para la declaración de tipos.</span><span class="sxs-lookup"><span data-stu-id="151fe-176">Gets the type parameters for the type declaration.</span></span></summary>
        <value><span data-ttu-id="151fe-177">Colección <see cref="T:System.CodeDom.CodeTypeParameterCollection" /> que contiene los parámetros de tipo para la declaración de tipos.</span><span class="sxs-lookup"><span data-stu-id="151fe-177">A <see cref="T:System.CodeDom.CodeTypeParameterCollection" /> that contains the type parameters for the type declaration.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="151fe-178">Una declaración de tipo genérico contiene uno o más tipos no especificados conocidos como parámetros de tipo.</span><span class="sxs-lookup"><span data-stu-id="151fe-178">A generic type declaration contains one or more unspecified types known as type parameters.</span></span> <span data-ttu-id="151fe-179">Hace referencia al nombre de un parámetro de tipo para el tipo dentro del cuerpo de la declaración genérica.</span><span class="sxs-lookup"><span data-stu-id="151fe-179">A type parameter name stands for the type within the body of the generic declaration.</span></span> <span data-ttu-id="151fe-180">Por ejemplo, la declaración genérica para la <xref:System.Collections.Generic.List%601> clase contiene el parámetro de tipo `T`.</span><span class="sxs-lookup"><span data-stu-id="151fe-180">For example, the generic declaration for the <xref:System.Collections.Generic.List%601> class contains the type parameter `T`.</span></span>  
  
 <span data-ttu-id="151fe-181">Para obtener más información sobre genéricos, vea [genéricos en la biblioteca de clases de .NET Framework](~/docs/csharp/programming-guide/generics/generics-in-the-net-framework-class-library.md).</span><span class="sxs-lookup"><span data-stu-id="151fe-181">For more information on generics, see [Generics in the .NET Framework Class Library](~/docs/csharp/programming-guide/generics/generics-in-the-net-framework-class-library.md).</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.CodeDom.CodeTypeParameterCollection" />
        <altmember cref="T:System.CodeDom.CodeTypeParameter" />
      </Docs>
    </Member>
  </Members>
</Type>