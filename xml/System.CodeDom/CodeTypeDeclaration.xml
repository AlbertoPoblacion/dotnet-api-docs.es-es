<Type Name="CodeTypeDeclaration" FullName="System.CodeDom.CodeTypeDeclaration">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="52c8bfcbe9527832064fa06fd15fae096ecb1cf0" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="es-ES" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30369649" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class CodeTypeDeclaration : System.CodeDom.CodeTypeMember" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable beforefieldinit CodeTypeDeclaration extends System.CodeDom.CodeTypeMember" />
  <TypeSignature Language="DocId" Value="T:System.CodeDom.CodeTypeDeclaration" />
  <TypeSignature Language="VB.NET" Value="Public Class CodeTypeDeclaration&#xA;Inherits CodeTypeMember" />
  <TypeSignature Language="C++ CLI" Value="public ref class CodeTypeDeclaration : System::CodeDom::CodeTypeMember" />
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.CodeDom</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.CodeDom.CodeTypeMember</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ClassInterface</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Representa una declaración de tipos para una clase, estructura, interfaz o enumeración.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.CodeDom.CodeTypeDeclaration> puede usarse para representar el código que declara una clase, estructura, interfaz o enumeración. <xref:System.CodeDom.CodeTypeDeclaration> puede utilizarse para declarar un tipo que está anidado dentro de otro tipo.  
  
 El <xref:System.CodeDom.CodeTypeDeclaration.BaseTypes%2A> propiedad especifica el tipo base o tipos base del tipo que se declara. El <xref:System.CodeDom.CodeTypeDeclaration.Members%2A> propiedad contiene los miembros de tipo, que pueden incluir métodos, campos, propiedades, comentarios y otros tipos. El <xref:System.CodeDom.CodeTypeDeclaration.TypeAttributes%2A> propiedad indica la <xref:System.Reflection.TypeAttributes> valores para la declaración de tipos, que indican la categoría del tipo. El <xref:System.CodeDom.CodeTypeDeclaration.IsClass%2A>, <xref:System.CodeDom.CodeTypeDeclaration.IsStruct%2A>, <xref:System.CodeDom.CodeTypeDeclaration.IsEnum%2A>, y <xref:System.CodeDom.CodeTypeDeclaration.IsInterface%2A> métodos indican si el tipo es una clase, estructura, enumeración o tipo de interfaz, respectivamente.  
  
> [!NOTE]
>  Algunos lenguajes de programación solo admiten la declaración de tipos de referencia, o de clases. Para comprobar si un generador de código de CodeDOM específico del lenguaje para la compatibilidad para la declaración de interfaces, enumeraciones o tipos de valor, llame a la <xref:System.CodeDom.Compiler.ICodeGenerator.Supports%2A> método para comprobar la correspondiente <xref:System.CodeDom.Compiler.GeneratorSupport> marcas. <xref:System.CodeDom.Compiler.GeneratorSupport.DeclareInterfaces> indica la compatibilidad para las interfaces, <xref:System.CodeDom.Compiler.GeneratorSupport.DeclareEnums> indica compatibilidad con las enumeraciones, y <xref:System.CodeDom.Compiler.GeneratorSupport.DeclareValueTypes> indica compatibilidad con tipos de valor como estructuras.  
  
 Puede generar una clase o una implementación de la estructura en una declaración completa, o extender la implementación en varias declaraciones. El <xref:System.CodeDom.CodeTypeDeclaration.IsPartial%2A> propiedad indica si la declaración del tipo es completa o parcial. No todos los generadores de código admiten declaraciones parciales de tipos, por lo que debe probar esta compatibilidad llamando a la <xref:System.CodeDom.Compiler.ICodeGenerator.Supports%2A> método con la marca <xref:System.CodeDom.Compiler.GeneratorSupport.PartialTypes>.  
  
   
  
## Examples  
 Este ejemplo muestra cómo utilizar un <xref:System.CodeDom.CodeTypeDeclaration> para declarar un tipo.  
  
 [!code-cpp[CodeTypeDeclarationExample#2](~/samples/snippets/cpp/VS_Snippets_CLR/CodeTypeDeclarationExample/CPP/codetypedeclarationexample.cpp#2)]
 [!code-csharp[CodeTypeDeclarationExample#2](~/samples/snippets/csharp/VS_Snippets_CLR/CodeTypeDeclarationExample/CS/codetypedeclarationexample.cs#2)]
 [!code-vb[CodeTypeDeclarationExample#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/CodeTypeDeclarationExample/VB/codetypedeclarationexample.vb#2)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.CodeDom.CodeTypeDeclarationCollection" />
    <altmember cref="T:System.CodeDom.Compiler.GeneratorSupport" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Inicializa una nueva instancia de la clase <see cref="T:System.CodeDom.CodeTypeDeclaration" />.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CodeTypeDeclaration ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.CodeTypeDeclaration.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; CodeTypeDeclaration();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Inicializa una nueva instancia de la clase <see cref="T:System.CodeDom.CodeTypeDeclaration" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CodeTypeDeclaration (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.CodeTypeDeclaration.#ctor(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (name As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; CodeTypeDeclaration(System::String ^ name);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">Nombre del nuevo tipo.</param>
        <summary>Inicializa una nueva instancia de la clase <see cref="T:System.CodeDom.CodeTypeDeclaration" /> con el nombre especificado.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="BaseTypes">
      <MemberSignature Language="C#" Value="public System.CodeDom.CodeTypeReferenceCollection BaseTypes { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.CodeDom.CodeTypeReferenceCollection BaseTypes" />
      <MemberSignature Language="DocId" Value="P:System.CodeDom.CodeTypeDeclaration.BaseTypes" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property BaseTypes As CodeTypeReferenceCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::CodeDom::CodeTypeReferenceCollection ^ BaseTypes { System::CodeDom::CodeTypeReferenceCollection ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.CodeDom.CodeTypeReferenceCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene los tipos base del tipo.</summary>
        <value>Objeto <see cref="T:System.CodeDom.CodeTypeReferenceCollection" /> que indica los tipos base del tipo.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Para generar una clase en Visual Basic que no hereda de un tipo base, pero que implementan una o más interfaces, debe incluir <xref:System.Object> como el primer elemento de la <xref:System.CodeDom.CodeTypeDeclaration.BaseTypes%2A> colección.  
  
> [!NOTE]
>  En .NET Framework versión 2.0 no es necesario el <xref:System.CodeDom.CodeTypeReference> para <xref:System.Object> si la interfaz que está implementando ya existe y se hace referencia a él por tipo. Por ejemplo, si está implementando el <xref:System.Collections.ICollection> interfaz y lo agrega a la colección con esta instrucción, `ctd.BaseTypes.Add(New CodeTypeReference(typeof(ICollection)))`, no es necesario anterior `ctd.BaseTypes.Add(New CodeTypeReference(GetType(Object)))` instrucción.  
  
 El código siguiente muestra la adición de un <xref:System.CodeDom.CodeTypeReference> a la colección que hace referencia a <xref:System.Object>.  
  
```vb  
Dim ctd As New CodeTypeDeclaration("Class1")  
ctd.IsClass = True  
ctd.BaseTypes.Add(New CodeTypeReference(GetType(Object)))  
ctd.BaseTypes.Add(New CodeTypeReference("Interface1"))  
```  
  
```csharp  
CodeTypeDeclaration ctd = new CodeTypeDeclaration("Class1");  
ctd.IsClass = true;  
ctd.BaseTypes.Add(new CodeTypeReference(typeof(Object)));  
ctd.BaseTypes.Add(new CodeTypeReference("Interface1"));  
```  
  
 El código anterior genera el equivalente del siguiente código de Visual Basic.  
  
```vb  
Public Class Class1  
Implements Interface1  
```  
  
 Sin embargo, el código de Visual Basic generado realmente es el siguiente.  
  
```vb  
Public Class Class1  
Inherits Object  
Implements Interface1  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.CodeDom.CodeTypeReferenceCollection" />
      </Docs>
    </Member>
    <Member MemberName="IsClass">
      <MemberSignature Language="C#" Value="public bool IsClass { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsClass" />
      <MemberSignature Language="DocId" Value="P:System.CodeDom.CodeTypeDeclaration.IsClass" />
      <MemberSignature Language="VB.NET" Value="Public Property IsClass As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsClass { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene o establece un valor que indica si el tipo es una clase o un tipo de referencia.</summary>
        <value>
          Es <see langword="true" /> si el tipo es una clase o un tipo de referencia; de lo contrario, es <see langword="false" />.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsEnum">
      <MemberSignature Language="C#" Value="public bool IsEnum { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsEnum" />
      <MemberSignature Language="DocId" Value="P:System.CodeDom.CodeTypeDeclaration.IsEnum" />
      <MemberSignature Language="VB.NET" Value="Public Property IsEnum As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsEnum { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene o establece un valor que indica si el tipo es una enumeración.</summary>
        <value>
          Es <see langword="true" /> si el tipo es una enumeración; en caso contrario, es <see langword="false" />.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsInterface">
      <MemberSignature Language="C#" Value="public bool IsInterface { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsInterface" />
      <MemberSignature Language="DocId" Value="P:System.CodeDom.CodeTypeDeclaration.IsInterface" />
      <MemberSignature Language="VB.NET" Value="Public Property IsInterface As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsInterface { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene o establece un valor que indica si el tipo es una interfaz.</summary>
        <value>
          Es <see langword="true" /> si el tipo es una interfaz; en caso contrario, es <see langword="false" />.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsPartial">
      <MemberSignature Language="C#" Value="public bool IsPartial { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsPartial" />
      <MemberSignature Language="DocId" Value="P:System.CodeDom.CodeTypeDeclaration.IsPartial" />
      <MemberSignature Language="VB.NET" Value="Public Property IsPartial As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsPartial { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene o establece un valor que indica si la declaración de tipos es completa o parcial.</summary>
        <value>
          Es <see langword="true" /> si la declaración de clase o de estructura es una representación parcial de la implementación; es <see langword="false" /> si la declaración es una implementación completa de la clase o la estructura. El valor predeterminado es <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Puede generar una implementación de clase o estructura en una declaración completa, o extender la implementación en varias declaraciones. Las implementaciones se proporcionan normalmente en la declaración de un tipo completo. En este caso, establezca la declaración de tipos <xref:System.CodeDom.CodeTypeDeclaration.IsPartial%2A> propiedad `false`, lo que indica que la declaración de tipos representa todos los detalles de la implementación de clase o estructura.  
  
 Una declaración de tipo parcial facilita la creación de diferentes partes de una implementación de clase o estructura en módulos diferentes de la aplicación. Las declaraciones parciales de tipos se pueda almacenar en un archivo de origen o distribuir en varios archivos de origen que se compilan finalmente juntos para formar la implementación de tipo combinado.  
  
 El lenguaje C# admite declaraciones parciales de tipos de clases y estructuras mediante la `partial` palabra clave. Visual Basic admite declaraciones parciales de tipos de clases y estructuras con el `Partial` palabra clave. No todos los generadores de código admiten declaraciones parciales de tipos, por lo que debe probar esta compatibilidad llamando a la <xref:System.CodeDom.Compiler.ICodeGenerator.Supports%2A> método con la marca <xref:System.CodeDom.Compiler.GeneratorSupport.PartialTypes>.  
  
> [!NOTE]
>  Declaraciones parciales de tipos se admiten para las clases y estructuras. Si especifica una declaración de tipo parcial para una interfaz o enumeración, el código generado produce errores de compilador.  
  
 Al proporcionar una implementación de clase o estructura entre varias declaraciones, establezca la <xref:System.CodeDom.CodeTypeDeclaration.IsPartial%2A> propiedad `true` para la declaración inicial y todas las declaraciones complementarias. La declaración inicial completa debe especificar el tipo de firma, incluidos los modificadores de acceso, los tipos heredados y las interfaces implementadas. Las declaraciones complementarias no es necesario volver a especificar la firma del tipo. Normalmente se produce un error de compilador si vuelve a definir la firma de tipo en una declaración complementaria.  
  
 Visual Studio 2005 utiliza tipos parciales para separar el código generado por el usuario del código del diseñador. En los proyectos de aplicación de Windows de Visual Basic, el código de usuario se coloca en una clase parcial que no está calificada por el `Partial` palabra clave; proporcionados por el Diseñador de código aparece en la clase parcial que tiene el `Partial` (palabra clave). En C#, el código de usuario y el código del diseñador aparecen en clases parciales identificadas por la `partial` (palabra clave).  
  
   
  
## Examples  
 Este ejemplo muestra cómo utilizar un <xref:System.CodeDom.CodeTypeDeclaration> para proporcionar una implementación de clase en varias declaraciones. En el ejemplo se compila la instrucción de declaración de clase inicial y establece el <xref:System.CodeDom.CodeTypeDeclaration.IsPartial%2A> propiedad `true`.  
  
 [!code-cpp[CodeDomPartialTypeExample#3](~/samples/snippets/cpp/VS_Snippets_CLR/CodeDomPartialTypeExample/CPP/source.cpp#3)]
 [!code-csharp[CodeDomPartialTypeExample#3](~/samples/snippets/csharp/VS_Snippets_CLR/CodeDomPartialTypeExample/CS/source.cs#3)]
 [!code-vb[CodeDomPartialTypeExample#3](~/samples/snippets/visualbasic/VS_Snippets_CLR/CodeDomPartialTypeExample/VB/source.vb#3)]  
  
 Un método diferente en el ejemplo extiende la implementación de la clase. Este método crea una nueva instrucción de declaración de tipo para la clase existente y establece el <xref:System.CodeDom.CodeTypeDeclaration.IsPartial%2A> propiedad `true`. El compilador combina las dos declaraciones parciales de tipos para la implementación de clase completa.  
  
 [!code-cpp[CodeDomPartialTypeExample#7](~/samples/snippets/cpp/VS_Snippets_CLR/CodeDomPartialTypeExample/CPP/source.cpp#7)]
 [!code-csharp[CodeDomPartialTypeExample#7](~/samples/snippets/csharp/VS_Snippets_CLR/CodeDomPartialTypeExample/CS/source.cs#7)]
 [!code-vb[CodeDomPartialTypeExample#7](~/samples/snippets/visualbasic/VS_Snippets_CLR/CodeDomPartialTypeExample/VB/source.vb#7)]  
  
 ]]></format>
        </remarks>
        <altmember cref="F:System.CodeDom.Compiler.GeneratorSupport.PartialTypes" />
      </Docs>
    </Member>
    <Member MemberName="IsStruct">
      <MemberSignature Language="C#" Value="public bool IsStruct { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsStruct" />
      <MemberSignature Language="DocId" Value="P:System.CodeDom.CodeTypeDeclaration.IsStruct" />
      <MemberSignature Language="VB.NET" Value="Public Property IsStruct As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsStruct { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene o establece un valor que indica si el tipo es un tipo de valor (struct).</summary>
        <value>
          Es <see langword="true" /> si el tipo es un tipo de valor; de lo contrario, es <see langword="false" />.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Members">
      <MemberSignature Language="C#" Value="public System.CodeDom.CodeTypeMemberCollection Members { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.CodeDom.CodeTypeMemberCollection Members" />
      <MemberSignature Language="DocId" Value="P:System.CodeDom.CodeTypeDeclaration.Members" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Members As CodeTypeMemberCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::CodeDom::CodeTypeMemberCollection ^ Members { System::CodeDom::CodeTypeMemberCollection ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.CodeDom.CodeTypeMemberCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene la colección de miembros de clase del tipo representado.</summary>
        <value>Objeto <see cref="T:System.CodeDom.CodeTypeMemberCollection" /> que indica los miembros de la clase.</value>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.CodeDom.CodeTypeMemberCollection" />
      </Docs>
    </Member>
    <Member MemberName="PopulateBaseTypes">
      <MemberSignature Language="C#" Value="public event EventHandler PopulateBaseTypes;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler PopulateBaseTypes" />
      <MemberSignature Language="DocId" Value="E:System.CodeDom.CodeTypeDeclaration.PopulateBaseTypes" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PopulateBaseTypes As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ PopulateBaseTypes;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Se produce cuando se obtiene acceso a la colección <see cref="P:System.CodeDom.CodeTypeDeclaration.BaseTypes" /> por primera vez.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PopulateMembers">
      <MemberSignature Language="C#" Value="public event EventHandler PopulateMembers;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler PopulateMembers" />
      <MemberSignature Language="DocId" Value="E:System.CodeDom.CodeTypeDeclaration.PopulateMembers" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PopulateMembers As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ PopulateMembers;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Se produce cuando se obtiene acceso a la colección <see cref="P:System.CodeDom.CodeTypeDeclaration.Members" /> por primera vez.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TypeAttributes">
      <MemberSignature Language="C#" Value="public System.Reflection.TypeAttributes TypeAttributes { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Reflection.TypeAttributes TypeAttributes" />
      <MemberSignature Language="DocId" Value="P:System.CodeDom.CodeTypeDeclaration.TypeAttributes" />
      <MemberSignature Language="VB.NET" Value="Public Property TypeAttributes As TypeAttributes" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Reflection::TypeAttributes TypeAttributes { System::Reflection::TypeAttributes get(); void set(System::Reflection::TypeAttributes value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.TypeAttributes</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene o establece los atributos del tipo.</summary>
        <value>Objeto <see cref="T:System.Reflection.TypeAttributes" /> que indica los atributos del tipo.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Reflection.TypeAttributes> propiedad contiene el mismo tipo de valores usados por <xref:System.Reflection> al investigar un tipo en tiempo de ejecución. Muchas de estas marcas no se corresponden con la sintaxis de declaración de tipo para algunos idiomas. Como resultado, solo las marcas siguientes son importantes para <xref:System.CodeDom.CodeTypeDeclaration> : <xref:System.Reflection.TypeAttributes.Class>, <xref:System.Reflection.TypeAttributes.Interface>, <xref:System.Reflection.TypeAttributes.Abstract>, <xref:System.Reflection.TypeAttributes.Sealed>, <xref:System.Reflection.TypeAttributes.Public>, <xref:System.Reflection.TypeAttributes.NotPublic>, <xref:System.Reflection.TypeAttributes.NestedPublic>, y <xref:System.Reflection.TypeAttributes.NestedPrivate>.  
  
> [!NOTE]
>  Algunos de los indicadores como <xref:System.Reflection.TypeAttributes.Abstract> se superponen con el significado de los indicadores de la <xref:System.CodeDom.CodeTypeMember.Attributes%2A> propiedad de <xref:System.CodeDom.CodeTypeDeclaration> que se hereda de <xref:System.CodeDom.CodeTypeMember>. El <xref:System.CodeDom.CodeTypeMember.Attributes%2A> propiedad es un efecto secundario de la <xref:System.CodeDom.CodeTypeDeclaration> clase que hereda de <xref:System.CodeDom.CodeTypeMember> para que las clases pueden anidarse. Las marcas en el <xref:System.CodeDom.CodeTypeDeclaration.TypeAttributes%2A> propiedad debe utilizarse en lugar de las marcas en el <xref:System.CodeDom.CodeTypeMember.Attributes%2A> propiedad.  
  
> [!NOTE]
>  El modelo para establecer las marcas de visibilidad (marcadores que contienen las palabras `Public` o `Nested`) es enmascarar visibilidad de todos los indicadores con el <xref:System.Reflection.TypeAttributes.VisibilityMask> y, a continuación, defina el indicador de visibilidad deseado. Por ejemplo, el código instrucción de C# para identificar la <xref:System.CodeDom.CodeTypeDeclaration> (denominado `cd`) como una clase interna es `cd.TypeAttributes = (cd.TypeAttributes & ~TypeAttributes.VisibilityMask) | TypeAttributes.NotPublic;`.  El código para establecer el mismo valor en Visual Basic es `cd.TypeAttributes = (cd.TypeAttributes And (TypeAttributes.VisibilityMask Xor -1)) Or TypeAttributes.NotPublic`. Establecer el <xref:System.CodeDom.CodeTypeDeclaration.TypeAttributes%2A> propiedad directamente a un marcador de visibilidad (`cd.TypeAttributes = TypeAttributes.NotPublic;`) borra todas las otras marcas que se puede establecer.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Reflection.TypeAttributes" />
      </Docs>
    </Member>
    <Member MemberName="TypeParameters">
      <MemberSignature Language="C#" Value="public System.CodeDom.CodeTypeParameterCollection TypeParameters { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.CodeDom.CodeTypeParameterCollection TypeParameters" />
      <MemberSignature Language="DocId" Value="P:System.CodeDom.CodeTypeDeclaration.TypeParameters" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property TypeParameters As CodeTypeParameterCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::CodeDom::CodeTypeParameterCollection ^ TypeParameters { System::CodeDom::CodeTypeParameterCollection ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.CodeDom.CodeTypeParameterCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene los parámetros de tipo para la declaración de tipos.</summary>
        <value>Colección <see cref="T:System.CodeDom.CodeTypeParameterCollection" /> que contiene los parámetros de tipo para la declaración de tipos.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Una declaración de tipo genérico contiene uno o más tipos no especificados conocidos como parámetros de tipo. Hace referencia al nombre de un parámetro de tipo para el tipo dentro del cuerpo de la declaración genérica. Por ejemplo, la declaración genérica para la <xref:System.Collections.Generic.List%601> clase contiene el parámetro de tipo `T`.  
  
 Para obtener más información sobre genéricos, vea [genéricos en la biblioteca de clases de .NET Framework](~/docs/csharp/programming-guide/generics/generics-in-the-net-framework-class-library.md).  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.CodeDom.CodeTypeParameterCollection" />
        <altmember cref="T:System.CodeDom.CodeTypeParameter" />
      </Docs>
    </Member>
  </Members>
</Type>