<Type Name="CodeExpressionCollection" FullName="System.CodeDom.CodeExpressionCollection">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="dea4b9db9393777be582fbf190f3a754b40e15b1" />
    <Meta Name="ms.sourcegitcommit" Value="434f60616a9793fa8436744549fc856e94f7a648" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="es-ES" />
    <Meta Name="ms.lasthandoff" Value="08/25/2018" />
    <Meta Name="ms.locfileid" Value="39832691" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class CodeExpressionCollection : System.Collections.CollectionBase" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable beforefieldinit CodeExpressionCollection extends System.Collections.CollectionBase" />
  <TypeSignature Language="DocId" Value="T:System.CodeDom.CodeExpressionCollection" />
  <TypeSignature Language="VB.NET" Value="Public Class CodeExpressionCollection&#xA;Inherits CollectionBase" />
  <TypeSignature Language="C++ CLI" Value="public ref class CodeExpressionCollection : System::Collections::CollectionBase" />
  <TypeSignature Language="F#" Value="type CodeExpressionCollection = class&#xA;    inherit CollectionBase" />
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.CodeDom</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Collections.CollectionBase</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinmac-3.0">
      <AttributeName>System.Runtime.InteropServices.ClassInterface</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinmac-3.0">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5">
      <AttributeName>System.Runtime.InteropServices.ClassInterface(System.Runtime.InteropServices.ClassInterfaceType.AutoDispatch)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Representa una colección de objetos <see cref="T:System.CodeDom.CodeExpression" />.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Proporciona un objeto de colección simple que puede representar un conjunto de objetos de expresión de Code Document Object Model (CodeDOM).  
  
 La clase <xref:System.CodeDom.CodeExpressionCollection> proporciona un objeto de colección simple que se puede utilizar para almacenar un conjunto de objetos <xref:System.CodeDom.CodeExpression>.  
  
   
  
## Examples  
 En el ejemplo siguiente se muestra el uso de la <xref:System.CodeDom.CodeExpressionCollection> métodos de la clase. El ejemplo crea una nueva instancia de la clase y usa los métodos para agregar instrucciones a la colección, devolver su índice y agregar o quitar atributos en un punto de índice específico.  
  
 [!code-cpp[CodeExpressionCollectionExample#1](~/samples/snippets/cpp/VS_Snippets_CLR/CodeExpressionCollectionExample/CPP/class1.cpp#1)]
 [!code-csharp[CodeExpressionCollectionExample#1](~/samples/snippets/csharp/VS_Snippets_CLR/CodeExpressionCollectionExample/CS/class1.cs#1)]
 [!code-vb[CodeExpressionCollectionExample#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/CodeExpressionCollectionExample/VB/class1.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.CodeDom.CodeExpression" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Inicializa una nueva instancia de la clase <see cref="T:System.CodeDom.CodeExpressionCollection" />.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CodeExpressionCollection ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.CodeExpressionCollection.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; CodeExpressionCollection();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>Inicializa una nueva instancia de la clase <see cref="T:System.CodeDom.CodeExpressionCollection" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CodeExpressionCollection (System.CodeDom.CodeExpression[] value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.CodeDom.CodeExpression[] value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.CodeExpressionCollection.#ctor(System.CodeDom.CodeExpression[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (value As CodeExpression())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; CodeExpressionCollection(cli::array &lt;System::CodeDom::CodeExpression ^&gt; ^ value);" />
      <MemberSignature Language="F#" Value="new System.CodeDom.CodeExpressionCollection : System.CodeDom.CodeExpression[] -&gt; System.CodeDom.CodeExpressionCollection" Usage="new System.CodeDom.CodeExpressionCollection value" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="value" Type="System.CodeDom.CodeExpression[]" />
      </Parameters>
      <Docs>
        <param name="value">Matriz de objetos <see cref="T:System.CodeDom.CodeExpression" /> con los que se inicializará la colección.</param>
        <summary>Inicializa una nueva instancia de la clase <see cref="T:System.CodeDom.CodeExpressionCollection" /> que contiene la matriz especificada de objetos <see cref="T:System.CodeDom.CodeExpression" />.</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">Uno o más objetos de la matriz son <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CodeExpressionCollection (System.CodeDom.CodeExpressionCollection value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.CodeDom.CodeExpressionCollection value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.CodeExpressionCollection.#ctor(System.CodeDom.CodeExpressionCollection)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (value As CodeExpressionCollection)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; CodeExpressionCollection(System::CodeDom::CodeExpressionCollection ^ value);" />
      <MemberSignature Language="F#" Value="new System.CodeDom.CodeExpressionCollection : System.CodeDom.CodeExpressionCollection -&gt; System.CodeDom.CodeExpressionCollection" Usage="new System.CodeDom.CodeExpressionCollection value" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="value" Type="System.CodeDom.CodeExpressionCollection" />
      </Parameters>
      <Docs>
        <param name="value">Objeto <see cref="T:System.CodeDom.CodeExpressionCollection" /> con el que se inicializa la colección.</param>
        <summary>Inicializa una nueva instancia de la clase <see cref="T:System.CodeDom.CodeExpressionCollection" /> que contiene los elementos de la colección de origen especificada.</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="value" /> es <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public int Add (System.CodeDom.CodeExpression value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 Add(class System.CodeDom.CodeExpression value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.CodeExpressionCollection.Add(System.CodeDom.CodeExpression)" />
      <MemberSignature Language="VB.NET" Value="Public Function Add (value As CodeExpression) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int Add(System::CodeDom::CodeExpression ^ value);" />
      <MemberSignature Language="F#" Value="member this.Add : System.CodeDom.CodeExpression -&gt; int" Usage="codeExpressionCollection.Add value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.CodeDom.CodeExpression" />
      </Parameters>
      <Docs>
        <param name="value">Objeto <see cref="T:System.CodeDom.CodeExpression" /> que se agrega.</param>
        <summary>Agrega a la colección el objeto <see cref="T:System.CodeDom.CodeExpression" /> especificado.</summary>
        <returns>Índice donde se insertó el nuevo elemento.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 En el ejemplo siguiente se muestra cómo agregar un <xref:System.CodeDom.CodeExpression> objeto a un <xref:System.CodeDom.CodeExpressionCollection> instancia.  
  
 [!code-cpp[CodeExpressionCollectionExample#3](~/samples/snippets/cpp/VS_Snippets_CLR/CodeExpressionCollectionExample/CPP/class1.cpp#3)]
 [!code-csharp[CodeExpressionCollectionExample#3](~/samples/snippets/csharp/VS_Snippets_CLR/CodeExpressionCollectionExample/CS/class1.cs#3)]
 [!code-vb[CodeExpressionCollectionExample#3](~/samples/snippets/visualbasic/VS_Snippets_CLR/CodeExpressionCollectionExample/VB/class1.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.CodeDom.CodeExpressionCollection.AddRange(System.CodeDom.CodeExpression[])" />
      </Docs>
    </Member>
    <MemberGroup MemberName="AddRange">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Copia los elementos de la matriz especificada al final de la colección.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="AddRange">
      <MemberSignature Language="C#" Value="public void AddRange (System.CodeDom.CodeExpression[] value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddRange(class System.CodeDom.CodeExpression[] value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.CodeExpressionCollection.AddRange(System.CodeDom.CodeExpression[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub AddRange (value As CodeExpression())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AddRange(cli::array &lt;System::CodeDom::CodeExpression ^&gt; ^ value);" />
      <MemberSignature Language="F#" Value="member this.AddRange : System.CodeDom.CodeExpression[] -&gt; unit" Usage="codeExpressionCollection.AddRange value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.CodeDom.CodeExpression[]" />
      </Parameters>
      <Docs>
        <param name="value">Matriz de tipo <see cref="T:System.CodeDom.CodeExpression" /> que contiene los objetos que se van a agregar a la colección.</param>
        <summary>Copia los elementos de la matriz especificada al final de la colección.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 En el ejemplo siguiente se muestra cómo usar el <xref:System.CodeDom.CodeExpressionCollection.AddRange%28System.CodeDom.CodeExpression%5B%5D%29> sobrecarga del método para agregar los miembros de un <xref:System.CodeDom.CodeExpression> de matriz a un <xref:System.CodeDom.CodeExpressionCollection>.  
  
 [!code-cpp[CodeExpressionCollectionExample#4](~/samples/snippets/cpp/VS_Snippets_CLR/CodeExpressionCollectionExample/CPP/class1.cpp#4)]
 [!code-csharp[CodeExpressionCollectionExample#4](~/samples/snippets/csharp/VS_Snippets_CLR/CodeExpressionCollectionExample/CS/class1.cs#4)]
 [!code-vb[CodeExpressionCollectionExample#4](~/samples/snippets/visualbasic/VS_Snippets_CLR/CodeExpressionCollectionExample/VB/class1.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="value" /> es <see langword="null" />.</exception>
        <altmember cref="M:System.CodeDom.CodeExpressionCollection.Add(System.CodeDom.CodeExpression)" />
      </Docs>
    </Member>
    <Member MemberName="AddRange">
      <MemberSignature Language="C#" Value="public void AddRange (System.CodeDom.CodeExpressionCollection value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddRange(class System.CodeDom.CodeExpressionCollection value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.CodeExpressionCollection.AddRange(System.CodeDom.CodeExpressionCollection)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AddRange (value As CodeExpressionCollection)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AddRange(System::CodeDom::CodeExpressionCollection ^ value);" />
      <MemberSignature Language="F#" Value="member this.AddRange : System.CodeDom.CodeExpressionCollection -&gt; unit" Usage="codeExpressionCollection.AddRange value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.CodeDom.CodeExpressionCollection" />
      </Parameters>
      <Docs>
        <param name="value">
          <see cref="T:System.CodeDom.CodeExpressionCollection" /> que contiene los objetos que se van a agregar a la colección.</param>
        <summary>Copia el contenido de otro objeto <see cref="T:System.CodeDom.CodeExpressionCollection" /> al final de la colección.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 En el ejemplo siguiente se muestra cómo usar el <xref:System.CodeDom.CodeExpressionCollection.AddRange%28System.CodeDom.CodeExpressionCollection%29> para agregar los miembros de una sobrecarga del método <xref:System.CodeDom.CodeExpressionCollection> objeto a otro <xref:System.CodeDom.CodeExpressionCollection>.  
  
 [!code-cpp[CodeExpressionCollectionExample#4](~/samples/snippets/cpp/VS_Snippets_CLR/CodeExpressionCollectionExample/CPP/class1.cpp#4)]
 [!code-csharp[CodeExpressionCollectionExample#4](~/samples/snippets/csharp/VS_Snippets_CLR/CodeExpressionCollectionExample/CS/class1.cs#4)]
 [!code-vb[CodeExpressionCollectionExample#4](~/samples/snippets/visualbasic/VS_Snippets_CLR/CodeExpressionCollectionExample/VB/class1.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="value" /> es <see langword="null" />.</exception>
        <altmember cref="M:System.CodeDom.CodeExpressionCollection.Add(System.CodeDom.CodeExpression)" />
      </Docs>
    </Member>
    <Member MemberName="Contains">
      <MemberSignature Language="C#" Value="public bool Contains (System.CodeDom.CodeExpression value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Contains(class System.CodeDom.CodeExpression value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.CodeExpressionCollection.Contains(System.CodeDom.CodeExpression)" />
      <MemberSignature Language="VB.NET" Value="Public Function Contains (value As CodeExpression) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Contains(System::CodeDom::CodeExpression ^ value);" />
      <MemberSignature Language="F#" Value="member this.Contains : System.CodeDom.CodeExpression -&gt; bool" Usage="codeExpressionCollection.Contains value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.CodeDom.CodeExpression" />
      </Parameters>
      <Docs>
        <param name="value">Objeto <see cref="T:System.CodeDom.CodeExpression" /> que se va a buscar en la colección.</param>
        <summary>Obtiene un valor que indica si la colección contiene el objeto <see cref="T:System.CodeDom.CodeExpression" /> especificado.</summary>
        <returns>
          <see langword="true" /> si la colección contiene el objeto especificado; en caso contrario, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 En el ejemplo siguiente se usa el <xref:System.CodeDom.CodeExpressionCollection.Contains%2A> método para buscar la presencia de un determinado <xref:System.CodeDom.CodeExpression> de objetos y obtiene el valor de índice en el que se encontró.  
  
 [!code-cpp[CodeExpressionCollectionExample#5](~/samples/snippets/cpp/VS_Snippets_CLR/CodeExpressionCollectionExample/CPP/class1.cpp#5)]
 [!code-csharp[CodeExpressionCollectionExample#5](~/samples/snippets/csharp/VS_Snippets_CLR/CodeExpressionCollectionExample/CS/class1.cs#5)]
 [!code-vb[CodeExpressionCollectionExample#5](~/samples/snippets/visualbasic/VS_Snippets_CLR/CodeExpressionCollectionExample/VB/class1.vb#5)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.CodeDom.CodeExpressionCollection.IndexOf(System.CodeDom.CodeExpression)" />
      </Docs>
    </Member>
    <Member MemberName="CopyTo">
      <MemberSignature Language="C#" Value="public void CopyTo (System.CodeDom.CodeExpression[] array, int index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void CopyTo(class System.CodeDom.CodeExpression[] array, int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.CodeExpressionCollection.CopyTo(System.CodeDom.CodeExpression[],System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub CopyTo (array As CodeExpression(), index As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void CopyTo(cli::array &lt;System::CodeDom::CodeExpression ^&gt; ^ array, int index);" />
      <MemberSignature Language="F#" Value="member this.CopyTo : System.CodeDom.CodeExpression[] * int -&gt; unit" Usage="codeExpressionCollection.CopyTo (array, index)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="array" Type="System.CodeDom.CodeExpression[]" />
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="array">
          <see cref="T:System.Array" /> unidimensional que constituye el destino de los valores copiados de la colección.</param>
        <param name="index">Índice de la matriz donde debe comenzar la inserción.</param>
        <summary>Copia los objetos de colección en una instancia <see cref="T:System.Array" /> unidimensional, comenzando a partir del índice especificado.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 En el ejemplo siguiente se muestra cómo copiar el contenido de un <xref:System.CodeDom.CodeExpressionCollection> a un <xref:System.CodeDom.CodeExpression> matriz empezando en el valor de índice 0.  
  
 [!code-cpp[CodeExpressionCollectionExample#6](~/samples/snippets/cpp/VS_Snippets_CLR/CodeExpressionCollectionExample/CPP/class1.cpp#6)]
 [!code-csharp[CodeExpressionCollectionExample#6](~/samples/snippets/csharp/VS_Snippets_CLR/CodeExpressionCollectionExample/CS/class1.cs#6)]
 [!code-vb[CodeExpressionCollectionExample#6](~/samples/snippets/visualbasic/VS_Snippets_CLR/CodeExpressionCollectionExample/VB/class1.vb#6)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">La matriz de destino es multidimensional.  
  
O bien 
El número de elementos de la clase <see cref="T:System.CodeDom.CodeExpressionCollection" /> es mayor que el espacio disponible entre el índice de la matriz de destino especificada por el parámetro <paramref name="index" /> y el final de la matriz de destino.</exception>
        <exception cref="T:System.ArgumentNullException">El parámetro <paramref name="array" /> es <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">El parámetro <paramref name="index" /> es menor que el índice mínimo de la matriz de destino.</exception>
        <altmember cref="T:System.Array" />
      </Docs>
    </Member>
    <Member MemberName="IndexOf">
      <MemberSignature Language="C#" Value="public int IndexOf (System.CodeDom.CodeExpression value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 IndexOf(class System.CodeDom.CodeExpression value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.CodeExpressionCollection.IndexOf(System.CodeDom.CodeExpression)" />
      <MemberSignature Language="VB.NET" Value="Public Function IndexOf (value As CodeExpression) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int IndexOf(System::CodeDom::CodeExpression ^ value);" />
      <MemberSignature Language="F#" Value="member this.IndexOf : System.CodeDom.CodeExpression -&gt; int" Usage="codeExpressionCollection.IndexOf value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.CodeDom.CodeExpression" />
      </Parameters>
      <Docs>
        <param name="value">Objeto <see cref="T:System.CodeDom.CodeExpression" /> que se va a buscar en la colección.</param>
        <summary>Obtiene el índice del objeto <see cref="T:System.CodeDom.CodeExpression" /> especificado en la colección, si existe en la colección.</summary>
        <returns>Índice del objeto especificado, si se encuentra en la colección; de lo contrario, -1.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 El siguiente ejemplo se busca la presencia de un determinado <xref:System.CodeDom.CodeExpression> objeto y se usa el <xref:System.CodeDom.CodeExpressionCollection.IndexOf%2A> método para obtener el valor de índice en el que se encontró.  
  
 [!code-cpp[CodeExpressionCollectionExample#5](~/samples/snippets/cpp/VS_Snippets_CLR/CodeExpressionCollectionExample/CPP/class1.cpp#5)]
 [!code-csharp[CodeExpressionCollectionExample#5](~/samples/snippets/csharp/VS_Snippets_CLR/CodeExpressionCollectionExample/CS/class1.cs#5)]
 [!code-vb[CodeExpressionCollectionExample#5](~/samples/snippets/visualbasic/VS_Snippets_CLR/CodeExpressionCollectionExample/VB/class1.vb#5)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.CodeDom.CodeExpressionCollection.Contains(System.CodeDom.CodeExpression)" />
      </Docs>
    </Member>
    <Member MemberName="Insert">
      <MemberSignature Language="C#" Value="public void Insert (int index, System.CodeDom.CodeExpression value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Insert(int32 index, class System.CodeDom.CodeExpression value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.CodeExpressionCollection.Insert(System.Int32,System.CodeDom.CodeExpression)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Insert (index As Integer, value As CodeExpression)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Insert(int index, System::CodeDom::CodeExpression ^ value);" />
      <MemberSignature Language="F#" Value="member this.Insert : int * System.CodeDom.CodeExpression -&gt; unit" Usage="codeExpressionCollection.Insert (index, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="value" Type="System.CodeDom.CodeExpression" />
      </Parameters>
      <Docs>
        <param name="index">Índice de base cero donde debe insertarse el objeto especificado.</param>
        <param name="value">Objeto <see cref="T:System.CodeDom.CodeExpression" /> que se va a insertar.</param>
        <summary>Inserta el objeto <see cref="T:System.CodeDom.CodeExpression" /> especificado en el índice especificado de la colección.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 En el ejemplo siguiente se muestra cómo usar el <xref:System.CodeDom.CodeExpressionCollection.Insert%2A> método para agregar un <xref:System.CodeDom.CodeExpression> objeto a un <xref:System.CodeDom.CodeExpressionCollection>.  
  
 [!code-cpp[CodeExpressionCollectionExample#8](~/samples/snippets/cpp/VS_Snippets_CLR/CodeExpressionCollectionExample/CPP/class1.cpp#8)]
 [!code-csharp[CodeExpressionCollectionExample#8](~/samples/snippets/csharp/VS_Snippets_CLR/CodeExpressionCollectionExample/CS/class1.cs#8)]
 [!code-vb[CodeExpressionCollectionExample#8](~/samples/snippets/visualbasic/VS_Snippets_CLR/CodeExpressionCollectionExample/VB/class1.vb#8)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.CodeDom.CodeExpressionCollection.Add(System.CodeDom.CodeExpression)" />
      </Docs>
    </Member>
    <Member MemberName="Item">
      <MemberSignature Language="C#" Value="public System.CodeDom.CodeExpression this[int index] { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.CodeDom.CodeExpression Item(int32)" />
      <MemberSignature Language="DocId" Value="P:System.CodeDom.CodeExpressionCollection.Item(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Default Public Property Item(index As Integer) As CodeExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::CodeDom::CodeExpression ^ default[int] { System::CodeDom::CodeExpression ^ get(int index); void set(int index, System::CodeDom::CodeExpression ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Item(int) : System.CodeDom.CodeExpression with get, set" Usage="System.CodeDom.CodeExpressionCollection.Item" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.CodeDom.CodeExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">Índice de base cero de la colección a la que se obtendrá acceso.</param>
        <summary>Obtiene o establece el objeto <see cref="T:System.CodeDom.CodeExpression" /> en el índice especificado de la colección.</summary>
        <value>Objeto <see cref="T:System.CodeDom.CodeExpression" /> que se encuentra en cada índice válido.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Esta propiedad es un indizador que se puede usar para tener acceso a la colección.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">El parámetro <paramref name="index" /> está fuera del intervalo válido de índices de la colección.</exception>
      </Docs>
    </Member>
    <Member MemberName="Remove">
      <MemberSignature Language="C#" Value="public void Remove (System.CodeDom.CodeExpression value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Remove(class System.CodeDom.CodeExpression value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.CodeExpressionCollection.Remove(System.CodeDom.CodeExpression)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Remove (value As CodeExpression)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Remove(System::CodeDom::CodeExpression ^ value);" />
      <MemberSignature Language="F#" Value="member this.Remove : System.CodeDom.CodeExpression -&gt; unit" Usage="codeExpressionCollection.Remove value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.CodeDom.CodeExpression" />
      </Parameters>
      <Docs>
        <param name="value">Objeto <see cref="T:System.CodeDom.CodeExpression" /> que se va a quitar de la colección.</param>
        <summary>Quita el objeto <see cref="T:System.CodeDom.CodeExpression" /> especificado de la colección.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 En el ejemplo siguiente se muestra cómo usar el <xref:System.CodeDom.CodeExpressionCollection.Remove%2A> método para eliminar un <xref:System.CodeDom.CodeExpression> objeto desde un <xref:System.CodeDom.CodeExpressionCollection>.  
  
 [!code-cpp[CodeExpressionCollectionExample#9](~/samples/snippets/cpp/VS_Snippets_CLR/CodeExpressionCollectionExample/CPP/class1.cpp#9)]
 [!code-csharp[CodeExpressionCollectionExample#9](~/samples/snippets/csharp/VS_Snippets_CLR/CodeExpressionCollectionExample/CS/class1.cs#9)]
 [!code-vb[CodeExpressionCollectionExample#9](~/samples/snippets/visualbasic/VS_Snippets_CLR/CodeExpressionCollectionExample/VB/class1.vb#9)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">No se encuentra el objeto especificado en la colección.</exception>
      </Docs>
    </Member>
  </Members>
</Type>