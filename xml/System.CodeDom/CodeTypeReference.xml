<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="CodeTypeReference.xml" source-language="en-US" target-language="es-ES">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac52455b43fddb32549a443564aec8b89bb01619d72.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">2455b43fddb32549a443564aec8b89bb01619d72</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-2.0,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.CodeDom.CodeTypeReference">
          <source>Represents a reference to a type.</source>
          <target state="translated">Representa una referencia a un tipo.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.CodeDom.CodeTypeReference">
          <source>A <ph id="ph1">&lt;xref:System.CodeDom.CodeTypeReference&gt;</ph> object is used to represent a type for CodeDOM objects.</source>
          <target state="translated">Un <ph id="ph1">&lt;xref:System.CodeDom.CodeTypeReference&gt;</ph> objeto se usa para representar un tipo de objetos CodeDOM.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.CodeDom.CodeTypeReference">
          <source>When CodeDOM types have a <ph id="ph1">`Type`</ph> property, it is of type <ph id="ph2">&lt;xref:System.CodeDom.CodeTypeReference&gt;</ph>.</source>
          <target state="translated">Cuando los tipos CodeDOM presentan una <ph id="ph1">`Type`</ph> propiedad, es de tipo <ph id="ph2">&lt;xref:System.CodeDom.CodeTypeReference&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.CodeDom.CodeTypeReference">
          <source>For example, the <ph id="ph1">&lt;xref:System.CodeDom.CodeMemberField.Type%2A?displayProperty=nameWithType&gt;</ph> property is a <ph id="ph2">&lt;xref:System.CodeDom.CodeTypeReference&gt;</ph> that represents a field's data type.</source>
          <target state="translated">Por ejemplo, el <ph id="ph1">&lt;xref:System.CodeDom.CodeMemberField.Type%2A?displayProperty=nameWithType&gt;</ph> propiedad es un <ph id="ph2">&lt;xref:System.CodeDom.CodeTypeReference&gt;</ph> que representa el tipo de datos de un campo.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.CodeDom.CodeTypeReference">
          <source>A <ph id="ph1">&lt;xref:System.CodeDom.CodeTypeReference&gt;</ph> can be initialized with a <ph id="ph2">&lt;xref:System.Type&gt;</ph> object or a string.</source>
          <target state="translated">A <ph id="ph1">&lt;xref:System.CodeDom.CodeTypeReference&gt;</ph> se pueden inicializar con un <ph id="ph2">&lt;xref:System.Type&gt;</ph> objeto o una cadena.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.CodeDom.CodeTypeReference">
          <source>It is generally recommended to use a <ph id="ph1">&lt;xref:System.Type&gt;</ph> to do this, although it may not always be possible.</source>
          <target state="translated">Por lo general se recomienda usar un <ph id="ph1">&lt;xref:System.Type&gt;</ph> para hacer esto, aunque no sea siempre posible.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.CodeDom.CodeTypeReference">
          <source>If initializing an instance of this class with a string, it is strongly recommended to always use fully qualified types, such as "System.Console" instead of just "Console", because not all languages support importing namespaces.</source>
          <target state="translated">Si se inicializa una instancia de esta clase con una cadena, se recomienda utilizar siempre tipos completos, como "System.Console" en lugar de "Console", ya que no todos los lenguajes admiten la importación de espacios de nombres.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.CodeDom.CodeTypeReference">
          <source>Array types can be specified by either passing in a type object for an array or using one of the constructors that accept rank as a parameter.</source>
          <target state="translated">Tipos de matriz pueden especificarse pasando un objeto de tipo de matriz o usando uno de los constructores que admiten un rango como parámetro.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.CodeDom.CodeTypeReference">
          <source>The <ph id="ph1">&lt;xref:System.CodeDom.CodeTypeReference.BaseType%2A&gt;</ph> property specifies the name of the type to reference.</source>
          <target state="translated">El <ph id="ph1">&lt;xref:System.CodeDom.CodeTypeReference.BaseType%2A&gt;</ph> propiedad especifica el nombre del tipo para hacer referencia a.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.CodeDom.CodeTypeReference">
          <source>For references to array types, the <ph id="ph1">&lt;xref:System.CodeDom.CodeTypeReference.ArrayElementType%2A&gt;</ph> property indicates the type of the elements of the array, and the <ph id="ph2">&lt;xref:System.CodeDom.CodeTypeReference.ArrayRank%2A&gt;</ph> property indicates the number of dimensions in the array.</source>
          <target state="translated">Para las referencias a tipos de matriz, el <ph id="ph1">&lt;xref:System.CodeDom.CodeTypeReference.ArrayElementType%2A&gt;</ph> propiedad indica el tipo de los elementos de la matriz y la <ph id="ph2">&lt;xref:System.CodeDom.CodeTypeReference.ArrayRank%2A&gt;</ph> propiedad indica el número de dimensiones de la matriz.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.CodeDom.CodeTypeReference">
          <source>The following example demonstrates use of a <ph id="ph1">&lt;xref:System.CodeDom.CodeTypeReference&gt;</ph> to represent a reference to a type.</source>
          <target state="translated">En el ejemplo siguiente se muestra el uso de un <ph id="ph1">&lt;xref:System.CodeDom.CodeTypeReference&gt;</ph> para representar una referencia a un tipo.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" uid="T:System.CodeDom.CodeTypeReference">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.CodeDom.CodeTypeReference" /&gt;</ph> class using the specified type.</source>
          <target state="translated">Inicializa una nueva instancia de la clase <ph id="ph1">&lt;see cref="T:System.CodeDom.CodeTypeReference" /&gt;</ph> utilizando el tipo especificado.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" uid="M:System.CodeDom.CodeTypeReference.#ctor">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.CodeDom.CodeTypeReference" /&gt;</ph> class.</source>
          <target state="translated">Inicializa una nueva instancia de la clase <ph id="ph1">&lt;see cref="T:System.CodeDom.CodeTypeReference" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.CodeTypeReference.#ctor">
          <source>This constructor creates an empty <ph id="ph1">&lt;xref:System.CodeDom.CodeTypeReference&gt;</ph> object.</source>
          <target state="translated">Este constructor crea vacío <ph id="ph1">&lt;xref:System.CodeDom.CodeTypeReference&gt;</ph> objeto.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.CodeTypeReference.#ctor">
          <source>If you use this constructor, set properties to establish the type reference.</source>
          <target state="translated">Si utiliza este constructor, establecer propiedades para establecer la referencia de tipo.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" uid="M:System.CodeDom.CodeTypeReference.#ctor(System.CodeDom.CodeTypeParameter)">
          <source>A <ph id="ph1">&lt;see cref="T:System.CodeDom.CodeTypeParameter" /&gt;</ph> that represents the type of the type parameter.</source>
          <target state="translated">Objeto <ph id="ph1">&lt;see cref="T:System.CodeDom.CodeTypeParameter" /&gt;</ph> que representa el tipo del parámetro de tipo.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" uid="M:System.CodeDom.CodeTypeReference.#ctor(System.CodeDom.CodeTypeParameter)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.CodeDom.CodeTypeReference" /&gt;</ph> class using the specified code type parameter.</source>
          <target state="translated">Inicializa una nueva instancia de la clase <ph id="ph1">&lt;see cref="T:System.CodeDom.CodeTypeReference" /&gt;</ph> utilizando el parámetro de tipo de código especificado.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" uid="M:System.CodeDom.CodeTypeReference.#ctor(System.String)">
          <source>The name of the type to reference.</source>
          <target state="translated">Nombre del tipo al que se va a hacer referencia.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" uid="M:System.CodeDom.CodeTypeReference.#ctor(System.String)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.CodeDom.CodeTypeReference" /&gt;</ph> class using the specified type name.</source>
          <target state="translated">Inicializa una nueva instancia de la clase <ph id="ph1">&lt;see cref="T:System.CodeDom.CodeTypeReference" /&gt;</ph> con el nombre de tipo especificado.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.CodeTypeReference.#ctor(System.String)">
          <source>If the <ph id="ph1">`typeName`</ph> parameter references a generic type, it must follow the syntax conventions for generic types.</source>
          <target state="translated">Si el <ph id="ph1">`typeName`</ph> parámetro hace referencia a un tipo genérico, debe seguir las convenciones de sintaxis para tipos genéricos.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.CodeTypeReference.#ctor(System.String)">
          <source>For example, the reflection signature for a <ph id="ph1">&lt;xref:System.Collections.Generic.Dictionary%602&gt;</ph> type, where <ph id="ph2">`K`</ph> is a string and <ph id="ph3">`V`</ph> is a <ph id="ph4">&lt;xref:System.Collections.Generic.List%601&gt;</ph> of integers, is represented by reflection as the following (with the assembly information removed): <ph id="ph5">``System.Collections.Generic.Dictionary`2[[System.String], [System.Collections.Generic.List`1[[System.Int32]]]]``</ph>.</source>
          <target state="translated">Por ejemplo, la firma de reflexión para una <ph id="ph1">&lt;xref:System.Collections.Generic.Dictionary%602&gt;</ph> tipo, donde <ph id="ph2">`K`</ph> es una cadena y <ph id="ph3">`V`</ph> es un <ph id="ph4">&lt;xref:System.Collections.Generic.List%601&gt;</ph> de números enteros, se representa por reflexión de la forma siguiente (con la información de ensamblado): <ph id="ph5">``System.Collections.Generic.Dictionary`2[[System.String], [System.Collections.Generic.List`1[[System.Int32]]]]``</ph>.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.CodeTypeReference.#ctor(System.String)">
          <source>You must use square brackets ([]) and not the C# angle brackets (&lt;&gt;) to delimit generic parameters.</source>
          <target state="translated">Debe usar corchetes ([]) y no los C# corchetes angulares (&lt;&gt;) para delimitar los parámetros genéricos.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.CodeTypeReference.#ctor(System.String)">
          <source>To avoid the possibility of making a mistake in specifying the syntax, consider using the constructor that takes a type as a parameter instead of a string.</source>
          <target state="translated">Para evitar la posibilidad de cometer un error al especificar la sintaxis, considere la posibilidad de usando el constructor que toma un tipo como parámetro en lugar de una cadena.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" uid="M:System.CodeDom.CodeTypeReference.#ctor(System.Type)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> to reference.</source>
          <target state="translated">Objeto <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> al que se va a hacer referencia.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" uid="M:System.CodeDom.CodeTypeReference.#ctor(System.Type)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.CodeDom.CodeTypeReference" /&gt;</ph> class using the specified type.</source>
          <target state="translated">Inicializa una nueva instancia de la clase <ph id="ph1">&lt;see cref="T:System.CodeDom.CodeTypeReference" /&gt;</ph> utilizando el tipo especificado.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" uid="M:System.CodeDom.CodeTypeReference.#ctor(System.Type)">
          <source><ph id="ph1">&lt;paramref name="type" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="type" /&gt;</ph> es <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" uid="M:System.CodeDom.CodeTypeReference.#ctor(System.CodeDom.CodeTypeReference,System.Int32)">
          <source>A <ph id="ph1">&lt;see cref="T:System.CodeDom.CodeTypeReference" /&gt;</ph> that indicates the type of the array.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.CodeDom.CodeTypeReference" /&gt;</ph> que indica el tipo de la matriz.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" uid="M:System.CodeDom.CodeTypeReference.#ctor(System.CodeDom.CodeTypeReference,System.Int32)">
          <source>The number of dimensions in the array.</source>
          <target state="translated">Número de dimensiones de la matriz.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" uid="M:System.CodeDom.CodeTypeReference.#ctor(System.CodeDom.CodeTypeReference,System.Int32)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.CodeDom.CodeTypeReference" /&gt;</ph> class using the specified array type and rank.</source>
          <target state="translated">Inicializa una nueva instancia de la clase <ph id="ph1">&lt;see cref="T:System.CodeDom.CodeTypeReference" /&gt;</ph> con el tipo de matriz y el rango especificados.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.CodeTypeReference.#ctor(System.CodeDom.CodeTypeReference,System.Int32)">
          <source>This constructor can be used to construct arrays of arrays by nesting <ph id="ph1">&lt;xref:System.CodeDom.CodeTypeReference&gt;</ph> objects.</source>
          <target state="translated">Este constructor puede utilizarse para construir matrices de matrices anidando <ph id="ph1">&lt;xref:System.CodeDom.CodeTypeReference&gt;</ph> objetos.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" uid="M:System.CodeDom.CodeTypeReference.#ctor(System.String,System.CodeDom.CodeTypeReference[])">
          <source>The name of the type to reference.</source>
          <target state="translated">Nombre del tipo al que se va a hacer referencia.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" uid="M:System.CodeDom.CodeTypeReference.#ctor(System.String,System.CodeDom.CodeTypeReference[])">
          <source>An array of <ph id="ph1">&lt;see cref="T:System.CodeDom.CodeTypeReference" /&gt;</ph> values.</source>
          <target state="translated">Matriz de valores <ph id="ph1">&lt;see cref="T:System.CodeDom.CodeTypeReference" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" uid="M:System.CodeDom.CodeTypeReference.#ctor(System.String,System.CodeDom.CodeTypeReference[])">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.CodeDom.CodeTypeReference" /&gt;</ph> class using the specified type name and type arguments.</source>
          <target state="translated">Inicializa una nueva instancia de la clase <ph id="ph1">&lt;see cref="T:System.CodeDom.CodeTypeReference" /&gt;</ph> utilizando el nombre de tipo y los argumentos de tipo especificados.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" uid="M:System.CodeDom.CodeTypeReference.#ctor(System.String,System.CodeDom.CodeTypeReferenceOptions)">
          <source>The name of the type to reference.</source>
          <target state="translated">Nombre del tipo al que se va a hacer referencia.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" uid="M:System.CodeDom.CodeTypeReference.#ctor(System.String,System.CodeDom.CodeTypeReferenceOptions)">
          <source>The code type reference option, one of the <ph id="ph1">&lt;see cref="T:System.CodeDom.CodeTypeReferenceOptions" /&gt;</ph> values.</source>
          <target state="translated">Opción de referencia de tipo de código, uno de los valores de <ph id="ph1">&lt;see cref="T:System.CodeDom.CodeTypeReferenceOptions" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" uid="M:System.CodeDom.CodeTypeReference.#ctor(System.String,System.CodeDom.CodeTypeReferenceOptions)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.CodeDom.CodeTypeReference" /&gt;</ph> class using the specified type name and code type reference option.</source>
          <target state="translated">Inicializa una nueva instancia de la clase <ph id="ph1">&lt;see cref="T:System.CodeDom.CodeTypeReference" /&gt;</ph> utilizando el nombre de tipo y la opción de referencia de tipo de código especificados.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" uid="M:System.CodeDom.CodeTypeReference.#ctor(System.String,System.Int32)">
          <source>The name of the type of the elements of the array.</source>
          <target state="translated">Nombre del tipo de los elementos de la matriz.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" uid="M:System.CodeDom.CodeTypeReference.#ctor(System.String,System.Int32)">
          <source>The number of dimensions of the array.</source>
          <target state="translated">Número de dimensiones de la matriz.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" uid="M:System.CodeDom.CodeTypeReference.#ctor(System.String,System.Int32)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.CodeDom.CodeTypeReference" /&gt;</ph> class using the specified array type name and rank.</source>
          <target state="translated">Inicializa una nueva instancia de la clase <ph id="ph1">&lt;see cref="T:System.CodeDom.CodeTypeReference" /&gt;</ph> con el nombre del tipo de matriz y el rango especificados.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" uid="M:System.CodeDom.CodeTypeReference.#ctor(System.Type,System.CodeDom.CodeTypeReferenceOptions)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> to reference.</source>
          <target state="translated">Objeto <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> al que se va a hacer referencia.</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" uid="M:System.CodeDom.CodeTypeReference.#ctor(System.Type,System.CodeDom.CodeTypeReferenceOptions)">
          <source>The code type reference option, one of the <ph id="ph1">&lt;see cref="T:System.CodeDom.CodeTypeReferenceOptions" /&gt;</ph> values.</source>
          <target state="translated">Opción de referencia de tipo de código, uno de los valores de <ph id="ph1">&lt;see cref="T:System.CodeDom.CodeTypeReferenceOptions" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" uid="M:System.CodeDom.CodeTypeReference.#ctor(System.Type,System.CodeDom.CodeTypeReferenceOptions)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.CodeDom.CodeTypeReference" /&gt;</ph> class using the specified type and code type reference.</source>
          <target state="translated">Inicializa una nueva instancia de la clase <ph id="ph1">&lt;see cref="T:System.CodeDom.CodeTypeReference" /&gt;</ph> utilizando el tipo y la referencia de tipo de código especificados.</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" uid="P:System.CodeDom.CodeTypeReference.ArrayElementType">
          <source>Gets or sets the type of the elements in the array.</source>
          <target state="translated">Obtiene o establece el tipo de los elementos de la matriz.</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.CodeDom.CodeTypeReference.ArrayElementType">
          <source>A <ph id="ph1">&lt;see cref="T:System.CodeDom.CodeTypeReference" /&gt;</ph> that indicates the type of the array elements.</source>
          <target state="translated">Objeto <ph id="ph1">&lt;see cref="T:System.CodeDom.CodeTypeReference" /&gt;</ph> que indica el tipo de los elementos de la matriz.</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.CodeDom.CodeTypeReference.ArrayElementType">
          <source>This is disregarded unless the <ph id="ph1">&lt;xref:System.CodeDom.CodeTypeReference.ArrayRank%2A&gt;</ph> property is greater than or equal to 1.</source>
          <target state="translated">Esto se descarta a menos que el <ph id="ph1">&lt;xref:System.CodeDom.CodeTypeReference.ArrayRank%2A&gt;</ph> propiedad es mayor o igual que 1.</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" uid="P:System.CodeDom.CodeTypeReference.ArrayRank">
          <source>Gets or sets the array rank of the array.</source>
          <target state="translated">Obtiene o establece el rango de matrices de la matriz.</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.CodeDom.CodeTypeReference.ArrayRank">
          <source>The number of dimensions of the array.</source>
          <target state="translated">Número de dimensiones de la matriz.</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" uid="P:System.CodeDom.CodeTypeReference.BaseType">
          <source>Gets or sets the name of the type being referenced.</source>
          <target state="translated">Obtiene o establece el nombre del tipo al que se hace referencia.</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.CodeDom.CodeTypeReference.BaseType">
          <source>The name of the type being referenced.</source>
          <target state="translated">El nombre del tipo al que se hace referencia.</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.CodeDom.CodeTypeReference.BaseType">
          <source>This property contains the name of the type unless it is an array type, in which case it is the array element type.</source>
          <target state="translated">Esta propiedad contiene el nombre del tipo a menos que sea un tipo de matriz, en cuyo caso es el tipo de elemento de matriz.</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.CodeDom.CodeTypeReference.BaseType">
          <source>The name of the property may be misleading.</source>
          <target state="translated">El nombre de la propiedad puede ser confusa.</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.CodeDom.CodeTypeReference.BaseType">
          <source>This property contains just the type name with any array adornments or generic type arguments removed, not the base or parent type as might be expected.</source>
          <target state="translated">Esta propiedad contiene el nombre de tipo con adornos o argumentos de tipo genérico quita, no el tipo base o principal como cabría esperar.</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.CodeDom.CodeTypeReference.BaseType">
          <source>For example, the <ph id="ph1">&lt;xref:System.CodeDom.CodeTypeReference.BaseType%2A&gt;</ph> value for <ph id="ph2">``System.Collections.Generic.Dictionary`2[[System.String], [System.Collections.Generic.List`1[[System.Int32]]]]``</ph> is <ph id="ph3">``System.Collections.Generic.Dictionary`2``</ph>.</source>
          <target state="translated">Por ejemplo, el <ph id="ph1">&lt;xref:System.CodeDom.CodeTypeReference.BaseType%2A&gt;</ph> valor <ph id="ph2">``System.Collections.Generic.Dictionary`2[[System.String], [System.Collections.Generic.List`1[[System.Int32]]]]``</ph> es <ph id="ph3">``System.Collections.Generic.Dictionary`2``</ph>.</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.CodeDom.CodeTypeReference.BaseType">
          <source>Representation of Generic Types</source>
          <target state="translated">Representación de tipos genéricos</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.CodeDom.CodeTypeReference.BaseType">
          <source>The information in this section is intended for CodeDom provider developers and only applies to CLS-compliant languages.</source>
          <target state="translated">La información de esta sección está destinada a desarrolladores de proveedores CodeDom y sólo se aplica a lenguajes conformes a CLS.</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.CodeDom.CodeTypeReference.BaseType">
          <source>The return value can contain generic types.</source>
          <target state="translated">El valor devuelto puede contener tipos genéricos.</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.CodeDom.CodeTypeReference.BaseType">
          <source>Generic types are formatted with the name of the type followed by a grave accent ("`") followed by a count of the generic type arguments.</source>
          <target state="translated">Se da formato a los tipos genéricos con el nombre de tipo seguido por un acento grave ("'") seguido de un recuento de los argumentos de tipo genérico.</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.CodeDom.CodeTypeReference.BaseType">
          <source>The generic type arguments can be found in the <ph id="ph1">&lt;xref:System.CodeDom.CodeTypeReferenceCollection&gt;</ph> returned by the <ph id="ph2">&lt;xref:System.CodeDom.CodeTypeReference.TypeArguments%2A&gt;</ph> property.</source>
          <target state="translated">Los argumentos de tipo genérico pueden encontrarse en el <ph id="ph1">&lt;xref:System.CodeDom.CodeTypeReferenceCollection&gt;</ph> devuelto por la <ph id="ph2">&lt;xref:System.CodeDom.CodeTypeReference.TypeArguments%2A&gt;</ph> propiedad.</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.CodeDom.CodeTypeReference.BaseType">
          <source>The values returned by <ph id="ph1">&lt;xref:System.CodeDom.CodeTypeReference.BaseType%2A&gt;</ph> and the associated <ph id="ph2">&lt;xref:System.CodeDom.CodeTypeReference.TypeArguments%2A&gt;</ph> contain the same content as the value of the type returned by reflection.</source>
          <target state="translated">Los valores devueltos por <ph id="ph1">&lt;xref:System.CodeDom.CodeTypeReference.BaseType%2A&gt;</ph> y asociado <ph id="ph2">&lt;xref:System.CodeDom.CodeTypeReference.TypeArguments%2A&gt;</ph> contienen el mismo contenido que el valor del tipo devuelto por reflexión.</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.CodeDom.CodeTypeReference.BaseType">
          <source>For example, a constructed <ph id="ph1">&lt;xref:System.Collections.Generic.Dictionary%602&gt;</ph> where <ph id="ph2">`K`</ph> is a string and <ph id="ph3">`V`</ph> is a constructed <ph id="ph4">&lt;xref:System.Collections.Generic.List%601&gt;</ph> of integers is represented by reflection as the following (with the assembly information removed):</source>
          <target state="translated">Por ejemplo, un construido <ph id="ph1">&lt;xref:System.Collections.Generic.Dictionary%602&gt;</ph> donde <ph id="ph2">`K`</ph> es una cadena y <ph id="ph3">`V`</ph> es un construido <ph id="ph4">&lt;xref:System.Collections.Generic.List%601&gt;</ph> de enteros se representa por reflexión de la forma siguiente (con la información de ensamblado):</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.CodeDom.CodeTypeReference.BaseType">
          <source>Recursively parsing the <ph id="ph1">&lt;xref:System.CodeDom.CodeTypeReference.BaseType%2A&gt;</ph> property from the <ph id="ph2">&lt;xref:System.CodeDom.CodeTypeReference&gt;</ph> for <ph id="ph3">&lt;xref:System.Collections.Generic.Dictionary%602&gt;</ph> yields the same strings as the reflection representation above:</source>
          <target state="translated">Análisis de forma recursiva el <ph id="ph1">&lt;xref:System.CodeDom.CodeTypeReference.BaseType%2A&gt;</ph> propiedad desde el <ph id="ph2">&lt;xref:System.CodeDom.CodeTypeReference&gt;</ph> para <ph id="ph3">&lt;xref:System.Collections.Generic.Dictionary%602&gt;</ph> da como resultado las mismas cadenas como la representación por reflexión anterior:</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.CodeDom.CodeTypeReference.BaseType">
          <source>The <ph id="ph1">&lt;xref:System.CodeDom.CodeTypeReference.BaseType%2A&gt;</ph> property for the parent <ph id="ph2">&lt;xref:System.CodeDom.CodeTypeReference&gt;</ph> returns the following:</source>
          <target state="translated">El <ph id="ph1">&lt;xref:System.CodeDom.CodeTypeReference.BaseType%2A&gt;</ph> propiedad para el elemento primario <ph id="ph2">&lt;xref:System.CodeDom.CodeTypeReference&gt;</ph> devuelve lo siguiente:</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.CodeDom.CodeTypeReference.BaseType">
          <source>The <ph id="ph1">&lt;xref:System.CodeDom.CodeTypeReference.BaseType%2A&gt;</ph> property for the first <ph id="ph2">&lt;xref:System.CodeDom.CodeTypeReference&gt;</ph> object in the <ph id="ph3">&lt;xref:System.CodeDom.CodeTypeReference.TypeArguments%2A&gt;</ph> collection returns the following:</source>
          <target state="translated">El <ph id="ph1">&lt;xref:System.CodeDom.CodeTypeReference.BaseType%2A&gt;</ph> propiedad para el primer <ph id="ph2">&lt;xref:System.CodeDom.CodeTypeReference&gt;</ph> objeto en el <ph id="ph3">&lt;xref:System.CodeDom.CodeTypeReference.TypeArguments%2A&gt;</ph> colección devuelve lo siguiente:</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.CodeDom.CodeTypeReference.BaseType">
          <source>The <ph id="ph1">&lt;xref:System.CodeDom.CodeTypeReference.BaseType%2A&gt;</ph> property for the second <ph id="ph2">&lt;xref:System.CodeDom.CodeTypeReference&gt;</ph> object in the <ph id="ph3">&lt;xref:System.CodeDom.CodeTypeReference.TypeArguments%2A&gt;</ph> collection returns the following:</source>
          <target state="translated">El <ph id="ph1">&lt;xref:System.CodeDom.CodeTypeReference.BaseType%2A&gt;</ph> propiedad para el segundo <ph id="ph2">&lt;xref:System.CodeDom.CodeTypeReference&gt;</ph> objeto en el <ph id="ph3">&lt;xref:System.CodeDom.CodeTypeReference.TypeArguments%2A&gt;</ph> colección devuelve lo siguiente:</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.CodeDom.CodeTypeReference.BaseType">
          <source>The <ph id="ph1">&lt;xref:System.CodeDom.CodeTypeReference.TypeArguments%2A&gt;</ph> property in the <ph id="ph2">&lt;xref:System.CodeDom.CodeTypeReference&gt;</ph> object for <ph id="ph3">``System.Collections.Generic.List`1``</ph> returns the following:</source>
          <target state="translated">El <ph id="ph1">&lt;xref:System.CodeDom.CodeTypeReference.TypeArguments%2A&gt;</ph> propiedad en el <ph id="ph2">&lt;xref:System.CodeDom.CodeTypeReference&gt;</ph> objeto <ph id="ph3">``System.Collections.Generic.List`1``</ph> devuelve lo siguiente:</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.CodeDom.CodeTypeReference.BaseType">
          <source>The type argument count should be used when parsing the associated <ph id="ph1">&lt;xref:System.CodeDom.CodeTypeReference.TypeArguments%2A&gt;</ph> values.</source>
          <target state="translated">El número de argumentos de tipo se debe utilizar al analizar asociado <ph id="ph1">&lt;xref:System.CodeDom.CodeTypeReference.TypeArguments%2A&gt;</ph> valores.</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.CodeDom.CodeTypeReference.BaseType">
          <source>The common practice is to remove the type argument count from the generated code, but the practice is compiler specific.</source>
          <target state="translated">La práctica común consiste en quitar el número de argumentos de tipo del código generado, pero la práctica es específica del compilador.</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.CodeDom.CodeTypeReference.BaseType">
          <source>It is important to note that the type argument count can be found within a nested type name, in which case it is followed by a plus sign ("+").</source>
          <target state="translated">Es importante tener en cuenta que el número de argumentos de tipo puede encontrarse dentro de un nombre de tipo anidado, en cuyo caso es seguido por un signo más ("+").</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.CodeDom.CodeTypeReference.BaseType">
          <source>When creating a generic <ph id="ph1">&lt;xref:System.CodeDom.CodeTypeReference&gt;</ph>, the recommended practice is to specify the type arguments as <ph id="ph2">&lt;xref:System.CodeDom.CodeTypeReference&gt;</ph> objects or use the constructor that takes a <ph id="ph3">&lt;xref:System.Type&gt;</ph>.</source>
          <target state="translated">Cuando se crea un tipo genérico <ph id="ph1">&lt;xref:System.CodeDom.CodeTypeReference&gt;</ph>, la práctica recomendada consiste en especificar los argumentos de tipo como <ph id="ph2">&lt;xref:System.CodeDom.CodeTypeReference&gt;</ph> objetos o utilice el constructor que toma un <ph id="ph3">&lt;xref:System.Type&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.CodeDom.CodeTypeReference.BaseType">
          <source>Use of the constructor that creates a <ph id="ph1">&lt;xref:System.CodeDom.CodeTypeReference&gt;</ph> from a string can lead to undiscoverable type-argument errors.</source>
          <target state="translated">Uso del constructor que crea un <ph id="ph1">&lt;xref:System.CodeDom.CodeTypeReference&gt;</ph> de una cadena puede conducir a errores de argumento de tipo imprevisibles.</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" uid="P:System.CodeDom.CodeTypeReference.Options">
          <source>Gets or sets the code type reference option.</source>
          <target state="translated">Obtiene o establece la opción de referencia de tipo de código.</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.CodeDom.CodeTypeReference.Options">
          <source>A bitwise combination of the <ph id="ph1">&lt;see cref="T:System.CodeDom.CodeTypeReferenceOptions" /&gt;</ph> values.</source>
          <target state="translated">Combinación bit a bit de los valores de <ph id="ph1">&lt;see cref="T:System.CodeDom.CodeTypeReferenceOptions" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" uid="P:System.CodeDom.CodeTypeReference.TypeArguments">
          <source>Gets the type arguments for the current generic type reference.</source>
          <target state="translated">Obtiene los argumentos de tipo para la referencia de tipo genérico actual.</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.CodeDom.CodeTypeReference.TypeArguments">
          <source>A <ph id="ph1">&lt;see cref="T:System.CodeDom.CodeTypeReferenceCollection" /&gt;</ph> containing the type arguments for the current <ph id="ph2">&lt;see cref="T:System.CodeDom.CodeTypeReference" /&gt;</ph> object.</source>
          <target state="translated">Colección <ph id="ph1">&lt;see cref="T:System.CodeDom.CodeTypeReferenceCollection" /&gt;</ph> que contiene los argumentos de tipo para el objeto <ph id="ph2">&lt;see cref="T:System.CodeDom.CodeTypeReference" /&gt;</ph> actual.</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.CodeDom.CodeTypeReference.TypeArguments">
          <source>The <ph id="ph1">&lt;xref:System.CodeDom.CodeTypeReference.TypeArguments%2A&gt;</ph> property is a collection of type references to be substituted for the type parameter references of the current generic type.</source>
          <target state="translated">El <ph id="ph1">&lt;xref:System.CodeDom.CodeTypeReference.TypeArguments%2A&gt;</ph> propiedad es una colección de referencias de tipo que se sustituirá para las referencias del parámetro de tipo del tipo genérico actual.</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.CodeDom.CodeTypeReference.TypeArguments">
          <source>The collection contains all the type arguments for all nested types.</source>
          <target state="translated">La colección contiene todos los argumentos de tipo para todos los tipos anidados.</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.CodeDom.CodeTypeReference.TypeArguments">
          <source>For an example, see the <ph id="ph1">&lt;xref:System.CodeDom.CodeTypeReference.BaseType%2A&gt;</ph> property.</source>
          <target state="translated">Para obtener un ejemplo, vea el <ph id="ph1">&lt;xref:System.CodeDom.CodeTypeReference.BaseType%2A&gt;</ph> propiedad.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>