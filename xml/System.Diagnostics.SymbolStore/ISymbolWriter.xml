<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="ISymbolWriter.xml" source-language="en-US" target-language="es-ES">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac56e350929abc36f84a74566e71622bef50159cab1.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">6e350929abc36f84a74566e71622bef50159cab1</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,netstandard-2.0,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.Diagnostics.SymbolStore.ISymbolWriter">
          <source>Represents a symbol writer for managed code.</source>
          <target state="translated">Representa un escritor de símbolos de código administrado.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Diagnostics.SymbolStore.ISymbolWriter">
          <source>The <ph id="ph1">&lt;xref:System.Diagnostics.SymbolStore.ISymbolWriter&gt;</ph> interface provides methods that define documents, sequence points, lexical scopes, and variables.</source>
          <target state="translated">El <ph id="ph1">&lt;xref:System.Diagnostics.SymbolStore.ISymbolWriter&gt;</ph> interfaz proporciona métodos que definen documentos, puntos de secuencia, ámbitos léxicos y variables.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Diagnostics.SymbolStore.ISymbolWriter">
          <source>This interface is the managed counterpart of the <ph id="ph1">`ISymUnmanagedWriter`</ph> interface, which is one of the unmanaged symbol store interfaces that provides an alternative way to read and write debug symbol information.</source>
          <target state="translated">Esta interfaz es el equivalente administrado de la <ph id="ph1">`ISymUnmanagedWriter`</ph> interfaz, que es una de las interfaces de almacén de símbolos no administrado que proporciona una manera alternativa para leer y escribir información de símbolos de depuración.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.SymbolStore.ISymbolWriter.Close">
          <source>Closes <ph id="ph1">&lt;see cref="T:System.Diagnostics.SymbolStore.ISymbolWriter" /&gt;</ph> and commits the symbols to the symbol store.</source>
          <target state="translated">Cierra <ph id="ph1">&lt;see cref="T:System.Diagnostics.SymbolStore.ISymbolWriter" /&gt;</ph> y confirma los símbolos en el almacén de símbolos.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.SymbolStore.ISymbolWriter.Close">
          <source>After this call, <ph id="ph1">&lt;xref:System.Diagnostics.SymbolStore.ISymbolWriter&gt;</ph> becomes invalid for further updates.</source>
          <target state="translated">Después de esta llamada, <ph id="ph1">&lt;xref:System.Diagnostics.SymbolStore.ISymbolWriter&gt;</ph> deja de ser válido para futuras actualizaciones.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.SymbolStore.ISymbolWriter.CloseMethod">
          <source>Closes the current method.</source>
          <target state="translated">Cierra el método actual.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.SymbolStore.ISymbolWriter.CloseMethod">
          <source>After a method is closed, you cannot define a symbol from within it.</source>
          <target state="translated">Después de cerrar un método, no se puede definir un símbolo desde dentro de él.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.SymbolStore.ISymbolWriter.CloseNamespace">
          <source>Closes the most recent namespace.</source>
          <target state="translated">Cierra el espacio de nombres más reciente.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.SymbolStore.ISymbolWriter.CloseScope(System.Int32)">
          <source>The points past the last instruction in the scope.</source>
          <target state="translated">Puntos situados a partir de la última instrucción del ámbito.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.SymbolStore.ISymbolWriter.CloseScope(System.Int32)">
          <source>Closes the current lexical scope.</source>
          <target state="translated">Cierra el ámbito léxico actual.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.SymbolStore.ISymbolWriter.CloseScope(System.Int32)">
          <source>After a scope is closed, you cannot define a variable from within it.</source>
          <target state="translated">Después de cerrar un ámbito, no se puede definir una variable desde dentro de él.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.SymbolStore.ISymbolWriter.DefineDocument(System.String,System.Guid,System.Guid,System.Guid)">
          <source>The URL that identifies the document.</source>
          <target state="translated">Dirección URL que identifica el documento.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.SymbolStore.ISymbolWriter.DefineDocument(System.String,System.Guid,System.Guid,System.Guid)">
          <source>The document language.</source>
          <target state="translated">Lenguaje del documento.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.SymbolStore.ISymbolWriter.DefineDocument(System.String,System.Guid,System.Guid,System.Guid)">
          <source>This parameter can be <ph id="ph1">&lt;see cref="F:System.Guid.Empty" /&gt;</ph>.</source>
          <target state="translated">Este parámetro puede ser <ph id="ph1">&lt;see cref="F:System.Guid.Empty" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.SymbolStore.ISymbolWriter.DefineDocument(System.String,System.Guid,System.Guid,System.Guid)">
          <source>The identity of the vendor for the document language.</source>
          <target state="translated">Identidad del proveedor del lenguaje del documento.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.SymbolStore.ISymbolWriter.DefineDocument(System.String,System.Guid,System.Guid,System.Guid)">
          <source>This parameter can be <ph id="ph1">&lt;see cref="F:System.Guid.Empty" /&gt;</ph>.</source>
          <target state="translated">Este parámetro puede ser <ph id="ph1">&lt;see cref="F:System.Guid.Empty" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.SymbolStore.ISymbolWriter.DefineDocument(System.String,System.Guid,System.Guid,System.Guid)">
          <source>The type of the document.</source>
          <target state="translated">Tipo del documento.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.SymbolStore.ISymbolWriter.DefineDocument(System.String,System.Guid,System.Guid,System.Guid)">
          <source>This parameter can be <ph id="ph1">&lt;see cref="F:System.Guid.Empty" /&gt;</ph>.</source>
          <target state="translated">Este parámetro puede ser <ph id="ph1">&lt;see cref="F:System.Guid.Empty" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.SymbolStore.ISymbolWriter.DefineDocument(System.String,System.Guid,System.Guid,System.Guid)">
          <source>Defines a source document.</source>
          <target state="translated">Define un documento de origen.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.SymbolStore.ISymbolWriter.DefineDocument(System.String,System.Guid,System.Guid,System.Guid)">
          <source>The object that represents the document.</source>
          <target state="translated">El objeto que representa el documento.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.SymbolStore.ISymbolWriter.DefineField(System.Diagnostics.SymbolStore.SymbolToken,System.String,System.Reflection.FieldAttributes,System.Byte[],System.Diagnostics.SymbolStore.SymAddressKind,System.Int32,System.Int32,System.Int32)">
          <source>The metadata type or method token.</source>
          <target state="translated">Tipo de metadatos o símbolo (token) del método.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.SymbolStore.ISymbolWriter.DefineField(System.Diagnostics.SymbolStore.SymbolToken,System.String,System.Reflection.FieldAttributes,System.Byte[],System.Diagnostics.SymbolStore.SymAddressKind,System.Int32,System.Int32,System.Int32)">
          <source>The field name.</source>
          <target state="translated">Nombre de campo.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.SymbolStore.ISymbolWriter.DefineField(System.Diagnostics.SymbolStore.SymbolToken,System.String,System.Reflection.FieldAttributes,System.Byte[],System.Diagnostics.SymbolStore.SymAddressKind,System.Int32,System.Int32,System.Int32)">
          <source>A bitwise combination of the field attributes.</source>
          <target state="translated">Combinación bit a bit de los atributos del campo.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.SymbolStore.ISymbolWriter.DefineField(System.Diagnostics.SymbolStore.SymbolToken,System.String,System.Reflection.FieldAttributes,System.Byte[],System.Diagnostics.SymbolStore.SymAddressKind,System.Int32,System.Int32,System.Int32)">
          <source>The field signature.</source>
          <target state="translated">Firma del campo.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.SymbolStore.ISymbolWriter.DefineField(System.Diagnostics.SymbolStore.SymbolToken,System.String,System.Reflection.FieldAttributes,System.Byte[],System.Diagnostics.SymbolStore.SymAddressKind,System.Int32,System.Int32,System.Int32)">
          <source>The address types for <bpt id="p1">&lt;c&gt;</bpt>addr1<ept id="p1">&lt;/c&gt;</ept> and <bpt id="p2">&lt;c&gt;</bpt>addr2<ept id="p2">&lt;/c&gt;</ept>.</source>
          <target state="translated">Tipos de dirección para <bpt id="p1">&lt;c&gt;</bpt>addr1<ept id="p1">&lt;/c&gt;</ept> y <bpt id="p2">&lt;c&gt;</bpt>addr2<ept id="p2">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.SymbolStore.ISymbolWriter.DefineField(System.Diagnostics.SymbolStore.SymbolToken,System.String,System.Reflection.FieldAttributes,System.Byte[],System.Diagnostics.SymbolStore.SymAddressKind,System.Int32,System.Int32,System.Int32)">
          <source>The first address for the field specification.</source>
          <target state="translated">Primera dirección de la especificación de campo.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.SymbolStore.ISymbolWriter.DefineField(System.Diagnostics.SymbolStore.SymbolToken,System.String,System.Reflection.FieldAttributes,System.Byte[],System.Diagnostics.SymbolStore.SymAddressKind,System.Int32,System.Int32,System.Int32)">
          <source>The second address for the field specification.</source>
          <target state="translated">Segunda dirección de la especificación de campo.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.SymbolStore.ISymbolWriter.DefineField(System.Diagnostics.SymbolStore.SymbolToken,System.String,System.Reflection.FieldAttributes,System.Byte[],System.Diagnostics.SymbolStore.SymAddressKind,System.Int32,System.Int32,System.Int32)">
          <source>The third address for the field specification.</source>
          <target state="translated">Tercera dirección de la especificación de campo.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.SymbolStore.ISymbolWriter.DefineField(System.Diagnostics.SymbolStore.SymbolToken,System.String,System.Reflection.FieldAttributes,System.Byte[],System.Diagnostics.SymbolStore.SymAddressKind,System.Int32,System.Int32,System.Int32)">
          <source>Defines a field in a type or a global field.</source>
          <target state="translated">Define un campo de un campo global o tipo.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.SymbolStore.ISymbolWriter.DefineField(System.Diagnostics.SymbolStore.SymbolToken,System.String,System.Reflection.FieldAttributes,System.Byte[],System.Diagnostics.SymbolStore.SymAddressKind,System.Int32,System.Int32,System.Int32)">
          <source>The <ph id="ph1">&lt;xref:System.Diagnostics.SymbolStore.ISymbolWriter.DefineField%2A&gt;</ph> method defines a single variable that is not within a method by using specified fields in classes, bit fields, and so on.</source>
          <target state="translated">El <ph id="ph1">&lt;xref:System.Diagnostics.SymbolStore.ISymbolWriter.DefineField%2A&gt;</ph> método define una única variable que no está dentro de un método mediante el uso de campos especificados en clases, campos de bits y así sucesivamente.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.SymbolStore.ISymbolWriter.DefineGlobalVariable(System.String,System.Reflection.FieldAttributes,System.Byte[],System.Diagnostics.SymbolStore.SymAddressKind,System.Int32,System.Int32,System.Int32)">
          <source>The global variable name.</source>
          <target state="translated">Nombre de la variable global.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.SymbolStore.ISymbolWriter.DefineGlobalVariable(System.String,System.Reflection.FieldAttributes,System.Byte[],System.Diagnostics.SymbolStore.SymAddressKind,System.Int32,System.Int32,System.Int32)">
          <source>A bitwise combination of the global variable attributes.</source>
          <target state="translated">Combinación bit a bit de los atributos de la variable global.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.SymbolStore.ISymbolWriter.DefineGlobalVariable(System.String,System.Reflection.FieldAttributes,System.Byte[],System.Diagnostics.SymbolStore.SymAddressKind,System.Int32,System.Int32,System.Int32)">
          <source>The global variable signature.</source>
          <target state="translated">Firma de la variable global.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.SymbolStore.ISymbolWriter.DefineGlobalVariable(System.String,System.Reflection.FieldAttributes,System.Byte[],System.Diagnostics.SymbolStore.SymAddressKind,System.Int32,System.Int32,System.Int32)">
          <source>The address types for <bpt id="p1">&lt;c&gt;</bpt>addr1<ept id="p1">&lt;/c&gt;</ept>, <bpt id="p2">&lt;c&gt;</bpt>addr2<ept id="p2">&lt;/c&gt;</ept>, and <bpt id="p3">&lt;c&gt;</bpt>addr3<ept id="p3">&lt;/c&gt;</ept>.</source>
          <target state="translated">Tipos de dirección para <bpt id="p1">&lt;c&gt;</bpt>addr1<ept id="p1">&lt;/c&gt;</ept>, <bpt id="p2">&lt;c&gt;</bpt>addr2<ept id="p2">&lt;/c&gt;</ept> y <bpt id="p3">&lt;c&gt;</bpt>addr3<ept id="p3">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.SymbolStore.ISymbolWriter.DefineGlobalVariable(System.String,System.Reflection.FieldAttributes,System.Byte[],System.Diagnostics.SymbolStore.SymAddressKind,System.Int32,System.Int32,System.Int32)">
          <source>The first address for the global variable specification.</source>
          <target state="translated">Primera dirección de la especificación de variable global.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.SymbolStore.ISymbolWriter.DefineGlobalVariable(System.String,System.Reflection.FieldAttributes,System.Byte[],System.Diagnostics.SymbolStore.SymAddressKind,System.Int32,System.Int32,System.Int32)">
          <source>The second address for the global variable specification.</source>
          <target state="translated">Segunda dirección de la especificación de variable global.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.SymbolStore.ISymbolWriter.DefineGlobalVariable(System.String,System.Reflection.FieldAttributes,System.Byte[],System.Diagnostics.SymbolStore.SymAddressKind,System.Int32,System.Int32,System.Int32)">
          <source>The third address for the global variable specification.</source>
          <target state="translated">Tercera dirección de la especificación de variable global.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.SymbolStore.ISymbolWriter.DefineGlobalVariable(System.String,System.Reflection.FieldAttributes,System.Byte[],System.Diagnostics.SymbolStore.SymAddressKind,System.Int32,System.Int32,System.Int32)">
          <source>Defines a single global variable.</source>
          <target state="translated">Define una única variable global.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.SymbolStore.ISymbolWriter.DefineLocalVariable(System.String,System.Reflection.FieldAttributes,System.Byte[],System.Diagnostics.SymbolStore.SymAddressKind,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
          <source>The local variable name.</source>
          <target state="translated">Nombre de la variable local.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.SymbolStore.ISymbolWriter.DefineLocalVariable(System.String,System.Reflection.FieldAttributes,System.Byte[],System.Diagnostics.SymbolStore.SymAddressKind,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
          <source>A bitwise combination of the local variable attributes.</source>
          <target state="translated">Combinación bit a bit de los atributos de la variable local.</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.SymbolStore.ISymbolWriter.DefineLocalVariable(System.String,System.Reflection.FieldAttributes,System.Byte[],System.Diagnostics.SymbolStore.SymAddressKind,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
          <source>The local variable signature.</source>
          <target state="translated">Firma de la variable local.</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.SymbolStore.ISymbolWriter.DefineLocalVariable(System.String,System.Reflection.FieldAttributes,System.Byte[],System.Diagnostics.SymbolStore.SymAddressKind,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
          <source>The address types for <bpt id="p1">&lt;c&gt;</bpt>addr1<ept id="p1">&lt;/c&gt;</ept>, <bpt id="p2">&lt;c&gt;</bpt>addr2<ept id="p2">&lt;/c&gt;</ept>, and <bpt id="p3">&lt;c&gt;</bpt>addr3<ept id="p3">&lt;/c&gt;</ept>.</source>
          <target state="translated">Tipos de dirección para <bpt id="p1">&lt;c&gt;</bpt>addr1<ept id="p1">&lt;/c&gt;</ept>, <bpt id="p2">&lt;c&gt;</bpt>addr2<ept id="p2">&lt;/c&gt;</ept> y <bpt id="p3">&lt;c&gt;</bpt>addr3<ept id="p3">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.SymbolStore.ISymbolWriter.DefineLocalVariable(System.String,System.Reflection.FieldAttributes,System.Byte[],System.Diagnostics.SymbolStore.SymAddressKind,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
          <source>The first address for the local variable specification.</source>
          <target state="translated">Primera dirección de la especificación de variable local.</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.SymbolStore.ISymbolWriter.DefineLocalVariable(System.String,System.Reflection.FieldAttributes,System.Byte[],System.Diagnostics.SymbolStore.SymAddressKind,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
          <source>The second address for the local variable specification.</source>
          <target state="translated">Segunda dirección de la especificación de variable local.</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.SymbolStore.ISymbolWriter.DefineLocalVariable(System.String,System.Reflection.FieldAttributes,System.Byte[],System.Diagnostics.SymbolStore.SymAddressKind,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
          <source>The third address for the local variable specification.</source>
          <target state="translated">Tercera dirección de la especificación de variable local.</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.SymbolStore.ISymbolWriter.DefineLocalVariable(System.String,System.Reflection.FieldAttributes,System.Byte[],System.Diagnostics.SymbolStore.SymAddressKind,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
          <source>The start offset for the variable.</source>
          <target state="translated">Desplazamiento inicial de la variable.</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.SymbolStore.ISymbolWriter.DefineLocalVariable(System.String,System.Reflection.FieldAttributes,System.Byte[],System.Diagnostics.SymbolStore.SymAddressKind,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
          <source>If this parameter is zero, it is ignored and the variable is defined throughout the entire scope.</source>
          <target state="translated">Si este parámetro es cero, se omite este parámetro y se define la variable en todo el ámbito.</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.SymbolStore.ISymbolWriter.DefineLocalVariable(System.String,System.Reflection.FieldAttributes,System.Byte[],System.Diagnostics.SymbolStore.SymAddressKind,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
          <source>If the parameter is nonzero, the variable falls within the offsets of the current scope.</source>
          <target state="translated">Si el parámetro no es cero, la variable está comprendida dentro de los desplazamientos del ámbito actual.</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.SymbolStore.ISymbolWriter.DefineLocalVariable(System.String,System.Reflection.FieldAttributes,System.Byte[],System.Diagnostics.SymbolStore.SymAddressKind,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
          <source>The end offset for the variable.</source>
          <target state="translated">Desplazamiento final de la variable.</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.SymbolStore.ISymbolWriter.DefineLocalVariable(System.String,System.Reflection.FieldAttributes,System.Byte[],System.Diagnostics.SymbolStore.SymAddressKind,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
          <source>If this parameter is zero, it is ignored and the variable is defined throughout the entire scope.</source>
          <target state="translated">Si este parámetro es cero, se omite este parámetro y se define la variable en todo el ámbito.</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.SymbolStore.ISymbolWriter.DefineLocalVariable(System.String,System.Reflection.FieldAttributes,System.Byte[],System.Diagnostics.SymbolStore.SymAddressKind,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
          <source>If the parameter is nonzero, the variable falls within the offsets of the current scope.</source>
          <target state="translated">Si el parámetro no es cero, la variable está comprendida dentro de los desplazamientos del ámbito actual.</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.SymbolStore.ISymbolWriter.DefineLocalVariable(System.String,System.Reflection.FieldAttributes,System.Byte[],System.Diagnostics.SymbolStore.SymAddressKind,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
          <source>Defines a single variable in the current lexical scope.</source>
          <target state="translated">Define una única variable en el ámbito léxico actual.</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.SymbolStore.ISymbolWriter.DefineLocalVariable(System.String,System.Reflection.FieldAttributes,System.Byte[],System.Diagnostics.SymbolStore.SymAddressKind,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
          <source>The <ph id="ph1">`startOffset`</ph> and <ph id="ph2">`endOffset`</ph> parameters are optional.</source>
          <target state="translated">El <ph id="ph1">`startOffset`</ph> y <ph id="ph2">`endOffset`</ph> parámetros son opcionales.</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.SymbolStore.ISymbolWriter.DefineLocalVariable(System.String,System.Reflection.FieldAttributes,System.Byte[],System.Diagnostics.SymbolStore.SymAddressKind,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
          <source>If their value is zero, they are ignored and the variable is defined throughout the entire scope.</source>
          <target state="translated">Si su valor es cero, se omiten y la variable se define en todo el ámbito.</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.SymbolStore.ISymbolWriter.DefineLocalVariable(System.String,System.Reflection.FieldAttributes,System.Byte[],System.Diagnostics.SymbolStore.SymAddressKind,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
          <source>If their value is nonzero, the variable falls within the offsets of the current scope.</source>
          <target state="translated">Si su valor es distinto de cero, la variable se encuentra dentro de los desplazamientos del ámbito actual.</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.SymbolStore.ISymbolWriter.DefineLocalVariable(System.String,System.Reflection.FieldAttributes,System.Byte[],System.Diagnostics.SymbolStore.SymAddressKind,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
          <source>You can call <ph id="ph1">&lt;xref:System.Diagnostics.SymbolStore.ISymbolWriter.DefineLocalVariable%2A&gt;</ph> multiple times for a variable of the same name that occurs multiple times in different offset ranges throughout a scope.</source>
          <target state="translated">Puede llamar a <ph id="ph1">&lt;xref:System.Diagnostics.SymbolStore.ISymbolWriter.DefineLocalVariable%2A&gt;</ph> varias veces para una variable del mismo nombre que aparece varias veces en distintos intervalos de desplazamiento a lo largo de un ámbito.</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.SymbolStore.ISymbolWriter.DefineLocalVariable(System.String,System.Reflection.FieldAttributes,System.Byte[],System.Diagnostics.SymbolStore.SymAddressKind,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
          <source>(In this case, start and end offsets must not overlap.)</source>
          <target state="translated">(En este caso, los desplazamientos inicial y final no deben solaparse.)</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.SymbolStore.ISymbolWriter.DefineParameter(System.String,System.Reflection.ParameterAttributes,System.Int32,System.Diagnostics.SymbolStore.SymAddressKind,System.Int32,System.Int32,System.Int32)">
          <source>The parameter name.</source>
          <target state="translated">Nombre del parámetro.</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.SymbolStore.ISymbolWriter.DefineParameter(System.String,System.Reflection.ParameterAttributes,System.Int32,System.Diagnostics.SymbolStore.SymAddressKind,System.Int32,System.Int32,System.Int32)">
          <source>A bitwise combination of the parameter attributes.</source>
          <target state="translated">Combinación bit a bit de los atributos del parámetro.</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.SymbolStore.ISymbolWriter.DefineParameter(System.String,System.Reflection.ParameterAttributes,System.Int32,System.Diagnostics.SymbolStore.SymAddressKind,System.Int32,System.Int32,System.Int32)">
          <source>The parameter signature.</source>
          <target state="translated">Firma del parámetro.</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.SymbolStore.ISymbolWriter.DefineParameter(System.String,System.Reflection.ParameterAttributes,System.Int32,System.Diagnostics.SymbolStore.SymAddressKind,System.Int32,System.Int32,System.Int32)">
          <source>The address types for <bpt id="p1">&lt;c&gt;</bpt>addr1<ept id="p1">&lt;/c&gt;</ept>, <bpt id="p2">&lt;c&gt;</bpt>addr2<ept id="p2">&lt;/c&gt;</ept>, and <bpt id="p3">&lt;c&gt;</bpt>addr3<ept id="p3">&lt;/c&gt;</ept>.</source>
          <target state="translated">Tipos de dirección para <bpt id="p1">&lt;c&gt;</bpt>addr1<ept id="p1">&lt;/c&gt;</ept>, <bpt id="p2">&lt;c&gt;</bpt>addr2<ept id="p2">&lt;/c&gt;</ept> y <bpt id="p3">&lt;c&gt;</bpt>addr3<ept id="p3">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.SymbolStore.ISymbolWriter.DefineParameter(System.String,System.Reflection.ParameterAttributes,System.Int32,System.Diagnostics.SymbolStore.SymAddressKind,System.Int32,System.Int32,System.Int32)">
          <source>The first address for the parameter specification.</source>
          <target state="translated">Primera dirección de la especificación de parámetro.</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.SymbolStore.ISymbolWriter.DefineParameter(System.String,System.Reflection.ParameterAttributes,System.Int32,System.Diagnostics.SymbolStore.SymAddressKind,System.Int32,System.Int32,System.Int32)">
          <source>The second address for the parameter specification.</source>
          <target state="translated">Segunda dirección de la especificación de parámetro.</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.SymbolStore.ISymbolWriter.DefineParameter(System.String,System.Reflection.ParameterAttributes,System.Int32,System.Diagnostics.SymbolStore.SymAddressKind,System.Int32,System.Int32,System.Int32)">
          <source>The third address for the parameter specification.</source>
          <target state="translated">Tercera dirección de la especificación de parámetro.</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.SymbolStore.ISymbolWriter.DefineParameter(System.String,System.Reflection.ParameterAttributes,System.Int32,System.Diagnostics.SymbolStore.SymAddressKind,System.Int32,System.Int32,System.Int32)">
          <source>Defines a single parameter in the current method.</source>
          <target state="translated">Define un único parámetro en el método actual.</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.SymbolStore.ISymbolWriter.DefineParameter(System.String,System.Reflection.ParameterAttributes,System.Int32,System.Diagnostics.SymbolStore.SymAddressKind,System.Int32,System.Int32,System.Int32)">
          <source>The type of each parameter is taken from its position within the signature of the method.</source>
          <target state="translated">El tipo de cada parámetro se toma de la posición del parámetro dentro de la firma del método.</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.SymbolStore.ISymbolWriter.DefineParameter(System.String,System.Reflection.ParameterAttributes,System.Int32,System.Diagnostics.SymbolStore.SymAddressKind,System.Int32,System.Int32,System.Int32)">
          <source>If parameters are defined in the metadata for a given method, you do not have to define them again with calls to this method.</source>
          <target state="translated">Si los parámetros se definen en los metadatos de un método determinado, no tiene que volver a definirlos con llamadas a este método.</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.SymbolStore.ISymbolWriter.DefineParameter(System.String,System.Reflection.ParameterAttributes,System.Int32,System.Diagnostics.SymbolStore.SymAddressKind,System.Int32,System.Int32,System.Int32)">
          <source>Symbol readers need to check for these in the normal metadata first, and then use the symbol store.</source>
          <target state="translated">Los lectores de símbolos se necesitan comprobar estos conceptos en los metadatos normales en primer lugar y, a continuación, usar el almacén de símbolos.</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.SymbolStore.ISymbolWriter.DefineSequencePoints(System.Diagnostics.SymbolStore.ISymbolDocumentWriter,System.Int32[],System.Int32[],System.Int32[],System.Int32[],System.Int32[])">
          <source>The document object for which the sequence points are being defined.</source>
          <target state="translated">Objeto de documento para el que se definen los puntos de secuencia.</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.SymbolStore.ISymbolWriter.DefineSequencePoints(System.Diagnostics.SymbolStore.ISymbolDocumentWriter,System.Int32[],System.Int32[],System.Int32[],System.Int32[],System.Int32[])">
          <source>The sequence point offsets measured from the beginning of methods.</source>
          <target state="translated">Desplazamientos de puntos de secuencia calculados desde el principio de los métodos.</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.SymbolStore.ISymbolWriter.DefineSequencePoints(System.Diagnostics.SymbolStore.ISymbolDocumentWriter,System.Int32[],System.Int32[],System.Int32[],System.Int32[],System.Int32[])">
          <source>The document lines for the sequence points.</source>
          <target state="translated">Líneas de documento de los puntos de secuencia.</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.SymbolStore.ISymbolWriter.DefineSequencePoints(System.Diagnostics.SymbolStore.ISymbolDocumentWriter,System.Int32[],System.Int32[],System.Int32[],System.Int32[],System.Int32[])">
          <source>The document positions for the sequence points.</source>
          <target state="translated">Posiciones de documento de los puntos de secuencia.</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.SymbolStore.ISymbolWriter.DefineSequencePoints(System.Diagnostics.SymbolStore.ISymbolDocumentWriter,System.Int32[],System.Int32[],System.Int32[],System.Int32[],System.Int32[])">
          <source>The document end lines for the sequence points.</source>
          <target state="translated">Líneas finales de documento de los puntos de secuencia.</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.SymbolStore.ISymbolWriter.DefineSequencePoints(System.Diagnostics.SymbolStore.ISymbolDocumentWriter,System.Int32[],System.Int32[],System.Int32[],System.Int32[],System.Int32[])">
          <source>The document end positions for the sequence points.</source>
          <target state="translated">Posiciones finales de documento de los puntos de secuencia.</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.SymbolStore.ISymbolWriter.DefineSequencePoints(System.Diagnostics.SymbolStore.ISymbolDocumentWriter,System.Int32[],System.Int32[],System.Int32[],System.Int32[],System.Int32[])">
          <source>Defines a group of sequence points within the current method.</source>
          <target state="translated">Define un grupo de puntos de secuencia dentro del método actual.</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.SymbolStore.ISymbolWriter.DefineSequencePoints(System.Diagnostics.SymbolStore.ISymbolDocumentWriter,System.Int32[],System.Int32[],System.Int32[],System.Int32[],System.Int32[])">
          <source>Each line and each column defines the start of a statement within a method.</source>
          <target state="translated">Cada línea y cada columna que definen el inicio de una instrucción dentro de un método.</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.SymbolStore.ISymbolWriter.DefineSequencePoints(System.Diagnostics.SymbolStore.ISymbolDocumentWriter,System.Int32[],System.Int32[],System.Int32[],System.Int32[],System.Int32[])">
          <source>The arrays should be sorted in increasing order of offsets.</source>
          <target state="translated">Las matrices se deben ordenar en orden creciente de desplazamientos.</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.SymbolStore.ISymbolWriter.DefineSequencePoints(System.Diagnostics.SymbolStore.ISymbolDocumentWriter,System.Int32[],System.Int32[],System.Int32[],System.Int32[],System.Int32[])">
          <source>The offset is always the offset from the start of the method, in bytes.</source>
          <target state="translated">El desplazamiento es siempre el desplazamiento desde el principio del método, en bytes.</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.SymbolStore.ISymbolWriter.Initialize(System.IntPtr,System.String,System.Boolean)">
          <source>The metadata emitter interface.</source>
          <target state="translated">Interfaz emisora de metadatos.</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.SymbolStore.ISymbolWriter.Initialize(System.IntPtr,System.String,System.Boolean)">
          <source>The file name for which the debugging symbols are written.</source>
          <target state="translated">Nombre del archivo para el que se escriben los símbolos de depuración.</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.SymbolStore.ISymbolWriter.Initialize(System.IntPtr,System.String,System.Boolean)">
          <source>Some writers require a file name, and others do not.</source>
          <target state="translated">Algunos escritores precisan un nombre de archivo, mientras que otros no. </target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.SymbolStore.ISymbolWriter.Initialize(System.IntPtr,System.String,System.Boolean)">
          <source>If a file name is specified for a writer that does not use file names, this parameter is ignored.</source>
          <target state="translated">Si se especifica un nombre de archivo para un escritor que no usa nombres de archivo, se omite este parámetro.</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.SymbolStore.ISymbolWriter.Initialize(System.IntPtr,System.String,System.Boolean)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> indicates that this is a full rebuild; <ph id="ph2">&lt;see langword="false" /&gt;</ph> indicates that this is an incremental compilation.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> indica que se trata de una recompilación completa; <ph id="ph2">&lt;see langword="false" /&gt;</ph> indica que se trata de una compilación incremental.</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.SymbolStore.ISymbolWriter.Initialize(System.IntPtr,System.String,System.Boolean)">
          <source>Sets the metadata emitter interface to associate with a writer.</source>
          <target state="translated">Establece la interfaz emisora de metadatos que se va a asociar al escritor.</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.SymbolStore.ISymbolWriter.Initialize(System.IntPtr,System.String,System.Boolean)">
          <source><ph id="ph1">&lt;xref:System.Diagnostics.SymbolStore.ISymbolWriter.Initialize%2A&gt;</ph> also sets the output file name where the debugging symbols are written.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Diagnostics.SymbolStore.ISymbolWriter.Initialize%2A&gt;</ph> También establece el nombre de archivo de salida donde se escriben los símbolos de depuración.</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.SymbolStore.ISymbolWriter.Initialize(System.IntPtr,System.String,System.Boolean)">
          <source>This method can be called only once and must be called before any other writer methods.</source>
          <target state="translated">Este método puede llamar una sola vez y se debe llamar antes de cualquier otro método de escritura.</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.SymbolStore.ISymbolWriter.OpenMethod(System.Diagnostics.SymbolStore.SymbolToken)">
          <source>The metadata token for the method to be opened.</source>
          <target state="translated">Símbolo (token) de metadatos para el método que se va a abrir.</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.SymbolStore.ISymbolWriter.OpenMethod(System.Diagnostics.SymbolStore.SymbolToken)">
          <source>Opens a method to place symbol information into.</source>
          <target state="translated">Abre un método para incluir información de símbolos.</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.SymbolStore.ISymbolWriter.OpenMethod(System.Diagnostics.SymbolStore.SymbolToken)">
          <source>The specified method becomes the current method for calls to define sequence points, parameters, and lexical scopes.</source>
          <target state="translated">El método especificado se convierte en el método actual para las llamadas definir puntos de secuencia, parámetros y ámbitos léxicos.</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.SymbolStore.ISymbolWriter.OpenMethod(System.Diagnostics.SymbolStore.SymbolToken)">
          <source>There is an implicit lexical scope around the entire method.</source>
          <target state="translated">Hay un ámbito léxico implícito en torno al método completo.</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.SymbolStore.ISymbolWriter.OpenMethod(System.Diagnostics.SymbolStore.SymbolToken)">
          <source>Reopening a method that has been previously closed erases any previously defined symbols for the method.</source>
          <target state="translated">Volver a abrir un método que se ha cerrado previamente, borrará todos los símbolos definidos previamente para el método.</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.SymbolStore.ISymbolWriter.OpenNamespace(System.String)">
          <source>The name of the new namespace.</source>
          <target state="translated">Nombre del nuevo espacio de nombres.</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.SymbolStore.ISymbolWriter.OpenNamespace(System.String)">
          <source>Opens a new namespace.</source>
          <target state="translated">Abre un nuevo espacio de nombres.</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.SymbolStore.ISymbolWriter.OpenNamespace(System.String)">
          <source>Call this method before defining methods or variables that exist within a namespace.</source>
          <target state="translated">Llamar a este método antes de definir métodos o variables que existen dentro de un espacio de nombres.</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.SymbolStore.ISymbolWriter.OpenNamespace(System.String)">
          <source>Namespaces can be nested.</source>
          <target state="translated">Espacios de nombres se pueden anidar.</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.SymbolStore.ISymbolWriter.OpenScope(System.Int32)">
          <source>The offset, in bytes, from the beginning of the method to the first instruction in the lexical scope.</source>
          <target state="translated">Desplazamiento en bytes desde el principio del método hasta la primera instrucción del ámbito léxico.</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.SymbolStore.ISymbolWriter.OpenScope(System.Int32)">
          <source>Opens a new lexical scope in the current method.</source>
          <target state="translated">Abre un nuevo ámbito léxico en el método actual.</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.SymbolStore.ISymbolWriter.OpenScope(System.Int32)">
          <source>An opaque scope identifier that can be used with <ph id="ph1">&lt;see cref="M:System.Diagnostics.SymbolStore.ISymbolWriter.SetScopeRange(System.Int32,System.Int32,System.Int32)" /&gt;</ph> to define the start and end offsets of a scope at a later time.</source>
          <target state="translated">Identificador de ámbito opaco que puede usarse con el método <ph id="ph1">&lt;see cref="M:System.Diagnostics.SymbolStore.ISymbolWriter.SetScopeRange(System.Int32,System.Int32,System.Int32)" /&gt;</ph> para definir los desplazamientos inicial y final de un ámbito en un momento posterior.</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.SymbolStore.ISymbolWriter.OpenScope(System.Int32)">
          <source>In this case, the offsets passed to <ph id="ph1">&lt;see cref="M:System.Diagnostics.SymbolStore.ISymbolWriter.OpenScope(System.Int32)" /&gt;</ph> and <ph id="ph2">&lt;see cref="M:System.Diagnostics.SymbolStore.ISymbolWriter.CloseScope(System.Int32)" /&gt;</ph> are ignored.</source>
          <target state="translated">En este caso, se omiten los desplazamientos pasados a <ph id="ph1">&lt;see cref="M:System.Diagnostics.SymbolStore.ISymbolWriter.OpenScope(System.Int32)" /&gt;</ph> y <ph id="ph2">&lt;see cref="M:System.Diagnostics.SymbolStore.ISymbolWriter.CloseScope(System.Int32)" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.SymbolStore.ISymbolWriter.OpenScope(System.Int32)">
          <source>A scope identifier is valid only in the current method.</source>
          <target state="translated">Un identificador de ámbito solo es válido en el método actual.</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.SymbolStore.ISymbolWriter.OpenScope(System.Int32)">
          <source>This scope becomes the new current scope and is pushed onto a stack of scopes.</source>
          <target state="translated">Este ámbito se convierte en el nuevo ámbito actual y se inserta en una pila de ámbitos.</target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.SymbolStore.ISymbolWriter.OpenScope(System.Int32)">
          <source>Scopes must form a hierarchy.</source>
          <target state="translated">Los ámbitos deben formar una jerarquía.</target>       </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.SymbolStore.ISymbolWriter.OpenScope(System.Int32)">
          <source>Siblings are not allowed to overlap.</source>
          <target state="translated">No se permiten que los elementos del mismo nivel se superponen.</target>       </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.SymbolStore.ISymbolWriter.OpenScope(System.Int32)">
          <source>Scope identifiers are valid only in the current method.</source>
          <target state="translated">Los identificadores de ámbito sólo son válidos en el método actual.</target>       </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.SymbolStore.ISymbolWriter.SetMethodSourceRange(System.Diagnostics.SymbolStore.ISymbolDocumentWriter,System.Int32,System.Int32,System.Diagnostics.SymbolStore.ISymbolDocumentWriter,System.Int32,System.Int32)">
          <source>The document that contains the starting position.</source>
          <target state="translated">Documento que contiene la posición inicial.</target>       </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.SymbolStore.ISymbolWriter.SetMethodSourceRange(System.Diagnostics.SymbolStore.ISymbolDocumentWriter,System.Int32,System.Int32,System.Diagnostics.SymbolStore.ISymbolDocumentWriter,System.Int32,System.Int32)">
          <source>The starting line number.</source>
          <target state="translated">Número de línea inicial.</target>       </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.SymbolStore.ISymbolWriter.SetMethodSourceRange(System.Diagnostics.SymbolStore.ISymbolDocumentWriter,System.Int32,System.Int32,System.Diagnostics.SymbolStore.ISymbolDocumentWriter,System.Int32,System.Int32)">
          <source>The starting column.</source>
          <target state="translated">Columna inicial.</target>       </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.SymbolStore.ISymbolWriter.SetMethodSourceRange(System.Diagnostics.SymbolStore.ISymbolDocumentWriter,System.Int32,System.Int32,System.Diagnostics.SymbolStore.ISymbolDocumentWriter,System.Int32,System.Int32)">
          <source>The document that contains the ending position.</source>
          <target state="translated">Documento que contiene la posición final.</target>       </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.SymbolStore.ISymbolWriter.SetMethodSourceRange(System.Diagnostics.SymbolStore.ISymbolDocumentWriter,System.Int32,System.Int32,System.Diagnostics.SymbolStore.ISymbolDocumentWriter,System.Int32,System.Int32)">
          <source>The ending line number.</source>
          <target state="translated">Número de línea final.</target>       </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.SymbolStore.ISymbolWriter.SetMethodSourceRange(System.Diagnostics.SymbolStore.ISymbolDocumentWriter,System.Int32,System.Int32,System.Diagnostics.SymbolStore.ISymbolDocumentWriter,System.Int32,System.Int32)">
          <source>The ending column number.</source>
          <target state="translated">Número de columna final.</target>       </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.SymbolStore.ISymbolWriter.SetMethodSourceRange(System.Diagnostics.SymbolStore.ISymbolDocumentWriter,System.Int32,System.Int32,System.Diagnostics.SymbolStore.ISymbolDocumentWriter,System.Int32,System.Int32)">
          <source>Specifies the true start and end of a method within a source file.</source>
          <target state="translated">Especifica el principio y final reales de un método dentro de un archivo de código fuente.</target>       </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.SymbolStore.ISymbolWriter.SetMethodSourceRange(System.Diagnostics.SymbolStore.ISymbolDocumentWriter,System.Int32,System.Int32,System.Diagnostics.SymbolStore.ISymbolDocumentWriter,System.Int32,System.Int32)">
          <source>Use <ph id="ph1">&lt;see cref="M:System.Diagnostics.SymbolStore.ISymbolWriter.SetMethodSourceRange(System.Diagnostics.SymbolStore.ISymbolDocumentWriter,System.Int32,System.Int32,System.Diagnostics.SymbolStore.ISymbolDocumentWriter,System.Int32,System.Int32)" /&gt;</ph> to specify the extent of a method, independent of the sequence points that exist within the method.</source>
          <target state="translated">Utilice el método <ph id="ph1">&lt;see cref="M:System.Diagnostics.SymbolStore.ISymbolWriter.SetMethodSourceRange(System.Diagnostics.SymbolStore.ISymbolDocumentWriter,System.Int32,System.Int32,System.Diagnostics.SymbolStore.ISymbolDocumentWriter,System.Int32,System.Int32)" /&gt;</ph> para especificar la extensión de un método, independientemente de los puntos de secuencia que existan dentro del método.</target>       </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.SymbolStore.ISymbolWriter.SetScopeRange(System.Int32,System.Int32,System.Int32)">
          <source>The identifier of the lexical scope.</source>
          <target state="translated">Identificador del ámbito léxico.</target>       </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.SymbolStore.ISymbolWriter.SetScopeRange(System.Int32,System.Int32,System.Int32)">
          <source>The byte offset of the beginning of the lexical scope.</source>
          <target state="translated">Desplazamiento de bytes del principio del ámbito léxico.</target>       </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.SymbolStore.ISymbolWriter.SetScopeRange(System.Int32,System.Int32,System.Int32)">
          <source>The byte offset of the end of the lexical scope.</source>
          <target state="translated">Desplazamiento de bytes del final del ámbito léxico.</target>       </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.SymbolStore.ISymbolWriter.SetScopeRange(System.Int32,System.Int32,System.Int32)">
          <source>Defines the offset range for the specified lexical scope.</source>
          <target state="translated">Define el intervalo de desplazamiento del ámbito léxico especificado.</target>       </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.SymbolStore.ISymbolWriter.SetSymAttribute(System.Diagnostics.SymbolStore.SymbolToken,System.String,System.Byte[])">
          <source>The metadata token for which the attribute is being defined.</source>
          <target state="translated">Símbolo (token) de metadatos para el que se define el atributo.</target>       </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.SymbolStore.ISymbolWriter.SetSymAttribute(System.Diagnostics.SymbolStore.SymbolToken,System.String,System.Byte[])">
          <source>The attribute name.</source>
          <target state="translated">Nombre del atributo.</target>       </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.SymbolStore.ISymbolWriter.SetSymAttribute(System.Diagnostics.SymbolStore.SymbolToken,System.String,System.Byte[])">
          <source>The attribute value.</source>
          <target state="translated">Valor del atributo.</target>       </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.SymbolStore.ISymbolWriter.SetSymAttribute(System.Diagnostics.SymbolStore.SymbolToken,System.String,System.Byte[])">
          <source>Defines an attribute when given the attribute name and the attribute value.</source>
          <target state="translated">Define un atributo cuando se especifican el nombre y el valor del atributo.</target>       </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.SymbolStore.ISymbolWriter.SetSymAttribute(System.Diagnostics.SymbolStore.SymbolToken,System.String,System.Byte[])">
          <source>The <ph id="ph1">&lt;xref:System.Diagnostics.SymbolStore.ISymbolWriter.SetSymAttribute%2A&gt;</ph> method is only associated with symbolic information and is not a metadata custom attribute.</source>
          <target state="translated">El <ph id="ph1">&lt;xref:System.Diagnostics.SymbolStore.ISymbolWriter.SetSymAttribute%2A&gt;</ph> método solo está asociada a la información simbólica y no es un atributo personalizado de metadatos.</target>       </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.SymbolStore.ISymbolWriter.SetUnderlyingWriter(System.IntPtr)">
          <source>A pointer to code that represents the underlying writer.</source>
          <target state="translated">Puntero al código que representa el escritor subyacente.</target>       </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.SymbolStore.ISymbolWriter.SetUnderlyingWriter(System.IntPtr)">
          <source>Sets the underlying <ph id="ph1">&lt;see langword="ISymUnmanagedWriter" /&gt;</ph> (the corresponding unmanaged interface) that a managed <ph id="ph2">&lt;see cref="T:System.Diagnostics.SymbolStore.ISymbolWriter" /&gt;</ph> uses to emit symbols.</source>
          <target state="translated">Establece la interfaz <ph id="ph1">&lt;see langword="ISymUnmanagedWriter" /&gt;</ph> subyacente (la interfaz no administrada correspondiente) que un objeto <ph id="ph2">&lt;see cref="T:System.Diagnostics.SymbolStore.ISymbolWriter" /&gt;</ph> administrado utiliza para emitir símbolos.</target>       </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.SymbolStore.ISymbolWriter.SetUnderlyingWriter(System.IntPtr)">
          <source>The underlying <ph id="ph1">`ISymUnmanagedWriter`</ph> (the corresponding unmanaged interface) represents a symbol writer for managed code.</source>
          <target state="translated">Subyacente <ph id="ph1">`ISymUnmanagedWriter`</ph> (la interfaz no administrada correspondiente) representa un escritor de símbolos de código administrado.</target>       </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.SymbolStore.ISymbolWriter.SetUnderlyingWriter(System.IntPtr)">
          <source>The interface provides methods for defining documents, sequence points, lexical scopes, and variables.</source>
          <target state="translated">La interfaz proporciona métodos para definir documentos, puntos de secuencia, ámbitos léxicos y variables.</target>       </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.SymbolStore.ISymbolWriter.SetUserEntryPoint(System.Diagnostics.SymbolStore.SymbolToken)">
          <source>The metadata token for the method that is the user entry point.</source>
          <target state="translated">Símbolo (token) de metadatos del método que constituye el punto de entrada del usuario.</target>       </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.SymbolStore.ISymbolWriter.SetUserEntryPoint(System.Diagnostics.SymbolStore.SymbolToken)">
          <source>Identifies the user-defined method as the entry point for the current module.</source>
          <target state="translated">Identifica el método definido por el usuario como punto de entrada del módulo actual.</target>       </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.SymbolStore.ISymbolWriter.SetUserEntryPoint(System.Diagnostics.SymbolStore.SymbolToken)">
          <source>This is normally your main method, rather than compiler-generated stubs before the main method.</source>
          <target state="translated">Esto suele ser el método principal, en lugar de código auxiliar generado por el compilador antes del método principal.</target>       </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.SymbolStore.ISymbolWriter.UsingNamespace(System.String)">
          <source>The fully qualified name of the namespace.</source>
          <target state="translated">Nombre completo del espacio de nombres.</target>       </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.SymbolStore.ISymbolWriter.UsingNamespace(System.String)">
          <source>Specifies that the given, fully qualified namespace name is used within the open lexical scope.</source>
          <target state="translated">Indica que el nombre completo del espacio de nombres especificado se usa dentro del ámbito léxico abierto.</target>       </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.SymbolStore.ISymbolWriter.UsingNamespace(System.String)">
          <source>Closing the current scope prevents this scope from using the namespace.</source>
          <target state="translated">Cerrar el ámbito actual, impide que este ámbito usando el espacio de nombres.</target>       </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.SymbolStore.ISymbolWriter.UsingNamespace(System.String)">
          <source>The namespace remains in use in all scopes that inherit from the current open scope.</source>
          <target state="translated">El espacio de nombres se mantiene en uso en todos los ámbitos que heredan del ámbito abierto actual.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>