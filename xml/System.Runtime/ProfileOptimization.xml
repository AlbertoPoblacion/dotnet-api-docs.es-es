<Type Name="ProfileOptimization" FullName="System.Runtime.ProfileOptimization">
  <Metadata><Meta Name="ms.openlocfilehash" Value="9354708414c54e47f133ae136ea4d54b7bf4bc94" /><Meta Name="ms.sourcegitcommit" Value="0ec122ee5f3681159b8460ab15b409fd6e3d3ae0" /><Meta Name="ms.translationtype" Value="HT" /><Meta Name="ms.contentlocale" Value="es-ES" /><Meta Name="ms.lasthandoff" Value="10/04/2018" /><Meta Name="ms.locfileid" Value="48692066" /></Metadata><TypeSignature Language="C#" Value="public static class ProfileOptimization" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit ProfileOptimization extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Runtime.ProfileOptimization" />
  <TypeSignature Language="VB.NET" Value="Public Class ProfileOptimization" />
  <TypeSignature Language="C++ CLI" Value="public ref class ProfileOptimization abstract sealed" />
  <TypeSignature Language="F#" Value="type ProfileOptimization = class" />
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Mejora el rendimiento de inicio de los dominios de aplicación en aplicaciones que requieren el compilador JIT (just-in-time) y realiza la compilación en segundo plano de los métodos que probablemente se ejecutarán, en función de los perfiles creados durante las compilaciones anteriores.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!IMPORTANT]
>  Optimización por perfiles requiere un equipo con varios núcleos. Los métodos se omiten en otros equipos.  
  
 Cada vez que se inicia la optimización de perfil en un dominio de aplicación, se lee el perfil que se creó durante el uso anterior. La información en el perfil se usa para guiar la compilación en segundo plano mediante la identificación de los métodos que es más probables que se ejecutará durante el inicio. En equipos con varios núcleos, esto aumenta las posibilidades de que un método está compilado en el momento en que se necesita para que el subproceso principal de la aplicación no tiene que llamar el compilador JIT.  
  
 El archivo de perfil se sobrescribe en cada uso, por lo que siempre contiene la información más reciente sobre qué métodos se usan durante el inicio.  
  
 Perfiles de optimización no están restringidos al inicio del dominio de aplicación. Se puede usar para cualquier actividad que requerirá un uso intensivo del compilador JIT. Puede mantener varios perfiles para un dominio de aplicación para que cada dicha actividad tiene su propio perfil.  
  
 Para usar perfiles de optimización en un dominio de aplicación, debe llamar a la <xref:System.Runtime.ProfileOptimization.SetProfileRoot%2A> método y especifique la carpeta donde se almacenan los perfiles. Ya debe existir la carpeta. Para empezar a usar un perfil, llame a la <xref:System.Runtime.ProfileOptimization.StartProfile%2A> método y especifique el nombre de archivo del perfil. Si el archivo no se había grabado anteriormente, se crea en el primer uso. No hay ningún tiempo de la primera ventaja de rendimiento se crea un perfil.  
  
 Optimización por perfiles no cambia el orden en que se ejecutan los métodos. Los métodos no se ejecutan en el subproceso en segundo plano; Si un método se compila, pero nunca se llama, simplemente no sirve. Si un archivo de perfil está dañado o no se puede escribir en la carpeta especificada (por ejemplo, porque la carpeta no existe), la ejecución del programa continúa sin optimización de generación de perfiles.  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="SetProfileRoot">
      <MemberSignature Language="C#" Value="public static void SetProfileRoot (string directoryPath);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void SetProfileRoot(string directoryPath) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.ProfileOptimization.SetProfileRoot(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub SetProfileRoot (directoryPath As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void SetProfileRoot(System::String ^ directoryPath);" />
      <MemberSignature Language="F#" Value="static member SetProfileRoot : string -&gt; unit" Usage="System.Runtime.ProfileOptimization.SetProfileRoot directoryPath" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="directoryPath" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="directoryPath">Ruta de acceso completa a la carpeta donde se almacenan los archivos de perfil para el dominio de aplicación actual.</param>
        <summary>Habilita la generación de perfiles de optimización para el dominio de aplicación actual, y establece la carpeta donde se almacenan los archivos de perfil de optimización. En un equipo de un núcleo, se omite el método.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Debe llamar a este método antes de llamar a la <xref:System.Runtime.ProfileOptimization.StartProfile%2A> método por primera vez en el dominio de aplicación actual. Si se llama a <xref:System.Runtime.ProfileOptimization.SetProfileRoot%2A> más de una vez en el mismo dominio de aplicación, se omiten todas las llamadas después de la primera.  
  
 Ya debe existir la carpeta especificada. Si no existe, llamar a este método no lo crea y no de generación de perfiles se produce.  
  
 En los equipos que no tienen varios núcleos, este método se omite.  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.SecurityCriticalAttribute">requiere plena confianza para el llamador inmediato. Este miembro no se puede usar código de confianza parcial o transparente.</permission>
      </Docs>
    </Member>
    <Member MemberName="StartProfile">
      <MemberSignature Language="C#" Value="public static void StartProfile (string profile);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void StartProfile(string profile) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.ProfileOptimization.StartProfile(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub StartProfile (profile As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void StartProfile(System::String ^ profile);" />
      <MemberSignature Language="F#" Value="static member StartProfile : string -&gt; unit" Usage="System.Runtime.ProfileOptimization.StartProfile profile" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="profile" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="profile">Nombre del archivo del perfil que se va a usar.</param>
        <summary>Inicia la compilación Just-In-Time (JIT) de los métodos registrados previamente en el archivo de perfil especificado, en un subproceso de fondo. Inicia el proceso de registro de uso del método actual, que posteriormente sobrescribe el archivo de perfil especificado.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si el perfil especificado no existe en la carpeta especificada por el <xref:System.Runtime.ProfileOptimization.SetProfileRoot%2A> método, la información que contiene se utiliza para determinar el orden en que los métodos se compilan en el subproceso en segundo plano. El <xref:System.Runtime.ProfileOptimization.StartProfile%2A> método crea el perfil si aún no existe y se inicia la grabación de uso del método.  
  
 Solo los métodos que se llaman realmente se registran, independientemente de si se compilaron en el subproceso en segundo plano o en el subproceso principal de la aplicación. Si la aplicación debe llamar antes de que ha compilado el subproceso en segundo plano, se compila un método en el subproceso principal de la aplicación.  
  
 El código que realiza la grabación realiza un seguimiento de la velocidad a la que se compilan los métodos, incluidos los métodos que se compilan en ambos el subproceso en segundo plano y en el subproceso principal. Cuando la velocidad cae por debajo de un nivel predeterminado, grabación se detiene. Grabación también se detendrá si la velocidad de compilación JIT supera un límite superior predeterminado.  
  
 Si el <xref:System.Runtime.ProfileOptimization.SetProfileRoot%2A> no se ha llamado al método para el dominio de aplicación actual, o si el equipo no dispone de varios núcleos, el <xref:System.Runtime.ProfileOptimization.StartProfile%2A> método no tiene ningún efecto.  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.SecurityCriticalAttribute">requiere plena confianza para el llamador inmediato. Este miembro no se puede usar código de confianza parcial o transparente.</permission>
      </Docs>
    </Member>
  </Members>
</Type>