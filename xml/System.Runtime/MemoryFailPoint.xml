<Type Name="MemoryFailPoint" FullName="System.Runtime.MemoryFailPoint">
  <Metadata><Meta Name="ms.openlocfilehash" Value="0a9c2330efff55bad4b528703d46cb25d46c27bf" /><Meta Name="ms.sourcegitcommit" Value="a3e01ec36374fac54a55add0dcc1e754e394abeb" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="es-ES" /><Meta Name="ms.lasthandoff" Value="03/30/2019" /><Meta Name="ms.locfileid" Value="58714169" /></Metadata><TypeSignature Language="C#" Value="public sealed class MemoryFailPoint : System.Runtime.ConstrainedExecution.CriticalFinalizerObject, IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit MemoryFailPoint extends System.Runtime.ConstrainedExecution.CriticalFinalizerObject implements class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.Runtime.MemoryFailPoint" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class MemoryFailPoint&#xA;Inherits CriticalFinalizerObject&#xA;Implements IDisposable" />
  <TypeSignature Language="C++ CLI" Value="public ref class MemoryFailPoint sealed : System::Runtime::ConstrainedExecution::CriticalFinalizerObject, IDisposable" />
  <TypeSignature Language="F#" Value="type MemoryFailPoint = class&#xA;    inherit CriticalFinalizerObject&#xA;    interface IDisposable" />
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Runtime.ConstrainedExecution.CriticalFinalizerObject</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>Comprueba si hay suficientes recursos de memoria antes de ejecutar una operación. Esta clase no puede heredarse.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  Esta clase está pensada para su uso en desarrollo avanzado.  
  
 Crear una instancia de la <xref:System.Runtime.MemoryFailPoint> clase crea una puerta de memoria. Una puerta de memoria comprueba los recursos suficientes antes de iniciar una actividad que requiere una gran cantidad de memoria. Fallar la comprobación da como resultado un <xref:System.InsufficientMemoryException> excepción producida. Esta excepción impide que una operación que se está iniciando y reduce la posibilidad de error debido a la falta de recursos. Esto permite disminuir el rendimiento para evitar un <xref:System.OutOfMemoryException> excepción y cualquier daño de estado que pudieran derivarse de tratamiento incorrecto de la excepción en ubicaciones arbitrarias en el código.  
  
> [!IMPORTANT]
>  Este tipo implementa la <xref:System.IDisposable> interfaz. Cuando haya terminado de utilizar el tipo, debe deshacerse de él directa o indirectamente. Para deshacerse del tipo directamente, llame a su <xref:System.IDisposable.Dispose%2A> método en un `try` / `catch` bloque. Para deshacerse de él, indirectamente, usar una construcción de lenguaje, como `using` (en C#) o `Using` (en Visual Basic). Para obtener más información, vea la sección "Uso de un objeto que implementa IDisposable" en el <xref:System.IDisposable> tema de la interfaz.  
  
 Iniciando un <xref:System.InsufficientMemoryException> excepción, una aplicación puede distinguir entre una estimación que no será capaz de completar una operación y una operación completada parcialmente que puede haber dañado el estado de la aplicación. Esto permite que una aplicación reducir la frecuencia de una directiva de elevación pesimista, lo que puede requerir descarga actual <xref:System.AppDomain> o reciclar el proceso.  
  
 <xref:System.Runtime.MemoryFailPoint> comprueba si están disponibles en la recolección de todos los montones suficiente memoria y espacio de direcciones virtuales consecutivos y pueden aumentar el tamaño del archivo de intercambio.  <xref:System.Runtime.MemoryFailPoint> hace ninguna garantía relativa a la disponibilidad a largo plazo de la memoria durante la vigencia de la puerta, pero los autores de llamadas debe utilizar siempre el <xref:System.Runtime.MemoryFailPoint.Dispose%2A> método para asegurarse de que los recursos asociados con <xref:System.Runtime.MemoryFailPoint> se liberan.  
  
 Para usar una puerta de memoria, debe crear un <xref:System.Runtime.MemoryFailPoint> objeto y especifique el número de megabytes (MB) de memoria que debe usar la siguiente operación. Si no hay suficiente memoria disponible, un <xref:System.InsufficientMemoryException> es una excepción.  
  
 El parámetro del constructor debe ser un entero positivo. Un valor negativo produce una <xref:System.ArgumentOutOfRangeException> excepción.  
  
 <xref:System.Runtime.MemoryFailPoint> funciona con una granularidad de 16 MB. Cualquier valor menor que 16 MB se trata como 16 MB, y otros valores se tratan como el siguiente múltiplo más grande de 16 MB.  
  
   
  
## Examples  
 <xref:System.Runtime.MemoryFailPoint> permite que una aplicación para evitar quedarse sin memoria de una manera dañina lento.  Se debe usar dentro de un ámbito léxico.  El ejemplo siguiente inicia subprocesos para procesar elementos en una cola de trabajo.  Antes de inicia cada subproceso, los recursos de memoria disponible se comprueban mediante <xref:System.Runtime.MemoryFailPoint>.  Si se produce una excepción, el método principal espera hasta que haya memoria disponible antes de iniciar el subproceso siguiente.  
  
 [!code-csharp[MemoryFailPoint#1](~/samples/snippets/csharp/VS_Snippets_CLR/MemoryFailPoint/CS/program.cs#1)]  
  
 ]]></format>
    </remarks>
    <permission cref="T:System.Security.Permissions.SecurityPermission">para llamar a código no administrado. Enumeración asociada: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" />. Acción de seguridad: <see cref="F:System.Security.Permissions.SecurityAction.LinkDemand" /></permission>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public MemoryFailPoint (int sizeInMegabytes);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 sizeInMegabytes) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.MemoryFailPoint.#ctor(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (sizeInMegabytes As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; MemoryFailPoint(int sizeInMegabytes);" />
      <MemberSignature Language="F#" Value="new System.Runtime.MemoryFailPoint : int -&gt; System.Runtime.MemoryFailPoint" Usage="new System.Runtime.MemoryFailPoint sizeInMegabytes" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="sizeInMegabytes" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="sizeInMegabytes">Tamaño de memoria necesario, en megabytes. Este valor debe ser positivo.</param>
        <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Runtime.MemoryFailPoint" />, especificando la cantidad de memoria necesaria para que la ejecución sea correcta.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La cantidad de memoria utilizada por la aplicación para procesar un elemento de trabajo puede determinarse empíricamente.  Para calcular la cantidad de memoria de la aplicación necesita para procesar una solicitud, considere el uso de la <xref:System.GC.GetTotalMemory%2A?displayProperty=nameWithType> método para determinar la cantidad de memoria disponible antes y después de llamar al método que procesa el elemento de trabajo. Consulte la <xref:System.Runtime.MemoryFailPoint> clase para obtener un ejemplo de código que determina dinámicamente el valor para el `sizeInMegabytes` parámetro.  
  
   
  
## Examples  
 El ejemplo siguiente muestra cómo determinar la cantidad de memoria de un método que se requiere cuando se ejecuta. Este ejemplo de código forma parte de un ejemplo más extenso proporcionado para el <xref:System.Runtime.MemoryFailPoint> clase.  
  
 [!code-csharp[MemoryFailPoint#2](~/samples/snippets/csharp/VS_Snippets_CLR/MemoryFailPoint/CS/program.cs#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">El tamaño de memoria especificado es un valor negativo.</exception>
        <exception cref="T:System.InsufficientMemoryException">No hay memoria suficiente para comenzar la ejecución del código protegido por la puerta.</exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute">requiere plena confianza para el llamador inmediato. Este miembro no se puede usar código de confianza parcial o transparente.</permission>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.MemoryFailPoint.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Dispose();" />
      <MemberSignature Language="F#" Value="abstract member Dispose : unit -&gt; unit&#xA;override this.Dispose : unit -&gt; unit" Usage="memoryFailPoint.Dispose " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Libera todos los recursos que usa <see cref="T:System.Runtime.MemoryFailPoint" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Llame a <xref:System.Runtime.MemoryFailPoint.Dispose%2A> cuando haya terminado de usar <xref:System.Runtime.MemoryFailPoint>. El método <xref:System.Runtime.MemoryFailPoint.Dispose%2A> deja el <xref:System.Runtime.MemoryFailPoint> en un estado no utilizable. Después de llamar a <xref:System.Runtime.MemoryFailPoint>, debe liberar todas las referencias a la <xref:System.Runtime.MemoryFailPoint> por lo que el recolector de elementos no utilizados pueda reclamar la memoria que el <xref:System.Runtime.MemoryFailPoint> estaba ocupando. Para obtener más información, consulte [limpiar recursos no administrados](~/docs/standard/garbage-collection/unmanaged.md) y [implementar un método Dispose](~/docs/standard/garbage-collection/implementing-dispose.md).  
  
> [!NOTE]
>  Realice siempre una llamada a <xref:System.Runtime.MemoryFailPoint.Dispose%2A> antes de liberar la última referencia al objeto <xref:System.Runtime.MemoryFailPoint>. En caso contrario, los recursos que está usando no se liberarán hasta que el recolector de elementos no utilizados llame al método <xref:System.Runtime.MemoryFailPoint> del objeto `Finalize`.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Finalize">
      <MemberSignature Language="C#" Value="~MemoryFailPoint ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Finalize() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.MemoryFailPoint.Finalize" />
      <MemberSignature Language="VB.NET" Value="Finalize ()" />
      <MemberSignature Language="C++ CLI" Value="!MemoryFailPoint ()" />
      <MemberSignature Language="F#" Value="override this.Finalize : unit -&gt; unit" Usage="memoryFailPoint.Finalize " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Se asegura de que los recursos se liberan y que se llevan a cabo otras operaciones de limpieza cuando el recolector de elementos no utilizados recupere el objeto <see cref="T:System.Runtime.MemoryFailPoint" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El recolector de elementos no utilizados llame al <xref:System.Runtime.MemoryFailPoint.Finalize%2A> método cuando el objeto actual está preparado para finalizarse.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Object.Finalize" />
      </Docs>
    </Member>
  </Members>
</Type>