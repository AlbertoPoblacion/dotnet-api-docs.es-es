<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="MemoryFailPoint.xml" source-language="en-US" target-language="es-ES">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac561e44bc871caa29f826e0555271beb6a45d2de1c.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">61e44bc871caa29f826e0555271beb6a45d2de1c</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,netstandard-2.0,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.Runtime.MemoryFailPoint">
          <source>Checks for sufficient memory resources before executing an operation.</source>
          <target state="translated">Comprueba si hay suficientes recursos de memoria antes de ejecutar una operación.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" uid="T:System.Runtime.MemoryFailPoint">
          <source>This class cannot be inherited.</source>
          <target state="translated">Esta clase no puede heredarse.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.MemoryFailPoint">
          <source>This class is intended for use in advanced development.</source>
          <target state="translated">Esta clase está pensada para su uso en el desarrollo avanzado.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.MemoryFailPoint">
          <source>Creating an instance of the <ph id="ph1">&lt;xref:System.Runtime.MemoryFailPoint&gt;</ph> class creates a memory gate.</source>
          <target state="translated">Crear una instancia de la <ph id="ph1">&lt;xref:System.Runtime.MemoryFailPoint&gt;</ph> clase crea una puerta de memoria.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.MemoryFailPoint">
          <source>A memory gate checks for sufficient resources before initiating an activity that requires a large amount of memory.</source>
          <target state="translated">Una puerta de memoria busca recursos suficientes antes de iniciar una actividad que requiere una gran cantidad de memoria.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.MemoryFailPoint">
          <source>Failing the check results in an <ph id="ph1">&lt;xref:System.InsufficientMemoryException&gt;</ph> exception being thrown.</source>
          <target state="translated">Fallar la comprobación da como resultado un <ph id="ph1">&lt;xref:System.InsufficientMemoryException&gt;</ph> excepción producida.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.MemoryFailPoint">
          <source>This exception prevents an operation from being started and reduces the possibility of failure due to lack of resources.</source>
          <target state="translated">Esta excepción se impide que una operación que se inicia y reduce la posibilidad de error debido a la falta de recursos.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.MemoryFailPoint">
          <source>This enables you decrease performance to avoid an <ph id="ph1">&lt;xref:System.OutOfMemoryException&gt;</ph> exception and any state corruption that may result from improper handling of the exception in arbitrary locations in your code.</source>
          <target state="translated">Esto permite reduce el rendimiento para evitar un <ph id="ph1">&lt;xref:System.OutOfMemoryException&gt;</ph> excepción y cualquier daño de estado que puede derivarse de control incorrecto de la excepción en ubicaciones arbitrarias en el código.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.MemoryFailPoint">
          <source>This type implements the <ph id="ph1">&lt;xref:System.IDisposable&gt;</ph> interface.</source>
          <target state="translated">Este tipo implementa la <ph id="ph1">&lt;xref:System.IDisposable&gt;</ph> interfaz.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.MemoryFailPoint">
          <source>When you have finished using the type, you should dispose of it either directly or indirectly.</source>
          <target state="translated">Cuando haya terminado de utilizar el tipo, debe eliminar del mismo directa o indirectamente.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.MemoryFailPoint">
          <source>To dispose of the type directly, call its <ph id="ph1">&lt;xref:System.IDisposable.Dispose%2A&gt;</ph> method in a <ph id="ph2">`try`</ph><ph id="ph3">/</ph><ph id="ph4">`catch`</ph> block.</source>
          <target state="translated">Para deshacerse del tipo directamente, llame a su <ph id="ph1">&lt;xref:System.IDisposable.Dispose%2A&gt;</ph> método en un <ph id="ph2">`try`</ph> <ph id="ph3">/</ph> <ph id="ph4">`catch`</ph> bloque.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.MemoryFailPoint">
          <source>To dispose of it indirectly, use a language construct such as <ph id="ph1">`using`</ph> (in C#) or <ph id="ph2">`Using`</ph> (in Visual Basic).</source>
          <target state="translated">Para deshacerse de él indirectamente, use una construcción de lenguaje como <ph id="ph1">`using`</ph> (en C#) o <ph id="ph2">`Using`</ph> (en Visual Basic).</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.MemoryFailPoint">
          <source>For more information, see the "Using an Object that Implements IDisposable" section in the <ph id="ph1">&lt;xref:System.IDisposable&gt;</ph> interface topic.</source>
          <target state="translated">Para obtener más información, vea la sección "Uso de un objeto que implementa IDisposable" en el <ph id="ph1">&lt;xref:System.IDisposable&gt;</ph> tema de la interfaz.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.MemoryFailPoint">
          <source>By throwing an <ph id="ph1">&lt;xref:System.InsufficientMemoryException&gt;</ph> exception, an application can distinguish between an estimate that an operation will not be able to complete and  a partially completed operation that may have corrupted the application state.</source>
          <target state="translated">Iniciando un <ph id="ph1">&lt;xref:System.InsufficientMemoryException&gt;</ph> excepción, una aplicación puede distinguir entre una estimación que no se puede completar una operación y una operación completada parcialmente que puede haber dañado el estado de la aplicación.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.MemoryFailPoint">
          <source>This allows an application to reduce the frequency of a pessimistic escalation policy, which may require unloading the current <ph id="ph1">&lt;xref:System.AppDomain&gt;</ph> or recycling the process.</source>
          <target state="translated">Esto permite que una aplicación reducir la frecuencia de una directiva de elevación pesimista, lo que puede requerir la descarga actual <ph id="ph1">&lt;xref:System.AppDomain&gt;</ph> o reciclar el proceso.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.MemoryFailPoint">
          <source><ph id="ph1">&lt;xref:System.Runtime.MemoryFailPoint&gt;</ph> checks to see whether sufficient memory and consecutive virtual address space are available in all garbage collection heaps, and may increase the size of the swap file.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Runtime.MemoryFailPoint&gt;</ph> comprueba si están disponibles en toda la recopilación de elementos no utilizados montones suficiente memoria y espacio de direcciones virtuales consecutivos y pueden aumentar el tamaño del archivo de intercambio.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.MemoryFailPoint">
          <source><ph id="ph1">&lt;xref:System.Runtime.MemoryFailPoint&gt;</ph> makes no guarantees regarding the long-term availability of the memory during the lifetime of the gate, but callers should always use the <ph id="ph2">&lt;xref:System.Runtime.MemoryFailPoint.Dispose%2A&gt;</ph> method to ensure that resources associated with <ph id="ph3">&lt;xref:System.Runtime.MemoryFailPoint&gt;</ph> are released.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Runtime.MemoryFailPoint&gt;</ph> otorga ninguna garantía relativa a la disponibilidad a largo plazo de la memoria durante la vigencia de la puerta, pero los autores de llamadas debe utilizar siempre el <ph id="ph2">&lt;xref:System.Runtime.MemoryFailPoint.Dispose%2A&gt;</ph> método para asegurarse de que los recursos asociados <ph id="ph3">&lt;xref:System.Runtime.MemoryFailPoint&gt;</ph> se liberan.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.MemoryFailPoint">
          <source>To use a memory gate, you must create a <ph id="ph1">&lt;xref:System.Runtime.MemoryFailPoint&gt;</ph> object and specify the number of megabytes (MB) of memory that the next operation is expected to use.</source>
          <target state="translated">Para utilizar una puerta de memoria, primero debe crear un <ph id="ph1">&lt;xref:System.Runtime.MemoryFailPoint&gt;</ph> de objetos y especificar el número de megabytes (MB) de memoria que se espera que la siguiente operación de usar.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.MemoryFailPoint">
          <source>If enough memory is not available, an <ph id="ph1">&lt;xref:System.InsufficientMemoryException&gt;</ph> exception is thrown.</source>
          <target state="translated">Si no hay suficiente memoria disponible, un <ph id="ph1">&lt;xref:System.InsufficientMemoryException&gt;</ph> se produce la excepción.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.MemoryFailPoint">
          <source>The parameter of the constructor must be a positive integer.</source>
          <target state="translated">El parámetro del constructor debe ser un entero positivo.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.MemoryFailPoint">
          <source>A negative value raises an <ph id="ph1">&lt;xref:System.ArgumentOutOfRangeException&gt;</ph> exception.</source>
          <target state="translated">Un valor negativo provoca un <ph id="ph1">&lt;xref:System.ArgumentOutOfRangeException&gt;</ph> excepción.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.MemoryFailPoint">
          <source><ph id="ph1">&lt;xref:System.Runtime.MemoryFailPoint&gt;</ph> operates at a granularity of 16 MB.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Runtime.MemoryFailPoint&gt;</ph> funciona en una granularidad de 16 MB.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.MemoryFailPoint">
          <source>Any values smaller than 16 MB are treated as 16 MB, and other values are treated as the next largest multiple of 16 MB.</source>
          <target state="translated">Cualquier valor menor que 16 MB se trata como 16 MB y otros valores se tratan como el múltiplo más grande siguiente de 16 MB.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.MemoryFailPoint">
          <source><ph id="ph1">&lt;xref:System.Runtime.MemoryFailPoint&gt;</ph> enables an application to slow itself to avoid running out of memory in a corrupting manner.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Runtime.MemoryFailPoint&gt;</ph> permite que una aplicación se ralentice para evitar quedarse sin memoria de una manera dañina.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.MemoryFailPoint">
          <source>It should be used within a lexical scope.</source>
          <target state="translated">Se debe usar dentro de un ámbito léxico.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.MemoryFailPoint">
          <source>The following example launches threads to process items in a work queue.</source>
          <target state="translated">El ejemplo siguiente inicia subprocesos para procesar los elementos en una cola de trabajo.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.MemoryFailPoint">
          <source>Before each thread is launched, the available memory resources are checked using <ph id="ph1">&lt;xref:System.Runtime.MemoryFailPoint&gt;</ph>.</source>
          <target state="translated">Antes de que cada subproceso se inicia, los recursos de memoria disponible se comprueban con <ph id="ph1">&lt;xref:System.Runtime.MemoryFailPoint&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.MemoryFailPoint">
          <source>If an exception is thrown, the main method waits until memory is available before launching the next thread.</source>
          <target state="translated">Si se produce una excepción, el método principal espera hasta que haya memoria disponible antes de iniciar el subproceso siguiente.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.MemoryFailPoint">
          <source>for calling unmanaged code.</source>
          <target state="translated">para llamar a código no administrado.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.MemoryFailPoint">
          <source>Associated enumeration: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /&gt;</ph>.</source>
          <target state="translated">Enumeración asociada: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.MemoryFailPoint">
          <source>Security action: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.SecurityAction.LinkDemand" /&gt;</ph></source>
          <target state="translated">Acción de seguridad: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.SecurityAction.LinkDemand" /&gt;</ph></target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" uid="M:System.Runtime.MemoryFailPoint.#ctor(System.Int32)">
          <source>The required memory size, in megabytes.</source>
          <target state="translated">Tamaño de memoria necesario, en megabytes.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" uid="M:System.Runtime.MemoryFailPoint.#ctor(System.Int32)">
          <source>This must be a positive value.</source>
          <target state="translated">Este valor debe ser positivo.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" uid="M:System.Runtime.MemoryFailPoint.#ctor(System.Int32)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Runtime.MemoryFailPoint" /&gt;</ph> class, specifying the amount of memory required for successful execution.</source>
          <target state="translated">Inicializa una nueva instancia de la clase <ph id="ph1">&lt;see cref="T:System.Runtime.MemoryFailPoint" /&gt;</ph>, especificando la cantidad de memoria necesaria para una ejecución sin problemas.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.MemoryFailPoint.#ctor(System.Int32)">
          <source>The amount of memory used by your application to process a work item can be determined empirically.</source>
          <target state="translated">La cantidad de memoria utilizada por la aplicación para procesar un elemento de trabajo puede determinarse empíricamente.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.MemoryFailPoint.#ctor(System.Int32)">
          <source>To estimate the amount of memory your application needs to process a request, consider using the <ph id="ph1">&lt;xref:System.GC.GetTotalMemory%2A?displayProperty=nameWithType&gt;</ph> method to determine the amount of memory available before and after calling the method that processes the work item.</source>
          <target state="translated">Para calcular la cantidad de memoria necesaria para procesar una solicitud para la aplicación, considere el uso de la <ph id="ph1">&lt;xref:System.GC.GetTotalMemory%2A?displayProperty=nameWithType&gt;</ph> método para determinar la cantidad de memoria disponible antes y después de llamar al método que procesa el elemento de trabajo.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.MemoryFailPoint.#ctor(System.Int32)">
          <source>See the <ph id="ph1">&lt;xref:System.Runtime.MemoryFailPoint&gt;</ph> class for a code example that dynamically determines the value for the <ph id="ph2">`sizeInMegabytes`</ph> parameter.</source>
          <target state="translated">Consulte la <ph id="ph1">&lt;xref:System.Runtime.MemoryFailPoint&gt;</ph> clase para obtener un ejemplo de código que determina dinámicamente el valor de la <ph id="ph2">`sizeInMegabytes`</ph> parámetro.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.MemoryFailPoint.#ctor(System.Int32)">
          <source>The following example demonstrates how to determine the amount of memory a method requires when executing.</source>
          <target state="translated">En el ejemplo siguiente se muestra cómo determinar la cantidad de memoria que un método requiere cuando se ejecuta.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.MemoryFailPoint.#ctor(System.Int32)">
          <source>This code example is part of a larger example provided for the <ph id="ph1">&lt;xref:System.Runtime.MemoryFailPoint&gt;</ph> class.</source>
          <target state="translated">Este ejemplo de código forma parte de un ejemplo mayor proporcionado para el <ph id="ph1">&lt;xref:System.Runtime.MemoryFailPoint&gt;</ph> clase.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" uid="M:System.Runtime.MemoryFailPoint.#ctor(System.Int32)">
          <source>The specified memory size is negative.</source>
          <target state="translated">El tamaño de memoria especificado es un valor negativo.</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" uid="M:System.Runtime.MemoryFailPoint.#ctor(System.Int32)">
          <source>There is insufficient memory to begin execution of the code protected by the gate.</source>
          <target state="translated">No hay memoria suficiente para comenzar la ejecución del código protegido por la puerta.</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.MemoryFailPoint.#ctor(System.Int32)">
          <source>requires full trust for the immediate caller.</source>
          <target state="translated">requiere plena confianza para el llamador inmediato.</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.MemoryFailPoint.#ctor(System.Int32)">
          <source>This member cannot be used by partially trusted or transparent code.</source>
          <target state="translated">Este miembro no puede usarse por código de confianza parcial o transparente.</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" uid="M:System.Runtime.MemoryFailPoint.Dispose">
          <source>Releases all resources used by the <ph id="ph1">&lt;see cref="T:System.Runtime.MemoryFailPoint" /&gt;</ph>.</source>
          <target state="translated">Libera todos los recursos que usa <ph id="ph1">&lt;see cref="T:System.Runtime.MemoryFailPoint" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.MemoryFailPoint.Dispose">
          <source>Call <ph id="ph1">&lt;xref:System.Runtime.MemoryFailPoint.Dispose%2A&gt;</ph> when you are finished using the <ph id="ph2">&lt;xref:System.Runtime.MemoryFailPoint&gt;</ph>.</source>
          <target state="translated">Llame a <ph id="ph1">&lt;xref:System.Runtime.MemoryFailPoint.Dispose%2A&gt;</ph> cuando haya terminado de usar <ph id="ph2">&lt;xref:System.Runtime.MemoryFailPoint&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.MemoryFailPoint.Dispose">
          <source>The <ph id="ph1">&lt;xref:System.Runtime.MemoryFailPoint.Dispose%2A&gt;</ph> method leaves the <ph id="ph2">&lt;xref:System.Runtime.MemoryFailPoint&gt;</ph> in an unusable state.</source>
          <target state="translated">El método <ph id="ph1">&lt;xref:System.Runtime.MemoryFailPoint.Dispose%2A&gt;</ph> deja el <ph id="ph2">&lt;xref:System.Runtime.MemoryFailPoint&gt;</ph> en un estado no utilizable.</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.MemoryFailPoint.Dispose">
          <source>After calling <ph id="ph1">&lt;xref:System.Runtime.MemoryFailPoint&gt;</ph>, you must release all references to the <ph id="ph2">&lt;xref:System.Runtime.MemoryFailPoint&gt;</ph> so the garbage collector can reclaim the memory that the <ph id="ph3">&lt;xref:System.Runtime.MemoryFailPoint&gt;</ph> was occupying.</source>
          <target state="translated">Después de llamar a <ph id="ph1">&lt;xref:System.Runtime.MemoryFailPoint&gt;</ph>, debe liberar todas las referencias a la <ph id="ph2">&lt;xref:System.Runtime.MemoryFailPoint&gt;</ph> para que el recolector de elementos no utilizados pueda reclamar la memoria que el <ph id="ph3">&lt;xref:System.Runtime.MemoryFailPoint&gt;</ph> estaba ocupando.</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.MemoryFailPoint.Dispose">
          <source>For more information, see <bpt id="p1">[</bpt>Cleaning Up Unmanaged Resources<ept id="p1">](~/docs/standard/garbage-collection/unmanaged.md)</ept> and <bpt id="p2">[</bpt>Implementing a Dispose Method<ept id="p2">](~/docs/standard/garbage-collection/implementing-dispose.md)</ept>.</source>
          <target state="translated">Para obtener más información, consulte <bpt id="p1">[</bpt>limpiar recursos no administrados<ept id="p1">](~/docs/standard/garbage-collection/unmanaged.md)</ept> y <bpt id="p2">[</bpt>implementa un método Dispose<ept id="p2">](~/docs/standard/garbage-collection/implementing-dispose.md)</ept>.</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.MemoryFailPoint.Dispose">
          <source>Always call <ph id="ph1">&lt;xref:System.Runtime.MemoryFailPoint.Dispose%2A&gt;</ph> before you release your last reference to the <ph id="ph2">&lt;xref:System.Runtime.MemoryFailPoint&gt;</ph>.</source>
          <target state="translated">Realice siempre una llamada a <ph id="ph1">&lt;xref:System.Runtime.MemoryFailPoint.Dispose%2A&gt;</ph> antes de liberar la última referencia al objeto <ph id="ph2">&lt;xref:System.Runtime.MemoryFailPoint&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.MemoryFailPoint.Dispose">
          <source>Otherwise, the resources it is using will not be freed until the garbage collector calls the <ph id="ph1">&lt;xref:System.Runtime.MemoryFailPoint&gt;</ph> object's <ph id="ph2">`Finalize`</ph> method.</source>
          <target state="translated">En caso contrario, los recursos que está usando no se liberarán hasta que el recolector de elementos no utilizados llame al método <ph id="ph1">&lt;xref:System.Runtime.MemoryFailPoint&gt;</ph> del objeto <ph id="ph2">`Finalize`</ph>.</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" uid="M:System.Runtime.MemoryFailPoint.Finalize">
          <source>Ensures that resources are freed and other cleanup operations are performed when the garbage collector reclaims the <ph id="ph1">&lt;see cref="T:System.Runtime.MemoryFailPoint" /&gt;</ph> object.</source>
          <target state="translated">Se asegura de que los recursos se liberan y que se llevan a cabo otras operaciones de limpieza cuando el recolector de elementos no utilizados recupere el objeto <ph id="ph1">&lt;see cref="T:System.Runtime.MemoryFailPoint" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.MemoryFailPoint.Finalize">
          <source>The garbage collector calls the <ph id="ph1">&lt;xref:System.Runtime.MemoryFailPoint.Finalize%2A&gt;</ph> method when the current object is ready to be finalized.</source>
          <target state="translated">El recolector de elementos no utilizados llame el <ph id="ph1">&lt;xref:System.Runtime.MemoryFailPoint.Finalize%2A&gt;</ph> método cuando el objeto actual está listo para ser finalizados.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>