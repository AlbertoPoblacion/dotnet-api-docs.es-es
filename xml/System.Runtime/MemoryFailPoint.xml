<Type Name="MemoryFailPoint" FullName="System.Runtime.MemoryFailPoint">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="61e44bc871caa29f826e0555271beb6a45d2de1c" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="es-ES" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class MemoryFailPoint : System.Runtime.ConstrainedExecution.CriticalFinalizerObject, IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit MemoryFailPoint extends System.Runtime.ConstrainedExecution.CriticalFinalizerObject implements class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.Runtime.MemoryFailPoint" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class MemoryFailPoint&#xA;Inherits CriticalFinalizerObject&#xA;Implements IDisposable" />
  <TypeSignature Language="C++ CLI" Value="public ref class MemoryFailPoint sealed : System::Runtime::ConstrainedExecution::CriticalFinalizerObject, IDisposable" />
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Runtime.ConstrainedExecution.CriticalFinalizerObject</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>
      <span data-ttu-id="60016-101">Comprueba si hay suficientes recursos de memoria antes de ejecutar una operación.</span>
      <span class="sxs-lookup">
        <span data-stu-id="60016-101">Checks for sufficient memory resources before executing an operation.</span>
      </span>
      <span data-ttu-id="60016-102">Esta clase no puede heredarse.</span>
      <span class="sxs-lookup">
        <span data-stu-id="60016-102">This class cannot be inherited.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="60016-103">Esta clase está pensada para su uso en el desarrollo avanzado.</span><span class="sxs-lookup"><span data-stu-id="60016-103">This class is intended for use in advanced development.</span></span>  
  
 <span data-ttu-id="60016-104">Crear una instancia de la <xref:System.Runtime.MemoryFailPoint> clase crea una puerta de memoria.</span><span class="sxs-lookup"><span data-stu-id="60016-104">Creating an instance of the <xref:System.Runtime.MemoryFailPoint> class creates a memory gate.</span></span> <span data-ttu-id="60016-105">Una puerta de memoria busca recursos suficientes antes de iniciar una actividad que requiere una gran cantidad de memoria.</span><span class="sxs-lookup"><span data-stu-id="60016-105">A memory gate checks for sufficient resources before initiating an activity that requires a large amount of memory.</span></span> <span data-ttu-id="60016-106">Fallar la comprobación da como resultado un <xref:System.InsufficientMemoryException> excepción producida.</span><span class="sxs-lookup"><span data-stu-id="60016-106">Failing the check results in an <xref:System.InsufficientMemoryException> exception being thrown.</span></span> <span data-ttu-id="60016-107">Esta excepción se impide que una operación que se inicia y reduce la posibilidad de error debido a la falta de recursos.</span><span class="sxs-lookup"><span data-stu-id="60016-107">This exception prevents an operation from being started and reduces the possibility of failure due to lack of resources.</span></span> <span data-ttu-id="60016-108">Esto permite reduce el rendimiento para evitar un <xref:System.OutOfMemoryException> excepción y cualquier daño de estado que puede derivarse de control incorrecto de la excepción en ubicaciones arbitrarias en el código.</span><span class="sxs-lookup"><span data-stu-id="60016-108">This enables you decrease performance to avoid an <xref:System.OutOfMemoryException> exception and any state corruption that may result from improper handling of the exception in arbitrary locations in your code.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="60016-109">Este tipo implementa la <xref:System.IDisposable> interfaz.</span><span class="sxs-lookup"><span data-stu-id="60016-109">This type implements the <xref:System.IDisposable> interface.</span></span> <span data-ttu-id="60016-110">Cuando haya terminado de utilizar el tipo, debe eliminar del mismo directa o indirectamente.</span><span class="sxs-lookup"><span data-stu-id="60016-110">When you have finished using the type, you should dispose of it either directly or indirectly.</span></span> <span data-ttu-id="60016-111">Para deshacerse del tipo directamente, llame a su <xref:System.IDisposable.Dispose%2A> método en un `try` / `catch` bloque.</span><span class="sxs-lookup"><span data-stu-id="60016-111">To dispose of the type directly, call its <xref:System.IDisposable.Dispose%2A> method in a `try`/`catch` block.</span></span> <span data-ttu-id="60016-112">Para deshacerse de él indirectamente, use una construcción de lenguaje como `using` (en C#) o `Using` (en Visual Basic).</span><span class="sxs-lookup"><span data-stu-id="60016-112">To dispose of it indirectly, use a language construct such as `using` (in C#) or `Using` (in Visual Basic).</span></span> <span data-ttu-id="60016-113">Para obtener más información, vea la sección "Uso de un objeto que implementa IDisposable" en el <xref:System.IDisposable> tema de la interfaz.</span><span class="sxs-lookup"><span data-stu-id="60016-113">For more information, see the "Using an Object that Implements IDisposable" section in the <xref:System.IDisposable> interface topic.</span></span>  
  
 <span data-ttu-id="60016-114">Iniciando un <xref:System.InsufficientMemoryException> excepción, una aplicación puede distinguir entre una estimación que no se puede completar una operación y una operación completada parcialmente que puede haber dañado el estado de la aplicación.</span><span class="sxs-lookup"><span data-stu-id="60016-114">By throwing an <xref:System.InsufficientMemoryException> exception, an application can distinguish between an estimate that an operation will not be able to complete and  a partially completed operation that may have corrupted the application state.</span></span> <span data-ttu-id="60016-115">Esto permite que una aplicación reducir la frecuencia de una directiva de elevación pesimista, lo que puede requerir la descarga actual <xref:System.AppDomain> o reciclar el proceso.</span><span class="sxs-lookup"><span data-stu-id="60016-115">This allows an application to reduce the frequency of a pessimistic escalation policy, which may require unloading the current <xref:System.AppDomain> or recycling the process.</span></span>  
  
 <span data-ttu-id="60016-116"><xref:System.Runtime.MemoryFailPoint> comprueba si están disponibles en toda la recopilación de elementos no utilizados montones suficiente memoria y espacio de direcciones virtuales consecutivos y pueden aumentar el tamaño del archivo de intercambio.</span><span class="sxs-lookup"><span data-stu-id="60016-116"><xref:System.Runtime.MemoryFailPoint> checks to see whether sufficient memory and consecutive virtual address space are available in all garbage collection heaps, and may increase the size of the swap file.</span></span>  <span data-ttu-id="60016-117"><xref:System.Runtime.MemoryFailPoint> otorga ninguna garantía relativa a la disponibilidad a largo plazo de la memoria durante la vigencia de la puerta, pero los autores de llamadas debe utilizar siempre el <xref:System.Runtime.MemoryFailPoint.Dispose%2A> método para asegurarse de que los recursos asociados <xref:System.Runtime.MemoryFailPoint> se liberan.</span><span class="sxs-lookup"><span data-stu-id="60016-117"><xref:System.Runtime.MemoryFailPoint> makes no guarantees regarding the long-term availability of the memory during the lifetime of the gate, but callers should always use the <xref:System.Runtime.MemoryFailPoint.Dispose%2A> method to ensure that resources associated with <xref:System.Runtime.MemoryFailPoint> are released.</span></span>  
  
 <span data-ttu-id="60016-118">Para utilizar una puerta de memoria, primero debe crear un <xref:System.Runtime.MemoryFailPoint> de objetos y especificar el número de megabytes (MB) de memoria que se espera que la siguiente operación de usar.</span><span class="sxs-lookup"><span data-stu-id="60016-118">To use a memory gate, you must create a <xref:System.Runtime.MemoryFailPoint> object and specify the number of megabytes (MB) of memory that the next operation is expected to use.</span></span> <span data-ttu-id="60016-119">Si no hay suficiente memoria disponible, un <xref:System.InsufficientMemoryException> se produce la excepción.</span><span class="sxs-lookup"><span data-stu-id="60016-119">If enough memory is not available, an <xref:System.InsufficientMemoryException> exception is thrown.</span></span>  
  
 <span data-ttu-id="60016-120">El parámetro del constructor debe ser un entero positivo.</span><span class="sxs-lookup"><span data-stu-id="60016-120">The parameter of the constructor must be a positive integer.</span></span> <span data-ttu-id="60016-121">Un valor negativo provoca un <xref:System.ArgumentOutOfRangeException> excepción.</span><span class="sxs-lookup"><span data-stu-id="60016-121">A negative value raises an <xref:System.ArgumentOutOfRangeException> exception.</span></span>  
  
 <span data-ttu-id="60016-122"><xref:System.Runtime.MemoryFailPoint> funciona en una granularidad de 16 MB.</span><span class="sxs-lookup"><span data-stu-id="60016-122"><xref:System.Runtime.MemoryFailPoint> operates at a granularity of 16 MB.</span></span> <span data-ttu-id="60016-123">Cualquier valor menor que 16 MB se trata como 16 MB y otros valores se tratan como el múltiplo más grande siguiente de 16 MB.</span><span class="sxs-lookup"><span data-stu-id="60016-123">Any values smaller than 16 MB are treated as 16 MB, and other values are treated as the next largest multiple of 16 MB.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="60016-124"><xref:System.Runtime.MemoryFailPoint> permite que una aplicación se ralentice para evitar quedarse sin memoria de una manera dañina.</span><span class="sxs-lookup"><span data-stu-id="60016-124"><xref:System.Runtime.MemoryFailPoint> enables an application to slow itself to avoid running out of memory in a corrupting manner.</span></span>  <span data-ttu-id="60016-125">Se debe usar dentro de un ámbito léxico.</span><span class="sxs-lookup"><span data-stu-id="60016-125">It should be used within a lexical scope.</span></span>  <span data-ttu-id="60016-126">El ejemplo siguiente inicia subprocesos para procesar los elementos en una cola de trabajo.</span><span class="sxs-lookup"><span data-stu-id="60016-126">The following example launches threads to process items in a work queue.</span></span>  <span data-ttu-id="60016-127">Antes de que cada subproceso se inicia, los recursos de memoria disponible se comprueban con <xref:System.Runtime.MemoryFailPoint>.</span><span class="sxs-lookup"><span data-stu-id="60016-127">Before each thread is launched, the available memory resources are checked using <xref:System.Runtime.MemoryFailPoint>.</span></span>  <span data-ttu-id="60016-128">Si se produce una excepción, el método principal espera hasta que haya memoria disponible antes de iniciar el subproceso siguiente.</span><span class="sxs-lookup"><span data-stu-id="60016-128">If an exception is thrown, the main method waits until memory is available before launching the next thread.</span></span>  
  
 [!code-csharp[MemoryFailPoint#1](~/samples/snippets/csharp/VS_Snippets_CLR/MemoryFailPoint/CS/program.cs#1)]  
  
 ]]></format>
    </remarks>
    <permission cref="T:System.Security.Permissions.SecurityPermission">
      <span data-ttu-id="60016-129">para llamar a código no administrado.</span>
      <span class="sxs-lookup">
        <span data-stu-id="60016-129">for calling unmanaged code.</span>
      </span>
      <span data-ttu-id="60016-130">Enumeración asociada: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" />.</span>
      <span class="sxs-lookup">
        <span data-stu-id="60016-130">Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" />.</span>
      </span>
      <span data-ttu-id="60016-131">Acción de seguridad: <see cref="F:System.Security.Permissions.SecurityAction.LinkDemand" /></span>
      <span class="sxs-lookup">
        <span data-stu-id="60016-131">Security action: <see cref="F:System.Security.Permissions.SecurityAction.LinkDemand" /></span>
      </span>
    </permission>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public MemoryFailPoint (int sizeInMegabytes);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 sizeInMegabytes) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.MemoryFailPoint.#ctor(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (sizeInMegabytes As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; MemoryFailPoint(int sizeInMegabytes);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="sizeInMegabytes" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="sizeInMegabytes">
          <span data-ttu-id="60016-132">Tamaño de memoria necesario, en megabytes.</span>
          <span class="sxs-lookup">
            <span data-stu-id="60016-132">The required memory size, in megabytes.</span>
          </span>
          <span data-ttu-id="60016-133">Este valor debe ser positivo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="60016-133">This must be a positive value.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="60016-134">Inicializa una nueva instancia de la clase <see cref="T:System.Runtime.MemoryFailPoint" />, especificando la cantidad de memoria necesaria para una ejecución sin problemas.</span>
          <span class="sxs-lookup">
            <span data-stu-id="60016-134">Initializes a new instance of the <see cref="T:System.Runtime.MemoryFailPoint" /> class, specifying the amount of memory required for successful execution.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="60016-135">La cantidad de memoria utilizada por la aplicación para procesar un elemento de trabajo puede determinarse empíricamente.</span><span class="sxs-lookup"><span data-stu-id="60016-135">The amount of memory used by your application to process a work item can be determined empirically.</span></span>  <span data-ttu-id="60016-136">Para calcular la cantidad de memoria necesaria para procesar una solicitud para la aplicación, considere el uso de la <xref:System.GC.GetTotalMemory%2A?displayProperty=nameWithType> método para determinar la cantidad de memoria disponible antes y después de llamar al método que procesa el elemento de trabajo.</span><span class="sxs-lookup"><span data-stu-id="60016-136">To estimate the amount of memory your application needs to process a request, consider using the <xref:System.GC.GetTotalMemory%2A?displayProperty=nameWithType> method to determine the amount of memory available before and after calling the method that processes the work item.</span></span> <span data-ttu-id="60016-137">Consulte la <xref:System.Runtime.MemoryFailPoint> clase para obtener un ejemplo de código que determina dinámicamente el valor de la `sizeInMegabytes` parámetro.</span><span class="sxs-lookup"><span data-stu-id="60016-137">See the <xref:System.Runtime.MemoryFailPoint> class for a code example that dynamically determines the value for the `sizeInMegabytes` parameter.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="60016-138">En el ejemplo siguiente se muestra cómo determinar la cantidad de memoria que un método requiere cuando se ejecuta.</span><span class="sxs-lookup"><span data-stu-id="60016-138">The following example demonstrates how to determine the amount of memory a method requires when executing.</span></span> <span data-ttu-id="60016-139">Este ejemplo de código forma parte de un ejemplo mayor proporcionado para el <xref:System.Runtime.MemoryFailPoint> clase.</span><span class="sxs-lookup"><span data-stu-id="60016-139">This code example is part of a larger example provided for the <xref:System.Runtime.MemoryFailPoint> class.</span></span>  
  
 [!code-csharp[MemoryFailPoint#2](~/samples/snippets/csharp/VS_Snippets_CLR/MemoryFailPoint/CS/program.cs#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="60016-140">El tamaño de memoria especificado es un valor negativo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="60016-140">The specified memory size is negative.</span>
          </span>
        </exception>
        <exception cref="T:System.InsufficientMemoryException">
          <span data-ttu-id="60016-141">No hay memoria suficiente para comenzar la ejecución del código protegido por la puerta.</span>
          <span class="sxs-lookup">
            <span data-stu-id="60016-141">There is insufficient memory to begin execution of the code protected by the gate.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute">
          <span data-ttu-id="60016-142">requiere plena confianza para el llamador inmediato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="60016-142">requires full trust for the immediate caller.</span>
          </span>
          <span data-ttu-id="60016-143">Este miembro no puede usarse por código de confianza parcial o transparente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="60016-143">This member cannot be used by partially trusted or transparent code.</span>
          </span>
        </permission>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.MemoryFailPoint.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Dispose();" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="60016-144">Libera todos los recursos que usa <see cref="T:System.Runtime.MemoryFailPoint" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="60016-144">Releases all resources used by the <see cref="T:System.Runtime.MemoryFailPoint" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="60016-145">Llame a <xref:System.Runtime.MemoryFailPoint.Dispose%2A> cuando haya terminado de usar <xref:System.Runtime.MemoryFailPoint>.</span><span class="sxs-lookup"><span data-stu-id="60016-145">Call <xref:System.Runtime.MemoryFailPoint.Dispose%2A> when you are finished using the <xref:System.Runtime.MemoryFailPoint>.</span></span> <span data-ttu-id="60016-146">El método <xref:System.Runtime.MemoryFailPoint.Dispose%2A> deja el <xref:System.Runtime.MemoryFailPoint> en un estado no utilizable.</span><span class="sxs-lookup"><span data-stu-id="60016-146">The <xref:System.Runtime.MemoryFailPoint.Dispose%2A> method leaves the <xref:System.Runtime.MemoryFailPoint> in an unusable state.</span></span> <span data-ttu-id="60016-147">Después de llamar a <xref:System.Runtime.MemoryFailPoint>, debe liberar todas las referencias a la <xref:System.Runtime.MemoryFailPoint> para que el recolector de elementos no utilizados pueda reclamar la memoria que el <xref:System.Runtime.MemoryFailPoint> estaba ocupando.</span><span class="sxs-lookup"><span data-stu-id="60016-147">After calling <xref:System.Runtime.MemoryFailPoint>, you must release all references to the <xref:System.Runtime.MemoryFailPoint> so the garbage collector can reclaim the memory that the <xref:System.Runtime.MemoryFailPoint> was occupying.</span></span> <span data-ttu-id="60016-148">Para obtener más información, consulte [limpiar recursos no administrados](~/docs/standard/garbage-collection/unmanaged.md) y [implementa un método Dispose](~/docs/standard/garbage-collection/implementing-dispose.md).</span><span class="sxs-lookup"><span data-stu-id="60016-148">For more information, see [Cleaning Up Unmanaged Resources](~/docs/standard/garbage-collection/unmanaged.md) and [Implementing a Dispose Method](~/docs/standard/garbage-collection/implementing-dispose.md).</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="60016-149">Realice siempre una llamada a <xref:System.Runtime.MemoryFailPoint.Dispose%2A> antes de liberar la última referencia al objeto <xref:System.Runtime.MemoryFailPoint>.</span><span class="sxs-lookup"><span data-stu-id="60016-149">Always call <xref:System.Runtime.MemoryFailPoint.Dispose%2A> before you release your last reference to the <xref:System.Runtime.MemoryFailPoint>.</span></span> <span data-ttu-id="60016-150">En caso contrario, los recursos que está usando no se liberarán hasta que el recolector de elementos no utilizados llame al método <xref:System.Runtime.MemoryFailPoint> del objeto `Finalize`.</span><span class="sxs-lookup"><span data-stu-id="60016-150">Otherwise, the resources it is using will not be freed until the garbage collector calls the <xref:System.Runtime.MemoryFailPoint> object's `Finalize` method.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Finalize">
      <MemberSignature Language="C#" Value="~MemoryFailPoint ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Finalize() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.MemoryFailPoint.Finalize" />
      <MemberSignature Language="VB.NET" Value="Finalize ()" />
      <MemberSignature Language="C++ CLI" Value="!MemoryFailPoint ()" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="60016-151">Se asegura de que los recursos se liberan y que se llevan a cabo otras operaciones de limpieza cuando el recolector de elementos no utilizados recupere el objeto <see cref="T:System.Runtime.MemoryFailPoint" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="60016-151">Ensures that resources are freed and other cleanup operations are performed when the garbage collector reclaims the <see cref="T:System.Runtime.MemoryFailPoint" /> object.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="60016-152">El recolector de elementos no utilizados llame el <xref:System.Runtime.MemoryFailPoint.Finalize%2A> método cuando el objeto actual está listo para ser finalizados.</span><span class="sxs-lookup"><span data-stu-id="60016-152">The garbage collector calls the <xref:System.Runtime.MemoryFailPoint.Finalize%2A> method when the current object is ready to be finalized.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Object.Finalize" />
      </Docs>
    </Member>
  </Members>
</Type>